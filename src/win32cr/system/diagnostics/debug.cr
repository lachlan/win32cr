require "../../foundation.cr"
require "../../system/threading.cr"
require "../../system/com.cr"
require "../../system/memory.cr"
require "../../system/kernel.cr"
require "../../storage/filesystem.cr"
require "../../system/time.cr"
require "../../system/com/structuredstorage.cr"
require "../../system/ole.cr"
require "../../security/wintrust.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:dbgeng.dll")]
@[Link(ldflags: "/DELAYLOAD:dbgmodel.dll")]
@[Link(ldflags: "/DELAYLOAD:onecore.dll")]
@[Link(ldflags: "/DELAYLOAD:advapi32.dll")]
@[Link(ldflags: "/DELAYLOAD:dbghelp.dll")]
@[Link(ldflags: "/DELAYLOAD:imagehlp.dll")]
@[Link(ldflags: "/DELAYLOAD:user32.dll")]
{% else %}
@[Link("dbgeng")]
@[Link("dbgmodel")]
@[Link("onecore")]
@[Link("advapi32")]
@[Link("dbghelp")]
@[Link("imagehlp")]
@[Link("user32")]
{% end %}
lib LibWin32
  WOW64_CONTEXT_i386 = 65536_u32
  WOW64_CONTEXT_i486 = 65536_u32
  WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728_u32
  WOW64_CONTEXT_SERVICE_ACTIVE = 268435456_u32
  WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824_u32
  WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648_u32
  WOW64_SIZE_OF_80387_REGISTERS = 80_u32
  WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512_u32
  ERROR_DBG_CANCELLED = 3221226695_u32
  ERROR_DBG_TIMEOUT = 3221226932_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS = 1_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 2_u32
  DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS = 4_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND = 1_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 2_u32
  DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL = 4_u32
  DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2_u32
  DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3_u32
  DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4_u32
  DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5_u32
  DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6_u32
  DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7_u32
  DEBUG_REQUEST_TARGET_CAN_DETACH = 8_u32
  DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9_u32
  DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10_u32
  DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11_u32
  DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12_u32
  DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13_u32
  DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14_u32
  DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15_u32
  DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16_u32
  DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17_u32
  DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18_u32
  DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19_u32
  DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION = 20_u32
  DEBUG_REQUEST_GET_DUMP_HEADER = 21_u32
  DEBUG_REQUEST_SET_DUMP_HEADER = 22_u32
  DEBUG_REQUEST_MIDORI = 23_u32
  DEBUG_REQUEST_PROCESS_DESCRIPTORS = 24_u32
  DEBUG_REQUEST_MISC_INFORMATION = 25_u32
  DEBUG_REQUEST_OPEN_PROCESS_TOKEN = 26_u32
  DEBUG_REQUEST_OPEN_THREAD_TOKEN = 27_u32
  DEBUG_REQUEST_DUPLICATE_TOKEN = 28_u32
  DEBUG_REQUEST_QUERY_INFO_TOKEN = 29_u32
  DEBUG_REQUEST_CLOSE_TOKEN = 30_u32
  DEBUG_REQUEST_WOW_PROCESS = 31_u32
  DEBUG_REQUEST_WOW_MODULE = 32_u32
  DEBUG_LIVE_USER_NON_INVASIVE = 33_u32
  DEBUG_REQUEST_RESUME_THREAD = 34_u32
  DEBUG_REQUEST_INLINE_QUERY = 35_u32
  DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE = 36_u32
  DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION = 37_u32
  DEBUG_REQUEST_GET_MODULE_ARCHITECTURE = 38_u32
  DEBUG_SRCFILE_SYMBOL_TOKEN = 0_u32
  DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1_u32
  DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO = 2_u32
  DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0_u32
  DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1_u32
  DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2_u32
  DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3_u32
  DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0_u32
  DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1_u32
  DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2_u32
  DEBUG_TBINFO_EXIT_STATUS = 1_u32
  DEBUG_TBINFO_PRIORITY_CLASS = 2_u32
  DEBUG_TBINFO_PRIORITY = 4_u32
  DEBUG_TBINFO_TIMES = 8_u32
  DEBUG_TBINFO_START_OFFSET = 16_u32
  DEBUG_TBINFO_AFFINITY = 32_u32
  DEBUG_TBINFO_ALL = 63_u32
  DEBUG_BREAKPOINT_CODE = 0_u32
  DEBUG_BREAKPOINT_DATA = 1_u32
  DEBUG_BREAKPOINT_TIME = 2_u32
  DEBUG_BREAKPOINT_INLINE = 3_u32
  DEBUG_BREAKPOINT_GO_ONLY = 1_u32
  DEBUG_BREAKPOINT_DEFERRED = 2_u32
  DEBUG_BREAKPOINT_ENABLED = 4_u32
  DEBUG_BREAKPOINT_ADDER_ONLY = 8_u32
  DEBUG_BREAKPOINT_ONE_SHOT = 16_u32
  DEBUG_BREAK_READ = 1_u32
  DEBUG_BREAK_WRITE = 2_u32
  DEBUG_BREAK_EXECUTE = 4_u32
  DEBUG_BREAK_IO = 8_u32
  DEBUG_ATTACH_KERNEL_CONNECTION = 0_u32
  DEBUG_ATTACH_LOCAL_KERNEL = 1_u32
  DEBUG_ATTACH_EXDI_DRIVER = 2_u32
  DEBUG_ATTACH_INSTALL_DRIVER = 4_u32
  DEBUG_GET_PROC_DEFAULT = 0_u32
  DEBUG_GET_PROC_FULL_MATCH = 1_u32
  DEBUG_GET_PROC_ONLY_MATCH = 2_u32
  DEBUG_GET_PROC_SERVICE_NAME = 4_u32
  DEBUG_PROC_DESC_DEFAULT = 0_u32
  DEBUG_PROC_DESC_NO_PATHS = 1_u32
  DEBUG_PROC_DESC_NO_SERVICES = 2_u32
  DEBUG_PROC_DESC_NO_MTS_PACKAGES = 4_u32
  DEBUG_PROC_DESC_NO_COMMAND_LINE = 8_u32
  DEBUG_PROC_DESC_NO_SESSION_ID = 16_u32
  DEBUG_PROC_DESC_NO_USER_NAME = 32_u32
  DEBUG_PROC_DESC_WITH_PACKAGEFAMILY = 64_u32
  DEBUG_ATTACH_DEFAULT = 0_u32
  DEBUG_ATTACH_NONINVASIVE = 1_u32
  DEBUG_ATTACH_EXISTING = 2_u32
  DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND = 4_u32
  DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 8_u32
  DEBUG_ATTACH_INVASIVE_RESUME_PROCESS = 16_u32
  DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 32_u32
  DEBUG_ECREATE_PROCESS_DEFAULT = 0_u32
  DEBUG_ECREATE_PROCESS_INHERIT_HANDLES = 1_u32
  DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS = 2_u32
  DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 4_u32
  DEBUG_PROCESS_DETACH_ON_EXIT = 1_u32
  DEBUG_PROCESS_ONLY_THIS_PROCESS = 2_u32
  DEBUG_CONNECT_SESSION_DEFAULT = 0_u32
  DEBUG_CONNECT_SESSION_NO_VERSION = 1_u32
  DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 2_u32
  DEBUG_SERVERS_DEBUGGER = 1_u32
  DEBUG_SERVERS_PROCESS = 2_u32
  DEBUG_SERVERS_ALL = 3_u32
  DEBUG_END_PASSIVE = 0_u32
  DEBUG_END_ACTIVE_TERMINATE = 1_u32
  DEBUG_END_ACTIVE_DETACH = 2_u32
  DEBUG_END_REENTRANT = 3_u32
  DEBUG_END_DISCONNECT = 4_u32
  DEBUG_OUTPUT_NORMAL = 1_u32
  DEBUG_OUTPUT_ERROR = 2_u32
  DEBUG_OUTPUT_WARNING = 4_u32
  DEBUG_OUTPUT_VERBOSE = 8_u32
  DEBUG_OUTPUT_PROMPT = 16_u32
  DEBUG_OUTPUT_PROMPT_REGISTERS = 32_u32
  DEBUG_OUTPUT_EXTENSION_WARNING = 64_u32
  DEBUG_OUTPUT_DEBUGGEE = 128_u32
  DEBUG_OUTPUT_DEBUGGEE_PROMPT = 256_u32
  DEBUG_OUTPUT_SYMBOLS = 512_u32
  DEBUG_OUTPUT_STATUS = 1024_u32
  DEBUG_OUTPUT_XML = 2048_u32
  DEBUG_IOUTPUT_KD_PROTOCOL = 2147483648_u32
  DEBUG_IOUTPUT_REMOTING = 1073741824_u32
  DEBUG_IOUTPUT_BREAKPOINT = 536870912_u32
  DEBUG_IOUTPUT_EVENT = 268435456_u32
  DEBUG_IOUTPUT_ADDR_TRANSLATE = 134217728_u32
  DEBUG_OUTPUT_IDENTITY_DEFAULT = 0_u32
  DEBUG_CLIENT_UNKNOWN = 0_u32
  DEBUG_CLIENT_VSINT = 1_u32
  DEBUG_CLIENT_NTSD = 2_u32
  DEBUG_CLIENT_NTKD = 3_u32
  DEBUG_CLIENT_CDB = 4_u32
  DEBUG_CLIENT_KD = 5_u32
  DEBUG_CLIENT_WINDBG = 6_u32
  DEBUG_CLIENT_WINIDE = 7_u32
  DEBUG_FORMAT_DEFAULT = 0_u32
  DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES = 268435456_u32
  DEBUG_FORMAT_WRITE_CAB = 536870912_u32
  DEBUG_FORMAT_CAB_SECONDARY_FILES = 1073741824_u32
  DEBUG_FORMAT_NO_OVERWRITE = 2147483648_u32
  DEBUG_FORMAT_USER_SMALL_FULL_MEMORY = 1_u32
  DEBUG_FORMAT_USER_SMALL_HANDLE_DATA = 2_u32
  DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES = 4_u32
  DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY = 8_u32
  DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS = 16_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY = 32_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_PATHS = 64_u32
  DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA = 128_u32
  DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 256_u32
  DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA = 512_u32
  DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO = 1024_u32
  DEBUG_FORMAT_USER_SMALL_THREAD_INFO = 2048_u32
  DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS = 4096_u32
  DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE = 8192_u32
  DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE = 16384_u32
  DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS = 32768_u32
  DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE = 65536_u32
  DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT = 131072_u32
  DEBUG_FORMAT_USER_SMALL_IPT_TRACE = 262144_u32
  DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM = 134217728_u32
  DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES = 268435456_u32
  DEBUG_DUMP_FILE_BASE = 4294967295_u32
  DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0_u32
  DEBUG_DUMP_FILE_LOAD_FAILED_INDEX = 4294967295_u32
  DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 4294967294_u32
  DEBUG_STATUS_NO_CHANGE = 0_u32
  DEBUG_STATUS_GO = 1_u32
  DEBUG_STATUS_GO_HANDLED = 2_u32
  DEBUG_STATUS_GO_NOT_HANDLED = 3_u32
  DEBUG_STATUS_STEP_OVER = 4_u32
  DEBUG_STATUS_STEP_INTO = 5_u32
  DEBUG_STATUS_BREAK = 6_u32
  DEBUG_STATUS_NO_DEBUGGEE = 7_u32
  DEBUG_STATUS_STEP_BRANCH = 8_u32
  DEBUG_STATUS_IGNORE_EVENT = 9_u32
  DEBUG_STATUS_RESTART_REQUESTED = 10_u32
  DEBUG_STATUS_REVERSE_GO = 11_u32
  DEBUG_STATUS_REVERSE_STEP_BRANCH = 12_u32
  DEBUG_STATUS_REVERSE_STEP_OVER = 13_u32
  DEBUG_STATUS_REVERSE_STEP_INTO = 14_u32
  DEBUG_STATUS_OUT_OF_SYNC = 15_u32
  DEBUG_STATUS_WAIT_INPUT = 16_u32
  DEBUG_STATUS_TIMEOUT = 17_u32
  DEBUG_STATUS_MASK = 31_u32
  DEBUG_STATUS_INSIDE_WAIT = 4294967296_u64
  DEBUG_STATUS_WAIT_TIMEOUT = 8589934592_u64
  DEBUG_OUTCTL_THIS_CLIENT = 0_u32
  DEBUG_OUTCTL_ALL_CLIENTS = 1_u32
  DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 2_u32
  DEBUG_OUTCTL_IGNORE = 3_u32
  DEBUG_OUTCTL_LOG_ONLY = 4_u32
  DEBUG_OUTCTL_SEND_MASK = 7_u32
  DEBUG_OUTCTL_NOT_LOGGED = 8_u32
  DEBUG_OUTCTL_OVERRIDE_MASK = 16_u32
  DEBUG_OUTCTL_DML = 32_u32
  DEBUG_OUTCTL_AMBIENT_DML = 4294967294_u32
  DEBUG_OUTCTL_AMBIENT_TEXT = 4294967295_u32
  DEBUG_OUTCTL_AMBIENT = 4294967295_u32
  DEBUG_INTERRUPT_ACTIVE = 0_u32
  DEBUG_INTERRUPT_PASSIVE = 1_u32
  DEBUG_INTERRUPT_EXIT = 2_u32
  DEBUG_CURRENT_DEFAULT = 15_u32
  DEBUG_CURRENT_SYMBOL = 1_u32
  DEBUG_CURRENT_DISASM = 2_u32
  DEBUG_CURRENT_REGISTERS = 4_u32
  DEBUG_CURRENT_SOURCE_LINE = 8_u32
  DEBUG_DISASM_EFFECTIVE_ADDRESS = 1_u32
  DEBUG_DISASM_MATCHING_SYMBOLS = 2_u32
  DEBUG_DISASM_SOURCE_LINE_NUMBER = 4_u32
  DEBUG_DISASM_SOURCE_FILE_NAME = 8_u32
  DEBUG_LEVEL_SOURCE = 0_u32
  DEBUG_LEVEL_ASSEMBLY = 1_u32
  DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION = 1_u32
  DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS = 2_u32
  DEBUG_ENGOPT_ALLOW_NETWORK_PATHS = 4_u32
  DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS = 8_u32
  DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS = 16_u32
  DEBUG_ENGOPT_INITIAL_BREAK = 32_u32
  DEBUG_ENGOPT_INITIAL_MODULE_BREAK = 64_u32
  DEBUG_ENGOPT_FINAL_BREAK = 128_u32
  DEBUG_ENGOPT_NO_EXECUTE_REPEAT = 256_u32
  DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 512_u32
  DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 1024_u32
  DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS = 2048_u32
  DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS = 4096_u32
  DEBUG_ENGOPT_KD_QUIET_MODE = 8192_u32
  DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT = 16384_u32
  DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD = 32768_u32
  DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS = 65536_u32
  DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 131072_u32
  DEBUG_ENGOPT_PREFER_DML = 262144_u32
  DEBUG_ENGOPT_DISABLESQM = 524288_u32
  DEBUG_ENGOPT_DISABLE_STEPLINES_OPTIONS = 2097152_u32
  DEBUG_ENGOPT_DEBUGGING_SENSITIVE_DATA = 4194304_u32
  DEBUG_ENGOPT_PREFER_TRACE_FILES = 8388608_u32
  DEBUG_ENGOPT_ALL = 15728639_u32
  DEBUG_ANY_ID = 4294967295_u32
  DBG_FRAME_DEFAULT = 0_u32
  DBG_FRAME_IGNORE_INLINE = 4294967295_u32
  STACK_FRAME_TYPE_INIT = 0_u32
  STACK_FRAME_TYPE_STACK = 1_u32
  STACK_FRAME_TYPE_INLINE = 2_u32
  STACK_FRAME_TYPE_RA = 128_u32
  STACK_FRAME_TYPE_IGNORE = 255_u32
  DEBUG_STACK_ARGUMENTS = 1_u32
  DEBUG_STACK_FUNCTION_INFO = 2_u32
  DEBUG_STACK_SOURCE_LINE = 4_u32
  DEBUG_STACK_FRAME_ADDRESSES = 8_u32
  DEBUG_STACK_COLUMN_NAMES = 16_u32
  DEBUG_STACK_NONVOLATILE_REGISTERS = 32_u32
  DEBUG_STACK_FRAME_NUMBERS = 64_u32
  DEBUG_STACK_PARAMETERS = 128_u32
  DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 256_u32
  DEBUG_STACK_FRAME_MEMORY_USAGE = 512_u32
  DEBUG_STACK_PARAMETERS_NEWLINE = 1024_u32
  DEBUG_STACK_DML = 2048_u32
  DEBUG_STACK_FRAME_OFFSETS = 4096_u32
  DEBUG_STACK_PROVIDER = 8192_u32
  DEBUG_STACK_FRAME_ARCH = 16384_u32
  DEBUG_CLASS_UNINITIALIZED = 0_u32
  DEBUG_CLASS_KERNEL = 1_u32
  DEBUG_CLASS_USER_WINDOWS = 2_u32
  DEBUG_CLASS_IMAGE_FILE = 3_u32
  DEBUG_DUMP_SMALL = 1024_u32
  DEBUG_DUMP_DEFAULT = 1025_u32
  DEBUG_DUMP_FULL = 1026_u32
  DEBUG_DUMP_IMAGE_FILE = 1027_u32
  DEBUG_DUMP_TRACE_LOG = 1028_u32
  DEBUG_DUMP_WINDOWS_CE = 1029_u32
  DEBUG_DUMP_ACTIVE = 1030_u32
  DEBUG_KERNEL_CONNECTION = 0_u32
  DEBUG_KERNEL_LOCAL = 1_u32
  DEBUG_KERNEL_EXDI_DRIVER = 2_u32
  DEBUG_KERNEL_IDNA = 3_u32
  DEBUG_KERNEL_INSTALL_DRIVER = 4_u32
  DEBUG_KERNEL_REPT = 5_u32
  DEBUG_KERNEL_SMALL_DUMP = 1024_u32
  DEBUG_KERNEL_DUMP = 1025_u32
  DEBUG_KERNEL_ACTIVE_DUMP = 1030_u32
  DEBUG_KERNEL_FULL_DUMP = 1026_u32
  DEBUG_KERNEL_TRACE_LOG = 1028_u32
  DEBUG_USER_WINDOWS_PROCESS = 0_u32
  DEBUG_USER_WINDOWS_PROCESS_SERVER = 1_u32
  DEBUG_USER_WINDOWS_IDNA = 2_u32
  DEBUG_USER_WINDOWS_REPT = 3_u32
  DEBUG_USER_WINDOWS_SMALL_DUMP = 1024_u32
  DEBUG_USER_WINDOWS_DUMP = 1025_u32
  DEBUG_USER_WINDOWS_DUMP_WINDOWS_CE = 1029_u32
  DEBUG_EXTENSION_AT_ENGINE = 0_u32
  DEBUG_EXECUTE_DEFAULT = 0_u32
  DEBUG_EXECUTE_ECHO = 1_u32
  DEBUG_EXECUTE_NOT_LOGGED = 2_u32
  DEBUG_EXECUTE_NO_REPEAT = 4_u32
  DEBUG_EXECUTE_USER_TYPED = 8_u32
  DEBUG_EXECUTE_USER_CLICKED = 16_u32
  DEBUG_EXECUTE_EXTENSION = 32_u32
  DEBUG_EXECUTE_INTERNAL = 64_u32
  DEBUG_EXECUTE_SCRIPT = 128_u32
  DEBUG_EXECUTE_TOOLBAR = 256_u32
  DEBUG_EXECUTE_MENU = 512_u32
  DEBUG_EXECUTE_HOTKEY = 1024_u32
  DEBUG_EXECUTE_EVENT = 2048_u32
  DEBUG_FILTER_CREATE_THREAD = 0_u32
  DEBUG_FILTER_EXIT_THREAD = 1_u32
  DEBUG_FILTER_CREATE_PROCESS = 2_u32
  DEBUG_FILTER_EXIT_PROCESS = 3_u32
  DEBUG_FILTER_LOAD_MODULE = 4_u32
  DEBUG_FILTER_UNLOAD_MODULE = 5_u32
  DEBUG_FILTER_SYSTEM_ERROR = 6_u32
  DEBUG_FILTER_INITIAL_BREAKPOINT = 7_u32
  DEBUG_FILTER_INITIAL_MODULE_LOAD = 8_u32
  DEBUG_FILTER_DEBUGGEE_OUTPUT = 9_u32
  DEBUG_FILTER_BREAK = 0_u32
  DEBUG_FILTER_SECOND_CHANCE_BREAK = 1_u32
  DEBUG_FILTER_OUTPUT = 2_u32
  DEBUG_FILTER_IGNORE = 3_u32
  DEBUG_FILTER_REMOVE = 4_u32
  DEBUG_FILTER_GO_HANDLED = 0_u32
  DEBUG_FILTER_GO_NOT_HANDLED = 1_u32
  DEBUG_WAIT_DEFAULT = 0_u32
  DEBUG_VALUE_INVALID = 0_u32
  DEBUG_VALUE_INT8 = 1_u32
  DEBUG_VALUE_INT16 = 2_u32
  DEBUG_VALUE_INT32 = 3_u32
  DEBUG_VALUE_INT64 = 4_u32
  DEBUG_VALUE_FLOAT32 = 5_u32
  DEBUG_VALUE_FLOAT64 = 6_u32
  DEBUG_VALUE_FLOAT80 = 7_u32
  DEBUG_VALUE_FLOAT82 = 8_u32
  DEBUG_VALUE_FLOAT128 = 9_u32
  DEBUG_VALUE_VECTOR64 = 10_u32
  DEBUG_VALUE_VECTOR128 = 11_u32
  DEBUG_VALUE_TYPES = 12_u32
  DEBUG_OUT_TEXT_REPL_DEFAULT = 0_u32
  DEBUG_ASMOPT_DEFAULT = 0_u32
  DEBUG_ASMOPT_VERBOSE = 1_u32
  DEBUG_ASMOPT_NO_CODE_BYTES = 2_u32
  DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 4_u32
  DEBUG_ASMOPT_SOURCE_LINE_NUMBER = 8_u32
  DEBUG_EXPR_MASM = 0_u32
  DEBUG_EXPR_CPLUSPLUS = 1_u32
  DEBUG_EINDEX_NAME = 0_u32
  DEBUG_EINDEX_FROM_START = 0_u32
  DEBUG_EINDEX_FROM_END = 1_u32
  DEBUG_EINDEX_FROM_CURRENT = 2_u32
  DEBUG_LOG_DEFAULT = 0_u32
  DEBUG_LOG_APPEND = 1_u32
  DEBUG_LOG_UNICODE = 2_u32
  DEBUG_LOG_DML = 4_u32
  DEBUG_SYSVERSTR_SERVICE_PACK = 0_u32
  DEBUG_SYSVERSTR_BUILD = 1_u32
  DEBUG_MANAGED_DISABLED = 0_u32
  DEBUG_MANAGED_ALLOWED = 1_u32
  DEBUG_MANAGED_DLL_LOADED = 2_u32
  DEBUG_MANSTR_NONE = 0_u32
  DEBUG_MANSTR_LOADED_SUPPORT_DLL = 1_u32
  DEBUG_MANSTR_LOAD_STATUS = 2_u32
  DEBUG_MANRESET_DEFAULT = 0_u32
  DEBUG_MANRESET_LOAD_DLL = 1_u32
  DEBUG_EXEC_FLAGS_NONBLOCK = 1_u32
  DEBUG_DATA_SPACE_VIRTUAL = 0_u32
  DEBUG_DATA_SPACE_PHYSICAL = 1_u32
  DEBUG_DATA_SPACE_CONTROL = 2_u32
  DEBUG_DATA_SPACE_IO = 3_u32
  DEBUG_DATA_SPACE_MSR = 4_u32
  DEBUG_DATA_SPACE_BUS_DATA = 5_u32
  DEBUG_DATA_SPACE_DEBUGGER_DATA = 6_u32
  DEBUG_DATA_SPACE_COUNT = 7_u32
  DEBUG_DATA_KernBase = 24_u32
  DEBUG_DATA_BreakpointWithStatusAddr = 32_u32
  DEBUG_DATA_SavedContextAddr = 40_u32
  DEBUG_DATA_KiCallUserModeAddr = 56_u32
  DEBUG_DATA_KeUserCallbackDispatcherAddr = 64_u32
  DEBUG_DATA_PsLoadedModuleListAddr = 72_u32
  DEBUG_DATA_PsActiveProcessHeadAddr = 80_u32
  DEBUG_DATA_PspCidTableAddr = 88_u32
  DEBUG_DATA_ExpSystemResourcesListAddr = 96_u32
  DEBUG_DATA_ExpPagedPoolDescriptorAddr = 104_u32
  DEBUG_DATA_ExpNumberOfPagedPoolsAddr = 112_u32
  DEBUG_DATA_KeTimeIncrementAddr = 120_u32
  DEBUG_DATA_KeBugCheckCallbackListHeadAddr = 128_u32
  DEBUG_DATA_KiBugcheckDataAddr = 136_u32
  DEBUG_DATA_IopErrorLogListHeadAddr = 144_u32
  DEBUG_DATA_ObpRootDirectoryObjectAddr = 152_u32
  DEBUG_DATA_ObpTypeObjectTypeAddr = 160_u32
  DEBUG_DATA_MmSystemCacheStartAddr = 168_u32
  DEBUG_DATA_MmSystemCacheEndAddr = 176_u32
  DEBUG_DATA_MmSystemCacheWsAddr = 184_u32
  DEBUG_DATA_MmPfnDatabaseAddr = 192_u32
  DEBUG_DATA_MmSystemPtesStartAddr = 200_u32
  DEBUG_DATA_MmSystemPtesEndAddr = 208_u32
  DEBUG_DATA_MmSubsectionBaseAddr = 216_u32
  DEBUG_DATA_MmNumberOfPagingFilesAddr = 224_u32
  DEBUG_DATA_MmLowestPhysicalPageAddr = 232_u32
  DEBUG_DATA_MmHighestPhysicalPageAddr = 240_u32
  DEBUG_DATA_MmNumberOfPhysicalPagesAddr = 248_u32
  DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr = 256_u32
  DEBUG_DATA_MmNonPagedSystemStartAddr = 264_u32
  DEBUG_DATA_MmNonPagedPoolStartAddr = 272_u32
  DEBUG_DATA_MmNonPagedPoolEndAddr = 280_u32
  DEBUG_DATA_MmPagedPoolStartAddr = 288_u32
  DEBUG_DATA_MmPagedPoolEndAddr = 296_u32
  DEBUG_DATA_MmPagedPoolInformationAddr = 304_u32
  DEBUG_DATA_MmPageSize = 312_u32
  DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr = 320_u32
  DEBUG_DATA_MmTotalCommitLimitAddr = 328_u32
  DEBUG_DATA_MmTotalCommittedPagesAddr = 336_u32
  DEBUG_DATA_MmSharedCommitAddr = 344_u32
  DEBUG_DATA_MmDriverCommitAddr = 352_u32
  DEBUG_DATA_MmProcessCommitAddr = 360_u32
  DEBUG_DATA_MmPagedPoolCommitAddr = 368_u32
  DEBUG_DATA_MmExtendedCommitAddr = 376_u32
  DEBUG_DATA_MmZeroedPageListHeadAddr = 384_u32
  DEBUG_DATA_MmFreePageListHeadAddr = 392_u32
  DEBUG_DATA_MmStandbyPageListHeadAddr = 400_u32
  DEBUG_DATA_MmModifiedPageListHeadAddr = 408_u32
  DEBUG_DATA_MmModifiedNoWritePageListHeadAddr = 416_u32
  DEBUG_DATA_MmAvailablePagesAddr = 424_u32
  DEBUG_DATA_MmResidentAvailablePagesAddr = 432_u32
  DEBUG_DATA_PoolTrackTableAddr = 440_u32
  DEBUG_DATA_NonPagedPoolDescriptorAddr = 448_u32
  DEBUG_DATA_MmHighestUserAddressAddr = 456_u32
  DEBUG_DATA_MmSystemRangeStartAddr = 464_u32
  DEBUG_DATA_MmUserProbeAddressAddr = 472_u32
  DEBUG_DATA_KdPrintCircularBufferAddr = 480_u32
  DEBUG_DATA_KdPrintCircularBufferEndAddr = 488_u32
  DEBUG_DATA_KdPrintWritePointerAddr = 496_u32
  DEBUG_DATA_KdPrintRolloverCountAddr = 504_u32
  DEBUG_DATA_MmLoadedUserImageListAddr = 512_u32
  DEBUG_DATA_NtBuildLabAddr = 520_u32
  DEBUG_DATA_KiNormalSystemCall = 528_u32
  DEBUG_DATA_KiProcessorBlockAddr = 536_u32
  DEBUG_DATA_MmUnloadedDriversAddr = 544_u32
  DEBUG_DATA_MmLastUnloadedDriverAddr = 552_u32
  DEBUG_DATA_MmTriageActionTakenAddr = 560_u32
  DEBUG_DATA_MmSpecialPoolTagAddr = 568_u32
  DEBUG_DATA_KernelVerifierAddr = 576_u32
  DEBUG_DATA_MmVerifierDataAddr = 584_u32
  DEBUG_DATA_MmAllocatedNonPagedPoolAddr = 592_u32
  DEBUG_DATA_MmPeakCommitmentAddr = 600_u32
  DEBUG_DATA_MmTotalCommitLimitMaximumAddr = 608_u32
  DEBUG_DATA_CmNtCSDVersionAddr = 616_u32
  DEBUG_DATA_MmPhysicalMemoryBlockAddr = 624_u32
  DEBUG_DATA_MmSessionBase = 632_u32
  DEBUG_DATA_MmSessionSize = 640_u32
  DEBUG_DATA_MmSystemParentTablePage = 648_u32
  DEBUG_DATA_MmVirtualTranslationBase = 656_u32
  DEBUG_DATA_OffsetKThreadNextProcessor = 664_u32
  DEBUG_DATA_OffsetKThreadTeb = 666_u32
  DEBUG_DATA_OffsetKThreadKernelStack = 668_u32
  DEBUG_DATA_OffsetKThreadInitialStack = 670_u32
  DEBUG_DATA_OffsetKThreadApcProcess = 672_u32
  DEBUG_DATA_OffsetKThreadState = 674_u32
  DEBUG_DATA_OffsetKThreadBStore = 676_u32
  DEBUG_DATA_OffsetKThreadBStoreLimit = 678_u32
  DEBUG_DATA_SizeEProcess = 680_u32
  DEBUG_DATA_OffsetEprocessPeb = 682_u32
  DEBUG_DATA_OffsetEprocessParentCID = 684_u32
  DEBUG_DATA_OffsetEprocessDirectoryTableBase = 686_u32
  DEBUG_DATA_SizePrcb = 688_u32
  DEBUG_DATA_OffsetPrcbDpcRoutine = 690_u32
  DEBUG_DATA_OffsetPrcbCurrentThread = 692_u32
  DEBUG_DATA_OffsetPrcbMhz = 694_u32
  DEBUG_DATA_OffsetPrcbCpuType = 696_u32
  DEBUG_DATA_OffsetPrcbVendorString = 698_u32
  DEBUG_DATA_OffsetPrcbProcessorState = 700_u32
  DEBUG_DATA_OffsetPrcbNumber = 702_u32
  DEBUG_DATA_SizeEThread = 704_u32
  DEBUG_DATA_KdPrintCircularBufferPtrAddr = 712_u32
  DEBUG_DATA_KdPrintBufferSizeAddr = 720_u32
  DEBUG_DATA_MmBadPagesDetected = 800_u32
  DEBUG_DATA_EtwpDebuggerData = 816_u32
  DEBUG_DATA_PteBase = 864_u32
  DEBUG_DATA_PaeEnabled = 100000_u32
  DEBUG_DATA_SharedUserData = 100008_u32
  DEBUG_DATA_ProductType = 100016_u32
  DEBUG_DATA_SuiteMask = 100024_u32
  DEBUG_DATA_DumpWriterStatus = 100032_u32
  DEBUG_DATA_DumpFormatVersion = 100040_u32
  DEBUG_DATA_DumpWriterVersion = 100048_u32
  DEBUG_DATA_DumpPowerState = 100056_u32
  DEBUG_DATA_DumpMmStorage = 100064_u32
  DEBUG_DATA_DumpAttributes = 100072_u32
  DEBUG_DATA_KPCR_OFFSET = 0_u32
  DEBUG_DATA_KPRCB_OFFSET = 1_u32
  DEBUG_DATA_KTHREAD_OFFSET = 2_u32
  DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET = 3_u32
  DEBUG_DATA_PROCESSOR_IDENTIFICATION = 4_u32
  DEBUG_DATA_PROCESSOR_SPEED = 5_u32
  DEBUG_HANDLE_DATA_TYPE_BASIC = 0_u32
  DEBUG_HANDLE_DATA_TYPE_TYPE_NAME = 1_u32
  DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME = 2_u32
  DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT = 3_u32
  DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE = 4_u32
  DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE = 5_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1 = 6_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1 = 7_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2 = 8_u32
  DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9_u32
  DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1 = 11_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2 = 12_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1 = 13_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1 = 14_u32
  DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1 = 15_u32
  DEBUG_OFFSINFO_VIRTUAL_SOURCE = 1_u32
  DEBUG_VSOURCE_INVALID = 0_u32
  DEBUG_VSOURCE_DEBUGGEE = 1_u32
  DEBUG_VSOURCE_MAPPED_IMAGE = 2_u32
  DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO = 3_u32
  DEBUG_VSEARCH_DEFAULT = 0_u32
  DEBUG_VSEARCH_WRITABLE_ONLY = 1_u32
  DEBUG_PHYSICAL_DEFAULT = 0_u32
  DEBUG_PHYSICAL_CACHED = 1_u32
  DEBUG_PHYSICAL_UNCACHED = 2_u32
  DEBUG_PHYSICAL_WRITE_COMBINED = 3_u32
  DEBUG_EVENT_BREAKPOINT = 1_u32
  DEBUG_EVENT_EXCEPTION = 2_u32
  DEBUG_EVENT_CREATE_THREAD = 4_u32
  DEBUG_EVENT_EXIT_THREAD = 8_u32
  DEBUG_EVENT_CREATE_PROCESS = 16_u32
  DEBUG_EVENT_EXIT_PROCESS = 32_u32
  DEBUG_EVENT_LOAD_MODULE = 64_u32
  DEBUG_EVENT_UNLOAD_MODULE = 128_u32
  DEBUG_EVENT_SYSTEM_ERROR = 256_u32
  DEBUG_EVENT_SESSION_STATUS = 512_u32
  DEBUG_EVENT_CHANGE_DEBUGGEE_STATE = 1024_u32
  DEBUG_EVENT_CHANGE_ENGINE_STATE = 2048_u32
  DEBUG_EVENT_CHANGE_SYMBOL_STATE = 4096_u32
  DEBUG_EVENT_SERVICE_EXCEPTION = 8192_u32
  DEBUG_SESSION_ACTIVE = 0_u32
  DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 1_u32
  DEBUG_SESSION_END_SESSION_ACTIVE_DETACH = 2_u32
  DEBUG_SESSION_END_SESSION_PASSIVE = 3_u32
  DEBUG_SESSION_END = 4_u32
  DEBUG_SESSION_REBOOT = 5_u32
  DEBUG_SESSION_HIBERNATE = 6_u32
  DEBUG_SESSION_FAILURE = 7_u32
  DEBUG_CDS_ALL = 4294967295_u32
  DEBUG_CDS_REGISTERS = 1_u32
  DEBUG_CDS_DATA = 2_u32
  DEBUG_CDS_REFRESH = 4_u32
  DEBUG_CDS_REFRESH_EVALUATE = 1_u32
  DEBUG_CDS_REFRESH_EXECUTE = 2_u32
  DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE = 3_u32
  DEBUG_CDS_REFRESH_ADDBREAKPOINT = 4_u32
  DEBUG_CDS_REFRESH_REMOVEBREAKPOINT = 5_u32
  DEBUG_CDS_REFRESH_WRITEVIRTUAL = 6_u32
  DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED = 7_u32
  DEBUG_CDS_REFRESH_WRITEPHYSICAL = 8_u32
  DEBUG_CDS_REFRESH_WRITEPHYSICAL2 = 9_u32
  DEBUG_CDS_REFRESH_SETVALUE = 10_u32
  DEBUG_CDS_REFRESH_SETVALUE2 = 11_u32
  DEBUG_CDS_REFRESH_SETSCOPE = 12_u32
  DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX = 13_u32
  DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO = 14_u32
  DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT = 15_u32
  DEBUG_CDS_REFRESH_INLINESTEP = 16_u32
  DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO = 17_u32
  DEBUG_CES_ALL = 4294967295_u32
  DEBUG_CES_CURRENT_THREAD = 1_u32
  DEBUG_CES_EFFECTIVE_PROCESSOR = 2_u32
  DEBUG_CES_BREAKPOINTS = 4_u32
  DEBUG_CES_CODE_LEVEL = 8_u32
  DEBUG_CES_EXECUTION_STATUS = 16_u32
  DEBUG_CES_ENGINE_OPTIONS = 32_u32
  DEBUG_CES_LOG_FILE = 64_u32
  DEBUG_CES_RADIX = 128_u32
  DEBUG_CES_EVENT_FILTERS = 256_u32
  DEBUG_CES_PROCESS_OPTIONS = 512_u32
  DEBUG_CES_EXTENSIONS = 1024_u32
  DEBUG_CES_SYSTEMS = 2048_u32
  DEBUG_CES_ASSEMBLY_OPTIONS = 4096_u32
  DEBUG_CES_EXPRESSION_SYNTAX = 8192_u32
  DEBUG_CES_TEXT_REPLACEMENTS = 16384_u32
  DEBUG_CSS_ALL = 4294967295_u32
  DEBUG_CSS_LOADS = 1_u32
  DEBUG_CSS_UNLOADS = 2_u32
  DEBUG_CSS_SCOPE = 4_u32
  DEBUG_CSS_PATHS = 8_u32
  DEBUG_CSS_SYMBOL_OPTIONS = 16_u32
  DEBUG_CSS_TYPE_OPTIONS = 32_u32
  DEBUG_CSS_COLLAPSE_CHILDREN = 64_u32
  DEBUG_OUTCBI_EXPLICIT_FLUSH = 1_u32
  DEBUG_OUTCBI_TEXT = 2_u32
  DEBUG_OUTCBI_DML = 4_u32
  DEBUG_OUTCBI_ANY_FORMAT = 6_u32
  DEBUG_OUTCB_TEXT = 0_u32
  DEBUG_OUTCB_DML = 1_u32
  DEBUG_OUTCB_EXPLICIT_FLUSH = 2_u32
  DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH = 1_u32
  DEBUG_OUTCBF_DML_HAS_TAGS = 2_u32
  DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 4_u32
  DEBUG_REGISTERS_DEFAULT = 0_u32
  DEBUG_REGISTERS_INT32 = 1_u32
  DEBUG_REGISTERS_INT64 = 2_u32
  DEBUG_REGISTERS_FLOAT = 4_u32
  DEBUG_REGISTERS_ALL = 7_u32
  DEBUG_REGISTER_SUB_REGISTER = 1_u32
  DEBUG_REGSRC_DEBUGGEE = 0_u32
  DEBUG_REGSRC_EXPLICIT = 1_u32
  DEBUG_REGSRC_FRAME = 2_u32
  DEBUG_OUTPUT_SYMBOLS_DEFAULT = 0_u32
  DEBUG_OUTPUT_SYMBOLS_NO_NAMES = 1_u32
  DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 2_u32
  DEBUG_OUTPUT_SYMBOLS_NO_VALUES = 4_u32
  DEBUG_OUTPUT_SYMBOLS_NO_TYPES = 16_u32
  DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 15_u32
  DEBUG_SYMBOL_EXPANDED = 16_u32
  DEBUG_SYMBOL_READ_ONLY = 32_u32
  DEBUG_SYMBOL_IS_ARRAY = 64_u32
  DEBUG_SYMBOL_IS_FLOAT = 128_u32
  DEBUG_SYMBOL_IS_ARGUMENT = 256_u32
  DEBUG_SYMBOL_IS_LOCAL = 512_u32
  DEBUG_SYMENT_IS_CODE = 1_u32
  DEBUG_SYMENT_IS_DATA = 2_u32
  DEBUG_SYMENT_IS_PARAMETER = 4_u32
  DEBUG_SYMENT_IS_LOCAL = 8_u32
  DEBUG_SYMENT_IS_MANAGED = 16_u32
  DEBUG_SYMENT_IS_SYNTHETIC = 32_u32
  DEBUG_MODULE_LOADED = 0_u32
  DEBUG_MODULE_UNLOADED = 1_u32
  DEBUG_MODULE_USER_MODE = 2_u32
  DEBUG_MODULE_EXE_MODULE = 4_u32
  DEBUG_MODULE_EXPLICIT = 8_u32
  DEBUG_MODULE_SECONDARY = 16_u32
  DEBUG_MODULE_SYNTHETIC = 32_u32
  DEBUG_MODULE_SYM_BAD_CHECKSUM = 65536_u32
  DEBUG_SYMTYPE_NONE = 0_u32
  DEBUG_SYMTYPE_COFF = 1_u32
  DEBUG_SYMTYPE_CODEVIEW = 2_u32
  DEBUG_SYMTYPE_PDB = 3_u32
  DEBUG_SYMTYPE_EXPORT = 4_u32
  DEBUG_SYMTYPE_DEFERRED = 5_u32
  DEBUG_SYMTYPE_SYM = 6_u32
  DEBUG_SYMTYPE_DIA = 7_u32
  DEBUG_SCOPE_GROUP_ARGUMENTS = 1_u32
  DEBUG_SCOPE_GROUP_LOCALS = 2_u32
  DEBUG_SCOPE_GROUP_ALL = 3_u32
  DEBUG_SCOPE_GROUP_BY_DATAMODEL = 4_u32
  DEBUG_OUTTYPE_DEFAULT = 0_u32
  DEBUG_OUTTYPE_NO_INDENT = 1_u32
  DEBUG_OUTTYPE_NO_OFFSET = 2_u32
  DEBUG_OUTTYPE_VERBOSE = 4_u32
  DEBUG_OUTTYPE_COMPACT_OUTPUT = 8_u32
  DEBUG_OUTTYPE_ADDRESS_OF_FIELD = 65536_u32
  DEBUG_OUTTYPE_ADDRESS_AT_END = 131072_u32
  DEBUG_OUTTYPE_BLOCK_RECURSE = 2097152_u32
  DEBUG_FIND_SOURCE_DEFAULT = 0_u32
  DEBUG_FIND_SOURCE_FULL_PATH = 1_u32
  DEBUG_FIND_SOURCE_BEST_MATCH = 2_u32
  DEBUG_FIND_SOURCE_NO_SRCSRV = 4_u32
  DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 8_u32
  DEBUG_FIND_SOURCE_WITH_CHECKSUM = 16_u32
  DEBUG_FIND_SOURCE_WITH_CHECKSUM_STRICT = 32_u32
  MODULE_ORDERS_MASK = 4026531840_u32
  MODULE_ORDERS_LOADTIME = 268435456_u32
  MODULE_ORDERS_MODULENAME = 536870912_u32
  DEBUG_MODNAME_IMAGE = 0_u32
  DEBUG_MODNAME_MODULE = 1_u32
  DEBUG_MODNAME_LOADED_IMAGE = 2_u32
  DEBUG_MODNAME_SYMBOL_FILE = 3_u32
  DEBUG_MODNAME_MAPPED_IMAGE = 4_u32
  DEBUG_TYPEOPTS_UNICODE_DISPLAY = 1_u32
  DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 2_u32
  DEBUG_TYPEOPTS_FORCERADIX_OUTPUT = 4_u32
  DEBUG_TYPEOPTS_MATCH_MAXSIZE = 8_u32
  DEBUG_GETMOD_DEFAULT = 0_u32
  DEBUG_GETMOD_NO_LOADED_MODULES = 1_u32
  DEBUG_GETMOD_NO_UNLOADED_MODULES = 2_u32
  DEBUG_ADDSYNTHMOD_DEFAULT = 0_u32
  DEBUG_ADDSYNTHMOD_ZEROBASE = 1_u32
  DEBUG_ADDSYNTHSYM_DEFAULT = 0_u32
  DEBUG_OUTSYM_DEFAULT = 0_u32
  DEBUG_OUTSYM_FORCE_OFFSET = 1_u32
  DEBUG_OUTSYM_SOURCE_LINE = 2_u32
  DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 4_u32
  DEBUG_GETFNENT_DEFAULT = 0_u32
  DEBUG_GETFNENT_RAW_ENTRY_ONLY = 1_u32
  DEBUG_SOURCE_IS_STATEMENT = 1_u32
  DEBUG_GSEL_DEFAULT = 0_u32
  DEBUG_GSEL_NO_SYMBOL_LOADS = 1_u32
  DEBUG_GSEL_ALLOW_LOWER = 2_u32
  DEBUG_GSEL_ALLOW_HIGHER = 4_u32
  DEBUG_GSEL_NEAREST_ONLY = 8_u32
  DEBUG_GSEL_INLINE_CALLSITE = 16_u32
  DEBUG_FRAME_DEFAULT = 0_u32
  DEBUG_FRAME_IGNORE_INLINE = 1_u32
  DEBUG_COMMAND_EXCEPTION_ID = 3688893886_u32
  DEBUG_CMDEX_INVALID = 0_u32
  DEBUG_CMDEX_ADD_EVENT_STRING = 1_u32
  DEBUG_CMDEX_RESET_EVENT_STRINGS = 2_u32
  DEBUG_EXTINIT_HAS_COMMAND_HELP = 1_u32
  DEBUG_NOTIFY_SESSION_ACTIVE = 0_u32
  DEBUG_NOTIFY_SESSION_INACTIVE = 1_u32
  DEBUG_NOTIFY_SESSION_ACCESSIBLE = 2_u32
  DEBUG_NOTIFY_SESSION_INACCESSIBLE = 3_u32
  DEBUG_KNOWN_STRUCT_GET_NAMES = 1_u32
  DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2_u32
  DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME = 3_u32
  DEBUG_EXT_QVALUE_DEFAULT = 0_u32
  DEBUG_EXT_PVALUE_DEFAULT = 0_u32
  DEBUG_EXT_PVTYPE_IS_VALUE = 0_u32
  DEBUG_EXT_PVTYPE_IS_POINTER = 1_u32
  CROSS_PLATFORM_MAXIMUM_PROCESSORS = 2048_u32
  EXT_API_VERSION_NUMBER = 5_u32
  EXT_API_VERSION_NUMBER32 = 5_u32
  EXT_API_VERSION_NUMBER64 = 6_u32
  IG_KD_CONTEXT = 1_u32
  IG_READ_CONTROL_SPACE = 2_u32
  IG_WRITE_CONTROL_SPACE = 3_u32
  IG_READ_IO_SPACE = 4_u32
  IG_WRITE_IO_SPACE = 5_u32
  IG_READ_PHYSICAL = 6_u32
  IG_WRITE_PHYSICAL = 7_u32
  IG_READ_IO_SPACE_EX = 8_u32
  IG_WRITE_IO_SPACE_EX = 9_u32
  IG_KSTACK_HELP = 10_u32
  IG_SET_THREAD = 11_u32
  IG_READ_MSR = 12_u32
  IG_WRITE_MSR = 13_u32
  IG_GET_DEBUGGER_DATA = 14_u32
  IG_GET_KERNEL_VERSION = 15_u32
  IG_RELOAD_SYMBOLS = 16_u32
  IG_GET_SET_SYMPATH = 17_u32
  IG_GET_EXCEPTION_RECORD = 18_u32
  IG_IS_PTR64 = 19_u32
  IG_GET_BUS_DATA = 20_u32
  IG_SET_BUS_DATA = 21_u32
  IG_DUMP_SYMBOL_INFO = 22_u32
  IG_LOWMEM_CHECK = 23_u32
  IG_SEARCH_MEMORY = 24_u32
  IG_GET_CURRENT_THREAD = 25_u32
  IG_GET_CURRENT_PROCESS = 26_u32
  IG_GET_TYPE_SIZE = 27_u32
  IG_GET_CURRENT_PROCESS_HANDLE = 28_u32
  IG_GET_INPUT_LINE = 29_u32
  IG_GET_EXPRESSION_EX = 30_u32
  IG_TRANSLATE_VIRTUAL_TO_PHYSICAL = 31_u32
  IG_GET_CACHE_SIZE = 32_u32
  IG_READ_PHYSICAL_WITH_FLAGS = 33_u32
  IG_WRITE_PHYSICAL_WITH_FLAGS = 34_u32
  IG_POINTER_SEARCH_PHYSICAL = 35_u32
  IG_OBSOLETE_PLACEHOLDER_36 = 36_u32
  IG_GET_THREAD_OS_INFO = 37_u32
  IG_GET_CLR_DATA_INTERFACE = 38_u32
  IG_MATCH_PATTERN_A = 39_u32
  IG_FIND_FILE = 40_u32
  IG_TYPED_DATA_OBSOLETE = 41_u32
  IG_QUERY_TARGET_INTERFACE = 42_u32
  IG_TYPED_DATA = 43_u32
  IG_DISASSEMBLE_BUFFER = 44_u32
  IG_GET_ANY_MODULE_IN_RANGE = 45_u32
  IG_VIRTUAL_TO_PHYSICAL = 46_u32
  IG_PHYSICAL_TO_VIRTUAL = 47_u32
  IG_GET_CONTEXT_EX = 48_u32
  IG_GET_TEB_ADDRESS = 128_u32
  IG_GET_PEB_ADDRESS = 129_u32
  PHYS_FLAG_DEFAULT = 0_u32
  PHYS_FLAG_CACHED = 1_u32
  PHYS_FLAG_UNCACHED = 2_u32
  PHYS_FLAG_WRITE_COMBINED = 3_u32
  PTR_SEARCH_PHYS_ALL_HITS = 1_u32
  PTR_SEARCH_PHYS_PTE = 2_u32
  PTR_SEARCH_PHYS_RANGE_CHECK_ONLY = 4_u32
  PTR_SEARCH_PHYS_SIZE_SHIFT = 3_u32
  PTR_SEARCH_NO_SYMBOL_CHECK = 2147483648_u32
  EXT_FIND_FILE_ALLOW_GIVEN_PATH = 1_u32
  DEBUG_TYPED_DATA_IS_IN_MEMORY = 1_u32
  DEBUG_TYPED_DATA_PHYSICAL_DEFAULT = 2_u32
  DEBUG_TYPED_DATA_PHYSICAL_CACHED = 4_u32
  DEBUG_TYPED_DATA_PHYSICAL_UNCACHED = 6_u32
  DEBUG_TYPED_DATA_PHYSICAL_WRITE_COMBINED = 8_u32
  DEBUG_TYPED_DATA_PHYSICAL_MEMORY = 14_u32
  EXT_TDF_PHYSICAL_DEFAULT = 2_u32
  EXT_TDF_PHYSICAL_CACHED = 4_u32
  EXT_TDF_PHYSICAL_UNCACHED = 6_u32
  EXT_TDF_PHYSICAL_WRITE_COMBINED = 8_u32
  EXT_TDF_PHYSICAL_MEMORY = 14_u32
  WDBGEXTS_ADDRESS_DEFAULT = 0_u32
  WDBGEXTS_ADDRESS_SEG16 = 1_u32
  WDBGEXTS_ADDRESS_SEG32 = 2_u32
  WDBGEXTS_ADDRESS_RESERVED0 = 2147483648_u32
  DBGKD_VERS_FLAG_MP = 1_u32
  DBGKD_VERS_FLAG_DATA = 2_u32
  DBGKD_VERS_FLAG_PTR64 = 4_u32
  DBGKD_VERS_FLAG_NOMM = 8_u32
  DBGKD_VERS_FLAG_HSS = 16_u32
  DBGKD_VERS_FLAG_PARTITIONS = 32_u32
  DBGKD_VERS_FLAG_HAL_IN_NTOS = 64_u32
  KD_SECONDARY_VERSION_DEFAULT = 0_u32
  KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_1 = 0_u32
  KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_2 = 1_u32
  KD_SECONDARY_VERSION_AMD64_CONTEXT = 2_u32
  CURRENT_KD_SECONDARY_VERSION = 2_u32
  DBG_DUMP_NO_INDENT = 1_u32
  DBG_DUMP_NO_OFFSET = 2_u32
  DBG_DUMP_VERBOSE = 4_u32
  DBG_DUMP_CALL_FOR_EACH = 8_u32
  DBG_DUMP_LIST = 32_u32
  DBG_DUMP_NO_PRINT = 64_u32
  DBG_DUMP_GET_SIZE_ONLY = 128_u32
  DBG_DUMP_COMPACT_OUT = 8192_u32
  DBG_DUMP_ARRAY = 32768_u32
  DBG_DUMP_ADDRESS_OF_FIELD = 65536_u32
  DBG_DUMP_ADDRESS_AT_END = 131072_u32
  DBG_DUMP_COPY_TYPE_DATA = 262144_u32
  DBG_DUMP_READ_PHYSICAL = 524288_u32
  DBG_DUMP_FUNCTION_FORMAT = 1048576_u32
  DBG_DUMP_BLOCK_RECURSE = 2097152_u32
  DBG_DUMP_MATCH_SIZE = 4194304_u32
  DBG_RETURN_TYPE = 0_u32
  DBG_RETURN_SUBTYPES = 0_u32
  DBG_RETURN_TYPE_VALUES = 0_u32
  DBG_DUMP_FIELD_CALL_BEFORE_PRINT = 1_u32
  DBG_DUMP_FIELD_NO_CALLBACK_REQ = 2_u32
  DBG_DUMP_FIELD_RECUR_ON_THIS = 4_u32
  DBG_DUMP_FIELD_FULL_NAME = 8_u32
  DBG_DUMP_FIELD_ARRAY = 16_u32
  DBG_DUMP_FIELD_COPY_FIELD_DATA = 32_u32
  DBG_DUMP_FIELD_RETURN_ADDRESS = 4096_u32
  DBG_DUMP_FIELD_SIZE_IN_BITS = 8192_u32
  DBG_DUMP_FIELD_NO_PRINT = 16384_u32
  DBG_DUMP_FIELD_DEFAULT_STRING = 65536_u32
  DBG_DUMP_FIELD_WCHAR_STRING = 131072_u32
  DBG_DUMP_FIELD_MULTI_STRING = 262144_u32
  DBG_DUMP_FIELD_GUID_STRING = 524288_u32
  DBG_DUMP_FIELD_UTF32_STRING = 1048576_u32
  MEMORY_READ_ERROR = 1_u32
  SYMBOL_TYPE_INDEX_NOT_FOUND = 2_u32
  SYMBOL_TYPE_INFO_NOT_FOUND = 3_u32
  FIELDS_DID_NOT_MATCH = 4_u32
  NULL_SYM_DUMP_PARAM = 5_u32
  NULL_FIELD_NAME = 6_u32
  INCORRECT_VERSION_INFO = 7_u32
  EXIT_ON_CONTROLC = 8_u32
  CANNOT_ALLOCATE_MEMORY = 9_u32
  INSUFFICIENT_SPACE_TO_COPY = 10_u32
  ADDRESS_TYPE_INDEX_NOT_FOUND = 11_u32
  UNAVAILABLE_ERROR = 12_u32
  CATID_ActiveScript = "f0b7a1a1-9847-11cf-8f20-00805f2cd064"
  CATID_ActiveScriptParse = "f0b7a1a2-9847-11cf-8f20-00805f2cd064"
  CATID_ActiveScriptEncode = "f0b7a1a3-9847-11cf-8f20-00805f2cd064"
  OID_VBSSIP = "1629f04e-2799-4db5-8fe5-ace10f17ebab"
  OID_JSSIP = "06c9e010-38ce-11d4-a2a3-00104bd35090"
  OID_WSFSIP = "1a610570-38ce-11d4-a2a3-00104bd35090"
  SCRIPTITEM_ISVISIBLE = 2_u32
  SCRIPTITEM_ISSOURCE = 4_u32
  SCRIPTITEM_GLOBALMEMBERS = 8_u32
  SCRIPTITEM_ISPERSISTENT = 64_u32
  SCRIPTITEM_CODEONLY = 512_u32
  SCRIPTITEM_NOCODE = 1024_u32
  SCRIPTTYPELIB_ISCONTROL = 16_u32
  SCRIPTTYPELIB_ISPERSISTENT = 64_u32
  SCRIPTTEXT_DELAYEXECUTION = 1_u32
  SCRIPTTEXT_ISVISIBLE = 2_u32
  SCRIPTTEXT_ISEXPRESSION = 32_u32
  SCRIPTTEXT_ISPERSISTENT = 64_u32
  SCRIPTTEXT_HOSTMANAGESSOURCE = 128_u32
  SCRIPTTEXT_ISXDOMAIN = 256_u32
  SCRIPTTEXT_ISNONUSERCODE = 512_u32
  SCRIPTPROC_ISEXPRESSION = 32_u32
  SCRIPTPROC_HOSTMANAGESSOURCE = 128_u32
  SCRIPTPROC_IMPLICIT_THIS = 256_u32
  SCRIPTPROC_IMPLICIT_PARENTS = 512_u32
  SCRIPTPROC_ISXDOMAIN = 1024_u32
  SCRIPTINFO_IUNKNOWN = 1_u32
  SCRIPTINFO_ITYPEINFO = 2_u32
  SCRIPTINTERRUPT_DEBUG = 1_u32
  SCRIPTINTERRUPT_RAISEEXCEPTION = 2_u32
  SCRIPTSTAT_STATEMENT_COUNT = 1_u32
  SCRIPTSTAT_INSTRUCTION_COUNT = 2_u32
  SCRIPTSTAT_INTSTRUCTION_TIME = 3_u32
  SCRIPTSTAT_TOTAL_TIME = 4_u32
  SCRIPT_ENCODE_SECTION = 1_u32
  SCRIPT_ENCODE_DEFAULT_LANGUAGE = 1_u32
  SCRIPT_ENCODE_NO_ASP_LANGUAGE = 2_u32
  SCRIPTPROP_NAME = 0_u32
  SCRIPTPROP_MAJORVERSION = 1_u32
  SCRIPTPROP_MINORVERSION = 2_u32
  SCRIPTPROP_BUILDNUMBER = 3_u32
  SCRIPTPROP_DELAYEDEVENTSINKING = 4096_u32
  SCRIPTPROP_CATCHEXCEPTION = 4097_u32
  SCRIPTPROP_CONVERSIONLCID = 4098_u32
  SCRIPTPROP_HOSTSTACKREQUIRED = 4099_u32
  SCRIPTPROP_SCRIPTSAREFULLYTRUSTED = 4100_u32
  SCRIPTPROP_DEBUGGER = 4352_u32
  SCRIPTPROP_JITDEBUG = 4353_u32
  SCRIPTPROP_GCCONTROLSOFTCLOSE = 8192_u32
  SCRIPTPROP_INTEGERMODE = 12288_u32
  SCRIPTPROP_STRINGCOMPAREINSTANCE = 12289_u32
  SCRIPTPROP_INVOKEVERSIONING = 16384_u32
  SCRIPTPROP_HACK_FIBERSUPPORT = 1879048192_u32
  SCRIPTPROP_HACK_TRIDENTEVENTSINK = 1879048193_u32
  SCRIPTPROP_ABBREVIATE_GLOBALNAME_RESOLUTION = 1879048194_u32
  SCRIPTPROP_HOSTKEEPALIVE = 1879048196_u32
  SCRIPT_E_RECORDED = -2040119292_i32
  SCRIPT_E_REPORTED = -2147352319_i32
  SCRIPT_E_PROPAGATE = -2147352318_i32
  MINIDUMP_VERSION = 42899_u32
  MINIDUMP_MISC1_PROCESSOR_POWER_INFO = 4_u32
  MINIDUMP_MISC3_PROCESS_INTEGRITY = 16_u32
  MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS = 32_u32
  MINIDUMP_MISC3_TIMEZONE = 64_u32
  MINIDUMP_MISC3_PROTECTED_PROCESS = 128_u32
  MINIDUMP_MISC4_BUILDSTRING = 256_u32
  MINIDUMP_MISC5_PROCESS_COOKIE = 512_u32
  MINIDUMP_SYSMEMINFO1_FILECACHE_TRANSITIONREPURPOSECOUNT_FLAGS = 1_u32
  MINIDUMP_SYSMEMINFO1_BASICPERF = 2_u32
  MINIDUMP_SYSMEMINFO1_PERF_CCTOTALDIRTYPAGES_CCDIRTYPAGETHRESHOLD = 4_u32
  MINIDUMP_SYSMEMINFO1_PERF_RESIDENTAVAILABLEPAGES_SHAREDCOMMITPAGES = 8_u32
  MINIDUMP_PROCESS_VM_COUNTERS = 1_u32
  MINIDUMP_PROCESS_VM_COUNTERS_VIRTUALSIZE = 2_u32
  MINIDUMP_PROCESS_VM_COUNTERS_EX = 4_u32
  MINIDUMP_PROCESS_VM_COUNTERS_EX2 = 8_u32
  MINIDUMP_PROCESS_VM_COUNTERS_JOB = 16_u32
  MAX_SYM_NAME = 2000_u32
  BIND_NO_BOUND_IMPORTS = 1_u32
  BIND_NO_UPDATE = 2_u32
  BIND_ALL_IMAGES = 4_u32
  BIND_CACHE_IMPORT_DLLS = 8_u32
  BIND_REPORT_64BIT_VA = 16_u32
  CHECKSUM_SUCCESS = 0_u32
  CHECKSUM_OPEN_FAILURE = 1_u32
  CHECKSUM_MAP_FAILURE = 2_u32
  CHECKSUM_MAPVIEW_FAILURE = 3_u32
  CHECKSUM_UNICODE_FAILURE = 4_u32
  SPLITSYM_REMOVE_PRIVATE = 1_u32
  SPLITSYM_EXTRACT_ALL = 2_u32
  SPLITSYM_SYMBOLPATH_IS_SRC = 4_u32
  CERT_PE_IMAGE_DIGEST_DEBUG_INFO = 1_u32
  CERT_PE_IMAGE_DIGEST_RESOURCES = 2_u32
  CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = 4_u32
  CERT_PE_IMAGE_DIGEST_NON_PE_INFO = 8_u32
  CERT_SECTION_TYPE_ANY = 255_u32
  ERROR_IMAGE_NOT_STRIPPED = 34816_u32
  ERROR_NO_DBG_POINTER = 34817_u32
  ERROR_NO_PDB_POINTER = 34818_u32
  UNDNAME_COMPLETE = 0_u32
  UNDNAME_NO_LEADING_UNDERSCORES = 1_u32
  UNDNAME_NO_MS_KEYWORDS = 2_u32
  UNDNAME_NO_FUNCTION_RETURNS = 4_u32
  UNDNAME_NO_ALLOCATION_MODEL = 8_u32
  UNDNAME_NO_ALLOCATION_LANGUAGE = 16_u32
  UNDNAME_NO_MS_THISTYPE = 32_u32
  UNDNAME_NO_CV_THISTYPE = 64_u32
  UNDNAME_NO_THISTYPE = 96_u32
  UNDNAME_NO_ACCESS_SPECIFIERS = 128_u32
  UNDNAME_NO_THROW_SIGNATURES = 256_u32
  UNDNAME_NO_MEMBER_TYPE = 512_u32
  UNDNAME_NO_RETURN_UDT_MODEL = 1024_u32
  UNDNAME_32_BIT_DECODE = 2048_u32
  UNDNAME_NAME_ONLY = 4096_u32
  UNDNAME_NO_ARGUMENTS = 8192_u32
  UNDNAME_NO_SPECIAL_SYMS = 16384_u32
  DBHHEADER_PDBGUID = 3_u32
  INLINE_FRAME_CONTEXT_INIT = 0_u32
  INLINE_FRAME_CONTEXT_IGNORE = 4294967295_u32
  SYM_STKWALK_DEFAULT = 0_u32
  SYM_STKWALK_FORCE_FRAMEPTR = 1_u32
  SYM_STKWALK_ZEROEXTEND_PTRS = 2_u32
  API_VERSION_NUMBER = 12_u32
  SYMFLAG_NULL = 524288_u32
  SYMFLAG_FUNC_NO_RETURN = 1048576_u32
  SYMFLAG_SYNTHETIC_ZEROBASE = 2097152_u32
  SYMFLAG_PUBLIC_CODE = 4194304_u32
  SYMFLAG_REGREL_ALIASINDIR = 8388608_u32
  SYMFLAG_FIXUP_ARM64X = 16777216_u32
  SYMFLAG_GLOBAL = 33554432_u32
  SYMFLAG_RESET = 2147483648_u32
  IMAGEHLP_MODULE_REGION_DLLBASE = 1_u32
  IMAGEHLP_MODULE_REGION_DLLRANGE = 2_u32
  IMAGEHLP_MODULE_REGION_ADDITIONAL = 4_u32
  IMAGEHLP_MODULE_REGION_JIT = 8_u32
  IMAGEHLP_MODULE_REGION_ALL = 255_u32
  CBA_DEFERRED_SYMBOL_LOAD_START = 1_u32
  CBA_DEFERRED_SYMBOL_LOAD_COMPLETE = 2_u32
  CBA_DEFERRED_SYMBOL_LOAD_FAILURE = 3_u32
  CBA_SYMBOLS_UNLOADED = 4_u32
  CBA_DUPLICATE_SYMBOL = 5_u32
  CBA_READ_MEMORY = 6_u32
  CBA_DEFERRED_SYMBOL_LOAD_CANCEL = 7_u32
  CBA_SET_OPTIONS = 8_u32
  CBA_EVENT = 16_u32
  CBA_DEFERRED_SYMBOL_LOAD_PARTIAL = 32_u32
  CBA_DEBUG_INFO = 268435456_u32
  CBA_SRCSRV_INFO = 536870912_u32
  CBA_SRCSRV_EVENT = 1073741824_u32
  CBA_UPDATE_STATUS_BAR = 1342177280_u32
  CBA_ENGINE_PRESENT = 1610612736_u32
  CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS = 1879048192_u32
  CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE = 2147483648_u32
  CBA_XML_LOG = 2415919104_u32
  CBA_MAP_JIT_SYMBOL = 2684354560_u32
  EVENT_SRCSPEW_START = 100_u32
  EVENT_SRCSPEW = 100_u32
  EVENT_SRCSPEW_END = 199_u32
  DSLFLAG_MISMATCHED_PDB = 1_u32
  DSLFLAG_MISMATCHED_DBG = 2_u32
  FLAG_ENGINE_PRESENT = 4_u32
  FLAG_ENGOPT_DISALLOW_NETWORK_PATHS = 8_u32
  FLAG_OVERRIDE_ARM_MACHINE_TYPE = 16_u32
  SYMOPT_CASE_INSENSITIVE = 1_u32
  SYMOPT_UNDNAME = 2_u32
  SYMOPT_DEFERRED_LOADS = 4_u32
  SYMOPT_NO_CPP = 8_u32
  SYMOPT_LOAD_LINES = 16_u32
  SYMOPT_OMAP_FIND_NEAREST = 32_u32
  SYMOPT_LOAD_ANYTHING = 64_u32
  SYMOPT_IGNORE_CVREC = 128_u32
  SYMOPT_NO_UNQUALIFIED_LOADS = 256_u32
  SYMOPT_FAIL_CRITICAL_ERRORS = 512_u32
  SYMOPT_EXACT_SYMBOLS = 1024_u32
  SYMOPT_ALLOW_ABSOLUTE_SYMBOLS = 2048_u32
  SYMOPT_IGNORE_NT_SYMPATH = 4096_u32
  SYMOPT_INCLUDE_32BIT_MODULES = 8192_u32
  SYMOPT_PUBLICS_ONLY = 16384_u32
  SYMOPT_NO_PUBLICS = 32768_u32
  SYMOPT_AUTO_PUBLICS = 65536_u32
  SYMOPT_NO_IMAGE_SEARCH = 131072_u32
  SYMOPT_SECURE = 262144_u32
  SYMOPT_NO_PROMPTS = 524288_u32
  SYMOPT_OVERWRITE = 1048576_u32
  SYMOPT_IGNORE_IMAGEDIR = 2097152_u32
  SYMOPT_FLAT_DIRECTORY = 4194304_u32
  SYMOPT_FAVOR_COMPRESSED = 8388608_u32
  SYMOPT_ALLOW_ZERO_ADDRESS = 16777216_u32
  SYMOPT_DISABLE_SYMSRV_AUTODETECT = 33554432_u32
  SYMOPT_READONLY_CACHE = 67108864_u32
  SYMOPT_SYMPATH_LAST = 134217728_u32
  SYMOPT_DISABLE_FAST_SYMBOLS = 268435456_u32
  SYMOPT_DISABLE_SYMSRV_TIMEOUT = 536870912_u32
  SYMOPT_DISABLE_SRVSTAR_ON_STARTUP = 1073741824_u32
  SYMOPT_DEBUG = 2147483648_u32
  SYM_INLINE_COMP_ERROR = 0_u32
  SYM_INLINE_COMP_IDENTICAL = 1_u32
  SYM_INLINE_COMP_STEPIN = 2_u32
  SYM_INLINE_COMP_STEPOUT = 3_u32
  SYM_INLINE_COMP_STEPOVER = 4_u32
  SYM_INLINE_COMP_DIFFERENT = 5_u32
  ESLFLAG_FULLPATH = 1_u32
  ESLFLAG_NEAREST = 2_u32
  ESLFLAG_PREV = 4_u32
  ESLFLAG_NEXT = 8_u32
  ESLFLAG_INLINE_SITE = 16_u32
  SYMENUM_OPTIONS_DEFAULT = 1_u32
  SYMENUM_OPTIONS_INLINE = 2_u32
  SYMSEARCH_MASKOBJS = 1_u32
  SYMSEARCH_RECURSE = 2_u32
  SYMSEARCH_GLOBALSONLY = 4_u32
  SYMSEARCH_ALLITEMS = 8_u32
  EXT_OUTPUT_VER = 1_u32
  SYMSRV_VERSION = 2_u32
  SSRVOPT_CALLBACK = 1_u32
  SSRVOPT_OLDGUIDPTR = 16_u32
  SSRVOPT_UNATTENDED = 32_u32
  SSRVOPT_NOCOPY = 64_u32
  SSRVOPT_GETPATH = 64_u32
  SSRVOPT_PARENTWIN = 128_u32
  SSRVOPT_PARAMTYPE = 256_u32
  SSRVOPT_SECURE = 512_u32
  SSRVOPT_TRACE = 1024_u32
  SSRVOPT_SETCONTEXT = 2048_u32
  SSRVOPT_PROXY = 4096_u32
  SSRVOPT_DOWNSTREAM_STORE = 8192_u32
  SSRVOPT_OVERWRITE = 16384_u32
  SSRVOPT_RESETTOU = 32768_u32
  SSRVOPT_CALLBACKW = 65536_u32
  SSRVOPT_FLAT_DEFAULT_STORE = 131072_u32
  SSRVOPT_PROXYW = 262144_u32
  SSRVOPT_MESSAGE = 524288_u32
  SSRVOPT_SERVICE = 1048576_u32
  SSRVOPT_FAVOR_COMPRESSED = 2097152_u32
  SSRVOPT_STRING = 4194304_u32
  SSRVOPT_WINHTTP = 8388608_u32
  SSRVOPT_WININET = 16777216_u32
  SSRVOPT_DONT_UNCOMPRESS = 33554432_u32
  SSRVOPT_DISABLE_PING_HOST = 67108864_u32
  SSRVOPT_DISABLE_TIMEOUT = 134217728_u32
  SSRVOPT_ENABLE_COMM_MSG = 268435456_u32
  SSRVOPT_URI_FILTER = 536870912_u32
  SSRVOPT_URI_TIERS = 1073741824_u32
  SSRVOPT_RETRY_APP_HANG = 2147483648_u32
  SSRVOPT_MAX = 2147483648_u32
  NUM_SSRVOPTS = 32_u32
  SSRVURI_HTTP_NORMAL = 1_u32
  SSRVURI_HTTP_COMPRESSED = 2_u32
  SSRVURI_HTTP_FILEPTR = 4_u32
  SSRVURI_UNC_NORMAL = 16_u32
  SSRVURI_UNC_COMPRESSED = 32_u32
  SSRVURI_UNC_FILEPTR = 64_u32
  SSRVURI_HTTP_MASK = 15_u32
  SSRVURI_UNC_MASK = 240_u32
  SSRVURI_ALL = 255_u32
  SSRVURI_NORMAL = 1_u32
  SSRVURI_COMPRESSED = 2_u32
  SSRVURI_FILEPTR = 4_u32
  SSRVACTION_TRACE = 1_u32
  SSRVACTION_QUERYCANCEL = 2_u32
  SSRVACTION_EVENT = 3_u32
  SSRVACTION_EVENTW = 4_u32
  SSRVACTION_SIZE = 5_u32
  SSRVACTION_HTTPSTATUS = 6_u32
  SSRVACTION_XMLOUTPUT = 7_u32
  SSRVACTION_CHECKSUMSTATUS = 8_u32
  SYMSTOREOPT_ALT_INDEX = 16_u32
  SYMSTOREOPT_UNICODE = 32_u32
  SYMF_OMAP_GENERATED = 1_u32
  SYMF_OMAP_MODIFIED = 2_u32
  SYMF_REGISTER = 8_u32
  SYMF_REGREL = 16_u32
  SYMF_FRAMEREL = 32_u32
  SYMF_PARAMETER = 64_u32
  SYMF_LOCAL = 128_u32
  SYMF_CONSTANT = 256_u32
  SYMF_EXPORT = 512_u32
  SYMF_FORWARDER = 1024_u32
  SYMF_FUNCTION = 2048_u32
  SYMF_VIRTUAL = 4096_u32
  SYMF_THUNK = 8192_u32
  SYMF_TLSREL = 16384_u32
  IMAGEHLP_SYMBOL_INFO_VALUEPRESENT = 1_u32
  IMAGEHLP_SYMBOL_INFO_REGISTER = 8_u32
  IMAGEHLP_SYMBOL_INFO_REGRELATIVE = 16_u32
  IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE = 32_u32
  IMAGEHLP_SYMBOL_INFO_PARAMETER = 64_u32
  IMAGEHLP_SYMBOL_INFO_LOCAL = 128_u32
  IMAGEHLP_SYMBOL_INFO_CONSTANT = 256_u32
  IMAGEHLP_SYMBOL_FUNCTION = 2048_u32
  IMAGEHLP_SYMBOL_VIRTUAL = 4096_u32
  IMAGEHLP_SYMBOL_THUNK = 8192_u32
  IMAGEHLP_SYMBOL_INFO_TLSRELATIVE = 16384_u32
  IMAGEHLP_RMAP_MAPPED_FLAT = 1_u32
  IMAGEHLP_RMAP_BIG_ENDIAN = 2_u32
  IMAGEHLP_RMAP_IGNORE_MISCOMPARE = 4_u32
  IMAGEHLP_RMAP_FIXUP_ARM64X = 268435456_u32
  IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS = 536870912_u32
  IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS = 1073741824_u32
  IMAGEHLP_RMAP_FIXUP_IMAGEBASE = 2147483648_u32
  WCT_MAX_NODE_COUNT = 16_u32
  WCT_OBJNAME_LENGTH = 128_u32
  WCT_NETWORK_IO_FLAG = 8_u32
  APPBREAKFLAG_DEBUGGER_BLOCK = 1_u32
  APPBREAKFLAG_DEBUGGER_HALT = 2_u32
  APPBREAKFLAG_STEP = 65536_u32
  APPBREAKFLAG_NESTED = 131072_u32
  APPBREAKFLAG_STEPTYPE_SOURCE = 0_u32
  APPBREAKFLAG_STEPTYPE_BYTECODE = 1048576_u32
  APPBREAKFLAG_STEPTYPE_MACHINE = 2097152_u32
  APPBREAKFLAG_STEPTYPE_MASK = 15728640_u32
  APPBREAKFLAG_IN_BREAKPOINT = 2147483648_u32
  SOURCETEXT_ATTR_KEYWORD = 1_u32
  SOURCETEXT_ATTR_COMMENT = 2_u32
  SOURCETEXT_ATTR_NONSOURCE = 4_u32
  SOURCETEXT_ATTR_OPERATOR = 8_u32
  SOURCETEXT_ATTR_NUMBER = 16_u32
  SOURCETEXT_ATTR_STRING = 32_u32
  SOURCETEXT_ATTR_FUNCTION_START = 64_u32
  TEXT_DOC_ATTR_READONLY = 1_u32
  TEXT_DOC_ATTR_TYPE_PRIMARY = 2_u32
  TEXT_DOC_ATTR_TYPE_WORKER = 4_u32
  TEXT_DOC_ATTR_TYPE_SCRIPT = 8_u32
  DEBUG_TEXT_ISEXPRESSION = 1_u32
  DEBUG_TEXT_RETURNVALUE = 2_u32
  DEBUG_TEXT_NOSIDEEFFECTS = 4_u32
  DEBUG_TEXT_ALLOWBREAKPOINTS = 8_u32
  DEBUG_TEXT_ALLOWERRORREPORT = 16_u32
  DEBUG_TEXT_EVALUATETOCODECONTEXT = 32_u32
  DEBUG_TEXT_ISNONUSERCODE = 64_u32
  THREAD_STATE_RUNNING = 1_u32
  THREAD_STATE_SUSPENDED = 2_u32
  THREAD_BLOCKED = 4_u32
  THREAD_OUT_OF_CONTEXT = 8_u32
  CATID_ActiveScriptAuthor = "0aee2a92-bcbb-11d0-8c72-00c04fc2b085"
  FACILITY_JsDEBUG = 3527_u32
  E_JsDEBUG_MISMATCHED_RUNTIME = -1916338175_i32
  E_JsDEBUG_UNKNOWN_THREAD = -1916338174_i32
  E_JsDEBUG_OUTSIDE_OF_VM = -1916338172_i32
  E_JsDEBUG_INVALID_MEMORY_ADDRESS = -1916338171_i32
  E_JsDEBUG_SOURCE_LOCATION_NOT_FOUND = -1916338170_i32
  E_JsDEBUG_RUNTIME_NOT_IN_DEBUG_MODE = -1916338169_i32
  DMP_PHYSICAL_MEMORY_BLOCK_SIZE_32 = 700_u32
  DMP_CONTEXT_RECORD_SIZE_32 = 1200_u32
  DMP_RESERVED_0_SIZE_32 = 1760_u32
  DMP_RESERVED_2_SIZE_32 = 16_u32
  DMP_RESERVED_3_SIZE_32 = 56_u32
  DMP_PHYSICAL_MEMORY_BLOCK_SIZE_64 = 700_u32
  DMP_CONTEXT_RECORD_SIZE_64 = 3000_u32
  DMP_RESERVED_0_SIZE_64 = 4008_u32
  DMP_HEADER_COMMENT_SIZE = 128_u32
  DUMP_SUMMARY_VALID_KERNEL_VA = 1_u32
  DUMP_SUMMARY_VALID_CURRENT_USER_VA = 2_u32
  INTERFACESAFE_FOR_UNTRUSTED_CALLER = 1_u32
  INTERFACESAFE_FOR_UNTRUSTED_DATA = 2_u32
  INTERFACE_USES_DISPEX = 4_u32
  INTERFACE_USES_SECURITY_MANAGER = 8_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_10 = 10_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_11 = 11_u32
  WHEA_MAX_MC_BANKS = 32_u32
  WHEA_ERROR_SOURCE_FLAG_FIRMWAREFIRST = 1_u32
  WHEA_ERROR_SOURCE_FLAG_GLOBAL = 2_u32
  WHEA_ERROR_SOURCE_FLAG_GHES_ASSIST = 4_u32
  WHEA_ERROR_SOURCE_FLAG_DEFAULTSOURCE = 2147483648_u32
  WHEA_ERROR_SOURCE_INVALID_RELATED_SOURCE = 65535_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFMCE = 0_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFCMC = 1_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFNMI = 2_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFMCA = 3_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCMC = 4_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCPE = 5_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERROOTPORT = 6_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERENDPOINT = 7_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERBRIDGE = 8_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC = 9_u32
  WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC_V2 = 10_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_IA32MCA = 0_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_Intel64MCA = 1_u32
  WHEA_XPF_MC_BANK_STATUSFORMAT_AMD64MCA = 2_u32
  WHEA_NOTIFICATION_TYPE_POLLED = 0_u32
  WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT = 1_u32
  WHEA_NOTIFICATION_TYPE_LOCALINTERRUPT = 2_u32
  WHEA_NOTIFICATION_TYPE_SCI = 3_u32
  WHEA_NOTIFICATION_TYPE_NMI = 4_u32
  WHEA_NOTIFICATION_TYPE_CMCI = 5_u32
  WHEA_NOTIFICATION_TYPE_MCE = 6_u32
  WHEA_NOTIFICATION_TYPE_GPIO_SIGNAL = 7_u32
  WHEA_NOTIFICATION_TYPE_ARMV8_SEA = 8_u32
  WHEA_NOTIFICATION_TYPE_ARMV8_SEI = 9_u32
  WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT_GSIV = 10_u32
  WHEA_NOTIFICATION_TYPE_SDEI = 11_u32
  WHEA_DEVICE_DRIVER_CONFIG_V1 = 1_u32
  WHEA_DEVICE_DRIVER_CONFIG_V2 = 2_u32
  WHEA_DEVICE_DRIVER_CONFIG_MIN = 1_u32
  WHEA_DEVICE_DRIVER_CONFIG_MAX = 2_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_V1 = 1_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_MIN = 1_u32
  WHEA_DEVICE_DRIVER_BUFFER_SET_MAX = 1_u32
  WHEA_DISABLE_OFFLINE = 0_u32
  WHEA_MEM_PERSISTOFFLINE = 1_u32
  WHEA_MEM_PFA_DISABLE = 2_u32
  WHEA_MEM_PFA_PAGECOUNT = 3_u32
  WHEA_MEM_PFA_THRESHOLD = 4_u32
  WHEA_MEM_PFA_TIMEOUT = 5_u32
  WHEA_DISABLE_DUMMY_WRITE = 6_u32
  WHEA_RESTORE_CMCI_ENABLED = 7_u32
  WHEA_RESTORE_CMCI_ATTEMPTS = 8_u32
  WHEA_RESTORE_CMCI_ERR_LIMIT = 9_u32
  WHEA_CMCI_THRESHOLD_COUNT = 10_u32
  WHEA_CMCI_THRESHOLD_TIME = 11_u32
  WHEA_CMCI_THRESHOLD_POLL_COUNT = 12_u32
  WHEA_PENDING_PAGE_LIST_SZ = 13_u32
  WHEA_BAD_PAGE_LIST_MAX_SIZE = 14_u32
  WHEA_BAD_PAGE_LIST_LOCATION = 15_u32
  WHEA_NOTIFY_ALL_OFFLINES = 16_u32
  IPMI_OS_SEL_RECORD_VERSION_1 = 1_u32
  IPMI_OS_SEL_RECORD_VERSION = 1_u32
  IPMI_IOCTL_INDEX = 1024_u32
  IOCTL_IPMI_INTERNAL_RECORD_SEL_EVENT = 2232320_u32
  IPMI_OS_SEL_RECORD_MASK = 65535_u32
  DBGKD_SIMULATION_NONE = 0_i32
  DBGKD_SIMULATION_EXDI = 1_i32
  ACTIVPROF_E_PROFILER_PRESENT = -2147220992_i32
  ACTIVPROF_E_PROFILER_ABSENT = -2147220991_i32
  ACTIVPROF_E_UNABLE_TO_APPLY_ACTION = -2147220990_i32
  PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE = 4294967295_u32
  Sevmax = 4_i32
  Fasapreferinternalhandler = 1_u32
  Fasasupportinternalhandler = 2_u32
  Fasacasesensitive = 4_u32
  SCRIPT_CMPL_NOLIST = 0_u32
  SCRIPT_CMPL_MEMBERLIST = 1_u32
  SCRIPT_CMPL_ENUMLIST = 2_u32
  SCRIPT_CMPL_PARAMTIP = 4_u32
  SCRIPT_CMPL_GLOBALLIST = 8_u32
  SCRIPT_CMPL_ENUM_TRIGGER = 1_u32
  SCRIPT_CMPL_MEMBER_TRIGGER = 2_u32
  SCRIPT_CMPL_PARAM_TRIGGER = 3_u32
  SCRIPT_CMPL_COMMIT = 4_u32
  GETATTRTYPE_NORMAL = 0_u32
  GETATTRTYPE_DEPSCAN = 1_u32
  GETATTRFLAG_THIS = 256_u32
  GETATTRFLAG_HUMANTEXT = 32768_u32
  SOURCETEXT_ATTR_HUMANTEXT = 32768_u32
  SOURCETEXT_ATTR_IDENTIFIER = 256_u32
  SOURCETEXT_ATTR_MEMBERLOOKUP = 512_u32
  SOURCETEXT_ATTR_THIS = 1024_u32
  CLSID_ProcessDebugManager = LibC::GUID.new(0x78a51822_u32, 0x51f4_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  CLSID_DebugHelper = LibC::GUID.new(0xbfcc060_u32, 0x8c1d_u16, 0x11d0_u16, StaticArray[0xac_u8, 0xcd_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x27_u8, 0x5c_u8])
  CLSID_CDebugDocumentHelper = LibC::GUID.new(0x83b8bca6_u32, 0x687c_u16, 0x11d0_u16, StaticArray[0xa4_u8, 0x5_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x27_u8, 0x5c_u8])
  CLSID_MachineDebugManager_RETAIL = LibC::GUID.new(0xc0a3666_u32, 0x30c9_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  CLSID_MachineDebugManager_DEBUG = LibC::GUID.new(0x49769cec_u32, 0x3a55_u16, 0x4bb0_u16, StaticArray[0xb6_u8, 0x97_u8, 0x88_u8, 0xfe_u8, 0xde_u8, 0x77_u8, 0xe8_u8, 0xea_u8])
  CLSID_DefaultDebugSessionProvider = LibC::GUID.new(0x834128a2_u32, 0x51f4_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])

  alias PDEBUG_EXTENSION_INITIALIZE = Proc(UInt32*, UInt32*, HRESULT)
  alias PDEBUG_EXTENSION_UNINITIALIZE = Proc(Void)
  alias PDEBUG_EXTENSION_CANUNLOAD = Proc(HRESULT)
  alias PDEBUG_EXTENSION_UNLOAD = Proc(Void)
  alias PDEBUG_EXTENSION_NOTIFY = Proc(UInt32, UInt64, Void)
  alias PDEBUG_EXTENSION_CALL = Proc(IDebugClient, PSTR, HRESULT)
  alias PDEBUG_EXTENSION_KNOWN_STRUCT = Proc(UInt32, UInt64, PSTR, UInt8*, UInt32*, HRESULT)
  alias PDEBUG_EXTENSION_KNOWN_STRUCT_EX = Proc(IDebugClient, UInt32, UInt64, PSTR, UInt8*, UInt32*, HRESULT)
  alias PDEBUG_EXTENSION_QUERY_VALUE_NAMES = Proc(IDebugClient, UInt32, Char*, UInt32, UInt32*, HRESULT)
  alias PDEBUG_EXTENSION_PROVIDE_VALUE = Proc(IDebugClient, UInt32, LibC::LPWSTR, UInt64*, UInt64*, UInt32*, UInt32*, HRESULT)
  alias PDEBUG_STACK_PROVIDER_BEGINTHREADSTACKRECONSTRUCTION = Proc(UInt32, Void*, UInt32, HRESULT)
  alias PDEBUG_STACK_PROVIDER_RECONSTRUCTSTACK = Proc(UInt32, DEBUG_STACK_FRAME_EX*, UInt32, STACK_SYM_FRAME_INFO**, UInt32*, HRESULT)
  alias PDEBUG_STACK_PROVIDER_FREESTACKSYMFRAMES = Proc(STACK_SYM_FRAME_INFO*, HRESULT)
  alias PDEBUG_STACK_PROVIDER_ENDTHREADSTACKRECONSTRUCTION = Proc(HRESULT)
  alias PWINDBG_OUTPUT_ROUTINE = Proc(PSTR, Void)
  alias PWINDBG_GET_EXPRESSION = Proc(PSTR, LibC::UINT_PTR)
  alias PWINDBG_GET_EXPRESSION32 = Proc(PSTR, UInt32)
  alias PWINDBG_GET_EXPRESSION64 = Proc(PSTR, UInt64)
  alias PWINDBG_GET_SYMBOL = Proc(Void*, PSTR, LibC::UINT_PTR*, Void)
  alias PWINDBG_GET_SYMBOL32 = Proc(UInt32, PSTR, UInt32*, Void)
  alias PWINDBG_GET_SYMBOL64 = Proc(UInt64, PSTR, UInt64*, Void)
  alias PWINDBG_DISASM = Proc(LibC::UINT_PTR*, PSTR, UInt32, UInt32)
  alias PWINDBG_DISASM32 = Proc(UInt32*, PSTR, UInt32, UInt32)
  alias PWINDBG_DISASM64 = Proc(UInt64*, PSTR, UInt32, UInt32)
  alias PWINDBG_CHECK_CONTROL_C = Proc(UInt32)
  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE = Proc(LibC::UINT_PTR, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 = Proc(UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE = Proc(LibC::UINT_PTR, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 = Proc(UInt32, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_GET_THREAD_CONTEXT_ROUTINE = Proc(UInt32, CONTEXT*, UInt32, UInt32)
  alias PWINDBG_SET_THREAD_CONTEXT_ROUTINE = Proc(UInt32, CONTEXT*, UInt32, UInt32)
  alias PWINDBG_IOCTL_ROUTINE = Proc(UInt16, Void*, UInt32, UInt32)
  alias PWINDBG_OLDKD_READ_PHYSICAL_MEMORY = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY = Proc(UInt64, Void*, UInt32, UInt32*, UInt32)
  alias PWINDBG_STACKTRACE_ROUTINE = Proc(UInt32, UInt32, UInt32, EXTSTACKTRACE*, UInt32, UInt32)
  alias PWINDBG_STACKTRACE_ROUTINE32 = Proc(UInt32, UInt32, UInt32, EXTSTACKTRACE32*, UInt32, UInt32)
  alias PWINDBG_STACKTRACE_ROUTINE64 = Proc(UInt64, UInt64, UInt64, EXTSTACKTRACE64*, UInt32, UInt32)
  alias PWINDBG_OLD_EXTENSION_ROUTINE = Proc(UInt32, WINDBG_EXTENSION_APIS*, PSTR, Void)
  alias PWINDBG_EXTENSION_ROUTINE = Proc(LibC::HANDLE, LibC::HANDLE, UInt32, UInt32, PSTR, Void)
  alias PWINDBG_EXTENSION_ROUTINE32 = Proc(LibC::HANDLE, LibC::HANDLE, UInt32, UInt32, PSTR, Void)
  alias PWINDBG_EXTENSION_ROUTINE64 = Proc(LibC::HANDLE, LibC::HANDLE, UInt64, UInt32, PSTR, Void)
  alias PWINDBG_OLDKD_EXTENSION_ROUTINE = Proc(UInt32, WINDBG_OLDKD_EXTENSION_APIS*, PSTR, Void)
  alias PWINDBG_EXTENSION_DLL_INIT = Proc(WINDBG_EXTENSION_APIS*, UInt16, UInt16, Void)
  alias PWINDBG_EXTENSION_DLL_INIT32 = Proc(WINDBG_EXTENSION_APIS32*, UInt16, UInt16, Void)
  alias PWINDBG_EXTENSION_DLL_INIT64 = Proc(WINDBG_EXTENSION_APIS64*, UInt16, UInt16, Void)
  alias PWINDBG_CHECK_VERSION = Proc(UInt32)
  alias PWINDBG_EXTENSION_API_VERSION = Proc(EXT_API_VERSION*)
  alias PSYM_DUMP_FIELD_CALLBACK = Proc(FIELD_INFO*, Void*, UInt32)
  alias PGET_RUNTIME_FUNCTION_CALLBACK = Proc(UInt64, Void*, IMAGE_RUNTIME_FUNCTION_ENTRY*)
  alias PVECTORED_EXCEPTION_HANDLER = Proc(EXCEPTION_POINTERS*, Int32)
  alias LPTOP_LEVEL_EXCEPTION_FILTER = Proc(EXCEPTION_POINTERS*, Int32)
  alias PWAITCHAINCALLBACK = Proc(Void*, LibC::UINT_PTR, UInt32, UInt32*, WAITCHAIN_NODE_INFO*, Int32*, Void)
  alias PCOGETCALLSTATE = Proc(Int32, UInt32*, HRESULT)
  alias PCOGETACTIVATIONSTATE = Proc(Guid, UInt32, UInt32*, HRESULT)
  alias MINIDUMP_CALLBACK_ROUTINE = Proc(Void*, MINIDUMP_CALLBACK_INPUT*, MINIDUMP_CALLBACK_OUTPUT*, LibC::BOOL)
  alias PIMAGEHLP_STATUS_ROUTINE = Proc(IMAGEHLP_STATUS_REASON, PSTR, PSTR, LibC::UINT_PTR, LibC::UINT_PTR, LibC::BOOL)
  alias PIMAGEHLP_STATUS_ROUTINE32 = Proc(IMAGEHLP_STATUS_REASON, PSTR, PSTR, UInt32, LibC::UINT_PTR, LibC::BOOL)
  alias PIMAGEHLP_STATUS_ROUTINE64 = Proc(IMAGEHLP_STATUS_REASON, PSTR, PSTR, UInt64, LibC::UINT_PTR, LibC::BOOL)
  alias DIGEST_FUNCTION = Proc(Void*, UInt8*, UInt32, LibC::BOOL)
  alias PFIND_DEBUG_FILE_CALLBACK = Proc(LibC::HANDLE, PSTR, Void*, LibC::BOOL)
  alias PFIND_DEBUG_FILE_CALLBACKW = Proc(LibC::HANDLE, LibC::LPWSTR, Void*, LibC::BOOL)
  alias PFINDFILEINPATHCALLBACK = Proc(PSTR, Void*, LibC::BOOL)
  alias PFINDFILEINPATHCALLBACKW = Proc(LibC::LPWSTR, Void*, LibC::BOOL)
  alias PFIND_EXE_FILE_CALLBACK = Proc(LibC::HANDLE, PSTR, Void*, LibC::BOOL)
  alias PFIND_EXE_FILE_CALLBACKW = Proc(LibC::HANDLE, LibC::LPWSTR, Void*, LibC::BOOL)
  alias PENUMDIRTREE_CALLBACK = Proc(PSTR, Void*, LibC::BOOL)
  alias PENUMDIRTREE_CALLBACKW = Proc(LibC::LPWSTR, Void*, LibC::BOOL)
  alias PREAD_PROCESS_MEMORY_ROUTINE64 = Proc(LibC::HANDLE, UInt64, Void*, UInt32, UInt32*, LibC::BOOL)
  alias PFUNCTION_TABLE_ACCESS_ROUTINE64 = Proc(LibC::HANDLE, UInt64, Void*)
  alias PGET_MODULE_BASE_ROUTINE64 = Proc(LibC::HANDLE, UInt64, UInt64)
  alias PTRANSLATE_ADDRESS_ROUTINE64 = Proc(LibC::HANDLE, LibC::HANDLE, ADDRESS64*, UInt64)
  alias PSYM_ENUMMODULES_CALLBACK64 = Proc(PSTR, UInt64, Void*, LibC::BOOL)
  alias PSYM_ENUMMODULES_CALLBACKW64 = Proc(LibC::LPWSTR, UInt64, Void*, LibC::BOOL)
  alias PENUMLOADED_MODULES_CALLBACK64 = Proc(PSTR, UInt64, UInt32, Void*, LibC::BOOL)
  alias PENUMLOADED_MODULES_CALLBACKW64 = Proc(LibC::LPWSTR, UInt64, UInt32, Void*, LibC::BOOL)
  alias PSYM_ENUMSYMBOLS_CALLBACK64 = Proc(PSTR, UInt64, UInt32, Void*, LibC::BOOL)
  alias PSYM_ENUMSYMBOLS_CALLBACK64W = Proc(LibC::LPWSTR, UInt64, UInt32, Void*, LibC::BOOL)
  alias PSYMBOL_REGISTERED_CALLBACK64 = Proc(LibC::HANDLE, UInt32, UInt64, UInt64, LibC::BOOL)
  alias PSYMBOL_FUNCENTRY_CALLBACK = Proc(LibC::HANDLE, UInt32, Void*, Void*)
  alias PSYMBOL_FUNCENTRY_CALLBACK64 = Proc(LibC::HANDLE, UInt64, UInt64, Void*)
  alias PSYM_ENUMSOURCEFILES_CALLBACK = Proc(SOURCEFILE*, Void*, LibC::BOOL)
  alias PSYM_ENUMSOURCEFILES_CALLBACKW = Proc(SOURCEFILEW*, Void*, LibC::BOOL)
  alias PSYM_ENUMLINES_CALLBACK = Proc(SRCCODEINFO*, Void*, LibC::BOOL)
  alias PSYM_ENUMLINES_CALLBACKW = Proc(SRCCODEINFOW*, Void*, LibC::BOOL)
  alias PENUMSOURCEFILETOKENSCALLBACK = Proc(Void*, LibC::UINT_PTR, LibC::BOOL)
  alias PSYM_ENUMPROCESSES_CALLBACK = Proc(LibC::HANDLE, Void*, LibC::BOOL)
  alias PSYM_ENUMERATESYMBOLS_CALLBACK = Proc(SYMBOL_INFO*, UInt32, Void*, LibC::BOOL)
  alias PSYM_ENUMERATESYMBOLS_CALLBACKW = Proc(SYMBOL_INFOW*, UInt32, Void*, LibC::BOOL)
  alias SYMADDSOURCESTREAM = Proc(LibC::HANDLE, UInt64, PSTR, UInt8*, LibC::UINT_PTR, LibC::BOOL)
  alias SYMADDSOURCESTREAMA = Proc(LibC::HANDLE, UInt64, PSTR, UInt8*, LibC::UINT_PTR, LibC::BOOL)
  alias PDBGHELP_CREATE_USER_DUMP_CALLBACK = Proc(UInt32, Void**, UInt32*, Void*, LibC::BOOL)
  alias PSYMBOLSERVERPROC = Proc(PSTR, PSTR, Void*, UInt32, UInt32, PSTR, LibC::BOOL)
  alias PSYMBOLSERVERPROCA = Proc(PSTR, PSTR, Void*, UInt32, UInt32, PSTR, LibC::BOOL)
  alias PSYMBOLSERVERPROCW = Proc(LibC::LPWSTR, LibC::LPWSTR, Void*, UInt32, UInt32, LibC::LPWSTR, LibC::BOOL)
  alias PSYMBOLSERVERBYINDEXPROC = Proc(PSTR, PSTR, PSTR, PSTR, LibC::BOOL)
  alias PSYMBOLSERVERBYINDEXPROCA = Proc(PSTR, PSTR, PSTR, PSTR, LibC::BOOL)
  alias PSYMBOLSERVERBYINDEXPROCW = Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL)
  alias PSYMBOLSERVEROPENPROC = Proc(LibC::BOOL)
  alias PSYMBOLSERVERCLOSEPROC = Proc(LibC::BOOL)
  alias PSYMBOLSERVERSETOPTIONSPROC = Proc(LibC::UINT_PTR, UInt64, LibC::BOOL)
  alias PSYMBOLSERVERSETOPTIONSWPROC = Proc(LibC::UINT_PTR, UInt64, LibC::BOOL)
  alias PSYMBOLSERVERCALLBACKPROC = Proc(LibC::UINT_PTR, UInt64, UInt64, LibC::BOOL)
  alias PSYMBOLSERVERGETOPTIONSPROC = Proc(LibC::UINT_PTR)
  alias PSYMBOLSERVERPINGPROC = Proc(PSTR, LibC::BOOL)
  alias PSYMBOLSERVERPINGPROCA = Proc(PSTR, LibC::BOOL)
  alias PSYMBOLSERVERPINGPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias PSYMBOLSERVERGETVERSION = Proc(API_VERSION*, LibC::BOOL)
  alias PSYMBOLSERVERDELTANAME = Proc(PSTR, Void*, UInt32, UInt32, Void*, UInt32, UInt32, PSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERDELTANAMEW = Proc(LibC::LPWSTR, Void*, UInt32, UInt32, Void*, UInt32, UInt32, LibC::LPWSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERGETSUPPLEMENT = Proc(PSTR, PSTR, PSTR, PSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERGETSUPPLEMENTW = Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERSTORESUPPLEMENT = Proc(PSTR, PSTR, PSTR, PSTR, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias PSYMBOLSERVERSTORESUPPLEMENTW = Proc(LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias PSYMBOLSERVERGETINDEXSTRING = Proc(Void*, UInt32, UInt32, PSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERGETINDEXSTRINGW = Proc(Void*, UInt32, UInt32, LibC::LPWSTR, LibC::UINT_PTR, LibC::BOOL)
  alias PSYMBOLSERVERSTOREFILE = Proc(PSTR, PSTR, Void*, UInt32, UInt32, PSTR, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias PSYMBOLSERVERSTOREFILEW = Proc(LibC::LPWSTR, LibC::LPWSTR, Void*, UInt32, UInt32, LibC::LPWSTR, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias PSYMBOLSERVERISSTORE = Proc(PSTR, LibC::BOOL)
  alias PSYMBOLSERVERISSTOREW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias PSYMBOLSERVERVERSION = Proc(UInt32)
  alias PSYMBOLSERVERMESSAGEPROC = Proc(LibC::UINT_PTR, UInt64, UInt64, LibC::BOOL)
  alias PSYMBOLSERVERWEXPROC = Proc(LibC::LPWSTR, LibC::LPWSTR, Void*, UInt32, UInt32, LibC::LPWSTR, SYMSRV_EXTENDED_OUTPUT_DATA*, LibC::BOOL)
  alias PSYMBOLSERVERPINGPROCWEX = Proc(LibC::LPWSTR, LibC::BOOL)
  alias PSYMBOLSERVERGETOPTIONDATAPROC = Proc(LibC::UINT_PTR, UInt64*, LibC::BOOL)
  alias PSYMBOLSERVERSETHTTPAUTHHEADER = Proc(LibC::LPWSTR, LibC::BOOL)
  alias LPCALL_BACK_USER_INTERRUPT_ROUTINE = Proc(UInt32)
  alias WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER = Proc(Void*, UInt32, NTSTATUS)
  alias WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER = Proc(Void*, Void)
  alias WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER = Proc(Void*, UInt32*, NTSTATUS)


  enum SYM_LOAD_FLAGS : UInt32
    SLMFLAG_NONE = 0
    SLMFLAG_VIRTUAL = 1
    SLMFLAG_ALT_INDEX = 2
    SLMFLAG_NO_SYMBOLS = 4
  end

  enum IMAGE_SECTION_CHARACTERISTICS : UInt32
    IMAGE_SCN_TYPE_NO_PAD = 8
    IMAGE_SCN_CNT_CODE = 32
    IMAGE_SCN_CNT_INITIALIZED_DATA = 64
    IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128
    IMAGE_SCN_LNK_OTHER = 256
    IMAGE_SCN_LNK_INFO = 512
    IMAGE_SCN_LNK_REMOVE = 2048
    IMAGE_SCN_LNK_COMDAT = 4096
    IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384
    IMAGE_SCN_GPREL = 32768
    IMAGE_SCN_MEM_FARDATA = 32768
    IMAGE_SCN_MEM_PURGEABLE = 131072
    IMAGE_SCN_MEM_16BIT = 131072
    IMAGE_SCN_MEM_LOCKED = 262144
    IMAGE_SCN_MEM_PRELOAD = 524288
    IMAGE_SCN_ALIGN_1BYTES = 1048576
    IMAGE_SCN_ALIGN_2BYTES = 2097152
    IMAGE_SCN_ALIGN_4BYTES = 3145728
    IMAGE_SCN_ALIGN_8BYTES = 4194304
    IMAGE_SCN_ALIGN_16BYTES = 5242880
    IMAGE_SCN_ALIGN_32BYTES = 6291456
    IMAGE_SCN_ALIGN_64BYTES = 7340032
    IMAGE_SCN_ALIGN_128BYTES = 8388608
    IMAGE_SCN_ALIGN_256BYTES = 9437184
    IMAGE_SCN_ALIGN_512BYTES = 10485760
    IMAGE_SCN_ALIGN_1024BYTES = 11534336
    IMAGE_SCN_ALIGN_2048BYTES = 12582912
    IMAGE_SCN_ALIGN_4096BYTES = 13631488
    IMAGE_SCN_ALIGN_8192BYTES = 14680064
    IMAGE_SCN_ALIGN_MASK = 15728640
    IMAGE_SCN_LNK_NRELOC_OVFL = 16777216
    IMAGE_SCN_MEM_DISCARDABLE = 33554432
    IMAGE_SCN_MEM_NOT_CACHED = 67108864
    IMAGE_SCN_MEM_NOT_PAGED = 134217728
    IMAGE_SCN_MEM_SHARED = 268435456
    IMAGE_SCN_MEM_EXECUTE = 536870912
    IMAGE_SCN_MEM_READ = 1073741824
    IMAGE_SCN_MEM_WRITE = 2147483648
    IMAGE_SCN_SCALE_INDEX = 1
  end

  enum IMAGE_FILE_MACHINE : UInt16
    IMAGE_FILE_MACHINE_AXP64 = 644
    IMAGE_FILE_MACHINE_I386 = 332
    IMAGE_FILE_MACHINE_IA64 = 512
    IMAGE_FILE_MACHINE_AMD64 = 34404
    IMAGE_FILE_MACHINE_UNKNOWN = 0
    IMAGE_FILE_MACHINE_TARGET_HOST = 1
    IMAGE_FILE_MACHINE_R3000 = 354
    IMAGE_FILE_MACHINE_R4000 = 358
    IMAGE_FILE_MACHINE_R10000 = 360
    IMAGE_FILE_MACHINE_WCEMIPSV2 = 361
    IMAGE_FILE_MACHINE_ALPHA = 388
    IMAGE_FILE_MACHINE_SH3 = 418
    IMAGE_FILE_MACHINE_SH3DSP = 419
    IMAGE_FILE_MACHINE_SH3E = 420
    IMAGE_FILE_MACHINE_SH4 = 422
    IMAGE_FILE_MACHINE_SH5 = 424
    IMAGE_FILE_MACHINE_ARM = 448
    IMAGE_FILE_MACHINE_THUMB = 450
    IMAGE_FILE_MACHINE_ARMNT = 452
    IMAGE_FILE_MACHINE_AM33 = 467
    IMAGE_FILE_MACHINE_POWERPC = 496
    IMAGE_FILE_MACHINE_POWERPCFP = 497
    IMAGE_FILE_MACHINE_MIPS16 = 614
    IMAGE_FILE_MACHINE_ALPHA64 = 644
    IMAGE_FILE_MACHINE_MIPSFPU = 870
    IMAGE_FILE_MACHINE_MIPSFPU16 = 1126
    IMAGE_FILE_MACHINE_TRICORE = 1312
    IMAGE_FILE_MACHINE_CEF = 3311
    IMAGE_FILE_MACHINE_EBC = 3772
    IMAGE_FILE_MACHINE_M32R = 36929
    IMAGE_FILE_MACHINE_ARM64 = 43620
    IMAGE_FILE_MACHINE_CEE = 49390
  end

  enum IMAGE_SUBSYSTEM : UInt16
    IMAGE_SUBSYSTEM_UNKNOWN = 0
    IMAGE_SUBSYSTEM_NATIVE = 1
    IMAGE_SUBSYSTEM_WINDOWS_GUI = 2
    IMAGE_SUBSYSTEM_WINDOWS_CUI = 3
    IMAGE_SUBSYSTEM_OS2_CUI = 5
    IMAGE_SUBSYSTEM_POSIX_CUI = 7
    IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8
    IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9
    IMAGE_SUBSYSTEM_EFI_APPLICATION = 10
    IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11
    IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12
    IMAGE_SUBSYSTEM_EFI_ROM = 13
    IMAGE_SUBSYSTEM_XBOX = 14
    IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16
    IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17
  end

  enum IMAGE_DLL_CHARACTERISTICS : UInt16
    IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32
    IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64
    IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128
    IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256
    IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512
    IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024
    IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048
    IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096
    IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192
    IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384
    IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768
    IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1
    IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2
    IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4
    IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8
    IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16
    IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32
  end

  enum IMAGE_OPTIONAL_HEADER_MAGIC : UInt16
    IMAGE_NT_OPTIONAL_HDR_MAGIC = 523
    IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267
    IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523
    IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263
  end

  enum BUGCHECK_ERROR : UInt32
    HARDWARE_PROFILE_UNDOCKED_STRING = 1073807361
    HARDWARE_PROFILE_DOCKED_STRING = 1073807362
    HARDWARE_PROFILE_UNKNOWN_STRING = 1073807363
    WINDOWS_NT_BANNER = 1073741950
    WINDOWS_NT_CSD_STRING = 1073741959
    WINDOWS_NT_INFO_STRING = 1073741960
    WINDOWS_NT_MP_STRING = 1073741961
    THREAD_TERMINATE_HELD_MUTEX = 1073741962
    WINDOWS_NT_INFO_STRING_PLURAL = 1073741981
    WINDOWS_NT_RC_STRING = 1073741982
    APC_INDEX_MISMATCH = 1
    DEVICE_QUEUE_NOT_BUSY = 2
    INVALID_AFFINITY_SET = 3
    INVALID_DATA_ACCESS_TRAP = 4
    INVALID_PROCESS_ATTACH_ATTEMPT = 5
    INVALID_PROCESS_DETACH_ATTEMPT = 6
    INVALID_SOFTWARE_INTERRUPT = 7
    IRQL_NOT_DISPATCH_LEVEL = 8
    IRQL_NOT_GREATER_OR_EQUAL = 9
    IRQL_NOT_LESS_OR_EQUAL = 10
    NO_EXCEPTION_HANDLING_SUPPORT = 11
    MAXIMUM_WAIT_OBJECTS_EXCEEDED = 12
    MUTEX_LEVEL_NUMBER_VIOLATION = 13
    NO_USER_MODE_CONTEXT = 14
    SPIN_LOCK_ALREADY_OWNED = 15
    SPIN_LOCK_NOT_OWNED = 16
    THREAD_NOT_MUTEX_OWNER = 17
    TRAP_CAUSE_UNKNOWN = 18
    EMPTY_THREAD_REAPER_LIST = 19
    CREATE_DELETE_LOCK_NOT_LOCKED = 20
    LAST_CHANCE_CALLED_FROM_KMODE = 21
    CID_HANDLE_CREATION = 22
    CID_HANDLE_DELETION = 23
    REFERENCE_BY_POINTER = 24
    BAD_POOL_HEADER = 25
    MEMORY_MANAGEMENT = 26
    PFN_SHARE_COUNT = 27
    PFN_REFERENCE_COUNT = 28
    NO_SPIN_LOCK_AVAILABLE = 29
    KMODE_EXCEPTION_NOT_HANDLED = 30
    SHARED_RESOURCE_CONV_ERROR = 31
    KERNEL_APC_PENDING_DURING_EXIT = 32
    QUOTA_UNDERFLOW = 33
    FILE_SYSTEM = 34
    FAT_FILE_SYSTEM = 35
    NTFS_FILE_SYSTEM = 36
    NPFS_FILE_SYSTEM = 37
    CDFS_FILE_SYSTEM = 38
    RDR_FILE_SYSTEM = 39
    CORRUPT_ACCESS_TOKEN = 40
    SECURITY_SYSTEM = 41
    INCONSISTENT_IRP = 42
    PANIC_STACK_SWITCH = 43
    PORT_DRIVER_INTERNAL = 44
    SCSI_DISK_DRIVER_INTERNAL = 45
    DATA_BUS_ERROR = 46
    INSTRUCTION_BUS_ERROR = 47
    SET_OF_INVALID_CONTEXT = 48
    PHASE0_INITIALIZATION_FAILED = 49
    PHASE1_INITIALIZATION_FAILED = 50
    UNEXPECTED_INITIALIZATION_CALL = 51
    CACHE_MANAGER = 52
    NO_MORE_IRP_STACK_LOCATIONS = 53
    DEVICE_REFERENCE_COUNT_NOT_ZERO = 54
    FLOPPY_INTERNAL_ERROR = 55
    SERIAL_DRIVER_INTERNAL = 56
    SYSTEM_EXIT_OWNED_MUTEX = 57
    SYSTEM_UNWIND_PREVIOUS_USER = 58
    SYSTEM_SERVICE_EXCEPTION = 59
    INTERRUPT_UNWIND_ATTEMPTED = 60
    INTERRUPT_EXCEPTION_NOT_HANDLED = 61
    MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED = 62
    NO_MORE_SYSTEM_PTES = 63
    TARGET_MDL_TOO_SMALL = 64
    MUST_SUCCEED_POOL_EMPTY = 65
    ATDISK_DRIVER_INTERNAL = 66
    NO_SUCH_PARTITION = 67
    MULTIPLE_IRP_COMPLETE_REQUESTS = 68
    INSUFFICIENT_SYSTEM_MAP_REGS = 69
    DEREF_UNKNOWN_LOGON_SESSION = 70
    REF_UNKNOWN_LOGON_SESSION = 71
    CANCEL_STATE_IN_COMPLETED_IRP = 72
    PAGE_FAULT_WITH_INTERRUPTS_OFF = 73
    IRQL_GT_ZERO_AT_SYSTEM_SERVICE = 74
    STREAMS_INTERNAL_ERROR = 75
    FATAL_UNHANDLED_HARD_ERROR = 76
    NO_PAGES_AVAILABLE = 77
    PFN_LIST_CORRUPT = 78
    NDIS_INTERNAL_ERROR = 79
    PAGE_FAULT_IN_NONPAGED_AREA = 80
    PAGE_FAULT_IN_NONPAGED_AREA_M = 268435536
    REGISTRY_ERROR = 81
    MAILSLOT_FILE_SYSTEM = 82
    NO_BOOT_DEVICE = 83
    LM_SERVER_INTERNAL_ERROR = 84
    DATA_COHERENCY_EXCEPTION = 85
    INSTRUCTION_COHERENCY_EXCEPTION = 86
    XNS_INTERNAL_ERROR = 87
    VOLMGRX_INTERNAL_ERROR = 88
    PINBALL_FILE_SYSTEM = 89
    CRITICAL_SERVICE_FAILED = 90
    SET_ENV_VAR_FAILED = 91
    HAL_INITIALIZATION_FAILED = 92
    UNSUPPORTED_PROCESSOR = 93
    OBJECT_INITIALIZATION_FAILED = 94
    SECURITY_INITIALIZATION_FAILED = 95
    PROCESS_INITIALIZATION_FAILED = 96
    HAL1_INITIALIZATION_FAILED = 97
    OBJECT1_INITIALIZATION_FAILED = 98
    SECURITY1_INITIALIZATION_FAILED = 99
    SYMBOLIC_INITIALIZATION_FAILED = 100
    MEMORY1_INITIALIZATION_FAILED = 101
    CACHE_INITIALIZATION_FAILED = 102
    CONFIG_INITIALIZATION_FAILED = 103
    FILE_INITIALIZATION_FAILED = 104
    IO1_INITIALIZATION_FAILED = 105
    LPC_INITIALIZATION_FAILED = 106
    PROCESS1_INITIALIZATION_FAILED = 107
    REFMON_INITIALIZATION_FAILED = 108
    SESSION1_INITIALIZATION_FAILED = 109
    BOOTPROC_INITIALIZATION_FAILED = 110
    VSL_INITIALIZATION_FAILED = 111
    SOFT_RESTART_FATAL_ERROR = 112
    ASSIGN_DRIVE_LETTERS_FAILED = 114
    CONFIG_LIST_FAILED = 115
    BAD_SYSTEM_CONFIG_INFO = 116
    CANNOT_WRITE_CONFIGURATION = 117
    PROCESS_HAS_LOCKED_PAGES = 118
    KERNEL_STACK_INPAGE_ERROR = 119
    PHASE0_EXCEPTION = 120
    MISMATCHED_HAL = 121
    KERNEL_DATA_INPAGE_ERROR = 122
    INACCESSIBLE_BOOT_DEVICE = 123
    BUGCODE_NDIS_DRIVER = 124
    INSTALL_MORE_MEMORY = 125
    SYSTEM_THREAD_EXCEPTION_NOT_HANDLED = 126
    SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M = 268435582
    UNEXPECTED_KERNEL_MODE_TRAP = 127
    UNEXPECTED_KERNEL_MODE_TRAP_M = 268435583
    NMI_HARDWARE_FAILURE = 128
    SPIN_LOCK_INIT_FAILURE = 129
    DFS_FILE_SYSTEM = 130
    OFS_FILE_SYSTEM = 131
    RECOM_DRIVER = 132
    SETUP_FAILURE = 133
    AUDIT_FAILURE = 134
    MBR_CHECKSUM_MISMATCH = 139
    KERNEL_MODE_EXCEPTION_NOT_HANDLED = 142
    KERNEL_MODE_EXCEPTION_NOT_HANDLED_M = 268435598
    PP0_INITIALIZATION_FAILED = 143
    PP1_INITIALIZATION_FAILED = 144
    WIN32K_INIT_OR_RIT_FAILURE = 145
    UP_DRIVER_ON_MP_SYSTEM = 146
    INVALID_KERNEL_HANDLE = 147
    KERNEL_STACK_LOCKED_AT_EXIT = 148
    PNP_INTERNAL_ERROR = 149
    INVALID_WORK_QUEUE_ITEM = 150
    BOUND_IMAGE_UNSUPPORTED = 151
    END_OF_NT_EVALUATION_PERIOD = 152
    INVALID_REGION_OR_SEGMENT = 153
    SYSTEM_LICENSE_VIOLATION = 154
    UDFS_FILE_SYSTEM = 155
    MACHINE_CHECK_EXCEPTION = 156
    USER_MODE_HEALTH_MONITOR = 158
    DRIVER_POWER_STATE_FAILURE = 159
    INTERNAL_POWER_ERROR = 160
    PCI_BUS_DRIVER_INTERNAL = 161
    MEMORY_IMAGE_CORRUPT = 162
    ACPI_DRIVER_INTERNAL = 163
    CNSS_FILE_SYSTEM_FILTER = 164
    ACPI_BIOS_ERROR = 165
    FP_EMULATION_ERROR = 166
    BAD_EXHANDLE = 167
    BOOTING_IN_SAFEMODE_MINIMAL = 168
    BOOTING_IN_SAFEMODE_NETWORK = 169
    BOOTING_IN_SAFEMODE_DSREPAIR = 170
    SESSION_HAS_VALID_POOL_ON_EXIT = 171
    HAL_MEMORY_ALLOCATION = 172
    VIDEO_DRIVER_DEBUG_REPORT_REQUEST = 1073741997
    BGI_DETECTED_VIOLATION = 177
    VIDEO_DRIVER_INIT_FAILURE = 180
    BOOTLOG_LOADED = 181
    BOOTLOG_NOT_LOADED = 182
    BOOTLOG_ENABLED = 183
    ATTEMPTED_SWITCH_FROM_DPC = 184
    CHIPSET_DETECTED_ERROR = 185
    SESSION_HAS_VALID_VIEWS_ON_EXIT = 186
    NETWORK_BOOT_INITIALIZATION_FAILED = 187
    NETWORK_BOOT_DUPLICATE_ADDRESS = 188
    INVALID_HIBERNATED_STATE = 189
    ATTEMPTED_WRITE_TO_READONLY_MEMORY = 190
    MUTEX_ALREADY_OWNED = 191
    PCI_CONFIG_SPACE_ACCESS_FAILURE = 192
    SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION = 193
    BAD_POOL_CALLER = 194
    SYSTEM_IMAGE_BAD_SIGNATURE = 195
    DRIVER_VERIFIER_DETECTED_VIOLATION = 196
    DRIVER_CORRUPTED_EXPOOL = 197
    DRIVER_CAUGHT_MODIFYING_FREED_POOL = 198
    TIMER_OR_DPC_INVALID = 199
    IRQL_UNEXPECTED_VALUE = 200
    DRIVER_VERIFIER_IOMANAGER_VIOLATION = 201
    PNP_DETECTED_FATAL_ERROR = 202
    DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS = 203
    PAGE_FAULT_IN_FREED_SPECIAL_POOL = 204
    PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 205
    DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS = 206
    TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE = 207
    DRIVER_CORRUPTED_MMPOOL = 208
    DRIVER_IRQL_NOT_LESS_OR_EQUAL = 209
    BUGCODE_ID_DRIVER = 210
    DRIVER_PORTION_MUST_BE_NONPAGED = 211
    SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD = 212
    DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL = 213
    DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 214
    DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION_M = 268435670
    DRIVER_UNMAPPING_INVALID_VIEW = 215
    DRIVER_USED_EXCESSIVE_PTES = 216
    LOCKED_PAGES_TRACKER_CORRUPTION = 217
    SYSTEM_PTE_MISUSE = 218
    DRIVER_CORRUPTED_SYSPTES = 219
    DRIVER_INVALID_STACK_ACCESS = 220
    POOL_CORRUPTION_IN_FILE_AREA = 222
    IMPERSONATING_WORKER_THREAD = 223
    ACPI_BIOS_FATAL_ERROR = 224
    WORKER_THREAD_RETURNED_AT_BAD_IRQL = 225
    MANUALLY_INITIATED_CRASH = 226
    RESOURCE_NOT_OWNED = 227
    WORKER_INVALID = 228
    POWER_FAILURE_SIMULATE = 229
    DRIVER_VERIFIER_DMA_VIOLATION = 230
    INVALID_FLOATING_POINT_STATE = 231
    INVALID_CANCEL_OF_FILE_OPEN = 232
    ACTIVE_EX_WORKER_THREAD_TERMINATION = 233
    SAVER_UNSPECIFIED = 61440
    SAVER_BLANKSCREEN = 61442
    SAVER_INPUT = 61443
    SAVER_WATCHDOG = 61444
    SAVER_STARTNOTVISIBLE = 61445
    SAVER_NAVIGATIONMODEL = 61446
    SAVER_OUTOFMEMORY = 61447
    SAVER_GRAPHICS = 61448
    SAVER_NAVSERVERTIMEOUT = 61449
    SAVER_CHROMEPROCESSCRASH = 61450
    SAVER_NOTIFICATIONDISMISSAL = 61451
    SAVER_SPEECHDISMISSAL = 61452
    SAVER_CALLDISMISSAL = 61453
    SAVER_APPBARDISMISSAL = 61454
    SAVER_RILADAPTATIONCRASH = 61455
    SAVER_APPLISTUNREACHABLE = 61456
    SAVER_REPORTNOTIFICATIONFAILURE = 61457
    SAVER_UNEXPECTEDSHUTDOWN = 61458
    SAVER_RPCFAILURE = 61459
    SAVER_AUXILIARYFULLDUMP = 61460
    SAVER_ACCOUNTPROVSVCINITFAILURE = 61461
    SAVER_MTBFCOMMANDTIMEOUT = 789
    SAVER_MTBFCOMMANDHANG = 61697
    SAVER_MTBFPASSBUGCHECK = 61698
    SAVER_MTBFIOERROR = 61699
    SAVER_RENDERTHREADHANG = 61952
    SAVER_RENDERMOBILEUIOOM = 61953
    SAVER_DEVICEUPDATEUNSPECIFIED = 62208
    SAVER_AUDIODRIVERHANG = 62464
    SAVER_BATTERYPULLOUT = 62720
    SAVER_MEDIACORETESTHANG = 62976
    SAVER_RESOURCEMANAGEMENT = 63232
    SAVER_CAPTURESERVICE = 63488
    SAVER_WAITFORSHELLREADY = 63744
    SAVER_NONRESPONSIVEPROCESS = 404
    SAVER_SICKAPPLICATION = 34918
    THREAD_STUCK_IN_DEVICE_DRIVER = 234
    THREAD_STUCK_IN_DEVICE_DRIVER_M = 268435690
    DIRTY_MAPPED_PAGES_CONGESTION = 235
    SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT = 236
    UNMOUNTABLE_BOOT_VOLUME = 237
    CRITICAL_PROCESS_DIED = 239
    STORAGE_MINIPORT_ERROR = 240
    SCSI_VERIFIER_DETECTED_VIOLATION = 241
    HARDWARE_INTERRUPT_STORM = 242
    DISORDERLY_SHUTDOWN = 243
    CRITICAL_OBJECT_TERMINATION = 244
    FLTMGR_FILE_SYSTEM = 245
    PCI_VERIFIER_DETECTED_VIOLATION = 246
    DRIVER_OVERRAN_STACK_BUFFER = 247
    RAMDISK_BOOT_INITIALIZATION_FAILED = 248
    DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN = 249
    HTTP_DRIVER_CORRUPTED = 250
    RECURSIVE_MACHINE_CHECK = 251
    ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY = 252
    DIRTY_NOWRITE_PAGES_CONGESTION = 253
    BUGCODE_USB_DRIVER = 254
    BC_BLUETOOTH_VERIFIER_FAULT = 3070
    BC_BTHMINI_VERIFIER_FAULT = 3071
    RESERVE_QUEUE_OVERFLOW = 255
    LOADER_BLOCK_MISMATCH = 256
    CLOCK_WATCHDOG_TIMEOUT = 257
    DPC_WATCHDOG_TIMEOUT = 258
    MUP_FILE_SYSTEM = 259
    AGP_INVALID_ACCESS = 260
    AGP_GART_CORRUPTION = 261
    AGP_ILLEGALLY_REPROGRAMMED = 262
    KERNEL_EXPAND_STACK_ACTIVE = 263
    THIRD_PARTY_FILE_SYSTEM_FAILURE = 264
    CRITICAL_STRUCTURE_CORRUPTION = 265
    APP_TAGGING_INITIALIZATION_FAILED = 266
    DFSC_FILE_SYSTEM = 267
    FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION = 268
    WDF_VIOLATION = 269
    VIDEO_MEMORY_MANAGEMENT_INTERNAL = 270
    DRIVER_INVALID_CRUNTIME_PARAMETER = 272
    RECURSIVE_NMI = 273
    MSRPC_STATE_VIOLATION = 274
    VIDEO_DXGKRNL_FATAL_ERROR = 275
    VIDEO_SHADOW_DRIVER_FATAL_ERROR = 276
    AGP_INTERNAL = 277
    VIDEO_TDR_FAILURE = 278
    VIDEO_TDR_TIMEOUT_DETECTED = 279
    NTHV_GUEST_ERROR = 280
    VIDEO_SCHEDULER_INTERNAL_ERROR = 281
    EM_INITIALIZATION_ERROR = 282
    DRIVER_RETURNED_HOLDING_CANCEL_LOCK = 283
    ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE = 284
    EVENT_TRACING_FATAL_ERROR = 285
    TOO_MANY_RECURSIVE_FAULTS = 286
    INVALID_DRIVER_HANDLE = 287
    BITLOCKER_FATAL_ERROR = 288
    DRIVER_VIOLATION = 289
    WHEA_INTERNAL_ERROR = 290
    CRYPTO_SELF_TEST_FAILURE = 291
    WHEA_UNCORRECTABLE_ERROR = 292
    NMR_INVALID_STATE = 293
    NETIO_INVALID_POOL_CALLER = 294
    PAGE_NOT_ZERO = 295
    WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY = 296
    WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY = 297
    MUI_NO_VALID_SYSTEM_LANGUAGE = 298
    FAULTY_HARDWARE_CORRUPTED_PAGE = 299
    EXFAT_FILE_SYSTEM = 300
    VOLSNAP_OVERLAPPED_TABLE_ACCESS = 301
    INVALID_MDL_RANGE = 302
    VHD_BOOT_INITIALIZATION_FAILED = 303
    DYNAMIC_ADD_PROCESSOR_MISMATCH = 304
    INVALID_EXTENDED_PROCESSOR_STATE = 305
    RESOURCE_OWNER_POINTER_INVALID = 306
    DPC_WATCHDOG_VIOLATION = 307
    DRIVE_EXTENDER = 308
    REGISTRY_FILTER_DRIVER_EXCEPTION = 309
    VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE = 310
    WIN32K_HANDLE_MANAGER = 311
    GPIO_CONTROLLER_DRIVER_ERROR = 312
    KERNEL_SECURITY_CHECK_FAILURE = 313
    KERNEL_MODE_HEAP_CORRUPTION = 314
    PASSIVE_INTERRUPT_ERROR = 315
    INVALID_IO_BOOST_STATE = 316
    CRITICAL_INITIALIZATION_FAILURE = 317
    ERRATA_WORKAROUND_UNSUCCESSFUL = 318
    REGISTRY_CALLBACK_DRIVER_EXCEPTION = 319
    STORAGE_DEVICE_ABNORMALITY_DETECTED = 320
    VIDEO_ENGINE_TIMEOUT_DETECTED = 321
    VIDEO_TDR_APPLICATION_BLOCKED = 322
    PROCESSOR_DRIVER_INTERNAL = 323
    BUGCODE_USB3_DRIVER = 324
    SECURE_BOOT_VIOLATION = 325
    NDIS_NET_BUFFER_LIST_INFO_ILLEGALLY_TRANSFERRED = 326
    ABNORMAL_RESET_DETECTED = 327
    IO_OBJECT_INVALID = 328
    REFS_FILE_SYSTEM = 329
    KERNEL_WMI_INTERNAL = 330
    SOC_SUBSYSTEM_FAILURE = 331
    FATAL_ABNORMAL_RESET_ERROR = 332
    EXCEPTION_SCOPE_INVALID = 333
    SOC_CRITICAL_DEVICE_REMOVED = 334
    PDC_WATCHDOG_TIMEOUT = 335
    TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK = 336
    UNSUPPORTED_INSTRUCTION_MODE = 337
    INVALID_PUSH_LOCK_FLAGS = 338
    KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION = 339
    UNEXPECTED_STORE_EXCEPTION = 340
    OS_DATA_TAMPERING = 341
    WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP = 342
    KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION = 343
    ILLEGAL_IOMMU_PAGE_FAULT = 344
    HAL_ILLEGAL_IOMMU_PAGE_FAULT = 345
    SDBUS_INTERNAL_ERROR = 346
    WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE = 347
    PDC_WATCHDOG_TIMEOUT_LIVEDUMP = 348
    SOC_SUBSYSTEM_FAILURE_LIVEDUMP = 349
    BUGCODE_NDIS_DRIVER_LIVE_DUMP = 350
    CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP = 351
    WIN32K_ATOMIC_CHECK_FAILURE = 352
    LIVE_SYSTEM_DUMP = 353
    KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE = 354
    WORKER_THREAD_TEST_CONDITION = 355
    WIN32K_CRITICAL_FAILURE = 356
    CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP = 357
    CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP = 358
    CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP = 359
    CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP = 360
    CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP = 361
    CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP = 362
    CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP = 363
    INVALID_RUNDOWN_PROTECTION_FLAGS = 364
    INVALID_SLOT_ALLOCATOR_FLAGS = 365
    ERESOURCE_INVALID_RELEASE = 366
    CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP = 367
    CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG = 368
    CRYPTO_LIBRARY_INTERNAL_ERROR = 369
    COREMSGCALL_INTERNAL_ERROR = 371
    COREMSG_INTERNAL_ERROR = 372
    PREVIOUS_FATAL_ABNORMAL_RESET_ERROR = 373
    ELAM_DRIVER_DETECTED_FATAL_ERROR = 376
    CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP = 377
    PROFILER_CONFIGURATION_ILLEGAL = 379
    PDC_LOCK_WATCHDOG_LIVEDUMP = 380
    PDC_UNEXPECTED_REVOCATION_LIVEDUMP = 381
    MICROCODE_REVISION_MISMATCH = 382
    HYPERGUARD_INITIALIZATION_FAILURE = 383
    WVR_LIVEDUMP_REPLICATION_IOCONTEXT_TIMEOUT = 384
    WVR_LIVEDUMP_STATE_TRANSITION_TIMEOUT = 385
    WVR_LIVEDUMP_RECOVERY_IOCONTEXT_TIMEOUT = 386
    WVR_LIVEDUMP_APP_IO_TIMEOUT = 387
    WVR_LIVEDUMP_MANUALLY_INITIATED = 388
    WVR_LIVEDUMP_STATE_FAILURE = 389
    WVR_LIVEDUMP_CRITICAL_ERROR = 390
    VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD = 391
    CLUSTER_CSVFS_LIVEDUMP = 392
    BAD_OBJECT_HEADER = 393
    SILO_CORRUPT = 394
    SECURE_KERNEL_ERROR = 395
    HYPERGUARD_VIOLATION = 396
    SECURE_FAULT_UNHANDLED = 397
    KERNEL_PARTITION_REFERENCE_VIOLATION = 398
    SYNTHETIC_EXCEPTION_UNHANDLED = 399
    WIN32K_CRITICAL_FAILURE_LIVEDUMP = 400
    PF_DETECTED_CORRUPTION = 401
    KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL = 402
    VIDEO_DXGKRNL_LIVEDUMP = 403
    KERNEL_STORAGE_SLOT_IN_USE = 409
    SMB_SERVER_LIVEDUMP = 405
    LOADER_ROLLBACK_DETECTED = 406
    WIN32K_SECURITY_FAILURE = 407
    UFX_LIVEDUMP = 408
    WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO = 410
    TTM_FATAL_ERROR = 411
    WIN32K_POWER_WATCHDOG_TIMEOUT = 412
    CLUSTER_SVHDX_LIVEDUMP = 413
    BUGCODE_NETADAPTER_DRIVER = 414
    PDC_PRIVILEGE_CHECK_LIVEDUMP = 415
    TTM_WATCHDOG_TIMEOUT = 416
    WIN32K_CALLOUT_WATCHDOG_LIVEDUMP = 417
    WIN32K_CALLOUT_WATCHDOG_BUGCHECK = 418
    CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP = 419
    DRIPS_SW_HW_DIVERGENCE_LIVEDUMP = 420
    USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP = 421
    BLUETOOTH_ERROR_RECOVERY_LIVEDUMP = 422
    SMB_REDIRECTOR_LIVEDUMP = 423
    VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP = 424
    DIRECTED_FX_TRANSITION_LIVEDUMP = 425
    EXCEPTION_ON_INVALID_STACK = 426
    UNWIND_ON_INVALID_STACK = 427
    VIDEO_MINIPORT_FAILED_LIVEDUMP = 432
    VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP = 440
    DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP = 452
    IO_THREADPOOL_DEADLOCK_LIVEDUMP = 453
    FAST_ERESOURCE_PRECONDITION_VIOLATION = 454
    STORE_DATA_STRUCTURE_CORRUPTION = 455
    MANUALLY_INITIATED_POWER_BUTTON_HOLD = 456
    USER_MODE_HEALTH_MONITOR_LIVEDUMP = 457
    SYNTHETIC_WATCHDOG_TIMEOUT = 458
    INVALID_SILO_DETACH = 459
    EXRESOURCE_TIMEOUT_LIVEDUMP = 460
    INVALID_CALLBACK_STACK_ADDRESS = 461
    INVALID_KERNEL_STACK_ADDRESS = 462
    HARDWARE_WATCHDOG_TIMEOUT = 463
    ACPI_FIRMWARE_WATCHDOG_TIMEOUT = 464
    TELEMETRY_ASSERTS_LIVEDUMP = 465
    WORKER_THREAD_INVALID_STATE = 466
    WFP_INVALID_OPERATION = 467
    UCMUCSI_LIVEDUMP = 468
    DRIVER_PNP_WATCHDOG = 469
    WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS = 470
    EFS_FATAL_ERROR = 471
    UCMUCSI_FAILURE = 472
    HAL_IOMMU_INTERNAL_ERROR = 473
    HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR = 474
    IPI_WATCHDOG_TIMEOUT = 475
    DMA_COMMON_BUFFER_VECTOR_ERROR = 476
    BUGCODE_MBBADAPTER_DRIVER = 477
    BUGCODE_WIFIADAPTER_DRIVER = 478
    PROCESSOR_START_TIMEOUT = 479
    INVALID_ALTERNATE_SYSTEM_CALL_HANDLER_REGISTRATION = 480
    DEVICE_DIAGNOSTIC_LOG_LIVEDUMP = 481
    AZURE_DEVICE_FW_DUMP = 482
    BREAKAWAY_CABLE_TRANSITION = 483
    VIDEO_DXGKRNL_SYSMM_FATAL_ERROR = 484
    DRIVER_VERIFIER_TRACKING_LIVE_DUMP = 485
    CRASHDUMP_WATCHDOG_TIMEOUT = 486
    REGISTRY_LIVE_DUMP = 487
    INVALID_THREAD_AFFINITY_STATE = 488
    ILLEGAL_ATS_INITIALIZATION = 489
    SECURE_PCI_CONFIG_SPACE_ACCESS_VIOLATION = 490
    DAM_WATCHDOG_TIMEOUT = 491
    XBOX_VMCTRL_CS_TIMEOUT = 854
    XBOX_CORRUPTED_IMAGE = 855
    XBOX_INVERTED_FUNCTION_TABLE_OVERFLOW = 856
    XBOX_CORRUPTED_IMAGE_BASE = 857
    XBOX_XDS_WATCHDOG_TIMEOUT = 858
    XBOX_SHUTDOWN_WATCHDOG_TIMEOUT = 859
    XBOX_360_SYSTEM_CRASH = 864
    XBOX_360_SYSTEM_CRASH_RESERVED = 1056
    XBOX_SECURITY_FAILUE = 1057
    KERNEL_CFG_INIT_FAILURE = 1058
    MANUALLY_INITIATED_POWER_BUTTON_HOLD_LIVE_DUMP = 4552
    HYPERVISOR_ERROR = 131073
    WINLOGON_FATAL_ERROR = 3221226010
    MANUALLY_INITIATED_CRASH1 = 3735936685
    BUGCHECK_CONTEXT_MODIFIER = 2147483648
  end

  enum FACILITY_CODE : UInt32
    FACILITY_NULL = 0
    FACILITY_RPC = 1
    FACILITY_DISPATCH = 2
    FACILITY_STORAGE = 3
    FACILITY_ITF = 4
    FACILITY_WIN32 = 7
    FACILITY_WINDOWS = 8
    FACILITY_SSPI = 9
    FACILITY_SECURITY = 9
    FACILITY_CONTROL = 10
    FACILITY_CERT = 11
    FACILITY_INTERNET = 12
    FACILITY_MEDIASERVER = 13
    FACILITY_MSMQ = 14
    FACILITY_SETUPAPI = 15
    FACILITY_SCARD = 16
    FACILITY_COMPLUS = 17
    FACILITY_AAF = 18
    FACILITY_URT = 19
    FACILITY_ACS = 20
    FACILITY_DPLAY = 21
    FACILITY_UMI = 22
    FACILITY_SXS = 23
    FACILITY_WINDOWS_CE = 24
    FACILITY_HTTP = 25
    FACILITY_USERMODE_COMMONLOG = 26
    FACILITY_WER = 27
    FACILITY_USERMODE_FILTER_MANAGER = 31
    FACILITY_BACKGROUNDCOPY = 32
    FACILITY_CONFIGURATION = 33
    FACILITY_WIA = 33
    FACILITY_STATE_MANAGEMENT = 34
    FACILITY_METADIRECTORY = 35
    FACILITY_WINDOWSUPDATE = 36
    FACILITY_DIRECTORYSERVICE = 37
    FACILITY_GRAPHICS = 38
    FACILITY_SHELL = 39
    FACILITY_NAP = 39
    FACILITY_TPM_SERVICES = 40
    FACILITY_TPM_SOFTWARE = 41
    FACILITY_UI = 42
    FACILITY_XAML = 43
    FACILITY_ACTION_QUEUE = 44
    FACILITY_PLA = 48
    FACILITY_WINDOWS_SETUP = 48
    FACILITY_FVE = 49
    FACILITY_FWP = 50
    FACILITY_WINRM = 51
    FACILITY_NDIS = 52
    FACILITY_USERMODE_HYPERVISOR = 53
    FACILITY_CMI = 54
    FACILITY_USERMODE_VIRTUALIZATION = 55
    FACILITY_USERMODE_VOLMGR = 56
    FACILITY_BCD = 57
    FACILITY_USERMODE_VHD = 58
    FACILITY_USERMODE_HNS = 59
    FACILITY_SDIAG = 60
    FACILITY_WEBSERVICES = 61
    FACILITY_WINPE = 61
    FACILITY_WPN = 62
    FACILITY_WINDOWS_STORE = 63
    FACILITY_INPUT = 64
    FACILITY_QUIC = 65
    FACILITY_EAP = 66
    FACILITY_IORING = 70
    FACILITY_WINDOWS_DEFENDER = 80
    FACILITY_OPC = 81
    FACILITY_XPS = 82
    FACILITY_MBN = 84
    FACILITY_POWERSHELL = 84
    FACILITY_RAS = 83
    FACILITY_P2P_INT = 98
    FACILITY_P2P = 99
    FACILITY_DAF = 100
    FACILITY_BLUETOOTH_ATT = 101
    FACILITY_AUDIO = 102
    FACILITY_STATEREPOSITORY = 103
    FACILITY_VISUALCPP = 109
    FACILITY_SCRIPT = 112
    FACILITY_PARSE = 113
    FACILITY_BLB = 120
    FACILITY_BLB_CLI = 121
    FACILITY_WSBAPP = 122
    FACILITY_BLBUI = 128
    FACILITY_USN = 129
    FACILITY_USERMODE_VOLSNAP = 130
    FACILITY_TIERING = 131
    FACILITY_WSB_ONLINE = 133
    FACILITY_ONLINE_ID = 134
    FACILITY_DEVICE_UPDATE_AGENT = 135
    FACILITY_DRVSERVICING = 136
    FACILITY_DLS = 153
    FACILITY_DELIVERY_OPTIMIZATION = 208
    FACILITY_USERMODE_SPACES = 231
    FACILITY_USER_MODE_SECURITY_CORE = 232
    FACILITY_USERMODE_LICENSING = 234
    FACILITY_SOS = 160
    FACILITY_OCP_UPDATE_AGENT = 173
    FACILITY_DEBUGGERS = 176
    FACILITY_SPP = 256
    FACILITY_RESTORE = 256
    FACILITY_DMSERVER = 256
    FACILITY_DEPLOYMENT_SERVICES_SERVER = 257
    FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258
    FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259
    FACILITY_DEPLOYMENT_SERVICES_UTIL = 260
    FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261
    FACILITY_DEPLOYMENT_SERVICES_PXE = 263
    FACILITY_DEPLOYMENT_SERVICES_TFTP = 264
    FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272
    FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278
    FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289
    FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290
    FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293
    FACILITY_HSP_SERVICES = 296
    FACILITY_HSP_SOFTWARE = 297
    FACILITY_LINGUISTIC_SERVICES = 305
    FACILITY_AUDIOSTREAMING = 1094
    FACILITY_TTD = 1490
    FACILITY_ACCELERATOR = 1536
    FACILITY_WMAAECMA = 1996
    FACILITY_DIRECTMUSIC = 2168
    FACILITY_DIRECT3D10 = 2169
    FACILITY_DXGI = 2170
    FACILITY_DXGI_DDI = 2171
    FACILITY_DIRECT3D11 = 2172
    FACILITY_DIRECT3D11_DEBUG = 2173
    FACILITY_DIRECT3D12 = 2174
    FACILITY_DIRECT3D12_DEBUG = 2175
    FACILITY_DXCORE = 2176
    FACILITY_PRESENTATION = 2177
    FACILITY_LEAP = 2184
    FACILITY_AUDCLNT = 2185
    FACILITY_WINCODEC_DWRITE_DWM = 2200
    FACILITY_WINML = 2192
    FACILITY_DIRECT2D = 2201
    FACILITY_DEFRAG = 2304
    FACILITY_USERMODE_SDBUS = 2305
    FACILITY_JSCRIPT = 2306
    FACILITY_PIDGENX = 2561
    FACILITY_EAS = 85
    FACILITY_WEB = 885
    FACILITY_WEB_SOCKET = 886
    FACILITY_MOBILE = 1793
    FACILITY_SQLITE = 1967
    FACILITY_SERVICE_FABRIC = 1968
    FACILITY_UTC = 1989
    FACILITY_WEP = 2049
    FACILITY_SYNCENGINE = 2050
    FACILITY_XBOX = 2339
    FACILITY_GAME = 2340
    FACILITY_PIX = 2748
    FACILITY_NT_BIT = 268435456
  end

  enum THREAD_ERROR_MODE : UInt32
    SEM_ALL_ERRORS = 0
    SEM_FAILCRITICALERRORS = 1
    SEM_NOGPFAULTERRORBOX = 2
    SEM_NOOPENFILEERRORBOX = 32768
    SEM_NOALIGNMENTFAULTEXCEPT = 4
  end

  enum FORMAT_MESSAGE_OPTIONS : UInt32
    FORMAT_MESSAGE_ALLOCATE_BUFFER = 256
    FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192
    FORMAT_MESSAGE_FROM_HMODULE = 2048
    FORMAT_MESSAGE_FROM_STRING = 1024
    FORMAT_MESSAGE_FROM_SYSTEM = 4096
    FORMAT_MESSAGE_IGNORE_INSERTS = 512
  end

  enum RTL_VIRTUAL_UNWIND_HANDLER_TYPE : UInt32
    UNW_FLAG_NHANDLER = 0
    UNW_FLAG_EHANDLER = 1
    UNW_FLAG_UHANDLER = 2
    UNW_FLAG_CHAININFO = 4
  end

  enum OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS : UInt32
    WCT_ASYNC_OPEN_FLAG = 1
  end

  enum SYM_SRV_STORE_FILE_FLAGS : UInt32
    SYMSTOREOPT_COMPRESS = 1
    SYMSTOREOPT_OVERWRITE = 2
    SYMSTOREOPT_PASS_IF_EXISTS = 64
    SYMSTOREOPT_POINTER = 8
    SYMSTOREOPT_RETURNINDEX = 4
  end

  enum PROCESSOR_ARCHITECTURE : UInt16
    PROCESSOR_ARCHITECTURE_AMD64 = 9
    PROCESSOR_ARCHITECTURE_IA64 = 6
    PROCESSOR_ARCHITECTURE_INTEL = 0
    PROCESSOR_ARCHITECTURE_ARM = 5
    PROCESSOR_ARCHITECTURE_UNKNOWN = 65535
  end

  enum IMAGE_DIRECTORY_ENTRY : UInt32
    IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7
    IMAGE_DIRECTORY_ENTRY_BASERELOC = 5
    IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11
    IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14
    IMAGE_DIRECTORY_ENTRY_DEBUG = 6
    IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13
    IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3
    IMAGE_DIRECTORY_ENTRY_EXPORT = 0
    IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8
    IMAGE_DIRECTORY_ENTRY_IAT = 12
    IMAGE_DIRECTORY_ENTRY_IMPORT = 1
    IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10
    IMAGE_DIRECTORY_ENTRY_RESOURCE = 2
    IMAGE_DIRECTORY_ENTRY_SECURITY = 4
    IMAGE_DIRECTORY_ENTRY_TLS = 9
  end

  enum WAIT_CHAIN_THREAD_OPTIONS : UInt32
    WCT_OUT_OF_PROC_COM_FLAG = 2
    WCT_OUT_OF_PROC_CS_FLAG = 4
    WCT_OUT_OF_PROC_FLAG = 1
  end

  enum SYM_FIND_ID_OPTION : UInt32
    SSRVOPT_DWORD = 2
    SSRVOPT_DWORDPTR = 4
    SSRVOPT_GUIDPTR = 8
  end

  enum IMAGE_FILE_CHARACTERISTICS : UInt16
    IMAGE_FILE_RELOCS_STRIPPED = 1
    IMAGE_FILE_EXECUTABLE_IMAGE = 2
    IMAGE_FILE_LINE_NUMS_STRIPPED = 4
    IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8
    IMAGE_FILE_AGGRESIVE_WS_TRIM = 16
    IMAGE_FILE_LARGE_ADDRESS_AWARE = 32
    IMAGE_FILE_BYTES_REVERSED_LO = 128
    IMAGE_FILE_32BIT_MACHINE = 256
    IMAGE_FILE_DEBUG_STRIPPED = 512
    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024
    IMAGE_FILE_NET_RUN_FROM_SWAP = 2048
    IMAGE_FILE_SYSTEM = 4096
    IMAGE_FILE_DLL = 8192
    IMAGE_FILE_UP_SYSTEM_ONLY = 16384
    IMAGE_FILE_BYTES_REVERSED_HI = 32768
  end

  enum IMAGE_FILE_CHARACTERISTICS2 : UInt32
    IMAGE_FILE_RELOCS_STRIPPED2 = 1
    IMAGE_FILE_EXECUTABLE_IMAGE2 = 2
    IMAGE_FILE_LINE_NUMS_STRIPPED2 = 4
    IMAGE_FILE_LOCAL_SYMS_STRIPPED2 = 8
    IMAGE_FILE_AGGRESIVE_WS_TRIM2 = 16
    IMAGE_FILE_LARGE_ADDRESS_AWARE2 = 32
    IMAGE_FILE_BYTES_REVERSED_LO2 = 128
    IMAGE_FILE_32BIT_MACHINE2 = 256
    IMAGE_FILE_DEBUG_STRIPPED2 = 512
    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP2 = 1024
    IMAGE_FILE_NET_RUN_FROM_SWAP2 = 2048
    IMAGE_FILE_SYSTEM_2 = 4096
    IMAGE_FILE_DLL_2 = 8192
    IMAGE_FILE_UP_SYSTEM_ONLY_2 = 16384
    IMAGE_FILE_BYTES_REVERSED_HI_2 = 32768
  end

  enum SYMBOL_INFO_FLAGS : UInt32
    SYMFLAG_CLR_TOKEN = 262144
    SYMFLAG_CONSTANT = 256
    SYMFLAG_EXPORT = 512
    SYMFLAG_FORWARDER = 1024
    SYMFLAG_FRAMEREL = 32
    SYMFLAG_FUNCTION = 2048
    SYMFLAG_ILREL = 65536
    SYMFLAG_LOCAL = 128
    SYMFLAG_METADATA = 131072
    SYMFLAG_PARAMETER = 64
    SYMFLAG_REGISTER = 8
    SYMFLAG_REGREL = 16
    SYMFLAG_SLOT = 32768
    SYMFLAG_THUNK = 8192
    SYMFLAG_TLSREL = 16384
    SYMFLAG_VALUEPRESENT = 1
    SYMFLAG_VIRTUAL = 4096
  end

  enum IMAGEHLP_CBA_EVENT_SEVERITY : UInt32
    Sevinfo = 0
    Sevproblem = 1
    Sevattn = 2
    Sevfatal = 3
  end

  enum IMAGEHLP_GET_TYPE_INFO_FLAGS : UInt32
    IMAGEHLP_GET_TYPE_INFO_CHILDREN = 2
    IMAGEHLP_GET_TYPE_INFO_UNCACHED = 1
  end

  enum RIP_INFO_TYPE : UInt32
    SLE_ERROR = 1
    SLE_MINORERROR = 2
    SLE_WARNING = 3
  end

  enum VER_PLATFORM : UInt32
    VER_PLATFORM_WIN32s = 0
    VER_PLATFORM_WIN32_WINDOWS = 1
    VER_PLATFORM_WIN32_NT = 2
  end

  enum IMAGE_DEBUG_TYPE : UInt32
    IMAGE_DEBUG_TYPE_UNKNOWN = 0
    IMAGE_DEBUG_TYPE_COFF = 1
    IMAGE_DEBUG_TYPE_CODEVIEW = 2
    IMAGE_DEBUG_TYPE_FPO = 3
    IMAGE_DEBUG_TYPE_MISC = 4
    IMAGE_DEBUG_TYPE_EXCEPTION = 5
    IMAGE_DEBUG_TYPE_FIXUP = 6
    IMAGE_DEBUG_TYPE_BORLAND = 9
  end

  enum MINIDUMP_THREAD_INFO_DUMP_FLAGS : UInt32
    MINIDUMP_THREAD_INFO_ERROR_THREAD = 1
    MINIDUMP_THREAD_INFO_EXITED_THREAD = 4
    MINIDUMP_THREAD_INFO_INVALID_CONTEXT = 16
    MINIDUMP_THREAD_INFO_INVALID_INFO = 8
    MINIDUMP_THREAD_INFO_INVALID_TEB = 32
    MINIDUMP_THREAD_INFO_WRITING_THREAD = 2
  end

  enum DEBUG_EVENT_CODE : UInt32
    CREATE_PROCESS_DEBUG_EVENT = 3
    CREATE_THREAD_DEBUG_EVENT = 2
    EXCEPTION_DEBUG_EVENT = 1
    EXIT_PROCESS_DEBUG_EVENT = 5
    EXIT_THREAD_DEBUG_EVENT = 4
    LOAD_DLL_DEBUG_EVENT = 6
    OUTPUT_DEBUG_STRING_EVENT = 8
    RIP_EVENT = 9
    UNLOAD_DLL_DEBUG_EVENT = 7
  end

  enum MINIDUMP_MISC_INFO_FLAGS : UInt32
    MINIDUMP_MISC1_PROCESS_ID = 1
    MINIDUMP_MISC1_PROCESS_TIMES = 2
  end

  enum MODLOAD_DATA_TYPE : UInt32
    DBHHEADER_DEBUGDIRS = 1
    DBHHEADER_CVMISC = 2
  end

  enum ModelObjectKind : Int32
    ObjectPropertyAccessor = 0
    ObjectContext = 1
    ObjectTargetObject = 2
    ObjectTargetObjectReference = 3
    ObjectSynthetic = 4
    ObjectNoValue = 5
    ObjectError = 6
    ObjectIntrinsic = 7
    ObjectMethod = 8
    ObjectKeyReference = 9
  end

  enum SymbolKind : Int32
    Symbol = 0
    SymbolModule = 1
    SymbolType = 2
    SymbolField = 3
    SymbolConstant = 4
    SymbolData = 5
    SymbolBaseClass = 6
    SymbolPublic = 7
    SymbolFunction = 8
  end

  enum TypeKind : Int32
    TypeUDT = 0
    TypePointer = 1
    TypeMemberPointer = 2
    TypeArray = 3
    TypeFunction = 4
    TypeTypedef = 5
    TypeEnum = 6
    TypeIntrinsic = 7
    TypeExtendedArray = 8
  end

  enum IntrinsicKind : Int32
    IntrinsicVoid = 0
    IntrinsicBool = 1
    IntrinsicChar = 2
    IntrinsicWChar = 3
    IntrinsicInt = 4
    IntrinsicUInt = 5
    IntrinsicLong = 6
    IntrinsicULong = 7
    IntrinsicFloat = 8
    IntrinsicHRESULT = 9
    IntrinsicChar16 = 10
    IntrinsicChar32 = 11
  end

  enum PointerKind : Int32
    PointerStandard = 0
    PointerReference = 1
    PointerRValueReference = 2
    PointerCXHat = 3
    PointerManagedReference = 4
  end

  enum CallingConventionKind : Int32
    CallingConventionUnknown = 0
    CallingConventionCDecl = 1
    CallingConventionFastCall = 2
    CallingConventionStdCall = 3
    CallingConventionSysCall = 4
    CallingConventionThisCall = 5
  end

  enum LocationKind : Int32
    LocationMember = 0
    LocationStatic = 1
    LocationConstant = 2
    LocationNone = 3
  end

  enum PreferredFormat : Int32
    FormatNone = 0
    FormatSingleCharacter = 1
    FormatQuotedString = 2
    FormatString = 3
    FormatQuotedUnicodeString = 4
    FormatUnicodeString = 5
    FormatQuotedUTF8String = 6
    FormatUTF8String = 7
    FormatBSTRString = 8
    FormatQuotedHString = 9
    FormatHString = 10
    FormatRaw = 11
    FormatEnumNameOnly = 12
    FormatEscapedStringWithQuote = 13
    FormatUTF32String = 14
    FormatQuotedUTF32String = 15
  end

  enum RawSearchFlags : Int32
    RawSearchNone = 0
    RawSearchNoBases = 1
  end

  enum ErrorClass : Int32
    ErrorClassWarning = 0
    ErrorClassError = 1
  end

  enum SignatureComparison : Int32
    Unrelated = 0
    Ambiguous = 1
    LessSpecific = 2
    MoreSpecific = 3
    Identical = 4
  end

  enum SymbolSearchOptions : Int32
    SymbolSearchNone = 0
    SymbolSearchCompletion = 1
    SymbolSearchCaseInsensitive = 2
  end

  enum LanguageKind : Int32
    LanguageUnknown = 0
    LanguageC = 1
    LanguageCPP = 2
    LanguageAssembly = 3
  end

  enum VarArgsKind : Int32
    VarArgsNone = 0
    VarArgsCStyle = 1
  end

  enum ScriptChangeKind : Int32
    ScriptRename = 0
  end

  enum ScriptDebugState : Int32
    ScriptDebugNoDebugger = 0
    ScriptDebugNotExecuting = 1
    ScriptDebugExecuting = 2
    ScriptDebugBreak = 3
  end

  enum ScriptDebugEventFilter : Int32
    ScriptDebugEventFilterEntry = 0
    ScriptDebugEventFilterException = 1
    ScriptDebugEventFilterUnhandledException = 2
    ScriptDebugEventFilterAbort = 3
  end

  enum ScriptDebugEvent : Int32
    ScriptDebugBreakpoint = 0
    ScriptDebugStep = 1
    ScriptDebugException = 2
    ScriptDebugAsyncBreak = 3
  end

  enum ScriptExecutionKind : Int32
    ScriptExecutionNormal = 0
    ScriptExecutionStepIn = 1
    ScriptExecutionStepOut = 2
    ScriptExecutionStepOver = 3
  end

  enum EXT_TDOP : Int32
    EXT_TDOP_COPY = 0
    EXT_TDOP_RELEASE = 1
    EXT_TDOP_SET_FROM_EXPR = 2
    EXT_TDOP_SET_FROM_U64_EXPR = 3
    EXT_TDOP_GET_FIELD = 4
    EXT_TDOP_EVALUATE = 5
    EXT_TDOP_GET_TYPE_NAME = 6
    EXT_TDOP_OUTPUT_TYPE_NAME = 7
    EXT_TDOP_OUTPUT_SIMPLE_VALUE = 8
    EXT_TDOP_OUTPUT_FULL_VALUE = 9
    EXT_TDOP_HAS_FIELD = 10
    EXT_TDOP_GET_FIELD_OFFSET = 11
    EXT_TDOP_GET_ARRAY_ELEMENT = 12
    EXT_TDOP_GET_DEREFERENCE = 13
    EXT_TDOP_GET_TYPE_SIZE = 14
    EXT_TDOP_OUTPUT_TYPE_DEFINITION = 15
    EXT_TDOP_GET_POINTER_TO = 16
    EXT_TDOP_SET_FROM_TYPE_ID_AND_U64 = 17
    EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64 = 18
    EXT_TDOP_COUNT = 19
  end

  enum DBGKD_MAJOR_TYPES : Int32
    DBGKD_MAJOR_NT = 0
    DBGKD_MAJOR_XBOX = 1
    DBGKD_MAJOR_BIG = 2
    DBGKD_MAJOR_EXDI = 3
    DBGKD_MAJOR_NTBD = 4
    DBGKD_MAJOR_EFI = 5
    DBGKD_MAJOR_TNT = 6
    DBGKD_MAJOR_SINGULARITY = 7
    DBGKD_MAJOR_HYPERVISOR = 8
    DBGKD_MAJOR_MIDORI = 9
    DBGKD_MAJOR_CE = 10
    DBGKD_MAJOR_COUNT = 11
  end

  enum WCT_OBJECT_TYPE : Int32
    WctCriticalSectionType = 1
    WctSendMessageType = 2
    WctMutexType = 3
    WctAlpcType = 4
    WctComType = 5
    WctThreadWaitType = 6
    WctProcessWaitType = 7
    WctThreadType = 8
    WctComActivationType = 9
    WctUnknownType = 10
    WctSocketIoType = 11
    WctSmbIoType = 12
    WctMaxType = 13
  end

  enum WCT_OBJECT_STATUS : Int32
    WctStatusNoAccess = 1
    WctStatusRunning = 2
    WctStatusBlocked = 3
    WctStatusPidOnly = 4
    WctStatusPidOnlyRpcss = 5
    WctStatusOwned = 6
    WctStatusNotOwned = 7
    WctStatusAbandoned = 8
    WctStatusUnknown = 9
    WctStatusError = 10
    WctStatusMax = 11
  end

  enum MINIDUMP_STREAM_TYPE : Int32
    UnusedStream = 0
    ReservedStream0 = 1
    ReservedStream1 = 2
    ThreadListStream = 3
    ModuleListStream = 4
    MemoryListStream = 5
    ExceptionStream = 6
    SystemInfoStream = 7
    ThreadExListStream = 8
    Memory64ListStream = 9
    CommentStreamA = 10
    CommentStreamW = 11
    HandleDataStream = 12
    FunctionTableStream = 13
    UnloadedModuleListStream = 14
    MiscInfoStream = 15
    MemoryInfoListStream = 16
    ThreadInfoListStream = 17
    HandleOperationListStream = 18
    TokenStream = 19
    JavaScriptDataStream = 20
    SystemMemoryInfoStream = 21
    ProcessVmCountersStream = 22
    IptTraceStream = 23
    ThreadNamesStream = 24
    Cestreamnull = 32768
    Cestreamsysteminfo = 32769
    Cestreamexception = 32770
    Cestreammodulelist = 32771
    Cestreamprocesslist = 32772
    Cestreamthreadlist = 32773
    Cestreamthreadcontextlist = 32774
    Cestreamthreadcallstacklist = 32775
    Cestreammemoryvirtuallist = 32776
    Cestreammemoryphysicallist = 32777
    Cestreambucketparameters = 32778
    Cestreamprocessmodulemap = 32779
    Cestreamdiagnosislist = 32780
    LastReservedStream = 65535
  end

  enum MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE : Int32
    MiniHandleObjectInformationNone = 0
    MiniThreadInformation1 = 1
    MiniMutantInformation1 = 2
    MiniMutantInformation2 = 3
    MiniProcessInformation1 = 4
    MiniProcessInformation2 = 5
    MiniEventInformation1 = 6
    MiniSectionInformation1 = 7
    MiniSemaphoreInformation1 = 8
    MiniHandleObjectInformationTypeMax = 9
  end

  enum MINIDUMP_CALLBACK_TYPE : Int32
    ModuleCallback = 0
    ThreadCallback = 1
    ThreadExCallback = 2
    IncludeThreadCallback = 3
    IncludeModuleCallback = 4
    MemoryCallback = 5
    CancelCallback = 6
    WriteKernelMinidumpCallback = 7
    KernelMinidumpStatusCallback = 8
    RemoveMemoryCallback = 9
    IncludeVmRegionCallback = 10
    IoStartCallback = 11
    IoWriteAllCallback = 12
    IoFinishCallback = 13
    ReadMemoryFailureCallback = 14
    SecondaryFlagsCallback = 15
    IsProcessSnapshotCallback = 16
    VmStartCallback = 17
    VmQueryCallback = 18
    VmPreReadCallback = 19
    VmPostReadCallback = 20
  end

  enum THREAD_WRITE_FLAGS : Int32
    ThreadWriteThread = 1
    ThreadWriteStack = 2
    ThreadWriteContext = 4
    ThreadWriteBackingStore = 8
    ThreadWriteInstructionWindow = 16
    ThreadWriteThreadData = 32
    ThreadWriteThreadInfo = 64
  end

  enum MODULE_WRITE_FLAGS : Int32
    ModuleWriteModule = 1
    ModuleWriteDataSeg = 2
    ModuleWriteMiscRecord = 4
    ModuleWriteCvRecord = 8
    ModuleReferencedByMemory = 16
    ModuleWriteTlsData = 32
    ModuleWriteCodeSegs = 64
  end

  enum MINIDUMP_TYPE : UInt32
    MiniDumpNormal = 0
    MiniDumpWithDataSegs = 1
    MiniDumpWithFullMemory = 2
    MiniDumpWithHandleData = 4
    MiniDumpFilterMemory = 8
    MiniDumpScanMemory = 16
    MiniDumpWithUnloadedModules = 32
    MiniDumpWithIndirectlyReferencedMemory = 64
    MiniDumpFilterModulePaths = 128
    MiniDumpWithProcessThreadData = 256
    MiniDumpWithPrivateReadWriteMemory = 512
    MiniDumpWithoutOptionalData = 1024
    MiniDumpWithFullMemoryInfo = 2048
    MiniDumpWithThreadInfo = 4096
    MiniDumpWithCodeSegs = 8192
    MiniDumpWithoutAuxiliaryState = 16384
    MiniDumpWithFullAuxiliaryState = 32768
    MiniDumpWithPrivateWriteCopyMemory = 65536
    MiniDumpIgnoreInaccessibleMemory = 131072
    MiniDumpWithTokenInformation = 262144
    MiniDumpWithModuleHeaders = 524288
    MiniDumpFilterTriage = 1048576
    MiniDumpWithAvxXStateContext = 2097152
    MiniDumpWithIptTrace = 4194304
    MiniDumpScanInaccessiblePartialPages = 8388608
    MiniDumpFilterWriteCombinedMemory = 16777216
    MiniDumpValidTypeFlags = 33554431
  end

  enum MINIDUMP_SECONDARY_FLAGS : Int32
    MiniSecondaryWithoutPowerInfo = 1
    MiniSecondaryValidFlags = 1
  end

  enum SCRIPTLANGUAGEVERSION : Int32
    SCRIPTLANGUAGEVERSION_DEFAULT = 0
    SCRIPTLANGUAGEVERSION_5_7 = 1
    SCRIPTLANGUAGEVERSION_5_8 = 2
    SCRIPTLANGUAGEVERSION_MAX = 255
  end

  enum SCRIPTSTATE : Int32
    SCRIPTSTATE_UNINITIALIZED = 0
    SCRIPTSTATE_INITIALIZED = 5
    SCRIPTSTATE_STARTED = 1
    SCRIPTSTATE_CONNECTED = 2
    SCRIPTSTATE_DISCONNECTED = 3
    SCRIPTSTATE_CLOSED = 4
  end

  enum SCRIPTTRACEINFO : Int32
    SCRIPTTRACEINFO_SCRIPTSTART = 0
    SCRIPTTRACEINFO_SCRIPTEND = 1
    SCRIPTTRACEINFO_COMCALLSTART = 2
    SCRIPTTRACEINFO_COMCALLEND = 3
    SCRIPTTRACEINFO_CREATEOBJSTART = 4
    SCRIPTTRACEINFO_CREATEOBJEND = 5
    SCRIPTTRACEINFO_GETOBJSTART = 6
    SCRIPTTRACEINFO_GETOBJEND = 7
  end

  enum SCRIPTTHREADSTATE : Int32
    SCRIPTTHREADSTATE_NOTINSCRIPT = 0
    SCRIPTTHREADSTATE_RUNNING = 1
  end

  enum SCRIPTGCTYPE : Int32
    SCRIPTGCTYPE_NORMAL = 0
    SCRIPTGCTYPE_EXHAUSTIVE = 1
  end

  enum SCRIPTUICITEM : Int32
    SCRIPTUICITEM_INPUTBOX = 1
    SCRIPTUICITEM_MSGBOX = 2
  end

  enum SCRIPTUICHANDLING : Int32
    SCRIPTUICHANDLING_ALLOW = 0
    SCRIPTUICHANDLING_NOUIERROR = 1
    SCRIPTUICHANDLING_NOUIDEFAULT = 2
  end

  enum DBGPROP_ATTRIB_FLAGS : UInt32
    DBGPROP_ATTRIB_NO_ATTRIB = 0
    DBGPROP_ATTRIB_VALUE_IS_INVALID = 8
    DBGPROP_ATTRIB_VALUE_IS_EXPANDABLE = 16
    DBGPROP_ATTRIB_VALUE_IS_FAKE = 32
    DBGPROP_ATTRIB_VALUE_IS_METHOD = 256
    DBGPROP_ATTRIB_VALUE_IS_EVENT = 512
    DBGPROP_ATTRIB_VALUE_IS_RAW_STRING = 1024
    DBGPROP_ATTRIB_VALUE_READONLY = 2048
    DBGPROP_ATTRIB_ACCESS_PUBLIC = 4096
    DBGPROP_ATTRIB_ACCESS_PRIVATE = 8192
    DBGPROP_ATTRIB_ACCESS_PROTECTED = 16384
    DBGPROP_ATTRIB_ACCESS_FINAL = 32768
    DBGPROP_ATTRIB_STORAGE_GLOBAL = 65536
    DBGPROP_ATTRIB_STORAGE_STATIC = 131072
    DBGPROP_ATTRIB_STORAGE_FIELD = 262144
    DBGPROP_ATTRIB_STORAGE_VIRTUAL = 524288
    DBGPROP_ATTRIB_TYPE_IS_CONSTANT = 1048576
    DBGPROP_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152
    DBGPROP_ATTRIB_TYPE_IS_VOLATILE = 4194304
    DBGPROP_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608
    DBGPROP_ATTRIB_FRAME_INTRYBLOCK = 16777216
    DBGPROP_ATTRIB_FRAME_INCATCHBLOCK = 33554432
    DBGPROP_ATTRIB_FRAME_INFINALLYBLOCK = 67108864
    DBGPROP_ATTRIB_VALUE_IS_RETURN_VALUE = 134217728
    DBGPROP_ATTRIB_VALUE_PENDING_MUTATION = 268435456
  end

  enum DBGPROP_INFO : UInt32
    DBGPROP_INFO_NAME = 1
    DBGPROP_INFO_TYPE = 2
    DBGPROP_INFO_VALUE = 4
    DBGPROP_INFO_FULLNAME = 32
    DBGPROP_INFO_ATTRIBUTES = 8
    DBGPROP_INFO_DEBUGPROP = 16
    DBGPROP_INFO_BEAUTIFY = 33554432
    DBGPROP_INFO_CALLTOSTRING = 67108864
    DBGPROP_INFO_AUTOEXPAND = 134217728
  end

  enum OBJECT_ATTRIB_FLAG : UInt32
    OBJECT_ATTRIB_NO_ATTRIB = 0
    OBJECT_ATTRIB_NO_NAME = 1
    OBJECT_ATTRIB_NO_TYPE = 2
    OBJECT_ATTRIB_NO_VALUE = 4
    OBJECT_ATTRIB_VALUE_IS_INVALID = 8
    OBJECT_ATTRIB_VALUE_IS_OBJECT = 16
    OBJECT_ATTRIB_VALUE_IS_ENUM = 32
    OBJECT_ATTRIB_VALUE_IS_CUSTOM = 64
    OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE = 112
    OBJECT_ATTRIB_VALUE_HAS_CODE = 128
    OBJECT_ATTRIB_TYPE_IS_OBJECT = 256
    OBJECT_ATTRIB_TYPE_HAS_CODE = 512
    OBJECT_ATTRIB_TYPE_IS_EXPANDABLE = 256
    OBJECT_ATTRIB_SLOT_IS_CATEGORY = 1024
    OBJECT_ATTRIB_VALUE_READONLY = 2048
    OBJECT_ATTRIB_ACCESS_PUBLIC = 4096
    OBJECT_ATTRIB_ACCESS_PRIVATE = 8192
    OBJECT_ATTRIB_ACCESS_PROTECTED = 16384
    OBJECT_ATTRIB_ACCESS_FINAL = 32768
    OBJECT_ATTRIB_STORAGE_GLOBAL = 65536
    OBJECT_ATTRIB_STORAGE_STATIC = 131072
    OBJECT_ATTRIB_STORAGE_FIELD = 262144
    OBJECT_ATTRIB_STORAGE_VIRTUAL = 524288
    OBJECT_ATTRIB_TYPE_IS_CONSTANT = 1048576
    OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152
    OBJECT_ATTRIB_TYPE_IS_VOLATILE = 4194304
    OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608
    OBJECT_ATTRIB_IS_CLASS = 16777216
    OBJECT_ATTRIB_IS_FUNCTION = 33554432
    OBJECT_ATTRIB_IS_VARIABLE = 67108864
    OBJECT_ATTRIB_IS_PROPERTY = 134217728
    OBJECT_ATTRIB_IS_MACRO = 268435456
    OBJECT_ATTRIB_IS_TYPE = 536870912
    OBJECT_ATTRIB_IS_INHERITED = 1073741824
    OBJECT_ATTRIB_IS_INTERFACE = 2147483648
  end

  enum PROP_INFO_FLAGS : Int32
    PROP_INFO_NAME = 1
    PROP_INFO_TYPE = 2
    PROP_INFO_VALUE = 4
    PROP_INFO_FULLNAME = 32
    PROP_INFO_ATTRIBUTES = 8
    PROP_INFO_DEBUGPROP = 16
    PROP_INFO_AUTOEXPAND = 134217728
  end

  enum EX_PROP_INFO_FLAGS : Int32
    EX_PROP_INFO_ID = 256
    EX_PROP_INFO_NTYPE = 512
    EX_PROP_INFO_NVALUE = 1024
    EX_PROP_INFO_LOCKBYTES = 2048
    EX_PROP_INFO_DEBUGEXTPROP = 4096
  end

  enum BREAKPOINT_STATE : Int32
    BREAKPOINT_DELETED = 0
    BREAKPOINT_DISABLED = 1
    BREAKPOINT_ENABLED = 2
  end

  enum BREAKREASON : Int32
    BREAKREASON_STEP = 0
    BREAKREASON_BREAKPOINT = 1
    BREAKREASON_DEBUGGER_BLOCK = 2
    BREAKREASON_HOST_INITIATED = 3
    BREAKREASON_LANGUAGE_INITIATED = 4
    BREAKREASON_DEBUGGER_HALT = 5
    BREAKREASON_ERROR = 6
    BREAKREASON_JIT = 7
    BREAKREASON_MUTATION_BREAKPOINT = 8
  end

  enum BREAKRESUME_ACTION : Int32
    BREAKRESUMEACTION_ABORT = 0
    BREAKRESUMEACTION_CONTINUE = 1
    BREAKRESUMEACTION_STEP_INTO = 2
    BREAKRESUMEACTION_STEP_OVER = 3
    BREAKRESUMEACTION_STEP_OUT = 4
    BREAKRESUMEACTION_IGNORE = 5
    BREAKRESUMEACTION_STEP_DOCUMENT = 6
  end

  enum ERRORRESUMEACTION : Int32
    ERRORRESUMEACTION_ReexecuteErrorStatement = 0
    ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller = 1
    ERRORRESUMEACTION_SkipErrorStatement = 2
  end

  enum DOCUMENTNAMETYPE : Int32
    DOCUMENTNAMETYPE_APPNODE = 0
    DOCUMENTNAMETYPE_TITLE = 1
    DOCUMENTNAMETYPE_FILE_TAIL = 2
    DOCUMENTNAMETYPE_URL = 3
    DOCUMENTNAMETYPE_UNIQUE_TITLE = 4
    DOCUMENTNAMETYPE_SOURCE_MAP_URL = 5
  end

  enum PROFILER_SCRIPT_TYPE : Int32
    PROFILER_SCRIPT_TYPE_USER = 0
    PROFILER_SCRIPT_TYPE_DYNAMIC = 1
    PROFILER_SCRIPT_TYPE_NATIVE = 2
    PROFILER_SCRIPT_TYPE_DOM = 3
  end

  enum PROFILER_EVENT_MASK : UInt32
    PROFILER_EVENT_MASK_TRACE_SCRIPT_FUNCTION_CALL = 1
    PROFILER_EVENT_MASK_TRACE_NATIVE_FUNCTION_CALL = 2
    PROFILER_EVENT_MASK_TRACE_DOM_FUNCTION_CALL = 4
    PROFILER_EVENT_MASK_TRACE_ALL = 3
    PROFILER_EVENT_MASK_TRACE_ALL_WITH_DOM = 7
  end

  enum PROFILER_HEAP_OBJECT_FLAGS : UInt32
    PROFILER_HEAP_OBJECT_FLAGS_NEW_OBJECT = 1
    PROFILER_HEAP_OBJECT_FLAGS_IS_ROOT = 2
    PROFILER_HEAP_OBJECT_FLAGS_SITE_CLOSED = 4
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL = 8
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_UNKNOWN = 16
    PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_DISPATCH = 32
    PROFILER_HEAP_OBJECT_FLAGS_SIZE_APPROXIMATE = 64
    PROFILER_HEAP_OBJECT_FLAGS_SIZE_UNAVAILABLE = 128
    PROFILER_HEAP_OBJECT_FLAGS_NEW_STATE_UNAVAILABLE = 256
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_INSTANCE = 512
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_RUNTIMECLASS = 1024
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_DELEGATE = 2048
    PROFILER_HEAP_OBJECT_FLAGS_WINRT_NAMESPACE = 4096
  end

  enum PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE : Int32
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_PROTOTYPE = 1
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_FUNCTION_NAME = 2
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SCOPE_LIST = 3
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INTERNAL_PROPERTY = 4
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_NAME_PROPERTIES = 5
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INDEX_PROPERTIES = 6
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_ATTRIBUTES_SIZE = 7
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_TEXT_CHILDREN_SIZE = 8
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_RELATIONSHIPS = 9
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WINRTEVENTS = 10
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WEAKMAP_COLLECTION_LIST = 11
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAP_COLLECTION_LIST = 12
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SET_COLLECTION_LIST = 13
    PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAX_VALUE = 13
  end

  enum PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS : UInt32
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_NONE = 0
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_GET_ACCESSOR = 65536
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_SET_ACCESSOR = 131072
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_LET_VARIABLE = 262144
    PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_CONST_VARIABLE = 524288
  end

  enum PROFILER_HEAP_ENUM_FLAGS : UInt32
    PROFILER_HEAP_ENUM_FLAGS_NONE = 0
    PROFILER_HEAP_ENUM_FLAGS_STORE_RELATIONSHIP_FLAGS = 1
    PROFILER_HEAP_ENUM_FLAGS_SUBSTRINGS = 2
    PROFILER_HEAP_ENUM_FLAGS_RELATIONSHIP_SUBSTRINGS = 3
  end

  enum PROFILER_RELATIONSHIP_INFO : Int32
    PROFILER_PROPERTY_TYPE_NUMBER = 1
    PROFILER_PROPERTY_TYPE_STRING = 2
    PROFILER_PROPERTY_TYPE_HEAP_OBJECT = 3
    PROFILER_PROPERTY_TYPE_EXTERNAL_OBJECT = 4
    PROFILER_PROPERTY_TYPE_BSTR = 5
    PROFILER_PROPERTY_TYPE_SUBSTRING = 6
  end

  enum PROFILER_HEAP_SUMMARY_VERSION : Int32
    PROFILER_HEAP_SUMMARY_VERSION_1 = 1
  end

  enum IMAGEHLP_STATUS_REASON : Int32
    BindOutOfMemory = 0
    BindRvaToVaFailed = 1
    BindNoRoomInImage = 2
    BindImportModuleFailed = 3
    BindImportProcedureFailed = 4
    BindImportModule = 5
    BindImportProcedure = 6
    BindForwarder = 7
    BindForwarderNOT = 8
    BindImageModified = 9
    BindExpandFileHeaders = 10
    BindImageComplete = 11
    BindMismatchedSymbols = 12
    BindSymbolsNotUpdated = 13
    BindImportProcedure32 = 14
    BindImportProcedure64 = 15
    BindForwarder32 = 16
    BindForwarder64 = 17
    BindForwarderNOT32 = 18
    BindForwarderNOT64 = 19
  end

  enum ADDRESS_MODE : Int32
    AddrMode1616 = 0
    AddrMode1632 = 1
    AddrModeReal = 2
    AddrModeFlat = 3
  end

  enum SYM_TYPE : Int32
    SymNone = 0
    SymCoff = 1
    SymCv = 2
    SymPdb = 3
    SymExport = 4
    SymDeferred = 5
    SymSym = 6
    SymDia = 7
    SymVirtual = 8
    NumSymTypes = 9
  end

  enum IMAGEHLP_HD_TYPE : Int32
    Hdbase = 0
    Hdsym = 1
    Hdsrc = 2
    Hdmax = 3
  end

  enum IMAGEHLP_EXTENDED_OPTIONS : Int32
    SYMOPT_EX_DISABLEACCESSTIMEUPDATE = 0
    SYMOPT_EX_LASTVALIDDEBUGDIRECTORY = 1
    SYMOPT_EX_NOIMPLICITPATTERNSEARCH = 2
    SYMOPT_EX_NEVERLOADSYMBOLS = 3
    SYMOPT_EX_MAX = 4
  end

  enum IMAGEHLP_SYMBOL_TYPE_INFO : Int32
    TI_GET_SYMTAG = 0
    TI_GET_SYMNAME = 1
    TI_GET_LENGTH = 2
    TI_GET_TYPE = 3
    TI_GET_TYPEID = 4
    TI_GET_BASETYPE = 5
    TI_GET_ARRAYINDEXTYPEID = 6
    TI_FINDCHILDREN = 7
    TI_GET_DATAKIND = 8
    TI_GET_ADDRESSOFFSET = 9
    TI_GET_OFFSET = 10
    TI_GET_VALUE = 11
    TI_GET_COUNT = 12
    TI_GET_CHILDRENCOUNT = 13
    TI_GET_BITPOSITION = 14
    TI_GET_VIRTUALBASECLASS = 15
    TI_GET_VIRTUALTABLESHAPEID = 16
    TI_GET_VIRTUALBASEPOINTEROFFSET = 17
    TI_GET_CLASSPARENTID = 18
    TI_GET_NESTED = 19
    TI_GET_SYMINDEX = 20
    TI_GET_LEXICALPARENT = 21
    TI_GET_ADDRESS = 22
    TI_GET_THISADJUST = 23
    TI_GET_UDTKIND = 24
    TI_IS_EQUIV_TO = 25
    TI_GET_CALLING_CONVENTION = 26
    TI_IS_CLOSE_EQUIV_TO = 27
    TI_GTIEX_REQS_VALID = 28
    TI_GET_VIRTUALBASEOFFSET = 29
    TI_GET_VIRTUALBASEDISPINDEX = 30
    TI_GET_IS_REFERENCE = 31
    TI_GET_INDIRECTVIRTUALBASECLASS = 32
    TI_GET_VIRTUALBASETABLETYPE = 33
    TI_GET_OBJECTPOINTERTYPE = 34
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX = 35
  end

  enum IMAGEHLP_SF_TYPE : Int32
    Sfimage = 0
    Sfdbg = 1
    Sfpdb = 2
    Sfmpd = 3
    Sfmax = 4
  end

  enum APPLICATION_NODE_EVENT_FILTER : Int32
    FILTER_EXCLUDE_NOTHING = 0
    FILTER_EXCLUDE_ANONYMOUS_CODE = 1
    FILTER_EXCLUDE_EVAL_CODE = 2
  end

  enum SCRIPT_DEBUGGER_OPTIONS : Int32
    SDO_NONE = 0
    SDO_ENABLE_FIRST_CHANCE_EXCEPTIONS = 1
    SDO_ENABLE_WEB_WORKER_SUPPORT = 2
    SDO_ENABLE_NONUSER_CODE_SUPPORT = 4
    SDO_ENABLE_LIBRARY_STACK_FRAME = 8
  end

  enum SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND : Int32
    ETK_FIRST_CHANCE = 0
    ETK_USER_UNHANDLED = 1
    ETK_UNHANDLED = 2
  end

  enum SCRIPT_INVOCATION_CONTEXT_TYPE : Int32
    SICT_Event = 0
    SICT_SetTimeout = 1
    SICT_SetInterval = 2
    SICT_SetImmediate = 3
    SICT_RequestAnimationFrame = 4
    SICT_ToString = 5
    SICT_MutationObserverCheckpoint = 6
    SICT_WWAExecUnsafeLocalFunction = 7
    SICT_WWAExecAtPriority = 8
  end

  enum DEBUG_STACKFRAME_TYPE : Int32
    DST_SCRIPT_FRAME = 0
    DST_INTERNAL_FRAME = 1
    DST_INVOCATION_FRAME = 2
  end

  enum DEBUG_EVENT_INFO_TYPE : Int32
    DEIT_GENERAL = 0
    DEIT_ASMJS_IN_DEBUGGING = 1
    DEIT_ASMJS_SUCCEEDED = 2
    DEIT_ASMJS_FAILED = 3
  end

  enum JS_PROPERTY_MEMBERS : Int32
    JS_PROPERTY_MEMBERS_ALL = 0
    JS_PROPERTY_MEMBERS_ARGUMENTS = 1
  end

  enum JS_PROPERTY_ATTRIBUTES : Int32
    JS_PROPERTY_ATTRIBUTE_NONE = 0
    JS_PROPERTY_HAS_CHILDREN = 1
    JS_PROPERTY_FAKE = 2
    JS_PROPERTY_METHOD = 4
    JS_PROPERTY_READONLY = 8
    JS_PROPERTY_NATIVE_WINRT_POINTER = 16
    JS_PROPERTY_FRAME_INTRYBLOCK = 32
    JS_PROPERTY_FRAME_INCATCHBLOCK = 64
    JS_PROPERTY_FRAME_INFINALLYBLOCK = 128
  end

  enum JsDebugReadMemoryFlags : Int32
    None = 0
    JsDebugAllowPartialRead = 1
  end

  enum DUMP_TYPES : Int32
    DUMP_TYPE_INVALID = -1
    DUMP_TYPE_UNKNOWN = 0
    DUMP_TYPE_FULL = 1
    DUMP_TYPE_SUMMARY = 2
    DUMP_TYPE_HEADER = 3
    DUMP_TYPE_TRIAGE = 4
    DUMP_TYPE_BITMAP_FULL = 5
    DUMP_TYPE_BITMAP_KERNEL = 6
    DUMP_TYPE_AUTOMATIC = 7
  end

  enum WHEA_ERROR_SOURCE_TYPE : Int32
    WheaErrSrcTypeMCE = 0
    WheaErrSrcTypeCMC = 1
    WheaErrSrcTypeCPE = 2
    WheaErrSrcTypeNMI = 3
    WheaErrSrcTypePCIe = 4
    WheaErrSrcTypeGeneric = 5
    WheaErrSrcTypeINIT = 6
    WheaErrSrcTypeBOOT = 7
    WheaErrSrcTypeSCIGeneric = 8
    WheaErrSrcTypeIPFMCA = 9
    WheaErrSrcTypeIPFCMC = 10
    WheaErrSrcTypeIPFCPE = 11
    WheaErrSrcTypeGenericV2 = 12
    WheaErrSrcTypeSCIGenericV2 = 13
    WheaErrSrcTypeBMC = 14
    WheaErrSrcTypePMEM = 15
    WheaErrSrcTypeDeviceDriver = 16
    WheaErrSrcTypeMax = 17
  end

  enum WHEA_ERROR_SOURCE_STATE : Int32
    WheaErrSrcStateStopped = 1
    WheaErrSrcStateStarted = 2
    WheaErrSrcStateRemoved = 3
    WheaErrSrcStateRemovePending = 4
  end

  enum IPMI_OS_SEL_RECORD_TYPE : Int32
    IpmiOsSelRecordTypeWhea = 0
    IpmiOsSelRecordTypeOther = 1
    IpmiOsSelRecordTypeWheaErrorXpfMca = 2
    IpmiOsSelRecordTypeWheaErrorPci = 3
    IpmiOsSelRecordTypeWheaErrorNmi = 4
    IpmiOsSelRecordTypeWheaErrorOther = 5
    IpmiOsSelRecordTypeRaw = 6
    IpmiOsSelRecordTypeDriver = 7
    IpmiOsSelRecordTypeBugcheckRecovery = 8
    IpmiOsSelRecordTypeBugcheckData = 9
    IpmiOsSelRecordTypeMax = 10
  end

  union DEBUG_EVENT_u_e__Union
    exception : EXCEPTION_DEBUG_INFO
    create_thread : CREATE_THREAD_DEBUG_INFO
    create_process_info : CREATE_PROCESS_DEBUG_INFO
    exit_thread : EXIT_THREAD_DEBUG_INFO
    exit_process : EXIT_PROCESS_DEBUG_INFO
    load_dll : LOAD_DLL_DEBUG_INFO
    unload_dll : UNLOAD_DLL_DEBUG_INFO
    debug_string : OUTPUT_DEBUG_STRING_INFO
    rip_info : RIP_INFO
  end
  union INLINE_FRAME_CONTEXT
    context_value : UInt32
    anonymous : INLINE_FRAME_CONTEXT_Anonymous_e__Struct
  end
  union DEBUG_VALUE_Anonymous_e__Union
    i8 : UInt8
    i16 : UInt16
    i32 : UInt32
    anonymous : DEBUG_VALUE_Anonymous_e__Union_Anonymous_e__Struct
    f32 : Float32
    f64 : Float64
    f80_bytes : UInt8[10]*
    f82_bytes : UInt8[11]*
    f128_bytes : UInt8[16]*
    vi8 : UInt8[16]*
    vi16 : UInt16[8]*
    vi32 : UInt32[4]*
    vi64 : UInt64[2]*
    vf32 : Float32[4]*
    vf64 : Float64[2]*
    i64_parts32 : DEBUG_VALUE_Anonymous_e__Union_I64Parts32_e__Struct
    f128_parts64 : DEBUG_VALUE_Anonymous_e__Union_F128Parts64_e__Struct
    raw_bytes : UInt8[24]*
  end
  union DEBUG_PROCESSOR_IDENTIFICATION_ALL
    alpha : DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
    amd64 : DEBUG_PROCESSOR_IDENTIFICATION_AMD64
    ia64 : DEBUG_PROCESSOR_IDENTIFICATION_IA64
    x86 : DEBUG_PROCESSOR_IDENTIFICATION_X86
    arm : DEBUG_PROCESSOR_IDENTIFICATION_ARM
    arm64 : DEBUG_PROCESSOR_IDENTIFICATION_ARM64
  end
  union ScriptDebugEventInformation_u_e__Union
    exception_information : ScriptDebugEventInformation_u_e__Union_ExceptionInformation_e__Struct
    breakpoint_information : ScriptDebugEventInformation_u_e__Union_BreakpointInformation_e__Struct
  end
  union FIELD_INFO_Anonymous_e__Union
    field_call_back : Void*
    p_buffer : Void*
  end
  union SYM_DUMP_PARAM_Anonymous_e__Union
    context : Void*
    p_buffer : Void*
  end
  union CONTEXT_Anonymous_e__Union
    flt_save : XSAVE_FORMAT
    anonymous : CONTEXT_Anonymous_e__Union_Anonymous_e__Struct
  end
  union KNONVOLATILE_CONTEXT_POINTERS_Anonymous2_e__Union
    integer_context : UInt64[16]**
    anonymous : KNONVOLATILE_CONTEXT_POINTERS_Anonymous2_e__Union_Anonymous_e__Struct
  end
  union KNONVOLATILE_CONTEXT_POINTERS_Anonymous1_e__Union
    floating_context : M128A[16]**
    anonymous : KNONVOLATILE_CONTEXT_POINTERS_Anonymous1_e__Union_Anonymous_e__Struct
  end
  union ARM64_NT_NEON128
    anonymous : ARM64_NT_NEON128_Anonymous_e__Struct
    d : Float64[2]*
    s : Float32[4]*
    h : UInt16[8]*
    b : UInt8[16]*
  end
  union ARM64_NT_CONTEXT_Anonymous_e__Union
    anonymous : ARM64_NT_CONTEXT_Anonymous_e__Union_Anonymous_e__Struct
    x : UInt64[31]*
  end
  union LDT_ENTRY_HighWord_e__Union
    bytes : LDT_ENTRY_HighWord_e__Union_Bytes_e__Struct
    bits : LDT_ENTRY_HighWord_e__Union_Bits_e__Struct
  end
  union WOW64_LDT_ENTRY_HighWord_e__Union
    bytes : WOW64_LDT_ENTRY_HighWord_e__Union_Bytes_e__Struct
    bits : WOW64_LDT_ENTRY_HighWord_e__Union_Bits_e__Struct
  end
  union XSTATE_CONFIGURATION_Anonymous_e__Union
    control_flags : UInt32
    anonymous : XSTATE_CONFIGURATION_Anonymous_e__Union_Anonymous_e__Struct
  end
  union IMAGE_SECTION_HEADER_Misc_e__Union
    physical_address : UInt32
    virtual_size : UInt32
  end
  union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union
    unwind_data : UInt32
    anonymous : IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union_Anonymous_e__Struct
  end
  union IMAGE_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union
    unwind_info_address : UInt32
    unwind_data : UInt32
  end
  union IMAGE_FUNCTION_ENTRY64_Anonymous_e__Union
    end_of_prologue : UInt64
    unwind_info_address : UInt64
  end
  union IMAGE_COR20_HEADER_Anonymous_e__Union
    entry_point_token : UInt32
    entry_point_rva : UInt32
  end
  union WAITCHAIN_NODE_INFO_Anonymous_e__Union
    lock_object : WAITCHAIN_NODE_INFO_Anonymous_e__Union_LockObject_e__Struct
    thread_object : WAITCHAIN_NODE_INFO_Anonymous_e__Union_ThreadObject_e__Struct
  end
  union MINIDUMP_HEADER_Anonymous_e__Union
    reserved : UInt32
    time_date_stamp : UInt32
  end
  union CPU_INFORMATION
    x86_cpu_info : CPU_INFORMATION_X86CpuInfo_e__Struct
    other_cpu_info : CPU_INFORMATION_OtherCpuInfo_e__Struct
  end
  union MINIDUMP_SYSTEM_INFO_Anonymous2_e__Union
    reserved1 : UInt32
    anonymous : MINIDUMP_SYSTEM_INFO_Anonymous2_e__Union_Anonymous_e__Struct
  end
  union MINIDUMP_SYSTEM_INFO_Anonymous1_e__Union
    reserved0 : UInt16
    anonymous : MINIDUMP_SYSTEM_INFO_Anonymous1_e__Union_Anonymous_e__Struct
  end
  union MINIDUMP_CALLBACK_INPUT_Anonymous_e__Union
    status : HRESULT
    thread : MINIDUMP_THREAD_CALLBACK
    thread_ex : MINIDUMP_THREAD_EX_CALLBACK
    module_ : MINIDUMP_MODULE_CALLBACK
    include_thread : MINIDUMP_INCLUDE_THREAD_CALLBACK
    include_module : MINIDUMP_INCLUDE_MODULE_CALLBACK
    io : MINIDUMP_IO_CALLBACK
    read_memory_failure : MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    secondary_flags : UInt32
    vm_query : MINIDUMP_VM_QUERY_CALLBACK
    vm_pre_read : MINIDUMP_VM_PRE_READ_CALLBACK
    vm_post_read : MINIDUMP_VM_POST_READ_CALLBACK
  end
  union MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union
    module_write_flags : UInt32
    thread_write_flags : UInt32
    secondary_flags : UInt32
    anonymous1 : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous1_e__Struct
    anonymous2 : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous2_e__Struct
    handle : LibC::HANDLE
    anonymous3 : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous3_e__Struct
    anonymous4 : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous4_e__Struct
    anonymous5 : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous5_e__Struct
    status : HRESULT
  end
  union PROFILER_HEAP_OBJECT_RELATIONSHIP_Anonymous_e__Union
    number_value : Float64
    string_value : LibC::LPWSTR
    bstr_value : UInt8*
    object_id : LibC::UINT_PTR
    external_object_address : Void*
    sub_string : PROFILER_PROPERTY_TYPE_SUBSTRING_INFO*
  end
  union PROFILER_HEAP_OBJECT_OPTIONAL_INFO_Anonymous_e__Union
    prototype : LibC::UINT_PTR
    function_name : LibC::LPWSTR
    element_attributes_size : UInt32
    element_text_children_size : UInt32
    scope_list : PROFILER_HEAP_OBJECT_SCOPE_LIST*
    internal_property : PROFILER_HEAP_OBJECT_RELATIONSHIP*
    name_property_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    index_property_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    relationship_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    event_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    weak_map_collection_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    map_collection_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
    set_collection_list : PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST*
  end
  union PROFILER_HEAP_OBJECT_Anonymous_e__Union
    object_id : LibC::UINT_PTR
    external_object_address : Void*
  end
  union DUMP_FILE_ATTRIBUTES
    anonymous : DUMP_FILE_ATTRIBUTES_Anonymous_e__Struct
    attributes : UInt32
  end
  union DUMP_HEADER32_Anonymous_e__Union
    physical_memory_block : PHYSICAL_MEMORY_DESCRIPTOR32
    physical_memory_block_buffer : UInt8[700]*
  end
  union DUMP_HEADER64_Anonymous_e__Union
    physical_memory_block : PHYSICAL_MEMORY_DESCRIPTOR64
    physical_memory_block_buffer : UInt8[700]*
  end
  union WHEA_NOTIFICATION_FLAGS
    anonymous : WHEA_NOTIFICATION_FLAGS_Anonymous_e__Struct
    as_ushort : UInt16
  end
  union XPF_MC_BANK_FLAGS
    anonymous : XPF_MC_BANK_FLAGS_Anonymous_e__Struct
    as_uchar : UInt8
  end
  union XPF_MCE_FLAGS
    anonymous : XPF_MCE_FLAGS_Anonymous_e__Struct
    as_ulong : UInt32
  end
  union AER_ROOTPORT_DESCRIPTOR_FLAGS
    anonymous : AER_ROOTPORT_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    as_ushort : UInt16
  end
  union AER_ENDPOINT_DESCRIPTOR_FLAGS
    anonymous : AER_ENDPOINT_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    as_ushort : UInt16
  end
  union AER_BRIDGE_DESCRIPTOR_FLAGS
    anonymous : AER_BRIDGE_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    as_ushort : UInt16
  end
  union WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union
    polled : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Polled_e__Struct
    interrupt : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Interrupt_e__Struct
    local_interrupt : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_LocalInterrupt_e__Struct
    sci : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sci_e__Struct
    nmi : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Nmi_e__Struct
    sea : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sea_e__Struct
    sei : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sei_e__Struct
    gsiv : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Gsiv_e__Struct
  end
  union WHEA_PCI_SLOT_NUMBER_u_e__Union
    bits : WHEA_PCI_SLOT_NUMBER_u_e__Union_bits_e__Struct
    as_ulong : UInt32
  end
  union WHEA_ERROR_SOURCE_DESCRIPTOR_Info_e__Union
    xpf_mce_descriptor : WHEA_XPF_MCE_DESCRIPTOR
    xpf_cmc_descriptor : WHEA_XPF_CMC_DESCRIPTOR
    xpf_nmi_descriptor : WHEA_XPF_NMI_DESCRIPTOR
    ipf_mca_descriptor : WHEA_IPF_MCA_DESCRIPTOR
    ipf_cmc_descriptor : WHEA_IPF_CMC_DESCRIPTOR
    ipf_cpe_descriptor : WHEA_IPF_CPE_DESCRIPTOR
    aer_rootport_descriptor : WHEA_AER_ROOTPORT_DESCRIPTOR
    aer_endpoint_descriptor : WHEA_AER_ENDPOINT_DESCRIPTOR
    aer_bridge_descriptor : WHEA_AER_BRIDGE_DESCRIPTOR
    gen_err_descriptor : WHEA_GENERIC_ERROR_DESCRIPTOR
    gen_err_descriptor_v2 : WHEA_GENERIC_ERROR_DESCRIPTOR_V2
    device_driver_descriptor : WHEA_DEVICE_DRIVER_DESCRIPTOR
  end

  struct EXCEPTION_DEBUG_INFO
    exception_record : EXCEPTION_RECORD
    dw_first_chance : UInt32
  end
  struct CREATE_THREAD_DEBUG_INFO
    h_thread : LibC::HANDLE
    lp_thread_local_base : Void*
    lp_start_address : LPTHREAD_START_ROUTINE
  end
  struct CREATE_PROCESS_DEBUG_INFO
    h_file : LibC::HANDLE
    h_process : LibC::HANDLE
    h_thread : LibC::HANDLE
    lp_base_of_image : Void*
    dw_debug_info_file_offset : UInt32
    n_debug_info_size : UInt32
    lp_thread_local_base : Void*
    lp_start_address : LPTHREAD_START_ROUTINE
    lp_image_name : Void*
    f_unicode : UInt16
  end
  struct EXIT_THREAD_DEBUG_INFO
    dw_exit_code : UInt32
  end
  struct EXIT_PROCESS_DEBUG_INFO
    dw_exit_code : UInt32
  end
  struct LOAD_DLL_DEBUG_INFO
    h_file : LibC::HANDLE
    lp_base_of_dll : Void*
    dw_debug_info_file_offset : UInt32
    n_debug_info_size : UInt32
    lp_image_name : Void*
    f_unicode : UInt16
  end
  struct UNLOAD_DLL_DEBUG_INFO
    lp_base_of_dll : Void*
  end
  struct OUTPUT_DEBUG_STRING_INFO
    lp_debug_string_data : PSTR
    f_unicode : UInt16
    n_debug_string_length : UInt16
  end
  struct RIP_INFO
    dw_error : UInt32
    dw_type : RIP_INFO_TYPE
  end
  struct DEBUG_EVENT
    dw_debug_event_code : DEBUG_EVENT_CODE
    dw_process_id : UInt32
    dw_thread_id : UInt32
    u : DEBUG_EVENT_u_e__Union
  end
  struct DEBUG_OFFSET_REGION
    base : UInt64
    size : UInt64
  end
  struct DEBUG_READ_USER_MINIDUMP_STREAM
    stream_type : UInt32
    flags : UInt32
    offset : UInt64
    buffer : Void*
    buffer_size : UInt32
    buffer_used : UInt32
  end
  struct DEBUG_GET_TEXT_COMPLETIONS_IN
    flags : UInt32
    match_count_limit : UInt32
    reserved : UInt64[3]*
  end
  struct DEBUG_GET_TEXT_COMPLETIONS_OUT
    flags : UInt32
    replace_index : UInt32
    match_count : UInt32
    reserved1 : UInt32
    reserved2 : UInt64[2]*
  end
  struct DEBUG_CACHED_SYMBOL_INFO
    mod_base : UInt64
    arg1 : UInt64
    arg2 : UInt64
    id : UInt32
    arg3 : UInt32
  end
  struct PROCESS_NAME_ENTRY
    process_id : UInt32
    name_offset : UInt32
    name_size : UInt32
    next_entry : UInt32
  end
  struct DEBUG_THREAD_BASIC_INFORMATION
    valid : UInt32
    exit_status : UInt32
    priority_class : UInt32
    priority : UInt32
    create_time : UInt64
    exit_time : UInt64
    kernel_time : UInt64
    user_time : UInt64
    start_offset : UInt64
    affinity : UInt64
  end
  struct SYMBOL_INFO_EX
    size_of_struct : UInt32
    type_of_info : UInt32
    offset : UInt64
    line : UInt32
    displacement : UInt32
    reserved : UInt32[4]*
  end
  struct DEBUG_BREAKPOINT_PARAMETERS
    offset : UInt64
    id : UInt32
    break_type : UInt32
    proc_type : UInt32
    flags : UInt32
    data_size : UInt32
    data_access_type : UInt32
    pass_count : UInt32
    current_pass_count : UInt32
    match_thread : UInt32
    command_size : UInt32
    offset_expression_size : UInt32
  end
  struct DEBUG_CREATE_PROCESS_OPTIONS
    create_flags : UInt32
    eng_create_flags : UInt32
    verifier_flags : UInt32
    reserved : UInt32
  end
  struct DEBUG_CLIENT_CONTEXT
    cb_size : UInt32
    e_client : UInt32
  end
  struct DEBUG_STACK_FRAME
    instruction_offset : UInt64
    return_offset : UInt64
    frame_offset : UInt64
    stack_offset : UInt64
    func_table_entry : UInt64
    params : UInt64[4]*
    reserved : UInt64[6]*
    virtual : LibC::BOOL
    frame_number : UInt32
  end
  struct DEBUG_STACK_FRAME_EX
    instruction_offset : UInt64
    return_offset : UInt64
    frame_offset : UInt64
    stack_offset : UInt64
    func_table_entry : UInt64
    params : UInt64[4]*
    reserved : UInt64[6]*
    virtual : LibC::BOOL
    frame_number : UInt32
    inline_frame_context : UInt32
    reserved1 : UInt32
  end
  struct INLINE_FRAME_CONTEXT_Anonymous_e__Struct
    frame_id : UInt8
    frame_type : UInt8
    frame_signature : UInt16
  end
  struct STACK_SRC_INFO
    image_path : LibC::LPWSTR
    module_name : LibC::LPWSTR
    function : LibC::LPWSTR
    displacement : UInt32
    row : UInt32
    column : UInt32
  end
  struct STACK_SYM_FRAME_INFO
    stack_frame_ex : DEBUG_STACK_FRAME_EX
    src_info : STACK_SRC_INFO
  end
  struct DEBUG_SPECIFIC_FILTER_PARAMETERS
    execution_option : UInt32
    continue_option : UInt32
    text_size : UInt32
    command_size : UInt32
    argument_size : UInt32
  end
  struct DEBUG_EXCEPTION_FILTER_PARAMETERS
    execution_option : UInt32
    continue_option : UInt32
    text_size : UInt32
    command_size : UInt32
    second_command_size : UInt32
    exception_code : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_BREAKPOINT
    id : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_EXCEPTION
    exception_record : EXCEPTION_RECORD64
    first_chance : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_EXIT_THREAD
    exit_code : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_EXIT_PROCESS
    exit_code : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_LOAD_MODULE
    base : UInt64
  end
  struct DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE
    base : UInt64
  end
  struct DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR
    error : UInt32
    level : UInt32
  end
  struct DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION
    kind : UInt32
    data_size : UInt32
    address : UInt64
  end
  struct DEBUG_VALUE
    anonymous : DEBUG_VALUE_Anonymous_e__Union
    tail_of_raw_bytes : UInt32
    type : UInt32
  end
  struct DEBUG_VALUE_Anonymous_e__Union_I64Parts32_e__Struct
    low_part : UInt32
    high_part : UInt32
  end
  struct DEBUG_VALUE_Anonymous_e__Union_F128Parts64_e__Struct
    low_part : UInt64
    high_part : Int64
  end
  struct DEBUG_VALUE_Anonymous_e__Union_Anonymous_e__Struct
    i64 : UInt64
    nat : LibC::BOOL
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
    type : UInt32
    revision : UInt32
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_AMD64
    family : UInt32
    model : UInt32
    stepping : UInt32
    vendor_string : CHAR[16]*
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_IA64
    model : UInt32
    revision : UInt32
    family : UInt32
    arch_rev : UInt32
    vendor_string : CHAR[16]*
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_X86
    family : UInt32
    model : UInt32
    stepping : UInt32
    vendor_string : CHAR[16]*
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_ARM
    model : UInt32
    revision : UInt32
    vendor_string : CHAR[16]*
  end
  struct DEBUG_PROCESSOR_IDENTIFICATION_ARM64
    model : UInt32
    revision : UInt32
    vendor_string : CHAR[16]*
  end
  struct DEBUG_HANDLE_DATA_BASIC
    type_name_size : UInt32
    object_name_size : UInt32
    attributes : UInt32
    granted_access : UInt32
    handle_count : UInt32
    pointer_count : UInt32
  end
  struct DEBUG_EVENT_CONTEXT
    size : UInt32
    process_engine_id : UInt32
    thread_engine_id : UInt32
    frame_engine_id : UInt32
  end
  struct DEBUG_REGISTER_DESCRIPTION
    type : UInt32
    flags : UInt32
    subreg_master : UInt32
    subreg_length : UInt32
    subreg_mask : UInt64
    subreg_shift : UInt32
    reserved0 : UInt32
  end
  struct DEBUG_SYMBOL_PARAMETERS
    module_ : UInt64
    type_id : UInt32
    parent_symbol : UInt32
    sub_elements : UInt32
    flags : UInt32
    reserved : UInt64
  end
  struct DEBUG_SYMBOL_ENTRY
    module_base : UInt64
    offset : UInt64
    id : UInt64
    arg64 : UInt64
    size : UInt32
    flags : UInt32
    type_id : UInt32
    name_size : UInt32
    token : UInt32
    tag : UInt32
    arg32 : UInt32
    reserved : UInt32
  end
  struct DEBUG_MODULE_PARAMETERS
    base : UInt64
    size : UInt32
    time_date_stamp : UInt32
    checksum : UInt32
    flags : UInt32
    symbol_type : UInt32
    image_name_size : UInt32
    module_name_size : UInt32
    loaded_image_name_size : UInt32
    symbol_file_name_size : UInt32
    mapped_image_name_size : UInt32
    reserved : UInt64[2]*
  end
  struct DEBUG_MODULE_AND_ID
    module_base : UInt64
    id : UInt64
  end
  struct DEBUG_SYMBOL_SOURCE_ENTRY
    module_base : UInt64
    offset : UInt64
    file_name_id : UInt64
    engine_internal : UInt64
    size : UInt32
    flags : UInt32
    file_name_size : UInt32
    start_line : UInt32
    end_line : UInt32
    start_column : UInt32
    end_column : UInt32
    reserved : UInt32
  end
  struct Location
    host_defined : UInt64
    offset : UInt64
  end
  struct ArrayDimension
    lower_bound : Int64
    length : UInt64
    stride : UInt64
  end
  struct ScriptDebugPosition
    line : UInt32
    column : UInt32
  end
  struct ScriptDebugEventInformation
    debug_event : ScriptDebugEvent
    event_position : ScriptDebugPosition
    event_span_end : ScriptDebugPosition
    u : ScriptDebugEventInformation_u_e__Union
  end
  struct ScriptDebugEventInformation_u_e__Union_ExceptionInformation_e__Struct
    is_uncaught : Bool
  end
  struct ScriptDebugEventInformation_u_e__Union_BreakpointInformation_e__Struct
    breakpoint_id : UInt64
  end
  struct EXTSTACKTRACE
    frame_pointer : UInt32
    program_counter : UInt32
    return_address : UInt32
    args : UInt32[4]*
  end
  struct EXTSTACKTRACE32
    frame_pointer : UInt32
    program_counter : UInt32
    return_address : UInt32
    args : UInt32[4]*
  end
  struct EXTSTACKTRACE64
    frame_pointer : UInt64
    program_counter : UInt64
    return_address : UInt64
    args : UInt64[4]*
  end
  struct WINDBG_EXTENSION_APIS
    n_size : UInt32
    lp_output_routine : PWINDBG_OUTPUT_ROUTINE
    lp_get_expression_routine : PWINDBG_GET_EXPRESSION
    lp_get_symbol_routine : PWINDBG_GET_SYMBOL
    lp_disasm_routine : PWINDBG_DISASM
    lp_check_control_c_routine : PWINDBG_CHECK_CONTROL_C
    lp_read_process_memory_routine : PWINDBG_READ_PROCESS_MEMORY_ROUTINE
    lp_write_process_memory_routine : PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE
    lp_get_thread_context_routine : PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    lp_set_thread_context_routine : PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    lp_ioctl_routine : PWINDBG_IOCTL_ROUTINE
    lp_stack_trace_routine : PWINDBG_STACKTRACE_ROUTINE
  end
  struct WINDBG_EXTENSION_APIS32
    n_size : UInt32
    lp_output_routine : PWINDBG_OUTPUT_ROUTINE
    lp_get_expression_routine : PWINDBG_GET_EXPRESSION32
    lp_get_symbol_routine : PWINDBG_GET_SYMBOL32
    lp_disasm_routine : PWINDBG_DISASM32
    lp_check_control_c_routine : PWINDBG_CHECK_CONTROL_C
    lp_read_process_memory_routine : PWINDBG_READ_PROCESS_MEMORY_ROUTINE32
    lp_write_process_memory_routine : PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32
    lp_get_thread_context_routine : PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    lp_set_thread_context_routine : PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    lp_ioctl_routine : PWINDBG_IOCTL_ROUTINE
    lp_stack_trace_routine : PWINDBG_STACKTRACE_ROUTINE32
  end
  struct WINDBG_EXTENSION_APIS64
    n_size : UInt32
    lp_output_routine : PWINDBG_OUTPUT_ROUTINE
    lp_get_expression_routine : PWINDBG_GET_EXPRESSION64
    lp_get_symbol_routine : PWINDBG_GET_SYMBOL64
    lp_disasm_routine : PWINDBG_DISASM64
    lp_check_control_c_routine : PWINDBG_CHECK_CONTROL_C
    lp_read_process_memory_routine : PWINDBG_READ_PROCESS_MEMORY_ROUTINE64
    lp_write_process_memory_routine : PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64
    lp_get_thread_context_routine : PWINDBG_GET_THREAD_CONTEXT_ROUTINE
    lp_set_thread_context_routine : PWINDBG_SET_THREAD_CONTEXT_ROUTINE
    lp_ioctl_routine : PWINDBG_IOCTL_ROUTINE
    lp_stack_trace_routine : PWINDBG_STACKTRACE_ROUTINE64
  end
  struct WINDBG_OLD_EXTENSION_APIS
    n_size : UInt32
    lp_output_routine : PWINDBG_OUTPUT_ROUTINE
    lp_get_expression_routine : PWINDBG_GET_EXPRESSION
    lp_get_symbol_routine : PWINDBG_GET_SYMBOL
    lp_disasm_routine : PWINDBG_DISASM
    lp_check_control_c_routine : PWINDBG_CHECK_CONTROL_C
  end
  struct WINDBG_OLDKD_EXTENSION_APIS
    n_size : UInt32
    lp_output_routine : PWINDBG_OUTPUT_ROUTINE
    lp_get_expression_routine : PWINDBG_GET_EXPRESSION32
    lp_get_symbol_routine : PWINDBG_GET_SYMBOL32
    lp_disasm_routine : PWINDBG_DISASM32
    lp_check_control_c_routine : PWINDBG_CHECK_CONTROL_C
    lp_read_virtual_mem_routine : PWINDBG_READ_PROCESS_MEMORY_ROUTINE32
    lp_write_virtual_mem_routine : PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32
    lp_read_physical_mem_routine : PWINDBG_OLDKD_READ_PHYSICAL_MEMORY
    lp_write_physical_mem_routine : PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY
  end
  struct EXT_API_VERSION
    major_version : UInt16
    minor_version : UInt16
    revision : UInt16
    reserved : UInt16
  end
  struct PROCESSORINFO
    processor : UInt16
    number_processors : UInt16
  end
  struct READCONTROLSPACE
    processor : UInt16
    address : UInt32
    buf_len : UInt32
    buf : UInt8[0]*
  end
  struct READCONTROLSPACE32
    processor : UInt16
    address : UInt32
    buf_len : UInt32
    buf : UInt8[0]*
  end
  struct READCONTROLSPACE64
    processor : UInt16
    address : UInt64
    buf_len : UInt32
    buf : UInt8[0]*
  end
  struct IOSPACE
    address : UInt32
    length : UInt32
    data : UInt32
  end
  struct IOSPACE32
    address : UInt32
    length : UInt32
    data : UInt32
  end
  struct IOSPACE64
    address : UInt64
    length : UInt32
    data : UInt32
  end
  struct IOSPACE_EX
    address : UInt32
    length : UInt32
    data : UInt32
    interface_type : UInt32
    bus_number : UInt32
    address_space : UInt32
  end
  struct IOSPACE_EX32
    address : UInt32
    length : UInt32
    data : UInt32
    interface_type : UInt32
    bus_number : UInt32
    address_space : UInt32
  end
  struct IOSPACE_EX64
    address : UInt64
    length : UInt32
    data : UInt32
    interface_type : UInt32
    bus_number : UInt32
    address_space : UInt32
  end
  struct GETSETBUSDATA
    bus_data_type : UInt32
    bus_number : UInt32
    slot_number : UInt32
    buffer : Void*
    offset : UInt32
    length : UInt32
  end
  struct SEARCHMEMORY
    search_address : UInt64
    search_length : UInt64
    found_address : UInt64
    pattern_length : UInt32
    pattern : Void*
  end
  struct PHYSICAL
    address : UInt64
    buf_len : UInt32
    buf : UInt8[0]*
  end
  struct PHYSICAL_WITH_FLAGS
    address : UInt64
    buf_len : UInt32
    flags : UInt32
    buf : UInt8[0]*
  end
  struct READ_WRITE_MSR
    msr : UInt32
    value : Int64
  end
  struct GET_SET_SYMPATH
    args : PSTR
    result : PSTR
    length : Int32
  end
  struct GET_TEB_ADDRESS
    address : UInt64
  end
  struct GET_PEB_ADDRESS
    current_thread : UInt64
    address : UInt64
  end
  struct GET_CURRENT_THREAD_ADDRESS
    processor : UInt32
    address : UInt64
  end
  struct GET_CURRENT_PROCESS_ADDRESS
    processor : UInt32
    current_thread : UInt64
    address : UInt64
  end
  struct GET_INPUT_LINE
    prompt : PSTR
    buffer : PSTR
    buffer_size : UInt32
    input_size : UInt32
  end
  struct GET_EXPRESSION_EX
    expression : PSTR
    remainder : PSTR
    value : UInt64
  end
  struct TRANSLATE_VIRTUAL_TO_PHYSICAL
    virtual : UInt64
    physical : UInt64
  end
  struct VIRTUAL_TO_PHYSICAL
    status : UInt32
    size : UInt32
    pde_address : UInt64
    virtual : UInt64
    physical : UInt64
  end
  struct PHYSICAL_TO_VIRTUAL
    status : UInt32
    size : UInt32
    pde_address : UInt64
  end
  struct GET_CONTEXT_EX
    status : UInt32
    context_size : UInt32
    p_context : Void*
  end
  struct POINTER_SEARCH_PHYSICAL
    offset : UInt64
    length : UInt64
    pointer_min : UInt64
    pointer_max : UInt64
    flags : UInt32
    match_offsets : UInt64*
    match_offsets_size : UInt32
    match_offsets_count : UInt32
  end
  struct WDBGEXTS_THREAD_OS_INFO
    thread_id : UInt32
    exit_status : UInt32
    priority_class : UInt32
    priority : UInt32
    create_time : UInt64
    exit_time : UInt64
    kernel_time : UInt64
    user_time : UInt64
    start_offset : UInt64
    affinity : UInt64
  end
  struct WDBGEXTS_CLR_DATA_INTERFACE
    iid : Guid*
    iface : Void*
  end
  struct EXT_MATCH_PATTERN_A
    str : PSTR
    pattern : PSTR
    case_sensitive : UInt32
  end
  struct EXT_FIND_FILE
    file_name : LibC::LPWSTR
    indexed_size : UInt64
    image_time_date_stamp : UInt32
    image_check_sum : UInt32
    extra_info : Void*
    extra_info_size : UInt32
    flags : UInt32
    file_mapping : Void*
    file_mapping_size : UInt64
    file_handle : LibC::HANDLE
    found_file_name : LibC::LPWSTR
    found_file_name_chars : UInt32
  end
  struct DEBUG_TYPED_DATA
    mod_base : UInt64
    offset : UInt64
    engine_handle : UInt64
    data : UInt64
    size : UInt32
    flags : UInt32
    type_id : UInt32
    base_type_id : UInt32
    tag : UInt32
    register : UInt32
    internal : UInt64[9]*
  end
  struct EXT_TYPED_DATA
    operation : EXT_TDOP
    flags : UInt32
    in_data : DEBUG_TYPED_DATA
    out_data : DEBUG_TYPED_DATA
    in_str_index : UInt32
    in32 : UInt32
    out32 : UInt32
    in64 : UInt64
    out64 : UInt64
    str_buffer_index : UInt32
    str_buffer_chars : UInt32
    str_chars_needed : UInt32
    data_buffer_index : UInt32
    data_buffer_bytes : UInt32
    data_bytes_needed : UInt32
    status : HRESULT
    reserved : UInt64[8]*
  end
  struct WDBGEXTS_QUERY_INTERFACE
    iid : Guid*
    iface : Void*
  end
  struct WDBGEXTS_DISASSEMBLE_BUFFER
    in_offset : UInt64
    out_offset : UInt64
    addr_flags : UInt32
    format_flags : UInt32
    data_buffer_bytes : UInt32
    disasm_buffer_chars : UInt32
    data_buffer : Void*
    disasm_buffer : LibC::LPWSTR
    reserved0 : UInt64[3]*
  end
  struct WDBGEXTS_MODULE_IN_RANGE
    start : UInt64
    end_ : UInt64
    found_mod_base : UInt64
    found_mod_size : UInt32
  end
  struct DBGKD_GET_VERSION32
    major_version : UInt16
    minor_version : UInt16
    protocol_version : UInt16
    flags : UInt16
    kern_base : UInt32
    ps_loaded_module_list : UInt32
    machine_type : UInt16
    th_callback_stack : UInt16
    next_callback : UInt16
    frame_pointer : UInt16
    ki_call_user_mode : UInt32
    ke_user_callback_dispatcher : UInt32
    breakpoint_with_status : UInt32
    debugger_data_list : UInt32
  end
  struct DBGKD_DEBUG_DATA_HEADER32
    list : LIST_ENTRY32
    owner_tag : UInt32
    size : UInt32
  end
  struct KDDEBUGGER_DATA32
    header : DBGKD_DEBUG_DATA_HEADER32
    kern_base : UInt32
    breakpoint_with_status : UInt32
    saved_context : UInt32
    th_callback_stack : UInt16
    next_callback : UInt16
    frame_pointer : UInt16
    _bitfield : UInt16
    ki_call_user_mode : UInt32
    ke_user_callback_dispatcher : UInt32
    ps_loaded_module_list : UInt32
    ps_active_process_head : UInt32
    psp_cid_table : UInt32
    exp_system_resources_list : UInt32
    exp_paged_pool_descriptor : UInt32
    exp_number_of_paged_pools : UInt32
    ke_time_increment : UInt32
    ke_bug_check_callback_list_head : UInt32
    ki_bugcheck_data : UInt32
    iop_error_log_list_head : UInt32
    obp_root_directory_object : UInt32
    obp_type_object_type : UInt32
    mm_system_cache_start : UInt32
    mm_system_cache_end : UInt32
    mm_system_cache_ws : UInt32
    mm_pfn_database : UInt32
    mm_system_ptes_start : UInt32
    mm_system_ptes_end : UInt32
    mm_subsection_base : UInt32
    mm_number_of_paging_files : UInt32
    mm_lowest_physical_page : UInt32
    mm_highest_physical_page : UInt32
    mm_number_of_physical_pages : UInt32
    mm_maximum_non_paged_pool_in_bytes : UInt32
    mm_non_paged_system_start : UInt32
    mm_non_paged_pool_start : UInt32
    mm_non_paged_pool_end : UInt32
    mm_paged_pool_start : UInt32
    mm_paged_pool_end : UInt32
    mm_paged_pool_information : UInt32
    mm_page_size : UInt32
    mm_size_of_paged_pool_in_bytes : UInt32
    mm_total_commit_limit : UInt32
    mm_total_committed_pages : UInt32
    mm_shared_commit : UInt32
    mm_driver_commit : UInt32
    mm_process_commit : UInt32
    mm_paged_pool_commit : UInt32
    mm_extended_commit : UInt32
    mm_zeroed_page_list_head : UInt32
    mm_free_page_list_head : UInt32
    mm_standby_page_list_head : UInt32
    mm_modified_page_list_head : UInt32
    mm_modified_no_write_page_list_head : UInt32
    mm_available_pages : UInt32
    mm_resident_available_pages : UInt32
    pool_track_table : UInt32
    non_paged_pool_descriptor : UInt32
    mm_highest_user_address : UInt32
    mm_system_range_start : UInt32
    mm_user_probe_address : UInt32
    kd_print_circular_buffer : UInt32
    kd_print_circular_buffer_end : UInt32
    kd_print_write_pointer : UInt32
    kd_print_rollover_count : UInt32
    mm_loaded_user_image_list : UInt32
  end
  struct DBGKD_GET_VERSION64
    major_version : UInt16
    minor_version : UInt16
    protocol_version : UInt8
    kd_secondary_version : UInt8
    flags : UInt16
    machine_type : UInt16
    max_packet_type : UInt8
    max_state_change : UInt8
    max_manipulate : UInt8
    simulation : UInt8
    unused : UInt16[0]*
    kern_base : UInt64
    ps_loaded_module_list : UInt64
    debugger_data_list : UInt64
  end
  struct DBGKD_DEBUG_DATA_HEADER64
    list : LIST_ENTRY64
    owner_tag : UInt32
    size : UInt32
  end
  struct KDDEBUGGER_DATA64
    header : DBGKD_DEBUG_DATA_HEADER64
    kern_base : UInt64
    breakpoint_with_status : UInt64
    saved_context : UInt64
    th_callback_stack : UInt16
    next_callback : UInt16
    frame_pointer : UInt16
    _bitfield : UInt16
    ki_call_user_mode : UInt64
    ke_user_callback_dispatcher : UInt64
    ps_loaded_module_list : UInt64
    ps_active_process_head : UInt64
    psp_cid_table : UInt64
    exp_system_resources_list : UInt64
    exp_paged_pool_descriptor : UInt64
    exp_number_of_paged_pools : UInt64
    ke_time_increment : UInt64
    ke_bug_check_callback_list_head : UInt64
    ki_bugcheck_data : UInt64
    iop_error_log_list_head : UInt64
    obp_root_directory_object : UInt64
    obp_type_object_type : UInt64
    mm_system_cache_start : UInt64
    mm_system_cache_end : UInt64
    mm_system_cache_ws : UInt64
    mm_pfn_database : UInt64
    mm_system_ptes_start : UInt64
    mm_system_ptes_end : UInt64
    mm_subsection_base : UInt64
    mm_number_of_paging_files : UInt64
    mm_lowest_physical_page : UInt64
    mm_highest_physical_page : UInt64
    mm_number_of_physical_pages : UInt64
    mm_maximum_non_paged_pool_in_bytes : UInt64
    mm_non_paged_system_start : UInt64
    mm_non_paged_pool_start : UInt64
    mm_non_paged_pool_end : UInt64
    mm_paged_pool_start : UInt64
    mm_paged_pool_end : UInt64
    mm_paged_pool_information : UInt64
    mm_page_size : UInt64
    mm_size_of_paged_pool_in_bytes : UInt64
    mm_total_commit_limit : UInt64
    mm_total_committed_pages : UInt64
    mm_shared_commit : UInt64
    mm_driver_commit : UInt64
    mm_process_commit : UInt64
    mm_paged_pool_commit : UInt64
    mm_extended_commit : UInt64
    mm_zeroed_page_list_head : UInt64
    mm_free_page_list_head : UInt64
    mm_standby_page_list_head : UInt64
    mm_modified_page_list_head : UInt64
    mm_modified_no_write_page_list_head : UInt64
    mm_available_pages : UInt64
    mm_resident_available_pages : UInt64
    pool_track_table : UInt64
    non_paged_pool_descriptor : UInt64
    mm_highest_user_address : UInt64
    mm_system_range_start : UInt64
    mm_user_probe_address : UInt64
    kd_print_circular_buffer : UInt64
    kd_print_circular_buffer_end : UInt64
    kd_print_write_pointer : UInt64
    kd_print_rollover_count : UInt64
    mm_loaded_user_image_list : UInt64
    nt_build_lab : UInt64
    ki_normal_system_call : UInt64
    ki_processor_block : UInt64
    mm_unloaded_drivers : UInt64
    mm_last_unloaded_driver : UInt64
    mm_triage_action_taken : UInt64
    mm_special_pool_tag : UInt64
    kernel_verifier : UInt64
    mm_verifier_data : UInt64
    mm_allocated_non_paged_pool : UInt64
    mm_peak_commitment : UInt64
    mm_total_commit_limit_maximum : UInt64
    cm_nt_csd_version : UInt64
    mm_physical_memory_block : UInt64
    mm_session_base : UInt64
    mm_session_size : UInt64
    mm_system_parent_table_page : UInt64
    mm_virtual_translation_base : UInt64
    offset_k_thread_next_processor : UInt16
    offset_k_thread_teb : UInt16
    offset_k_thread_kernel_stack : UInt16
    offset_k_thread_initial_stack : UInt16
    offset_k_thread_apc_process : UInt16
    offset_k_thread_state : UInt16
    offset_k_thread_b_store : UInt16
    offset_k_thread_b_store_limit : UInt16
    size_e_process : UInt16
    offset_eprocess_peb : UInt16
    offset_eprocess_parent_cid : UInt16
    offset_eprocess_directory_table_base : UInt16
    size_prcb : UInt16
    offset_prcb_dpc_routine : UInt16
    offset_prcb_current_thread : UInt16
    offset_prcb_mhz : UInt16
    offset_prcb_cpu_type : UInt16
    offset_prcb_vendor_string : UInt16
    offset_prcb_proc_state_context : UInt16
    offset_prcb_number : UInt16
    size_e_thread : UInt16
    l1tf_high_physical_bit_index : UInt8
    l1tf_swizzle_bit_index : UInt8
    padding0 : UInt32
    kd_print_circular_buffer_ptr : UInt64
    kd_print_buffer_size : UInt64
    ke_loader_block : UInt64
    size_pcr : UInt16
    offset_pcr_self_pcr : UInt16
    offset_pcr_current_prcb : UInt16
    offset_pcr_contained_prcb : UInt16
    offset_pcr_initial_b_store : UInt16
    offset_pcr_b_store_limit : UInt16
    offset_pcr_initial_stack : UInt16
    offset_pcr_stack_limit : UInt16
    offset_prcb_pcr_page : UInt16
    offset_prcb_proc_state_special_reg : UInt16
    gdt_r0_code : UInt16
    gdt_r0_data : UInt16
    gdt_r0_pcr : UInt16
    gdt_r3_code : UInt16
    gdt_r3_data : UInt16
    gdt_r3_teb : UInt16
    gdt_ldt : UInt16
    gdt_tss : UInt16
    gdt64_r3_cm_code : UInt16
    gdt64_r3_cm_teb : UInt16
    iop_num_triage_dump_data_blocks : UInt64
    iop_triage_dump_data_blocks : UInt64
    vf_crash_data_block : UInt64
    mm_bad_pages_detected : UInt64
    mm_zeroed_page_single_bit_errors_detected : UInt64
    etwp_debugger_data : UInt64
    offset_prcb_context : UInt16
    offset_prcb_max_breakpoints : UInt16
    offset_prcb_max_watchpoints : UInt16
    offset_k_thread_stack_limit : UInt32
    offset_k_thread_stack_base : UInt32
    offset_k_thread_queue_list_entry : UInt32
    offset_e_thread_irp_list : UInt32
    offset_prcb_idle_thread : UInt16
    offset_prcb_normal_dpc_state : UInt16
    offset_prcb_dpc_stack : UInt16
    offset_prcb_isr_stack : UInt16
    size_kdpc_stack_frame : UInt16
    offset_k_pri_queue_thread_list_head : UInt16
    offset_k_thread_wait_reason : UInt16
    padding1 : UInt16
    pte_base : UInt64
    retpoline_stub_function_table : UInt64
    retpoline_stub_function_table_size : UInt32
    retpoline_stub_offset : UInt32
    retpoline_stub_size : UInt32
    offset_e_process_mm_hot_patch_context : UInt16
  end
  struct FIELD_INFO
    f_name : UInt8*
    print_name : UInt8*
    size : UInt32
    f_options : UInt32
    address : UInt64
    anonymous : FIELD_INFO_Anonymous_e__Union
    type_id : UInt32
    field_offset : UInt32
    buffer_size : UInt32
    bit_field : FIELD_INFO_BitField
    _bitfield : UInt32
  end
  struct FIELD_INFO_BitField
    position : UInt16
    size : UInt16
  end
  struct SYM_DUMP_PARAM
    size : UInt32
    s_name : UInt8*
    options : UInt32
    addr : UInt64
    list_link : FIELD_INFO*
    anonymous : SYM_DUMP_PARAM_Anonymous_e__Union
    callback_routine : PSYM_DUMP_FIELD_CALLBACK
    n_fields : UInt32
    fields : FIELD_INFO*
    mod_base : UInt64
    type_id : UInt32
    type_size : UInt32
    buffer_size : UInt32
    _bitfield : UInt32
  end
  struct M128A
    low : UInt64
    high : Int64
  end
  struct XSAVE_FORMAT
    control_word : UInt16
    status_word : UInt16
    tag_word : UInt8
    reserved1 : UInt8
    error_opcode : UInt16
    error_offset : UInt32
    error_selector : UInt16
    reserved2 : UInt16
    data_offset : UInt32
    data_selector : UInt16
    reserved3 : UInt16
    mx_csr : UInt32
    mx_csr_mask : UInt32
    float_registers : M128A[8]*
    xmm_registers : M128A[16]*
    reserved4 : UInt8[96]*
  end
  struct XSAVE_AREA_HEADER
    mask : UInt64
    compaction_mask : UInt64
    reserved2 : UInt64[6]*
  end
  struct XSAVE_AREA
    legacy_state : XSAVE_FORMAT
    header : XSAVE_AREA_HEADER
  end
  struct XSTATE_CONTEXT
    mask : UInt64
    length : UInt32
    reserved1 : UInt32
    area : XSAVE_AREA*
    buffer : Void*
  end
  struct CONTEXT
    p1_home : UInt64
    p2_home : UInt64
    p3_home : UInt64
    p4_home : UInt64
    p5_home : UInt64
    p6_home : UInt64
    context_flags : UInt32
    mx_csr : UInt32
    seg_cs : UInt16
    seg_ds : UInt16
    seg_es : UInt16
    seg_fs : UInt16
    seg_gs : UInt16
    seg_ss : UInt16
    e_flags : UInt32
    dr0 : UInt64
    dr1 : UInt64
    dr2 : UInt64
    dr3 : UInt64
    dr6 : UInt64
    dr7 : UInt64
    rax : UInt64
    rcx : UInt64
    rdx : UInt64
    rbx : UInt64
    rsp : UInt64
    rbp : UInt64
    rsi : UInt64
    rdi : UInt64
    r8 : UInt64
    r9 : UInt64
    r10 : UInt64
    r11 : UInt64
    r12 : UInt64
    r13 : UInt64
    r14 : UInt64
    r15 : UInt64
    rip : UInt64
    anonymous : CONTEXT_Anonymous_e__Union
    vector_register : M128A[26]*
    vector_control : UInt64
    debug_control : UInt64
    last_branch_to_rip : UInt64
    last_branch_from_rip : UInt64
    last_exception_to_rip : UInt64
    last_exception_from_rip : UInt64
  end
  struct CONTEXT_Anonymous_e__Union_Anonymous_e__Struct
    header : M128A[2]*
    legacy : M128A[8]*
    xmm0 : M128A
    xmm1 : M128A
    xmm2 : M128A
    xmm3 : M128A
    xmm4 : M128A
    xmm5 : M128A
    xmm6 : M128A
    xmm7 : M128A
    xmm8 : M128A
    xmm9 : M128A
    xmm10 : M128A
    xmm11 : M128A
    xmm12 : M128A
    xmm13 : M128A
    xmm14 : M128A
    xmm15 : M128A
  end
  struct DISPATCHER_CONTEXT
    control_pc : UInt64
    image_base : UInt64
    function_entry : IMAGE_RUNTIME_FUNCTION_ENTRY*
    establisher_frame : UInt64
    target_ip : UInt64
    context_record : CONTEXT*
    language_handler : EXCEPTION_ROUTINE
    handler_data : Void*
    history_table : UNWIND_HISTORY_TABLE*
    scope_index : UInt32
    fill0 : UInt32
  end
  struct KNONVOLATILE_CONTEXT_POINTERS
    anonymous1 : KNONVOLATILE_CONTEXT_POINTERS_Anonymous1_e__Union
    anonymous2 : KNONVOLATILE_CONTEXT_POINTERS_Anonymous2_e__Union
  end
  struct KNONVOLATILE_CONTEXT_POINTERS_Anonymous2_e__Union_Anonymous_e__Struct
    rax : UInt64*
    rcx : UInt64*
    rdx : UInt64*
    rbx : UInt64*
    rsp : UInt64*
    rbp : UInt64*
    rsi : UInt64*
    rdi : UInt64*
    r8 : UInt64*
    r9 : UInt64*
    r10 : UInt64*
    r11 : UInt64*
    r12 : UInt64*
    r13 : UInt64*
    r14 : UInt64*
    r15 : UInt64*
  end
  struct KNONVOLATILE_CONTEXT_POINTERS_Anonymous1_e__Union_Anonymous_e__Struct
    xmm0 : M128A*
    xmm1 : M128A*
    xmm2 : M128A*
    xmm3 : M128A*
    xmm4 : M128A*
    xmm5 : M128A*
    xmm6 : M128A*
    xmm7 : M128A*
    xmm8 : M128A*
    xmm9 : M128A*
    xmm10 : M128A*
    xmm11 : M128A*
    xmm12 : M128A*
    xmm13 : M128A*
    xmm14 : M128A*
    xmm15 : M128A*
  end
  struct ARM64_NT_NEON128_Anonymous_e__Struct
    low : UInt64
    high : Int64
  end
  struct ARM64_NT_CONTEXT
    context_flags : UInt32
    cpsr : UInt32
    anonymous : ARM64_NT_CONTEXT_Anonymous_e__Union
    sp : UInt64
    pc : UInt64
    v : ARM64_NT_NEON128[32]*
    fpcr : UInt32
    fpsr : UInt32
    bcr : UInt32[8]*
    bvr : UInt64[8]*
    wcr : UInt32[2]*
    wvr : UInt64[2]*
  end
  struct ARM64_NT_CONTEXT_Anonymous_e__Union_Anonymous_e__Struct
    x0 : UInt64
    x1 : UInt64
    x2 : UInt64
    x3 : UInt64
    x4 : UInt64
    x5 : UInt64
    x6 : UInt64
    x7 : UInt64
    x8 : UInt64
    x9 : UInt64
    x10 : UInt64
    x11 : UInt64
    x12 : UInt64
    x13 : UInt64
    x14 : UInt64
    x15 : UInt64
    x16 : UInt64
    x17 : UInt64
    x18 : UInt64
    x19 : UInt64
    x20 : UInt64
    x21 : UInt64
    x22 : UInt64
    x23 : UInt64
    x24 : UInt64
    x25 : UInt64
    x26 : UInt64
    x27 : UInt64
    x28 : UInt64
    fp : UInt64
    lr : UInt64
  end
  struct DISPATCHER_CONTEXT_ARM64
    control_pc : LibC::UINT_PTR
    image_base : LibC::UINT_PTR
    function_entry : IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*
    establisher_frame : LibC::UINT_PTR
    target_pc : LibC::UINT_PTR
    context_record : ARM64_NT_CONTEXT*
    language_handler : EXCEPTION_ROUTINE
    handler_data : Void*
    history_table : UNWIND_HISTORY_TABLE*
    scope_index : UInt32
    control_pc_is_unwound : BOOLEAN
    non_volatile_registers : UInt8*
  end
  struct LDT_ENTRY
    limit_low : UInt16
    base_low : UInt16
    high_word : LDT_ENTRY_HighWord_e__Union
  end
  struct LDT_ENTRY_HighWord_e__Union_Bytes_e__Struct
    base_mid : UInt8
    flags1 : UInt8
    flags2 : UInt8
    base_hi : UInt8
  end
  struct LDT_ENTRY_HighWord_e__Union_Bits_e__Struct
    _bitfield : UInt32
  end
  struct WOW64_FLOATING_SAVE_AREA
    control_word : UInt32
    status_word : UInt32
    tag_word : UInt32
    error_offset : UInt32
    error_selector : UInt32
    data_offset : UInt32
    data_selector : UInt32
    register_area : UInt8[80]*
    cr0_npx_state : UInt32
  end
  struct WOW64_CONTEXT
    context_flags : UInt32
    dr0 : UInt32
    dr1 : UInt32
    dr2 : UInt32
    dr3 : UInt32
    dr6 : UInt32
    dr7 : UInt32
    float_save : WOW64_FLOATING_SAVE_AREA
    seg_gs : UInt32
    seg_fs : UInt32
    seg_es : UInt32
    seg_ds : UInt32
    edi : UInt32
    esi : UInt32
    ebx : UInt32
    edx : UInt32
    ecx : UInt32
    eax : UInt32
    ebp : UInt32
    eip : UInt32
    seg_cs : UInt32
    e_flags : UInt32
    esp : UInt32
    seg_ss : UInt32
    extended_registers : UInt8[512]*
  end
  struct WOW64_LDT_ENTRY
    limit_low : UInt16
    base_low : UInt16
    high_word : WOW64_LDT_ENTRY_HighWord_e__Union
  end
  struct WOW64_LDT_ENTRY_HighWord_e__Union_Bytes_e__Struct
    base_mid : UInt8
    flags1 : UInt8
    flags2 : UInt8
    base_hi : UInt8
  end
  struct WOW64_LDT_ENTRY_HighWord_e__Union_Bits_e__Struct
    _bitfield : UInt32
  end
  struct WOW64_DESCRIPTOR_TABLE_ENTRY
    selector : UInt32
    descriptor : WOW64_LDT_ENTRY
  end
  struct EXCEPTION_RECORD
    exception_code : NTSTATUS
    exception_flags : UInt32
    exception_record : EXCEPTION_RECORD*
    exception_address : Void*
    number_parameters : UInt32
    exception_information : LibC::UINT_PTR[15]*
  end
  struct EXCEPTION_RECORD32
    exception_code : NTSTATUS
    exception_flags : UInt32
    exception_record : UInt32
    exception_address : UInt32
    number_parameters : UInt32
    exception_information : UInt32[15]*
  end
  struct EXCEPTION_RECORD64
    exception_code : NTSTATUS
    exception_flags : UInt32
    exception_record : UInt64
    exception_address : UInt64
    number_parameters : UInt32
    __unused_alignment : UInt32
    exception_information : UInt64[15]*
  end
  struct EXCEPTION_POINTERS
    exception_record : EXCEPTION_RECORD*
    context_record : CONTEXT*
  end
  struct XSTATE_FEATURE
    offset : UInt32
    size : UInt32
  end
  struct XSTATE_CONFIGURATION
    enabled_features : UInt64
    enabled_volatile_features : UInt64
    size : UInt32
    anonymous : XSTATE_CONFIGURATION_Anonymous_e__Union
    features : XSTATE_FEATURE[64]*
    enabled_supervisor_features : UInt64
    aligned_features : UInt64
    all_feature_size : UInt32
    all_features : UInt32[64]*
    enabled_user_visible_supervisor_features : UInt64
    extended_feature_disable_features : UInt64
    all_non_large_feature_size : UInt32
    spare : UInt32
  end
  struct XSTATE_CONFIGURATION_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct IMAGE_FILE_HEADER
    machine : IMAGE_FILE_MACHINE
    number_of_sections : UInt16
    time_date_stamp : UInt32
    pointer_to_symbol_table : UInt32
    number_of_symbols : UInt32
    size_of_optional_header : UInt16
    characteristics : IMAGE_FILE_CHARACTERISTICS
  end
  struct IMAGE_DATA_DIRECTORY
    virtual_address : UInt32
    size : UInt32
  end
  struct IMAGE_OPTIONAL_HEADER32
    magic : IMAGE_OPTIONAL_HEADER_MAGIC
    major_linker_version : UInt8
    minor_linker_version : UInt8
    size_of_code : UInt32
    size_of_initialized_data : UInt32
    size_of_uninitialized_data : UInt32
    address_of_entry_point : UInt32
    base_of_code : UInt32
    base_of_data : UInt32
    image_base : UInt32
    section_alignment : UInt32
    file_alignment : UInt32
    major_operating_system_version : UInt16
    minor_operating_system_version : UInt16
    major_image_version : UInt16
    minor_image_version : UInt16
    major_subsystem_version : UInt16
    minor_subsystem_version : UInt16
    win32_version_value : UInt32
    size_of_image : UInt32
    size_of_headers : UInt32
    check_sum : UInt32
    subsystem : IMAGE_SUBSYSTEM
    dll_characteristics : IMAGE_DLL_CHARACTERISTICS
    size_of_stack_reserve : UInt32
    size_of_stack_commit : UInt32
    size_of_heap_reserve : UInt32
    size_of_heap_commit : UInt32
    loader_flags : UInt32
    number_of_rva_and_sizes : UInt32
    data_directory : IMAGE_DATA_DIRECTORY[16]*
  end
  struct IMAGE_ROM_OPTIONAL_HEADER
    magic : UInt16
    major_linker_version : UInt8
    minor_linker_version : UInt8
    size_of_code : UInt32
    size_of_initialized_data : UInt32
    size_of_uninitialized_data : UInt32
    address_of_entry_point : UInt32
    base_of_code : UInt32
    base_of_data : UInt32
    base_of_bss : UInt32
    gpr_mask : UInt32
    cpr_mask : UInt32[4]*
    gp_value : UInt32
  end
  struct IMAGE_OPTIONAL_HEADER64
    magic : IMAGE_OPTIONAL_HEADER_MAGIC
    major_linker_version : UInt8
    minor_linker_version : UInt8
    size_of_code : UInt32
    size_of_initialized_data : UInt32
    size_of_uninitialized_data : UInt32
    address_of_entry_point : UInt32
    base_of_code : UInt32
    image_base : UInt64
    section_alignment : UInt32
    file_alignment : UInt32
    major_operating_system_version : UInt16
    minor_operating_system_version : UInt16
    major_image_version : UInt16
    minor_image_version : UInt16
    major_subsystem_version : UInt16
    minor_subsystem_version : UInt16
    win32_version_value : UInt32
    size_of_image : UInt32
    size_of_headers : UInt32
    check_sum : UInt32
    subsystem : IMAGE_SUBSYSTEM
    dll_characteristics : IMAGE_DLL_CHARACTERISTICS
    size_of_stack_reserve : UInt64
    size_of_stack_commit : UInt64
    size_of_heap_reserve : UInt64
    size_of_heap_commit : UInt64
    loader_flags : UInt32
    number_of_rva_and_sizes : UInt32
    data_directory : IMAGE_DATA_DIRECTORY[16]*
  end
  struct IMAGE_NT_HEADERS64
    signature : UInt32
    file_header : IMAGE_FILE_HEADER
    optional_header : IMAGE_OPTIONAL_HEADER64
  end
  struct IMAGE_NT_HEADERS32
    signature : UInt32
    file_header : IMAGE_FILE_HEADER
    optional_header : IMAGE_OPTIONAL_HEADER32
  end
  struct IMAGE_ROM_HEADERS
    file_header : IMAGE_FILE_HEADER
    optional_header : IMAGE_ROM_OPTIONAL_HEADER
  end
  struct IMAGE_SECTION_HEADER
    name : UInt8[8]*
    misc : IMAGE_SECTION_HEADER_Misc_e__Union
    virtual_address : UInt32
    size_of_raw_data : UInt32
    pointer_to_raw_data : UInt32
    pointer_to_relocations : UInt32
    pointer_to_linenumbers : UInt32
    number_of_relocations : UInt16
    number_of_linenumbers : UInt16
    characteristics : IMAGE_SECTION_CHARACTERISTICS
  end
  struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    flags : UInt16
    catalog : UInt16
    catalog_offset : UInt32
    reserved : UInt32
  end
  struct IMAGE_LOAD_CONFIG_DIRECTORY32
    size : UInt32
    time_date_stamp : UInt32
    major_version : UInt16
    minor_version : UInt16
    global_flags_clear : UInt32
    global_flags_set : UInt32
    critical_section_default_timeout : UInt32
    de_commit_free_block_threshold : UInt32
    de_commit_total_free_threshold : UInt32
    lock_prefix_table : UInt32
    maximum_allocation_size : UInt32
    virtual_memory_threshold : UInt32
    process_heap_flags : UInt32
    process_affinity_mask : UInt32
    csd_version : UInt16
    dependent_load_flags : UInt16
    edit_list : UInt32
    security_cookie : UInt32
    se_handler_table : UInt32
    se_handler_count : UInt32
    guard_cf_check_function_pointer : UInt32
    guard_cf_dispatch_function_pointer : UInt32
    guard_cf_function_table : UInt32
    guard_cf_function_count : UInt32
    guard_flags : UInt32
    code_integrity : IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    guard_address_taken_iat_entry_table : UInt32
    guard_address_taken_iat_entry_count : UInt32
    guard_long_jump_target_table : UInt32
    guard_long_jump_target_count : UInt32
    dynamic_value_reloc_table : UInt32
    chpe_metadata_pointer : UInt32
    guard_rf_failure_routine : UInt32
    guard_rf_failure_routine_function_pointer : UInt32
    dynamic_value_reloc_table_offset : UInt32
    dynamic_value_reloc_table_section : UInt16
    reserved2 : UInt16
    guard_rf_verify_stack_pointer_function_pointer : UInt32
    hot_patch_table_offset : UInt32
    reserved3 : UInt32
    enclave_configuration_pointer : UInt32
    volatile_metadata_pointer : UInt32
    guard_eh_continuation_table : UInt32
    guard_eh_continuation_count : UInt32
    guard_xfg_check_function_pointer : UInt32
    guard_xfg_dispatch_function_pointer : UInt32
    guard_xfg_table_dispatch_function_pointer : UInt32
    cast_guard_os_determined_failure_mode : UInt32
  end
  struct IMAGE_LOAD_CONFIG_DIRECTORY64
    size : UInt32
    time_date_stamp : UInt32
    major_version : UInt16
    minor_version : UInt16
    global_flags_clear : UInt32
    global_flags_set : UInt32
    critical_section_default_timeout : UInt32
    de_commit_free_block_threshold : UInt64
    de_commit_total_free_threshold : UInt64
    lock_prefix_table : UInt64
    maximum_allocation_size : UInt64
    virtual_memory_threshold : UInt64
    process_affinity_mask : UInt64
    process_heap_flags : UInt32
    csd_version : UInt16
    dependent_load_flags : UInt16
    edit_list : UInt64
    security_cookie : UInt64
    se_handler_table : UInt64
    se_handler_count : UInt64
    guard_cf_check_function_pointer : UInt64
    guard_cf_dispatch_function_pointer : UInt64
    guard_cf_function_table : UInt64
    guard_cf_function_count : UInt64
    guard_flags : UInt32
    code_integrity : IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    guard_address_taken_iat_entry_table : UInt64
    guard_address_taken_iat_entry_count : UInt64
    guard_long_jump_target_table : UInt64
    guard_long_jump_target_count : UInt64
    dynamic_value_reloc_table : UInt64
    chpe_metadata_pointer : UInt64
    guard_rf_failure_routine : UInt64
    guard_rf_failure_routine_function_pointer : UInt64
    dynamic_value_reloc_table_offset : UInt32
    dynamic_value_reloc_table_section : UInt16
    reserved2 : UInt16
    guard_rf_verify_stack_pointer_function_pointer : UInt64
    hot_patch_table_offset : UInt32
    reserved3 : UInt32
    enclave_configuration_pointer : UInt64
    volatile_metadata_pointer : UInt64
    guard_eh_continuation_table : UInt64
    guard_eh_continuation_count : UInt64
    guard_xfg_check_function_pointer : UInt64
    guard_xfg_dispatch_function_pointer : UInt64
    guard_xfg_table_dispatch_function_pointer : UInt64
    cast_guard_os_determined_failure_mode : UInt64
  end
  struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
    begin_address : UInt32
    anonymous : IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union
  end
  struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct IMAGE_RUNTIME_FUNCTION_ENTRY
    begin_address : UInt32
    end_address : UInt32
    anonymous : IMAGE_RUNTIME_FUNCTION_ENTRY_Anonymous_e__Union
  end
  struct IMAGE_DEBUG_DIRECTORY
    characteristics : UInt32
    time_date_stamp : UInt32
    major_version : UInt16
    minor_version : UInt16
    type : IMAGE_DEBUG_TYPE
    size_of_data : UInt32
    address_of_raw_data : UInt32
    pointer_to_raw_data : UInt32
  end
  struct IMAGE_COFF_SYMBOLS_HEADER
    number_of_symbols : UInt32
    lva_to_first_symbol : UInt32
    number_of_linenumbers : UInt32
    lva_to_first_linenumber : UInt32
    rva_to_first_byte_of_code : UInt32
    rva_to_last_byte_of_code : UInt32
    rva_to_first_byte_of_data : UInt32
    rva_to_last_byte_of_data : UInt32
  end
  struct FPO_DATA
    ul_off_start : UInt32
    cb_proc_size : UInt32
    cdw_locals : UInt32
    cdw_params : UInt16
    _bitfield : UInt16
  end
  struct IMAGE_FUNCTION_ENTRY
    starting_address : UInt32
    ending_address : UInt32
    end_of_prologue : UInt32
  end
  struct IMAGE_FUNCTION_ENTRY64
    starting_address : UInt64
    ending_address : UInt64
    anonymous : IMAGE_FUNCTION_ENTRY64_Anonymous_e__Union
  end
  struct IMAGE_COR20_HEADER
    cb : UInt32
    major_runtime_version : UInt16
    minor_runtime_version : UInt16
    meta_data : IMAGE_DATA_DIRECTORY
    flags : UInt32
    anonymous : IMAGE_COR20_HEADER_Anonymous_e__Union
    resources : IMAGE_DATA_DIRECTORY
    strong_name_signature : IMAGE_DATA_DIRECTORY
    code_manager_table : IMAGE_DATA_DIRECTORY
    v_table_fixups : IMAGE_DATA_DIRECTORY
    export_address_table_jumps : IMAGE_DATA_DIRECTORY
    managed_native_header : IMAGE_DATA_DIRECTORY
  end
  struct UNWIND_HISTORY_TABLE_ENTRY
    image_base : LibC::UINT_PTR
    function_entry : IMAGE_RUNTIME_FUNCTION_ENTRY*
  end
  struct UNWIND_HISTORY_TABLE
    count : UInt32
    local_hint : UInt8
    global_hint : UInt8
    search : UInt8
    once : UInt8
    low_address : LibC::UINT_PTR
    high_address : LibC::UINT_PTR
    entry : UNWIND_HISTORY_TABLE_ENTRY[12]*
  end
  struct WAITCHAIN_NODE_INFO
    object_type : WCT_OBJECT_TYPE
    object_status : WCT_OBJECT_STATUS
    anonymous : WAITCHAIN_NODE_INFO_Anonymous_e__Union
  end
  struct WAITCHAIN_NODE_INFO_Anonymous_e__Union_LockObject_e__Struct
    object_name : Char[128]*
    timeout : LARGE_INTEGER
    alertable : LibC::BOOL
  end
  struct WAITCHAIN_NODE_INFO_Anonymous_e__Union_ThreadObject_e__Struct
    process_id : UInt32
    thread_id : UInt32
    wait_time : UInt32
    context_switches : UInt32
  end
  struct MINIDUMP_LOCATION_DESCRIPTOR
    data_size : UInt32
    rva : UInt32
  end
  struct MINIDUMP_LOCATION_DESCRIPTOR64
    data_size : UInt64
    rva : UInt64
  end
  struct MINIDUMP_MEMORY_DESCRIPTOR
    start_of_memory_range : UInt64
    memory : MINIDUMP_LOCATION_DESCRIPTOR
  end
  struct MINIDUMP_MEMORY_DESCRIPTOR64
    start_of_memory_range : UInt64
    data_size : UInt64
  end
  struct MINIDUMP_HEADER
    signature : UInt32
    version : UInt32
    number_of_streams : UInt32
    stream_directory_rva : UInt32
    check_sum : UInt32
    anonymous : MINIDUMP_HEADER_Anonymous_e__Union
    flags : UInt64
  end
  struct MINIDUMP_DIRECTORY
    stream_type : UInt32
    location : MINIDUMP_LOCATION_DESCRIPTOR
  end
  struct MINIDUMP_STRING
    length : UInt32
    buffer : Char[0]*
  end
  struct CPU_INFORMATION_X86CpuInfo_e__Struct
    vendor_id : UInt32[3]*
    version_information : UInt32
    feature_information : UInt32
    amd_extended_cpu_features : UInt32
  end
  struct CPU_INFORMATION_OtherCpuInfo_e__Struct
    processor_features : UInt64[2]*
  end
  struct MINIDUMP_SYSTEM_INFO
    processor_architecture : PROCESSOR_ARCHITECTURE
    processor_level : UInt16
    processor_revision : UInt16
    anonymous1 : MINIDUMP_SYSTEM_INFO_Anonymous1_e__Union
    major_version : UInt32
    minor_version : UInt32
    build_number : UInt32
    platform_id : VER_PLATFORM
    csd_version_rva : UInt32
    anonymous2 : MINIDUMP_SYSTEM_INFO_Anonymous2_e__Union
    cpu : CPU_INFORMATION
  end
  struct MINIDUMP_SYSTEM_INFO_Anonymous2_e__Union_Anonymous_e__Struct
    suite_mask : UInt16
    reserved2 : UInt16
  end
  struct MINIDUMP_SYSTEM_INFO_Anonymous1_e__Union_Anonymous_e__Struct
    number_of_processors : UInt8
    product_type : UInt8
  end
  struct MINIDUMP_THREAD
    thread_id : UInt32
    suspend_count : UInt32
    priority_class : UInt32
    priority : UInt32
    teb : UInt64
    stack : MINIDUMP_MEMORY_DESCRIPTOR
    thread_context : MINIDUMP_LOCATION_DESCRIPTOR
  end
  struct MINIDUMP_THREAD_LIST
    number_of_threads : UInt32
    threads : MINIDUMP_THREAD[0]*
  end
  struct MINIDUMP_THREAD_EX
    thread_id : UInt32
    suspend_count : UInt32
    priority_class : UInt32
    priority : UInt32
    teb : UInt64
    stack : MINIDUMP_MEMORY_DESCRIPTOR
    thread_context : MINIDUMP_LOCATION_DESCRIPTOR
    backing_store : MINIDUMP_MEMORY_DESCRIPTOR
  end
  struct MINIDUMP_THREAD_EX_LIST
    number_of_threads : UInt32
    threads : MINIDUMP_THREAD_EX[0]*
  end
  struct MINIDUMP_EXCEPTION
    exception_code : UInt32
    exception_flags : UInt32
    exception_record : UInt64
    exception_address : UInt64
    number_parameters : UInt32
    __unused_alignment : UInt32
    exception_information : UInt64[15]*
  end
  struct MINIDUMP_EXCEPTION_STREAM
    thread_id : UInt32
    __alignment : UInt32
    exception_record : MINIDUMP_EXCEPTION
    thread_context : MINIDUMP_LOCATION_DESCRIPTOR
  end
  struct MINIDUMP_MODULE
    base_of_image : UInt64
    size_of_image : UInt32
    check_sum : UInt32
    time_date_stamp : UInt32
    module_name_rva : UInt32
    version_info : VS_FIXEDFILEINFO
    cv_record : MINIDUMP_LOCATION_DESCRIPTOR
    misc_record : MINIDUMP_LOCATION_DESCRIPTOR
    reserved0 : UInt64
    reserved1 : UInt64
  end
  struct MINIDUMP_MODULE_LIST
    number_of_modules : UInt32
    modules : MINIDUMP_MODULE[0]*
  end
  struct MINIDUMP_MEMORY_LIST
    number_of_memory_ranges : UInt32
    memory_ranges : MINIDUMP_MEMORY_DESCRIPTOR[0]*
  end
  struct MINIDUMP_MEMORY64_LIST
    number_of_memory_ranges : UInt64
    base_rva : UInt64
    memory_ranges : MINIDUMP_MEMORY_DESCRIPTOR64[0]*
  end
  struct MINIDUMP_EXCEPTION_INFORMATION
    thread_id : UInt32
    exception_pointers : EXCEPTION_POINTERS*
    client_pointers : LibC::BOOL
  end
  struct MINIDUMP_EXCEPTION_INFORMATION64
    thread_id : UInt32
    exception_record : UInt64
    context_record : UInt64
    client_pointers : LibC::BOOL
  end
  struct MINIDUMP_HANDLE_OBJECT_INFORMATION
    next_info_rva : UInt32
    info_type : UInt32
    size_of_info : UInt32
  end
  struct MINIDUMP_HANDLE_DESCRIPTOR
    handle : UInt64
    type_name_rva : UInt32
    object_name_rva : UInt32
    attributes : UInt32
    granted_access : UInt32
    handle_count : UInt32
    pointer_count : UInt32
  end
  struct MINIDUMP_HANDLE_DESCRIPTOR_2
    handle : UInt64
    type_name_rva : UInt32
    object_name_rva : UInt32
    attributes : UInt32
    granted_access : UInt32
    handle_count : UInt32
    pointer_count : UInt32
    object_info_rva : UInt32
    reserved0 : UInt32
  end
  struct MINIDUMP_HANDLE_DATA_STREAM
    size_of_header : UInt32
    size_of_descriptor : UInt32
    number_of_descriptors : UInt32
    reserved : UInt32
  end
  struct MINIDUMP_HANDLE_OPERATION_LIST
    size_of_header : UInt32
    size_of_entry : UInt32
    number_of_entries : UInt32
    reserved : UInt32
  end
  struct MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
    minimum_address : UInt64
    maximum_address : UInt64
    base_address : UInt64
    entry_count : UInt32
    size_of_align_pad : UInt32
  end
  struct MINIDUMP_FUNCTION_TABLE_STREAM
    size_of_header : UInt32
    size_of_descriptor : UInt32
    size_of_native_descriptor : UInt32
    size_of_function_entry : UInt32
    number_of_descriptors : UInt32
    size_of_align_pad : UInt32
  end
  struct MINIDUMP_UNLOADED_MODULE
    base_of_image : UInt64
    size_of_image : UInt32
    check_sum : UInt32
    time_date_stamp : UInt32
    module_name_rva : UInt32
  end
  struct MINIDUMP_UNLOADED_MODULE_LIST
    size_of_header : UInt32
    size_of_entry : UInt32
    number_of_entries : UInt32
  end
  struct XSTATE_CONFIG_FEATURE_MSC_INFO
    size_of_info : UInt32
    context_size : UInt32
    enabled_features : UInt64
    features : XSTATE_FEATURE[64]*
  end
  struct MINIDUMP_MISC_INFO
    size_of_info : UInt32
    flags1 : MINIDUMP_MISC_INFO_FLAGS
    process_id : UInt32
    process_create_time : UInt32
    process_user_time : UInt32
    process_kernel_time : UInt32
  end
  struct MINIDUMP_MISC_INFO_2
    size_of_info : UInt32
    flags1 : UInt32
    process_id : UInt32
    process_create_time : UInt32
    process_user_time : UInt32
    process_kernel_time : UInt32
    processor_max_mhz : UInt32
    processor_current_mhz : UInt32
    processor_mhz_limit : UInt32
    processor_max_idle_state : UInt32
    processor_current_idle_state : UInt32
  end
  struct MINIDUMP_MISC_INFO_3
    size_of_info : UInt32
    flags1 : UInt32
    process_id : UInt32
    process_create_time : UInt32
    process_user_time : UInt32
    process_kernel_time : UInt32
    processor_max_mhz : UInt32
    processor_current_mhz : UInt32
    processor_mhz_limit : UInt32
    processor_max_idle_state : UInt32
    processor_current_idle_state : UInt32
    process_integrity_level : UInt32
    process_execute_flags : UInt32
    protected_process : UInt32
    time_zone_id : UInt32
    time_zone : TIME_ZONE_INFORMATION
  end
  struct MINIDUMP_MISC_INFO_4
    size_of_info : UInt32
    flags1 : UInt32
    process_id : UInt32
    process_create_time : UInt32
    process_user_time : UInt32
    process_kernel_time : UInt32
    processor_max_mhz : UInt32
    processor_current_mhz : UInt32
    processor_mhz_limit : UInt32
    processor_max_idle_state : UInt32
    processor_current_idle_state : UInt32
    process_integrity_level : UInt32
    process_execute_flags : UInt32
    protected_process : UInt32
    time_zone_id : UInt32
    time_zone : TIME_ZONE_INFORMATION
    build_string : Char[260]*
    dbg_bld_str : Char[40]*
  end
  struct MINIDUMP_MISC_INFO_5
    size_of_info : UInt32
    flags1 : UInt32
    process_id : UInt32
    process_create_time : UInt32
    process_user_time : UInt32
    process_kernel_time : UInt32
    processor_max_mhz : UInt32
    processor_current_mhz : UInt32
    processor_mhz_limit : UInt32
    processor_max_idle_state : UInt32
    processor_current_idle_state : UInt32
    process_integrity_level : UInt32
    process_execute_flags : UInt32
    protected_process : UInt32
    time_zone_id : UInt32
    time_zone : TIME_ZONE_INFORMATION
    build_string : Char[260]*
    dbg_bld_str : Char[40]*
    x_state_data : XSTATE_CONFIG_FEATURE_MSC_INFO
    process_cookie : UInt32
  end
  struct MINIDUMP_MEMORY_INFO
    base_address : UInt64
    allocation_base : UInt64
    allocation_protect : UInt32
    __alignment1 : UInt32
    region_size : UInt64
    state : VIRTUAL_ALLOCATION_TYPE
    protect : UInt32
    type : UInt32
    __alignment2 : UInt32
  end
  struct MINIDUMP_MEMORY_INFO_LIST
    size_of_header : UInt32
    size_of_entry : UInt32
    number_of_entries : UInt64
  end
  struct MINIDUMP_THREAD_NAME
    thread_id : UInt32
    rva_of_thread_name : UInt64
  end
  struct MINIDUMP_THREAD_NAME_LIST
    number_of_thread_names : UInt32
    thread_names : MINIDUMP_THREAD_NAME[0]*
  end
  struct MINIDUMP_THREAD_INFO
    thread_id : UInt32
    dump_flags : MINIDUMP_THREAD_INFO_DUMP_FLAGS
    dump_error : UInt32
    exit_status : UInt32
    create_time : UInt64
    exit_time : UInt64
    kernel_time : UInt64
    user_time : UInt64
    start_address : UInt64
    affinity : UInt64
  end
  struct MINIDUMP_THREAD_INFO_LIST
    size_of_header : UInt32
    size_of_entry : UInt32
    number_of_entries : UInt32
  end
  struct MINIDUMP_TOKEN_INFO_HEADER
    token_size : UInt32
    token_id : UInt32
    token_handle : UInt64
  end
  struct MINIDUMP_TOKEN_INFO_LIST
    token_list_size : UInt32
    token_list_entries : UInt32
    list_header_size : UInt32
    element_header_size : UInt32
  end
  struct MINIDUMP_SYSTEM_BASIC_INFORMATION
    timer_resolution : UInt32
    page_size : UInt32
    number_of_physical_pages : UInt32
    lowest_physical_page_number : UInt32
    highest_physical_page_number : UInt32
    allocation_granularity : UInt32
    minimum_user_mode_address : UInt64
    maximum_user_mode_address : UInt64
    active_processors_affinity_mask : UInt64
    number_of_processors : UInt32
  end
  struct MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    current_size : UInt64
    peak_size : UInt64
    page_fault_count : UInt32
    minimum_working_set : UInt64
    maximum_working_set : UInt64
    current_size_including_transition_in_pages : UInt64
    peak_size_including_transition_in_pages : UInt64
    transition_re_purpose_count : UInt32
    flags : UInt32
  end
  struct MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    available_pages : UInt64
    committed_pages : UInt64
    commit_limit : UInt64
    peak_commitment : UInt64
  end
  struct MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
    idle_process_time : UInt64
    io_read_transfer_count : UInt64
    io_write_transfer_count : UInt64
    io_other_transfer_count : UInt64
    io_read_operation_count : UInt32
    io_write_operation_count : UInt32
    io_other_operation_count : UInt32
    available_pages : UInt32
    committed_pages : UInt32
    commit_limit : UInt32
    peak_commitment : UInt32
    page_fault_count : UInt32
    copy_on_write_count : UInt32
    transition_count : UInt32
    cache_transition_count : UInt32
    demand_zero_count : UInt32
    page_read_count : UInt32
    page_read_io_count : UInt32
    cache_read_count : UInt32
    cache_io_count : UInt32
    dirty_pages_write_count : UInt32
    dirty_write_io_count : UInt32
    mapped_pages_write_count : UInt32
    mapped_write_io_count : UInt32
    paged_pool_pages : UInt32
    non_paged_pool_pages : UInt32
    paged_pool_allocs : UInt32
    paged_pool_frees : UInt32
    non_paged_pool_allocs : UInt32
    non_paged_pool_frees : UInt32
    free_system_ptes : UInt32
    resident_system_code_page : UInt32
    total_system_driver_pages : UInt32
    total_system_code_pages : UInt32
    non_paged_pool_lookaside_hits : UInt32
    paged_pool_lookaside_hits : UInt32
    available_paged_pool_pages : UInt32
    resident_system_cache_page : UInt32
    resident_paged_pool_page : UInt32
    resident_system_driver_page : UInt32
    cc_fast_read_no_wait : UInt32
    cc_fast_read_wait : UInt32
    cc_fast_read_resource_miss : UInt32
    cc_fast_read_not_possible : UInt32
    cc_fast_mdl_read_no_wait : UInt32
    cc_fast_mdl_read_wait : UInt32
    cc_fast_mdl_read_resource_miss : UInt32
    cc_fast_mdl_read_not_possible : UInt32
    cc_map_data_no_wait : UInt32
    cc_map_data_wait : UInt32
    cc_map_data_no_wait_miss : UInt32
    cc_map_data_wait_miss : UInt32
    cc_pin_mapped_data_count : UInt32
    cc_pin_read_no_wait : UInt32
    cc_pin_read_wait : UInt32
    cc_pin_read_no_wait_miss : UInt32
    cc_pin_read_wait_miss : UInt32
    cc_copy_read_no_wait : UInt32
    cc_copy_read_wait : UInt32
    cc_copy_read_no_wait_miss : UInt32
    cc_copy_read_wait_miss : UInt32
    cc_mdl_read_no_wait : UInt32
    cc_mdl_read_wait : UInt32
    cc_mdl_read_no_wait_miss : UInt32
    cc_mdl_read_wait_miss : UInt32
    cc_read_ahead_ios : UInt32
    cc_lazy_write_ios : UInt32
    cc_lazy_write_pages : UInt32
    cc_data_flushes : UInt32
    cc_data_pages : UInt32
    context_switches : UInt32
    first_level_tb_fills : UInt32
    second_level_tb_fills : UInt32
    system_calls : UInt32
    cc_total_dirty_pages : UInt64
    cc_dirty_page_threshold : UInt64
    resident_available_pages : Int64
    shared_committed_pages : UInt64
  end
  struct MINIDUMP_SYSTEM_MEMORY_INFO_1
    revision : UInt16
    flags : UInt16
    basic_info : MINIDUMP_SYSTEM_BASIC_INFORMATION
    file_cache_info : MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    basic_perf_info : MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    perf_info : MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
  end
  struct MINIDUMP_PROCESS_VM_COUNTERS_1
    revision : UInt16
    page_fault_count : UInt32
    peak_working_set_size : UInt64
    working_set_size : UInt64
    quota_peak_paged_pool_usage : UInt64
    quota_paged_pool_usage : UInt64
    quota_peak_non_paged_pool_usage : UInt64
    quota_non_paged_pool_usage : UInt64
    pagefile_usage : UInt64
    peak_pagefile_usage : UInt64
    private_usage : UInt64
  end
  struct MINIDUMP_PROCESS_VM_COUNTERS_2
    revision : UInt16
    flags : UInt16
    page_fault_count : UInt32
    peak_working_set_size : UInt64
    working_set_size : UInt64
    quota_peak_paged_pool_usage : UInt64
    quota_paged_pool_usage : UInt64
    quota_peak_non_paged_pool_usage : UInt64
    quota_non_paged_pool_usage : UInt64
    pagefile_usage : UInt64
    peak_pagefile_usage : UInt64
    peak_virtual_size : UInt64
    virtual_size : UInt64
    private_usage : UInt64
    private_working_set_size : UInt64
    shared_commit_usage : UInt64
    job_shared_commit_usage : UInt64
    job_private_commit_usage : UInt64
    job_peak_private_commit_usage : UInt64
    job_private_commit_limit : UInt64
    job_total_commit_limit : UInt64
  end
  struct MINIDUMP_USER_RECORD
    type : UInt32
    memory : MINIDUMP_LOCATION_DESCRIPTOR
  end
  struct MINIDUMP_USER_STREAM
    type : UInt32
    buffer_size : UInt32
    buffer : Void*
  end
  struct MINIDUMP_USER_STREAM_INFORMATION
    user_stream_count : UInt32
    user_stream_array : MINIDUMP_USER_STREAM*
  end
  struct MINIDUMP_THREAD_CALLBACK
    thread_id : UInt32
    thread_handle : LibC::HANDLE
    context : CONTEXT
    size_of_context : UInt32
    stack_base : UInt64
    stack_end : UInt64
  end
  struct MINIDUMP_THREAD_EX_CALLBACK
    thread_id : UInt32
    thread_handle : LibC::HANDLE
    context : CONTEXT
    size_of_context : UInt32
    stack_base : UInt64
    stack_end : UInt64
    backing_store_base : UInt64
    backing_store_end : UInt64
  end
  struct MINIDUMP_INCLUDE_THREAD_CALLBACK
    thread_id : UInt32
  end
  struct MINIDUMP_MODULE_CALLBACK
    full_path : LibC::LPWSTR
    base_of_image : UInt64
    size_of_image : UInt32
    check_sum : UInt32
    time_date_stamp : UInt32
    version_info : VS_FIXEDFILEINFO
    cv_record : Void*
    size_of_cv_record : UInt32
    misc_record : Void*
    size_of_misc_record : UInt32
  end
  struct MINIDUMP_INCLUDE_MODULE_CALLBACK
    base_of_image : UInt64
  end
  struct MINIDUMP_IO_CALLBACK
    handle : LibC::HANDLE
    offset : UInt64
    buffer : Void*
    buffer_bytes : UInt32
  end
  struct MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    offset : UInt64
    bytes : UInt32
    failure_status : HRESULT
  end
  struct MINIDUMP_VM_QUERY_CALLBACK
    offset : UInt64
  end
  struct MINIDUMP_VM_PRE_READ_CALLBACK
    offset : UInt64
    buffer : Void*
    size : UInt32
  end
  struct MINIDUMP_VM_POST_READ_CALLBACK
    offset : UInt64
    buffer : Void*
    size : UInt32
    completed : UInt32
    status : HRESULT
  end
  struct MINIDUMP_CALLBACK_INPUT
    process_id : UInt32
    process_handle : LibC::HANDLE
    callback_type : UInt32
    anonymous : MINIDUMP_CALLBACK_INPUT_Anonymous_e__Union
  end
  struct MINIDUMP_CALLBACK_OUTPUT
    anonymous : MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union
  end
  struct MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous4_e__Struct
    vm_query_status : HRESULT
    vm_query_result : MINIDUMP_MEMORY_INFO
  end
  struct MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous2_e__Struct
    check_cancel : LibC::BOOL
    cancel : LibC::BOOL
  end
  struct MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous5_e__Struct
    vm_read_status : HRESULT
    vm_read_bytes_completed : UInt32
  end
  struct MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous1_e__Struct
    memory_base : UInt64
    memory_size : UInt32
  end
  struct MINIDUMP_CALLBACK_OUTPUT_Anonymous_e__Union_Anonymous3_e__Struct
    vm_region : MINIDUMP_MEMORY_INFO
    continue : LibC::BOOL
  end
  struct MINIDUMP_CALLBACK_INFORMATION
    callback_routine : MINIDUMP_CALLBACK_ROUTINE
    callback_param : Void*
  end
  struct DebugPropertyInfo
    m_dw_valid_fields : UInt32
    m_bstr_name : UInt8*
    m_bstr_type : UInt8*
    m_bstr_value : UInt8*
    m_bstr_full_name : UInt8*
    m_dw_attrib : UInt32
    m_p_debug_prop : IDebugProperty
  end
  struct ExtendedDebugPropertyInfo
    dw_valid_fields : UInt32
    psz_name : LibC::LPWSTR
    psz_type : LibC::LPWSTR
    psz_value : LibC::LPWSTR
    psz_full_name : LibC::LPWSTR
    dw_attrib : UInt32
    p_debug_prop : IDebugProperty
    n_dispid : UInt32
    n_type : UInt32
    var_value : VARIANT
    plb_value : ILockBytes
    p_debug_ext_prop : IDebugExtendedProperty
  end
  struct DebugStackFrameDescriptor
    pdsf : IDebugStackFrame
    dw_min : UInt32
    dw_lim : UInt32
    f_final : LibC::BOOL
    punk_final : IUnknown
  end
  struct DebugStackFrameDescriptor64
    pdsf : IDebugStackFrame
    dw_min : UInt64
    dw_lim : UInt64
    f_final : LibC::BOOL
    punk_final : IUnknown
  end
  struct PROFILER_HEAP_OBJECT_SCOPE_LIST
    count : UInt32
    scopes : LibC::UINT_PTR[0]*
  end
  struct PROFILER_PROPERTY_TYPE_SUBSTRING_INFO
    length : UInt32
    value : LibC::LPWSTR
  end
  struct PROFILER_HEAP_OBJECT_RELATIONSHIP
    relationship_id : UInt32
    relationship_info : PROFILER_RELATIONSHIP_INFO
    anonymous : PROFILER_HEAP_OBJECT_RELATIONSHIP_Anonymous_e__Union
  end
  struct PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST
    count : UInt32
    elements : PROFILER_HEAP_OBJECT_RELATIONSHIP[0]*
  end
  struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO
    info_type : PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE
    anonymous : PROFILER_HEAP_OBJECT_OPTIONAL_INFO_Anonymous_e__Union
  end
  struct PROFILER_HEAP_OBJECT
    size : UInt32
    anonymous : PROFILER_HEAP_OBJECT_Anonymous_e__Union
    type_name_id : UInt32
    flags : UInt32
    unused : UInt16
    optional_info_count : UInt16
  end
  struct PROFILER_HEAP_SUMMARY
    version : PROFILER_HEAP_SUMMARY_VERSION
    total_heap_size : UInt32
  end
  struct LOADED_IMAGE
    module_name : PSTR
    h_file : LibC::HANDLE
    mapped_address : UInt8*
    file_header : IMAGE_NT_HEADERS64*
    last_rva_section : IMAGE_SECTION_HEADER*
    number_of_sections : UInt32
    sections : IMAGE_SECTION_HEADER*
    characteristics : IMAGE_FILE_CHARACTERISTICS2
    f_system_image : BOOLEAN
    f_dos_image : BOOLEAN
    f_read_only : BOOLEAN
    version : UInt8
    links : LIST_ENTRY
    size_of_image : UInt32
  end
  struct MODLOAD_DATA
    ssize : UInt32
    ssig : MODLOAD_DATA_TYPE
    data : Void*
    size : UInt32
    flags : UInt32
  end
  struct MODLOAD_CVMISC
    o_cv : UInt32
    c_cv : LibC::UINT_PTR
    o_misc : UInt32
    c_misc : LibC::UINT_PTR
    dt_image : UInt32
    c_image : UInt32
  end
  struct MODLOAD_PDBGUID_PDBAGE
    pdb_guid : Guid
    pdb_age : UInt32
  end
  struct ADDRESS64
    offset : UInt64
    segment : UInt16
    mode : ADDRESS_MODE
  end
  struct KDHELP64
    thread : UInt64
    th_callback_stack : UInt32
    th_callback_b_store : UInt32
    next_callback : UInt32
    frame_pointer : UInt32
    ki_call_user_mode : UInt64
    ke_user_callback_dispatcher : UInt64
    system_range_start : UInt64
    ki_user_exception_dispatcher : UInt64
    stack_base : UInt64
    stack_limit : UInt64
    build_version : UInt32
    retpoline_stub_function_table_size : UInt32
    retpoline_stub_function_table : UInt64
    retpoline_stub_offset : UInt32
    retpoline_stub_size : UInt32
    reserved0 : UInt64[2]*
  end
  struct STACKFRAME64
    addr_pc : ADDRESS64
    addr_return : ADDRESS64
    addr_frame : ADDRESS64
    addr_stack : ADDRESS64
    addr_b_store : ADDRESS64
    func_table_entry : Void*
    params : UInt64[4]*
    far : LibC::BOOL
    virtual : LibC::BOOL
    reserved : UInt64[3]*
    kd_help : KDHELP64
  end
  struct STACKFRAME_EX
    addr_pc : ADDRESS64
    addr_return : ADDRESS64
    addr_frame : ADDRESS64
    addr_stack : ADDRESS64
    addr_b_store : ADDRESS64
    func_table_entry : Void*
    params : UInt64[4]*
    far : LibC::BOOL
    virtual : LibC::BOOL
    reserved : UInt64[3]*
    kd_help : KDHELP64
    stack_frame_size : UInt32
    inline_frame_context : UInt32
  end
  struct API_VERSION
    major_version : UInt16
    minor_version : UInt16
    revision : UInt16
    reserved : UInt16
  end
  struct IMAGEHLP_SYMBOL64
    size_of_struct : UInt32
    address : UInt64
    size : UInt32
    flags : UInt32
    max_name_length : UInt32
    name : CHAR[0]*
  end
  struct IMAGEHLP_SYMBOL64_PACKAGE
    sym : IMAGEHLP_SYMBOL64
    name : CHAR[2001]*
  end
  struct IMAGEHLP_SYMBOLW64
    size_of_struct : UInt32
    address : UInt64
    size : UInt32
    flags : UInt32
    max_name_length : UInt32
    name : Char[0]*
  end
  struct IMAGEHLP_SYMBOLW64_PACKAGE
    sym : IMAGEHLP_SYMBOLW64
    name : Char[2001]*
  end
  struct IMAGEHLP_MODULE64
    size_of_struct : UInt32
    base_of_image : UInt64
    image_size : UInt32
    time_date_stamp : UInt32
    check_sum : UInt32
    num_syms : UInt32
    sym_type : SYM_TYPE
    module_name : CHAR[32]*
    image_name : CHAR[256]*
    loaded_image_name : CHAR[256]*
    loaded_pdb_name : CHAR[256]*
    cv_sig : UInt32
    cv_data : CHAR[780]*
    pdb_sig : UInt32
    pdb_sig70 : Guid
    pdb_age : UInt32
    pdb_unmatched : LibC::BOOL
    dbg_unmatched : LibC::BOOL
    line_numbers : LibC::BOOL
    global_symbols : LibC::BOOL
    type_info : LibC::BOOL
    source_indexed : LibC::BOOL
    publics : LibC::BOOL
    machine_type : UInt32
    reserved : UInt32
  end
  struct IMAGEHLP_MODULE64_EX
    module_ : IMAGEHLP_MODULE64
    region_flags : UInt32
  end
  struct IMAGEHLP_MODULEW64
    size_of_struct : UInt32
    base_of_image : UInt64
    image_size : UInt32
    time_date_stamp : UInt32
    check_sum : UInt32
    num_syms : UInt32
    sym_type : SYM_TYPE
    module_name : Char[32]*
    image_name : Char[256]*
    loaded_image_name : Char[256]*
    loaded_pdb_name : Char[256]*
    cv_sig : UInt32
    cv_data : Char[780]*
    pdb_sig : UInt32
    pdb_sig70 : Guid
    pdb_age : UInt32
    pdb_unmatched : LibC::BOOL
    dbg_unmatched : LibC::BOOL
    line_numbers : LibC::BOOL
    global_symbols : LibC::BOOL
    type_info : LibC::BOOL
    source_indexed : LibC::BOOL
    publics : LibC::BOOL
    machine_type : UInt32
    reserved : UInt32
  end
  struct IMAGEHLP_MODULEW64_EX
    module_ : IMAGEHLP_MODULEW64
    region_flags : UInt32
  end
  struct IMAGEHLP_LINE64
    size_of_struct : UInt32
    key : Void*
    line_number : UInt32
    file_name : PSTR
    address : UInt64
  end
  struct IMAGEHLP_LINEW64
    size_of_struct : UInt32
    key : Void*
    line_number : UInt32
    file_name : LibC::LPWSTR
    address : UInt64
  end
  struct SOURCEFILE
    mod_base : UInt64
    file_name : PSTR
  end
  struct SOURCEFILEW
    mod_base : UInt64
    file_name : LibC::LPWSTR
  end
  struct IMAGEHLP_CBA_READ_MEMORY
    addr : UInt64
    buf : Void*
    bytes : UInt32
    bytesread : UInt32*
  end
  struct IMAGEHLP_CBA_EVENT
    severity : IMAGEHLP_CBA_EVENT_SEVERITY
    code : UInt32
    desc : PSTR
    object : Void*
  end
  struct IMAGEHLP_CBA_EVENTW
    severity : IMAGEHLP_CBA_EVENT_SEVERITY
    code : UInt32
    desc : LibC::LPWSTR
    object : Void*
  end
  struct IMAGEHLP_DEFERRED_SYMBOL_LOAD64
    size_of_struct : UInt32
    base_of_image : UInt64
    check_sum : UInt32
    time_date_stamp : UInt32
    file_name : CHAR[260]*
    reparse : BOOLEAN
    h_file : LibC::HANDLE
    flags : UInt32
  end
  struct IMAGEHLP_DEFERRED_SYMBOL_LOADW64
    size_of_struct : UInt32
    base_of_image : UInt64
    check_sum : UInt32
    time_date_stamp : UInt32
    file_name : Char[261]*
    reparse : BOOLEAN
    h_file : LibC::HANDLE
    flags : UInt32
  end
  struct IMAGEHLP_DUPLICATE_SYMBOL64
    size_of_struct : UInt32
    number_of_dups : UInt32
    symbol : IMAGEHLP_SYMBOL64*
    selected_symbol : UInt32
  end
  struct IMAGEHLP_JIT_SYMBOL_MAP
    size_of_struct : UInt32
    address : UInt64
    base_of_image : UInt64
  end
  struct OMAP
    rva : UInt32
    rva_to : UInt32
  end
  struct SRCCODEINFO
    size_of_struct : UInt32
    key : Void*
    mod_base : UInt64
    obj : CHAR[261]*
    file_name : CHAR[261]*
    line_number : UInt32
    address : UInt64
  end
  struct SRCCODEINFOW
    size_of_struct : UInt32
    key : Void*
    mod_base : UInt64
    obj : Char[261]*
    file_name : Char[261]*
    line_number : UInt32
    address : UInt64
  end
  struct IMAGEHLP_SYMBOL_SRC
    sizeofstruct : UInt32
    type : UInt32
    file : CHAR[260]*
  end
  struct MODULE_TYPE_INFO
    data_length : UInt16
    leaf : UInt16
    data : UInt8[0]*
  end
  struct SYMBOL_INFO
    size_of_struct : UInt32
    type_index : UInt32
    reserved : UInt64[2]*
    index : UInt32
    size : UInt32
    mod_base : UInt64
    flags : SYMBOL_INFO_FLAGS
    value : UInt64
    address : UInt64
    register : UInt32
    scope : UInt32
    tag : UInt32
    name_len : UInt32
    max_name_len : UInt32
    name : CHAR[0]*
  end
  struct SYMBOL_INFO_PACKAGE
    si : SYMBOL_INFO
    name : CHAR[2001]*
  end
  struct SYMBOL_INFOW
    size_of_struct : UInt32
    type_index : UInt32
    reserved : UInt64[2]*
    index : UInt32
    size : UInt32
    mod_base : UInt64
    flags : SYMBOL_INFO_FLAGS
    value : UInt64
    address : UInt64
    register : UInt32
    scope : UInt32
    tag : UInt32
    name_len : UInt32
    max_name_len : UInt32
    name : Char[0]*
  end
  struct SYMBOL_INFO_PACKAGEW
    si : SYMBOL_INFOW
    name : Char[2001]*
  end
  struct IMAGEHLP_STACK_FRAME
    instruction_offset : UInt64
    return_offset : UInt64
    frame_offset : UInt64
    stack_offset : UInt64
    backing_store_offset : UInt64
    func_table_entry : UInt64
    params : UInt64[4]*
    reserved : UInt64[5]*
    virtual : LibC::BOOL
    reserved2 : UInt32
  end
  struct TI_FINDCHILDREN_PARAMS
    count : UInt32
    start : UInt32
    child_id : UInt32[0]*
  end
  struct IMAGEHLP_GET_TYPE_INFO_PARAMS
    size_of_struct : UInt32
    flags : IMAGEHLP_GET_TYPE_INFO_FLAGS
    num_ids : UInt32
    type_ids : UInt32*
    tag_filter : UInt64
    num_reqs : UInt32
    req_kinds : IMAGEHLP_SYMBOL_TYPE_INFO*
    req_offsets : LibC::UINT_PTR*
    req_sizes : UInt32*
    req_stride : LibC::UINT_PTR
    buffer_size : LibC::UINT_PTR
    buffer : Void*
    entries_matched : UInt32
    entries_filled : UInt32
    tags_found : UInt64
    all_reqs_valid : UInt64
    num_reqs_valid : UInt32
    reqs_valid : UInt64*
  end
  struct SYMSRV_INDEX_INFO
    sizeofstruct : UInt32
    file : CHAR[261]*
    stripped : LibC::BOOL
    timestamp : UInt32
    size : UInt32
    dbgfile : CHAR[261]*
    pdbfile : CHAR[261]*
    guid : Guid
    sig : UInt32
    age : UInt32
  end
  struct SYMSRV_INDEX_INFOW
    sizeofstruct : UInt32
    file : Char[261]*
    stripped : LibC::BOOL
    timestamp : UInt32
    size : UInt32
    dbgfile : Char[261]*
    pdbfile : Char[261]*
    guid : Guid
    sig : UInt32
    age : UInt32
  end
  struct SYMSRV_EXTENDED_OUTPUT_DATA
    size_of_struct : UInt32
    version : UInt32
    file_ptr_msg : Char[261]*
  end
  struct DBGHELP_DATA_REPORT_STRUCT
    p_bin_path_non_exist : LibC::LPWSTR
    p_symbol_path_non_exist : LibC::LPWSTR
  end
  struct TEXT_DOCUMENT_ARRAY
    dw_count : UInt32
    members : IDebugDocumentText*
  end
  struct JsDebugPropertyInfo
    name : UInt8*
    type : UInt8*
    value : UInt8*
    full_name : UInt8*
    attr : JS_PROPERTY_ATTRIBUTES
  end
  struct MIDL___MIDL_itf_jscript9diag_0000_0007_0001
    instruction_offset : UInt64
    return_offset : UInt64
    frame_offset : UInt64
    stack_offset : UInt64
  end
  struct PHYSICAL_MEMORY_RUN32
    base_page : UInt32
    page_count : UInt32
  end
  struct PHYSICAL_MEMORY_DESCRIPTOR32
    number_of_runs : UInt32
    number_of_pages : UInt32
    run : PHYSICAL_MEMORY_RUN32[0]*
  end
  struct PHYSICAL_MEMORY_RUN64
    base_page : UInt64
    page_count : UInt64
  end
  struct PHYSICAL_MEMORY_DESCRIPTOR64
    number_of_runs : UInt32
    number_of_pages : UInt64
    run : PHYSICAL_MEMORY_RUN64[0]*
  end
  struct DUMP_FILE_ATTRIBUTES_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct DUMP_HEADER32
    signature : UInt32
    valid_dump : UInt32
    major_version : UInt32
    minor_version : UInt32
    directory_table_base : UInt32
    pfn_data_base : UInt32
    ps_loaded_module_list : UInt32
    ps_active_process_head : UInt32
    machine_image_type : UInt32
    number_processors : UInt32
    bug_check_code : UInt32
    bug_check_parameter1 : UInt32
    bug_check_parameter2 : UInt32
    bug_check_parameter3 : UInt32
    bug_check_parameter4 : UInt32
    version_user : CHAR[32]*
    pae_enabled : UInt8
    kd_secondary_version : UInt8
    spare3 : UInt8[2]*
    kd_debugger_data_block : UInt32
    anonymous : DUMP_HEADER32_Anonymous_e__Union
    context_record : UInt8[1200]*
    exception : EXCEPTION_RECORD32
    comment : CHAR[128]*
    attributes : DUMP_FILE_ATTRIBUTES
    boot_id : UInt32
    _reserved0 : UInt8[1760]*
    dump_type : UInt32
    mini_dump_fields : UInt32
    secondary_data_state : UInt32
    product_type : UInt32
    suite_mask : UInt32
    writer_status : UInt32
    required_dump_space : LARGE_INTEGER
    _reserved2 : UInt8[16]*
    system_up_time : LARGE_INTEGER
    system_time : LARGE_INTEGER
    _reserved3 : UInt8[56]*
  end
  struct DUMP_HEADER64
    signature : UInt32
    valid_dump : UInt32
    major_version : UInt32
    minor_version : UInt32
    directory_table_base : UInt64
    pfn_data_base : UInt64
    ps_loaded_module_list : UInt64
    ps_active_process_head : UInt64
    machine_image_type : UInt32
    number_processors : UInt32
    bug_check_code : UInt32
    bug_check_parameter1 : UInt64
    bug_check_parameter2 : UInt64
    bug_check_parameter3 : UInt64
    bug_check_parameter4 : UInt64
    version_user : CHAR[32]*
    kd_debugger_data_block : UInt64
    anonymous : DUMP_HEADER64_Anonymous_e__Union
    context_record : UInt8[3000]*
    exception : EXCEPTION_RECORD64
    dump_type : UInt32
    required_dump_space : LARGE_INTEGER
    system_time : LARGE_INTEGER
    comment : CHAR[128]*
    system_up_time : LARGE_INTEGER
    mini_dump_fields : UInt32
    secondary_data_state : UInt32
    product_type : UInt32
    suite_mask : UInt32
    writer_status : UInt32
    unused1 : UInt8
    kd_secondary_version : UInt8
    unused : UInt8[2]*
    attributes : DUMP_FILE_ATTRIBUTES
    boot_id : UInt32
    _reserved0 : UInt8[4008]*
  end
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DD
    initialize : WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    uninitialize : WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
    correct : WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER
  end
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1
    version : UInt32
    source_guid : Guid
    log_tag : UInt16
    reserved : UInt8[6]*
    initialize : WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    uninitialize : WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
  end
  struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER
    version : UInt32
    source_guid : Guid
    log_tag : UInt16
    reserved : UInt8[6]*
    initialize : WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER
    uninitialize : WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER
    max_section_data_length : UInt32
    max_sections_per_report : UInt32
    creator_id : Guid
    partition_id : Guid
  end
  struct WHEA_DRIVER_BUFFER_SET
    version : UInt32
    data : UInt8*
    data_size : UInt32
    section_type_guid : Guid*
    section_friendly_name : UInt8*
    flags : UInt8*
  end
  struct WHEA_NOTIFICATION_FLAGS_Anonymous_e__Struct
    _bitfield : UInt16
  end
  struct XPF_MC_BANK_FLAGS_Anonymous_e__Struct
    _bitfield : UInt8
  end
  struct XPF_MCE_FLAGS_Anonymous_e__Struct
    _bitfield : UInt32
  end
  struct AER_ROOTPORT_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    _bitfield : UInt16
  end
  struct AER_ENDPOINT_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    _bitfield : UInt16
  end
  struct AER_BRIDGE_DESCRIPTOR_FLAGS_Anonymous_e__Struct
    _bitfield : UInt16
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR
    type : UInt8
    length : UInt8
    flags : WHEA_NOTIFICATION_FLAGS
    u : WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sei_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Nmi_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_LocalInterrupt_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Polled_e__Struct
    poll_interval : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sea_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Interrupt_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Sci_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_NOTIFICATION_DESCRIPTOR_u_e__Union_Gsiv_e__Struct
    poll_interval : UInt32
    vector : UInt32
    switch_to_polling_threshold : UInt32
    switch_to_polling_window : UInt32
    error_threshold : UInt32
    error_threshold_window : UInt32
  end
  struct WHEA_XPF_MC_BANK_DESCRIPTOR
    bank_number : UInt8
    clear_on_initialization : BOOLEAN
    status_data_format : UInt8
    flags : XPF_MC_BANK_FLAGS
    control_msr : UInt32
    status_msr : UInt32
    address_msr : UInt32
    misc_msr : UInt32
    control_data : UInt64
  end
  struct WHEA_XPF_MCE_DESCRIPTOR
    type : UInt16
    enabled : UInt8
    number_of_banks : UInt8
    flags : XPF_MCE_FLAGS
    mcg_capability : UInt64
    mcg_global_control : UInt64
    banks : WHEA_XPF_MC_BANK_DESCRIPTOR[32]*
  end
  struct WHEA_XPF_CMC_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
    number_of_banks : UInt8
    reserved : UInt32
    notify : WHEA_NOTIFICATION_DESCRIPTOR
    banks : WHEA_XPF_MC_BANK_DESCRIPTOR[32]*
  end
  struct WHEA_PCI_SLOT_NUMBER
    u : WHEA_PCI_SLOT_NUMBER_u_e__Union
  end
  struct WHEA_PCI_SLOT_NUMBER_u_e__Union_bits_e__Struct
    _bitfield : UInt32
  end
  struct WHEA_XPF_NMI_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
  end
  struct WHEA_AER_ROOTPORT_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
    reserved : UInt8
    bus_number : UInt32
    slot : WHEA_PCI_SLOT_NUMBER
    device_control : UInt16
    flags : AER_ROOTPORT_DESCRIPTOR_FLAGS
    uncorrectable_error_mask : UInt32
    uncorrectable_error_severity : UInt32
    correctable_error_mask : UInt32
    advanced_caps_and_control : UInt32
    root_error_command : UInt32
  end
  struct WHEA_AER_ENDPOINT_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
    reserved : UInt8
    bus_number : UInt32
    slot : WHEA_PCI_SLOT_NUMBER
    device_control : UInt16
    flags : AER_ENDPOINT_DESCRIPTOR_FLAGS
    uncorrectable_error_mask : UInt32
    uncorrectable_error_severity : UInt32
    correctable_error_mask : UInt32
    advanced_caps_and_control : UInt32
  end
  struct WHEA_AER_BRIDGE_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
    reserved : UInt8
    bus_number : UInt32
    slot : WHEA_PCI_SLOT_NUMBER
    device_control : UInt16
    flags : AER_BRIDGE_DESCRIPTOR_FLAGS
    uncorrectable_error_mask : UInt32
    uncorrectable_error_severity : UInt32
    correctable_error_mask : UInt32
    advanced_caps_and_control : UInt32
    secondary_uncorrectable_error_mask : UInt32
    secondary_uncorrectable_error_sev : UInt32
    secondary_caps_and_control : UInt32
  end
  struct WHEA_GENERIC_ERROR_DESCRIPTOR
    type : UInt16
    reserved : UInt8
    enabled : UInt8
    err_status_block_length : UInt32
    related_error_source_id : UInt32
    err_status_address_space_id : UInt8
    err_status_address_bit_width : UInt8
    err_status_address_bit_offset : UInt8
    err_status_address_access_size : UInt8
    err_status_address : LARGE_INTEGER
    notify : WHEA_NOTIFICATION_DESCRIPTOR
  end
  struct WHEA_GENERIC_ERROR_DESCRIPTOR_V2
    type : UInt16
    reserved : UInt8
    enabled : UInt8
    err_status_block_length : UInt32
    related_error_source_id : UInt32
    err_status_address_space_id : UInt8
    err_status_address_bit_width : UInt8
    err_status_address_bit_offset : UInt8
    err_status_address_access_size : UInt8
    err_status_address : LARGE_INTEGER
    notify : WHEA_NOTIFICATION_DESCRIPTOR
    read_ack_address_space_id : UInt8
    read_ack_address_bit_width : UInt8
    read_ack_address_bit_offset : UInt8
    read_ack_address_access_size : UInt8
    read_ack_address : LARGE_INTEGER
    read_ack_preserve_mask : UInt64
    read_ack_write_mask : UInt64
  end
  struct WHEA_DEVICE_DRIVER_DESCRIPTOR
    type : UInt16
    enabled : BOOLEAN
    reserved : UInt8
    source_guid : Guid
    log_tag : UInt16
    reserved2 : UInt16
    packet_length : UInt32
    packet_count : UInt32
    packet_buffer : UInt8*
    config : WHEA_ERROR_SOURCE_CONFIGURATION_DD
    creator_id : Guid
    partition_id : Guid
    max_section_data_length : UInt32
    max_sections_per_record : UInt32
    packet_state_buffer : UInt8*
    open_handles : Int32
  end
  struct WHEA_IPF_MCA_DESCRIPTOR
    type : UInt16
    enabled : UInt8
    reserved : UInt8
  end
  struct WHEA_IPF_CMC_DESCRIPTOR
    type : UInt16
    enabled : UInt8
    reserved : UInt8
  end
  struct WHEA_IPF_CPE_DESCRIPTOR
    type : UInt16
    enabled : UInt8
    reserved : UInt8
  end
  struct WHEA_ERROR_SOURCE_DESCRIPTOR
    length : UInt32
    version : UInt32
    type : WHEA_ERROR_SOURCE_TYPE
    state : WHEA_ERROR_SOURCE_STATE
    max_raw_data_length : UInt32
    num_records_to_preallocate : UInt32
    max_sections_per_record : UInt32
    error_source_id : UInt32
    platform_error_source_id : UInt32
    flags : UInt32
    info : WHEA_ERROR_SOURCE_DESCRIPTOR_Info_e__Union
  end
  struct IPMI_OS_SEL_RECORD
    signature : UInt32
    version : UInt32
    length : UInt32
    record_type : IPMI_OS_SEL_RECORD_TYPE
    data_length : UInt32
    data : UInt8[0]*
  end


  struct IDebugAdvancedVTbl
    query_interface : Proc(IDebugAdvanced*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAdvanced*, UInt32)
    release : Proc(IDebugAdvanced*, UInt32)
    get_thread_context : Proc(IDebugAdvanced*, Void*, UInt32, HRESULT)
    set_thread_context : Proc(IDebugAdvanced*, Void*, UInt32, HRESULT)
  end

  IDebugAdvanced_GUID = "f2df5f53-071f-47bd-9de6-5734c3fed689"
  IID_IDebugAdvanced = LibC::GUID.new(0xf2df5f53_u32, 0x71f_u16, 0x47bd_u16, StaticArray[0x9d_u8, 0xe6_u8, 0x57_u8, 0x34_u8, 0xc3_u8, 0xfe_u8, 0xd6_u8, 0x89_u8])
  struct IDebugAdvanced
    lpVtbl : IDebugAdvancedVTbl*
  end

  struct IDebugAdvanced2VTbl
    query_interface : Proc(IDebugAdvanced2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAdvanced2*, UInt32)
    release : Proc(IDebugAdvanced2*, UInt32)
    get_thread_context : Proc(IDebugAdvanced2*, Void*, UInt32, HRESULT)
    set_thread_context : Proc(IDebugAdvanced2*, Void*, UInt32, HRESULT)
    request : Proc(IDebugAdvanced2*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_source_file_information : Proc(IDebugAdvanced2*, UInt32, PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    find_source_file_and_token : Proc(IDebugAdvanced2*, UInt32, UInt64, PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_information : Proc(IDebugAdvanced2*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_object_information : Proc(IDebugAdvanced2*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
  end

  IDebugAdvanced2_GUID = "716d14c9-119b-4ba5-af1f-0890e672416a"
  IID_IDebugAdvanced2 = LibC::GUID.new(0x716d14c9_u32, 0x119b_u16, 0x4ba5_u16, StaticArray[0xaf_u8, 0x1f_u8, 0x8_u8, 0x90_u8, 0xe6_u8, 0x72_u8, 0x41_u8, 0x6a_u8])
  struct IDebugAdvanced2
    lpVtbl : IDebugAdvanced2VTbl*
  end

  struct IDebugAdvanced3VTbl
    query_interface : Proc(IDebugAdvanced3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAdvanced3*, UInt32)
    release : Proc(IDebugAdvanced3*, UInt32)
    get_thread_context : Proc(IDebugAdvanced3*, Void*, UInt32, HRESULT)
    set_thread_context : Proc(IDebugAdvanced3*, Void*, UInt32, HRESULT)
    request : Proc(IDebugAdvanced3*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_source_file_information : Proc(IDebugAdvanced3*, UInt32, PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    find_source_file_and_token : Proc(IDebugAdvanced3*, UInt32, UInt64, PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_information : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_object_information : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_source_file_information_wide : Proc(IDebugAdvanced3*, UInt32, LibC::LPWSTR, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    find_source_file_and_token_wide : Proc(IDebugAdvanced3*, UInt32, UInt64, LibC::LPWSTR, UInt32, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_information_wide : Proc(IDebugAdvanced3*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
  end

  IDebugAdvanced3_GUID = "cba4abb4-84c4-444d-87ca-a04e13286739"
  IID_IDebugAdvanced3 = LibC::GUID.new(0xcba4abb4_u32, 0x84c4_u16, 0x444d_u16, StaticArray[0x87_u8, 0xca_u8, 0xa0_u8, 0x4e_u8, 0x13_u8, 0x28_u8, 0x67_u8, 0x39_u8])
  struct IDebugAdvanced3
    lpVtbl : IDebugAdvanced3VTbl*
  end

  struct IDebugAdvanced4VTbl
    query_interface : Proc(IDebugAdvanced4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAdvanced4*, UInt32)
    release : Proc(IDebugAdvanced4*, UInt32)
    get_thread_context : Proc(IDebugAdvanced4*, Void*, UInt32, HRESULT)
    set_thread_context : Proc(IDebugAdvanced4*, Void*, UInt32, HRESULT)
    request : Proc(IDebugAdvanced4*, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_source_file_information : Proc(IDebugAdvanced4*, UInt32, PSTR, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    find_source_file_and_token : Proc(IDebugAdvanced4*, UInt32, UInt64, PSTR, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_information : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_object_information : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_source_file_information_wide : Proc(IDebugAdvanced4*, UInt32, LibC::LPWSTR, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    find_source_file_and_token_wide : Proc(IDebugAdvanced4*, UInt32, UInt64, LibC::LPWSTR, UInt32, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_information_wide : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_information_wide_ex : Proc(IDebugAdvanced4*, UInt32, UInt64, UInt32, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, SYMBOL_INFO_EX*, HRESULT)
  end

  IDebugAdvanced4_GUID = "d1069067-2a65-4bf0-ae97-76184b67856b"
  IID_IDebugAdvanced4 = LibC::GUID.new(0xd1069067_u32, 0x2a65_u16, 0x4bf0_u16, StaticArray[0xae_u8, 0x97_u8, 0x76_u8, 0x18_u8, 0x4b_u8, 0x67_u8, 0x85_u8, 0x6b_u8])
  struct IDebugAdvanced4
    lpVtbl : IDebugAdvanced4VTbl*
  end

  struct IDebugBreakpointVTbl
    query_interface : Proc(IDebugBreakpoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugBreakpoint*, UInt32)
    release : Proc(IDebugBreakpoint*, UInt32)
    get_id : Proc(IDebugBreakpoint*, UInt32*, HRESULT)
    get_type : Proc(IDebugBreakpoint*, UInt32*, UInt32*, HRESULT)
    get_adder : Proc(IDebugBreakpoint*, IDebugClient*, HRESULT)
    get_flags : Proc(IDebugBreakpoint*, UInt32*, HRESULT)
    add_flags : Proc(IDebugBreakpoint*, UInt32, HRESULT)
    remove_flags : Proc(IDebugBreakpoint*, UInt32, HRESULT)
    set_flags : Proc(IDebugBreakpoint*, UInt32, HRESULT)
    get_offset : Proc(IDebugBreakpoint*, UInt64*, HRESULT)
    set_offset : Proc(IDebugBreakpoint*, UInt64, HRESULT)
    get_data_parameters : Proc(IDebugBreakpoint*, UInt32*, UInt32*, HRESULT)
    set_data_parameters : Proc(IDebugBreakpoint*, UInt32, UInt32, HRESULT)
    get_pass_count : Proc(IDebugBreakpoint*, UInt32*, HRESULT)
    set_pass_count : Proc(IDebugBreakpoint*, UInt32, HRESULT)
    get_current_pass_count : Proc(IDebugBreakpoint*, UInt32*, HRESULT)
    get_match_thread_id : Proc(IDebugBreakpoint*, UInt32*, HRESULT)
    set_match_thread_id : Proc(IDebugBreakpoint*, UInt32, HRESULT)
    get_command : Proc(IDebugBreakpoint*, UInt8*, UInt32, UInt32*, HRESULT)
    set_command : Proc(IDebugBreakpoint*, PSTR, HRESULT)
    get_offset_expression : Proc(IDebugBreakpoint*, UInt8*, UInt32, UInt32*, HRESULT)
    set_offset_expression : Proc(IDebugBreakpoint*, PSTR, HRESULT)
    get_parameters : Proc(IDebugBreakpoint*, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
  end

  IDebugBreakpoint_GUID = "5bd9d474-5975-423a-b88b-65a8e7110e65"
  IID_IDebugBreakpoint = LibC::GUID.new(0x5bd9d474_u32, 0x5975_u16, 0x423a_u16, StaticArray[0xb8_u8, 0x8b_u8, 0x65_u8, 0xa8_u8, 0xe7_u8, 0x11_u8, 0xe_u8, 0x65_u8])
  struct IDebugBreakpoint
    lpVtbl : IDebugBreakpointVTbl*
  end

  struct IDebugBreakpoint2VTbl
    query_interface : Proc(IDebugBreakpoint2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugBreakpoint2*, UInt32)
    release : Proc(IDebugBreakpoint2*, UInt32)
    get_id : Proc(IDebugBreakpoint2*, UInt32*, HRESULT)
    get_type : Proc(IDebugBreakpoint2*, UInt32*, UInt32*, HRESULT)
    get_adder : Proc(IDebugBreakpoint2*, IDebugClient*, HRESULT)
    get_flags : Proc(IDebugBreakpoint2*, UInt32*, HRESULT)
    add_flags : Proc(IDebugBreakpoint2*, UInt32, HRESULT)
    remove_flags : Proc(IDebugBreakpoint2*, UInt32, HRESULT)
    set_flags : Proc(IDebugBreakpoint2*, UInt32, HRESULT)
    get_offset : Proc(IDebugBreakpoint2*, UInt64*, HRESULT)
    set_offset : Proc(IDebugBreakpoint2*, UInt64, HRESULT)
    get_data_parameters : Proc(IDebugBreakpoint2*, UInt32*, UInt32*, HRESULT)
    set_data_parameters : Proc(IDebugBreakpoint2*, UInt32, UInt32, HRESULT)
    get_pass_count : Proc(IDebugBreakpoint2*, UInt32*, HRESULT)
    set_pass_count : Proc(IDebugBreakpoint2*, UInt32, HRESULT)
    get_current_pass_count : Proc(IDebugBreakpoint2*, UInt32*, HRESULT)
    get_match_thread_id : Proc(IDebugBreakpoint2*, UInt32*, HRESULT)
    set_match_thread_id : Proc(IDebugBreakpoint2*, UInt32, HRESULT)
    get_command : Proc(IDebugBreakpoint2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_command : Proc(IDebugBreakpoint2*, PSTR, HRESULT)
    get_offset_expression : Proc(IDebugBreakpoint2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_offset_expression : Proc(IDebugBreakpoint2*, PSTR, HRESULT)
    get_parameters : Proc(IDebugBreakpoint2*, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    get_command_wide : Proc(IDebugBreakpoint2*, Char*, UInt32, UInt32*, HRESULT)
    set_command_wide : Proc(IDebugBreakpoint2*, LibC::LPWSTR, HRESULT)
    get_offset_expression_wide : Proc(IDebugBreakpoint2*, Char*, UInt32, UInt32*, HRESULT)
    set_offset_expression_wide : Proc(IDebugBreakpoint2*, LibC::LPWSTR, HRESULT)
  end

  IDebugBreakpoint2_GUID = "1b278d20-79f2-426e-a3f9-c1ddf375d48e"
  IID_IDebugBreakpoint2 = LibC::GUID.new(0x1b278d20_u32, 0x79f2_u16, 0x426e_u16, StaticArray[0xa3_u8, 0xf9_u8, 0xc1_u8, 0xdd_u8, 0xf3_u8, 0x75_u8, 0xd4_u8, 0x8e_u8])
  struct IDebugBreakpoint2
    lpVtbl : IDebugBreakpoint2VTbl*
  end

  struct IDebugBreakpoint3VTbl
    query_interface : Proc(IDebugBreakpoint3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugBreakpoint3*, UInt32)
    release : Proc(IDebugBreakpoint3*, UInt32)
    get_id : Proc(IDebugBreakpoint3*, UInt32*, HRESULT)
    get_type : Proc(IDebugBreakpoint3*, UInt32*, UInt32*, HRESULT)
    get_adder : Proc(IDebugBreakpoint3*, IDebugClient*, HRESULT)
    get_flags : Proc(IDebugBreakpoint3*, UInt32*, HRESULT)
    add_flags : Proc(IDebugBreakpoint3*, UInt32, HRESULT)
    remove_flags : Proc(IDebugBreakpoint3*, UInt32, HRESULT)
    set_flags : Proc(IDebugBreakpoint3*, UInt32, HRESULT)
    get_offset : Proc(IDebugBreakpoint3*, UInt64*, HRESULT)
    set_offset : Proc(IDebugBreakpoint3*, UInt64, HRESULT)
    get_data_parameters : Proc(IDebugBreakpoint3*, UInt32*, UInt32*, HRESULT)
    set_data_parameters : Proc(IDebugBreakpoint3*, UInt32, UInt32, HRESULT)
    get_pass_count : Proc(IDebugBreakpoint3*, UInt32*, HRESULT)
    set_pass_count : Proc(IDebugBreakpoint3*, UInt32, HRESULT)
    get_current_pass_count : Proc(IDebugBreakpoint3*, UInt32*, HRESULT)
    get_match_thread_id : Proc(IDebugBreakpoint3*, UInt32*, HRESULT)
    set_match_thread_id : Proc(IDebugBreakpoint3*, UInt32, HRESULT)
    get_command : Proc(IDebugBreakpoint3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_command : Proc(IDebugBreakpoint3*, PSTR, HRESULT)
    get_offset_expression : Proc(IDebugBreakpoint3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_offset_expression : Proc(IDebugBreakpoint3*, PSTR, HRESULT)
    get_parameters : Proc(IDebugBreakpoint3*, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    get_command_wide : Proc(IDebugBreakpoint3*, Char*, UInt32, UInt32*, HRESULT)
    set_command_wide : Proc(IDebugBreakpoint3*, LibC::LPWSTR, HRESULT)
    get_offset_expression_wide : Proc(IDebugBreakpoint3*, Char*, UInt32, UInt32*, HRESULT)
    set_offset_expression_wide : Proc(IDebugBreakpoint3*, LibC::LPWSTR, HRESULT)
    get_guid : Proc(IDebugBreakpoint3*, Guid*, HRESULT)
  end

  IDebugBreakpoint3_GUID = "38f5c249-b448-43bb-9835-579d4ec02249"
  IID_IDebugBreakpoint3 = LibC::GUID.new(0x38f5c249_u32, 0xb448_u16, 0x43bb_u16, StaticArray[0x98_u8, 0x35_u8, 0x57_u8, 0x9d_u8, 0x4e_u8, 0xc0_u8, 0x22_u8, 0x49_u8])
  struct IDebugBreakpoint3
    lpVtbl : IDebugBreakpoint3VTbl*
  end

  struct IDebugClientVTbl
    query_interface : Proc(IDebugClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient*, UInt32)
    release : Proc(IDebugClient*, UInt32)
    attach_kernel : Proc(IDebugClient*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient*, HRESULT)
    detach_processes : Proc(IDebugClient*, HRESULT)
    end_session : Proc(IDebugClient*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient*, HRESULT)
  end

  IDebugClient_GUID = "27fe5639-8407-4f47-8364-ee118fb08ac8"
  IID_IDebugClient = LibC::GUID.new(0x27fe5639_u32, 0x8407_u16, 0x4f47_u16, StaticArray[0x83_u8, 0x64_u8, 0xee_u8, 0x11_u8, 0x8f_u8, 0xb0_u8, 0x8a_u8, 0xc8_u8])
  struct IDebugClient
    lpVtbl : IDebugClientVTbl*
  end

  struct IDebugClient2VTbl
    query_interface : Proc(IDebugClient2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient2*, UInt32)
    release : Proc(IDebugClient2*, UInt32)
    attach_kernel : Proc(IDebugClient2*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient2*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient2*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient2*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient2*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient2*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient2*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient2*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient2*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient2*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient2*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient2*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient2*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient2*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient2*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient2*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient2*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient2*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient2*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient2*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient2*, HRESULT)
    detach_processes : Proc(IDebugClient2*, HRESULT)
    end_session : Proc(IDebugClient2*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient2*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient2*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient2*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient2*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient2*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient2*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient2*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient2*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient2*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient2*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient2*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient2*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient2*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient2*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient2*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient2*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient2*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient2*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient2*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient2*, HRESULT)
    write_dump_file2 : Proc(IDebugClient2*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient2*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient2*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient2*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient2*, HRESULT)
    terminate_current_process : Proc(IDebugClient2*, HRESULT)
    detach_current_process : Proc(IDebugClient2*, HRESULT)
    abandon_current_process : Proc(IDebugClient2*, HRESULT)
  end

  IDebugClient2_GUID = "edbed635-372e-4dab-bbfe-ed0d2f63be81"
  IID_IDebugClient2 = LibC::GUID.new(0xedbed635_u32, 0x372e_u16, 0x4dab_u16, StaticArray[0xbb_u8, 0xfe_u8, 0xed_u8, 0xd_u8, 0x2f_u8, 0x63_u8, 0xbe_u8, 0x81_u8])
  struct IDebugClient2
    lpVtbl : IDebugClient2VTbl*
  end

  struct IDebugClient3VTbl
    query_interface : Proc(IDebugClient3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient3*, UInt32)
    release : Proc(IDebugClient3*, UInt32)
    attach_kernel : Proc(IDebugClient3*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient3*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient3*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient3*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient3*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient3*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient3*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient3*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient3*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient3*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient3*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient3*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient3*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient3*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient3*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient3*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient3*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient3*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient3*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient3*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient3*, HRESULT)
    detach_processes : Proc(IDebugClient3*, HRESULT)
    end_session : Proc(IDebugClient3*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient3*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient3*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient3*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient3*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient3*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient3*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient3*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient3*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient3*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient3*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient3*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient3*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient3*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient3*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient3*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient3*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient3*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient3*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient3*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient3*, HRESULT)
    write_dump_file2 : Proc(IDebugClient3*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient3*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient3*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient3*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient3*, HRESULT)
    terminate_current_process : Proc(IDebugClient3*, HRESULT)
    detach_current_process : Proc(IDebugClient3*, HRESULT)
    abandon_current_process : Proc(IDebugClient3*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient3*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient3*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient3*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient3*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
  end

  IDebugClient3_GUID = "dd492d7f-71b8-4ad6-a8dc-1c887479ff91"
  IID_IDebugClient3 = LibC::GUID.new(0xdd492d7f_u32, 0x71b8_u16, 0x4ad6_u16, StaticArray[0xa8_u8, 0xdc_u8, 0x1c_u8, 0x88_u8, 0x74_u8, 0x79_u8, 0xff_u8, 0x91_u8])
  struct IDebugClient3
    lpVtbl : IDebugClient3VTbl*
  end

  struct IDebugClient4VTbl
    query_interface : Proc(IDebugClient4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient4*, UInt32)
    release : Proc(IDebugClient4*, UInt32)
    attach_kernel : Proc(IDebugClient4*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient4*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient4*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient4*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient4*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient4*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient4*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient4*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient4*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient4*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient4*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient4*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient4*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient4*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient4*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient4*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient4*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient4*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient4*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient4*, HRESULT)
    detach_processes : Proc(IDebugClient4*, HRESULT)
    end_session : Proc(IDebugClient4*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient4*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient4*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient4*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient4*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient4*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient4*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient4*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient4*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient4*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient4*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient4*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient4*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient4*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient4*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient4*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient4*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient4*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient4*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient4*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient4*, HRESULT)
    write_dump_file2 : Proc(IDebugClient4*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient4*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient4*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient4*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient4*, HRESULT)
    terminate_current_process : Proc(IDebugClient4*, HRESULT)
    detach_current_process : Proc(IDebugClient4*, HRESULT)
    abandon_current_process : Proc(IDebugClient4*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient4*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient4*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient4*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient4*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
    open_dump_file_wide : Proc(IDebugClient4*, LibC::LPWSTR, UInt64, HRESULT)
    write_dump_file_wide : Proc(IDebugClient4*, LibC::LPWSTR, UInt64, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    add_dump_information_file_wide : Proc(IDebugClient4*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
    get_number_dump_files : Proc(IDebugClient4*, UInt32*, HRESULT)
    get_dump_file : Proc(IDebugClient4*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_dump_file_wide : Proc(IDebugClient4*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
  end

  IDebugClient4_GUID = "ca83c3de-5089-4cf8-93c8-d892387f2a5e"
  IID_IDebugClient4 = LibC::GUID.new(0xca83c3de_u32, 0x5089_u16, 0x4cf8_u16, StaticArray[0x93_u8, 0xc8_u8, 0xd8_u8, 0x92_u8, 0x38_u8, 0x7f_u8, 0x2a_u8, 0x5e_u8])
  struct IDebugClient4
    lpVtbl : IDebugClient4VTbl*
  end

  struct IDebugClient5VTbl
    query_interface : Proc(IDebugClient5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient5*, UInt32)
    release : Proc(IDebugClient5*, UInt32)
    attach_kernel : Proc(IDebugClient5*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient5*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient5*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient5*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient5*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient5*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient5*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient5*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient5*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient5*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient5*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient5*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient5*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient5*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient5*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient5*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient5*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient5*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient5*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient5*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient5*, HRESULT)
    detach_processes : Proc(IDebugClient5*, HRESULT)
    end_session : Proc(IDebugClient5*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient5*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient5*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient5*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient5*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient5*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient5*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient5*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient5*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient5*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient5*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient5*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient5*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient5*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient5*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient5*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient5*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient5*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient5*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient5*, HRESULT)
    write_dump_file2 : Proc(IDebugClient5*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient5*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient5*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient5*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient5*, HRESULT)
    terminate_current_process : Proc(IDebugClient5*, HRESULT)
    detach_current_process : Proc(IDebugClient5*, HRESULT)
    abandon_current_process : Proc(IDebugClient5*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient5*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient5*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient5*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient5*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
    open_dump_file_wide : Proc(IDebugClient5*, LibC::LPWSTR, UInt64, HRESULT)
    write_dump_file_wide : Proc(IDebugClient5*, LibC::LPWSTR, UInt64, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    add_dump_information_file_wide : Proc(IDebugClient5*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
    get_number_dump_files : Proc(IDebugClient5*, UInt32*, HRESULT)
    get_dump_file : Proc(IDebugClient5*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_dump_file_wide : Proc(IDebugClient5*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    attach_kernel_wide : Proc(IDebugClient5*, UInt32, LibC::LPWSTR, HRESULT)
    get_kernel_connection_options_wide : Proc(IDebugClient5*, Char*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options_wide : Proc(IDebugClient5*, LibC::LPWSTR, HRESULT)
    start_process_server_wide : Proc(IDebugClient5*, UInt32, LibC::LPWSTR, Void*, HRESULT)
    connect_process_server_wide : Proc(IDebugClient5*, LibC::LPWSTR, UInt64*, HRESULT)
    start_server_wide : Proc(IDebugClient5*, LibC::LPWSTR, HRESULT)
    output_servers_wide : Proc(IDebugClient5*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_output_callbacks_wide : Proc(IDebugClient5*, IDebugOutputCallbacksWide*, HRESULT)
    set_output_callbacks_wide : Proc(IDebugClient5*, IDebugOutputCallbacksWide, HRESULT)
    get_output_line_prefix_wide : Proc(IDebugClient5*, Char*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix_wide : Proc(IDebugClient5*, LibC::LPWSTR, HRESULT)
    get_identity_wide : Proc(IDebugClient5*, Char*, UInt32, UInt32*, HRESULT)
    output_identity_wide : Proc(IDebugClient5*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    get_event_callbacks_wide : Proc(IDebugClient5*, IDebugEventCallbacksWide*, HRESULT)
    set_event_callbacks_wide : Proc(IDebugClient5*, IDebugEventCallbacksWide, HRESULT)
    create_process2 : Proc(IDebugClient5*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, HRESULT)
    create_process2_wide : Proc(IDebugClient5*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    create_process_and_attach2 : Proc(IDebugClient5*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    create_process_and_attach2_wide : Proc(IDebugClient5*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    push_output_line_prefix : Proc(IDebugClient5*, PSTR, UInt64*, HRESULT)
    push_output_line_prefix_wide : Proc(IDebugClient5*, LibC::LPWSTR, UInt64*, HRESULT)
    pop_output_line_prefix : Proc(IDebugClient5*, UInt64, HRESULT)
    get_number_input_callbacks : Proc(IDebugClient5*, UInt32*, HRESULT)
    get_number_output_callbacks : Proc(IDebugClient5*, UInt32*, HRESULT)
    get_number_event_callbacks : Proc(IDebugClient5*, UInt32, UInt32*, HRESULT)
    get_quit_lock_string : Proc(IDebugClient5*, UInt8*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string : Proc(IDebugClient5*, PSTR, HRESULT)
    get_quit_lock_string_wide : Proc(IDebugClient5*, Char*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string_wide : Proc(IDebugClient5*, LibC::LPWSTR, HRESULT)
  end

  IDebugClient5_GUID = "e3acb9d7-7ec2-4f0c-a0da-e81e0cbbe628"
  IID_IDebugClient5 = LibC::GUID.new(0xe3acb9d7_u32, 0x7ec2_u16, 0x4f0c_u16, StaticArray[0xa0_u8, 0xda_u8, 0xe8_u8, 0x1e_u8, 0xc_u8, 0xbb_u8, 0xe6_u8, 0x28_u8])
  struct IDebugClient5
    lpVtbl : IDebugClient5VTbl*
  end

  struct IDebugClient6VTbl
    query_interface : Proc(IDebugClient6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient6*, UInt32)
    release : Proc(IDebugClient6*, UInt32)
    attach_kernel : Proc(IDebugClient6*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient6*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient6*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient6*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient6*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient6*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient6*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient6*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient6*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient6*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient6*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient6*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient6*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient6*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient6*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient6*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient6*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient6*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient6*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient6*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient6*, HRESULT)
    detach_processes : Proc(IDebugClient6*, HRESULT)
    end_session : Proc(IDebugClient6*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient6*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient6*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient6*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient6*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient6*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient6*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient6*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient6*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient6*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient6*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient6*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient6*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient6*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient6*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient6*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient6*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient6*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient6*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient6*, HRESULT)
    write_dump_file2 : Proc(IDebugClient6*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient6*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient6*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient6*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient6*, HRESULT)
    terminate_current_process : Proc(IDebugClient6*, HRESULT)
    detach_current_process : Proc(IDebugClient6*, HRESULT)
    abandon_current_process : Proc(IDebugClient6*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient6*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient6*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient6*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient6*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
    open_dump_file_wide : Proc(IDebugClient6*, LibC::LPWSTR, UInt64, HRESULT)
    write_dump_file_wide : Proc(IDebugClient6*, LibC::LPWSTR, UInt64, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    add_dump_information_file_wide : Proc(IDebugClient6*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
    get_number_dump_files : Proc(IDebugClient6*, UInt32*, HRESULT)
    get_dump_file : Proc(IDebugClient6*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_dump_file_wide : Proc(IDebugClient6*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    attach_kernel_wide : Proc(IDebugClient6*, UInt32, LibC::LPWSTR, HRESULT)
    get_kernel_connection_options_wide : Proc(IDebugClient6*, Char*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options_wide : Proc(IDebugClient6*, LibC::LPWSTR, HRESULT)
    start_process_server_wide : Proc(IDebugClient6*, UInt32, LibC::LPWSTR, Void*, HRESULT)
    connect_process_server_wide : Proc(IDebugClient6*, LibC::LPWSTR, UInt64*, HRESULT)
    start_server_wide : Proc(IDebugClient6*, LibC::LPWSTR, HRESULT)
    output_servers_wide : Proc(IDebugClient6*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_output_callbacks_wide : Proc(IDebugClient6*, IDebugOutputCallbacksWide*, HRESULT)
    set_output_callbacks_wide : Proc(IDebugClient6*, IDebugOutputCallbacksWide, HRESULT)
    get_output_line_prefix_wide : Proc(IDebugClient6*, Char*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix_wide : Proc(IDebugClient6*, LibC::LPWSTR, HRESULT)
    get_identity_wide : Proc(IDebugClient6*, Char*, UInt32, UInt32*, HRESULT)
    output_identity_wide : Proc(IDebugClient6*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    get_event_callbacks_wide : Proc(IDebugClient6*, IDebugEventCallbacksWide*, HRESULT)
    set_event_callbacks_wide : Proc(IDebugClient6*, IDebugEventCallbacksWide, HRESULT)
    create_process2 : Proc(IDebugClient6*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, HRESULT)
    create_process2_wide : Proc(IDebugClient6*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    create_process_and_attach2 : Proc(IDebugClient6*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    create_process_and_attach2_wide : Proc(IDebugClient6*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    push_output_line_prefix : Proc(IDebugClient6*, PSTR, UInt64*, HRESULT)
    push_output_line_prefix_wide : Proc(IDebugClient6*, LibC::LPWSTR, UInt64*, HRESULT)
    pop_output_line_prefix : Proc(IDebugClient6*, UInt64, HRESULT)
    get_number_input_callbacks : Proc(IDebugClient6*, UInt32*, HRESULT)
    get_number_output_callbacks : Proc(IDebugClient6*, UInt32*, HRESULT)
    get_number_event_callbacks : Proc(IDebugClient6*, UInt32, UInt32*, HRESULT)
    get_quit_lock_string : Proc(IDebugClient6*, UInt8*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string : Proc(IDebugClient6*, PSTR, HRESULT)
    get_quit_lock_string_wide : Proc(IDebugClient6*, Char*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string_wide : Proc(IDebugClient6*, LibC::LPWSTR, HRESULT)
    set_event_context_callbacks : Proc(IDebugClient6*, IDebugEventContextCallbacks, HRESULT)
  end

  IDebugClient6_GUID = "fd28b4c5-c498-4686-a28e-62cad2154eb3"
  IID_IDebugClient6 = LibC::GUID.new(0xfd28b4c5_u32, 0xc498_u16, 0x4686_u16, StaticArray[0xa2_u8, 0x8e_u8, 0x62_u8, 0xca_u8, 0xd2_u8, 0x15_u8, 0x4e_u8, 0xb3_u8])
  struct IDebugClient6
    lpVtbl : IDebugClient6VTbl*
  end

  struct IDebugClient7VTbl
    query_interface : Proc(IDebugClient7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient7*, UInt32)
    release : Proc(IDebugClient7*, UInt32)
    attach_kernel : Proc(IDebugClient7*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient7*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient7*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient7*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient7*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient7*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient7*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient7*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient7*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient7*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient7*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient7*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient7*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient7*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient7*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient7*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient7*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient7*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient7*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient7*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient7*, HRESULT)
    detach_processes : Proc(IDebugClient7*, HRESULT)
    end_session : Proc(IDebugClient7*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient7*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient7*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient7*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient7*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient7*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient7*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient7*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient7*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient7*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient7*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient7*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient7*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient7*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient7*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient7*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient7*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient7*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient7*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient7*, HRESULT)
    write_dump_file2 : Proc(IDebugClient7*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient7*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient7*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient7*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient7*, HRESULT)
    terminate_current_process : Proc(IDebugClient7*, HRESULT)
    detach_current_process : Proc(IDebugClient7*, HRESULT)
    abandon_current_process : Proc(IDebugClient7*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient7*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient7*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient7*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient7*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
    open_dump_file_wide : Proc(IDebugClient7*, LibC::LPWSTR, UInt64, HRESULT)
    write_dump_file_wide : Proc(IDebugClient7*, LibC::LPWSTR, UInt64, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    add_dump_information_file_wide : Proc(IDebugClient7*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
    get_number_dump_files : Proc(IDebugClient7*, UInt32*, HRESULT)
    get_dump_file : Proc(IDebugClient7*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_dump_file_wide : Proc(IDebugClient7*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    attach_kernel_wide : Proc(IDebugClient7*, UInt32, LibC::LPWSTR, HRESULT)
    get_kernel_connection_options_wide : Proc(IDebugClient7*, Char*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options_wide : Proc(IDebugClient7*, LibC::LPWSTR, HRESULT)
    start_process_server_wide : Proc(IDebugClient7*, UInt32, LibC::LPWSTR, Void*, HRESULT)
    connect_process_server_wide : Proc(IDebugClient7*, LibC::LPWSTR, UInt64*, HRESULT)
    start_server_wide : Proc(IDebugClient7*, LibC::LPWSTR, HRESULT)
    output_servers_wide : Proc(IDebugClient7*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_output_callbacks_wide : Proc(IDebugClient7*, IDebugOutputCallbacksWide*, HRESULT)
    set_output_callbacks_wide : Proc(IDebugClient7*, IDebugOutputCallbacksWide, HRESULT)
    get_output_line_prefix_wide : Proc(IDebugClient7*, Char*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix_wide : Proc(IDebugClient7*, LibC::LPWSTR, HRESULT)
    get_identity_wide : Proc(IDebugClient7*, Char*, UInt32, UInt32*, HRESULT)
    output_identity_wide : Proc(IDebugClient7*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    get_event_callbacks_wide : Proc(IDebugClient7*, IDebugEventCallbacksWide*, HRESULT)
    set_event_callbacks_wide : Proc(IDebugClient7*, IDebugEventCallbacksWide, HRESULT)
    create_process2 : Proc(IDebugClient7*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, HRESULT)
    create_process2_wide : Proc(IDebugClient7*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    create_process_and_attach2 : Proc(IDebugClient7*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    create_process_and_attach2_wide : Proc(IDebugClient7*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    push_output_line_prefix : Proc(IDebugClient7*, PSTR, UInt64*, HRESULT)
    push_output_line_prefix_wide : Proc(IDebugClient7*, LibC::LPWSTR, UInt64*, HRESULT)
    pop_output_line_prefix : Proc(IDebugClient7*, UInt64, HRESULT)
    get_number_input_callbacks : Proc(IDebugClient7*, UInt32*, HRESULT)
    get_number_output_callbacks : Proc(IDebugClient7*, UInt32*, HRESULT)
    get_number_event_callbacks : Proc(IDebugClient7*, UInt32, UInt32*, HRESULT)
    get_quit_lock_string : Proc(IDebugClient7*, UInt8*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string : Proc(IDebugClient7*, PSTR, HRESULT)
    get_quit_lock_string_wide : Proc(IDebugClient7*, Char*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string_wide : Proc(IDebugClient7*, LibC::LPWSTR, HRESULT)
    set_event_context_callbacks : Proc(IDebugClient7*, IDebugEventContextCallbacks, HRESULT)
    set_client_context : Proc(IDebugClient7*, Void*, UInt32, HRESULT)
  end

  IDebugClient7_GUID = "13586be3-542e-481e-b1f2-8497ba74f9a9"
  IID_IDebugClient7 = LibC::GUID.new(0x13586be3_u32, 0x542e_u16, 0x481e_u16, StaticArray[0xb1_u8, 0xf2_u8, 0x84_u8, 0x97_u8, 0xba_u8, 0x74_u8, 0xf9_u8, 0xa9_u8])
  struct IDebugClient7
    lpVtbl : IDebugClient7VTbl*
  end

  struct IDebugClient8VTbl
    query_interface : Proc(IDebugClient8*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugClient8*, UInt32)
    release : Proc(IDebugClient8*, UInt32)
    attach_kernel : Proc(IDebugClient8*, UInt32, PSTR, HRESULT)
    get_kernel_connection_options : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options : Proc(IDebugClient8*, PSTR, HRESULT)
    start_process_server : Proc(IDebugClient8*, UInt32, PSTR, Void*, HRESULT)
    connect_process_server : Proc(IDebugClient8*, PSTR, UInt64*, HRESULT)
    disconnect_process_server : Proc(IDebugClient8*, UInt64, HRESULT)
    get_running_process_system_ids : Proc(IDebugClient8*, UInt64, UInt32*, UInt32, UInt32*, HRESULT)
    get_running_process_system_id_by_executable_name : Proc(IDebugClient8*, UInt64, PSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description : Proc(IDebugClient8*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    attach_process : Proc(IDebugClient8*, UInt64, UInt32, UInt32, HRESULT)
    create_process_a : Proc(IDebugClient8*, UInt64, PSTR, UInt32, HRESULT)
    create_process_and_attach : Proc(IDebugClient8*, UInt64, PSTR, UInt32, UInt32, UInt32, HRESULT)
    get_process_options : Proc(IDebugClient8*, UInt32*, HRESULT)
    add_process_options : Proc(IDebugClient8*, UInt32, HRESULT)
    remove_process_options : Proc(IDebugClient8*, UInt32, HRESULT)
    set_process_options : Proc(IDebugClient8*, UInt32, HRESULT)
    open_dump_file : Proc(IDebugClient8*, PSTR, HRESULT)
    write_dump_file : Proc(IDebugClient8*, PSTR, UInt32, HRESULT)
    connect_session : Proc(IDebugClient8*, UInt32, UInt32, HRESULT)
    start_server : Proc(IDebugClient8*, PSTR, HRESULT)
    output_servers : Proc(IDebugClient8*, UInt32, PSTR, UInt32, HRESULT)
    terminate_processes : Proc(IDebugClient8*, HRESULT)
    detach_processes : Proc(IDebugClient8*, HRESULT)
    end_session : Proc(IDebugClient8*, UInt32, HRESULT)
    get_exit_code : Proc(IDebugClient8*, UInt32*, HRESULT)
    dispatch_callbacks : Proc(IDebugClient8*, UInt32, HRESULT)
    exit_dispatch : Proc(IDebugClient8*, IDebugClient, HRESULT)
    create_client : Proc(IDebugClient8*, IDebugClient*, HRESULT)
    get_input_callbacks : Proc(IDebugClient8*, IDebugInputCallbacks*, HRESULT)
    set_input_callbacks : Proc(IDebugClient8*, IDebugInputCallbacks, HRESULT)
    get_output_callbacks : Proc(IDebugClient8*, IDebugOutputCallbacks*, HRESULT)
    set_output_callbacks : Proc(IDebugClient8*, IDebugOutputCallbacks, HRESULT)
    get_output_mask : Proc(IDebugClient8*, UInt32*, HRESULT)
    set_output_mask : Proc(IDebugClient8*, UInt32, HRESULT)
    get_other_output_mask : Proc(IDebugClient8*, IDebugClient, UInt32*, HRESULT)
    set_other_output_mask : Proc(IDebugClient8*, IDebugClient, UInt32, HRESULT)
    get_output_width : Proc(IDebugClient8*, UInt32*, HRESULT)
    set_output_width : Proc(IDebugClient8*, UInt32, HRESULT)
    get_output_line_prefix : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix : Proc(IDebugClient8*, PSTR, HRESULT)
    get_identity : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, HRESULT)
    output_identity : Proc(IDebugClient8*, UInt32, UInt32, PSTR, HRESULT)
    get_event_callbacks : Proc(IDebugClient8*, IDebugEventCallbacks*, HRESULT)
    set_event_callbacks : Proc(IDebugClient8*, IDebugEventCallbacks, HRESULT)
    flush_callbacks : Proc(IDebugClient8*, HRESULT)
    write_dump_file2 : Proc(IDebugClient8*, PSTR, UInt32, UInt32, PSTR, HRESULT)
    add_dump_information_file : Proc(IDebugClient8*, PSTR, UInt32, HRESULT)
    end_process_server : Proc(IDebugClient8*, UInt64, HRESULT)
    wait_for_process_server_end : Proc(IDebugClient8*, UInt32, HRESULT)
    is_kernel_debugger_enabled : Proc(IDebugClient8*, HRESULT)
    terminate_current_process : Proc(IDebugClient8*, HRESULT)
    detach_current_process : Proc(IDebugClient8*, HRESULT)
    abandon_current_process : Proc(IDebugClient8*, HRESULT)
    get_running_process_system_id_by_executable_name_wide : Proc(IDebugClient8*, UInt64, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_running_process_description_wide : Proc(IDebugClient8*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    create_process_wide : Proc(IDebugClient8*, UInt64, LibC::LPWSTR, UInt32, HRESULT)
    create_process_and_attach_wide : Proc(IDebugClient8*, UInt64, LibC::LPWSTR, UInt32, UInt32, UInt32, HRESULT)
    open_dump_file_wide : Proc(IDebugClient8*, LibC::LPWSTR, UInt64, HRESULT)
    write_dump_file_wide : Proc(IDebugClient8*, LibC::LPWSTR, UInt64, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    add_dump_information_file_wide : Proc(IDebugClient8*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
    get_number_dump_files : Proc(IDebugClient8*, UInt32*, HRESULT)
    get_dump_file : Proc(IDebugClient8*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_dump_file_wide : Proc(IDebugClient8*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    attach_kernel_wide : Proc(IDebugClient8*, UInt32, LibC::LPWSTR, HRESULT)
    get_kernel_connection_options_wide : Proc(IDebugClient8*, Char*, UInt32, UInt32*, HRESULT)
    set_kernel_connection_options_wide : Proc(IDebugClient8*, LibC::LPWSTR, HRESULT)
    start_process_server_wide : Proc(IDebugClient8*, UInt32, LibC::LPWSTR, Void*, HRESULT)
    connect_process_server_wide : Proc(IDebugClient8*, LibC::LPWSTR, UInt64*, HRESULT)
    start_server_wide : Proc(IDebugClient8*, LibC::LPWSTR, HRESULT)
    output_servers_wide : Proc(IDebugClient8*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_output_callbacks_wide : Proc(IDebugClient8*, IDebugOutputCallbacksWide*, HRESULT)
    set_output_callbacks_wide : Proc(IDebugClient8*, IDebugOutputCallbacksWide, HRESULT)
    get_output_line_prefix_wide : Proc(IDebugClient8*, Char*, UInt32, UInt32*, HRESULT)
    set_output_line_prefix_wide : Proc(IDebugClient8*, LibC::LPWSTR, HRESULT)
    get_identity_wide : Proc(IDebugClient8*, Char*, UInt32, UInt32*, HRESULT)
    output_identity_wide : Proc(IDebugClient8*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    get_event_callbacks_wide : Proc(IDebugClient8*, IDebugEventCallbacksWide*, HRESULT)
    set_event_callbacks_wide : Proc(IDebugClient8*, IDebugEventCallbacksWide, HRESULT)
    create_process2 : Proc(IDebugClient8*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, HRESULT)
    create_process2_wide : Proc(IDebugClient8*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    create_process_and_attach2 : Proc(IDebugClient8*, UInt64, PSTR, Void*, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    create_process_and_attach2_wide : Proc(IDebugClient8*, UInt64, LibC::LPWSTR, Void*, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    push_output_line_prefix : Proc(IDebugClient8*, PSTR, UInt64*, HRESULT)
    push_output_line_prefix_wide : Proc(IDebugClient8*, LibC::LPWSTR, UInt64*, HRESULT)
    pop_output_line_prefix : Proc(IDebugClient8*, UInt64, HRESULT)
    get_number_input_callbacks : Proc(IDebugClient8*, UInt32*, HRESULT)
    get_number_output_callbacks : Proc(IDebugClient8*, UInt32*, HRESULT)
    get_number_event_callbacks : Proc(IDebugClient8*, UInt32, UInt32*, HRESULT)
    get_quit_lock_string : Proc(IDebugClient8*, UInt8*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string : Proc(IDebugClient8*, PSTR, HRESULT)
    get_quit_lock_string_wide : Proc(IDebugClient8*, Char*, UInt32, UInt32*, HRESULT)
    set_quit_lock_string_wide : Proc(IDebugClient8*, LibC::LPWSTR, HRESULT)
    set_event_context_callbacks : Proc(IDebugClient8*, IDebugEventContextCallbacks, HRESULT)
    set_client_context : Proc(IDebugClient8*, Void*, UInt32, HRESULT)
    open_dump_file_wide2 : Proc(IDebugClient8*, LibC::LPWSTR, UInt64, UInt32, HRESULT)
  end

  IDebugClient8_GUID = "cec43add-6375-469e-83d5-414e4033c19a"
  IID_IDebugClient8 = LibC::GUID.new(0xcec43add_u32, 0x6375_u16, 0x469e_u16, StaticArray[0x83_u8, 0xd5_u8, 0x41_u8, 0x4e_u8, 0x40_u8, 0x33_u8, 0xc1_u8, 0x9a_u8])
  struct IDebugClient8
    lpVtbl : IDebugClient8VTbl*
  end

  struct IDebugPlmClientVTbl
    query_interface : Proc(IDebugPlmClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPlmClient*, UInt32)
    release : Proc(IDebugPlmClient*, UInt32)
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
  end

  IDebugPlmClient_GUID = "a02b66c4-aea3-4234-a9f7-fe4c383d4e29"
  IID_IDebugPlmClient = LibC::GUID.new(0xa02b66c4_u32, 0xaea3_u16, 0x4234_u16, StaticArray[0xa9_u8, 0xf7_u8, 0xfe_u8, 0x4c_u8, 0x38_u8, 0x3d_u8, 0x4e_u8, 0x29_u8])
  struct IDebugPlmClient
    lpVtbl : IDebugPlmClientVTbl*
  end

  struct IDebugPlmClient2VTbl
    query_interface : Proc(IDebugPlmClient2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPlmClient2*, UInt32)
    release : Proc(IDebugPlmClient2*, UInt32)
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient2*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    launch_plm_bg_task_for_debug_wide : Proc(IDebugPlmClient2*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
  end

  IDebugPlmClient2_GUID = "597c980d-e7bd-4309-962c-9d9b69a7372c"
  IID_IDebugPlmClient2 = LibC::GUID.new(0x597c980d_u32, 0xe7bd_u16, 0x4309_u16, StaticArray[0x96_u8, 0x2c_u8, 0x9d_u8, 0x9b_u8, 0x69_u8, 0xa7_u8, 0x37_u8, 0x2c_u8])
  struct IDebugPlmClient2
    lpVtbl : IDebugPlmClient2VTbl*
  end

  struct IDebugPlmClient3VTbl
    query_interface : Proc(IDebugPlmClient3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPlmClient3*, UInt32)
    release : Proc(IDebugPlmClient3*, UInt32)
    launch_plm_package_for_debug_wide : Proc(IDebugPlmClient3*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    launch_plm_bg_task_for_debug_wide : Proc(IDebugPlmClient3*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    query_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, IDebugOutputStream, HRESULT)
    query_plm_package_list : Proc(IDebugPlmClient3*, UInt64, IDebugOutputStream, HRESULT)
    enable_plm_package_debug_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, HRESULT)
    disable_plm_package_debug_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, HRESULT)
    suspend_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, HRESULT)
    resume_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, HRESULT)
    terminate_plm_package_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, HRESULT)
    launch_and_debug_plm_app_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    activate_and_debug_plm_bg_task_wide : Proc(IDebugPlmClient3*, UInt64, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  IDebugPlmClient3_GUID = "d4a5dbd1-ca02-4d90-856a-2a92bfd0f20f"
  IID_IDebugPlmClient3 = LibC::GUID.new(0xd4a5dbd1_u32, 0xca02_u16, 0x4d90_u16, StaticArray[0x85_u8, 0x6a_u8, 0x2a_u8, 0x92_u8, 0xbf_u8, 0xd0_u8, 0xf2_u8, 0xf_u8])
  struct IDebugPlmClient3
    lpVtbl : IDebugPlmClient3VTbl*
  end

  struct IDebugOutputStreamVTbl
    query_interface : Proc(IDebugOutputStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugOutputStream*, UInt32)
    release : Proc(IDebugOutputStream*, UInt32)
    write : Proc(IDebugOutputStream*, LibC::LPWSTR, HRESULT)
  end

  IDebugOutputStream_GUID = "7782d8f2-2b85-4059-ab88-28ceddca1c80"
  IID_IDebugOutputStream = LibC::GUID.new(0x7782d8f2_u32, 0x2b85_u16, 0x4059_u16, StaticArray[0xab_u8, 0x88_u8, 0x28_u8, 0xce_u8, 0xdd_u8, 0xca_u8, 0x1c_u8, 0x80_u8])
  struct IDebugOutputStream
    lpVtbl : IDebugOutputStreamVTbl*
  end

  struct IDebugControlVTbl
    query_interface : Proc(IDebugControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl*, UInt32)
    release : Proc(IDebugControl*, UInt32)
    get_interrupt : Proc(IDebugControl*, HRESULT)
    set_interrupt : Proc(IDebugControl*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl*, HRESULT)
    get_log_mask : Proc(IDebugControl*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl*, UInt32, HRESULT)
    input : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl*, PSTR, HRESULT)
    output : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl*, UInt64, HRESULT)
    assemble : Proc(IDebugControl*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl*, HRESULT)
    read_bug_check_data : Proc(IDebugControl*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
  end

  IDebugControl_GUID = "5182e668-105e-416e-ad92-24ef800424ba"
  IID_IDebugControl = LibC::GUID.new(0x5182e668_u32, 0x105e_u16, 0x416e_u16, StaticArray[0xad_u8, 0x92_u8, 0x24_u8, 0xef_u8, 0x80_u8, 0x4_u8, 0x24_u8, 0xba_u8])
  struct IDebugControl
    lpVtbl : IDebugControlVTbl*
  end

  struct IDebugControl2VTbl
    query_interface : Proc(IDebugControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl2*, UInt32)
    release : Proc(IDebugControl2*, UInt32)
    get_interrupt : Proc(IDebugControl2*, HRESULT)
    set_interrupt : Proc(IDebugControl2*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl2*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl2*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl2*, HRESULT)
    get_log_mask : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl2*, UInt32, HRESULT)
    input : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl2*, PSTR, HRESULT)
    output : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl2*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl2*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl2*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl2*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl2*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl2*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl2*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl2*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl2*, UInt64, HRESULT)
    assemble : Proc(IDebugControl2*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl2*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl2*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl2*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl2*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl2*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl2*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl2*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl2*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl2*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl2*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl2*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl2*, HRESULT)
    read_bug_check_data : Proc(IDebugControl2*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl2*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl2*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl2*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl2*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl2*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl2*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl2*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl2*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl2*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl2*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl2*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl2*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl2*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl2*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl2*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl2*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl2*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl2*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl2*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl2*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl2*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl2*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl2*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl2*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl2*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl2*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl2*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl2*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl2*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl2*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl2*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl2*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl2*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl2*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl2*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl2*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl2*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl2*, HRESULT)
    output_text_replacements : Proc(IDebugControl2*, UInt32, UInt32, HRESULT)
  end

  IDebugControl2_GUID = "d4366723-44df-4bed-8c7e-4c05424f4588"
  IID_IDebugControl2 = LibC::GUID.new(0xd4366723_u32, 0x44df_u16, 0x4bed_u16, StaticArray[0x8c_u8, 0x7e_u8, 0x4c_u8, 0x5_u8, 0x42_u8, 0x4f_u8, 0x45_u8, 0x88_u8])
  struct IDebugControl2
    lpVtbl : IDebugControl2VTbl*
  end

  struct IDebugControl3VTbl
    query_interface : Proc(IDebugControl3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl3*, UInt32)
    release : Proc(IDebugControl3*, UInt32)
    get_interrupt : Proc(IDebugControl3*, HRESULT)
    set_interrupt : Proc(IDebugControl3*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl3*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl3*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl3*, HRESULT)
    get_log_mask : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl3*, UInt32, HRESULT)
    input : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl3*, PSTR, HRESULT)
    output : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl3*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl3*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl3*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl3*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl3*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl3*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl3*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl3*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl3*, UInt64, HRESULT)
    assemble : Proc(IDebugControl3*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl3*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl3*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl3*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl3*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl3*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl3*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl3*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl3*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl3*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl3*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl3*, HRESULT)
    read_bug_check_data : Proc(IDebugControl3*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl3*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl3*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl3*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl3*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl3*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl3*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl3*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl3*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl3*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl3*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl3*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl3*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl3*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl3*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl3*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl3*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl3*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl3*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl3*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl3*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl3*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl3*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl3*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl3*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl3*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl3*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl3*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl3*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl3*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl3*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl3*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl3*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl3*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl3*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl3*, HRESULT)
    output_text_replacements : Proc(IDebugControl3*, UInt32, UInt32, HRESULT)
    get_assembly_options : Proc(IDebugControl3*, UInt32*, HRESULT)
    add_assembly_options : Proc(IDebugControl3*, UInt32, HRESULT)
    remove_assembly_options : Proc(IDebugControl3*, UInt32, HRESULT)
    set_assembly_options : Proc(IDebugControl3*, UInt32, HRESULT)
    get_expression_syntax : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_expression_syntax : Proc(IDebugControl3*, UInt32, HRESULT)
    set_expression_syntax_by_name : Proc(IDebugControl3*, PSTR, HRESULT)
    get_number_expression_syntaxes : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_expression_syntax_names : Proc(IDebugControl3*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_number_events : Proc(IDebugControl3*, UInt32*, HRESULT)
    get_event_index_description : Proc(IDebugControl3*, UInt32, UInt32, PSTR, UInt32, UInt32*, HRESULT)
    get_current_event_index : Proc(IDebugControl3*, UInt32*, HRESULT)
    set_next_event_index : Proc(IDebugControl3*, UInt32, UInt32, UInt32*, HRESULT)
  end

  IDebugControl3_GUID = "7df74a86-b03f-407f-90ab-a20dadcead08"
  IID_IDebugControl3 = LibC::GUID.new(0x7df74a86_u32, 0xb03f_u16, 0x407f_u16, StaticArray[0x90_u8, 0xab_u8, 0xa2_u8, 0xd_u8, 0xad_u8, 0xce_u8, 0xad_u8, 0x8_u8])
  struct IDebugControl3
    lpVtbl : IDebugControl3VTbl*
  end

  struct IDebugControl4VTbl
    query_interface : Proc(IDebugControl4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl4*, UInt32)
    release : Proc(IDebugControl4*, UInt32)
    get_interrupt : Proc(IDebugControl4*, HRESULT)
    set_interrupt : Proc(IDebugControl4*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl4*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl4*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl4*, HRESULT)
    get_log_mask : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl4*, UInt32, HRESULT)
    input : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl4*, PSTR, HRESULT)
    output : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl4*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl4*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl4*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl4*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl4*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl4*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl4*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl4*, UInt64, HRESULT)
    assemble : Proc(IDebugControl4*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl4*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl4*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl4*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl4*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl4*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl4*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl4*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl4*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl4*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl4*, HRESULT)
    read_bug_check_data : Proc(IDebugControl4*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl4*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl4*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl4*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl4*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl4*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl4*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl4*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl4*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl4*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl4*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl4*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl4*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl4*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl4*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl4*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl4*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl4*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl4*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl4*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl4*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl4*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl4*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl4*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl4*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl4*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl4*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl4*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl4*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl4*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl4*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl4*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl4*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl4*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl4*, HRESULT)
    output_text_replacements : Proc(IDebugControl4*, UInt32, UInt32, HRESULT)
    get_assembly_options : Proc(IDebugControl4*, UInt32*, HRESULT)
    add_assembly_options : Proc(IDebugControl4*, UInt32, HRESULT)
    remove_assembly_options : Proc(IDebugControl4*, UInt32, HRESULT)
    set_assembly_options : Proc(IDebugControl4*, UInt32, HRESULT)
    get_expression_syntax : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_expression_syntax : Proc(IDebugControl4*, UInt32, HRESULT)
    set_expression_syntax_by_name : Proc(IDebugControl4*, PSTR, HRESULT)
    get_number_expression_syntaxes : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_expression_syntax_names : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_number_events : Proc(IDebugControl4*, UInt32*, HRESULT)
    get_event_index_description : Proc(IDebugControl4*, UInt32, UInt32, PSTR, UInt32, UInt32*, HRESULT)
    get_current_event_index : Proc(IDebugControl4*, UInt32*, HRESULT)
    set_next_event_index : Proc(IDebugControl4*, UInt32, UInt32, UInt32*, HRESULT)
    get_log_file_wide : Proc(IDebugControl4*, Char*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file_wide : Proc(IDebugControl4*, LibC::LPWSTR, LibC::BOOL, HRESULT)
    input_wide : Proc(IDebugControl4*, Char*, UInt32, UInt32*, HRESULT)
    return_input_wide : Proc(IDebugControl4*, LibC::LPWSTR, HRESULT)
    output_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    output_va_list_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    controlled_output_wide : Proc(IDebugControl4*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    controlled_output_va_list_wide : Proc(IDebugControl4*, UInt32, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    output_prompt_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    output_prompt_va_list_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    get_prompt_text_wide : Proc(IDebugControl4*, Char*, UInt32, UInt32*, HRESULT)
    assemble_wide : Proc(IDebugControl4*, UInt64, LibC::LPWSTR, UInt64*, HRESULT)
    disassemble_wide : Proc(IDebugControl4*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_processor_type_names_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_macro_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_text_macro_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    evaluate_wide : Proc(IDebugControl4*, LibC::LPWSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    execute_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    execute_command_file_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_breakpoint_by_index2 : Proc(IDebugControl4*, UInt32, IDebugBreakpoint2*, HRESULT)
    get_breakpoint_by_id2 : Proc(IDebugControl4*, UInt32, IDebugBreakpoint2*, HRESULT)
    add_breakpoint2 : Proc(IDebugControl4*, UInt32, UInt32, IDebugBreakpoint2*, HRESULT)
    remove_breakpoint2 : Proc(IDebugControl4*, IDebugBreakpoint2, HRESULT)
    add_extension_wide : Proc(IDebugControl4*, LibC::LPWSTR, UInt32, UInt64*, HRESULT)
    get_extension_by_path_wide : Proc(IDebugControl4*, LibC::LPWSTR, UInt64*, HRESULT)
    call_extension_wide : Proc(IDebugControl4*, UInt64, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_extension_function_wide : Proc(IDebugControl4*, UInt64, LibC::LPWSTR, FARPROC*, HRESULT)
    get_event_filter_text_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_event_filter_command_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_event_filter_command_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    get_specific_filter_argument_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    get_exception_filter_second_command_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command_wide : Proc(IDebugControl4*, UInt32, LibC::LPWSTR, HRESULT)
    get_last_event_information_wide : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_replacement_wide : Proc(IDebugControl4*, LibC::LPWSTR, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    set_text_replacement_wide : Proc(IDebugControl4*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    set_expression_syntax_by_name_wide : Proc(IDebugControl4*, LibC::LPWSTR, HRESULT)
    get_expression_syntax_names_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_event_index_description_wide : Proc(IDebugControl4*, UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_log_file2 : Proc(IDebugControl4*, UInt8*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2 : Proc(IDebugControl4*, PSTR, UInt32, HRESULT)
    get_log_file2_wide : Proc(IDebugControl4*, Char*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2_wide : Proc(IDebugControl4*, LibC::LPWSTR, UInt32, HRESULT)
    get_system_version_values : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_system_version_string : Proc(IDebugControl4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_version_string_wide : Proc(IDebugControl4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_context_stack_trace : Proc(IDebugControl4*, Void*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace : Proc(IDebugControl4*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_stored_event_information : Proc(IDebugControl4*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, HRESULT)
    get_managed_status : Proc(IDebugControl4*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_managed_status_wide : Proc(IDebugControl4*, UInt32*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    reset_managed_status : Proc(IDebugControl4*, UInt32, HRESULT)
  end

  IDebugControl4_GUID = "94e60ce9-9b41-4b19-9fc0-6d9eb35272b3"
  IID_IDebugControl4 = LibC::GUID.new(0x94e60ce9_u32, 0x9b41_u16, 0x4b19_u16, StaticArray[0x9f_u8, 0xc0_u8, 0x6d_u8, 0x9e_u8, 0xb3_u8, 0x52_u8, 0x72_u8, 0xb3_u8])
  struct IDebugControl4
    lpVtbl : IDebugControl4VTbl*
  end

  struct IDebugControl5VTbl
    query_interface : Proc(IDebugControl5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl5*, UInt32)
    release : Proc(IDebugControl5*, UInt32)
    get_interrupt : Proc(IDebugControl5*, HRESULT)
    set_interrupt : Proc(IDebugControl5*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl5*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl5*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl5*, HRESULT)
    get_log_mask : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl5*, UInt32, HRESULT)
    input : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl5*, PSTR, HRESULT)
    output : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl5*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl5*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl5*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl5*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl5*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl5*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl5*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl5*, UInt64, HRESULT)
    assemble : Proc(IDebugControl5*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl5*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl5*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl5*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl5*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl5*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl5*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl5*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl5*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl5*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl5*, HRESULT)
    read_bug_check_data : Proc(IDebugControl5*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl5*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl5*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl5*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl5*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl5*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl5*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl5*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl5*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl5*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl5*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl5*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl5*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl5*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl5*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl5*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl5*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl5*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl5*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl5*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl5*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl5*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl5*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl5*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl5*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl5*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl5*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl5*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl5*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl5*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl5*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl5*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl5*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl5*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl5*, HRESULT)
    output_text_replacements : Proc(IDebugControl5*, UInt32, UInt32, HRESULT)
    get_assembly_options : Proc(IDebugControl5*, UInt32*, HRESULT)
    add_assembly_options : Proc(IDebugControl5*, UInt32, HRESULT)
    remove_assembly_options : Proc(IDebugControl5*, UInt32, HRESULT)
    set_assembly_options : Proc(IDebugControl5*, UInt32, HRESULT)
    get_expression_syntax : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_expression_syntax : Proc(IDebugControl5*, UInt32, HRESULT)
    set_expression_syntax_by_name : Proc(IDebugControl5*, PSTR, HRESULT)
    get_number_expression_syntaxes : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_expression_syntax_names : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_number_events : Proc(IDebugControl5*, UInt32*, HRESULT)
    get_event_index_description : Proc(IDebugControl5*, UInt32, UInt32, PSTR, UInt32, UInt32*, HRESULT)
    get_current_event_index : Proc(IDebugControl5*, UInt32*, HRESULT)
    set_next_event_index : Proc(IDebugControl5*, UInt32, UInt32, UInt32*, HRESULT)
    get_log_file_wide : Proc(IDebugControl5*, Char*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file_wide : Proc(IDebugControl5*, LibC::LPWSTR, LibC::BOOL, HRESULT)
    input_wide : Proc(IDebugControl5*, Char*, UInt32, UInt32*, HRESULT)
    return_input_wide : Proc(IDebugControl5*, LibC::LPWSTR, HRESULT)
    output_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    output_va_list_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    controlled_output_wide : Proc(IDebugControl5*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    controlled_output_va_list_wide : Proc(IDebugControl5*, UInt32, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    output_prompt_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    output_prompt_va_list_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    get_prompt_text_wide : Proc(IDebugControl5*, Char*, UInt32, UInt32*, HRESULT)
    assemble_wide : Proc(IDebugControl5*, UInt64, LibC::LPWSTR, UInt64*, HRESULT)
    disassemble_wide : Proc(IDebugControl5*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_processor_type_names_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_macro_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_text_macro_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    evaluate_wide : Proc(IDebugControl5*, LibC::LPWSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    execute_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    execute_command_file_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_breakpoint_by_index2 : Proc(IDebugControl5*, UInt32, IDebugBreakpoint2*, HRESULT)
    get_breakpoint_by_id2 : Proc(IDebugControl5*, UInt32, IDebugBreakpoint2*, HRESULT)
    add_breakpoint2 : Proc(IDebugControl5*, UInt32, UInt32, IDebugBreakpoint2*, HRESULT)
    remove_breakpoint2 : Proc(IDebugControl5*, IDebugBreakpoint2, HRESULT)
    add_extension_wide : Proc(IDebugControl5*, LibC::LPWSTR, UInt32, UInt64*, HRESULT)
    get_extension_by_path_wide : Proc(IDebugControl5*, LibC::LPWSTR, UInt64*, HRESULT)
    call_extension_wide : Proc(IDebugControl5*, UInt64, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_extension_function_wide : Proc(IDebugControl5*, UInt64, LibC::LPWSTR, FARPROC*, HRESULT)
    get_event_filter_text_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_event_filter_command_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_event_filter_command_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    get_specific_filter_argument_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    get_exception_filter_second_command_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command_wide : Proc(IDebugControl5*, UInt32, LibC::LPWSTR, HRESULT)
    get_last_event_information_wide : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_replacement_wide : Proc(IDebugControl5*, LibC::LPWSTR, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    set_text_replacement_wide : Proc(IDebugControl5*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    set_expression_syntax_by_name_wide : Proc(IDebugControl5*, LibC::LPWSTR, HRESULT)
    get_expression_syntax_names_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_event_index_description_wide : Proc(IDebugControl5*, UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_log_file2 : Proc(IDebugControl5*, UInt8*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2 : Proc(IDebugControl5*, PSTR, UInt32, HRESULT)
    get_log_file2_wide : Proc(IDebugControl5*, Char*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2_wide : Proc(IDebugControl5*, LibC::LPWSTR, UInt32, HRESULT)
    get_system_version_values : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_system_version_string : Proc(IDebugControl5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_version_string_wide : Proc(IDebugControl5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_context_stack_trace : Proc(IDebugControl5*, Void*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace : Proc(IDebugControl5*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_stored_event_information : Proc(IDebugControl5*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, HRESULT)
    get_managed_status : Proc(IDebugControl5*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_managed_status_wide : Proc(IDebugControl5*, UInt32*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    reset_managed_status : Proc(IDebugControl5*, UInt32, HRESULT)
    get_stack_trace_ex : Proc(IDebugControl5*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, HRESULT)
    output_stack_trace_ex : Proc(IDebugControl5*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, UInt32, HRESULT)
    get_context_stack_trace_ex : Proc(IDebugControl5*, Void*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace_ex : Proc(IDebugControl5*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_breakpoint_by_guid : Proc(IDebugControl5*, Guid*, IDebugBreakpoint3*, HRESULT)
  end

  IDebugControl5_GUID = "b2ffe162-2412-429f-8d1d-5bf6dd824696"
  IID_IDebugControl5 = LibC::GUID.new(0xb2ffe162_u32, 0x2412_u16, 0x429f_u16, StaticArray[0x8d_u8, 0x1d_u8, 0x5b_u8, 0xf6_u8, 0xdd_u8, 0x82_u8, 0x46_u8, 0x96_u8])
  struct IDebugControl5
    lpVtbl : IDebugControl5VTbl*
  end

  struct IDebugControl6VTbl
    query_interface : Proc(IDebugControl6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl6*, UInt32)
    release : Proc(IDebugControl6*, UInt32)
    get_interrupt : Proc(IDebugControl6*, HRESULT)
    set_interrupt : Proc(IDebugControl6*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl6*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl6*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl6*, HRESULT)
    get_log_mask : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl6*, UInt32, HRESULT)
    input : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl6*, PSTR, HRESULT)
    output : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl6*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl6*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl6*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl6*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl6*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl6*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl6*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl6*, UInt64, HRESULT)
    assemble : Proc(IDebugControl6*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl6*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl6*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl6*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl6*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl6*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl6*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl6*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl6*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl6*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl6*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl6*, HRESULT)
    read_bug_check_data : Proc(IDebugControl6*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl6*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl6*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl6*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl6*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl6*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl6*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl6*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl6*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl6*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl6*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl6*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl6*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl6*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl6*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl6*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl6*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl6*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl6*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl6*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl6*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl6*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl6*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl6*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl6*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl6*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl6*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl6*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl6*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl6*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl6*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl6*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl6*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl6*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl6*, HRESULT)
    output_text_replacements : Proc(IDebugControl6*, UInt32, UInt32, HRESULT)
    get_assembly_options : Proc(IDebugControl6*, UInt32*, HRESULT)
    add_assembly_options : Proc(IDebugControl6*, UInt32, HRESULT)
    remove_assembly_options : Proc(IDebugControl6*, UInt32, HRESULT)
    set_assembly_options : Proc(IDebugControl6*, UInt32, HRESULT)
    get_expression_syntax : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_expression_syntax : Proc(IDebugControl6*, UInt32, HRESULT)
    set_expression_syntax_by_name : Proc(IDebugControl6*, PSTR, HRESULT)
    get_number_expression_syntaxes : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_expression_syntax_names : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_number_events : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_event_index_description : Proc(IDebugControl6*, UInt32, UInt32, PSTR, UInt32, UInt32*, HRESULT)
    get_current_event_index : Proc(IDebugControl6*, UInt32*, HRESULT)
    set_next_event_index : Proc(IDebugControl6*, UInt32, UInt32, UInt32*, HRESULT)
    get_log_file_wide : Proc(IDebugControl6*, Char*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file_wide : Proc(IDebugControl6*, LibC::LPWSTR, LibC::BOOL, HRESULT)
    input_wide : Proc(IDebugControl6*, Char*, UInt32, UInt32*, HRESULT)
    return_input_wide : Proc(IDebugControl6*, LibC::LPWSTR, HRESULT)
    output_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    output_va_list_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    controlled_output_wide : Proc(IDebugControl6*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    controlled_output_va_list_wide : Proc(IDebugControl6*, UInt32, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    output_prompt_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    output_prompt_va_list_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    get_prompt_text_wide : Proc(IDebugControl6*, Char*, UInt32, UInt32*, HRESULT)
    assemble_wide : Proc(IDebugControl6*, UInt64, LibC::LPWSTR, UInt64*, HRESULT)
    disassemble_wide : Proc(IDebugControl6*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_processor_type_names_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_macro_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_text_macro_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    evaluate_wide : Proc(IDebugControl6*, LibC::LPWSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    execute_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    execute_command_file_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_breakpoint_by_index2 : Proc(IDebugControl6*, UInt32, IDebugBreakpoint2*, HRESULT)
    get_breakpoint_by_id2 : Proc(IDebugControl6*, UInt32, IDebugBreakpoint2*, HRESULT)
    add_breakpoint2 : Proc(IDebugControl6*, UInt32, UInt32, IDebugBreakpoint2*, HRESULT)
    remove_breakpoint2 : Proc(IDebugControl6*, IDebugBreakpoint2, HRESULT)
    add_extension_wide : Proc(IDebugControl6*, LibC::LPWSTR, UInt32, UInt64*, HRESULT)
    get_extension_by_path_wide : Proc(IDebugControl6*, LibC::LPWSTR, UInt64*, HRESULT)
    call_extension_wide : Proc(IDebugControl6*, UInt64, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_extension_function_wide : Proc(IDebugControl6*, UInt64, LibC::LPWSTR, FARPROC*, HRESULT)
    get_event_filter_text_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_event_filter_command_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_event_filter_command_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    get_specific_filter_argument_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    get_exception_filter_second_command_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command_wide : Proc(IDebugControl6*, UInt32, LibC::LPWSTR, HRESULT)
    get_last_event_information_wide : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_replacement_wide : Proc(IDebugControl6*, LibC::LPWSTR, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    set_text_replacement_wide : Proc(IDebugControl6*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    set_expression_syntax_by_name_wide : Proc(IDebugControl6*, LibC::LPWSTR, HRESULT)
    get_expression_syntax_names_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_event_index_description_wide : Proc(IDebugControl6*, UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_log_file2 : Proc(IDebugControl6*, UInt8*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2 : Proc(IDebugControl6*, PSTR, UInt32, HRESULT)
    get_log_file2_wide : Proc(IDebugControl6*, Char*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2_wide : Proc(IDebugControl6*, LibC::LPWSTR, UInt32, HRESULT)
    get_system_version_values : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_system_version_string : Proc(IDebugControl6*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_version_string_wide : Proc(IDebugControl6*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_context_stack_trace : Proc(IDebugControl6*, Void*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace : Proc(IDebugControl6*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_stored_event_information : Proc(IDebugControl6*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, HRESULT)
    get_managed_status : Proc(IDebugControl6*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_managed_status_wide : Proc(IDebugControl6*, UInt32*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    reset_managed_status : Proc(IDebugControl6*, UInt32, HRESULT)
    get_stack_trace_ex : Proc(IDebugControl6*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, HRESULT)
    output_stack_trace_ex : Proc(IDebugControl6*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, UInt32, HRESULT)
    get_context_stack_trace_ex : Proc(IDebugControl6*, Void*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace_ex : Proc(IDebugControl6*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_breakpoint_by_guid : Proc(IDebugControl6*, Guid*, IDebugBreakpoint3*, HRESULT)
    get_execution_status_ex : Proc(IDebugControl6*, UInt32*, HRESULT)
    get_synchronization_status : Proc(IDebugControl6*, UInt32*, UInt32*, HRESULT)
  end

  IDebugControl6_GUID = "bc0d583f-126d-43a1-9cc4-a860ab1d537b"
  IID_IDebugControl6 = LibC::GUID.new(0xbc0d583f_u32, 0x126d_u16, 0x43a1_u16, StaticArray[0x9c_u8, 0xc4_u8, 0xa8_u8, 0x60_u8, 0xab_u8, 0x1d_u8, 0x53_u8, 0x7b_u8])
  struct IDebugControl6
    lpVtbl : IDebugControl6VTbl*
  end

  struct IDebugControl7VTbl
    query_interface : Proc(IDebugControl7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugControl7*, UInt32)
    release : Proc(IDebugControl7*, UInt32)
    get_interrupt : Proc(IDebugControl7*, HRESULT)
    set_interrupt : Proc(IDebugControl7*, UInt32, HRESULT)
    get_interrupt_timeout : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_interrupt_timeout : Proc(IDebugControl7*, UInt32, HRESULT)
    get_log_file : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file : Proc(IDebugControl7*, PSTR, LibC::BOOL, HRESULT)
    close_log_file : Proc(IDebugControl7*, HRESULT)
    get_log_mask : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_log_mask : Proc(IDebugControl7*, UInt32, HRESULT)
    input : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, HRESULT)
    return_input : Proc(IDebugControl7*, PSTR, HRESULT)
    output : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    output_va_list : Proc(IDebugControl7*, UInt32, PSTR, Int8*, HRESULT)
    controlled_output : Proc(IDebugControl7*, UInt32, UInt32, PSTR, HRESULT)
    controlled_output_va_list : Proc(IDebugControl7*, UInt32, UInt32, PSTR, Int8*, HRESULT)
    output_prompt : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    output_prompt_va_list : Proc(IDebugControl7*, UInt32, PSTR, Int8*, HRESULT)
    get_prompt_text : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, HRESULT)
    output_current_state : Proc(IDebugControl7*, UInt32, UInt32, HRESULT)
    output_version_information : Proc(IDebugControl7*, UInt32, HRESULT)
    get_notify_event_handle : Proc(IDebugControl7*, UInt64*, HRESULT)
    set_notify_event_handle : Proc(IDebugControl7*, UInt64, HRESULT)
    assemble : Proc(IDebugControl7*, UInt64, PSTR, UInt64*, HRESULT)
    disassemble : Proc(IDebugControl7*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_disassemble_effective_offset : Proc(IDebugControl7*, UInt64*, HRESULT)
    output_disassembly : Proc(IDebugControl7*, UInt32, UInt64, UInt32, UInt64*, HRESULT)
    output_disassembly_lines : Proc(IDebugControl7*, UInt32, UInt32, UInt32, UInt64, UInt32, UInt32*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_near_instruction : Proc(IDebugControl7*, UInt64, Int32, UInt64*, HRESULT)
    get_stack_trace : Proc(IDebugControl7*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME*, UInt32, UInt32*, HRESULT)
    get_return_offset : Proc(IDebugControl7*, UInt64*, HRESULT)
    output_stack_trace : Proc(IDebugControl7*, UInt32, DEBUG_STACK_FRAME*, UInt32, UInt32, HRESULT)
    get_debuggee_type : Proc(IDebugControl7*, UInt32*, UInt32*, HRESULT)
    get_actual_processor_type : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_executing_processor_type : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_number_possible_executing_processor_types : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_possible_executing_processor_types : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, HRESULT)
    get_number_processors : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_system_version : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_page_size : Proc(IDebugControl7*, UInt32*, HRESULT)
    is_pointer64_bit : Proc(IDebugControl7*, HRESULT)
    read_bug_check_data : Proc(IDebugControl7*, UInt32*, UInt64*, UInt64*, UInt64*, UInt64*, HRESULT)
    get_number_supported_processor_types : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_supported_processor_types : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, HRESULT)
    get_processor_type_names : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_effective_processor_type : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_effective_processor_type : Proc(IDebugControl7*, UInt32, HRESULT)
    get_execution_status : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_execution_status : Proc(IDebugControl7*, UInt32, HRESULT)
    get_code_level : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_code_level : Proc(IDebugControl7*, UInt32, HRESULT)
    get_engine_options : Proc(IDebugControl7*, UInt32*, HRESULT)
    add_engine_options : Proc(IDebugControl7*, UInt32, HRESULT)
    remove_engine_options : Proc(IDebugControl7*, UInt32, HRESULT)
    set_engine_options : Proc(IDebugControl7*, UInt32, HRESULT)
    get_system_error_control : Proc(IDebugControl7*, UInt32*, UInt32*, HRESULT)
    set_system_error_control : Proc(IDebugControl7*, UInt32, UInt32, HRESULT)
    get_text_macro : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_macro : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    get_radix : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_radix : Proc(IDebugControl7*, UInt32, HRESULT)
    evaluate : Proc(IDebugControl7*, PSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    coerce_value : Proc(IDebugControl7*, DEBUG_VALUE*, UInt32, DEBUG_VALUE*, HRESULT)
    coerce_values : Proc(IDebugControl7*, UInt32, DEBUG_VALUE*, UInt32*, DEBUG_VALUE*, HRESULT)
    execute : Proc(IDebugControl7*, UInt32, PSTR, UInt32, HRESULT)
    execute_command_file : Proc(IDebugControl7*, UInt32, PSTR, UInt32, HRESULT)
    get_number_breakpoints : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_breakpoint_by_index : Proc(IDebugControl7*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_by_id : Proc(IDebugControl7*, UInt32, IDebugBreakpoint*, HRESULT)
    get_breakpoint_parameters : Proc(IDebugControl7*, UInt32, UInt32*, UInt32, DEBUG_BREAKPOINT_PARAMETERS*, HRESULT)
    add_breakpoint : Proc(IDebugControl7*, UInt32, UInt32, IDebugBreakpoint*, HRESULT)
    remove_breakpoint : Proc(IDebugControl7*, IDebugBreakpoint, HRESULT)
    add_extension : Proc(IDebugControl7*, PSTR, UInt32, UInt64*, HRESULT)
    remove_extension : Proc(IDebugControl7*, UInt64, HRESULT)
    get_extension_by_path : Proc(IDebugControl7*, PSTR, UInt64*, HRESULT)
    call_extension : Proc(IDebugControl7*, UInt64, PSTR, PSTR, HRESULT)
    get_extension_function : Proc(IDebugControl7*, UInt64, PSTR, FARPROC*, HRESULT)
    get_windbg_extension_apis32 : Proc(IDebugControl7*, WINDBG_EXTENSION_APIS32*, HRESULT)
    get_windbg_extension_apis64 : Proc(IDebugControl7*, WINDBG_EXTENSION_APIS64*, HRESULT)
    get_number_event_filters : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_event_filter_text : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_event_filter_command : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_event_filter_command : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    get_specific_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    set_specific_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32, DEBUG_SPECIFIC_FILTER_PARAMETERS*, HRESULT)
    get_specific_filter_argument : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    get_exception_filter_parameters : Proc(IDebugControl7*, UInt32, UInt32*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    set_exception_filter_parameters : Proc(IDebugControl7*, UInt32, DEBUG_EXCEPTION_FILTER_PARAMETERS*, HRESULT)
    get_exception_filter_second_command : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command : Proc(IDebugControl7*, UInt32, PSTR, HRESULT)
    wait_for_event : Proc(IDebugControl7*, UInt32, UInt32, HRESULT)
    get_last_event_information : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_time_date : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_current_system_up_time : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_dump_format_flags : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_number_text_replacements : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_text_replacement : Proc(IDebugControl7*, PSTR, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    set_text_replacement : Proc(IDebugControl7*, PSTR, PSTR, HRESULT)
    remove_text_replacements : Proc(IDebugControl7*, HRESULT)
    output_text_replacements : Proc(IDebugControl7*, UInt32, UInt32, HRESULT)
    get_assembly_options : Proc(IDebugControl7*, UInt32*, HRESULT)
    add_assembly_options : Proc(IDebugControl7*, UInt32, HRESULT)
    remove_assembly_options : Proc(IDebugControl7*, UInt32, HRESULT)
    set_assembly_options : Proc(IDebugControl7*, UInt32, HRESULT)
    get_expression_syntax : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_expression_syntax : Proc(IDebugControl7*, UInt32, HRESULT)
    set_expression_syntax_by_name : Proc(IDebugControl7*, PSTR, HRESULT)
    get_number_expression_syntaxes : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_expression_syntax_names : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_number_events : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_event_index_description : Proc(IDebugControl7*, UInt32, UInt32, PSTR, UInt32, UInt32*, HRESULT)
    get_current_event_index : Proc(IDebugControl7*, UInt32*, HRESULT)
    set_next_event_index : Proc(IDebugControl7*, UInt32, UInt32, UInt32*, HRESULT)
    get_log_file_wide : Proc(IDebugControl7*, Char*, UInt32, UInt32*, LibC::BOOL*, HRESULT)
    open_log_file_wide : Proc(IDebugControl7*, LibC::LPWSTR, LibC::BOOL, HRESULT)
    input_wide : Proc(IDebugControl7*, Char*, UInt32, UInt32*, HRESULT)
    return_input_wide : Proc(IDebugControl7*, LibC::LPWSTR, HRESULT)
    output_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    output_va_list_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    controlled_output_wide : Proc(IDebugControl7*, UInt32, UInt32, LibC::LPWSTR, HRESULT)
    controlled_output_va_list_wide : Proc(IDebugControl7*, UInt32, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    output_prompt_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    output_prompt_va_list_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, Int8*, HRESULT)
    get_prompt_text_wide : Proc(IDebugControl7*, Char*, UInt32, UInt32*, HRESULT)
    assemble_wide : Proc(IDebugControl7*, UInt64, LibC::LPWSTR, UInt64*, HRESULT)
    disassemble_wide : Proc(IDebugControl7*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_processor_type_names_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_macro_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_text_macro_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    evaluate_wide : Proc(IDebugControl7*, LibC::LPWSTR, UInt32, DEBUG_VALUE*, UInt32*, HRESULT)
    execute_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    execute_command_file_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, UInt32, HRESULT)
    get_breakpoint_by_index2 : Proc(IDebugControl7*, UInt32, IDebugBreakpoint2*, HRESULT)
    get_breakpoint_by_id2 : Proc(IDebugControl7*, UInt32, IDebugBreakpoint2*, HRESULT)
    add_breakpoint2 : Proc(IDebugControl7*, UInt32, UInt32, IDebugBreakpoint2*, HRESULT)
    remove_breakpoint2 : Proc(IDebugControl7*, IDebugBreakpoint2, HRESULT)
    add_extension_wide : Proc(IDebugControl7*, LibC::LPWSTR, UInt32, UInt64*, HRESULT)
    get_extension_by_path_wide : Proc(IDebugControl7*, LibC::LPWSTR, UInt64*, HRESULT)
    call_extension_wide : Proc(IDebugControl7*, UInt64, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_extension_function_wide : Proc(IDebugControl7*, UInt64, LibC::LPWSTR, FARPROC*, HRESULT)
    get_event_filter_text_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_event_filter_command_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_event_filter_command_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    get_specific_filter_argument_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_specific_filter_argument_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    get_exception_filter_second_command_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_exception_filter_second_command_wide : Proc(IDebugControl7*, UInt32, LibC::LPWSTR, HRESULT)
    get_last_event_information_wide : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_text_replacement_wide : Proc(IDebugControl7*, LibC::LPWSTR, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    set_text_replacement_wide : Proc(IDebugControl7*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    set_expression_syntax_by_name_wide : Proc(IDebugControl7*, LibC::LPWSTR, HRESULT)
    get_expression_syntax_names_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_event_index_description_wide : Proc(IDebugControl7*, UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_log_file2 : Proc(IDebugControl7*, UInt8*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2 : Proc(IDebugControl7*, PSTR, UInt32, HRESULT)
    get_log_file2_wide : Proc(IDebugControl7*, Char*, UInt32, UInt32*, UInt32*, HRESULT)
    open_log_file2_wide : Proc(IDebugControl7*, LibC::LPWSTR, UInt32, HRESULT)
    get_system_version_values : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_system_version_string : Proc(IDebugControl7*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_system_version_string_wide : Proc(IDebugControl7*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_context_stack_trace : Proc(IDebugControl7*, Void*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace : Proc(IDebugControl7*, UInt32, DEBUG_STACK_FRAME*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_stored_event_information : Proc(IDebugControl7*, UInt32*, UInt32*, UInt32*, Void*, UInt32, UInt32*, Void*, UInt32, UInt32*, HRESULT)
    get_managed_status : Proc(IDebugControl7*, UInt32*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_managed_status_wide : Proc(IDebugControl7*, UInt32*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    reset_managed_status : Proc(IDebugControl7*, UInt32, HRESULT)
    get_stack_trace_ex : Proc(IDebugControl7*, UInt64, UInt64, UInt64, DEBUG_STACK_FRAME_EX*, UInt32, UInt32*, HRESULT)
    output_stack_trace_ex : Proc(IDebugControl7*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, UInt32, HRESULT)
    get_context_stack_trace_ex : Proc(IDebugControl7*, Void*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32*, HRESULT)
    output_context_stack_trace_ex : Proc(IDebugControl7*, UInt32, DEBUG_STACK_FRAME_EX*, UInt32, Void*, UInt32, UInt32, UInt32, HRESULT)
    get_breakpoint_by_guid : Proc(IDebugControl7*, Guid*, IDebugBreakpoint3*, HRESULT)
    get_execution_status_ex : Proc(IDebugControl7*, UInt32*, HRESULT)
    get_synchronization_status : Proc(IDebugControl7*, UInt32*, UInt32*, HRESULT)
    get_debuggee_type2 : Proc(IDebugControl7*, UInt32, UInt32*, UInt32*, HRESULT)
  end

  IDebugControl7_GUID = "b86fb3b1-80d4-475b-aea3-cf06539cf63a"
  IID_IDebugControl7 = LibC::GUID.new(0xb86fb3b1_u32, 0x80d4_u16, 0x475b_u16, StaticArray[0xae_u8, 0xa3_u8, 0xcf_u8, 0x6_u8, 0x53_u8, 0x9c_u8, 0xf6_u8, 0x3a_u8])
  struct IDebugControl7
    lpVtbl : IDebugControl7VTbl*
  end

  struct IDebugDataSpacesVTbl
    query_interface : Proc(IDebugDataSpaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDataSpaces*, UInt32)
    release : Proc(IDebugDataSpaces*, UInt32)
    read_virtual : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    search_virtual : Proc(IDebugDataSpaces*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, HRESULT)
    read_virtual_uncached : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual_uncached : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_pointers_virtual : Proc(IDebugDataSpaces*, UInt32, UInt64, UInt64*, HRESULT)
    write_pointers_virtual : Proc(IDebugDataSpaces*, UInt32, UInt64, UInt64*, HRESULT)
    read_physical : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_physical : Proc(IDebugDataSpaces*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_control : Proc(IDebugDataSpaces*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_control : Proc(IDebugDataSpaces*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_io : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_io : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_msr : Proc(IDebugDataSpaces*, UInt32, UInt64*, HRESULT)
    write_msr : Proc(IDebugDataSpaces*, UInt32, UInt64, HRESULT)
    read_bus_data : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_bus_data : Proc(IDebugDataSpaces*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    check_low_memory : Proc(IDebugDataSpaces*, HRESULT)
    read_debugger_data : Proc(IDebugDataSpaces*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    read_processor_system_data : Proc(IDebugDataSpaces*, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
  end

  IDebugDataSpaces_GUID = "88f7dfab-3ea7-4c3a-aefb-c4e8106173aa"
  IID_IDebugDataSpaces = LibC::GUID.new(0x88f7dfab_u32, 0x3ea7_u16, 0x4c3a_u16, StaticArray[0xae_u8, 0xfb_u8, 0xc4_u8, 0xe8_u8, 0x10_u8, 0x61_u8, 0x73_u8, 0xaa_u8])
  struct IDebugDataSpaces
    lpVtbl : IDebugDataSpacesVTbl*
  end

  struct IDebugDataSpaces2VTbl
    query_interface : Proc(IDebugDataSpaces2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDataSpaces2*, UInt32)
    release : Proc(IDebugDataSpaces2*, UInt32)
    read_virtual : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    search_virtual : Proc(IDebugDataSpaces2*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, HRESULT)
    read_virtual_uncached : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual_uncached : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_pointers_virtual : Proc(IDebugDataSpaces2*, UInt32, UInt64, UInt64*, HRESULT)
    write_pointers_virtual : Proc(IDebugDataSpaces2*, UInt32, UInt64, UInt64*, HRESULT)
    read_physical : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_physical : Proc(IDebugDataSpaces2*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_control : Proc(IDebugDataSpaces2*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_control : Proc(IDebugDataSpaces2*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_io : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_io : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_msr : Proc(IDebugDataSpaces2*, UInt32, UInt64*, HRESULT)
    write_msr : Proc(IDebugDataSpaces2*, UInt32, UInt64, HRESULT)
    read_bus_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_bus_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    check_low_memory : Proc(IDebugDataSpaces2*, HRESULT)
    read_debugger_data : Proc(IDebugDataSpaces2*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    read_processor_system_data : Proc(IDebugDataSpaces2*, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    virtual_to_physical : Proc(IDebugDataSpaces2*, UInt64, UInt64*, HRESULT)
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces2*, UInt64, UInt64*, UInt32, UInt32*, HRESULT)
    read_handle_data : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_virtual : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_physical : Proc(IDebugDataSpaces2*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    query_virtual : Proc(IDebugDataSpaces2*, UInt64, MEMORY_BASIC_INFORMATION64*, HRESULT)
  end

  IDebugDataSpaces2_GUID = "7a5e852f-96e9-468f-ac1b-0b3addc4a049"
  IID_IDebugDataSpaces2 = LibC::GUID.new(0x7a5e852f_u32, 0x96e9_u16, 0x468f_u16, StaticArray[0xac_u8, 0x1b_u8, 0xb_u8, 0x3a_u8, 0xdd_u8, 0xc4_u8, 0xa0_u8, 0x49_u8])
  struct IDebugDataSpaces2
    lpVtbl : IDebugDataSpaces2VTbl*
  end

  struct IDebugDataSpaces3VTbl
    query_interface : Proc(IDebugDataSpaces3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDataSpaces3*, UInt32)
    release : Proc(IDebugDataSpaces3*, UInt32)
    read_virtual : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    search_virtual : Proc(IDebugDataSpaces3*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, HRESULT)
    read_virtual_uncached : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual_uncached : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_pointers_virtual : Proc(IDebugDataSpaces3*, UInt32, UInt64, UInt64*, HRESULT)
    write_pointers_virtual : Proc(IDebugDataSpaces3*, UInt32, UInt64, UInt64*, HRESULT)
    read_physical : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_physical : Proc(IDebugDataSpaces3*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_control : Proc(IDebugDataSpaces3*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_control : Proc(IDebugDataSpaces3*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_io : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_io : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_msr : Proc(IDebugDataSpaces3*, UInt32, UInt64*, HRESULT)
    write_msr : Proc(IDebugDataSpaces3*, UInt32, UInt64, HRESULT)
    read_bus_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_bus_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    check_low_memory : Proc(IDebugDataSpaces3*, HRESULT)
    read_debugger_data : Proc(IDebugDataSpaces3*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    read_processor_system_data : Proc(IDebugDataSpaces3*, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    virtual_to_physical : Proc(IDebugDataSpaces3*, UInt64, UInt64*, HRESULT)
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces3*, UInt64, UInt64*, UInt32, UInt32*, HRESULT)
    read_handle_data : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_virtual : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_physical : Proc(IDebugDataSpaces3*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    query_virtual : Proc(IDebugDataSpaces3*, UInt64, MEMORY_BASIC_INFORMATION64*, HRESULT)
    read_image_nt_headers : Proc(IDebugDataSpaces3*, UInt64, IMAGE_NT_HEADERS64*, HRESULT)
    read_tagged : Proc(IDebugDataSpaces3*, Guid*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    start_enum_tagged : Proc(IDebugDataSpaces3*, UInt64*, HRESULT)
    get_next_tagged : Proc(IDebugDataSpaces3*, UInt64, Guid*, UInt32*, HRESULT)
    end_enum_tagged : Proc(IDebugDataSpaces3*, UInt64, HRESULT)
  end

  IDebugDataSpaces3_GUID = "23f79d6c-8aaf-4f7c-a607-9995f5407e63"
  IID_IDebugDataSpaces3 = LibC::GUID.new(0x23f79d6c_u32, 0x8aaf_u16, 0x4f7c_u16, StaticArray[0xa6_u8, 0x7_u8, 0x99_u8, 0x95_u8, 0xf5_u8, 0x40_u8, 0x7e_u8, 0x63_u8])
  struct IDebugDataSpaces3
    lpVtbl : IDebugDataSpaces3VTbl*
  end

  struct IDebugDataSpaces4VTbl
    query_interface : Proc(IDebugDataSpaces4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDataSpaces4*, UInt32)
    release : Proc(IDebugDataSpaces4*, UInt32)
    read_virtual : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    search_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt64, Void*, UInt32, UInt32, UInt64*, HRESULT)
    read_virtual_uncached : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_virtual_uncached : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_pointers_virtual : Proc(IDebugDataSpaces4*, UInt32, UInt64, UInt64*, HRESULT)
    write_pointers_virtual : Proc(IDebugDataSpaces4*, UInt32, UInt64, UInt64*, HRESULT)
    read_physical : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_physical : Proc(IDebugDataSpaces4*, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_control : Proc(IDebugDataSpaces4*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_control : Proc(IDebugDataSpaces4*, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_io : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    write_io : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    read_msr : Proc(IDebugDataSpaces4*, UInt32, UInt64*, HRESULT)
    write_msr : Proc(IDebugDataSpaces4*, UInt32, UInt64, HRESULT)
    read_bus_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_bus_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    check_low_memory : Proc(IDebugDataSpaces4*, HRESULT)
    read_debugger_data : Proc(IDebugDataSpaces4*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    read_processor_system_data : Proc(IDebugDataSpaces4*, UInt32, UInt32, Void*, UInt32, UInt32*, HRESULT)
    virtual_to_physical : Proc(IDebugDataSpaces4*, UInt64, UInt64*, HRESULT)
    get_virtual_translation_physical_offsets : Proc(IDebugDataSpaces4*, UInt64, UInt64*, UInt32, UInt32*, HRESULT)
    read_handle_data : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    fill_physical : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    query_virtual : Proc(IDebugDataSpaces4*, UInt64, MEMORY_BASIC_INFORMATION64*, HRESULT)
    read_image_nt_headers : Proc(IDebugDataSpaces4*, UInt64, IMAGE_NT_HEADERS64*, HRESULT)
    read_tagged : Proc(IDebugDataSpaces4*, Guid*, UInt32, Void*, UInt32, UInt32*, HRESULT)
    start_enum_tagged : Proc(IDebugDataSpaces4*, UInt64*, HRESULT)
    get_next_tagged : Proc(IDebugDataSpaces4*, UInt64, Guid*, UInt32*, HRESULT)
    end_enum_tagged : Proc(IDebugDataSpaces4*, UInt64, HRESULT)
    get_offset_information : Proc(IDebugDataSpaces4*, UInt32, UInt32, UInt64, Void*, UInt32, UInt32*, HRESULT)
    get_next_differently_valid_offset_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt64*, HRESULT)
    get_valid_region_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt64*, UInt32*, HRESULT)
    search_virtual2 : Proc(IDebugDataSpaces4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32, UInt64*, HRESULT)
    read_multi_byte_string_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    read_multi_byte_string_virtual_wide : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, HRESULT)
    read_unicode_string_virtual : Proc(IDebugDataSpaces4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    read_unicode_string_virtual_wide : Proc(IDebugDataSpaces4*, UInt64, UInt32, Char*, UInt32, UInt32*, HRESULT)
    read_physical2 : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_physical2 : Proc(IDebugDataSpaces4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
  end

  IDebugDataSpaces4_GUID = "d98ada1f-29e9-4ef5-a6c0-e53349883212"
  IID_IDebugDataSpaces4 = LibC::GUID.new(0xd98ada1f_u32, 0x29e9_u16, 0x4ef5_u16, StaticArray[0xa6_u8, 0xc0_u8, 0xe5_u8, 0x33_u8, 0x49_u8, 0x88_u8, 0x32_u8, 0x12_u8])
  struct IDebugDataSpaces4
    lpVtbl : IDebugDataSpaces4VTbl*
  end

  struct IDebugEventCallbacksVTbl
    query_interface : Proc(IDebugEventCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugEventCallbacks*, UInt32)
    release : Proc(IDebugEventCallbacks*, UInt32)
    get_interest_mask : Proc(IDebugEventCallbacks*, UInt32*, HRESULT)
    breakpoint : Proc(IDebugEventCallbacks*, IDebugBreakpoint, HRESULT)
    exception : Proc(IDebugEventCallbacks*, EXCEPTION_RECORD64*, UInt32, HRESULT)
    create_thread : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt64, HRESULT)
    exit_thread : Proc(IDebugEventCallbacks*, UInt32, HRESULT)
    create_process_a : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt64, UInt32, PSTR, PSTR, UInt32, UInt32, UInt64, UInt64, UInt64, HRESULT)
    exit_process : Proc(IDebugEventCallbacks*, UInt32, HRESULT)
    load_module : Proc(IDebugEventCallbacks*, UInt64, UInt64, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    unload_module : Proc(IDebugEventCallbacks*, PSTR, UInt64, HRESULT)
    system_error : Proc(IDebugEventCallbacks*, UInt32, UInt32, HRESULT)
    session_status : Proc(IDebugEventCallbacks*, UInt32, HRESULT)
    change_debuggee_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, HRESULT)
    change_engine_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, HRESULT)
    change_symbol_state : Proc(IDebugEventCallbacks*, UInt32, UInt64, HRESULT)
  end

  IDebugEventCallbacks_GUID = "337be28b-5036-4d72-b6bf-c45fbb9f2eaa"
  IID_IDebugEventCallbacks = LibC::GUID.new(0x337be28b_u32, 0x5036_u16, 0x4d72_u16, StaticArray[0xb6_u8, 0xbf_u8, 0xc4_u8, 0x5f_u8, 0xbb_u8, 0x9f_u8, 0x2e_u8, 0xaa_u8])
  struct IDebugEventCallbacks
    lpVtbl : IDebugEventCallbacksVTbl*
  end

  struct IDebugEventCallbacksWideVTbl
    query_interface : Proc(IDebugEventCallbacksWide*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugEventCallbacksWide*, UInt32)
    release : Proc(IDebugEventCallbacksWide*, UInt32)
    get_interest_mask : Proc(IDebugEventCallbacksWide*, UInt32*, HRESULT)
    breakpoint : Proc(IDebugEventCallbacksWide*, IDebugBreakpoint2, HRESULT)
    exception : Proc(IDebugEventCallbacksWide*, EXCEPTION_RECORD64*, UInt32, HRESULT)
    create_thread : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt64, HRESULT)
    exit_thread : Proc(IDebugEventCallbacksWide*, UInt32, HRESULT)
    create_process_a : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, HRESULT)
    exit_process : Proc(IDebugEventCallbacksWide*, UInt32, HRESULT)
    load_module : Proc(IDebugEventCallbacksWide*, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    unload_module : Proc(IDebugEventCallbacksWide*, LibC::LPWSTR, UInt64, HRESULT)
    system_error : Proc(IDebugEventCallbacksWide*, UInt32, UInt32, HRESULT)
    session_status : Proc(IDebugEventCallbacksWide*, UInt32, HRESULT)
    change_debuggee_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, HRESULT)
    change_engine_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, HRESULT)
    change_symbol_state : Proc(IDebugEventCallbacksWide*, UInt32, UInt64, HRESULT)
  end

  IDebugEventCallbacksWide_GUID = "0690e046-9c23-45ac-a04f-987ac29ad0d3"
  IID_IDebugEventCallbacksWide = LibC::GUID.new(0x690e046_u32, 0x9c23_u16, 0x45ac_u16, StaticArray[0xa0_u8, 0x4f_u8, 0x98_u8, 0x7a_u8, 0xc2_u8, 0x9a_u8, 0xd0_u8, 0xd3_u8])
  struct IDebugEventCallbacksWide
    lpVtbl : IDebugEventCallbacksWideVTbl*
  end

  struct IDebugEventContextCallbacksVTbl
    query_interface : Proc(IDebugEventContextCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugEventContextCallbacks*, UInt32)
    release : Proc(IDebugEventContextCallbacks*, UInt32)
    get_interest_mask : Proc(IDebugEventContextCallbacks*, UInt32*, HRESULT)
    breakpoint : Proc(IDebugEventContextCallbacks*, IDebugBreakpoint2, Void*, UInt32, HRESULT)
    exception : Proc(IDebugEventContextCallbacks*, EXCEPTION_RECORD64*, UInt32, Void*, UInt32, HRESULT)
    create_thread : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt64, Void*, UInt32, HRESULT)
    exit_thread : Proc(IDebugEventContextCallbacks*, UInt32, Void*, UInt32, HRESULT)
    create_process_a : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, Void*, UInt32, HRESULT)
    exit_process : Proc(IDebugEventContextCallbacks*, UInt32, Void*, UInt32, HRESULT)
    load_module : Proc(IDebugEventContextCallbacks*, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, Void*, UInt32, HRESULT)
    unload_module : Proc(IDebugEventContextCallbacks*, LibC::LPWSTR, UInt64, Void*, UInt32, HRESULT)
    system_error : Proc(IDebugEventContextCallbacks*, UInt32, UInt32, Void*, UInt32, HRESULT)
    session_status : Proc(IDebugEventContextCallbacks*, UInt32, HRESULT)
    change_debuggee_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, Void*, UInt32, HRESULT)
    change_engine_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, Void*, UInt32, HRESULT)
    change_symbol_state : Proc(IDebugEventContextCallbacks*, UInt32, UInt64, HRESULT)
  end

  IDebugEventContextCallbacks_GUID = "61a4905b-23f9-4247-b3c5-53d087529ab7"
  IID_IDebugEventContextCallbacks = LibC::GUID.new(0x61a4905b_u32, 0x23f9_u16, 0x4247_u16, StaticArray[0xb3_u8, 0xc5_u8, 0x53_u8, 0xd0_u8, 0x87_u8, 0x52_u8, 0x9a_u8, 0xb7_u8])
  struct IDebugEventContextCallbacks
    lpVtbl : IDebugEventContextCallbacksVTbl*
  end

  struct IDebugInputCallbacksVTbl
    query_interface : Proc(IDebugInputCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugInputCallbacks*, UInt32)
    release : Proc(IDebugInputCallbacks*, UInt32)
    start_input : Proc(IDebugInputCallbacks*, UInt32, HRESULT)
    end_input : Proc(IDebugInputCallbacks*, HRESULT)
  end

  IDebugInputCallbacks_GUID = "9f50e42c-f136-499e-9a97-73036c94ed2d"
  IID_IDebugInputCallbacks = LibC::GUID.new(0x9f50e42c_u32, 0xf136_u16, 0x499e_u16, StaticArray[0x9a_u8, 0x97_u8, 0x73_u8, 0x3_u8, 0x6c_u8, 0x94_u8, 0xed_u8, 0x2d_u8])
  struct IDebugInputCallbacks
    lpVtbl : IDebugInputCallbacksVTbl*
  end

  struct IDebugOutputCallbacksVTbl
    query_interface : Proc(IDebugOutputCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugOutputCallbacks*, UInt32)
    release : Proc(IDebugOutputCallbacks*, UInt32)
    output : Proc(IDebugOutputCallbacks*, UInt32, PSTR, HRESULT)
  end

  IDebugOutputCallbacks_GUID = "4bf58045-d654-4c40-b0af-683090f356dc"
  IID_IDebugOutputCallbacks = LibC::GUID.new(0x4bf58045_u32, 0xd654_u16, 0x4c40_u16, StaticArray[0xb0_u8, 0xaf_u8, 0x68_u8, 0x30_u8, 0x90_u8, 0xf3_u8, 0x56_u8, 0xdc_u8])
  struct IDebugOutputCallbacks
    lpVtbl : IDebugOutputCallbacksVTbl*
  end

  struct IDebugOutputCallbacksWideVTbl
    query_interface : Proc(IDebugOutputCallbacksWide*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugOutputCallbacksWide*, UInt32)
    release : Proc(IDebugOutputCallbacksWide*, UInt32)
    output : Proc(IDebugOutputCallbacksWide*, UInt32, LibC::LPWSTR, HRESULT)
  end

  IDebugOutputCallbacksWide_GUID = "4c7fd663-c394-4e26-8ef1-34ad5ed3764c"
  IID_IDebugOutputCallbacksWide = LibC::GUID.new(0x4c7fd663_u32, 0xc394_u16, 0x4e26_u16, StaticArray[0x8e_u8, 0xf1_u8, 0x34_u8, 0xad_u8, 0x5e_u8, 0xd3_u8, 0x76_u8, 0x4c_u8])
  struct IDebugOutputCallbacksWide
    lpVtbl : IDebugOutputCallbacksWideVTbl*
  end

  struct IDebugOutputCallbacks2VTbl
    query_interface : Proc(IDebugOutputCallbacks2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugOutputCallbacks2*, UInt32)
    release : Proc(IDebugOutputCallbacks2*, UInt32)
    output : Proc(IDebugOutputCallbacks2*, UInt32, PSTR, HRESULT)
    get_interest_mask : Proc(IDebugOutputCallbacks2*, UInt32*, HRESULT)
    output2 : Proc(IDebugOutputCallbacks2*, UInt32, UInt32, UInt64, LibC::LPWSTR, HRESULT)
  end

  IDebugOutputCallbacks2_GUID = "67721fe9-56d2-4a44-a325-2b65513ce6eb"
  IID_IDebugOutputCallbacks2 = LibC::GUID.new(0x67721fe9_u32, 0x56d2_u16, 0x4a44_u16, StaticArray[0xa3_u8, 0x25_u8, 0x2b_u8, 0x65_u8, 0x51_u8, 0x3c_u8, 0xe6_u8, 0xeb_u8])
  struct IDebugOutputCallbacks2
    lpVtbl : IDebugOutputCallbacks2VTbl*
  end

  struct IDebugRegistersVTbl
    query_interface : Proc(IDebugRegisters*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugRegisters*, UInt32)
    release : Proc(IDebugRegisters*, UInt32)
    get_number_registers : Proc(IDebugRegisters*, UInt32*, HRESULT)
    get_description : Proc(IDebugRegisters*, UInt32, UInt8*, UInt32, UInt32*, DEBUG_REGISTER_DESCRIPTION*, HRESULT)
    get_index_by_name : Proc(IDebugRegisters*, PSTR, UInt32*, HRESULT)
    get_value : Proc(IDebugRegisters*, UInt32, DEBUG_VALUE*, HRESULT)
    set_value : Proc(IDebugRegisters*, UInt32, DEBUG_VALUE*, HRESULT)
    get_values : Proc(IDebugRegisters*, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    set_values : Proc(IDebugRegisters*, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    output_registers : Proc(IDebugRegisters*, UInt32, UInt32, HRESULT)
    get_instruction_offset : Proc(IDebugRegisters*, UInt64*, HRESULT)
    get_stack_offset : Proc(IDebugRegisters*, UInt64*, HRESULT)
    get_frame_offset : Proc(IDebugRegisters*, UInt64*, HRESULT)
  end

  IDebugRegisters_GUID = "ce289126-9e84-45a7-937e-67bb18691493"
  IID_IDebugRegisters = LibC::GUID.new(0xce289126_u32, 0x9e84_u16, 0x45a7_u16, StaticArray[0x93_u8, 0x7e_u8, 0x67_u8, 0xbb_u8, 0x18_u8, 0x69_u8, 0x14_u8, 0x93_u8])
  struct IDebugRegisters
    lpVtbl : IDebugRegistersVTbl*
  end

  struct IDebugRegisters2VTbl
    query_interface : Proc(IDebugRegisters2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugRegisters2*, UInt32)
    release : Proc(IDebugRegisters2*, UInt32)
    get_number_registers : Proc(IDebugRegisters2*, UInt32*, HRESULT)
    get_description : Proc(IDebugRegisters2*, UInt32, UInt8*, UInt32, UInt32*, DEBUG_REGISTER_DESCRIPTION*, HRESULT)
    get_index_by_name : Proc(IDebugRegisters2*, PSTR, UInt32*, HRESULT)
    get_value : Proc(IDebugRegisters2*, UInt32, DEBUG_VALUE*, HRESULT)
    set_value : Proc(IDebugRegisters2*, UInt32, DEBUG_VALUE*, HRESULT)
    get_values : Proc(IDebugRegisters2*, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    set_values : Proc(IDebugRegisters2*, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    output_registers : Proc(IDebugRegisters2*, UInt32, UInt32, HRESULT)
    get_instruction_offset : Proc(IDebugRegisters2*, UInt64*, HRESULT)
    get_stack_offset : Proc(IDebugRegisters2*, UInt64*, HRESULT)
    get_frame_offset : Proc(IDebugRegisters2*, UInt64*, HRESULT)
    get_description_wide : Proc(IDebugRegisters2*, UInt32, Char*, UInt32, UInt32*, DEBUG_REGISTER_DESCRIPTION*, HRESULT)
    get_index_by_name_wide : Proc(IDebugRegisters2*, LibC::LPWSTR, UInt32*, HRESULT)
    get_number_pseudo_registers : Proc(IDebugRegisters2*, UInt32*, HRESULT)
    get_pseudo_description : Proc(IDebugRegisters2*, UInt32, UInt8*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_pseudo_description_wide : Proc(IDebugRegisters2*, UInt32, Char*, UInt32, UInt32*, UInt64*, UInt32*, HRESULT)
    get_pseudo_index_by_name : Proc(IDebugRegisters2*, PSTR, UInt32*, HRESULT)
    get_pseudo_index_by_name_wide : Proc(IDebugRegisters2*, LibC::LPWSTR, UInt32*, HRESULT)
    get_pseudo_values : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    set_pseudo_values : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    get_values2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    set_values2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32*, UInt32, DEBUG_VALUE*, HRESULT)
    output_registers2 : Proc(IDebugRegisters2*, UInt32, UInt32, UInt32, HRESULT)
    get_instruction_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, HRESULT)
    get_stack_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, HRESULT)
    get_frame_offset2 : Proc(IDebugRegisters2*, UInt32, UInt64*, HRESULT)
  end

  IDebugRegisters2_GUID = "1656afa9-19c6-4e3a-97e7-5dc9160cf9c4"
  IID_IDebugRegisters2 = LibC::GUID.new(0x1656afa9_u32, 0x19c6_u16, 0x4e3a_u16, StaticArray[0x97_u8, 0xe7_u8, 0x5d_u8, 0xc9_u8, 0x16_u8, 0xc_u8, 0xf9_u8, 0xc4_u8])
  struct IDebugRegisters2
    lpVtbl : IDebugRegisters2VTbl*
  end

  struct IDebugSymbolGroupVTbl
    query_interface : Proc(IDebugSymbolGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbolGroup*, UInt32)
    release : Proc(IDebugSymbolGroup*, UInt32)
    get_number_symbols : Proc(IDebugSymbolGroup*, UInt32*, HRESULT)
    add_symbol : Proc(IDebugSymbolGroup*, PSTR, UInt32*, HRESULT)
    remove_symbol_by_name : Proc(IDebugSymbolGroup*, PSTR, HRESULT)
    remove_symbol_by_index : Proc(IDebugSymbolGroup*, UInt32, HRESULT)
    get_symbol_name : Proc(IDebugSymbolGroup*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_parameters : Proc(IDebugSymbolGroup*, UInt32, UInt32, DEBUG_SYMBOL_PARAMETERS*, HRESULT)
    expand_symbol : Proc(IDebugSymbolGroup*, UInt32, LibC::BOOL, HRESULT)
    output_symbols : Proc(IDebugSymbolGroup*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    write_symbol : Proc(IDebugSymbolGroup*, UInt32, PSTR, HRESULT)
    output_as_type : Proc(IDebugSymbolGroup*, UInt32, PSTR, HRESULT)
  end

  IDebugSymbolGroup_GUID = "f2528316-0f1a-4431-aeed-11d096e1e2ab"
  IID_IDebugSymbolGroup = LibC::GUID.new(0xf2528316_u32, 0xf1a_u16, 0x4431_u16, StaticArray[0xae_u8, 0xed_u8, 0x11_u8, 0xd0_u8, 0x96_u8, 0xe1_u8, 0xe2_u8, 0xab_u8])
  struct IDebugSymbolGroup
    lpVtbl : IDebugSymbolGroupVTbl*
  end

  struct IDebugSymbolGroup2VTbl
    query_interface : Proc(IDebugSymbolGroup2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbolGroup2*, UInt32)
    release : Proc(IDebugSymbolGroup2*, UInt32)
    get_number_symbols : Proc(IDebugSymbolGroup2*, UInt32*, HRESULT)
    add_symbol : Proc(IDebugSymbolGroup2*, PSTR, UInt32*, HRESULT)
    remove_symbol_by_name : Proc(IDebugSymbolGroup2*, PSTR, HRESULT)
    remove_symbol_by_index : Proc(IDebugSymbolGroup2*, UInt32, HRESULT)
    get_symbol_name : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_parameters : Proc(IDebugSymbolGroup2*, UInt32, UInt32, DEBUG_SYMBOL_PARAMETERS*, HRESULT)
    expand_symbol : Proc(IDebugSymbolGroup2*, UInt32, LibC::BOOL, HRESULT)
    output_symbols : Proc(IDebugSymbolGroup2*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    write_symbol : Proc(IDebugSymbolGroup2*, UInt32, PSTR, HRESULT)
    output_as_type : Proc(IDebugSymbolGroup2*, UInt32, PSTR, HRESULT)
    add_symbol_wide : Proc(IDebugSymbolGroup2*, LibC::LPWSTR, UInt32*, HRESULT)
    remove_symbol_by_name_wide : Proc(IDebugSymbolGroup2*, LibC::LPWSTR, HRESULT)
    get_symbol_name_wide : Proc(IDebugSymbolGroup2*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    write_symbol_wide : Proc(IDebugSymbolGroup2*, UInt32, LibC::LPWSTR, HRESULT)
    output_as_type_wide : Proc(IDebugSymbolGroup2*, UInt32, LibC::LPWSTR, HRESULT)
    get_symbol_type_name : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_type_name_wide : Proc(IDebugSymbolGroup2*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_size : Proc(IDebugSymbolGroup2*, UInt32, UInt32*, HRESULT)
    get_symbol_offset : Proc(IDebugSymbolGroup2*, UInt32, UInt64*, HRESULT)
    get_symbol_register : Proc(IDebugSymbolGroup2*, UInt32, UInt32*, HRESULT)
    get_symbol_value_text : Proc(IDebugSymbolGroup2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_value_text_wide : Proc(IDebugSymbolGroup2*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_information : Proc(IDebugSymbolGroup2*, UInt32, DEBUG_SYMBOL_ENTRY*, HRESULT)
  end

  IDebugSymbolGroup2_GUID = "6a7ccc5f-fb5e-4dcc-b41c-6c20307bccc7"
  IID_IDebugSymbolGroup2 = LibC::GUID.new(0x6a7ccc5f_u32, 0xfb5e_u16, 0x4dcc_u16, StaticArray[0xb4_u8, 0x1c_u8, 0x6c_u8, 0x20_u8, 0x30_u8, 0x7b_u8, 0xcc_u8, 0xc7_u8])
  struct IDebugSymbolGroup2
    lpVtbl : IDebugSymbolGroup2VTbl*
  end

  struct IDebugSymbolsVTbl
    query_interface : Proc(IDebugSymbols*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbols*, UInt32)
    release : Proc(IDebugSymbols*, UInt32)
    get_symbol_options : Proc(IDebugSymbols*, UInt32*, HRESULT)
    add_symbol_options : Proc(IDebugSymbols*, UInt32, HRESULT)
    remove_symbol_options : Proc(IDebugSymbols*, UInt32, HRESULT)
    set_symbol_options : Proc(IDebugSymbols*, UInt32, HRESULT)
    get_name_by_offset : Proc(IDebugSymbols*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name : Proc(IDebugSymbols*, PSTR, UInt64*, HRESULT)
    get_near_name_by_offset : Proc(IDebugSymbols*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset : Proc(IDebugSymbols*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line : Proc(IDebugSymbols*, UInt32, PSTR, UInt64*, HRESULT)
    get_number_modules : Proc(IDebugSymbols*, UInt32*, UInt32*, HRESULT)
    get_module_by_index : Proc(IDebugSymbols*, UInt32, UInt64*, HRESULT)
    get_module_by_module_name : Proc(IDebugSymbols*, PSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset : Proc(IDebugSymbols*, UInt64, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_names : Proc(IDebugSymbols*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_module_parameters : Proc(IDebugSymbols*, UInt32, UInt64*, UInt32, DEBUG_MODULE_PARAMETERS*, HRESULT)
    get_symbol_module : Proc(IDebugSymbols*, PSTR, UInt64*, HRESULT)
    get_type_name : Proc(IDebugSymbols*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_id : Proc(IDebugSymbols*, UInt64, PSTR, UInt32*, HRESULT)
    get_type_size : Proc(IDebugSymbols*, UInt64, UInt32, UInt32*, HRESULT)
    get_field_offset : Proc(IDebugSymbols*, UInt64, UInt32, PSTR, UInt32*, HRESULT)
    get_symbol_type_id : Proc(IDebugSymbols*, PSTR, UInt32*, UInt64*, HRESULT)
    get_offset_type_id : Proc(IDebugSymbols*, UInt64, UInt32*, UInt64*, HRESULT)
    read_typed_data_virtual : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_virtual : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_virtual : Proc(IDebugSymbols*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    read_typed_data_physical : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_physical : Proc(IDebugSymbols*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_physical : Proc(IDebugSymbols*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    get_scope : Proc(IDebugSymbols*, UInt64*, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    set_scope : Proc(IDebugSymbols*, UInt64, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    reset_scope : Proc(IDebugSymbols*, HRESULT)
    get_scope_symbol_group : Proc(IDebugSymbols*, UInt32, IDebugSymbolGroup, IDebugSymbolGroup*, HRESULT)
    create_symbol_group : Proc(IDebugSymbols*, IDebugSymbolGroup*, HRESULT)
    start_symbol_match : Proc(IDebugSymbols*, PSTR, UInt64*, HRESULT)
    get_next_symbol_match : Proc(IDebugSymbols*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    end_symbol_match : Proc(IDebugSymbols*, UInt64, HRESULT)
    reload : Proc(IDebugSymbols*, PSTR, HRESULT)
    get_symbol_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, HRESULT)
    set_symbol_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    append_symbol_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    get_image_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, HRESULT)
    set_image_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    append_image_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    get_source_path : Proc(IDebugSymbols*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_path_element : Proc(IDebugSymbols*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_source_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    append_source_path : Proc(IDebugSymbols*, PSTR, HRESULT)
    find_source_file : Proc(IDebugSymbols*, UInt32, PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets : Proc(IDebugSymbols*, PSTR, UInt64*, UInt32, UInt32*, HRESULT)
  end

  IDebugSymbols_GUID = "8c31e98c-983a-48a5-9016-6fe5d667a950"
  IID_IDebugSymbols = LibC::GUID.new(0x8c31e98c_u32, 0x983a_u16, 0x48a5_u16, StaticArray[0x90_u8, 0x16_u8, 0x6f_u8, 0xe5_u8, 0xd6_u8, 0x67_u8, 0xa9_u8, 0x50_u8])
  struct IDebugSymbols
    lpVtbl : IDebugSymbolsVTbl*
  end

  struct IDebugSymbols2VTbl
    query_interface : Proc(IDebugSymbols2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbols2*, UInt32)
    release : Proc(IDebugSymbols2*, UInt32)
    get_symbol_options : Proc(IDebugSymbols2*, UInt32*, HRESULT)
    add_symbol_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
    remove_symbol_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
    set_symbol_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
    get_name_by_offset : Proc(IDebugSymbols2*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name : Proc(IDebugSymbols2*, PSTR, UInt64*, HRESULT)
    get_near_name_by_offset : Proc(IDebugSymbols2*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset : Proc(IDebugSymbols2*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line : Proc(IDebugSymbols2*, UInt32, PSTR, UInt64*, HRESULT)
    get_number_modules : Proc(IDebugSymbols2*, UInt32*, UInt32*, HRESULT)
    get_module_by_index : Proc(IDebugSymbols2*, UInt32, UInt64*, HRESULT)
    get_module_by_module_name : Proc(IDebugSymbols2*, PSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_names : Proc(IDebugSymbols2*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_module_parameters : Proc(IDebugSymbols2*, UInt32, UInt64*, UInt32, DEBUG_MODULE_PARAMETERS*, HRESULT)
    get_symbol_module : Proc(IDebugSymbols2*, PSTR, UInt64*, HRESULT)
    get_type_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_id : Proc(IDebugSymbols2*, UInt64, PSTR, UInt32*, HRESULT)
    get_type_size : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32*, HRESULT)
    get_field_offset : Proc(IDebugSymbols2*, UInt64, UInt32, PSTR, UInt32*, HRESULT)
    get_symbol_type_id : Proc(IDebugSymbols2*, PSTR, UInt32*, UInt64*, HRESULT)
    get_offset_type_id : Proc(IDebugSymbols2*, UInt64, UInt32*, UInt64*, HRESULT)
    read_typed_data_virtual : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_virtual : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_virtual : Proc(IDebugSymbols2*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    read_typed_data_physical : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_physical : Proc(IDebugSymbols2*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_physical : Proc(IDebugSymbols2*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    get_scope : Proc(IDebugSymbols2*, UInt64*, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    set_scope : Proc(IDebugSymbols2*, UInt64, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    reset_scope : Proc(IDebugSymbols2*, HRESULT)
    get_scope_symbol_group : Proc(IDebugSymbols2*, UInt32, IDebugSymbolGroup, IDebugSymbolGroup*, HRESULT)
    create_symbol_group : Proc(IDebugSymbols2*, IDebugSymbolGroup*, HRESULT)
    start_symbol_match : Proc(IDebugSymbols2*, PSTR, UInt64*, HRESULT)
    get_next_symbol_match : Proc(IDebugSymbols2*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    end_symbol_match : Proc(IDebugSymbols2*, UInt64, HRESULT)
    reload : Proc(IDebugSymbols2*, PSTR, HRESULT)
    get_symbol_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_symbol_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    append_symbol_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    get_image_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, HRESULT)
    set_image_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    append_image_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    get_source_path : Proc(IDebugSymbols2*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_path_element : Proc(IDebugSymbols2*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_source_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    append_source_path : Proc(IDebugSymbols2*, PSTR, HRESULT)
    find_source_file : Proc(IDebugSymbols2*, UInt32, PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets : Proc(IDebugSymbols2*, PSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information : Proc(IDebugSymbols2*, UInt32, UInt64, PSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string : Proc(IDebugSymbols2*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_constant_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_field_name : Proc(IDebugSymbols2*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_options : Proc(IDebugSymbols2*, UInt32*, HRESULT)
    add_type_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
    remove_type_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
    set_type_options : Proc(IDebugSymbols2*, UInt32, HRESULT)
  end

  IDebugSymbols2_GUID = "3a707211-afdd-4495-ad4f-56fecdf8163f"
  IID_IDebugSymbols2 = LibC::GUID.new(0x3a707211_u32, 0xafdd_u16, 0x4495_u16, StaticArray[0xad_u8, 0x4f_u8, 0x56_u8, 0xfe_u8, 0xcd_u8, 0xf8_u8, 0x16_u8, 0x3f_u8])
  struct IDebugSymbols2
    lpVtbl : IDebugSymbols2VTbl*
  end

  struct IDebugSymbols3VTbl
    query_interface : Proc(IDebugSymbols3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbols3*, UInt32)
    release : Proc(IDebugSymbols3*, UInt32)
    get_symbol_options : Proc(IDebugSymbols3*, UInt32*, HRESULT)
    add_symbol_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    remove_symbol_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    set_symbol_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    get_name_by_offset : Proc(IDebugSymbols3*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name : Proc(IDebugSymbols3*, PSTR, UInt64*, HRESULT)
    get_near_name_by_offset : Proc(IDebugSymbols3*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line : Proc(IDebugSymbols3*, UInt32, PSTR, UInt64*, HRESULT)
    get_number_modules : Proc(IDebugSymbols3*, UInt32*, UInt32*, HRESULT)
    get_module_by_index : Proc(IDebugSymbols3*, UInt32, UInt64*, HRESULT)
    get_module_by_module_name : Proc(IDebugSymbols3*, PSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_names : Proc(IDebugSymbols3*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_module_parameters : Proc(IDebugSymbols3*, UInt32, UInt64*, UInt32, DEBUG_MODULE_PARAMETERS*, HRESULT)
    get_symbol_module : Proc(IDebugSymbols3*, PSTR, UInt64*, HRESULT)
    get_type_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_id : Proc(IDebugSymbols3*, UInt64, PSTR, UInt32*, HRESULT)
    get_type_size : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32*, HRESULT)
    get_field_offset : Proc(IDebugSymbols3*, UInt64, UInt32, PSTR, UInt32*, HRESULT)
    get_symbol_type_id : Proc(IDebugSymbols3*, PSTR, UInt32*, UInt64*, HRESULT)
    get_offset_type_id : Proc(IDebugSymbols3*, UInt64, UInt32*, UInt64*, HRESULT)
    read_typed_data_virtual : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_virtual : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_virtual : Proc(IDebugSymbols3*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    read_typed_data_physical : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_physical : Proc(IDebugSymbols3*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_physical : Proc(IDebugSymbols3*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    get_scope : Proc(IDebugSymbols3*, UInt64*, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    set_scope : Proc(IDebugSymbols3*, UInt64, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    reset_scope : Proc(IDebugSymbols3*, HRESULT)
    get_scope_symbol_group : Proc(IDebugSymbols3*, UInt32, IDebugSymbolGroup, IDebugSymbolGroup*, HRESULT)
    create_symbol_group : Proc(IDebugSymbols3*, IDebugSymbolGroup*, HRESULT)
    start_symbol_match : Proc(IDebugSymbols3*, PSTR, UInt64*, HRESULT)
    get_next_symbol_match : Proc(IDebugSymbols3*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    end_symbol_match : Proc(IDebugSymbols3*, UInt64, HRESULT)
    reload : Proc(IDebugSymbols3*, PSTR, HRESULT)
    get_symbol_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_symbol_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    append_symbol_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    get_image_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, HRESULT)
    set_image_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    append_image_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    get_source_path : Proc(IDebugSymbols3*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_path_element : Proc(IDebugSymbols3*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_source_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    append_source_path : Proc(IDebugSymbols3*, PSTR, HRESULT)
    find_source_file : Proc(IDebugSymbols3*, UInt32, PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets : Proc(IDebugSymbols3*, PSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information : Proc(IDebugSymbols3*, UInt32, UInt64, PSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_constant_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_field_name : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_options : Proc(IDebugSymbols3*, UInt32*, HRESULT)
    add_type_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    remove_type_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    set_type_options : Proc(IDebugSymbols3*, UInt32, HRESULT)
    get_name_by_offset_wide : Proc(IDebugSymbols3*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt64*, HRESULT)
    get_near_name_by_offset_wide : Proc(IDebugSymbols3*, UInt64, Int32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32*, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line_wide : Proc(IDebugSymbols3*, UInt32, LibC::LPWSTR, UInt64*, HRESULT)
    get_module_by_module_name_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_symbol_module_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt64*, HRESULT)
    get_type_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_type_id_wide : Proc(IDebugSymbols3*, UInt64, LibC::LPWSTR, UInt32*, HRESULT)
    get_field_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32, LibC::LPWSTR, UInt32*, HRESULT)
    get_symbol_type_id_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt32*, UInt64*, HRESULT)
    get_scope_symbol_group2 : Proc(IDebugSymbols3*, UInt32, IDebugSymbolGroup2, IDebugSymbolGroup2*, HRESULT)
    create_symbol_group2 : Proc(IDebugSymbols3*, IDebugSymbolGroup2*, HRESULT)
    start_symbol_match_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt64*, HRESULT)
    get_next_symbol_match_wide : Proc(IDebugSymbols3*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    reload_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    get_symbol_path_wide : Proc(IDebugSymbols3*, Char*, UInt32, UInt32*, HRESULT)
    set_symbol_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    append_symbol_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    get_image_path_wide : Proc(IDebugSymbols3*, Char*, UInt32, UInt32*, HRESULT)
    set_image_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    append_image_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    get_source_path_wide : Proc(IDebugSymbols3*, Char*, UInt32, UInt32*, HRESULT)
    get_source_path_element_wide : Proc(IDebugSymbols3*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_source_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    append_source_path_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, HRESULT)
    find_source_file_wide : Proc(IDebugSymbols3*, UInt32, LibC::LPWSTR, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information_wide : Proc(IDebugSymbols3*, UInt32, UInt64, LibC::LPWSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string_wide : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_constant_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_field_name_wide : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, HRESULT)
    is_managed_module : Proc(IDebugSymbols3*, UInt32, UInt64, HRESULT)
    get_module_by_module_name2 : Proc(IDebugSymbols3*, PSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_module_name2_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset2 : Proc(IDebugSymbols3*, UInt64, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    add_synthetic_module : Proc(IDebugSymbols3*, UInt64, UInt32, PSTR, PSTR, UInt32, HRESULT)
    add_synthetic_module_wide : Proc(IDebugSymbols3*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    remove_synthetic_module : Proc(IDebugSymbols3*, UInt64, HRESULT)
    get_current_scope_frame_index : Proc(IDebugSymbols3*, UInt32*, HRESULT)
    set_scope_frame_by_index : Proc(IDebugSymbols3*, UInt32, HRESULT)
    set_scope_from_jit_debug_info : Proc(IDebugSymbols3*, UInt32, UInt64, HRESULT)
    set_scope_from_stored_event : Proc(IDebugSymbols3*, HRESULT)
    output_symbol_by_offset : Proc(IDebugSymbols3*, UInt32, UInt32, UInt64, HRESULT)
    get_function_entry_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_field_type_and_offset : Proc(IDebugSymbols3*, UInt64, UInt32, PSTR, UInt32*, UInt32*, HRESULT)
    get_field_type_and_offset_wide : Proc(IDebugSymbols3*, UInt64, UInt32, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    add_synthetic_symbol : Proc(IDebugSymbols3*, UInt64, UInt32, PSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    add_synthetic_symbol_wide : Proc(IDebugSymbols3*, UInt64, UInt32, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    remove_synthetic_symbol : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entries_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name : Proc(IDebugSymbols3*, PSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols3*, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_token : Proc(IDebugSymbols3*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entry_information : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*, HRESULT)
    get_symbol_entry_string : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_string_wide : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_offset_regions : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols3*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_source_entries_by_offset : Proc(IDebugSymbols3*, UInt64, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line : Proc(IDebugSymbols3*, UInt32, PSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line_wide : Proc(IDebugSymbols3*, UInt32, LibC::LPWSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entry_string : Proc(IDebugSymbols3*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_entry_string_wide : Proc(IDebugSymbols3*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_source_entry_offset_regions : Proc(IDebugSymbols3*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_source_entry_by_source_entry : Proc(IDebugSymbols3*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, HRESULT)
  end

  IDebugSymbols3_GUID = "f02fbecc-50ac-4f36-9ad9-c975e8f32ff8"
  IID_IDebugSymbols3 = LibC::GUID.new(0xf02fbecc_u32, 0x50ac_u16, 0x4f36_u16, StaticArray[0x9a_u8, 0xd9_u8, 0xc9_u8, 0x75_u8, 0xe8_u8, 0xf3_u8, 0x2f_u8, 0xf8_u8])
  struct IDebugSymbols3
    lpVtbl : IDebugSymbols3VTbl*
  end

  struct IDebugSymbols4VTbl
    query_interface : Proc(IDebugSymbols4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbols4*, UInt32)
    release : Proc(IDebugSymbols4*, UInt32)
    get_symbol_options : Proc(IDebugSymbols4*, UInt32*, HRESULT)
    add_symbol_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    remove_symbol_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    set_symbol_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    get_name_by_offset : Proc(IDebugSymbols4*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name : Proc(IDebugSymbols4*, PSTR, UInt64*, HRESULT)
    get_near_name_by_offset : Proc(IDebugSymbols4*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line : Proc(IDebugSymbols4*, UInt32, PSTR, UInt64*, HRESULT)
    get_number_modules : Proc(IDebugSymbols4*, UInt32*, UInt32*, HRESULT)
    get_module_by_index : Proc(IDebugSymbols4*, UInt32, UInt64*, HRESULT)
    get_module_by_module_name : Proc(IDebugSymbols4*, PSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_names : Proc(IDebugSymbols4*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_module_parameters : Proc(IDebugSymbols4*, UInt32, UInt64*, UInt32, DEBUG_MODULE_PARAMETERS*, HRESULT)
    get_symbol_module : Proc(IDebugSymbols4*, PSTR, UInt64*, HRESULT)
    get_type_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_id : Proc(IDebugSymbols4*, UInt64, PSTR, UInt32*, HRESULT)
    get_type_size : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, HRESULT)
    get_field_offset : Proc(IDebugSymbols4*, UInt64, UInt32, PSTR, UInt32*, HRESULT)
    get_symbol_type_id : Proc(IDebugSymbols4*, PSTR, UInt32*, UInt64*, HRESULT)
    get_offset_type_id : Proc(IDebugSymbols4*, UInt64, UInt32*, UInt64*, HRESULT)
    read_typed_data_virtual : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_virtual : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_virtual : Proc(IDebugSymbols4*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    read_typed_data_physical : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_physical : Proc(IDebugSymbols4*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_physical : Proc(IDebugSymbols4*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    get_scope : Proc(IDebugSymbols4*, UInt64*, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    set_scope : Proc(IDebugSymbols4*, UInt64, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    reset_scope : Proc(IDebugSymbols4*, HRESULT)
    get_scope_symbol_group : Proc(IDebugSymbols4*, UInt32, IDebugSymbolGroup, IDebugSymbolGroup*, HRESULT)
    create_symbol_group : Proc(IDebugSymbols4*, IDebugSymbolGroup*, HRESULT)
    start_symbol_match : Proc(IDebugSymbols4*, PSTR, UInt64*, HRESULT)
    get_next_symbol_match : Proc(IDebugSymbols4*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    end_symbol_match : Proc(IDebugSymbols4*, UInt64, HRESULT)
    reload : Proc(IDebugSymbols4*, PSTR, HRESULT)
    get_symbol_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, HRESULT)
    set_symbol_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    append_symbol_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    get_image_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, HRESULT)
    set_image_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    append_image_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    get_source_path : Proc(IDebugSymbols4*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_path_element : Proc(IDebugSymbols4*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_source_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    append_source_path : Proc(IDebugSymbols4*, PSTR, HRESULT)
    find_source_file : Proc(IDebugSymbols4*, UInt32, PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets : Proc(IDebugSymbols4*, PSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information : Proc(IDebugSymbols4*, UInt32, UInt64, PSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_constant_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_field_name : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_options : Proc(IDebugSymbols4*, UInt32*, HRESULT)
    add_type_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    remove_type_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    set_type_options : Proc(IDebugSymbols4*, UInt32, HRESULT)
    get_name_by_offset_wide : Proc(IDebugSymbols4*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt64*, HRESULT)
    get_near_name_by_offset_wide : Proc(IDebugSymbols4*, UInt64, Int32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32*, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line_wide : Proc(IDebugSymbols4*, UInt32, LibC::LPWSTR, UInt64*, HRESULT)
    get_module_by_module_name_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_symbol_module_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt64*, HRESULT)
    get_type_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_type_id_wide : Proc(IDebugSymbols4*, UInt64, LibC::LPWSTR, UInt32*, HRESULT)
    get_field_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32, LibC::LPWSTR, UInt32*, HRESULT)
    get_symbol_type_id_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt32*, UInt64*, HRESULT)
    get_scope_symbol_group2 : Proc(IDebugSymbols4*, UInt32, IDebugSymbolGroup2, IDebugSymbolGroup2*, HRESULT)
    create_symbol_group2 : Proc(IDebugSymbols4*, IDebugSymbolGroup2*, HRESULT)
    start_symbol_match_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt64*, HRESULT)
    get_next_symbol_match_wide : Proc(IDebugSymbols4*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    reload_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    get_symbol_path_wide : Proc(IDebugSymbols4*, Char*, UInt32, UInt32*, HRESULT)
    set_symbol_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    append_symbol_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    get_image_path_wide : Proc(IDebugSymbols4*, Char*, UInt32, UInt32*, HRESULT)
    set_image_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    append_image_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    get_source_path_wide : Proc(IDebugSymbols4*, Char*, UInt32, UInt32*, HRESULT)
    get_source_path_element_wide : Proc(IDebugSymbols4*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_source_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    append_source_path_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, HRESULT)
    find_source_file_wide : Proc(IDebugSymbols4*, UInt32, LibC::LPWSTR, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information_wide : Proc(IDebugSymbols4*, UInt32, UInt64, LibC::LPWSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string_wide : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_constant_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_field_name_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, HRESULT)
    is_managed_module : Proc(IDebugSymbols4*, UInt32, UInt64, HRESULT)
    get_module_by_module_name2 : Proc(IDebugSymbols4*, PSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_module_name2_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset2 : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    add_synthetic_module : Proc(IDebugSymbols4*, UInt64, UInt32, PSTR, PSTR, UInt32, HRESULT)
    add_synthetic_module_wide : Proc(IDebugSymbols4*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    remove_synthetic_module : Proc(IDebugSymbols4*, UInt64, HRESULT)
    get_current_scope_frame_index : Proc(IDebugSymbols4*, UInt32*, HRESULT)
    set_scope_frame_by_index : Proc(IDebugSymbols4*, UInt32, HRESULT)
    set_scope_from_jit_debug_info : Proc(IDebugSymbols4*, UInt32, UInt64, HRESULT)
    set_scope_from_stored_event : Proc(IDebugSymbols4*, HRESULT)
    output_symbol_by_offset : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, HRESULT)
    get_function_entry_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_field_type_and_offset : Proc(IDebugSymbols4*, UInt64, UInt32, PSTR, UInt32*, UInt32*, HRESULT)
    get_field_type_and_offset_wide : Proc(IDebugSymbols4*, UInt64, UInt32, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    add_synthetic_symbol : Proc(IDebugSymbols4*, UInt64, UInt32, PSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    add_synthetic_symbol_wide : Proc(IDebugSymbols4*, UInt64, UInt32, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    remove_synthetic_symbol : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entries_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name : Proc(IDebugSymbols4*, PSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols4*, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_token : Proc(IDebugSymbols4*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entry_information : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*, HRESULT)
    get_symbol_entry_string : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_string_wide : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_offset_regions : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols4*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_source_entries_by_offset : Proc(IDebugSymbols4*, UInt64, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line : Proc(IDebugSymbols4*, UInt32, PSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line_wide : Proc(IDebugSymbols4*, UInt32, LibC::LPWSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entry_string : Proc(IDebugSymbols4*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_entry_string_wide : Proc(IDebugSymbols4*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_source_entry_offset_regions : Proc(IDebugSymbols4*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_source_entry_by_source_entry : Proc(IDebugSymbols4*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, HRESULT)
    get_scope_ex : Proc(IDebugSymbols4*, UInt64*, DEBUG_STACK_FRAME_EX*, Void*, UInt32, HRESULT)
    set_scope_ex : Proc(IDebugSymbols4*, UInt64, DEBUG_STACK_FRAME_EX*, Void*, UInt32, HRESULT)
    get_name_by_inline_context : Proc(IDebugSymbols4*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_name_by_inline_context_wide : Proc(IDebugSymbols4*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_inline_context : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_inline_context_wide : Proc(IDebugSymbols4*, UInt64, UInt32, UInt32*, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    output_symbol_by_inline_context : Proc(IDebugSymbols4*, UInt32, UInt32, UInt64, UInt32, HRESULT)
  end

  IDebugSymbols4_GUID = "e391bbd8-9d8c-4418-840b-c006592a1752"
  IID_IDebugSymbols4 = LibC::GUID.new(0xe391bbd8_u32, 0x9d8c_u16, 0x4418_u16, StaticArray[0x84_u8, 0xb_u8, 0xc0_u8, 0x6_u8, 0x59_u8, 0x2a_u8, 0x17_u8, 0x52_u8])
  struct IDebugSymbols4
    lpVtbl : IDebugSymbols4VTbl*
  end

  struct IDebugSymbols5VTbl
    query_interface : Proc(IDebugSymbols5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSymbols5*, UInt32)
    release : Proc(IDebugSymbols5*, UInt32)
    get_symbol_options : Proc(IDebugSymbols5*, UInt32*, HRESULT)
    add_symbol_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    remove_symbol_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    set_symbol_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    get_name_by_offset : Proc(IDebugSymbols5*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name : Proc(IDebugSymbols5*, PSTR, UInt64*, HRESULT)
    get_near_name_by_offset : Proc(IDebugSymbols5*, UInt64, Int32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line : Proc(IDebugSymbols5*, UInt32, PSTR, UInt64*, HRESULT)
    get_number_modules : Proc(IDebugSymbols5*, UInt32*, UInt32*, HRESULT)
    get_module_by_index : Proc(IDebugSymbols5*, UInt32, UInt64*, HRESULT)
    get_module_by_module_name : Proc(IDebugSymbols5*, PSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_names : Proc(IDebugSymbols5*, UInt32, UInt64, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_module_parameters : Proc(IDebugSymbols5*, UInt32, UInt64*, UInt32, DEBUG_MODULE_PARAMETERS*, HRESULT)
    get_symbol_module : Proc(IDebugSymbols5*, PSTR, UInt64*, HRESULT)
    get_type_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_id : Proc(IDebugSymbols5*, UInt64, PSTR, UInt32*, HRESULT)
    get_type_size : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, HRESULT)
    get_field_offset : Proc(IDebugSymbols5*, UInt64, UInt32, PSTR, UInt32*, HRESULT)
    get_symbol_type_id : Proc(IDebugSymbols5*, PSTR, UInt32*, UInt64*, HRESULT)
    get_offset_type_id : Proc(IDebugSymbols5*, UInt64, UInt32*, UInt64*, HRESULT)
    read_typed_data_virtual : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_virtual : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_virtual : Proc(IDebugSymbols5*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    read_typed_data_physical : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    write_typed_data_physical : Proc(IDebugSymbols5*, UInt64, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    output_typed_data_physical : Proc(IDebugSymbols5*, UInt32, UInt64, UInt64, UInt32, UInt32, HRESULT)
    get_scope : Proc(IDebugSymbols5*, UInt64*, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    set_scope : Proc(IDebugSymbols5*, UInt64, DEBUG_STACK_FRAME*, Void*, UInt32, HRESULT)
    reset_scope : Proc(IDebugSymbols5*, HRESULT)
    get_scope_symbol_group : Proc(IDebugSymbols5*, UInt32, IDebugSymbolGroup, IDebugSymbolGroup*, HRESULT)
    create_symbol_group : Proc(IDebugSymbols5*, IDebugSymbolGroup*, HRESULT)
    start_symbol_match : Proc(IDebugSymbols5*, PSTR, UInt64*, HRESULT)
    get_next_symbol_match : Proc(IDebugSymbols5*, UInt64, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    end_symbol_match : Proc(IDebugSymbols5*, UInt64, HRESULT)
    reload : Proc(IDebugSymbols5*, PSTR, HRESULT)
    get_symbol_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, HRESULT)
    set_symbol_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    append_symbol_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    get_image_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, HRESULT)
    set_image_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    append_image_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    get_source_path : Proc(IDebugSymbols5*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_path_element : Proc(IDebugSymbols5*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    set_source_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    append_source_path : Proc(IDebugSymbols5*, PSTR, HRESULT)
    find_source_file : Proc(IDebugSymbols5*, UInt32, PSTR, UInt32, UInt32*, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets : Proc(IDebugSymbols5*, PSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information : Proc(IDebugSymbols5*, UInt32, UInt64, PSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_constant_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt64, UInt8*, UInt32, UInt32*, HRESULT)
    get_field_name : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_type_options : Proc(IDebugSymbols5*, UInt32*, HRESULT)
    add_type_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    remove_type_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    set_type_options : Proc(IDebugSymbols5*, UInt32, HRESULT)
    get_name_by_offset_wide : Proc(IDebugSymbols5*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_name_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt64*, HRESULT)
    get_near_name_by_offset_wide : Proc(IDebugSymbols5*, UInt64, Int32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32*, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_offset_by_line_wide : Proc(IDebugSymbols5*, UInt32, LibC::LPWSTR, UInt64*, HRESULT)
    get_module_by_module_name_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt32, UInt32*, UInt64*, HRESULT)
    get_symbol_module_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt64*, HRESULT)
    get_type_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_type_id_wide : Proc(IDebugSymbols5*, UInt64, LibC::LPWSTR, UInt32*, HRESULT)
    get_field_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32, LibC::LPWSTR, UInt32*, HRESULT)
    get_symbol_type_id_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt32*, UInt64*, HRESULT)
    get_scope_symbol_group2 : Proc(IDebugSymbols5*, UInt32, IDebugSymbolGroup2, IDebugSymbolGroup2*, HRESULT)
    create_symbol_group2 : Proc(IDebugSymbols5*, IDebugSymbolGroup2*, HRESULT)
    start_symbol_match_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt64*, HRESULT)
    get_next_symbol_match_wide : Proc(IDebugSymbols5*, UInt64, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    reload_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    get_symbol_path_wide : Proc(IDebugSymbols5*, Char*, UInt32, UInt32*, HRESULT)
    set_symbol_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    append_symbol_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    get_image_path_wide : Proc(IDebugSymbols5*, Char*, UInt32, UInt32*, HRESULT)
    set_image_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    append_image_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    get_source_path_wide : Proc(IDebugSymbols5*, Char*, UInt32, UInt32*, HRESULT)
    get_source_path_element_wide : Proc(IDebugSymbols5*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    set_source_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    append_source_path_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, HRESULT)
    find_source_file_wide : Proc(IDebugSymbols5*, UInt32, LibC::LPWSTR, UInt32, UInt32*, Char*, UInt32, UInt32*, HRESULT)
    get_source_file_line_offsets_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt64*, UInt32, UInt32*, HRESULT)
    get_module_version_information_wide : Proc(IDebugSymbols5*, UInt32, UInt64, LibC::LPWSTR, Void*, UInt32, UInt32*, HRESULT)
    get_module_name_string_wide : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_constant_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt64, Char*, UInt32, UInt32*, HRESULT)
    get_field_name_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, Char*, UInt32, UInt32*, HRESULT)
    is_managed_module : Proc(IDebugSymbols5*, UInt32, UInt64, HRESULT)
    get_module_by_module_name2 : Proc(IDebugSymbols5*, PSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_module_name2_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    get_module_by_offset2 : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32, UInt32*, UInt64*, HRESULT)
    add_synthetic_module : Proc(IDebugSymbols5*, UInt64, UInt32, PSTR, PSTR, UInt32, HRESULT)
    add_synthetic_module_wide : Proc(IDebugSymbols5*, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    remove_synthetic_module : Proc(IDebugSymbols5*, UInt64, HRESULT)
    get_current_scope_frame_index : Proc(IDebugSymbols5*, UInt32*, HRESULT)
    set_scope_frame_by_index : Proc(IDebugSymbols5*, UInt32, HRESULT)
    set_scope_from_jit_debug_info : Proc(IDebugSymbols5*, UInt32, UInt64, HRESULT)
    set_scope_from_stored_event : Proc(IDebugSymbols5*, HRESULT)
    output_symbol_by_offset : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, HRESULT)
    get_function_entry_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, Void*, UInt32, UInt32*, HRESULT)
    get_field_type_and_offset : Proc(IDebugSymbols5*, UInt64, UInt32, PSTR, UInt32*, UInt32*, HRESULT)
    get_field_type_and_offset_wide : Proc(IDebugSymbols5*, UInt64, UInt32, LibC::LPWSTR, UInt32*, UInt32*, HRESULT)
    add_synthetic_symbol : Proc(IDebugSymbols5*, UInt64, UInt32, PSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    add_synthetic_symbol_wide : Proc(IDebugSymbols5*, UInt64, UInt32, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    remove_synthetic_symbol : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entries_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, UInt64*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name : Proc(IDebugSymbols5*, PSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entries_by_name_wide : Proc(IDebugSymbols5*, LibC::LPWSTR, UInt32, DEBUG_MODULE_AND_ID*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_token : Proc(IDebugSymbols5*, UInt64, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_symbol_entry_information : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*, HRESULT)
    get_symbol_entry_string : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_string_wide : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_offset_regions : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_symbol_entry_by_symbol_entry : Proc(IDebugSymbols5*, DEBUG_MODULE_AND_ID*, UInt32, DEBUG_MODULE_AND_ID*, HRESULT)
    get_source_entries_by_offset : Proc(IDebugSymbols5*, UInt64, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line : Proc(IDebugSymbols5*, UInt32, PSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entries_by_line_wide : Proc(IDebugSymbols5*, UInt32, LibC::LPWSTR, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt32*, HRESULT)
    get_source_entry_string : Proc(IDebugSymbols5*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    get_source_entry_string_wide : Proc(IDebugSymbols5*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, Char*, UInt32, UInt32*, HRESULT)
    get_source_entry_offset_regions : Proc(IDebugSymbols5*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_OFFSET_REGION*, UInt32, UInt32*, HRESULT)
    get_source_entry_by_source_entry : Proc(IDebugSymbols5*, DEBUG_SYMBOL_SOURCE_ENTRY*, UInt32, DEBUG_SYMBOL_SOURCE_ENTRY*, HRESULT)
    get_scope_ex : Proc(IDebugSymbols5*, UInt64*, DEBUG_STACK_FRAME_EX*, Void*, UInt32, HRESULT)
    set_scope_ex : Proc(IDebugSymbols5*, UInt64, DEBUG_STACK_FRAME_EX*, Void*, UInt32, HRESULT)
    get_name_by_inline_context : Proc(IDebugSymbols5*, UInt64, UInt32, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_name_by_inline_context_wide : Proc(IDebugSymbols5*, UInt64, UInt32, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_inline_context : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, UInt8*, UInt32, UInt32*, UInt64*, HRESULT)
    get_line_by_inline_context_wide : Proc(IDebugSymbols5*, UInt64, UInt32, UInt32*, Char*, UInt32, UInt32*, UInt64*, HRESULT)
    output_symbol_by_inline_context : Proc(IDebugSymbols5*, UInt32, UInt32, UInt64, UInt32, HRESULT)
    get_current_scope_frame_index_ex : Proc(IDebugSymbols5*, UInt32, UInt32*, HRESULT)
    set_scope_frame_by_index_ex : Proc(IDebugSymbols5*, UInt32, UInt32, HRESULT)
  end

  IDebugSymbols5_GUID = "c65fa83e-1e69-475e-8e0e-b5d79e9cc17e"
  IID_IDebugSymbols5 = LibC::GUID.new(0xc65fa83e_u32, 0x1e69_u16, 0x475e_u16, StaticArray[0x8e_u8, 0xe_u8, 0xb5_u8, 0xd7_u8, 0x9e_u8, 0x9c_u8, 0xc1_u8, 0x7e_u8])
  struct IDebugSymbols5
    lpVtbl : IDebugSymbols5VTbl*
  end

  struct IDebugSystemObjectsVTbl
    query_interface : Proc(IDebugSystemObjects*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSystemObjects*, UInt32)
    release : Proc(IDebugSystemObjects*, UInt32)
    get_event_thread : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_event_process : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_current_thread_id : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    set_current_thread_id : Proc(IDebugSystemObjects*, UInt32, HRESULT)
    get_current_process_id : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    set_current_process_id : Proc(IDebugSystemObjects*, UInt32, HRESULT)
    get_number_threads : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_total_number_threads : Proc(IDebugSystemObjects*, UInt32*, UInt32*, HRESULT)
    get_thread_ids_by_index : Proc(IDebugSystemObjects*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_thread_id_by_processor : Proc(IDebugSystemObjects*, UInt32, UInt32*, HRESULT)
    get_current_thread_data_offset : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_current_thread_teb : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_thread_id_by_teb : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_current_thread_system_id : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_thread_id_by_system_id : Proc(IDebugSystemObjects*, UInt32, UInt32*, HRESULT)
    get_current_thread_handle : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_thread_id_by_handle : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_number_processes : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_process_ids_by_index : Proc(IDebugSystemObjects*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_current_process_data_offset : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_process_id_by_data_offset : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_current_process_peb : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_process_id_by_peb : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_current_process_system_id : Proc(IDebugSystemObjects*, UInt32*, HRESULT)
    get_process_id_by_system_id : Proc(IDebugSystemObjects*, UInt32, UInt32*, HRESULT)
    get_current_process_handle : Proc(IDebugSystemObjects*, UInt64*, HRESULT)
    get_process_id_by_handle : Proc(IDebugSystemObjects*, UInt64, UInt32*, HRESULT)
    get_current_process_executable_name : Proc(IDebugSystemObjects*, UInt8*, UInt32, UInt32*, HRESULT)
  end

  IDebugSystemObjects_GUID = "6b86fe2c-2c4f-4f0c-9da2-174311acc327"
  IID_IDebugSystemObjects = LibC::GUID.new(0x6b86fe2c_u32, 0x2c4f_u16, 0x4f0c_u16, StaticArray[0x9d_u8, 0xa2_u8, 0x17_u8, 0x43_u8, 0x11_u8, 0xac_u8, 0xc3_u8, 0x27_u8])
  struct IDebugSystemObjects
    lpVtbl : IDebugSystemObjectsVTbl*
  end

  struct IDebugSystemObjects2VTbl
    query_interface : Proc(IDebugSystemObjects2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSystemObjects2*, UInt32)
    release : Proc(IDebugSystemObjects2*, UInt32)
    get_event_thread : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_event_process : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_current_thread_id : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    set_current_thread_id : Proc(IDebugSystemObjects2*, UInt32, HRESULT)
    get_current_process_id : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    set_current_process_id : Proc(IDebugSystemObjects2*, UInt32, HRESULT)
    get_number_threads : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_total_number_threads : Proc(IDebugSystemObjects2*, UInt32*, UInt32*, HRESULT)
    get_thread_ids_by_index : Proc(IDebugSystemObjects2*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_thread_id_by_processor : Proc(IDebugSystemObjects2*, UInt32, UInt32*, HRESULT)
    get_current_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_current_thread_teb : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_thread_id_by_teb : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_current_thread_system_id : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_thread_id_by_system_id : Proc(IDebugSystemObjects2*, UInt32, UInt32*, HRESULT)
    get_current_thread_handle : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_thread_id_by_handle : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_number_processes : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_process_ids_by_index : Proc(IDebugSystemObjects2*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_current_process_data_offset : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_process_id_by_data_offset : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_current_process_peb : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_process_id_by_peb : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_current_process_system_id : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_process_id_by_system_id : Proc(IDebugSystemObjects2*, UInt32, UInt32*, HRESULT)
    get_current_process_handle : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    get_process_id_by_handle : Proc(IDebugSystemObjects2*, UInt64, UInt32*, HRESULT)
    get_current_process_executable_name : Proc(IDebugSystemObjects2*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_process_up_time : Proc(IDebugSystemObjects2*, UInt32*, HRESULT)
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects2*, UInt64, HRESULT)
    get_implicit_process_data_offset : Proc(IDebugSystemObjects2*, UInt64*, HRESULT)
    set_implicit_process_data_offset : Proc(IDebugSystemObjects2*, UInt64, HRESULT)
  end

  IDebugSystemObjects2_GUID = "0ae9f5ff-1852-4679-b055-494bee6407ee"
  IID_IDebugSystemObjects2 = LibC::GUID.new(0xae9f5ff_u32, 0x1852_u16, 0x4679_u16, StaticArray[0xb0_u8, 0x55_u8, 0x49_u8, 0x4b_u8, 0xee_u8, 0x64_u8, 0x7_u8, 0xee_u8])
  struct IDebugSystemObjects2
    lpVtbl : IDebugSystemObjects2VTbl*
  end

  struct IDebugSystemObjects3VTbl
    query_interface : Proc(IDebugSystemObjects3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSystemObjects3*, UInt32)
    release : Proc(IDebugSystemObjects3*, UInt32)
    get_event_thread : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_event_process : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_current_thread_id : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    set_current_thread_id : Proc(IDebugSystemObjects3*, UInt32, HRESULT)
    get_current_process_id : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    set_current_process_id : Proc(IDebugSystemObjects3*, UInt32, HRESULT)
    get_number_threads : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_total_number_threads : Proc(IDebugSystemObjects3*, UInt32*, UInt32*, HRESULT)
    get_thread_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_thread_id_by_processor : Proc(IDebugSystemObjects3*, UInt32, UInt32*, HRESULT)
    get_current_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_thread_teb : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_thread_id_by_teb : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_thread_system_id : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_thread_id_by_system_id : Proc(IDebugSystemObjects3*, UInt32, UInt32*, HRESULT)
    get_current_thread_handle : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_thread_id_by_handle : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_number_processes : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_process_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_current_process_data_offset : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_process_id_by_data_offset : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_process_peb : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_process_id_by_peb : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_process_system_id : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_process_id_by_system_id : Proc(IDebugSystemObjects3*, UInt32, UInt32*, HRESULT)
    get_current_process_handle : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_process_id_by_handle : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_process_executable_name : Proc(IDebugSystemObjects3*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_process_up_time : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects3*, UInt64, HRESULT)
    get_implicit_process_data_offset : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    set_implicit_process_data_offset : Proc(IDebugSystemObjects3*, UInt64, HRESULT)
    get_event_system : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_current_system_id : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    set_current_system_id : Proc(IDebugSystemObjects3*, UInt32, HRESULT)
    get_number_systems : Proc(IDebugSystemObjects3*, UInt32*, HRESULT)
    get_system_ids_by_index : Proc(IDebugSystemObjects3*, UInt32, UInt32, UInt32*, HRESULT)
    get_total_number_threads_and_processes : Proc(IDebugSystemObjects3*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_current_system_server : Proc(IDebugSystemObjects3*, UInt64*, HRESULT)
    get_system_by_server : Proc(IDebugSystemObjects3*, UInt64, UInt32*, HRESULT)
    get_current_system_server_name : Proc(IDebugSystemObjects3*, UInt8*, UInt32, UInt32*, HRESULT)
  end

  IDebugSystemObjects3_GUID = "e9676e2f-e286-4ea3-b0f9-dfe5d9fc330e"
  IID_IDebugSystemObjects3 = LibC::GUID.new(0xe9676e2f_u32, 0xe286_u16, 0x4ea3_u16, StaticArray[0xb0_u8, 0xf9_u8, 0xdf_u8, 0xe5_u8, 0xd9_u8, 0xfc_u8, 0x33_u8, 0xe_u8])
  struct IDebugSystemObjects3
    lpVtbl : IDebugSystemObjects3VTbl*
  end

  struct IDebugSystemObjects4VTbl
    query_interface : Proc(IDebugSystemObjects4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSystemObjects4*, UInt32)
    release : Proc(IDebugSystemObjects4*, UInt32)
    get_event_thread : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_event_process : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_current_thread_id : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    set_current_thread_id : Proc(IDebugSystemObjects4*, UInt32, HRESULT)
    get_current_process_id : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    set_current_process_id : Proc(IDebugSystemObjects4*, UInt32, HRESULT)
    get_number_threads : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_total_number_threads : Proc(IDebugSystemObjects4*, UInt32*, UInt32*, HRESULT)
    get_thread_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_thread_id_by_processor : Proc(IDebugSystemObjects4*, UInt32, UInt32*, HRESULT)
    get_current_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_thread_id_by_data_offset : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_thread_teb : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_thread_id_by_teb : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_thread_system_id : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_thread_id_by_system_id : Proc(IDebugSystemObjects4*, UInt32, UInt32*, HRESULT)
    get_current_thread_handle : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_thread_id_by_handle : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_number_processes : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_process_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, UInt32*, HRESULT)
    get_current_process_data_offset : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_process_id_by_data_offset : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_process_peb : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_process_id_by_peb : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_process_system_id : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_process_id_by_system_id : Proc(IDebugSystemObjects4*, UInt32, UInt32*, HRESULT)
    get_current_process_handle : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_process_id_by_handle : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_process_executable_name : Proc(IDebugSystemObjects4*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_process_up_time : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_implicit_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    set_implicit_thread_data_offset : Proc(IDebugSystemObjects4*, UInt64, HRESULT)
    get_implicit_process_data_offset : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    set_implicit_process_data_offset : Proc(IDebugSystemObjects4*, UInt64, HRESULT)
    get_event_system : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_current_system_id : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    set_current_system_id : Proc(IDebugSystemObjects4*, UInt32, HRESULT)
    get_number_systems : Proc(IDebugSystemObjects4*, UInt32*, HRESULT)
    get_system_ids_by_index : Proc(IDebugSystemObjects4*, UInt32, UInt32, UInt32*, HRESULT)
    get_total_number_threads_and_processes : Proc(IDebugSystemObjects4*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_current_system_server : Proc(IDebugSystemObjects4*, UInt64*, HRESULT)
    get_system_by_server : Proc(IDebugSystemObjects4*, UInt64, UInt32*, HRESULT)
    get_current_system_server_name : Proc(IDebugSystemObjects4*, UInt8*, UInt32, UInt32*, HRESULT)
    get_current_process_executable_name_wide : Proc(IDebugSystemObjects4*, Char*, UInt32, UInt32*, HRESULT)
    get_current_system_server_name_wide : Proc(IDebugSystemObjects4*, Char*, UInt32, UInt32*, HRESULT)
  end

  IDebugSystemObjects4_GUID = "489468e6-7d0f-4af5-87ab-25207454d553"
  IID_IDebugSystemObjects4 = LibC::GUID.new(0x489468e6_u32, 0x7d0f_u16, 0x4af5_u16, StaticArray[0x87_u8, 0xab_u8, 0x25_u8, 0x20_u8, 0x74_u8, 0x54_u8, 0xd5_u8, 0x53_u8])
  struct IDebugSystemObjects4
    lpVtbl : IDebugSystemObjects4VTbl*
  end

  struct DebugBaseEventCallbacksVTbl
    query_interface : Proc(DebugBaseEventCallbacks*, Guid*, Void**, HRESULT)
    add_ref : Proc(DebugBaseEventCallbacks*, UInt32)
    release : Proc(DebugBaseEventCallbacks*, UInt32)
    get_interest_mask : Proc(DebugBaseEventCallbacks*, UInt32*, HRESULT)
    breakpoint : Proc(DebugBaseEventCallbacks*, IDebugBreakpoint, HRESULT)
    exception : Proc(DebugBaseEventCallbacks*, EXCEPTION_RECORD64*, UInt32, HRESULT)
    create_thread : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt64, HRESULT)
    exit_thread : Proc(DebugBaseEventCallbacks*, UInt32, HRESULT)
    create_process_a : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt64, UInt32, PSTR, PSTR, UInt32, UInt32, UInt64, UInt64, UInt64, HRESULT)
    exit_process : Proc(DebugBaseEventCallbacks*, UInt32, HRESULT)
    load_module : Proc(DebugBaseEventCallbacks*, UInt64, UInt64, UInt32, PSTR, PSTR, UInt32, UInt32, HRESULT)
    unload_module : Proc(DebugBaseEventCallbacks*, PSTR, UInt64, HRESULT)
    system_error : Proc(DebugBaseEventCallbacks*, UInt32, UInt32, HRESULT)
    session_status : Proc(DebugBaseEventCallbacks*, UInt32, HRESULT)
    change_debuggee_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, HRESULT)
    change_engine_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, HRESULT)
    change_symbol_state : Proc(DebugBaseEventCallbacks*, UInt32, UInt64, HRESULT)
  end

  struct DebugBaseEventCallbacks
    lpVtbl : DebugBaseEventCallbacksVTbl*
  end

  struct DebugBaseEventCallbacksWideVTbl
    query_interface : Proc(DebugBaseEventCallbacksWide*, Guid*, Void**, HRESULT)
    add_ref : Proc(DebugBaseEventCallbacksWide*, UInt32)
    release : Proc(DebugBaseEventCallbacksWide*, UInt32)
    get_interest_mask : Proc(DebugBaseEventCallbacksWide*, UInt32*, HRESULT)
    breakpoint : Proc(DebugBaseEventCallbacksWide*, IDebugBreakpoint2, HRESULT)
    exception : Proc(DebugBaseEventCallbacksWide*, EXCEPTION_RECORD64*, UInt32, HRESULT)
    create_thread : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt64, HRESULT)
    exit_thread : Proc(DebugBaseEventCallbacksWide*, UInt32, HRESULT)
    create_process_a : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, UInt64, UInt64, UInt64, HRESULT)
    exit_process : Proc(DebugBaseEventCallbacksWide*, UInt32, HRESULT)
    load_module : Proc(DebugBaseEventCallbacksWide*, UInt64, UInt64, UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    unload_module : Proc(DebugBaseEventCallbacksWide*, LibC::LPWSTR, UInt64, HRESULT)
    system_error : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt32, HRESULT)
    session_status : Proc(DebugBaseEventCallbacksWide*, UInt32, HRESULT)
    change_debuggee_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, HRESULT)
    change_engine_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, HRESULT)
    change_symbol_state : Proc(DebugBaseEventCallbacksWide*, UInt32, UInt64, HRESULT)
  end

  struct DebugBaseEventCallbacksWide
    lpVtbl : DebugBaseEventCallbacksWideVTbl*
  end

  struct IHostDataModelAccessVTbl
    query_interface : Proc(IHostDataModelAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHostDataModelAccess*, UInt32)
    release : Proc(IHostDataModelAccess*, UInt32)
    get_data_model : Proc(IHostDataModelAccess*, IDataModelManager*, IDebugHost*, HRESULT)
  end

  IHostDataModelAccess_GUID = "f2bce54e-4835-4f8a-836e-7981e29904d1"
  IID_IHostDataModelAccess = LibC::GUID.new(0xf2bce54e_u32, 0x4835_u16, 0x4f8a_u16, StaticArray[0x83_u8, 0x6e_u8, 0x79_u8, 0x81_u8, 0xe2_u8, 0x99_u8, 0x4_u8, 0xd1_u8])
  struct IHostDataModelAccess
    lpVtbl : IHostDataModelAccessVTbl*
  end

  struct IKeyStoreVTbl
    query_interface : Proc(IKeyStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKeyStore*, UInt32)
    release : Proc(IKeyStore*, UInt32)
    get_key : Proc(IKeyStore*, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    set_key : Proc(IKeyStore*, LibC::LPWSTR, IModelObject, IKeyStore, HRESULT)
    get_key_value : Proc(IKeyStore*, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    set_key_value : Proc(IKeyStore*, LibC::LPWSTR, IModelObject, HRESULT)
    clear_keys : Proc(IKeyStore*, HRESULT)
  end

  IKeyStore_GUID = "0fc7557d-401d-4fca-9365-da1e9850697c"
  IID_IKeyStore = LibC::GUID.new(0xfc7557d_u32, 0x401d_u16, 0x4fca_u16, StaticArray[0x93_u8, 0x65_u8, 0xda_u8, 0x1e_u8, 0x98_u8, 0x50_u8, 0x69_u8, 0x7c_u8])
  struct IKeyStore
    lpVtbl : IKeyStoreVTbl*
  end

  struct IModelObjectVTbl
    query_interface : Proc(IModelObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelObject*, UInt32)
    release : Proc(IModelObject*, UInt32)
    get_context : Proc(IModelObject*, IDebugHostContext*, HRESULT)
    get_kind : Proc(IModelObject*, ModelObjectKind*, HRESULT)
    get_intrinsic_value : Proc(IModelObject*, VARIANT*, HRESULT)
    get_intrinsic_value_as : Proc(IModelObject*, UInt16, VARIANT*, HRESULT)
    get_key_value : Proc(IModelObject*, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    set_key_value : Proc(IModelObject*, LibC::LPWSTR, IModelObject, HRESULT)
    enumerate_key_values : Proc(IModelObject*, IKeyEnumerator*, HRESULT)
    get_raw_value : Proc(IModelObject*, SymbolKind, LibC::LPWSTR, UInt32, IModelObject*, HRESULT)
    enumerate_raw_values : Proc(IModelObject*, SymbolKind, UInt32, IRawEnumerator*, HRESULT)
    dereference : Proc(IModelObject*, IModelObject*, HRESULT)
    try_cast_to_runtime_type : Proc(IModelObject*, IModelObject*, HRESULT)
    get_concept : Proc(IModelObject*, Guid*, IUnknown*, IKeyStore*, HRESULT)
    get_location : Proc(IModelObject*, Location*, HRESULT)
    get_type_info : Proc(IModelObject*, IDebugHostType*, HRESULT)
    get_target_info : Proc(IModelObject*, Location*, IDebugHostType*, HRESULT)
    get_number_of_parent_models : Proc(IModelObject*, UInt64*, HRESULT)
    get_parent_model : Proc(IModelObject*, UInt64, IModelObject*, IModelObject*, HRESULT)
    add_parent_model : Proc(IModelObject*, IModelObject, IModelObject, UInt8, HRESULT)
    remove_parent_model : Proc(IModelObject*, IModelObject, HRESULT)
    get_key : Proc(IModelObject*, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    get_key_reference : Proc(IModelObject*, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    set_key : Proc(IModelObject*, LibC::LPWSTR, IModelObject, IKeyStore, HRESULT)
    clear_keys : Proc(IModelObject*, HRESULT)
    enumerate_keys : Proc(IModelObject*, IKeyEnumerator*, HRESULT)
    enumerate_key_references : Proc(IModelObject*, IKeyEnumerator*, HRESULT)
    set_concept : Proc(IModelObject*, Guid*, IUnknown, IKeyStore, HRESULT)
    clear_concepts : Proc(IModelObject*, HRESULT)
    get_raw_reference : Proc(IModelObject*, SymbolKind, LibC::LPWSTR, UInt32, IModelObject*, HRESULT)
    enumerate_raw_references : Proc(IModelObject*, SymbolKind, UInt32, IRawEnumerator*, HRESULT)
    set_context_for_data_model : Proc(IModelObject*, IModelObject, IUnknown, HRESULT)
    get_context_for_data_model : Proc(IModelObject*, IModelObject, IUnknown*, HRESULT)
    compare : Proc(IModelObject*, IModelObject, IModelObject*, HRESULT)
    is_equal_to : Proc(IModelObject*, IModelObject, Bool*, HRESULT)
  end

  IModelObject_GUID = "e28c7893-3f4b-4b96-baca-293cdc55f45d"
  IID_IModelObject = LibC::GUID.new(0xe28c7893_u32, 0x3f4b_u16, 0x4b96_u16, StaticArray[0xba_u8, 0xca_u8, 0x29_u8, 0x3c_u8, 0xdc_u8, 0x55_u8, 0xf4_u8, 0x5d_u8])
  struct IModelObject
    lpVtbl : IModelObjectVTbl*
  end

  struct IDataModelManagerVTbl
    query_interface : Proc(IDataModelManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelManager*, UInt32)
    release : Proc(IDataModelManager*, UInt32)
    close : Proc(IDataModelManager*, HRESULT)
    create_no_value : Proc(IDataModelManager*, IModelObject*, HRESULT)
    create_error_object : Proc(IDataModelManager*, HRESULT, LibC::LPWSTR, IModelObject*, HRESULT)
    create_typed_object : Proc(IDataModelManager*, IDebugHostContext, Location, IDebugHostType, IModelObject*, HRESULT)
    create_typed_object_reference : Proc(IDataModelManager*, IDebugHostContext, Location, IDebugHostType, IModelObject*, HRESULT)
    create_synthetic_object : Proc(IDataModelManager*, IDebugHostContext, IModelObject*, HRESULT)
    create_data_model_object : Proc(IDataModelManager*, IDataModelConcept, IModelObject*, HRESULT)
    create_intrinsic_object : Proc(IDataModelManager*, ModelObjectKind, VARIANT*, IModelObject*, HRESULT)
    create_typed_intrinsic_object : Proc(IDataModelManager*, VARIANT*, IDebugHostType, IModelObject*, HRESULT)
    get_model_for_type_signature : Proc(IDataModelManager*, IDebugHostTypeSignature, IModelObject*, HRESULT)
    get_model_for_type : Proc(IDataModelManager*, IDebugHostType, IModelObject*, IDebugHostTypeSignature*, IDebugHostSymbolEnumerator*, HRESULT)
    register_model_for_type_signature : Proc(IDataModelManager*, IDebugHostTypeSignature, IModelObject, HRESULT)
    unregister_model_for_type_signature : Proc(IDataModelManager*, IModelObject, IDebugHostTypeSignature, HRESULT)
    register_extension_for_type_signature : Proc(IDataModelManager*, IDebugHostTypeSignature, IModelObject, HRESULT)
    unregister_extension_for_type_signature : Proc(IDataModelManager*, IModelObject, IDebugHostTypeSignature, HRESULT)
    create_metadata_store : Proc(IDataModelManager*, IKeyStore, IKeyStore*, HRESULT)
    get_root_namespace : Proc(IDataModelManager*, IModelObject*, HRESULT)
    register_named_model : Proc(IDataModelManager*, LibC::LPWSTR, IModelObject, HRESULT)
    unregister_named_model : Proc(IDataModelManager*, LibC::LPWSTR, HRESULT)
    acquire_named_model : Proc(IDataModelManager*, LibC::LPWSTR, IModelObject*, HRESULT)
  end

  IDataModelManager_GUID = "73fe19f4-a110-4500-8ed9-3c28896f508c"
  IID_IDataModelManager = LibC::GUID.new(0x73fe19f4_u32, 0xa110_u16, 0x4500_u16, StaticArray[0x8e_u8, 0xd9_u8, 0x3c_u8, 0x28_u8, 0x89_u8, 0x6f_u8, 0x50_u8, 0x8c_u8])
  struct IDataModelManager
    lpVtbl : IDataModelManagerVTbl*
  end

  struct IModelKeyReferenceVTbl
    query_interface : Proc(IModelKeyReference*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelKeyReference*, UInt32)
    release : Proc(IModelKeyReference*, UInt32)
    get_key_name : Proc(IModelKeyReference*, UInt8**, HRESULT)
    get_original_object : Proc(IModelKeyReference*, IModelObject*, HRESULT)
    get_context_object : Proc(IModelKeyReference*, IModelObject*, HRESULT)
    get_key : Proc(IModelKeyReference*, IModelObject*, IKeyStore*, HRESULT)
    get_key_value : Proc(IModelKeyReference*, IModelObject*, IKeyStore*, HRESULT)
    set_key : Proc(IModelKeyReference*, IModelObject, IKeyStore, HRESULT)
    set_key_value : Proc(IModelKeyReference*, IModelObject, HRESULT)
  end

  IModelKeyReference_GUID = "5253dcf8-5aff-4c62-b302-56a289e00998"
  IID_IModelKeyReference = LibC::GUID.new(0x5253dcf8_u32, 0x5aff_u16, 0x4c62_u16, StaticArray[0xb3_u8, 0x2_u8, 0x56_u8, 0xa2_u8, 0x89_u8, 0xe0_u8, 0x9_u8, 0x98_u8])
  struct IModelKeyReference
    lpVtbl : IModelKeyReferenceVTbl*
  end

  struct IModelPropertyAccessorVTbl
    query_interface : Proc(IModelPropertyAccessor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelPropertyAccessor*, UInt32)
    release : Proc(IModelPropertyAccessor*, UInt32)
    get_value : Proc(IModelPropertyAccessor*, LibC::LPWSTR, IModelObject, IModelObject*, HRESULT)
    set_value : Proc(IModelPropertyAccessor*, LibC::LPWSTR, IModelObject, IModelObject, HRESULT)
  end

  IModelPropertyAccessor_GUID = "5a0c63d9-0526-42b8-960c-9516a3254c85"
  IID_IModelPropertyAccessor = LibC::GUID.new(0x5a0c63d9_u32, 0x526_u16, 0x42b8_u16, StaticArray[0x96_u8, 0xc_u8, 0x95_u8, 0x16_u8, 0xa3_u8, 0x25_u8, 0x4c_u8, 0x85_u8])
  struct IModelPropertyAccessor
    lpVtbl : IModelPropertyAccessorVTbl*
  end

  struct IModelMethodVTbl
    query_interface : Proc(IModelMethod*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelMethod*, UInt32)
    release : Proc(IModelMethod*, UInt32)
    call : Proc(IModelMethod*, IModelObject, UInt64, IModelObject*, IModelObject*, IKeyStore*, HRESULT)
  end

  IModelMethod_GUID = "80600c1f-b90b-4896-82ad-1c00207909e8"
  IID_IModelMethod = LibC::GUID.new(0x80600c1f_u32, 0xb90b_u16, 0x4896_u16, StaticArray[0x82_u8, 0xad_u8, 0x1c_u8, 0x0_u8, 0x20_u8, 0x79_u8, 0x9_u8, 0xe8_u8])
  struct IModelMethod
    lpVtbl : IModelMethodVTbl*
  end

  struct IKeyEnumeratorVTbl
    query_interface : Proc(IKeyEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKeyEnumerator*, UInt32)
    release : Proc(IKeyEnumerator*, UInt32)
    reset : Proc(IKeyEnumerator*, HRESULT)
    get_next : Proc(IKeyEnumerator*, UInt8**, IModelObject*, IKeyStore*, HRESULT)
  end

  IKeyEnumerator_GUID = "345fa92e-5e00-4319-9cae-971f7601cdcf"
  IID_IKeyEnumerator = LibC::GUID.new(0x345fa92e_u32, 0x5e00_u16, 0x4319_u16, StaticArray[0x9c_u8, 0xae_u8, 0x97_u8, 0x1f_u8, 0x76_u8, 0x1_u8, 0xcd_u8, 0xcf_u8])
  struct IKeyEnumerator
    lpVtbl : IKeyEnumeratorVTbl*
  end

  struct IRawEnumeratorVTbl
    query_interface : Proc(IRawEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRawEnumerator*, UInt32)
    release : Proc(IRawEnumerator*, UInt32)
    reset : Proc(IRawEnumerator*, HRESULT)
    get_next : Proc(IRawEnumerator*, UInt8**, SymbolKind*, IModelObject*, HRESULT)
  end

  IRawEnumerator_GUID = "e13613f9-3a3c-40b5-8f48-1e5ebfb9b21b"
  IID_IRawEnumerator = LibC::GUID.new(0xe13613f9_u32, 0x3a3c_u16, 0x40b5_u16, StaticArray[0x8f_u8, 0x48_u8, 0x1e_u8, 0x5e_u8, 0xbf_u8, 0xb9_u8, 0xb2_u8, 0x1b_u8])
  struct IRawEnumerator
    lpVtbl : IRawEnumeratorVTbl*
  end

  struct IDataModelConceptVTbl
    query_interface : Proc(IDataModelConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelConcept*, UInt32)
    release : Proc(IDataModelConcept*, UInt32)
    initialize_object : Proc(IDataModelConcept*, IModelObject, IDebugHostTypeSignature, IDebugHostSymbolEnumerator, HRESULT)
    get_name : Proc(IDataModelConcept*, UInt8**, HRESULT)
  end

  IDataModelConcept_GUID = "fcb98d1d-1114-4fbf-b24c-effcb5def0d3"
  IID_IDataModelConcept = LibC::GUID.new(0xfcb98d1d_u32, 0x1114_u16, 0x4fbf_u16, StaticArray[0xb2_u8, 0x4c_u8, 0xef_u8, 0xfc_u8, 0xb5_u8, 0xde_u8, 0xf0_u8, 0xd3_u8])
  struct IDataModelConcept
    lpVtbl : IDataModelConceptVTbl*
  end

  struct IStringDisplayableConceptVTbl
    query_interface : Proc(IStringDisplayableConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStringDisplayableConcept*, UInt32)
    release : Proc(IStringDisplayableConcept*, UInt32)
    to_display_string : Proc(IStringDisplayableConcept*, IModelObject, IKeyStore, UInt8**, HRESULT)
  end

  IStringDisplayableConcept_GUID = "d28e8d70-6c00-4205-940d-501016601ea3"
  IID_IStringDisplayableConcept = LibC::GUID.new(0xd28e8d70_u32, 0x6c00_u16, 0x4205_u16, StaticArray[0x94_u8, 0xd_u8, 0x50_u8, 0x10_u8, 0x16_u8, 0x60_u8, 0x1e_u8, 0xa3_u8])
  struct IStringDisplayableConcept
    lpVtbl : IStringDisplayableConceptVTbl*
  end

  struct ICodeAddressConceptVTbl
    query_interface : Proc(ICodeAddressConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICodeAddressConcept*, UInt32)
    release : Proc(ICodeAddressConcept*, UInt32)
    get_containing_symbol : Proc(ICodeAddressConcept*, IModelObject, IDebugHostSymbol*, HRESULT)
  end

  ICodeAddressConcept_GUID = "c7371568-5c78-4a00-a4ab-6ef8823184cb"
  IID_ICodeAddressConcept = LibC::GUID.new(0xc7371568_u32, 0x5c78_u16, 0x4a00_u16, StaticArray[0xa4_u8, 0xab_u8, 0x6e_u8, 0xf8_u8, 0x82_u8, 0x31_u8, 0x84_u8, 0xcb_u8])
  struct ICodeAddressConcept
    lpVtbl : ICodeAddressConceptVTbl*
  end

  struct IModelIteratorVTbl
    query_interface : Proc(IModelIterator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelIterator*, UInt32)
    release : Proc(IModelIterator*, UInt32)
    reset : Proc(IModelIterator*, HRESULT)
    get_next : Proc(IModelIterator*, IModelObject*, UInt64, IModelObject*, IKeyStore*, HRESULT)
  end

  IModelIterator_GUID = "e4622136-927d-4490-874f-581f3e4e3688"
  IID_IModelIterator = LibC::GUID.new(0xe4622136_u32, 0x927d_u16, 0x4490_u16, StaticArray[0x87_u8, 0x4f_u8, 0x58_u8, 0x1f_u8, 0x3e_u8, 0x4e_u8, 0x36_u8, 0x88_u8])
  struct IModelIterator
    lpVtbl : IModelIteratorVTbl*
  end

  struct IIterableConceptVTbl
    query_interface : Proc(IIterableConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIterableConcept*, UInt32)
    release : Proc(IIterableConcept*, UInt32)
    get_default_index_dimensionality : Proc(IIterableConcept*, IModelObject, UInt64*, HRESULT)
    get_iterator : Proc(IIterableConcept*, IModelObject, IModelIterator*, HRESULT)
  end

  IIterableConcept_GUID = "f5d49d0c-0b02-4301-9c9b-b3a6037628f3"
  IID_IIterableConcept = LibC::GUID.new(0xf5d49d0c_u32, 0xb02_u16, 0x4301_u16, StaticArray[0x9c_u8, 0x9b_u8, 0xb3_u8, 0xa6_u8, 0x3_u8, 0x76_u8, 0x28_u8, 0xf3_u8])
  struct IIterableConcept
    lpVtbl : IIterableConceptVTbl*
  end

  struct IIndexableConceptVTbl
    query_interface : Proc(IIndexableConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIndexableConcept*, UInt32)
    release : Proc(IIndexableConcept*, UInt32)
    get_dimensionality : Proc(IIndexableConcept*, IModelObject, UInt64*, HRESULT)
    get_at : Proc(IIndexableConcept*, IModelObject, UInt64, IModelObject*, IModelObject*, IKeyStore*, HRESULT)
    set_at : Proc(IIndexableConcept*, IModelObject, UInt64, IModelObject*, IModelObject, HRESULT)
  end

  IIndexableConcept_GUID = "d1fad99f-3f53-4457-850c-8051df2d3fb5"
  IID_IIndexableConcept = LibC::GUID.new(0xd1fad99f_u32, 0x3f53_u16, 0x4457_u16, StaticArray[0x85_u8, 0xc_u8, 0x80_u8, 0x51_u8, 0xdf_u8, 0x2d_u8, 0x3f_u8, 0xb5_u8])
  struct IIndexableConcept
    lpVtbl : IIndexableConceptVTbl*
  end

  struct IPreferredRuntimeTypeConceptVTbl
    query_interface : Proc(IPreferredRuntimeTypeConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPreferredRuntimeTypeConcept*, UInt32)
    release : Proc(IPreferredRuntimeTypeConcept*, UInt32)
    cast_to_preferred_runtime_type : Proc(IPreferredRuntimeTypeConcept*, IModelObject, IModelObject*, HRESULT)
  end

  IPreferredRuntimeTypeConcept_GUID = "9d6c1d7b-a76f-4618-8068-5f76bd9a4e8a"
  IID_IPreferredRuntimeTypeConcept = LibC::GUID.new(0x9d6c1d7b_u32, 0xa76f_u16, 0x4618_u16, StaticArray[0x80_u8, 0x68_u8, 0x5f_u8, 0x76_u8, 0xbd_u8, 0x9a_u8, 0x4e_u8, 0x8a_u8])
  struct IPreferredRuntimeTypeConcept
    lpVtbl : IPreferredRuntimeTypeConceptVTbl*
  end

  struct IDebugHostVTbl
    query_interface : Proc(IDebugHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHost*, UInt32)
    release : Proc(IDebugHost*, UInt32)
    get_host_defined_interface : Proc(IDebugHost*, IUnknown*, HRESULT)
    get_current_context : Proc(IDebugHost*, IDebugHostContext*, HRESULT)
    get_default_metadata : Proc(IDebugHost*, IKeyStore*, HRESULT)
  end

  IDebugHost_GUID = "b8c74943-6b2c-4eeb-b5c5-35d378a6d99d"
  IID_IDebugHost = LibC::GUID.new(0xb8c74943_u32, 0x6b2c_u16, 0x4eeb_u16, StaticArray[0xb5_u8, 0xc5_u8, 0x35_u8, 0xd3_u8, 0x78_u8, 0xa6_u8, 0xd9_u8, 0x9d_u8])
  struct IDebugHost
    lpVtbl : IDebugHostVTbl*
  end

  struct IDebugHostContextVTbl
    query_interface : Proc(IDebugHostContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostContext*, UInt32)
    release : Proc(IDebugHostContext*, UInt32)
    is_equal_to : Proc(IDebugHostContext*, IDebugHostContext, Bool*, HRESULT)
  end

  IDebugHostContext_GUID = "a68c70d8-5ec0-46e5-b775-3134a48ea2e3"
  IID_IDebugHostContext = LibC::GUID.new(0xa68c70d8_u32, 0x5ec0_u16, 0x46e5_u16, StaticArray[0xb7_u8, 0x75_u8, 0x31_u8, 0x34_u8, 0xa4_u8, 0x8e_u8, 0xa2_u8, 0xe3_u8])
  struct IDebugHostContext
    lpVtbl : IDebugHostContextVTbl*
  end

  struct IDebugHostErrorSinkVTbl
    query_interface : Proc(IDebugHostErrorSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostErrorSink*, UInt32)
    release : Proc(IDebugHostErrorSink*, UInt32)
    report_error : Proc(IDebugHostErrorSink*, ErrorClass, HRESULT, LibC::LPWSTR, HRESULT)
  end

  IDebugHostErrorSink_GUID = "c8ff0f0b-fce9-467e-8bb3-5d69ef109c00"
  IID_IDebugHostErrorSink = LibC::GUID.new(0xc8ff0f0b_u32, 0xfce9_u16, 0x467e_u16, StaticArray[0x8b_u8, 0xb3_u8, 0x5d_u8, 0x69_u8, 0xef_u8, 0x10_u8, 0x9c_u8, 0x0_u8])
  struct IDebugHostErrorSink
    lpVtbl : IDebugHostErrorSinkVTbl*
  end

  struct IDebugHostSymbolVTbl
    query_interface : Proc(IDebugHostSymbol*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostSymbol*, UInt32)
    release : Proc(IDebugHostSymbol*, UInt32)
    get_context : Proc(IDebugHostSymbol*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostSymbol*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostSymbol*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostSymbol*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostSymbol*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostSymbol*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostSymbol*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
  end

  IDebugHostSymbol_GUID = "0f819103-87de-4e96-8277-e05cd441fb22"
  IID_IDebugHostSymbol = LibC::GUID.new(0xf819103_u32, 0x87de_u16, 0x4e96_u16, StaticArray[0x82_u8, 0x77_u8, 0xe0_u8, 0x5c_u8, 0xd4_u8, 0x41_u8, 0xfb_u8, 0x22_u8])
  struct IDebugHostSymbol
    lpVtbl : IDebugHostSymbolVTbl*
  end

  struct IDebugHostSymbolEnumeratorVTbl
    query_interface : Proc(IDebugHostSymbolEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostSymbolEnumerator*, UInt32)
    release : Proc(IDebugHostSymbolEnumerator*, UInt32)
    reset : Proc(IDebugHostSymbolEnumerator*, HRESULT)
    get_next : Proc(IDebugHostSymbolEnumerator*, IDebugHostSymbol*, HRESULT)
  end

  IDebugHostSymbolEnumerator_GUID = "28d96c86-10a3-4976-b14e-eaef4790aa1f"
  IID_IDebugHostSymbolEnumerator = LibC::GUID.new(0x28d96c86_u32, 0x10a3_u16, 0x4976_u16, StaticArray[0xb1_u8, 0x4e_u8, 0xea_u8, 0xef_u8, 0x47_u8, 0x90_u8, 0xaa_u8, 0x1f_u8])
  struct IDebugHostSymbolEnumerator
    lpVtbl : IDebugHostSymbolEnumeratorVTbl*
  end

  struct IDebugHostModuleVTbl
    query_interface : Proc(IDebugHostModule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostModule*, UInt32)
    release : Proc(IDebugHostModule*, UInt32)
    get_context : Proc(IDebugHostModule*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostModule*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostModule*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostModule*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostModule*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostModule*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostModule*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_image_name : Proc(IDebugHostModule*, UInt8, UInt8**, HRESULT)
    get_base_location : Proc(IDebugHostModule*, Location*, HRESULT)
    get_version : Proc(IDebugHostModule*, UInt64*, UInt64*, HRESULT)
    find_type_by_name : Proc(IDebugHostModule*, LibC::LPWSTR, IDebugHostType*, HRESULT)
    find_symbol_by_rva : Proc(IDebugHostModule*, UInt64, IDebugHostSymbol*, HRESULT)
    find_symbol_by_name : Proc(IDebugHostModule*, LibC::LPWSTR, IDebugHostSymbol*, HRESULT)
  end

  IDebugHostModule_GUID = "c9ba3e18-d070-4378-bbd0-34613b346e1e"
  IID_IDebugHostModule = LibC::GUID.new(0xc9ba3e18_u32, 0xd070_u16, 0x4378_u16, StaticArray[0xbb_u8, 0xd0_u8, 0x34_u8, 0x61_u8, 0x3b_u8, 0x34_u8, 0x6e_u8, 0x1e_u8])
  struct IDebugHostModule
    lpVtbl : IDebugHostModuleVTbl*
  end

  struct IDebugHostTypeVTbl
    query_interface : Proc(IDebugHostType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostType*, UInt32)
    release : Proc(IDebugHostType*, UInt32)
    get_context : Proc(IDebugHostType*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostType*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostType*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostType*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostType*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostType*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostType*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_type_kind : Proc(IDebugHostType*, TypeKind*, HRESULT)
    get_size : Proc(IDebugHostType*, UInt64*, HRESULT)
    get_base_type : Proc(IDebugHostType*, IDebugHostType*, HRESULT)
    get_hash_code : Proc(IDebugHostType*, UInt32*, HRESULT)
    get_intrinsic_type : Proc(IDebugHostType*, IntrinsicKind*, UInt16*, HRESULT)
    get_bit_field : Proc(IDebugHostType*, UInt32*, UInt32*, HRESULT)
    get_pointer_kind : Proc(IDebugHostType*, PointerKind*, HRESULT)
    get_member_type : Proc(IDebugHostType*, IDebugHostType*, HRESULT)
    create_pointer_to : Proc(IDebugHostType*, PointerKind, IDebugHostType*, HRESULT)
    get_array_dimensionality : Proc(IDebugHostType*, UInt64*, HRESULT)
    get_array_dimensions : Proc(IDebugHostType*, UInt64, ArrayDimension*, HRESULT)
    create_array_of : Proc(IDebugHostType*, UInt64, ArrayDimension*, IDebugHostType*, HRESULT)
    get_function_calling_convention : Proc(IDebugHostType*, CallingConventionKind*, HRESULT)
    get_function_return_type : Proc(IDebugHostType*, IDebugHostType*, HRESULT)
    get_function_parameter_type_count : Proc(IDebugHostType*, UInt64*, HRESULT)
    get_function_parameter_type_at : Proc(IDebugHostType*, UInt64, IDebugHostType*, HRESULT)
    is_generic : Proc(IDebugHostType*, Bool*, HRESULT)
    get_generic_argument_count : Proc(IDebugHostType*, UInt64*, HRESULT)
    get_generic_argument_at : Proc(IDebugHostType*, UInt64, IDebugHostSymbol*, HRESULT)
  end

  IDebugHostType_GUID = "3aadc353-2b14-4abb-9893-5e03458e07ee"
  IID_IDebugHostType = LibC::GUID.new(0x3aadc353_u32, 0x2b14_u16, 0x4abb_u16, StaticArray[0x98_u8, 0x93_u8, 0x5e_u8, 0x3_u8, 0x45_u8, 0x8e_u8, 0x7_u8, 0xee_u8])
  struct IDebugHostType
    lpVtbl : IDebugHostTypeVTbl*
  end

  struct IDebugHostConstantVTbl
    query_interface : Proc(IDebugHostConstant*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostConstant*, UInt32)
    release : Proc(IDebugHostConstant*, UInt32)
    get_context : Proc(IDebugHostConstant*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostConstant*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostConstant*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostConstant*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostConstant*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostConstant*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostConstant*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_value : Proc(IDebugHostConstant*, VARIANT*, HRESULT)
  end

  IDebugHostConstant_GUID = "62787edc-fa76-4690-bd71-5e8c3e2937ec"
  IID_IDebugHostConstant = LibC::GUID.new(0x62787edc_u32, 0xfa76_u16, 0x4690_u16, StaticArray[0xbd_u8, 0x71_u8, 0x5e_u8, 0x8c_u8, 0x3e_u8, 0x29_u8, 0x37_u8, 0xec_u8])
  struct IDebugHostConstant
    lpVtbl : IDebugHostConstantVTbl*
  end

  struct IDebugHostFieldVTbl
    query_interface : Proc(IDebugHostField*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostField*, UInt32)
    release : Proc(IDebugHostField*, UInt32)
    get_context : Proc(IDebugHostField*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostField*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostField*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostField*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostField*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostField*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostField*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_location_kind : Proc(IDebugHostField*, LocationKind*, HRESULT)
    get_offset : Proc(IDebugHostField*, UInt64*, HRESULT)
    get_location : Proc(IDebugHostField*, Location*, HRESULT)
    get_value : Proc(IDebugHostField*, VARIANT*, HRESULT)
  end

  IDebugHostField_GUID = "e06f6495-16bc-4cc9-b11d-2a6b23fa72f3"
  IID_IDebugHostField = LibC::GUID.new(0xe06f6495_u32, 0x16bc_u16, 0x4cc9_u16, StaticArray[0xb1_u8, 0x1d_u8, 0x2a_u8, 0x6b_u8, 0x23_u8, 0xfa_u8, 0x72_u8, 0xf3_u8])
  struct IDebugHostField
    lpVtbl : IDebugHostFieldVTbl*
  end

  struct IDebugHostDataVTbl
    query_interface : Proc(IDebugHostData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostData*, UInt32)
    release : Proc(IDebugHostData*, UInt32)
    get_context : Proc(IDebugHostData*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostData*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostData*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostData*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostData*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostData*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostData*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_location_kind : Proc(IDebugHostData*, LocationKind*, HRESULT)
    get_location : Proc(IDebugHostData*, Location*, HRESULT)
    get_value : Proc(IDebugHostData*, VARIANT*, HRESULT)
  end

  IDebugHostData_GUID = "a3d64993-826c-44fa-897d-926f2fe7ad0b"
  IID_IDebugHostData = LibC::GUID.new(0xa3d64993_u32, 0x826c_u16, 0x44fa_u16, StaticArray[0x89_u8, 0x7d_u8, 0x92_u8, 0x6f_u8, 0x2f_u8, 0xe7_u8, 0xad_u8, 0xb_u8])
  struct IDebugHostData
    lpVtbl : IDebugHostDataVTbl*
  end

  struct IDebugHostPublicVTbl
    query_interface : Proc(IDebugHostPublic*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostPublic*, UInt32)
    release : Proc(IDebugHostPublic*, UInt32)
    get_context : Proc(IDebugHostPublic*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostPublic*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostPublic*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostPublic*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostPublic*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostPublic*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostPublic*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_location_kind : Proc(IDebugHostPublic*, LocationKind*, HRESULT)
    get_location : Proc(IDebugHostPublic*, Location*, HRESULT)
  end

  IDebugHostPublic_GUID = "6c597ac9-fb4d-4f6d-9f39-22488539f8f4"
  IID_IDebugHostPublic = LibC::GUID.new(0x6c597ac9_u32, 0xfb4d_u16, 0x4f6d_u16, StaticArray[0x9f_u8, 0x39_u8, 0x22_u8, 0x48_u8, 0x85_u8, 0x39_u8, 0xf8_u8, 0xf4_u8])
  struct IDebugHostPublic
    lpVtbl : IDebugHostPublicVTbl*
  end

  struct IDebugHostBaseClassVTbl
    query_interface : Proc(IDebugHostBaseClass*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostBaseClass*, UInt32)
    release : Proc(IDebugHostBaseClass*, UInt32)
    get_context : Proc(IDebugHostBaseClass*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostBaseClass*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostBaseClass*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostBaseClass*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostBaseClass*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostBaseClass*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostBaseClass*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_offset : Proc(IDebugHostBaseClass*, UInt64*, HRESULT)
  end

  IDebugHostBaseClass_GUID = "b94d57d2-390b-40f7-b5b4-b6db897d974b"
  IID_IDebugHostBaseClass = LibC::GUID.new(0xb94d57d2_u32, 0x390b_u16, 0x40f7_u16, StaticArray[0xb5_u8, 0xb4_u8, 0xb6_u8, 0xdb_u8, 0x89_u8, 0x7d_u8, 0x97_u8, 0x4b_u8])
  struct IDebugHostBaseClass
    lpVtbl : IDebugHostBaseClassVTbl*
  end

  struct IDebugHostSymbolsVTbl
    query_interface : Proc(IDebugHostSymbols*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostSymbols*, UInt32)
    release : Proc(IDebugHostSymbols*, UInt32)
    create_module_signature : Proc(IDebugHostSymbols*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IDebugHostModuleSignature*, HRESULT)
    create_type_signature : Proc(IDebugHostSymbols*, LibC::LPWSTR, IDebugHostModule, IDebugHostTypeSignature*, HRESULT)
    create_type_signature_for_module_range : Proc(IDebugHostSymbols*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IDebugHostTypeSignature*, HRESULT)
    enumerate_modules : Proc(IDebugHostSymbols*, IDebugHostContext, IDebugHostSymbolEnumerator*, HRESULT)
    find_module_by_name : Proc(IDebugHostSymbols*, IDebugHostContext, LibC::LPWSTR, IDebugHostModule*, HRESULT)
    find_module_by_location : Proc(IDebugHostSymbols*, IDebugHostContext, Location, IDebugHostModule*, HRESULT)
    get_most_derived_object : Proc(IDebugHostSymbols*, IDebugHostContext, Location, IDebugHostType, Location*, IDebugHostType*, HRESULT)
  end

  IDebugHostSymbols_GUID = "854fd751-c2e1-4eb2-b525-6619cb97a588"
  IID_IDebugHostSymbols = LibC::GUID.new(0x854fd751_u32, 0xc2e1_u16, 0x4eb2_u16, StaticArray[0xb5_u8, 0x25_u8, 0x66_u8, 0x19_u8, 0xcb_u8, 0x97_u8, 0xa5_u8, 0x88_u8])
  struct IDebugHostSymbols
    lpVtbl : IDebugHostSymbolsVTbl*
  end

  struct IDebugHostMemoryVTbl
    query_interface : Proc(IDebugHostMemory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostMemory*, UInt32)
    release : Proc(IDebugHostMemory*, UInt32)
    read_bytes : Proc(IDebugHostMemory*, IDebugHostContext, Location, Void*, UInt64, UInt64*, HRESULT)
    write_bytes : Proc(IDebugHostMemory*, IDebugHostContext, Location, Void*, UInt64, UInt64*, HRESULT)
    read_pointers : Proc(IDebugHostMemory*, IDebugHostContext, Location, UInt64, UInt64*, HRESULT)
    write_pointers : Proc(IDebugHostMemory*, IDebugHostContext, Location, UInt64, UInt64*, HRESULT)
    get_display_string_for_location : Proc(IDebugHostMemory*, IDebugHostContext, Location, UInt8, UInt8**, HRESULT)
  end

  IDebugHostMemory_GUID = "212149c9-9183-4a3e-b00e-4fd1dc95339b"
  IID_IDebugHostMemory = LibC::GUID.new(0x212149c9_u32, 0x9183_u16, 0x4a3e_u16, StaticArray[0xb0_u8, 0xe_u8, 0x4f_u8, 0xd1_u8, 0xdc_u8, 0x95_u8, 0x33_u8, 0x9b_u8])
  struct IDebugHostMemory
    lpVtbl : IDebugHostMemoryVTbl*
  end

  struct IDebugHostEvaluatorVTbl
    query_interface : Proc(IDebugHostEvaluator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostEvaluator*, UInt32)
    release : Proc(IDebugHostEvaluator*, UInt32)
    evaluate_expression : Proc(IDebugHostEvaluator*, IDebugHostContext, LibC::LPWSTR, IModelObject, IModelObject*, IKeyStore*, HRESULT)
    evaluate_extended_expression : Proc(IDebugHostEvaluator*, IDebugHostContext, LibC::LPWSTR, IModelObject, IModelObject*, IKeyStore*, HRESULT)
  end

  IDebugHostEvaluator_GUID = "0fef9a21-577e-4997-ac7b-1c4883241d99"
  IID_IDebugHostEvaluator = LibC::GUID.new(0xfef9a21_u32, 0x577e_u16, 0x4997_u16, StaticArray[0xac_u8, 0x7b_u8, 0x1c_u8, 0x48_u8, 0x83_u8, 0x24_u8, 0x1d_u8, 0x99_u8])
  struct IDebugHostEvaluator
    lpVtbl : IDebugHostEvaluatorVTbl*
  end

  struct IDebugHostModuleSignatureVTbl
    query_interface : Proc(IDebugHostModuleSignature*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostModuleSignature*, UInt32)
    release : Proc(IDebugHostModuleSignature*, UInt32)
    is_match : Proc(IDebugHostModuleSignature*, IDebugHostModule, Bool*, HRESULT)
  end

  IDebugHostModuleSignature_GUID = "31e53a5a-01ee-4bbb-b899-4b46ae7d595c"
  IID_IDebugHostModuleSignature = LibC::GUID.new(0x31e53a5a_u32, 0x1ee_u16, 0x4bbb_u16, StaticArray[0xb8_u8, 0x99_u8, 0x4b_u8, 0x46_u8, 0xae_u8, 0x7d_u8, 0x59_u8, 0x5c_u8])
  struct IDebugHostModuleSignature
    lpVtbl : IDebugHostModuleSignatureVTbl*
  end

  struct IDebugHostTypeSignatureVTbl
    query_interface : Proc(IDebugHostTypeSignature*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostTypeSignature*, UInt32)
    release : Proc(IDebugHostTypeSignature*, UInt32)
    get_hash_code : Proc(IDebugHostTypeSignature*, UInt32*, HRESULT)
    is_match : Proc(IDebugHostTypeSignature*, IDebugHostType, Bool*, IDebugHostSymbolEnumerator*, HRESULT)
    compare_against : Proc(IDebugHostTypeSignature*, IDebugHostTypeSignature, SignatureComparison*, HRESULT)
  end

  IDebugHostTypeSignature_GUID = "3aadc353-2b14-4abb-9893-5e03458e07ee"
  IID_IDebugHostTypeSignature = LibC::GUID.new(0x3aadc353_u32, 0x2b14_u16, 0x4abb_u16, StaticArray[0x98_u8, 0x93_u8, 0x5e_u8, 0x3_u8, 0x45_u8, 0x8e_u8, 0x7_u8, 0xee_u8])
  struct IDebugHostTypeSignature
    lpVtbl : IDebugHostTypeSignatureVTbl*
  end

  struct IDebugHostSymbol2VTbl
    query_interface : Proc(IDebugHostSymbol2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostSymbol2*, UInt32)
    release : Proc(IDebugHostSymbol2*, UInt32)
    get_context : Proc(IDebugHostSymbol2*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostSymbol2*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostSymbol2*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostSymbol2*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostSymbol2*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostSymbol2*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostSymbol2*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_language : Proc(IDebugHostSymbol2*, LanguageKind*, HRESULT)
  end

  IDebugHostSymbol2_GUID = "21515b67-6720-4257-8a68-077dc944471c"
  IID_IDebugHostSymbol2 = LibC::GUID.new(0x21515b67_u32, 0x6720_u16, 0x4257_u16, StaticArray[0x8a_u8, 0x68_u8, 0x7_u8, 0x7d_u8, 0xc9_u8, 0x44_u8, 0x47_u8, 0x1c_u8])
  struct IDebugHostSymbol2
    lpVtbl : IDebugHostSymbol2VTbl*
  end

  struct IDebugHostType2VTbl
    query_interface : Proc(IDebugHostType2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostType2*, UInt32)
    release : Proc(IDebugHostType2*, UInt32)
    get_context : Proc(IDebugHostType2*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostType2*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostType2*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostType2*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostType2*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostType2*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostType2*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_type_kind : Proc(IDebugHostType2*, TypeKind*, HRESULT)
    get_size : Proc(IDebugHostType2*, UInt64*, HRESULT)
    get_base_type : Proc(IDebugHostType2*, IDebugHostType*, HRESULT)
    get_hash_code : Proc(IDebugHostType2*, UInt32*, HRESULT)
    get_intrinsic_type : Proc(IDebugHostType2*, IntrinsicKind*, UInt16*, HRESULT)
    get_bit_field : Proc(IDebugHostType2*, UInt32*, UInt32*, HRESULT)
    get_pointer_kind : Proc(IDebugHostType2*, PointerKind*, HRESULT)
    get_member_type : Proc(IDebugHostType2*, IDebugHostType*, HRESULT)
    create_pointer_to : Proc(IDebugHostType2*, PointerKind, IDebugHostType*, HRESULT)
    get_array_dimensionality : Proc(IDebugHostType2*, UInt64*, HRESULT)
    get_array_dimensions : Proc(IDebugHostType2*, UInt64, ArrayDimension*, HRESULT)
    create_array_of : Proc(IDebugHostType2*, UInt64, ArrayDimension*, IDebugHostType*, HRESULT)
    get_function_calling_convention : Proc(IDebugHostType2*, CallingConventionKind*, HRESULT)
    get_function_return_type : Proc(IDebugHostType2*, IDebugHostType*, HRESULT)
    get_function_parameter_type_count : Proc(IDebugHostType2*, UInt64*, HRESULT)
    get_function_parameter_type_at : Proc(IDebugHostType2*, UInt64, IDebugHostType*, HRESULT)
    is_generic : Proc(IDebugHostType2*, Bool*, HRESULT)
    get_generic_argument_count : Proc(IDebugHostType2*, UInt64*, HRESULT)
    get_generic_argument_at : Proc(IDebugHostType2*, UInt64, IDebugHostSymbol*, HRESULT)
    is_typedef : Proc(IDebugHostType2*, Bool*, HRESULT)
    get_typedef_base_type : Proc(IDebugHostType2*, IDebugHostType2*, HRESULT)
    get_typedef_final_base_type : Proc(IDebugHostType2*, IDebugHostType2*, HRESULT)
    get_function_var_args_kind : Proc(IDebugHostType2*, VarArgsKind*, HRESULT)
    get_function_instance_pointer_type : Proc(IDebugHostType2*, IDebugHostType2*, HRESULT)
  end

  IDebugHostType2_GUID = "b28632b9-8506-4676-87ce-8f7e05e59876"
  IID_IDebugHostType2 = LibC::GUID.new(0xb28632b9_u32, 0x8506_u16, 0x4676_u16, StaticArray[0x87_u8, 0xce_u8, 0x8f_u8, 0x7e_u8, 0x5_u8, 0xe5_u8, 0x98_u8, 0x76_u8])
  struct IDebugHostType2
    lpVtbl : IDebugHostType2VTbl*
  end

  struct IDebugHostStatusVTbl
    query_interface : Proc(IDebugHostStatus*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostStatus*, UInt32)
    release : Proc(IDebugHostStatus*, UInt32)
    poll_user_interrupt : Proc(IDebugHostStatus*, Bool*, HRESULT)
  end

  IDebugHostStatus_GUID = "4f3e1ce2-86b2-4c7a-9c65-d0a9d0eecf44"
  IID_IDebugHostStatus = LibC::GUID.new(0x4f3e1ce2_u32, 0x86b2_u16, 0x4c7a_u16, StaticArray[0x9c_u8, 0x65_u8, 0xd0_u8, 0xa9_u8, 0xd0_u8, 0xee_u8, 0xcf_u8, 0x44_u8])
  struct IDebugHostStatus
    lpVtbl : IDebugHostStatusVTbl*
  end

  struct IDataModelScriptClientVTbl
    query_interface : Proc(IDataModelScriptClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptClient*, UInt32)
    release : Proc(IDataModelScriptClient*, UInt32)
    report_error : Proc(IDataModelScriptClient*, ErrorClass, HRESULT, LibC::LPWSTR, UInt32, UInt32, HRESULT)
  end

  IDataModelScriptClient_GUID = "3b362b0e-89f0-46c6-a663-dfdc95194aef"
  IID_IDataModelScriptClient = LibC::GUID.new(0x3b362b0e_u32, 0x89f0_u16, 0x46c6_u16, StaticArray[0xa6_u8, 0x63_u8, 0xdf_u8, 0xdc_u8, 0x95_u8, 0x19_u8, 0x4a_u8, 0xef_u8])
  struct IDataModelScriptClient
    lpVtbl : IDataModelScriptClientVTbl*
  end

  struct IDataModelScriptTemplateVTbl
    query_interface : Proc(IDataModelScriptTemplate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptTemplate*, UInt32)
    release : Proc(IDataModelScriptTemplate*, UInt32)
    get_name : Proc(IDataModelScriptTemplate*, UInt8**, HRESULT)
    get_description : Proc(IDataModelScriptTemplate*, UInt8**, HRESULT)
    get_content : Proc(IDataModelScriptTemplate*, IStream*, HRESULT)
  end

  IDataModelScriptTemplate_GUID = "1303dec4-fa3b-4f1b-9224-b953d16babb5"
  IID_IDataModelScriptTemplate = LibC::GUID.new(0x1303dec4_u32, 0xfa3b_u16, 0x4f1b_u16, StaticArray[0x92_u8, 0x24_u8, 0xb9_u8, 0x53_u8, 0xd1_u8, 0x6b_u8, 0xab_u8, 0xb5_u8])
  struct IDataModelScriptTemplate
    lpVtbl : IDataModelScriptTemplateVTbl*
  end

  struct IDataModelScriptVTbl
    query_interface : Proc(IDataModelScript*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScript*, UInt32)
    release : Proc(IDataModelScript*, UInt32)
    get_name : Proc(IDataModelScript*, UInt8**, HRESULT)
    rename : Proc(IDataModelScript*, LibC::LPWSTR, HRESULT)
    populate : Proc(IDataModelScript*, IStream, HRESULT)
    execute : Proc(IDataModelScript*, IDataModelScriptClient, HRESULT)
    unlink : Proc(IDataModelScript*, HRESULT)
    is_invocable : Proc(IDataModelScript*, Bool*, HRESULT)
    invoke_main : Proc(IDataModelScript*, IDataModelScriptClient, HRESULT)
  end

  IDataModelScript_GUID = "7b4d30fc-b14a-49f8-8d87-d9a1480c97f7"
  IID_IDataModelScript = LibC::GUID.new(0x7b4d30fc_u32, 0xb14a_u16, 0x49f8_u16, StaticArray[0x8d_u8, 0x87_u8, 0xd9_u8, 0xa1_u8, 0x48_u8, 0xc_u8, 0x97_u8, 0xf7_u8])
  struct IDataModelScript
    lpVtbl : IDataModelScriptVTbl*
  end

  struct IDataModelScriptTemplateEnumeratorVTbl
    query_interface : Proc(IDataModelScriptTemplateEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptTemplateEnumerator*, UInt32)
    release : Proc(IDataModelScriptTemplateEnumerator*, UInt32)
    reset : Proc(IDataModelScriptTemplateEnumerator*, HRESULT)
    get_next : Proc(IDataModelScriptTemplateEnumerator*, IDataModelScriptTemplate*, HRESULT)
  end

  IDataModelScriptTemplateEnumerator_GUID = "69ce6ae2-2268-4e6f-b062-20ce62bfe677"
  IID_IDataModelScriptTemplateEnumerator = LibC::GUID.new(0x69ce6ae2_u32, 0x2268_u16, 0x4e6f_u16, StaticArray[0xb0_u8, 0x62_u8, 0x20_u8, 0xce_u8, 0x62_u8, 0xbf_u8, 0xe6_u8, 0x77_u8])
  struct IDataModelScriptTemplateEnumerator
    lpVtbl : IDataModelScriptTemplateEnumeratorVTbl*
  end

  struct IDataModelScriptProviderVTbl
    query_interface : Proc(IDataModelScriptProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptProvider*, UInt32)
    release : Proc(IDataModelScriptProvider*, UInt32)
    get_name : Proc(IDataModelScriptProvider*, UInt8**, HRESULT)
    get_extension : Proc(IDataModelScriptProvider*, UInt8**, HRESULT)
    create_script : Proc(IDataModelScriptProvider*, IDataModelScript*, HRESULT)
    get_default_template_content : Proc(IDataModelScriptProvider*, IDataModelScriptTemplate*, HRESULT)
    enumerate_templates : Proc(IDataModelScriptProvider*, IDataModelScriptTemplateEnumerator*, HRESULT)
  end

  IDataModelScriptProvider_GUID = "513461e0-4fca-48ce-8658-32f3e2056f3b"
  IID_IDataModelScriptProvider = LibC::GUID.new(0x513461e0_u32, 0x4fca_u16, 0x48ce_u16, StaticArray[0x86_u8, 0x58_u8, 0x32_u8, 0xf3_u8, 0xe2_u8, 0x5_u8, 0x6f_u8, 0x3b_u8])
  struct IDataModelScriptProvider
    lpVtbl : IDataModelScriptProviderVTbl*
  end

  struct IDataModelScriptProviderEnumeratorVTbl
    query_interface : Proc(IDataModelScriptProviderEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptProviderEnumerator*, UInt32)
    release : Proc(IDataModelScriptProviderEnumerator*, UInt32)
    reset : Proc(IDataModelScriptProviderEnumerator*, HRESULT)
    get_next : Proc(IDataModelScriptProviderEnumerator*, IDataModelScriptProvider*, HRESULT)
  end

  IDataModelScriptProviderEnumerator_GUID = "95ba00e2-704a-4fe2-a8f1-a7e7d8fb0941"
  IID_IDataModelScriptProviderEnumerator = LibC::GUID.new(0x95ba00e2_u32, 0x704a_u16, 0x4fe2_u16, StaticArray[0xa8_u8, 0xf1_u8, 0xa7_u8, 0xe7_u8, 0xd8_u8, 0xfb_u8, 0x9_u8, 0x41_u8])
  struct IDataModelScriptProviderEnumerator
    lpVtbl : IDataModelScriptProviderEnumeratorVTbl*
  end

  struct IDataModelScriptManagerVTbl
    query_interface : Proc(IDataModelScriptManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptManager*, UInt32)
    release : Proc(IDataModelScriptManager*, UInt32)
    get_default_name_binder : Proc(IDataModelScriptManager*, IDataModelNameBinder*, HRESULT)
    register_script_provider : Proc(IDataModelScriptManager*, IDataModelScriptProvider, HRESULT)
    unregister_script_provider : Proc(IDataModelScriptManager*, IDataModelScriptProvider, HRESULT)
    find_provider_for_script_type : Proc(IDataModelScriptManager*, LibC::LPWSTR, IDataModelScriptProvider*, HRESULT)
    find_provider_for_script_extension : Proc(IDataModelScriptManager*, LibC::LPWSTR, IDataModelScriptProvider*, HRESULT)
    enumerate_script_providers : Proc(IDataModelScriptManager*, IDataModelScriptProviderEnumerator*, HRESULT)
  end

  IDataModelScriptManager_GUID = "6fd11e33-e5ad-410b-8011-68c6bc4bf80d"
  IID_IDataModelScriptManager = LibC::GUID.new(0x6fd11e33_u32, 0xe5ad_u16, 0x410b_u16, StaticArray[0x80_u8, 0x11_u8, 0x68_u8, 0xc6_u8, 0xbc_u8, 0x4b_u8, 0xf8_u8, 0xd_u8])
  struct IDataModelScriptManager
    lpVtbl : IDataModelScriptManagerVTbl*
  end

  struct IDynamicKeyProviderConceptVTbl
    query_interface : Proc(IDynamicKeyProviderConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDynamicKeyProviderConcept*, UInt32)
    release : Proc(IDynamicKeyProviderConcept*, UInt32)
    get_key : Proc(IDynamicKeyProviderConcept*, IModelObject, LibC::LPWSTR, IModelObject*, IKeyStore*, Bool*, HRESULT)
    set_key : Proc(IDynamicKeyProviderConcept*, IModelObject, LibC::LPWSTR, IModelObject, IKeyStore, HRESULT)
    enumerate_keys : Proc(IDynamicKeyProviderConcept*, IModelObject, IKeyEnumerator*, HRESULT)
  end

  IDynamicKeyProviderConcept_GUID = "e7983fa1-80a7-498c-988f-518ddc5d4025"
  IID_IDynamicKeyProviderConcept = LibC::GUID.new(0xe7983fa1_u32, 0x80a7_u16, 0x498c_u16, StaticArray[0x98_u8, 0x8f_u8, 0x51_u8, 0x8d_u8, 0xdc_u8, 0x5d_u8, 0x40_u8, 0x25_u8])
  struct IDynamicKeyProviderConcept
    lpVtbl : IDynamicKeyProviderConceptVTbl*
  end

  struct IDynamicConceptProviderConceptVTbl
    query_interface : Proc(IDynamicConceptProviderConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDynamicConceptProviderConcept*, UInt32)
    release : Proc(IDynamicConceptProviderConcept*, UInt32)
    get_concept : Proc(IDynamicConceptProviderConcept*, IModelObject, Guid*, IUnknown*, IKeyStore*, Bool*, HRESULT)
    set_concept : Proc(IDynamicConceptProviderConcept*, IModelObject, Guid*, IUnknown, IKeyStore, HRESULT)
    notify_parent : Proc(IDynamicConceptProviderConcept*, IModelObject, HRESULT)
    notify_parent_change : Proc(IDynamicConceptProviderConcept*, IModelObject, HRESULT)
    notify_destruct : Proc(IDynamicConceptProviderConcept*, HRESULT)
  end

  IDynamicConceptProviderConcept_GUID = "95a7f7dd-602e-483f-9d06-a15c0ee13174"
  IID_IDynamicConceptProviderConcept = LibC::GUID.new(0x95a7f7dd_u32, 0x602e_u16, 0x483f_u16, StaticArray[0x9d_u8, 0x6_u8, 0xa1_u8, 0x5c_u8, 0xe_u8, 0xe1_u8, 0x31_u8, 0x74_u8])
  struct IDynamicConceptProviderConcept
    lpVtbl : IDynamicConceptProviderConceptVTbl*
  end

  struct IDataModelScriptHostContextVTbl
    query_interface : Proc(IDataModelScriptHostContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptHostContext*, UInt32)
    release : Proc(IDataModelScriptHostContext*, UInt32)
    notify_script_change : Proc(IDataModelScriptHostContext*, IDataModelScript, ScriptChangeKind, HRESULT)
    get_namespace_object : Proc(IDataModelScriptHostContext*, IModelObject*, HRESULT)
  end

  IDataModelScriptHostContext_GUID = "014d366a-1f23-4981-9219-b2db8b402054"
  IID_IDataModelScriptHostContext = LibC::GUID.new(0x14d366a_u32, 0x1f23_u16, 0x4981_u16, StaticArray[0x92_u8, 0x19_u8, 0xb2_u8, 0xdb_u8, 0x8b_u8, 0x40_u8, 0x20_u8, 0x54_u8])
  struct IDataModelScriptHostContext
    lpVtbl : IDataModelScriptHostContextVTbl*
  end

  struct IDebugHostScriptHostVTbl
    query_interface : Proc(IDebugHostScriptHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostScriptHost*, UInt32)
    release : Proc(IDebugHostScriptHost*, UInt32)
    create_context : Proc(IDebugHostScriptHost*, IDataModelScript, IDataModelScriptHostContext*, HRESULT)
  end

  IDebugHostScriptHost_GUID = "b70334a4-b92c-4570-93a1-d3eb686649a0"
  IID_IDebugHostScriptHost = LibC::GUID.new(0xb70334a4_u32, 0xb92c_u16, 0x4570_u16, StaticArray[0x93_u8, 0xa1_u8, 0xd3_u8, 0xeb_u8, 0x68_u8, 0x66_u8, 0x49_u8, 0xa0_u8])
  struct IDebugHostScriptHost
    lpVtbl : IDebugHostScriptHostVTbl*
  end

  struct IDataModelNameBinderVTbl
    query_interface : Proc(IDataModelNameBinder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelNameBinder*, UInt32)
    release : Proc(IDataModelNameBinder*, UInt32)
    bind_value : Proc(IDataModelNameBinder*, IModelObject, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    bind_reference : Proc(IDataModelNameBinder*, IModelObject, LibC::LPWSTR, IModelObject*, IKeyStore*, HRESULT)
    enumerate_values : Proc(IDataModelNameBinder*, IModelObject, IKeyEnumerator*, HRESULT)
    enumerate_references : Proc(IDataModelNameBinder*, IModelObject, IKeyEnumerator*, HRESULT)
  end

  IDataModelNameBinder_GUID = "af352b7b-8292-4c01-b360-2dc3696c65e7"
  IID_IDataModelNameBinder = LibC::GUID.new(0xaf352b7b_u32, 0x8292_u16, 0x4c01_u16, StaticArray[0xb3_u8, 0x60_u8, 0x2d_u8, 0xc3_u8, 0x69_u8, 0x6c_u8, 0x65_u8, 0xe7_u8])
  struct IDataModelNameBinder
    lpVtbl : IDataModelNameBinderVTbl*
  end

  struct IModelKeyReference2VTbl
    query_interface : Proc(IModelKeyReference2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IModelKeyReference2*, UInt32)
    release : Proc(IModelKeyReference2*, UInt32)
    get_key_name : Proc(IModelKeyReference2*, UInt8**, HRESULT)
    get_original_object : Proc(IModelKeyReference2*, IModelObject*, HRESULT)
    get_context_object : Proc(IModelKeyReference2*, IModelObject*, HRESULT)
    get_key : Proc(IModelKeyReference2*, IModelObject*, IKeyStore*, HRESULT)
    get_key_value : Proc(IModelKeyReference2*, IModelObject*, IKeyStore*, HRESULT)
    set_key : Proc(IModelKeyReference2*, IModelObject, IKeyStore, HRESULT)
    set_key_value : Proc(IModelKeyReference2*, IModelObject, HRESULT)
    override_context_object : Proc(IModelKeyReference2*, IModelObject, HRESULT)
  end

  IModelKeyReference2_GUID = "80e2f7c5-7159-4e92-887e-7e0347e88406"
  IID_IModelKeyReference2 = LibC::GUID.new(0x80e2f7c5_u32, 0x7159_u16, 0x4e92_u16, StaticArray[0x88_u8, 0x7e_u8, 0x7e_u8, 0x3_u8, 0x47_u8, 0xe8_u8, 0x84_u8, 0x6_u8])
  struct IModelKeyReference2
    lpVtbl : IModelKeyReference2VTbl*
  end

  struct IDebugHostEvaluator2VTbl
    query_interface : Proc(IDebugHostEvaluator2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostEvaluator2*, UInt32)
    release : Proc(IDebugHostEvaluator2*, UInt32)
    evaluate_expression : Proc(IDebugHostEvaluator2*, IDebugHostContext, LibC::LPWSTR, IModelObject, IModelObject*, IKeyStore*, HRESULT)
    evaluate_extended_expression : Proc(IDebugHostEvaluator2*, IDebugHostContext, LibC::LPWSTR, IModelObject, IModelObject*, IKeyStore*, HRESULT)
    assign_to : Proc(IDebugHostEvaluator2*, IModelObject, IModelObject, IModelObject*, IKeyStore*, HRESULT)
  end

  IDebugHostEvaluator2_GUID = "a117a435-1fb4-4092-a2ab-a929576c1e87"
  IID_IDebugHostEvaluator2 = LibC::GUID.new(0xa117a435_u32, 0x1fb4_u16, 0x4092_u16, StaticArray[0xa2_u8, 0xab_u8, 0xa9_u8, 0x29_u8, 0x57_u8, 0x6c_u8, 0x1e_u8, 0x87_u8])
  struct IDebugHostEvaluator2
    lpVtbl : IDebugHostEvaluator2VTbl*
  end

  struct IDataModelManager2VTbl
    query_interface : Proc(IDataModelManager2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelManager2*, UInt32)
    release : Proc(IDataModelManager2*, UInt32)
    close : Proc(IDataModelManager2*, HRESULT)
    create_no_value : Proc(IDataModelManager2*, IModelObject*, HRESULT)
    create_error_object : Proc(IDataModelManager2*, HRESULT, LibC::LPWSTR, IModelObject*, HRESULT)
    create_typed_object : Proc(IDataModelManager2*, IDebugHostContext, Location, IDebugHostType, IModelObject*, HRESULT)
    create_typed_object_reference : Proc(IDataModelManager2*, IDebugHostContext, Location, IDebugHostType, IModelObject*, HRESULT)
    create_synthetic_object : Proc(IDataModelManager2*, IDebugHostContext, IModelObject*, HRESULT)
    create_data_model_object : Proc(IDataModelManager2*, IDataModelConcept, IModelObject*, HRESULT)
    create_intrinsic_object : Proc(IDataModelManager2*, ModelObjectKind, VARIANT*, IModelObject*, HRESULT)
    create_typed_intrinsic_object : Proc(IDataModelManager2*, VARIANT*, IDebugHostType, IModelObject*, HRESULT)
    get_model_for_type_signature : Proc(IDataModelManager2*, IDebugHostTypeSignature, IModelObject*, HRESULT)
    get_model_for_type : Proc(IDataModelManager2*, IDebugHostType, IModelObject*, IDebugHostTypeSignature*, IDebugHostSymbolEnumerator*, HRESULT)
    register_model_for_type_signature : Proc(IDataModelManager2*, IDebugHostTypeSignature, IModelObject, HRESULT)
    unregister_model_for_type_signature : Proc(IDataModelManager2*, IModelObject, IDebugHostTypeSignature, HRESULT)
    register_extension_for_type_signature : Proc(IDataModelManager2*, IDebugHostTypeSignature, IModelObject, HRESULT)
    unregister_extension_for_type_signature : Proc(IDataModelManager2*, IModelObject, IDebugHostTypeSignature, HRESULT)
    create_metadata_store : Proc(IDataModelManager2*, IKeyStore, IKeyStore*, HRESULT)
    get_root_namespace : Proc(IDataModelManager2*, IModelObject*, HRESULT)
    register_named_model : Proc(IDataModelManager2*, LibC::LPWSTR, IModelObject, HRESULT)
    unregister_named_model : Proc(IDataModelManager2*, LibC::LPWSTR, HRESULT)
    acquire_named_model : Proc(IDataModelManager2*, LibC::LPWSTR, IModelObject*, HRESULT)
    acquire_sub_namespace : Proc(IDataModelManager2*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IKeyStore, IModelObject*, HRESULT)
    create_typed_intrinsic_object_ex : Proc(IDataModelManager2*, IDebugHostContext, VARIANT*, IDebugHostType, IModelObject*, HRESULT)
  end

  IDataModelManager2_GUID = "f412c5ea-2284-4622-a660-a697160d3312"
  IID_IDataModelManager2 = LibC::GUID.new(0xf412c5ea_u32, 0x2284_u16, 0x4622_u16, StaticArray[0xa6_u8, 0x60_u8, 0xa6_u8, 0x97_u8, 0x16_u8, 0xd_u8, 0x33_u8, 0x12_u8])
  struct IDataModelManager2
    lpVtbl : IDataModelManager2VTbl*
  end

  struct IDebugHostMemory2VTbl
    query_interface : Proc(IDebugHostMemory2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostMemory2*, UInt32)
    release : Proc(IDebugHostMemory2*, UInt32)
    read_bytes : Proc(IDebugHostMemory2*, IDebugHostContext, Location, Void*, UInt64, UInt64*, HRESULT)
    write_bytes : Proc(IDebugHostMemory2*, IDebugHostContext, Location, Void*, UInt64, UInt64*, HRESULT)
    read_pointers : Proc(IDebugHostMemory2*, IDebugHostContext, Location, UInt64, UInt64*, HRESULT)
    write_pointers : Proc(IDebugHostMemory2*, IDebugHostContext, Location, UInt64, UInt64*, HRESULT)
    get_display_string_for_location : Proc(IDebugHostMemory2*, IDebugHostContext, Location, UInt8, UInt8**, HRESULT)
    linearize_location : Proc(IDebugHostMemory2*, IDebugHostContext, Location, Location*, HRESULT)
  end

  IDebugHostMemory2_GUID = "eea033de-38f6-416b-a251-1d3771001270"
  IID_IDebugHostMemory2 = LibC::GUID.new(0xeea033de_u32, 0x38f6_u16, 0x416b_u16, StaticArray[0xa2_u8, 0x51_u8, 0x1d_u8, 0x37_u8, 0x71_u8, 0x0_u8, 0x12_u8, 0x70_u8])
  struct IDebugHostMemory2
    lpVtbl : IDebugHostMemory2VTbl*
  end

  struct IDebugHostExtensibilityVTbl
    query_interface : Proc(IDebugHostExtensibility*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostExtensibility*, UInt32)
    release : Proc(IDebugHostExtensibility*, UInt32)
    create_function_alias : Proc(IDebugHostExtensibility*, LibC::LPWSTR, IModelObject, HRESULT)
    destroy_function_alias : Proc(IDebugHostExtensibility*, LibC::LPWSTR, HRESULT)
  end

  IDebugHostExtensibility_GUID = "3c2b24e1-11d0-4f86-8ae5-4df166f73253"
  IID_IDebugHostExtensibility = LibC::GUID.new(0x3c2b24e1_u32, 0x11d0_u16, 0x4f86_u16, StaticArray[0x8a_u8, 0xe5_u8, 0x4d_u8, 0xf1_u8, 0x66_u8, 0xf7_u8, 0x32_u8, 0x53_u8])
  struct IDebugHostExtensibility
    lpVtbl : IDebugHostExtensibilityVTbl*
  end

  struct IDataModelScriptDebugClientVTbl
    query_interface : Proc(IDataModelScriptDebugClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugClient*, UInt32)
    release : Proc(IDataModelScriptDebugClient*, UInt32)
    notify_debug_event : Proc(IDataModelScriptDebugClient*, ScriptDebugEventInformation*, IDataModelScript, IModelObject, ScriptExecutionKind*, HRESULT)
  end

  IDataModelScriptDebugClient_GUID = "53159b6d-d4c4-471b-a863-5b110ca800ca"
  IID_IDataModelScriptDebugClient = LibC::GUID.new(0x53159b6d_u32, 0xd4c4_u16, 0x471b_u16, StaticArray[0xa8_u8, 0x63_u8, 0x5b_u8, 0x11_u8, 0xc_u8, 0xa8_u8, 0x0_u8, 0xca_u8])
  struct IDataModelScriptDebugClient
    lpVtbl : IDataModelScriptDebugClientVTbl*
  end

  struct IDataModelScriptDebugVariableSetEnumeratorVTbl
    query_interface : Proc(IDataModelScriptDebugVariableSetEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugVariableSetEnumerator*, UInt32)
    release : Proc(IDataModelScriptDebugVariableSetEnumerator*, UInt32)
    reset : Proc(IDataModelScriptDebugVariableSetEnumerator*, HRESULT)
    get_next : Proc(IDataModelScriptDebugVariableSetEnumerator*, UInt8**, IModelObject*, IKeyStore*, HRESULT)
  end

  IDataModelScriptDebugVariableSetEnumerator_GUID = "0f9feed7-d045-4ac3-98a8-a98942cf6a35"
  IID_IDataModelScriptDebugVariableSetEnumerator = LibC::GUID.new(0xf9feed7_u32, 0xd045_u16, 0x4ac3_u16, StaticArray[0x98_u8, 0xa8_u8, 0xa9_u8, 0x89_u8, 0x42_u8, 0xcf_u8, 0x6a_u8, 0x35_u8])
  struct IDataModelScriptDebugVariableSetEnumerator
    lpVtbl : IDataModelScriptDebugVariableSetEnumeratorVTbl*
  end

  struct IDataModelScriptDebugStackFrameVTbl
    query_interface : Proc(IDataModelScriptDebugStackFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugStackFrame*, UInt32)
    release : Proc(IDataModelScriptDebugStackFrame*, UInt32)
    get_name : Proc(IDataModelScriptDebugStackFrame*, UInt8**, HRESULT)
    get_position : Proc(IDataModelScriptDebugStackFrame*, ScriptDebugPosition*, ScriptDebugPosition*, UInt8**, HRESULT)
    is_transition_point : Proc(IDataModelScriptDebugStackFrame*, Bool*, HRESULT)
    get_transition : Proc(IDataModelScriptDebugStackFrame*, IDataModelScript*, Bool*, HRESULT)
    evaluate : Proc(IDataModelScriptDebugStackFrame*, LibC::LPWSTR, IModelObject*, HRESULT)
    enumerate_locals : Proc(IDataModelScriptDebugStackFrame*, IDataModelScriptDebugVariableSetEnumerator*, HRESULT)
    enumerate_arguments : Proc(IDataModelScriptDebugStackFrame*, IDataModelScriptDebugVariableSetEnumerator*, HRESULT)
  end

  IDataModelScriptDebugStackFrame_GUID = "dec6ed5e-6360-4941-ab4c-a26409de4f82"
  IID_IDataModelScriptDebugStackFrame = LibC::GUID.new(0xdec6ed5e_u32, 0x6360_u16, 0x4941_u16, StaticArray[0xab_u8, 0x4c_u8, 0xa2_u8, 0x64_u8, 0x9_u8, 0xde_u8, 0x4f_u8, 0x82_u8])
  struct IDataModelScriptDebugStackFrame
    lpVtbl : IDataModelScriptDebugStackFrameVTbl*
  end

  struct IDataModelScriptDebugStackVTbl
    query_interface : Proc(IDataModelScriptDebugStack*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugStack*, UInt32)
    release : Proc(IDataModelScriptDebugStack*, UInt32)
    get_frame_count : Proc(IDataModelScriptDebugStack*, UInt64)
    get_stack_frame : Proc(IDataModelScriptDebugStack*, UInt64, IDataModelScriptDebugStackFrame*, HRESULT)
  end

  IDataModelScriptDebugStack_GUID = "051364dd-e449-443e-9762-fe578f4a5473"
  IID_IDataModelScriptDebugStack = LibC::GUID.new(0x51364dd_u32, 0xe449_u16, 0x443e_u16, StaticArray[0x97_u8, 0x62_u8, 0xfe_u8, 0x57_u8, 0x8f_u8, 0x4a_u8, 0x54_u8, 0x73_u8])
  struct IDataModelScriptDebugStack
    lpVtbl : IDataModelScriptDebugStackVTbl*
  end

  struct IDataModelScriptDebugBreakpointVTbl
    query_interface : Proc(IDataModelScriptDebugBreakpoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugBreakpoint*, UInt32)
    release : Proc(IDataModelScriptDebugBreakpoint*, UInt32)
    get_id : Proc(IDataModelScriptDebugBreakpoint*, UInt64)
    is_enabled : Proc(IDataModelScriptDebugBreakpoint*, Bool)
    enable : Proc(IDataModelScriptDebugBreakpoint*, Void)
    disable : Proc(IDataModelScriptDebugBreakpoint*, Void)
    remove : Proc(IDataModelScriptDebugBreakpoint*, Void)
    get_position : Proc(IDataModelScriptDebugBreakpoint*, ScriptDebugPosition*, ScriptDebugPosition*, UInt8**, HRESULT)
  end

  IDataModelScriptDebugBreakpoint_GUID = "6bb27b35-02e6-47cb-90a0-5371244032de"
  IID_IDataModelScriptDebugBreakpoint = LibC::GUID.new(0x6bb27b35_u32, 0x2e6_u16, 0x47cb_u16, StaticArray[0x90_u8, 0xa0_u8, 0x53_u8, 0x71_u8, 0x24_u8, 0x40_u8, 0x32_u8, 0xde_u8])
  struct IDataModelScriptDebugBreakpoint
    lpVtbl : IDataModelScriptDebugBreakpointVTbl*
  end

  struct IDataModelScriptDebugBreakpointEnumeratorVTbl
    query_interface : Proc(IDataModelScriptDebugBreakpointEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebugBreakpointEnumerator*, UInt32)
    release : Proc(IDataModelScriptDebugBreakpointEnumerator*, UInt32)
    reset : Proc(IDataModelScriptDebugBreakpointEnumerator*, HRESULT)
    get_next : Proc(IDataModelScriptDebugBreakpointEnumerator*, IDataModelScriptDebugBreakpoint*, HRESULT)
  end

  IDataModelScriptDebugBreakpointEnumerator_GUID = "39484a75-b4f3-4799-86da-691afa57b299"
  IID_IDataModelScriptDebugBreakpointEnumerator = LibC::GUID.new(0x39484a75_u32, 0xb4f3_u16, 0x4799_u16, StaticArray[0x86_u8, 0xda_u8, 0x69_u8, 0x1a_u8, 0xfa_u8, 0x57_u8, 0xb2_u8, 0x99_u8])
  struct IDataModelScriptDebugBreakpointEnumerator
    lpVtbl : IDataModelScriptDebugBreakpointEnumeratorVTbl*
  end

  struct IDataModelScriptDebugVTbl
    query_interface : Proc(IDataModelScriptDebug*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebug*, UInt32)
    release : Proc(IDataModelScriptDebug*, UInt32)
    get_debug_state : Proc(IDataModelScriptDebug*, ScriptDebugState)
    get_current_position : Proc(IDataModelScriptDebug*, ScriptDebugPosition*, ScriptDebugPosition*, UInt8**, HRESULT)
    get_stack : Proc(IDataModelScriptDebug*, IDataModelScriptDebugStack*, HRESULT)
    set_breakpoint : Proc(IDataModelScriptDebug*, UInt32, UInt32, IDataModelScriptDebugBreakpoint*, HRESULT)
    find_breakpoint_by_id : Proc(IDataModelScriptDebug*, UInt64, IDataModelScriptDebugBreakpoint*, HRESULT)
    enumerate_breakpoints : Proc(IDataModelScriptDebug*, IDataModelScriptDebugBreakpointEnumerator*, HRESULT)
    get_event_filter : Proc(IDataModelScriptDebug*, ScriptDebugEventFilter, Bool*, HRESULT)
    set_event_filter : Proc(IDataModelScriptDebug*, ScriptDebugEventFilter, UInt8, HRESULT)
    start_debugging : Proc(IDataModelScriptDebug*, IDataModelScriptDebugClient, HRESULT)
    stop_debugging : Proc(IDataModelScriptDebug*, IDataModelScriptDebugClient, HRESULT)
  end

  IDataModelScriptDebug_GUID = "de8e0945-9750-4471-ab76-a8f79d6ec350"
  IID_IDataModelScriptDebug = LibC::GUID.new(0xde8e0945_u32, 0x9750_u16, 0x4471_u16, StaticArray[0xab_u8, 0x76_u8, 0xa8_u8, 0xf7_u8, 0x9d_u8, 0x6e_u8, 0xc3_u8, 0x50_u8])
  struct IDataModelScriptDebug
    lpVtbl : IDataModelScriptDebugVTbl*
  end

  struct IDataModelScriptDebug2VTbl
    query_interface : Proc(IDataModelScriptDebug2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDataModelScriptDebug2*, UInt32)
    release : Proc(IDataModelScriptDebug2*, UInt32)
    get_debug_state : Proc(IDataModelScriptDebug2*, ScriptDebugState)
    get_current_position : Proc(IDataModelScriptDebug2*, ScriptDebugPosition*, ScriptDebugPosition*, UInt8**, HRESULT)
    get_stack : Proc(IDataModelScriptDebug2*, IDataModelScriptDebugStack*, HRESULT)
    set_breakpoint : Proc(IDataModelScriptDebug2*, UInt32, UInt32, IDataModelScriptDebugBreakpoint*, HRESULT)
    find_breakpoint_by_id : Proc(IDataModelScriptDebug2*, UInt64, IDataModelScriptDebugBreakpoint*, HRESULT)
    enumerate_breakpoints : Proc(IDataModelScriptDebug2*, IDataModelScriptDebugBreakpointEnumerator*, HRESULT)
    get_event_filter : Proc(IDataModelScriptDebug2*, ScriptDebugEventFilter, Bool*, HRESULT)
    set_event_filter : Proc(IDataModelScriptDebug2*, ScriptDebugEventFilter, UInt8, HRESULT)
    start_debugging : Proc(IDataModelScriptDebug2*, IDataModelScriptDebugClient, HRESULT)
    stop_debugging : Proc(IDataModelScriptDebug2*, IDataModelScriptDebugClient, HRESULT)
    set_breakpoint_at_function : Proc(IDataModelScriptDebug2*, LibC::LPWSTR, IDataModelScriptDebugBreakpoint*, HRESULT)
  end

  IDataModelScriptDebug2_GUID = "cbb10ed3-839e-426c-9243-e23535c1ae1a"
  IID_IDataModelScriptDebug2 = LibC::GUID.new(0xcbb10ed3_u32, 0x839e_u16, 0x426c_u16, StaticArray[0x92_u8, 0x43_u8, 0xe2_u8, 0x35_u8, 0x35_u8, 0xc1_u8, 0xae_u8, 0x1a_u8])
  struct IDataModelScriptDebug2
    lpVtbl : IDataModelScriptDebug2VTbl*
  end

  struct IDebugHostModule2VTbl
    query_interface : Proc(IDebugHostModule2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHostModule2*, UInt32)
    release : Proc(IDebugHostModule2*, UInt32)
    get_context : Proc(IDebugHostModule2*, IDebugHostContext*, HRESULT)
    enumerate_children : Proc(IDebugHostModule2*, SymbolKind, LibC::LPWSTR, IDebugHostSymbolEnumerator*, HRESULT)
    get_symbol_kind : Proc(IDebugHostModule2*, SymbolKind*, HRESULT)
    get_name : Proc(IDebugHostModule2*, UInt8**, HRESULT)
    get_type : Proc(IDebugHostModule2*, IDebugHostType*, HRESULT)
    get_containing_module : Proc(IDebugHostModule2*, IDebugHostModule*, HRESULT)
    compare_against : Proc(IDebugHostModule2*, IDebugHostSymbol, UInt32, Bool*, HRESULT)
    get_image_name : Proc(IDebugHostModule2*, UInt8, UInt8**, HRESULT)
    get_base_location : Proc(IDebugHostModule2*, Location*, HRESULT)
    get_version : Proc(IDebugHostModule2*, UInt64*, UInt64*, HRESULT)
    find_type_by_name : Proc(IDebugHostModule2*, LibC::LPWSTR, IDebugHostType*, HRESULT)
    find_symbol_by_rva : Proc(IDebugHostModule2*, UInt64, IDebugHostSymbol*, HRESULT)
    find_symbol_by_name : Proc(IDebugHostModule2*, LibC::LPWSTR, IDebugHostSymbol*, HRESULT)
    find_containing_symbol_by_rva : Proc(IDebugHostModule2*, UInt64, IDebugHostSymbol*, UInt64*, HRESULT)
  end

  IDebugHostModule2_GUID = "b51887e8-bcd0-4e8f-a8c7-434398b78c37"
  IID_IDebugHostModule2 = LibC::GUID.new(0xb51887e8_u32, 0xbcd0_u16, 0x4e8f_u16, StaticArray[0xa8_u8, 0xc7_u8, 0x43_u8, 0x43_u8, 0x98_u8, 0xb7_u8, 0x8c_u8, 0x37_u8])
  struct IDebugHostModule2
    lpVtbl : IDebugHostModule2VTbl*
  end

  struct IComparableConceptVTbl
    query_interface : Proc(IComparableConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComparableConcept*, UInt32)
    release : Proc(IComparableConcept*, UInt32)
    compare_objects : Proc(IComparableConcept*, IModelObject, IModelObject, Int32*, HRESULT)
  end

  IComparableConcept_GUID = "a7830646-9f0c-4a31-ba19-503f33e6c8a3"
  IID_IComparableConcept = LibC::GUID.new(0xa7830646_u32, 0x9f0c_u16, 0x4a31_u16, StaticArray[0xba_u8, 0x19_u8, 0x50_u8, 0x3f_u8, 0x33_u8, 0xe6_u8, 0xc8_u8, 0xa3_u8])
  struct IComparableConcept
    lpVtbl : IComparableConceptVTbl*
  end

  struct IEquatableConceptVTbl
    query_interface : Proc(IEquatableConcept*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEquatableConcept*, UInt32)
    release : Proc(IEquatableConcept*, UInt32)
    are_objects_equal : Proc(IEquatableConcept*, IModelObject, IModelObject, Bool*, HRESULT)
  end

  IEquatableConcept_GUID = "c52d5d3d-609d-4d5d-8a82-46b0acdec4f4"
  IID_IEquatableConcept = LibC::GUID.new(0xc52d5d3d_u32, 0x609d_u16, 0x4d5d_u16, StaticArray[0x8a_u8, 0x82_u8, 0x46_u8, 0xb0_u8, 0xac_u8, 0xde_u8, 0xc4_u8, 0xf4_u8])
  struct IEquatableConcept
    lpVtbl : IEquatableConceptVTbl*
  end

  struct IActiveScriptSiteVTbl
    query_interface : Proc(IActiveScriptSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSite*, UInt32)
    release : Proc(IActiveScriptSite*, UInt32)
    get_lcid : Proc(IActiveScriptSite*, UInt32*, HRESULT)
    get_item_info : Proc(IActiveScriptSite*, LibC::LPWSTR, UInt32, IUnknown*, ITypeInfo*, HRESULT)
    get_doc_version_string : Proc(IActiveScriptSite*, UInt8**, HRESULT)
    on_script_terminate : Proc(IActiveScriptSite*, VARIANT*, EXCEPINFO*, HRESULT)
    on_state_change : Proc(IActiveScriptSite*, SCRIPTSTATE, HRESULT)
    on_script_error : Proc(IActiveScriptSite*, IActiveScriptError, HRESULT)
    on_enter_script : Proc(IActiveScriptSite*, HRESULT)
    on_leave_script : Proc(IActiveScriptSite*, HRESULT)
  end

  IActiveScriptSite_GUID = "db01a1e3-a42b-11cf-8f20-00805f2cd064"
  IID_IActiveScriptSite = LibC::GUID.new(0xdb01a1e3_u32, 0xa42b_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScriptSite
    lpVtbl : IActiveScriptSiteVTbl*
  end

  struct IActiveScriptErrorVTbl
    query_interface : Proc(IActiveScriptError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptError*, UInt32)
    release : Proc(IActiveScriptError*, UInt32)
    get_exception_info : Proc(IActiveScriptError*, EXCEPINFO*, HRESULT)
    get_source_position : Proc(IActiveScriptError*, UInt32*, UInt32*, Int32*, HRESULT)
    get_source_line_text : Proc(IActiveScriptError*, UInt8**, HRESULT)
  end

  IActiveScriptError_GUID = "eae1ba61-a4ed-11cf-8f20-00805f2cd064"
  IID_IActiveScriptError = LibC::GUID.new(0xeae1ba61_u32, 0xa4ed_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScriptError
    lpVtbl : IActiveScriptErrorVTbl*
  end

  struct IActiveScriptError64VTbl
    query_interface : Proc(IActiveScriptError64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptError64*, UInt32)
    release : Proc(IActiveScriptError64*, UInt32)
    get_exception_info : Proc(IActiveScriptError64*, EXCEPINFO*, HRESULT)
    get_source_position : Proc(IActiveScriptError64*, UInt32*, UInt32*, Int32*, HRESULT)
    get_source_line_text : Proc(IActiveScriptError64*, UInt8**, HRESULT)
    get_source_position64 : Proc(IActiveScriptError64*, UInt64*, UInt32*, Int32*, HRESULT)
  end

  IActiveScriptError64_GUID = "b21fb2a1-5b8f-4963-8c21-21450f84ed7f"
  IID_IActiveScriptError64 = LibC::GUID.new(0xb21fb2a1_u32, 0x5b8f_u16, 0x4963_u16, StaticArray[0x8c_u8, 0x21_u8, 0x21_u8, 0x45_u8, 0xf_u8, 0x84_u8, 0xed_u8, 0x7f_u8])
  struct IActiveScriptError64
    lpVtbl : IActiveScriptError64VTbl*
  end

  struct IActiveScriptSiteWindowVTbl
    query_interface : Proc(IActiveScriptSiteWindow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteWindow*, UInt32)
    release : Proc(IActiveScriptSiteWindow*, UInt32)
    get_window : Proc(IActiveScriptSiteWindow*, HANDLE*, HRESULT)
    enable_modeless : Proc(IActiveScriptSiteWindow*, LibC::BOOL, HRESULT)
  end

  IActiveScriptSiteWindow_GUID = "d10f6761-83e9-11cf-8f20-00805f2cd064"
  IID_IActiveScriptSiteWindow = LibC::GUID.new(0xd10f6761_u32, 0x83e9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScriptSiteWindow
    lpVtbl : IActiveScriptSiteWindowVTbl*
  end

  struct IActiveScriptSiteUIControlVTbl
    query_interface : Proc(IActiveScriptSiteUIControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteUIControl*, UInt32)
    release : Proc(IActiveScriptSiteUIControl*, UInt32)
    get_ui_behavior : Proc(IActiveScriptSiteUIControl*, SCRIPTUICITEM, SCRIPTUICHANDLING*, HRESULT)
  end

  IActiveScriptSiteUIControl_GUID = "aedae97e-d7ee-4796-b960-7f092ae844ab"
  IID_IActiveScriptSiteUIControl = LibC::GUID.new(0xaedae97e_u32, 0xd7ee_u16, 0x4796_u16, StaticArray[0xb9_u8, 0x60_u8, 0x7f_u8, 0x9_u8, 0x2a_u8, 0xe8_u8, 0x44_u8, 0xab_u8])
  struct IActiveScriptSiteUIControl
    lpVtbl : IActiveScriptSiteUIControlVTbl*
  end

  struct IActiveScriptSiteInterruptPollVTbl
    query_interface : Proc(IActiveScriptSiteInterruptPoll*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteInterruptPoll*, UInt32)
    release : Proc(IActiveScriptSiteInterruptPoll*, UInt32)
    query_continue : Proc(IActiveScriptSiteInterruptPoll*, HRESULT)
  end

  IActiveScriptSiteInterruptPoll_GUID = "539698a0-cdca-11cf-a5eb-00aa0047a063"
  IID_IActiveScriptSiteInterruptPoll = LibC::GUID.new(0x539698a0_u32, 0xcdca_u16, 0x11cf_u16, StaticArray[0xa5_u8, 0xeb_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0xa0_u8, 0x63_u8])
  struct IActiveScriptSiteInterruptPoll
    lpVtbl : IActiveScriptSiteInterruptPollVTbl*
  end

  struct IActiveScriptVTbl
    query_interface : Proc(IActiveScript*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScript*, UInt32)
    release : Proc(IActiveScript*, UInt32)
    set_script_site : Proc(IActiveScript*, IActiveScriptSite, HRESULT)
    get_script_site : Proc(IActiveScript*, Guid*, Void**, HRESULT)
    set_script_state : Proc(IActiveScript*, SCRIPTSTATE, HRESULT)
    get_script_state : Proc(IActiveScript*, SCRIPTSTATE*, HRESULT)
    close : Proc(IActiveScript*, HRESULT)
    add_named_item : Proc(IActiveScript*, LibC::LPWSTR, UInt32, HRESULT)
    add_type_lib : Proc(IActiveScript*, Guid*, UInt32, UInt32, UInt32, HRESULT)
    get_script_dispatch : Proc(IActiveScript*, LibC::LPWSTR, IDispatch*, HRESULT)
    get_current_script_thread_id : Proc(IActiveScript*, UInt32*, HRESULT)
    get_script_thread_id : Proc(IActiveScript*, UInt32, UInt32*, HRESULT)
    get_script_thread_state : Proc(IActiveScript*, UInt32, SCRIPTTHREADSTATE*, HRESULT)
    interrupt_script_thread : Proc(IActiveScript*, UInt32, EXCEPINFO*, UInt32, HRESULT)
    clone : Proc(IActiveScript*, IActiveScript*, HRESULT)
  end

  IActiveScript_GUID = "bb1a2ae1-a4f9-11cf-8f20-00805f2cd064"
  IID_IActiveScript = LibC::GUID.new(0xbb1a2ae1_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScript
    lpVtbl : IActiveScriptVTbl*
  end

  struct IActiveScriptParse32VTbl
    query_interface : Proc(IActiveScriptParse32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParse32*, UInt32)
    release : Proc(IActiveScriptParse32*, UInt32)
    init_new : Proc(IActiveScriptParse32*, HRESULT)
    add_scriptlet : Proc(IActiveScriptParse32*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, UInt32, UInt8**, EXCEPINFO*, HRESULT)
    parse_script_text : Proc(IActiveScriptParse32*, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt32, UInt32, UInt32, VARIANT*, EXCEPINFO*, HRESULT)
  end

  IActiveScriptParse32_GUID = "bb1a2ae2-a4f9-11cf-8f20-00805f2cd064"
  IID_IActiveScriptParse32 = LibC::GUID.new(0xbb1a2ae2_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScriptParse32
    lpVtbl : IActiveScriptParse32VTbl*
  end

  struct IActiveScriptParse64VTbl
    query_interface : Proc(IActiveScriptParse64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParse64*, UInt32)
    release : Proc(IActiveScriptParse64*, UInt32)
    init_new : Proc(IActiveScriptParse64*, HRESULT)
    add_scriptlet : Proc(IActiveScriptParse64*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt64, UInt32, UInt32, UInt8**, EXCEPINFO*, HRESULT)
    parse_script_text : Proc(IActiveScriptParse64*, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt64, UInt32, UInt32, VARIANT*, EXCEPINFO*, HRESULT)
  end

  IActiveScriptParse64_GUID = "c7ef7658-e1ee-480e-97ea-d52cb4d76d17"
  IID_IActiveScriptParse64 = LibC::GUID.new(0xc7ef7658_u32, 0xe1ee_u16, 0x480e_u16, StaticArray[0x97_u8, 0xea_u8, 0xd5_u8, 0x2c_u8, 0xb4_u8, 0xd7_u8, 0x6d_u8, 0x17_u8])
  struct IActiveScriptParse64
    lpVtbl : IActiveScriptParse64VTbl*
  end

  struct IActiveScriptParseProcedureOld32VTbl
    query_interface : Proc(IActiveScriptParseProcedureOld32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedureOld32*, UInt32)
    release : Proc(IActiveScriptParseProcedureOld32*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedureOld32*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt32, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedureOld32_GUID = "1cff0050-6fdd-11d0-9328-00a0c90dcaa9"
  IID_IActiveScriptParseProcedureOld32 = LibC::GUID.new(0x1cff0050_u32, 0x6fdd_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x28_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
  struct IActiveScriptParseProcedureOld32
    lpVtbl : IActiveScriptParseProcedureOld32VTbl*
  end

  struct IActiveScriptParseProcedureOld64VTbl
    query_interface : Proc(IActiveScriptParseProcedureOld64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedureOld64*, UInt32)
    release : Proc(IActiveScriptParseProcedureOld64*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedureOld64*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt64, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedureOld64_GUID = "21f57128-08c9-4638-ba12-22d15d88dc5c"
  IID_IActiveScriptParseProcedureOld64 = LibC::GUID.new(0x21f57128_u32, 0x8c9_u16, 0x4638_u16, StaticArray[0xba_u8, 0x12_u8, 0x22_u8, 0xd1_u8, 0x5d_u8, 0x88_u8, 0xdc_u8, 0x5c_u8])
  struct IActiveScriptParseProcedureOld64
    lpVtbl : IActiveScriptParseProcedureOld64VTbl*
  end

  struct IActiveScriptParseProcedure32VTbl
    query_interface : Proc(IActiveScriptParseProcedure32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedure32*, UInt32)
    release : Proc(IActiveScriptParseProcedure32*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedure32*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt32, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedure32_GUID = "aa5b6a80-b834-11d0-932f-00a0c90dcaa9"
  IID_IActiveScriptParseProcedure32 = LibC::GUID.new(0xaa5b6a80_u32, 0xb834_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x2f_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
  struct IActiveScriptParseProcedure32
    lpVtbl : IActiveScriptParseProcedure32VTbl*
  end

  struct IActiveScriptParseProcedure64VTbl
    query_interface : Proc(IActiveScriptParseProcedure64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedure64*, UInt32)
    release : Proc(IActiveScriptParseProcedure64*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedure64*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt64, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedure64_GUID = "c64713b6-e029-4cc5-9200-438b72890b6a"
  IID_IActiveScriptParseProcedure64 = LibC::GUID.new(0xc64713b6_u32, 0xe029_u16, 0x4cc5_u16, StaticArray[0x92_u8, 0x0_u8, 0x43_u8, 0x8b_u8, 0x72_u8, 0x89_u8, 0xb_u8, 0x6a_u8])
  struct IActiveScriptParseProcedure64
    lpVtbl : IActiveScriptParseProcedure64VTbl*
  end

  struct IActiveScriptParseProcedure2_32VTbl
    query_interface : Proc(IActiveScriptParseProcedure2_32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedure2_32*, UInt32)
    release : Proc(IActiveScriptParseProcedure2_32*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedure2_32*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt32, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedure2_32_GUID = "71ee5b20-fb04-11d1-b3a8-00a0c911e8b2"
  IID_IActiveScriptParseProcedure2_32 = LibC::GUID.new(0x71ee5b20_u32, 0xfb04_u16, 0x11d1_u16, StaticArray[0xb3_u8, 0xa8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xe8_u8, 0xb2_u8])
  struct IActiveScriptParseProcedure2_32
    lpVtbl : IActiveScriptParseProcedure2_32VTbl*
  end

  struct IActiveScriptParseProcedure2_64VTbl
    query_interface : Proc(IActiveScriptParseProcedure2_64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptParseProcedure2_64*, UInt32)
    release : Proc(IActiveScriptParseProcedure2_64*, UInt32)
    parse_procedure_text : Proc(IActiveScriptParseProcedure2_64*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IUnknown, LibC::LPWSTR, UInt64, UInt32, UInt32, IDispatch*, HRESULT)
  end

  IActiveScriptParseProcedure2_64_GUID = "fe7c4271-210c-448d-9f54-76dab7047b28"
  IID_IActiveScriptParseProcedure2_64 = LibC::GUID.new(0xfe7c4271_u32, 0x210c_u16, 0x448d_u16, StaticArray[0x9f_u8, 0x54_u8, 0x76_u8, 0xda_u8, 0xb7_u8, 0x4_u8, 0x7b_u8, 0x28_u8])
  struct IActiveScriptParseProcedure2_64
    lpVtbl : IActiveScriptParseProcedure2_64VTbl*
  end

  struct IActiveScriptEncodeVTbl
    query_interface : Proc(IActiveScriptEncode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptEncode*, UInt32)
    release : Proc(IActiveScriptEncode*, UInt32)
    encode_section : Proc(IActiveScriptEncode*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    decode_script : Proc(IActiveScriptEncode*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_encode_prog_id : Proc(IActiveScriptEncode*, UInt8**, HRESULT)
  end

  IActiveScriptEncode_GUID = "bb1a2ae3-a4f9-11cf-8f20-00805f2cd064"
  IID_IActiveScriptEncode = LibC::GUID.new(0xbb1a2ae3_u32, 0xa4f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IActiveScriptEncode
    lpVtbl : IActiveScriptEncodeVTbl*
  end

  struct IActiveScriptHostEncodeVTbl
    query_interface : Proc(IActiveScriptHostEncode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptHostEncode*, UInt32)
    release : Proc(IActiveScriptHostEncode*, UInt32)
    encode_script_host_file : Proc(IActiveScriptHostEncode*, UInt8*, UInt8**, UInt32, UInt8*, HRESULT)
  end

  IActiveScriptHostEncode_GUID = "bee9b76e-cfe3-11d1-b747-00c04fc2b085"
  IID_IActiveScriptHostEncode = LibC::GUID.new(0xbee9b76e_u32, 0xcfe3_u16, 0x11d1_u16, StaticArray[0xb7_u8, 0x47_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
  struct IActiveScriptHostEncode
    lpVtbl : IActiveScriptHostEncodeVTbl*
  end

  struct IBindEventHandlerVTbl
    query_interface : Proc(IBindEventHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBindEventHandler*, UInt32)
    release : Proc(IBindEventHandler*, UInt32)
    bind_handler : Proc(IBindEventHandler*, LibC::LPWSTR, IDispatch, HRESULT)
  end

  IBindEventHandler_GUID = "63cdbcb0-c1b1-11d0-9336-00a0c90dcaa9"
  IID_IBindEventHandler = LibC::GUID.new(0x63cdbcb0_u32, 0xc1b1_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x36_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
  struct IBindEventHandler
    lpVtbl : IBindEventHandlerVTbl*
  end

  struct IActiveScriptStatsVTbl
    query_interface : Proc(IActiveScriptStats*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptStats*, UInt32)
    release : Proc(IActiveScriptStats*, UInt32)
    get_stat : Proc(IActiveScriptStats*, UInt32, UInt32*, UInt32*, HRESULT)
    get_stat_ex : Proc(IActiveScriptStats*, Guid*, UInt32*, UInt32*, HRESULT)
    reset_stats : Proc(IActiveScriptStats*, HRESULT)
  end

  IActiveScriptStats_GUID = "b8da6310-e19b-11d0-933c-00a0c90dcaa9"
  IID_IActiveScriptStats = LibC::GUID.new(0xb8da6310_u32, 0xe19b_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x3c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
  struct IActiveScriptStats
    lpVtbl : IActiveScriptStatsVTbl*
  end

  struct IActiveScriptPropertyVTbl
    query_interface : Proc(IActiveScriptProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProperty*, UInt32)
    release : Proc(IActiveScriptProperty*, UInt32)
    get_property : Proc(IActiveScriptProperty*, UInt32, VARIANT*, VARIANT*, HRESULT)
    set_property : Proc(IActiveScriptProperty*, UInt32, VARIANT*, VARIANT*, HRESULT)
  end

  IActiveScriptProperty_GUID = "4954e0d0-fbc7-11d1-8410-006008c3fbfc"
  IID_IActiveScriptProperty = LibC::GUID.new(0x4954e0d0_u32, 0xfbc7_u16, 0x11d1_u16, StaticArray[0x84_u8, 0x10_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfc_u8])
  struct IActiveScriptProperty
    lpVtbl : IActiveScriptPropertyVTbl*
  end

  struct ITridentEventSinkVTbl
    query_interface : Proc(ITridentEventSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITridentEventSink*, UInt32)
    release : Proc(ITridentEventSink*, UInt32)
    fire_event : Proc(ITridentEventSink*, LibC::LPWSTR, DISPPARAMS*, VARIANT*, EXCEPINFO*, HRESULT)
  end

  ITridentEventSink_GUID = "1dc9ca50-06ef-11d2-8415-006008c3fbfc"
  IID_ITridentEventSink = LibC::GUID.new(0x1dc9ca50_u32, 0x6ef_u16, 0x11d2_u16, StaticArray[0x84_u8, 0x15_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfc_u8])
  struct ITridentEventSink
    lpVtbl : ITridentEventSinkVTbl*
  end

  struct IActiveScriptGarbageCollectorVTbl
    query_interface : Proc(IActiveScriptGarbageCollector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptGarbageCollector*, UInt32)
    release : Proc(IActiveScriptGarbageCollector*, UInt32)
    collect_garbage : Proc(IActiveScriptGarbageCollector*, SCRIPTGCTYPE, HRESULT)
  end

  IActiveScriptGarbageCollector_GUID = "6aa2c4a0-2b53-11d4-a2a0-00104bd35090"
  IID_IActiveScriptGarbageCollector = LibC::GUID.new(0x6aa2c4a0_u32, 0x2b53_u16, 0x11d4_u16, StaticArray[0xa2_u8, 0xa0_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xd3_u8, 0x50_u8, 0x90_u8])
  struct IActiveScriptGarbageCollector
    lpVtbl : IActiveScriptGarbageCollectorVTbl*
  end

  struct IActiveScriptSIPInfoVTbl
    query_interface : Proc(IActiveScriptSIPInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSIPInfo*, UInt32)
    release : Proc(IActiveScriptSIPInfo*, UInt32)
    get_sipoid : Proc(IActiveScriptSIPInfo*, Guid*, HRESULT)
  end

  IActiveScriptSIPInfo_GUID = "764651d0-38de-11d4-a2a3-00104bd35090"
  IID_IActiveScriptSIPInfo = LibC::GUID.new(0x764651d0_u32, 0x38de_u16, 0x11d4_u16, StaticArray[0xa2_u8, 0xa3_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xd3_u8, 0x50_u8, 0x90_u8])
  struct IActiveScriptSIPInfo
    lpVtbl : IActiveScriptSIPInfoVTbl*
  end

  struct IActiveScriptSiteTraceInfoVTbl
    query_interface : Proc(IActiveScriptSiteTraceInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteTraceInfo*, UInt32)
    release : Proc(IActiveScriptSiteTraceInfo*, UInt32)
    send_script_trace_info : Proc(IActiveScriptSiteTraceInfo*, SCRIPTTRACEINFO, Guid, UInt32, Int32, Int32, UInt64, HRESULT)
  end

  IActiveScriptSiteTraceInfo_GUID = "4b7272ae-1955-4bfe-98b0-780621888569"
  IID_IActiveScriptSiteTraceInfo = LibC::GUID.new(0x4b7272ae_u32, 0x1955_u16, 0x4bfe_u16, StaticArray[0x98_u8, 0xb0_u8, 0x78_u8, 0x6_u8, 0x21_u8, 0x88_u8, 0x85_u8, 0x69_u8])
  struct IActiveScriptSiteTraceInfo
    lpVtbl : IActiveScriptSiteTraceInfoVTbl*
  end

  struct IActiveScriptTraceInfoVTbl
    query_interface : Proc(IActiveScriptTraceInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptTraceInfo*, UInt32)
    release : Proc(IActiveScriptTraceInfo*, UInt32)
    start_script_tracing : Proc(IActiveScriptTraceInfo*, IActiveScriptSiteTraceInfo, Guid, HRESULT)
    stop_script_tracing : Proc(IActiveScriptTraceInfo*, HRESULT)
  end

  IActiveScriptTraceInfo_GUID = "c35456e7-bebf-4a1b-86a9-24d56be8b369"
  IID_IActiveScriptTraceInfo = LibC::GUID.new(0xc35456e7_u32, 0xbebf_u16, 0x4a1b_u16, StaticArray[0x86_u8, 0xa9_u8, 0x24_u8, 0xd5_u8, 0x6b_u8, 0xe8_u8, 0xb3_u8, 0x69_u8])
  struct IActiveScriptTraceInfo
    lpVtbl : IActiveScriptTraceInfoVTbl*
  end

  struct IActiveScriptStringCompareVTbl
    query_interface : Proc(IActiveScriptStringCompare*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptStringCompare*, UInt32)
    release : Proc(IActiveScriptStringCompare*, UInt32)
    str_comp : Proc(IActiveScriptStringCompare*, UInt8*, UInt8*, Int32*, HRESULT)
  end

  IActiveScriptStringCompare_GUID = "58562769-ed52-42f7-8403-4963514e1f11"
  IID_IActiveScriptStringCompare = LibC::GUID.new(0x58562769_u32, 0xed52_u16, 0x42f7_u16, StaticArray[0x84_u8, 0x3_u8, 0x49_u8, 0x63_u8, 0x51_u8, 0x4e_u8, 0x1f_u8, 0x11_u8])
  struct IActiveScriptStringCompare
    lpVtbl : IActiveScriptStringCompareVTbl*
  end

  struct IDebugPropertyVTbl
    query_interface : Proc(IDebugProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugProperty*, UInt32)
    release : Proc(IDebugProperty*, UInt32)
    get_property_info : Proc(IDebugProperty*, UInt32, UInt32, DebugPropertyInfo*, HRESULT)
    get_extended_info : Proc(IDebugProperty*, UInt32, Guid*, VARIANT*, HRESULT)
    set_value_as_string : Proc(IDebugProperty*, LibC::LPWSTR, UInt32, HRESULT)
    enum_members : Proc(IDebugProperty*, UInt32, UInt32, Guid*, IEnumDebugPropertyInfo*, HRESULT)
    get_parent : Proc(IDebugProperty*, IDebugProperty*, HRESULT)
  end

  IDebugProperty_GUID = "51973c50-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugProperty = LibC::GUID.new(0x51973c50_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugProperty
    lpVtbl : IDebugPropertyVTbl*
  end

  struct IEnumDebugPropertyInfoVTbl
    query_interface : Proc(IEnumDebugPropertyInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugPropertyInfo*, UInt32)
    release : Proc(IEnumDebugPropertyInfo*, UInt32)
    next : Proc(IEnumDebugPropertyInfo*, UInt32, DebugPropertyInfo*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugPropertyInfo*, UInt32, HRESULT)
    reset : Proc(IEnumDebugPropertyInfo*, HRESULT)
    clone : Proc(IEnumDebugPropertyInfo*, IEnumDebugPropertyInfo*, HRESULT)
    get_count : Proc(IEnumDebugPropertyInfo*, UInt32*, HRESULT)
  end

  IEnumDebugPropertyInfo_GUID = "51973c51-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugPropertyInfo = LibC::GUID.new(0x51973c51_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugPropertyInfo
    lpVtbl : IEnumDebugPropertyInfoVTbl*
  end

  struct IDebugExtendedPropertyVTbl
    query_interface : Proc(IDebugExtendedProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugExtendedProperty*, UInt32)
    release : Proc(IDebugExtendedProperty*, UInt32)
    get_property_info : Proc(IDebugExtendedProperty*, UInt32, UInt32, DebugPropertyInfo*, HRESULT)
    get_extended_info : Proc(IDebugExtendedProperty*, UInt32, Guid*, VARIANT*, HRESULT)
    set_value_as_string : Proc(IDebugExtendedProperty*, LibC::LPWSTR, UInt32, HRESULT)
    enum_members : Proc(IDebugExtendedProperty*, UInt32, UInt32, Guid*, IEnumDebugPropertyInfo*, HRESULT)
    get_parent : Proc(IDebugExtendedProperty*, IDebugProperty*, HRESULT)
    get_extended_property_info : Proc(IDebugExtendedProperty*, UInt32, UInt32, ExtendedDebugPropertyInfo*, HRESULT)
    enum_extended_members : Proc(IDebugExtendedProperty*, UInt32, UInt32, IEnumDebugExtendedPropertyInfo*, HRESULT)
  end

  IDebugExtendedProperty_GUID = "51973c52-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugExtendedProperty = LibC::GUID.new(0x51973c52_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugExtendedProperty
    lpVtbl : IDebugExtendedPropertyVTbl*
  end

  struct IEnumDebugExtendedPropertyInfoVTbl
    query_interface : Proc(IEnumDebugExtendedPropertyInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugExtendedPropertyInfo*, UInt32)
    release : Proc(IEnumDebugExtendedPropertyInfo*, UInt32)
    next : Proc(IEnumDebugExtendedPropertyInfo*, UInt32, ExtendedDebugPropertyInfo*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugExtendedPropertyInfo*, UInt32, HRESULT)
    reset : Proc(IEnumDebugExtendedPropertyInfo*, HRESULT)
    clone : Proc(IEnumDebugExtendedPropertyInfo*, IEnumDebugExtendedPropertyInfo*, HRESULT)
    get_count : Proc(IEnumDebugExtendedPropertyInfo*, UInt32*, HRESULT)
  end

  IEnumDebugExtendedPropertyInfo_GUID = "51973c53-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugExtendedPropertyInfo = LibC::GUID.new(0x51973c53_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugExtendedPropertyInfo
    lpVtbl : IEnumDebugExtendedPropertyInfoVTbl*
  end

  struct IPerPropertyBrowsing2VTbl
    query_interface : Proc(IPerPropertyBrowsing2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPerPropertyBrowsing2*, UInt32)
    release : Proc(IPerPropertyBrowsing2*, UInt32)
    get_display_string : Proc(IPerPropertyBrowsing2*, Int32, UInt8**, HRESULT)
    map_property_to_page : Proc(IPerPropertyBrowsing2*, Int32, Guid*, HRESULT)
    get_predefined_strings : Proc(IPerPropertyBrowsing2*, Int32, CALPOLESTR*, CADWORD*, HRESULT)
    set_predefined_value : Proc(IPerPropertyBrowsing2*, Int32, UInt32, HRESULT)
  end

  IPerPropertyBrowsing2_GUID = "51973c54-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IPerPropertyBrowsing2 = LibC::GUID.new(0x51973c54_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IPerPropertyBrowsing2
    lpVtbl : IPerPropertyBrowsing2VTbl*
  end

  struct IDebugPropertyEnumType_AllVTbl
    query_interface : Proc(IDebugPropertyEnumType_All*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPropertyEnumType_All*, UInt32)
    release : Proc(IDebugPropertyEnumType_All*, UInt32)
    get_name : Proc(IDebugPropertyEnumType_All*, UInt8**, HRESULT)
  end

  IDebugPropertyEnumType_All_GUID = "51973c55-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugPropertyEnumType_All = LibC::GUID.new(0x51973c55_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugPropertyEnumType_All
    lpVtbl : IDebugPropertyEnumType_AllVTbl*
  end

  struct IDebugPropertyEnumType_LocalsVTbl
    query_interface : Proc(IDebugPropertyEnumType_Locals*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPropertyEnumType_Locals*, UInt32)
    release : Proc(IDebugPropertyEnumType_Locals*, UInt32)
    get_name : Proc(IDebugPropertyEnumType_Locals*, UInt8**, HRESULT)
  end

  IDebugPropertyEnumType_Locals_GUID = "51973c56-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugPropertyEnumType_Locals = LibC::GUID.new(0x51973c56_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugPropertyEnumType_Locals
    lpVtbl : IDebugPropertyEnumType_LocalsVTbl*
  end

  struct IDebugPropertyEnumType_ArgumentsVTbl
    query_interface : Proc(IDebugPropertyEnumType_Arguments*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPropertyEnumType_Arguments*, UInt32)
    release : Proc(IDebugPropertyEnumType_Arguments*, UInt32)
    get_name : Proc(IDebugPropertyEnumType_Arguments*, UInt8**, HRESULT)
  end

  IDebugPropertyEnumType_Arguments_GUID = "51973c57-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugPropertyEnumType_Arguments = LibC::GUID.new(0x51973c57_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugPropertyEnumType_Arguments
    lpVtbl : IDebugPropertyEnumType_ArgumentsVTbl*
  end

  struct IDebugPropertyEnumType_LocalsPlusArgsVTbl
    query_interface : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, UInt32)
    release : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, UInt32)
    get_name : Proc(IDebugPropertyEnumType_LocalsPlusArgs*, UInt8**, HRESULT)
  end

  IDebugPropertyEnumType_LocalsPlusArgs_GUID = "51973c58-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugPropertyEnumType_LocalsPlusArgs = LibC::GUID.new(0x51973c58_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugPropertyEnumType_LocalsPlusArgs
    lpVtbl : IDebugPropertyEnumType_LocalsPlusArgsVTbl*
  end

  struct IDebugPropertyEnumType_RegistersVTbl
    query_interface : Proc(IDebugPropertyEnumType_Registers*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugPropertyEnumType_Registers*, UInt32)
    release : Proc(IDebugPropertyEnumType_Registers*, UInt32)
    get_name : Proc(IDebugPropertyEnumType_Registers*, UInt8**, HRESULT)
  end

  IDebugPropertyEnumType_Registers_GUID = "51973c59-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugPropertyEnumType_Registers = LibC::GUID.new(0x51973c59_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugPropertyEnumType_Registers
    lpVtbl : IDebugPropertyEnumType_RegistersVTbl*
  end

  struct IActiveScriptDebug32VTbl
    query_interface : Proc(IActiveScriptDebug32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptDebug32*, UInt32)
    release : Proc(IActiveScriptDebug32*, UInt32)
    get_script_text_attributes : Proc(IActiveScriptDebug32*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    get_scriptlet_text_attributes : Proc(IActiveScriptDebug32*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    enum_code_contexts_of_position : Proc(IActiveScriptDebug32*, UInt32, UInt32, UInt32, IEnumDebugCodeContexts*, HRESULT)
  end

  IActiveScriptDebug32_GUID = "51973c10-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IActiveScriptDebug32 = LibC::GUID.new(0x51973c10_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IActiveScriptDebug32
    lpVtbl : IActiveScriptDebug32VTbl*
  end

  struct IActiveScriptDebug64VTbl
    query_interface : Proc(IActiveScriptDebug64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptDebug64*, UInt32)
    release : Proc(IActiveScriptDebug64*, UInt32)
    get_script_text_attributes : Proc(IActiveScriptDebug64*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    get_scriptlet_text_attributes : Proc(IActiveScriptDebug64*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    enum_code_contexts_of_position : Proc(IActiveScriptDebug64*, UInt64, UInt32, UInt32, IEnumDebugCodeContexts*, HRESULT)
  end

  IActiveScriptDebug64_GUID = "bc437e23-f5b8-47f4-bb79-7d1ce5483b86"
  IID_IActiveScriptDebug64 = LibC::GUID.new(0xbc437e23_u32, 0xf5b8_u16, 0x47f4_u16, StaticArray[0xbb_u8, 0x79_u8, 0x7d_u8, 0x1c_u8, 0xe5_u8, 0x48_u8, 0x3b_u8, 0x86_u8])
  struct IActiveScriptDebug64
    lpVtbl : IActiveScriptDebug64VTbl*
  end

  struct IActiveScriptSiteDebug32VTbl
    query_interface : Proc(IActiveScriptSiteDebug32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteDebug32*, UInt32)
    release : Proc(IActiveScriptSiteDebug32*, UInt32)
    get_document_context_from_position : Proc(IActiveScriptSiteDebug32*, UInt32, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
    get_application : Proc(IActiveScriptSiteDebug32*, IDebugApplication32*, HRESULT)
    get_root_application_node : Proc(IActiveScriptSiteDebug32*, IDebugApplicationNode*, HRESULT)
    on_script_error_debug : Proc(IActiveScriptSiteDebug32*, IActiveScriptErrorDebug, LibC::BOOL*, LibC::BOOL*, HRESULT)
  end

  IActiveScriptSiteDebug32_GUID = "51973c11-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IActiveScriptSiteDebug32 = LibC::GUID.new(0x51973c11_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IActiveScriptSiteDebug32
    lpVtbl : IActiveScriptSiteDebug32VTbl*
  end

  struct IActiveScriptSiteDebug64VTbl
    query_interface : Proc(IActiveScriptSiteDebug64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteDebug64*, UInt32)
    release : Proc(IActiveScriptSiteDebug64*, UInt32)
    get_document_context_from_position : Proc(IActiveScriptSiteDebug64*, UInt64, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
    get_application : Proc(IActiveScriptSiteDebug64*, IDebugApplication64*, HRESULT)
    get_root_application_node : Proc(IActiveScriptSiteDebug64*, IDebugApplicationNode*, HRESULT)
    on_script_error_debug : Proc(IActiveScriptSiteDebug64*, IActiveScriptErrorDebug, LibC::BOOL*, LibC::BOOL*, HRESULT)
  end

  IActiveScriptSiteDebug64_GUID = "d6b96b0a-7463-402c-92ac-89984226942f"
  IID_IActiveScriptSiteDebug64 = LibC::GUID.new(0xd6b96b0a_u32, 0x7463_u16, 0x402c_u16, StaticArray[0x92_u8, 0xac_u8, 0x89_u8, 0x98_u8, 0x42_u8, 0x26_u8, 0x94_u8, 0x2f_u8])
  struct IActiveScriptSiteDebug64
    lpVtbl : IActiveScriptSiteDebug64VTbl*
  end

  struct IActiveScriptSiteDebugExVTbl
    query_interface : Proc(IActiveScriptSiteDebugEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptSiteDebugEx*, UInt32)
    release : Proc(IActiveScriptSiteDebugEx*, UInt32)
    on_can_not_jit_script_error_debug : Proc(IActiveScriptSiteDebugEx*, IActiveScriptErrorDebug, LibC::BOOL*, HRESULT)
  end

  IActiveScriptSiteDebugEx_GUID = "bb722ccb-6ad2-41c6-b780-af9c03ee69f5"
  IID_IActiveScriptSiteDebugEx = LibC::GUID.new(0xbb722ccb_u32, 0x6ad2_u16, 0x41c6_u16, StaticArray[0xb7_u8, 0x80_u8, 0xaf_u8, 0x9c_u8, 0x3_u8, 0xee_u8, 0x69_u8, 0xf5_u8])
  struct IActiveScriptSiteDebugEx
    lpVtbl : IActiveScriptSiteDebugExVTbl*
  end

  struct IActiveScriptErrorDebugVTbl
    query_interface : Proc(IActiveScriptErrorDebug*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptErrorDebug*, UInt32)
    release : Proc(IActiveScriptErrorDebug*, UInt32)
    get_exception_info : Proc(IActiveScriptErrorDebug*, EXCEPINFO*, HRESULT)
    get_source_position : Proc(IActiveScriptErrorDebug*, UInt32*, UInt32*, Int32*, HRESULT)
    get_source_line_text : Proc(IActiveScriptErrorDebug*, UInt8**, HRESULT)
    get_document_context : Proc(IActiveScriptErrorDebug*, IDebugDocumentContext*, HRESULT)
    get_stack_frame : Proc(IActiveScriptErrorDebug*, IDebugStackFrame*, HRESULT)
  end

  IActiveScriptErrorDebug_GUID = "51973c12-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IActiveScriptErrorDebug = LibC::GUID.new(0x51973c12_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IActiveScriptErrorDebug
    lpVtbl : IActiveScriptErrorDebugVTbl*
  end

  struct IDebugCodeContextVTbl
    query_interface : Proc(IDebugCodeContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugCodeContext*, UInt32)
    release : Proc(IDebugCodeContext*, UInt32)
    get_document_context : Proc(IDebugCodeContext*, IDebugDocumentContext*, HRESULT)
    set_break_point : Proc(IDebugCodeContext*, BREAKPOINT_STATE, HRESULT)
  end

  IDebugCodeContext_GUID = "51973c13-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugCodeContext = LibC::GUID.new(0x51973c13_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugCodeContext
    lpVtbl : IDebugCodeContextVTbl*
  end

  struct IDebugExpressionVTbl
    query_interface : Proc(IDebugExpression*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugExpression*, UInt32)
    release : Proc(IDebugExpression*, UInt32)
    start : Proc(IDebugExpression*, IDebugExpressionCallBack, HRESULT)
    abort : Proc(IDebugExpression*, HRESULT)
    query_is_complete : Proc(IDebugExpression*, HRESULT)
    get_result_as_string : Proc(IDebugExpression*, HRESULT*, UInt8**, HRESULT)
    get_result_as_debug_property : Proc(IDebugExpression*, HRESULT*, IDebugProperty*, HRESULT)
  end

  IDebugExpression_GUID = "51973c14-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugExpression = LibC::GUID.new(0x51973c14_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugExpression
    lpVtbl : IDebugExpressionVTbl*
  end

  struct IDebugExpressionContextVTbl
    query_interface : Proc(IDebugExpressionContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugExpressionContext*, UInt32)
    release : Proc(IDebugExpressionContext*, UInt32)
    parse_language_text : Proc(IDebugExpressionContext*, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, IDebugExpression*, HRESULT)
    get_language_info : Proc(IDebugExpressionContext*, UInt8**, Guid*, HRESULT)
  end

  IDebugExpressionContext_GUID = "51973c15-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugExpressionContext = LibC::GUID.new(0x51973c15_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugExpressionContext
    lpVtbl : IDebugExpressionContextVTbl*
  end

  struct IDebugExpressionCallBackVTbl
    query_interface : Proc(IDebugExpressionCallBack*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugExpressionCallBack*, UInt32)
    release : Proc(IDebugExpressionCallBack*, UInt32)
    on_complete : Proc(IDebugExpressionCallBack*, HRESULT)
  end

  IDebugExpressionCallBack_GUID = "51973c16-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugExpressionCallBack = LibC::GUID.new(0x51973c16_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugExpressionCallBack
    lpVtbl : IDebugExpressionCallBackVTbl*
  end

  struct IDebugStackFrameVTbl
    query_interface : Proc(IDebugStackFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugStackFrame*, UInt32)
    release : Proc(IDebugStackFrame*, UInt32)
    get_code_context : Proc(IDebugStackFrame*, IDebugCodeContext*, HRESULT)
    get_description_string : Proc(IDebugStackFrame*, LibC::BOOL, UInt8**, HRESULT)
    get_language_string : Proc(IDebugStackFrame*, LibC::BOOL, UInt8**, HRESULT)
    get_thread : Proc(IDebugStackFrame*, IDebugApplicationThread*, HRESULT)
    get_debug_property : Proc(IDebugStackFrame*, IDebugProperty*, HRESULT)
  end

  IDebugStackFrame_GUID = "51973c17-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugStackFrame = LibC::GUID.new(0x51973c17_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugStackFrame
    lpVtbl : IDebugStackFrameVTbl*
  end

  struct IDebugStackFrameSnifferVTbl
    query_interface : Proc(IDebugStackFrameSniffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugStackFrameSniffer*, UInt32)
    release : Proc(IDebugStackFrameSniffer*, UInt32)
    enum_stack_frames : Proc(IDebugStackFrameSniffer*, IEnumDebugStackFrames*, HRESULT)
  end

  IDebugStackFrameSniffer_GUID = "51973c18-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugStackFrameSniffer = LibC::GUID.new(0x51973c18_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugStackFrameSniffer
    lpVtbl : IDebugStackFrameSnifferVTbl*
  end

  struct IDebugStackFrameSnifferEx32VTbl
    query_interface : Proc(IDebugStackFrameSnifferEx32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugStackFrameSnifferEx32*, UInt32)
    release : Proc(IDebugStackFrameSnifferEx32*, UInt32)
    enum_stack_frames : Proc(IDebugStackFrameSnifferEx32*, IEnumDebugStackFrames*, HRESULT)
    enum_stack_frames_ex32 : Proc(IDebugStackFrameSnifferEx32*, UInt32, IEnumDebugStackFrames*, HRESULT)
  end

  IDebugStackFrameSnifferEx32_GUID = "51973c19-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugStackFrameSnifferEx32 = LibC::GUID.new(0x51973c19_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugStackFrameSnifferEx32
    lpVtbl : IDebugStackFrameSnifferEx32VTbl*
  end

  struct IDebugStackFrameSnifferEx64VTbl
    query_interface : Proc(IDebugStackFrameSnifferEx64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugStackFrameSnifferEx64*, UInt32)
    release : Proc(IDebugStackFrameSnifferEx64*, UInt32)
    enum_stack_frames : Proc(IDebugStackFrameSnifferEx64*, IEnumDebugStackFrames*, HRESULT)
    enum_stack_frames_ex64 : Proc(IDebugStackFrameSnifferEx64*, UInt64, IEnumDebugStackFrames64*, HRESULT)
  end

  IDebugStackFrameSnifferEx64_GUID = "8cd12af4-49c1-4d52-8d8a-c146f47581aa"
  IID_IDebugStackFrameSnifferEx64 = LibC::GUID.new(0x8cd12af4_u32, 0x49c1_u16, 0x4d52_u16, StaticArray[0x8d_u8, 0x8a_u8, 0xc1_u8, 0x46_u8, 0xf4_u8, 0x75_u8, 0x81_u8, 0xaa_u8])
  struct IDebugStackFrameSnifferEx64
    lpVtbl : IDebugStackFrameSnifferEx64VTbl*
  end

  struct IDebugSyncOperationVTbl
    query_interface : Proc(IDebugSyncOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSyncOperation*, UInt32)
    release : Proc(IDebugSyncOperation*, UInt32)
    get_target_thread : Proc(IDebugSyncOperation*, IDebugApplicationThread*, HRESULT)
    execute : Proc(IDebugSyncOperation*, IUnknown*, HRESULT)
    in_progress_abort : Proc(IDebugSyncOperation*, HRESULT)
  end

  IDebugSyncOperation_GUID = "51973c1a-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugSyncOperation = LibC::GUID.new(0x51973c1a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugSyncOperation
    lpVtbl : IDebugSyncOperationVTbl*
  end

  struct IDebugAsyncOperationVTbl
    query_interface : Proc(IDebugAsyncOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAsyncOperation*, UInt32)
    release : Proc(IDebugAsyncOperation*, UInt32)
    get_sync_debug_operation : Proc(IDebugAsyncOperation*, IDebugSyncOperation*, HRESULT)
    start : Proc(IDebugAsyncOperation*, IDebugAsyncOperationCallBack, HRESULT)
    abort : Proc(IDebugAsyncOperation*, HRESULT)
    query_is_complete : Proc(IDebugAsyncOperation*, HRESULT)
    get_result : Proc(IDebugAsyncOperation*, HRESULT*, IUnknown*, HRESULT)
  end

  IDebugAsyncOperation_GUID = "51973c1b-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugAsyncOperation = LibC::GUID.new(0x51973c1b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugAsyncOperation
    lpVtbl : IDebugAsyncOperationVTbl*
  end

  struct IDebugAsyncOperationCallBackVTbl
    query_interface : Proc(IDebugAsyncOperationCallBack*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugAsyncOperationCallBack*, UInt32)
    release : Proc(IDebugAsyncOperationCallBack*, UInt32)
    on_complete : Proc(IDebugAsyncOperationCallBack*, HRESULT)
  end

  IDebugAsyncOperationCallBack_GUID = "51973c1c-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugAsyncOperationCallBack = LibC::GUID.new(0x51973c1c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugAsyncOperationCallBack
    lpVtbl : IDebugAsyncOperationCallBackVTbl*
  end

  struct IEnumDebugCodeContextsVTbl
    query_interface : Proc(IEnumDebugCodeContexts*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugCodeContexts*, UInt32)
    release : Proc(IEnumDebugCodeContexts*, UInt32)
    next : Proc(IEnumDebugCodeContexts*, UInt32, IDebugCodeContext*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugCodeContexts*, UInt32, HRESULT)
    reset : Proc(IEnumDebugCodeContexts*, HRESULT)
    clone : Proc(IEnumDebugCodeContexts*, IEnumDebugCodeContexts*, HRESULT)
  end

  IEnumDebugCodeContexts_GUID = "51973c1d-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugCodeContexts = LibC::GUID.new(0x51973c1d_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugCodeContexts
    lpVtbl : IEnumDebugCodeContextsVTbl*
  end

  struct IEnumDebugStackFramesVTbl
    query_interface : Proc(IEnumDebugStackFrames*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugStackFrames*, UInt32)
    release : Proc(IEnumDebugStackFrames*, UInt32)
    next : Proc(IEnumDebugStackFrames*, UInt32, DebugStackFrameDescriptor*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugStackFrames*, UInt32, HRESULT)
    reset : Proc(IEnumDebugStackFrames*, HRESULT)
    clone : Proc(IEnumDebugStackFrames*, IEnumDebugStackFrames*, HRESULT)
  end

  IEnumDebugStackFrames_GUID = "51973c1e-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugStackFrames = LibC::GUID.new(0x51973c1e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugStackFrames
    lpVtbl : IEnumDebugStackFramesVTbl*
  end

  struct IEnumDebugStackFrames64VTbl
    query_interface : Proc(IEnumDebugStackFrames64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugStackFrames64*, UInt32)
    release : Proc(IEnumDebugStackFrames64*, UInt32)
    next : Proc(IEnumDebugStackFrames64*, UInt32, DebugStackFrameDescriptor*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugStackFrames64*, UInt32, HRESULT)
    reset : Proc(IEnumDebugStackFrames64*, HRESULT)
    clone : Proc(IEnumDebugStackFrames64*, IEnumDebugStackFrames*, HRESULT)
    next64 : Proc(IEnumDebugStackFrames64*, UInt32, DebugStackFrameDescriptor64*, UInt32*, HRESULT)
  end

  IEnumDebugStackFrames64_GUID = "0dc38853-c1b0-4176-a984-b298361027af"
  IID_IEnumDebugStackFrames64 = LibC::GUID.new(0xdc38853_u32, 0xc1b0_u16, 0x4176_u16, StaticArray[0xa9_u8, 0x84_u8, 0xb2_u8, 0x98_u8, 0x36_u8, 0x10_u8, 0x27_u8, 0xaf_u8])
  struct IEnumDebugStackFrames64
    lpVtbl : IEnumDebugStackFrames64VTbl*
  end

  struct IDebugDocumentInfoVTbl
    query_interface : Proc(IDebugDocumentInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentInfo*, UInt32)
    release : Proc(IDebugDocumentInfo*, UInt32)
    get_name : Proc(IDebugDocumentInfo*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugDocumentInfo*, Guid*, HRESULT)
  end

  IDebugDocumentInfo_GUID = "51973c1f-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentInfo = LibC::GUID.new(0x51973c1f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentInfo
    lpVtbl : IDebugDocumentInfoVTbl*
  end

  struct IDebugDocumentProviderVTbl
    query_interface : Proc(IDebugDocumentProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentProvider*, UInt32)
    release : Proc(IDebugDocumentProvider*, UInt32)
    get_name : Proc(IDebugDocumentProvider*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugDocumentProvider*, Guid*, HRESULT)
    get_document : Proc(IDebugDocumentProvider*, IDebugDocument*, HRESULT)
  end

  IDebugDocumentProvider_GUID = "51973c20-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentProvider = LibC::GUID.new(0x51973c20_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentProvider
    lpVtbl : IDebugDocumentProviderVTbl*
  end

  struct IDebugDocumentVTbl
    query_interface : Proc(IDebugDocument*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocument*, UInt32)
    release : Proc(IDebugDocument*, UInt32)
    get_name : Proc(IDebugDocument*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugDocument*, Guid*, HRESULT)
  end

  IDebugDocument_GUID = "51973c21-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocument = LibC::GUID.new(0x51973c21_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocument
    lpVtbl : IDebugDocumentVTbl*
  end

  struct IDebugDocumentTextVTbl
    query_interface : Proc(IDebugDocumentText*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentText*, UInt32)
    release : Proc(IDebugDocumentText*, UInt32)
    get_name : Proc(IDebugDocumentText*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugDocumentText*, Guid*, HRESULT)
    get_document_attributes : Proc(IDebugDocumentText*, UInt32*, HRESULT)
    get_size : Proc(IDebugDocumentText*, UInt32*, UInt32*, HRESULT)
    get_position_of_line : Proc(IDebugDocumentText*, UInt32, UInt32*, HRESULT)
    get_line_of_position : Proc(IDebugDocumentText*, UInt32, UInt32*, UInt32*, HRESULT)
    get_text : Proc(IDebugDocumentText*, UInt32, Char*, UInt16*, UInt32*, UInt32, HRESULT)
    get_position_of_context : Proc(IDebugDocumentText*, IDebugDocumentContext, UInt32*, UInt32*, HRESULT)
    get_context_of_position : Proc(IDebugDocumentText*, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
  end

  IDebugDocumentText_GUID = "51973c22-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentText = LibC::GUID.new(0x51973c22_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentText
    lpVtbl : IDebugDocumentTextVTbl*
  end

  struct IDebugDocumentTextEventsVTbl
    query_interface : Proc(IDebugDocumentTextEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentTextEvents*, UInt32)
    release : Proc(IDebugDocumentTextEvents*, UInt32)
    on_destroy : Proc(IDebugDocumentTextEvents*, HRESULT)
    on_insert_text : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, HRESULT)
    on_remove_text : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, HRESULT)
    on_replace_text : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, HRESULT)
    on_update_text_attributes : Proc(IDebugDocumentTextEvents*, UInt32, UInt32, HRESULT)
    on_update_document_attributes : Proc(IDebugDocumentTextEvents*, UInt32, HRESULT)
  end

  IDebugDocumentTextEvents_GUID = "51973c23-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentTextEvents = LibC::GUID.new(0x51973c23_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentTextEvents
    lpVtbl : IDebugDocumentTextEventsVTbl*
  end

  struct IDebugDocumentTextAuthorVTbl
    query_interface : Proc(IDebugDocumentTextAuthor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentTextAuthor*, UInt32)
    release : Proc(IDebugDocumentTextAuthor*, UInt32)
    get_name : Proc(IDebugDocumentTextAuthor*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugDocumentTextAuthor*, Guid*, HRESULT)
    get_document_attributes : Proc(IDebugDocumentTextAuthor*, UInt32*, HRESULT)
    get_size : Proc(IDebugDocumentTextAuthor*, UInt32*, UInt32*, HRESULT)
    get_position_of_line : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32*, HRESULT)
    get_line_of_position : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32*, UInt32*, HRESULT)
    get_text : Proc(IDebugDocumentTextAuthor*, UInt32, Char*, UInt16*, UInt32*, UInt32, HRESULT)
    get_position_of_context : Proc(IDebugDocumentTextAuthor*, IDebugDocumentContext, UInt32*, UInt32*, HRESULT)
    get_context_of_position : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
    insert_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, Char*, HRESULT)
    remove_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, HRESULT)
    replace_text : Proc(IDebugDocumentTextAuthor*, UInt32, UInt32, Char*, HRESULT)
  end

  IDebugDocumentTextAuthor_GUID = "51973c24-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentTextAuthor = LibC::GUID.new(0x51973c24_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentTextAuthor
    lpVtbl : IDebugDocumentTextAuthorVTbl*
  end

  struct IDebugDocumentTextExternalAuthorVTbl
    query_interface : Proc(IDebugDocumentTextExternalAuthor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentTextExternalAuthor*, UInt32)
    release : Proc(IDebugDocumentTextExternalAuthor*, UInt32)
    get_path_name : Proc(IDebugDocumentTextExternalAuthor*, UInt8**, LibC::BOOL*, HRESULT)
    get_file_name : Proc(IDebugDocumentTextExternalAuthor*, UInt8**, HRESULT)
    notify_changed : Proc(IDebugDocumentTextExternalAuthor*, HRESULT)
  end

  IDebugDocumentTextExternalAuthor_GUID = "51973c25-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentTextExternalAuthor = LibC::GUID.new(0x51973c25_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentTextExternalAuthor
    lpVtbl : IDebugDocumentTextExternalAuthorVTbl*
  end

  struct IDebugDocumentHelper32VTbl
    query_interface : Proc(IDebugDocumentHelper32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentHelper32*, UInt32)
    release : Proc(IDebugDocumentHelper32*, UInt32)
    init : Proc(IDebugDocumentHelper32*, IDebugApplication32, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    attach : Proc(IDebugDocumentHelper32*, IDebugDocumentHelper32, HRESULT)
    detach : Proc(IDebugDocumentHelper32*, HRESULT)
    add_unicode_text : Proc(IDebugDocumentHelper32*, LibC::LPWSTR, HRESULT)
    add_dbcs_text : Proc(IDebugDocumentHelper32*, PSTR, HRESULT)
    set_debug_document_host : Proc(IDebugDocumentHelper32*, IDebugDocumentHost, HRESULT)
    add_deferred_text : Proc(IDebugDocumentHelper32*, UInt32, UInt32, HRESULT)
    define_script_block : Proc(IDebugDocumentHelper32*, UInt32, UInt32, IActiveScript, LibC::BOOL, UInt32*, HRESULT)
    set_default_text_attr : Proc(IDebugDocumentHelper32*, UInt16, HRESULT)
    set_text_attributes : Proc(IDebugDocumentHelper32*, UInt32, UInt32, UInt16*, HRESULT)
    set_long_name : Proc(IDebugDocumentHelper32*, LibC::LPWSTR, HRESULT)
    set_short_name : Proc(IDebugDocumentHelper32*, LibC::LPWSTR, HRESULT)
    set_document_attr : Proc(IDebugDocumentHelper32*, UInt32, HRESULT)
    get_debug_application_node : Proc(IDebugDocumentHelper32*, IDebugApplicationNode*, HRESULT)
    get_script_block_info : Proc(IDebugDocumentHelper32*, UInt32, IActiveScript*, UInt32*, UInt32*, HRESULT)
    create_debug_document_context : Proc(IDebugDocumentHelper32*, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
    bring_document_to_top : Proc(IDebugDocumentHelper32*, HRESULT)
    bring_document_context_to_top : Proc(IDebugDocumentHelper32*, IDebugDocumentContext, HRESULT)
  end

  IDebugDocumentHelper32_GUID = "51973c26-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentHelper32 = LibC::GUID.new(0x51973c26_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentHelper32
    lpVtbl : IDebugDocumentHelper32VTbl*
  end

  struct IDebugDocumentHelper64VTbl
    query_interface : Proc(IDebugDocumentHelper64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentHelper64*, UInt32)
    release : Proc(IDebugDocumentHelper64*, UInt32)
    init : Proc(IDebugDocumentHelper64*, IDebugApplication64, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    attach : Proc(IDebugDocumentHelper64*, IDebugDocumentHelper64, HRESULT)
    detach : Proc(IDebugDocumentHelper64*, HRESULT)
    add_unicode_text : Proc(IDebugDocumentHelper64*, LibC::LPWSTR, HRESULT)
    add_dbcs_text : Proc(IDebugDocumentHelper64*, PSTR, HRESULT)
    set_debug_document_host : Proc(IDebugDocumentHelper64*, IDebugDocumentHost, HRESULT)
    add_deferred_text : Proc(IDebugDocumentHelper64*, UInt32, UInt32, HRESULT)
    define_script_block : Proc(IDebugDocumentHelper64*, UInt32, UInt32, IActiveScript, LibC::BOOL, UInt64*, HRESULT)
    set_default_text_attr : Proc(IDebugDocumentHelper64*, UInt16, HRESULT)
    set_text_attributes : Proc(IDebugDocumentHelper64*, UInt32, UInt32, UInt16*, HRESULT)
    set_long_name : Proc(IDebugDocumentHelper64*, LibC::LPWSTR, HRESULT)
    set_short_name : Proc(IDebugDocumentHelper64*, LibC::LPWSTR, HRESULT)
    set_document_attr : Proc(IDebugDocumentHelper64*, UInt32, HRESULT)
    get_debug_application_node : Proc(IDebugDocumentHelper64*, IDebugApplicationNode*, HRESULT)
    get_script_block_info : Proc(IDebugDocumentHelper64*, UInt64, IActiveScript*, UInt32*, UInt32*, HRESULT)
    create_debug_document_context : Proc(IDebugDocumentHelper64*, UInt32, UInt32, IDebugDocumentContext*, HRESULT)
    bring_document_to_top : Proc(IDebugDocumentHelper64*, HRESULT)
    bring_document_context_to_top : Proc(IDebugDocumentHelper64*, IDebugDocumentContext, HRESULT)
  end

  IDebugDocumentHelper64_GUID = "c4c7363c-20fd-47f9-bd82-4855e0150871"
  IID_IDebugDocumentHelper64 = LibC::GUID.new(0xc4c7363c_u32, 0x20fd_u16, 0x47f9_u16, StaticArray[0xbd_u8, 0x82_u8, 0x48_u8, 0x55_u8, 0xe0_u8, 0x15_u8, 0x8_u8, 0x71_u8])
  struct IDebugDocumentHelper64
    lpVtbl : IDebugDocumentHelper64VTbl*
  end

  struct IDebugDocumentHostVTbl
    query_interface : Proc(IDebugDocumentHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentHost*, UInt32)
    release : Proc(IDebugDocumentHost*, UInt32)
    get_deferred_text : Proc(IDebugDocumentHost*, UInt32, Char*, UInt16*, UInt32*, UInt32, HRESULT)
    get_script_text_attributes : Proc(IDebugDocumentHost*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    on_create_document_context : Proc(IDebugDocumentHost*, IUnknown*, HRESULT)
    get_path_name : Proc(IDebugDocumentHost*, UInt8**, LibC::BOOL*, HRESULT)
    get_file_name : Proc(IDebugDocumentHost*, UInt8**, HRESULT)
    notify_changed : Proc(IDebugDocumentHost*, HRESULT)
  end

  IDebugDocumentHost_GUID = "51973c27-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentHost = LibC::GUID.new(0x51973c27_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentHost
    lpVtbl : IDebugDocumentHostVTbl*
  end

  struct IDebugDocumentContextVTbl
    query_interface : Proc(IDebugDocumentContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugDocumentContext*, UInt32)
    release : Proc(IDebugDocumentContext*, UInt32)
    get_document : Proc(IDebugDocumentContext*, IDebugDocument*, HRESULT)
    enum_code_contexts : Proc(IDebugDocumentContext*, IEnumDebugCodeContexts*, HRESULT)
  end

  IDebugDocumentContext_GUID = "51973c28-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugDocumentContext = LibC::GUID.new(0x51973c28_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugDocumentContext
    lpVtbl : IDebugDocumentContextVTbl*
  end

  struct IDebugSessionProviderVTbl
    query_interface : Proc(IDebugSessionProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugSessionProvider*, UInt32)
    release : Proc(IDebugSessionProvider*, UInt32)
    start_debug_session : Proc(IDebugSessionProvider*, IRemoteDebugApplication, HRESULT)
  end

  IDebugSessionProvider_GUID = "51973c29-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugSessionProvider = LibC::GUID.new(0x51973c29_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugSessionProvider
    lpVtbl : IDebugSessionProviderVTbl*
  end

  struct IApplicationDebuggerVTbl
    query_interface : Proc(IApplicationDebugger*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDebugger*, UInt32)
    release : Proc(IApplicationDebugger*, UInt32)
    query_alive : Proc(IApplicationDebugger*, HRESULT)
    create_instance_at_debugger : Proc(IApplicationDebugger*, Guid*, IUnknown, UInt32, Guid*, IUnknown*, HRESULT)
    on_debug_output : Proc(IApplicationDebugger*, LibC::LPWSTR, HRESULT)
    on_handle_break_point : Proc(IApplicationDebugger*, IRemoteDebugApplicationThread, BREAKREASON, IActiveScriptErrorDebug, HRESULT)
    on_close : Proc(IApplicationDebugger*, HRESULT)
    on_debugger_event : Proc(IApplicationDebugger*, Guid*, IUnknown, HRESULT)
  end

  IApplicationDebugger_GUID = "51973c2a-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IApplicationDebugger = LibC::GUID.new(0x51973c2a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IApplicationDebugger
    lpVtbl : IApplicationDebuggerVTbl*
  end

  struct IApplicationDebuggerUIVTbl
    query_interface : Proc(IApplicationDebuggerUI*, Guid*, Void**, HRESULT)
    add_ref : Proc(IApplicationDebuggerUI*, UInt32)
    release : Proc(IApplicationDebuggerUI*, UInt32)
    bring_document_to_top : Proc(IApplicationDebuggerUI*, IDebugDocumentText, HRESULT)
    bring_document_context_to_top : Proc(IApplicationDebuggerUI*, IDebugDocumentContext, HRESULT)
  end

  IApplicationDebuggerUI_GUID = "51973c2b-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IApplicationDebuggerUI = LibC::GUID.new(0x51973c2b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IApplicationDebuggerUI
    lpVtbl : IApplicationDebuggerUIVTbl*
  end

  struct IMachineDebugManagerVTbl
    query_interface : Proc(IMachineDebugManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMachineDebugManager*, UInt32)
    release : Proc(IMachineDebugManager*, UInt32)
    add_application : Proc(IMachineDebugManager*, IRemoteDebugApplication, UInt32*, HRESULT)
    remove_application : Proc(IMachineDebugManager*, UInt32, HRESULT)
    enum_applications : Proc(IMachineDebugManager*, IEnumRemoteDebugApplications*, HRESULT)
  end

  IMachineDebugManager_GUID = "51973c2c-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IMachineDebugManager = LibC::GUID.new(0x51973c2c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IMachineDebugManager
    lpVtbl : IMachineDebugManagerVTbl*
  end

  struct IMachineDebugManagerCookieVTbl
    query_interface : Proc(IMachineDebugManagerCookie*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMachineDebugManagerCookie*, UInt32)
    release : Proc(IMachineDebugManagerCookie*, UInt32)
    add_application : Proc(IMachineDebugManagerCookie*, IRemoteDebugApplication, UInt32, UInt32*, HRESULT)
    remove_application : Proc(IMachineDebugManagerCookie*, UInt32, UInt32, HRESULT)
    enum_applications : Proc(IMachineDebugManagerCookie*, IEnumRemoteDebugApplications*, HRESULT)
  end

  IMachineDebugManagerCookie_GUID = "51973c2d-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IMachineDebugManagerCookie = LibC::GUID.new(0x51973c2d_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IMachineDebugManagerCookie
    lpVtbl : IMachineDebugManagerCookieVTbl*
  end

  struct IMachineDebugManagerEventsVTbl
    query_interface : Proc(IMachineDebugManagerEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMachineDebugManagerEvents*, UInt32)
    release : Proc(IMachineDebugManagerEvents*, UInt32)
    on_add_application : Proc(IMachineDebugManagerEvents*, IRemoteDebugApplication, UInt32, HRESULT)
    on_remove_application : Proc(IMachineDebugManagerEvents*, IRemoteDebugApplication, UInt32, HRESULT)
  end

  IMachineDebugManagerEvents_GUID = "51973c2e-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IMachineDebugManagerEvents = LibC::GUID.new(0x51973c2e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IMachineDebugManagerEvents
    lpVtbl : IMachineDebugManagerEventsVTbl*
  end

  struct IProcessDebugManager32VTbl
    query_interface : Proc(IProcessDebugManager32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProcessDebugManager32*, UInt32)
    release : Proc(IProcessDebugManager32*, UInt32)
    create_application : Proc(IProcessDebugManager32*, IDebugApplication32*, HRESULT)
    get_default_application : Proc(IProcessDebugManager32*, IDebugApplication32*, HRESULT)
    add_application : Proc(IProcessDebugManager32*, IDebugApplication32, UInt32*, HRESULT)
    remove_application : Proc(IProcessDebugManager32*, UInt32, HRESULT)
    create_debug_document_helper : Proc(IProcessDebugManager32*, IUnknown, IDebugDocumentHelper32*, HRESULT)
  end

  IProcessDebugManager32_GUID = "51973c2f-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IProcessDebugManager32 = LibC::GUID.new(0x51973c2f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IProcessDebugManager32
    lpVtbl : IProcessDebugManager32VTbl*
  end

  struct IProcessDebugManager64VTbl
    query_interface : Proc(IProcessDebugManager64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProcessDebugManager64*, UInt32)
    release : Proc(IProcessDebugManager64*, UInt32)
    create_application : Proc(IProcessDebugManager64*, IDebugApplication64*, HRESULT)
    get_default_application : Proc(IProcessDebugManager64*, IDebugApplication64*, HRESULT)
    add_application : Proc(IProcessDebugManager64*, IDebugApplication64, UInt32*, HRESULT)
    remove_application : Proc(IProcessDebugManager64*, UInt32, HRESULT)
    create_debug_document_helper : Proc(IProcessDebugManager64*, IUnknown, IDebugDocumentHelper64*, HRESULT)
  end

  IProcessDebugManager64_GUID = "56b9fc1c-63a9-4cc1-ac21-087d69a17fab"
  IID_IProcessDebugManager64 = LibC::GUID.new(0x56b9fc1c_u32, 0x63a9_u16, 0x4cc1_u16, StaticArray[0xac_u8, 0x21_u8, 0x8_u8, 0x7d_u8, 0x69_u8, 0xa1_u8, 0x7f_u8, 0xab_u8])
  struct IProcessDebugManager64
    lpVtbl : IProcessDebugManager64VTbl*
  end

  struct IRemoteDebugApplicationVTbl
    query_interface : Proc(IRemoteDebugApplication*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugApplication*, UInt32)
    release : Proc(IRemoteDebugApplication*, UInt32)
    resume_from_break_point : Proc(IRemoteDebugApplication*, IRemoteDebugApplicationThread, BREAKRESUME_ACTION, ERRORRESUMEACTION, HRESULT)
    cause_break : Proc(IRemoteDebugApplication*, HRESULT)
    connect_debugger : Proc(IRemoteDebugApplication*, IApplicationDebugger, HRESULT)
    disconnect_debugger : Proc(IRemoteDebugApplication*, HRESULT)
    get_debugger : Proc(IRemoteDebugApplication*, IApplicationDebugger*, HRESULT)
    create_instance_at_application : Proc(IRemoteDebugApplication*, Guid*, IUnknown, UInt32, Guid*, IUnknown*, HRESULT)
    query_alive : Proc(IRemoteDebugApplication*, HRESULT)
    enum_threads : Proc(IRemoteDebugApplication*, IEnumRemoteDebugApplicationThreads*, HRESULT)
    get_name : Proc(IRemoteDebugApplication*, UInt8**, HRESULT)
    get_root_node : Proc(IRemoteDebugApplication*, IDebugApplicationNode*, HRESULT)
    enum_global_expression_contexts : Proc(IRemoteDebugApplication*, IEnumDebugExpressionContexts*, HRESULT)
  end

  IRemoteDebugApplication_GUID = "51973c30-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IRemoteDebugApplication = LibC::GUID.new(0x51973c30_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IRemoteDebugApplication
    lpVtbl : IRemoteDebugApplicationVTbl*
  end

  struct IDebugApplication32VTbl
    query_interface : Proc(IDebugApplication32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplication32*, UInt32)
    release : Proc(IDebugApplication32*, UInt32)
    resume_from_break_point : Proc(IDebugApplication32*, IRemoteDebugApplicationThread, BREAKRESUME_ACTION, ERRORRESUMEACTION, HRESULT)
    cause_break : Proc(IDebugApplication32*, HRESULT)
    connect_debugger : Proc(IDebugApplication32*, IApplicationDebugger, HRESULT)
    disconnect_debugger : Proc(IDebugApplication32*, HRESULT)
    get_debugger : Proc(IDebugApplication32*, IApplicationDebugger*, HRESULT)
    create_instance_at_application : Proc(IDebugApplication32*, Guid*, IUnknown, UInt32, Guid*, IUnknown*, HRESULT)
    query_alive : Proc(IDebugApplication32*, HRESULT)
    enum_threads : Proc(IDebugApplication32*, IEnumRemoteDebugApplicationThreads*, HRESULT)
    get_name : Proc(IDebugApplication32*, UInt8**, HRESULT)
    get_root_node : Proc(IDebugApplication32*, IDebugApplicationNode*, HRESULT)
    enum_global_expression_contexts : Proc(IDebugApplication32*, IEnumDebugExpressionContexts*, HRESULT)
    set_name : Proc(IDebugApplication32*, LibC::LPWSTR, HRESULT)
    step_out_complete : Proc(IDebugApplication32*, HRESULT)
    debug_output : Proc(IDebugApplication32*, LibC::LPWSTR, HRESULT)
    start_debug_session : Proc(IDebugApplication32*, HRESULT)
    handle_break_point : Proc(IDebugApplication32*, BREAKREASON, BREAKRESUME_ACTION*, HRESULT)
    close : Proc(IDebugApplication32*, HRESULT)
    get_break_flags : Proc(IDebugApplication32*, UInt32*, IRemoteDebugApplicationThread*, HRESULT)
    get_current_thread : Proc(IDebugApplication32*, IDebugApplicationThread*, HRESULT)
    create_async_debug_operation : Proc(IDebugApplication32*, IDebugSyncOperation, IDebugAsyncOperation*, HRESULT)
    add_stack_frame_sniffer : Proc(IDebugApplication32*, IDebugStackFrameSniffer, UInt32*, HRESULT)
    remove_stack_frame_sniffer : Proc(IDebugApplication32*, UInt32, HRESULT)
    query_current_thread_is_debugger_thread : Proc(IDebugApplication32*, HRESULT)
    synchronous_call_in_debugger_thread : Proc(IDebugApplication32*, IDebugThreadCall32, UInt32, UInt32, UInt32, HRESULT)
    create_application_node : Proc(IDebugApplication32*, IDebugApplicationNode*, HRESULT)
    fire_debugger_event : Proc(IDebugApplication32*, Guid*, IUnknown, HRESULT)
    handle_runtime_error : Proc(IDebugApplication32*, IActiveScriptErrorDebug, IActiveScriptSite, BREAKRESUME_ACTION*, ERRORRESUMEACTION*, LibC::BOOL*, HRESULT)
    f_can_jit_debug : Proc(IDebugApplication32*, LibC::BOOL)
    f_is_auto_jit_debug_enabled : Proc(IDebugApplication32*, LibC::BOOL)
    add_global_expression_context_provider : Proc(IDebugApplication32*, IProvideExpressionContexts, UInt32*, HRESULT)
    remove_global_expression_context_provider : Proc(IDebugApplication32*, UInt32, HRESULT)
  end

  IDebugApplication32_GUID = "51973c32-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugApplication32 = LibC::GUID.new(0x51973c32_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugApplication32
    lpVtbl : IDebugApplication32VTbl*
  end

  struct IDebugApplication64VTbl
    query_interface : Proc(IDebugApplication64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplication64*, UInt32)
    release : Proc(IDebugApplication64*, UInt32)
    resume_from_break_point : Proc(IDebugApplication64*, IRemoteDebugApplicationThread, BREAKRESUME_ACTION, ERRORRESUMEACTION, HRESULT)
    cause_break : Proc(IDebugApplication64*, HRESULT)
    connect_debugger : Proc(IDebugApplication64*, IApplicationDebugger, HRESULT)
    disconnect_debugger : Proc(IDebugApplication64*, HRESULT)
    get_debugger : Proc(IDebugApplication64*, IApplicationDebugger*, HRESULT)
    create_instance_at_application : Proc(IDebugApplication64*, Guid*, IUnknown, UInt32, Guid*, IUnknown*, HRESULT)
    query_alive : Proc(IDebugApplication64*, HRESULT)
    enum_threads : Proc(IDebugApplication64*, IEnumRemoteDebugApplicationThreads*, HRESULT)
    get_name : Proc(IDebugApplication64*, UInt8**, HRESULT)
    get_root_node : Proc(IDebugApplication64*, IDebugApplicationNode*, HRESULT)
    enum_global_expression_contexts : Proc(IDebugApplication64*, IEnumDebugExpressionContexts*, HRESULT)
    set_name : Proc(IDebugApplication64*, LibC::LPWSTR, HRESULT)
    step_out_complete : Proc(IDebugApplication64*, HRESULT)
    debug_output : Proc(IDebugApplication64*, LibC::LPWSTR, HRESULT)
    start_debug_session : Proc(IDebugApplication64*, HRESULT)
    handle_break_point : Proc(IDebugApplication64*, BREAKREASON, BREAKRESUME_ACTION*, HRESULT)
    close : Proc(IDebugApplication64*, HRESULT)
    get_break_flags : Proc(IDebugApplication64*, UInt32*, IRemoteDebugApplicationThread*, HRESULT)
    get_current_thread : Proc(IDebugApplication64*, IDebugApplicationThread*, HRESULT)
    create_async_debug_operation : Proc(IDebugApplication64*, IDebugSyncOperation, IDebugAsyncOperation*, HRESULT)
    add_stack_frame_sniffer : Proc(IDebugApplication64*, IDebugStackFrameSniffer, UInt32*, HRESULT)
    remove_stack_frame_sniffer : Proc(IDebugApplication64*, UInt32, HRESULT)
    query_current_thread_is_debugger_thread : Proc(IDebugApplication64*, HRESULT)
    synchronous_call_in_debugger_thread : Proc(IDebugApplication64*, IDebugThreadCall64, UInt64, UInt64, UInt64, HRESULT)
    create_application_node : Proc(IDebugApplication64*, IDebugApplicationNode*, HRESULT)
    fire_debugger_event : Proc(IDebugApplication64*, Guid*, IUnknown, HRESULT)
    handle_runtime_error : Proc(IDebugApplication64*, IActiveScriptErrorDebug, IActiveScriptSite, BREAKRESUME_ACTION*, ERRORRESUMEACTION*, LibC::BOOL*, HRESULT)
    f_can_jit_debug : Proc(IDebugApplication64*, LibC::BOOL)
    f_is_auto_jit_debug_enabled : Proc(IDebugApplication64*, LibC::BOOL)
    add_global_expression_context_provider : Proc(IDebugApplication64*, IProvideExpressionContexts, UInt64*, HRESULT)
    remove_global_expression_context_provider : Proc(IDebugApplication64*, UInt64, HRESULT)
  end

  IDebugApplication64_GUID = "4dedc754-04c7-4f10-9e60-16a390fe6e62"
  IID_IDebugApplication64 = LibC::GUID.new(0x4dedc754_u32, 0x4c7_u16, 0x4f10_u16, StaticArray[0x9e_u8, 0x60_u8, 0x16_u8, 0xa3_u8, 0x90_u8, 0xfe_u8, 0x6e_u8, 0x62_u8])
  struct IDebugApplication64
    lpVtbl : IDebugApplication64VTbl*
  end

  struct IRemoteDebugApplicationEventsVTbl
    query_interface : Proc(IRemoteDebugApplicationEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugApplicationEvents*, UInt32)
    release : Proc(IRemoteDebugApplicationEvents*, UInt32)
    on_connect_debugger : Proc(IRemoteDebugApplicationEvents*, IApplicationDebugger, HRESULT)
    on_disconnect_debugger : Proc(IRemoteDebugApplicationEvents*, HRESULT)
    on_set_name : Proc(IRemoteDebugApplicationEvents*, LibC::LPWSTR, HRESULT)
    on_debug_output : Proc(IRemoteDebugApplicationEvents*, LibC::LPWSTR, HRESULT)
    on_close : Proc(IRemoteDebugApplicationEvents*, HRESULT)
    on_enter_break_point : Proc(IRemoteDebugApplicationEvents*, IRemoteDebugApplicationThread, HRESULT)
    on_leave_break_point : Proc(IRemoteDebugApplicationEvents*, IRemoteDebugApplicationThread, HRESULT)
    on_create_thread : Proc(IRemoteDebugApplicationEvents*, IRemoteDebugApplicationThread, HRESULT)
    on_destroy_thread : Proc(IRemoteDebugApplicationEvents*, IRemoteDebugApplicationThread, HRESULT)
    on_break_flag_change : Proc(IRemoteDebugApplicationEvents*, UInt32, IRemoteDebugApplicationThread, HRESULT)
  end

  IRemoteDebugApplicationEvents_GUID = "51973c33-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IRemoteDebugApplicationEvents = LibC::GUID.new(0x51973c33_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IRemoteDebugApplicationEvents
    lpVtbl : IRemoteDebugApplicationEventsVTbl*
  end

  struct IDebugApplicationNodeVTbl
    query_interface : Proc(IDebugApplicationNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationNode*, UInt32)
    release : Proc(IDebugApplicationNode*, UInt32)
    get_name : Proc(IDebugApplicationNode*, DOCUMENTNAMETYPE, UInt8**, HRESULT)
    get_document_class_id : Proc(IDebugApplicationNode*, Guid*, HRESULT)
    get_document : Proc(IDebugApplicationNode*, IDebugDocument*, HRESULT)
    enum_children : Proc(IDebugApplicationNode*, IEnumDebugApplicationNodes*, HRESULT)
    get_parent : Proc(IDebugApplicationNode*, IDebugApplicationNode*, HRESULT)
    set_document_provider : Proc(IDebugApplicationNode*, IDebugDocumentProvider, HRESULT)
    close : Proc(IDebugApplicationNode*, HRESULT)
    attach : Proc(IDebugApplicationNode*, IDebugApplicationNode, HRESULT)
    detach : Proc(IDebugApplicationNode*, HRESULT)
  end

  IDebugApplicationNode_GUID = "51973c34-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugApplicationNode = LibC::GUID.new(0x51973c34_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugApplicationNode
    lpVtbl : IDebugApplicationNodeVTbl*
  end

  struct IDebugApplicationNodeEventsVTbl
    query_interface : Proc(IDebugApplicationNodeEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationNodeEvents*, UInt32)
    release : Proc(IDebugApplicationNodeEvents*, UInt32)
    on_add_child : Proc(IDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
    on_remove_child : Proc(IDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
    on_detach : Proc(IDebugApplicationNodeEvents*, HRESULT)
    on_attach : Proc(IDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
  end

  IDebugApplicationNodeEvents_GUID = "51973c35-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugApplicationNodeEvents = LibC::GUID.new(0x51973c35_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugApplicationNodeEvents
    lpVtbl : IDebugApplicationNodeEventsVTbl*
  end

  struct AsyncIDebugApplicationNodeEventsVTbl
    query_interface : Proc(AsyncIDebugApplicationNodeEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(AsyncIDebugApplicationNodeEvents*, UInt32)
    release : Proc(AsyncIDebugApplicationNodeEvents*, UInt32)
    begin_on_add_child : Proc(AsyncIDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
    finish_on_add_child : Proc(AsyncIDebugApplicationNodeEvents*, HRESULT)
    begin_on_remove_child : Proc(AsyncIDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
    finish_on_remove_child : Proc(AsyncIDebugApplicationNodeEvents*, HRESULT)
    begin_on_detach : Proc(AsyncIDebugApplicationNodeEvents*, HRESULT)
    finish_on_detach : Proc(AsyncIDebugApplicationNodeEvents*, HRESULT)
    begin_on_attach : Proc(AsyncIDebugApplicationNodeEvents*, IDebugApplicationNode, HRESULT)
    finish_on_attach : Proc(AsyncIDebugApplicationNodeEvents*, HRESULT)
  end

  AsyncIDebugApplicationNodeEvents_GUID = "a2e3aa3b-aa8d-4ebf-84cd-648b737b8c13"
  IID_AsyncIDebugApplicationNodeEvents = LibC::GUID.new(0xa2e3aa3b_u32, 0xaa8d_u16, 0x4ebf_u16, StaticArray[0x84_u8, 0xcd_u8, 0x64_u8, 0x8b_u8, 0x73_u8, 0x7b_u8, 0x8c_u8, 0x13_u8])
  struct AsyncIDebugApplicationNodeEvents
    lpVtbl : AsyncIDebugApplicationNodeEventsVTbl*
  end

  struct IDebugThreadCall32VTbl
    query_interface : Proc(IDebugThreadCall32*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugThreadCall32*, UInt32)
    release : Proc(IDebugThreadCall32*, UInt32)
    thread_call_handler : Proc(IDebugThreadCall32*, UInt32, UInt32, UInt32, HRESULT)
  end

  IDebugThreadCall32_GUID = "51973c36-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugThreadCall32 = LibC::GUID.new(0x51973c36_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugThreadCall32
    lpVtbl : IDebugThreadCall32VTbl*
  end

  struct IDebugThreadCall64VTbl
    query_interface : Proc(IDebugThreadCall64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugThreadCall64*, UInt32)
    release : Proc(IDebugThreadCall64*, UInt32)
    thread_call_handler : Proc(IDebugThreadCall64*, UInt64, UInt64, UInt64, HRESULT)
  end

  IDebugThreadCall64_GUID = "cb3fa335-e979-42fd-9fcf-a7546a0f3905"
  IID_IDebugThreadCall64 = LibC::GUID.new(0xcb3fa335_u32, 0xe979_u16, 0x42fd_u16, StaticArray[0x9f_u8, 0xcf_u8, 0xa7_u8, 0x54_u8, 0x6a_u8, 0xf_u8, 0x39_u8, 0x5_u8])
  struct IDebugThreadCall64
    lpVtbl : IDebugThreadCall64VTbl*
  end

  struct IRemoteDebugApplicationThreadVTbl
    query_interface : Proc(IRemoteDebugApplicationThread*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugApplicationThread*, UInt32)
    release : Proc(IRemoteDebugApplicationThread*, UInt32)
    get_system_thread_id : Proc(IRemoteDebugApplicationThread*, UInt32*, HRESULT)
    get_application : Proc(IRemoteDebugApplicationThread*, IRemoteDebugApplication*, HRESULT)
    enum_stack_frames : Proc(IRemoteDebugApplicationThread*, IEnumDebugStackFrames*, HRESULT)
    get_description : Proc(IRemoteDebugApplicationThread*, UInt8**, UInt8**, HRESULT)
    set_next_statement : Proc(IRemoteDebugApplicationThread*, IDebugStackFrame, IDebugCodeContext, HRESULT)
    get_state : Proc(IRemoteDebugApplicationThread*, UInt32*, HRESULT)
    suspend : Proc(IRemoteDebugApplicationThread*, UInt32*, HRESULT)
    resume : Proc(IRemoteDebugApplicationThread*, UInt32*, HRESULT)
    get_suspend_count : Proc(IRemoteDebugApplicationThread*, UInt32*, HRESULT)
  end

  IRemoteDebugApplicationThread_GUID = "51973c37-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IRemoteDebugApplicationThread = LibC::GUID.new(0x51973c37_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IRemoteDebugApplicationThread
    lpVtbl : IRemoteDebugApplicationThreadVTbl*
  end

  struct IDebugApplicationThreadVTbl
    query_interface : Proc(IDebugApplicationThread*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationThread*, UInt32)
    release : Proc(IDebugApplicationThread*, UInt32)
    get_system_thread_id : Proc(IDebugApplicationThread*, UInt32*, HRESULT)
    get_application : Proc(IDebugApplicationThread*, IRemoteDebugApplication*, HRESULT)
    enum_stack_frames : Proc(IDebugApplicationThread*, IEnumDebugStackFrames*, HRESULT)
    get_description : Proc(IDebugApplicationThread*, UInt8**, UInt8**, HRESULT)
    set_next_statement : Proc(IDebugApplicationThread*, IDebugStackFrame, IDebugCodeContext, HRESULT)
    get_state : Proc(IDebugApplicationThread*, UInt32*, HRESULT)
    suspend : Proc(IDebugApplicationThread*, UInt32*, HRESULT)
    resume : Proc(IDebugApplicationThread*, UInt32*, HRESULT)
    get_suspend_count : Proc(IDebugApplicationThread*, UInt32*, HRESULT)
    synchronous_call_into_thread32 : Proc(IDebugApplicationThread*, IDebugThreadCall32, UInt32, UInt32, UInt32, HRESULT)
    query_is_current_thread : Proc(IDebugApplicationThread*, HRESULT)
    query_is_debugger_thread : Proc(IDebugApplicationThread*, HRESULT)
    set_description : Proc(IDebugApplicationThread*, LibC::LPWSTR, HRESULT)
    set_state_string : Proc(IDebugApplicationThread*, LibC::LPWSTR, HRESULT)
  end

  IDebugApplicationThread_GUID = "51973c38-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugApplicationThread = LibC::GUID.new(0x51973c38_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugApplicationThread
    lpVtbl : IDebugApplicationThreadVTbl*
  end

  struct IDebugApplicationThread64VTbl
    query_interface : Proc(IDebugApplicationThread64*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationThread64*, UInt32)
    release : Proc(IDebugApplicationThread64*, UInt32)
    get_system_thread_id : Proc(IDebugApplicationThread64*, UInt32*, HRESULT)
    get_application : Proc(IDebugApplicationThread64*, IRemoteDebugApplication*, HRESULT)
    enum_stack_frames : Proc(IDebugApplicationThread64*, IEnumDebugStackFrames*, HRESULT)
    get_description : Proc(IDebugApplicationThread64*, UInt8**, UInt8**, HRESULT)
    set_next_statement : Proc(IDebugApplicationThread64*, IDebugStackFrame, IDebugCodeContext, HRESULT)
    get_state : Proc(IDebugApplicationThread64*, UInt32*, HRESULT)
    suspend : Proc(IDebugApplicationThread64*, UInt32*, HRESULT)
    resume : Proc(IDebugApplicationThread64*, UInt32*, HRESULT)
    get_suspend_count : Proc(IDebugApplicationThread64*, UInt32*, HRESULT)
    synchronous_call_into_thread32 : Proc(IDebugApplicationThread64*, IDebugThreadCall32, UInt32, UInt32, UInt32, HRESULT)
    query_is_current_thread : Proc(IDebugApplicationThread64*, HRESULT)
    query_is_debugger_thread : Proc(IDebugApplicationThread64*, HRESULT)
    set_description : Proc(IDebugApplicationThread64*, LibC::LPWSTR, HRESULT)
    set_state_string : Proc(IDebugApplicationThread64*, LibC::LPWSTR, HRESULT)
    synchronous_call_into_thread64 : Proc(IDebugApplicationThread64*, IDebugThreadCall64, UInt64, UInt64, UInt64, HRESULT)
  end

  IDebugApplicationThread64_GUID = "9dac5886-dbad-456d-9dee-5dec39ab3dda"
  IID_IDebugApplicationThread64 = LibC::GUID.new(0x9dac5886_u32, 0xdbad_u16, 0x456d_u16, StaticArray[0x9d_u8, 0xee_u8, 0x5d_u8, 0xec_u8, 0x39_u8, 0xab_u8, 0x3d_u8, 0xda_u8])
  struct IDebugApplicationThread64
    lpVtbl : IDebugApplicationThread64VTbl*
  end

  struct IDebugCookieVTbl
    query_interface : Proc(IDebugCookie*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugCookie*, UInt32)
    release : Proc(IDebugCookie*, UInt32)
    set_debug_cookie : Proc(IDebugCookie*, UInt32, HRESULT)
  end

  IDebugCookie_GUID = "51973c39-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugCookie = LibC::GUID.new(0x51973c39_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugCookie
    lpVtbl : IDebugCookieVTbl*
  end

  struct IEnumDebugApplicationNodesVTbl
    query_interface : Proc(IEnumDebugApplicationNodes*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugApplicationNodes*, UInt32)
    release : Proc(IEnumDebugApplicationNodes*, UInt32)
    next : Proc(IEnumDebugApplicationNodes*, UInt32, IDebugApplicationNode*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugApplicationNodes*, UInt32, HRESULT)
    reset : Proc(IEnumDebugApplicationNodes*, HRESULT)
    clone : Proc(IEnumDebugApplicationNodes*, IEnumDebugApplicationNodes*, HRESULT)
  end

  IEnumDebugApplicationNodes_GUID = "51973c3a-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugApplicationNodes = LibC::GUID.new(0x51973c3a_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugApplicationNodes
    lpVtbl : IEnumDebugApplicationNodesVTbl*
  end

  struct IEnumRemoteDebugApplicationsVTbl
    query_interface : Proc(IEnumRemoteDebugApplications*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumRemoteDebugApplications*, UInt32)
    release : Proc(IEnumRemoteDebugApplications*, UInt32)
    next : Proc(IEnumRemoteDebugApplications*, UInt32, IRemoteDebugApplication*, UInt32*, HRESULT)
    skip : Proc(IEnumRemoteDebugApplications*, UInt32, HRESULT)
    reset : Proc(IEnumRemoteDebugApplications*, HRESULT)
    clone : Proc(IEnumRemoteDebugApplications*, IEnumRemoteDebugApplications*, HRESULT)
  end

  IEnumRemoteDebugApplications_GUID = "51973c3b-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumRemoteDebugApplications = LibC::GUID.new(0x51973c3b_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumRemoteDebugApplications
    lpVtbl : IEnumRemoteDebugApplicationsVTbl*
  end

  struct IEnumRemoteDebugApplicationThreadsVTbl
    query_interface : Proc(IEnumRemoteDebugApplicationThreads*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumRemoteDebugApplicationThreads*, UInt32)
    release : Proc(IEnumRemoteDebugApplicationThreads*, UInt32)
    next : Proc(IEnumRemoteDebugApplicationThreads*, UInt32, IRemoteDebugApplicationThread*, UInt32*, HRESULT)
    skip : Proc(IEnumRemoteDebugApplicationThreads*, UInt32, HRESULT)
    reset : Proc(IEnumRemoteDebugApplicationThreads*, HRESULT)
    clone : Proc(IEnumRemoteDebugApplicationThreads*, IEnumRemoteDebugApplicationThreads*, HRESULT)
  end

  IEnumRemoteDebugApplicationThreads_GUID = "51973c3c-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumRemoteDebugApplicationThreads = LibC::GUID.new(0x51973c3c_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumRemoteDebugApplicationThreads
    lpVtbl : IEnumRemoteDebugApplicationThreadsVTbl*
  end

  struct IDebugFormatterVTbl
    query_interface : Proc(IDebugFormatter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugFormatter*, UInt32)
    release : Proc(IDebugFormatter*, UInt32)
    get_string_for_variant : Proc(IDebugFormatter*, VARIANT*, UInt32, UInt8**, HRESULT)
    get_variant_for_string : Proc(IDebugFormatter*, LibC::LPWSTR, VARIANT*, HRESULT)
    get_string_for_var_type : Proc(IDebugFormatter*, UInt16, TYPEDESC*, UInt8**, HRESULT)
  end

  IDebugFormatter_GUID = "51973c05-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugFormatter = LibC::GUID.new(0x51973c05_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugFormatter
    lpVtbl : IDebugFormatterVTbl*
  end

  struct ISimpleConnectionPointVTbl
    query_interface : Proc(ISimpleConnectionPoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISimpleConnectionPoint*, UInt32)
    release : Proc(ISimpleConnectionPoint*, UInt32)
    get_event_count : Proc(ISimpleConnectionPoint*, UInt32*, HRESULT)
    describe_events : Proc(ISimpleConnectionPoint*, UInt32, UInt32, Int32*, UInt8**, UInt32*, HRESULT)
    advise : Proc(ISimpleConnectionPoint*, IDispatch, UInt32*, HRESULT)
    unadvise : Proc(ISimpleConnectionPoint*, UInt32, HRESULT)
  end

  ISimpleConnectionPoint_GUID = "51973c3e-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_ISimpleConnectionPoint = LibC::GUID.new(0x51973c3e_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct ISimpleConnectionPoint
    lpVtbl : ISimpleConnectionPointVTbl*
  end

  struct IDebugHelperVTbl
    query_interface : Proc(IDebugHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugHelper*, UInt32)
    release : Proc(IDebugHelper*, UInt32)
    create_property_browser : Proc(IDebugHelper*, VARIANT*, LibC::LPWSTR, IDebugApplicationThread, IDebugProperty*, HRESULT)
    create_property_browser_ex : Proc(IDebugHelper*, VARIANT*, LibC::LPWSTR, IDebugApplicationThread, IDebugFormatter, IDebugProperty*, HRESULT)
    create_simple_connection_point : Proc(IDebugHelper*, IDispatch, ISimpleConnectionPoint*, HRESULT)
  end

  IDebugHelper_GUID = "51973c3f-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IDebugHelper = LibC::GUID.new(0x51973c3f_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IDebugHelper
    lpVtbl : IDebugHelperVTbl*
  end

  struct IEnumDebugExpressionContextsVTbl
    query_interface : Proc(IEnumDebugExpressionContexts*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDebugExpressionContexts*, UInt32)
    release : Proc(IEnumDebugExpressionContexts*, UInt32)
    next : Proc(IEnumDebugExpressionContexts*, UInt32, IDebugExpressionContext*, UInt32*, HRESULT)
    skip : Proc(IEnumDebugExpressionContexts*, UInt32, HRESULT)
    reset : Proc(IEnumDebugExpressionContexts*, HRESULT)
    clone : Proc(IEnumDebugExpressionContexts*, IEnumDebugExpressionContexts*, HRESULT)
  end

  IEnumDebugExpressionContexts_GUID = "51973c40-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IEnumDebugExpressionContexts = LibC::GUID.new(0x51973c40_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IEnumDebugExpressionContexts
    lpVtbl : IEnumDebugExpressionContextsVTbl*
  end

  struct IProvideExpressionContextsVTbl
    query_interface : Proc(IProvideExpressionContexts*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProvideExpressionContexts*, UInt32)
    release : Proc(IProvideExpressionContexts*, UInt32)
    enum_expression_contexts : Proc(IProvideExpressionContexts*, IEnumDebugExpressionContexts*, HRESULT)
  end

  IProvideExpressionContexts_GUID = "51973c41-cb0c-11d0-b5c9-00a0244a0e7a"
  IID_IProvideExpressionContexts = LibC::GUID.new(0x51973c41_u32, 0xcb0c_u16, 0x11d0_u16, StaticArray[0xb5_u8, 0xc9_u8, 0x0_u8, 0xa0_u8, 0x24_u8, 0x4a_u8, 0xe_u8, 0x7a_u8])
  struct IProvideExpressionContexts
    lpVtbl : IProvideExpressionContextsVTbl*
  end

  struct IActiveScriptProfilerControlVTbl
    query_interface : Proc(IActiveScriptProfilerControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerControl*, UInt32)
    release : Proc(IActiveScriptProfilerControl*, UInt32)
    start_profiling : Proc(IActiveScriptProfilerControl*, Guid*, UInt32, UInt32, HRESULT)
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl*, UInt32, HRESULT)
    stop_profiling : Proc(IActiveScriptProfilerControl*, HRESULT, HRESULT)
  end

  IActiveScriptProfilerControl_GUID = "784b5ff0-69b0-47d1-a7dc-2518f4230e90"
  IID_IActiveScriptProfilerControl = LibC::GUID.new(0x784b5ff0_u32, 0x69b0_u16, 0x47d1_u16, StaticArray[0xa7_u8, 0xdc_u8, 0x25_u8, 0x18_u8, 0xf4_u8, 0x23_u8, 0xe_u8, 0x90_u8])
  struct IActiveScriptProfilerControl
    lpVtbl : IActiveScriptProfilerControlVTbl*
  end

  struct IActiveScriptProfilerControl2VTbl
    query_interface : Proc(IActiveScriptProfilerControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerControl2*, UInt32)
    release : Proc(IActiveScriptProfilerControl2*, UInt32)
    start_profiling : Proc(IActiveScriptProfilerControl2*, Guid*, UInt32, UInt32, HRESULT)
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl2*, UInt32, HRESULT)
    stop_profiling : Proc(IActiveScriptProfilerControl2*, HRESULT, HRESULT)
    complete_profiler_start : Proc(IActiveScriptProfilerControl2*, HRESULT)
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl2*, HRESULT)
  end

  IActiveScriptProfilerControl2_GUID = "47810165-498f-40be-94f1-653557e9e7da"
  IID_IActiveScriptProfilerControl2 = LibC::GUID.new(0x47810165_u32, 0x498f_u16, 0x40be_u16, StaticArray[0x94_u8, 0xf1_u8, 0x65_u8, 0x35_u8, 0x57_u8, 0xe9_u8, 0xe7_u8, 0xda_u8])
  struct IActiveScriptProfilerControl2
    lpVtbl : IActiveScriptProfilerControl2VTbl*
  end

  struct IActiveScriptProfilerHeapEnumVTbl
    query_interface : Proc(IActiveScriptProfilerHeapEnum*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerHeapEnum*, UInt32)
    release : Proc(IActiveScriptProfilerHeapEnum*, UInt32)
    next : Proc(IActiveScriptProfilerHeapEnum*, UInt32, PROFILER_HEAP_OBJECT**, UInt32*, HRESULT)
    get_optional_info : Proc(IActiveScriptProfilerHeapEnum*, PROFILER_HEAP_OBJECT*, UInt32, PROFILER_HEAP_OBJECT_OPTIONAL_INFO*, HRESULT)
    free_object_and_optional_info : Proc(IActiveScriptProfilerHeapEnum*, UInt32, PROFILER_HEAP_OBJECT**, HRESULT)
    get_name_id_map : Proc(IActiveScriptProfilerHeapEnum*, LibC::LPWSTR***, UInt32*, HRESULT)
  end

  IActiveScriptProfilerHeapEnum_GUID = "32e4694e-0d37-419b-b93d-fa20ded6e8ea"
  IID_IActiveScriptProfilerHeapEnum = LibC::GUID.new(0x32e4694e_u32, 0xd37_u16, 0x419b_u16, StaticArray[0xb9_u8, 0x3d_u8, 0xfa_u8, 0x20_u8, 0xde_u8, 0xd6_u8, 0xe8_u8, 0xea_u8])
  struct IActiveScriptProfilerHeapEnum
    lpVtbl : IActiveScriptProfilerHeapEnumVTbl*
  end

  struct IActiveScriptProfilerControl3VTbl
    query_interface : Proc(IActiveScriptProfilerControl3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerControl3*, UInt32)
    release : Proc(IActiveScriptProfilerControl3*, UInt32)
    start_profiling : Proc(IActiveScriptProfilerControl3*, Guid*, UInt32, UInt32, HRESULT)
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl3*, UInt32, HRESULT)
    stop_profiling : Proc(IActiveScriptProfilerControl3*, HRESULT, HRESULT)
    complete_profiler_start : Proc(IActiveScriptProfilerControl3*, HRESULT)
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl3*, HRESULT)
    enum_heap : Proc(IActiveScriptProfilerControl3*, IActiveScriptProfilerHeapEnum*, HRESULT)
  end

  IActiveScriptProfilerControl3_GUID = "0b403015-f381-4023-a5d0-6fed076de716"
  IID_IActiveScriptProfilerControl3 = LibC::GUID.new(0xb403015_u32, 0xf381_u16, 0x4023_u16, StaticArray[0xa5_u8, 0xd0_u8, 0x6f_u8, 0xed_u8, 0x7_u8, 0x6d_u8, 0xe7_u8, 0x16_u8])
  struct IActiveScriptProfilerControl3
    lpVtbl : IActiveScriptProfilerControl3VTbl*
  end

  struct IActiveScriptProfilerControl4VTbl
    query_interface : Proc(IActiveScriptProfilerControl4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerControl4*, UInt32)
    release : Proc(IActiveScriptProfilerControl4*, UInt32)
    start_profiling : Proc(IActiveScriptProfilerControl4*, Guid*, UInt32, UInt32, HRESULT)
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl4*, UInt32, HRESULT)
    stop_profiling : Proc(IActiveScriptProfilerControl4*, HRESULT, HRESULT)
    complete_profiler_start : Proc(IActiveScriptProfilerControl4*, HRESULT)
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl4*, HRESULT)
    enum_heap : Proc(IActiveScriptProfilerControl4*, IActiveScriptProfilerHeapEnum*, HRESULT)
    summarize_heap : Proc(IActiveScriptProfilerControl4*, PROFILER_HEAP_SUMMARY*, HRESULT)
  end

  IActiveScriptProfilerControl4_GUID = "160f94fd-9dbc-40d4-9eac-2b71db3132f4"
  IID_IActiveScriptProfilerControl4 = LibC::GUID.new(0x160f94fd_u32, 0x9dbc_u16, 0x40d4_u16, StaticArray[0x9e_u8, 0xac_u8, 0x2b_u8, 0x71_u8, 0xdb_u8, 0x31_u8, 0x32_u8, 0xf4_u8])
  struct IActiveScriptProfilerControl4
    lpVtbl : IActiveScriptProfilerControl4VTbl*
  end

  struct IActiveScriptProfilerControl5VTbl
    query_interface : Proc(IActiveScriptProfilerControl5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerControl5*, UInt32)
    release : Proc(IActiveScriptProfilerControl5*, UInt32)
    start_profiling : Proc(IActiveScriptProfilerControl5*, Guid*, UInt32, UInt32, HRESULT)
    set_profiler_event_mask : Proc(IActiveScriptProfilerControl5*, UInt32, HRESULT)
    stop_profiling : Proc(IActiveScriptProfilerControl5*, HRESULT, HRESULT)
    complete_profiler_start : Proc(IActiveScriptProfilerControl5*, HRESULT)
    prepare_profiler_stop : Proc(IActiveScriptProfilerControl5*, HRESULT)
    enum_heap : Proc(IActiveScriptProfilerControl5*, IActiveScriptProfilerHeapEnum*, HRESULT)
    summarize_heap : Proc(IActiveScriptProfilerControl5*, PROFILER_HEAP_SUMMARY*, HRESULT)
    enum_heap2 : Proc(IActiveScriptProfilerControl5*, PROFILER_HEAP_ENUM_FLAGS, IActiveScriptProfilerHeapEnum*, HRESULT)
  end

  IActiveScriptProfilerControl5_GUID = "1c01a2d1-8f0f-46a5-9720-0d7ed2c62f0a"
  IID_IActiveScriptProfilerControl5 = LibC::GUID.new(0x1c01a2d1_u32, 0x8f0f_u16, 0x46a5_u16, StaticArray[0x97_u8, 0x20_u8, 0xd_u8, 0x7e_u8, 0xd2_u8, 0xc6_u8, 0x2f_u8, 0xa_u8])
  struct IActiveScriptProfilerControl5
    lpVtbl : IActiveScriptProfilerControl5VTbl*
  end

  struct IActiveScriptProfilerCallbackVTbl
    query_interface : Proc(IActiveScriptProfilerCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerCallback*, UInt32)
    release : Proc(IActiveScriptProfilerCallback*, UInt32)
    initialize : Proc(IActiveScriptProfilerCallback*, UInt32, HRESULT)
    shutdown : Proc(IActiveScriptProfilerCallback*, HRESULT, HRESULT)
    script_compiled : Proc(IActiveScriptProfilerCallback*, Int32, PROFILER_SCRIPT_TYPE, IUnknown, HRESULT)
    function_compiled : Proc(IActiveScriptProfilerCallback*, Int32, Int32, LibC::LPWSTR, LibC::LPWSTR, IUnknown, HRESULT)
    on_function_enter : Proc(IActiveScriptProfilerCallback*, Int32, Int32, HRESULT)
    on_function_exit : Proc(IActiveScriptProfilerCallback*, Int32, Int32, HRESULT)
  end

  IActiveScriptProfilerCallback_GUID = "740eca23-7d9d-42e5-ba9d-f8b24b1c7a9b"
  IID_IActiveScriptProfilerCallback = LibC::GUID.new(0x740eca23_u32, 0x7d9d_u16, 0x42e5_u16, StaticArray[0xba_u8, 0x9d_u8, 0xf8_u8, 0xb2_u8, 0x4b_u8, 0x1c_u8, 0x7a_u8, 0x9b_u8])
  struct IActiveScriptProfilerCallback
    lpVtbl : IActiveScriptProfilerCallbackVTbl*
  end

  struct IActiveScriptProfilerCallback2VTbl
    query_interface : Proc(IActiveScriptProfilerCallback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerCallback2*, UInt32)
    release : Proc(IActiveScriptProfilerCallback2*, UInt32)
    initialize : Proc(IActiveScriptProfilerCallback2*, UInt32, HRESULT)
    shutdown : Proc(IActiveScriptProfilerCallback2*, HRESULT, HRESULT)
    script_compiled : Proc(IActiveScriptProfilerCallback2*, Int32, PROFILER_SCRIPT_TYPE, IUnknown, HRESULT)
    function_compiled : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, LibC::LPWSTR, LibC::LPWSTR, IUnknown, HRESULT)
    on_function_enter : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, HRESULT)
    on_function_exit : Proc(IActiveScriptProfilerCallback2*, Int32, Int32, HRESULT)
    on_function_enter_by_name : Proc(IActiveScriptProfilerCallback2*, LibC::LPWSTR, PROFILER_SCRIPT_TYPE, HRESULT)
    on_function_exit_by_name : Proc(IActiveScriptProfilerCallback2*, LibC::LPWSTR, PROFILER_SCRIPT_TYPE, HRESULT)
  end

  IActiveScriptProfilerCallback2_GUID = "31b7f8ad-a637-409c-b22f-040995b6103d"
  IID_IActiveScriptProfilerCallback2 = LibC::GUID.new(0x31b7f8ad_u32, 0xa637_u16, 0x409c_u16, StaticArray[0xb2_u8, 0x2f_u8, 0x4_u8, 0x9_u8, 0x95_u8, 0xb6_u8, 0x10_u8, 0x3d_u8])
  struct IActiveScriptProfilerCallback2
    lpVtbl : IActiveScriptProfilerCallback2VTbl*
  end

  struct IActiveScriptProfilerCallback3VTbl
    query_interface : Proc(IActiveScriptProfilerCallback3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptProfilerCallback3*, UInt32)
    release : Proc(IActiveScriptProfilerCallback3*, UInt32)
    initialize : Proc(IActiveScriptProfilerCallback3*, UInt32, HRESULT)
    shutdown : Proc(IActiveScriptProfilerCallback3*, HRESULT, HRESULT)
    script_compiled : Proc(IActiveScriptProfilerCallback3*, Int32, PROFILER_SCRIPT_TYPE, IUnknown, HRESULT)
    function_compiled : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, LibC::LPWSTR, LibC::LPWSTR, IUnknown, HRESULT)
    on_function_enter : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, HRESULT)
    on_function_exit : Proc(IActiveScriptProfilerCallback3*, Int32, Int32, HRESULT)
    on_function_enter_by_name : Proc(IActiveScriptProfilerCallback3*, LibC::LPWSTR, PROFILER_SCRIPT_TYPE, HRESULT)
    on_function_exit_by_name : Proc(IActiveScriptProfilerCallback3*, LibC::LPWSTR, PROFILER_SCRIPT_TYPE, HRESULT)
    set_web_worker_id : Proc(IActiveScriptProfilerCallback3*, UInt32, HRESULT)
  end

  IActiveScriptProfilerCallback3_GUID = "6ac5ad25-2037-4687-91df-b59979d93d73"
  IID_IActiveScriptProfilerCallback3 = LibC::GUID.new(0x6ac5ad25_u32, 0x2037_u16, 0x4687_u16, StaticArray[0x91_u8, 0xdf_u8, 0xb5_u8, 0x99_u8, 0x79_u8, 0xd9_u8, 0x3d_u8, 0x73_u8])
  struct IActiveScriptProfilerCallback3
    lpVtbl : IActiveScriptProfilerCallback3VTbl*
  end

  struct IScriptNodeVTbl
    query_interface : Proc(IScriptNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptNode*, UInt32)
    release : Proc(IScriptNode*, UInt32)
    alive : Proc(IScriptNode*, HRESULT)
    delete : Proc(IScriptNode*, HRESULT)
    get_parent : Proc(IScriptNode*, IScriptNode*, HRESULT)
    get_index_in_parent : Proc(IScriptNode*, UInt32*, HRESULT)
    get_cookie : Proc(IScriptNode*, UInt32*, HRESULT)
    get_number_of_children : Proc(IScriptNode*, UInt32*, HRESULT)
    get_child : Proc(IScriptNode*, UInt32, IScriptNode*, HRESULT)
    get_language : Proc(IScriptNode*, UInt8**, HRESULT)
    create_child_entry : Proc(IScriptNode*, UInt32, UInt32, LibC::LPWSTR, IScriptEntry*, HRESULT)
    create_child_handler : Proc(IScriptNode*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, LibC::LPWSTR, LibC::LPWSTR, ITypeInfo, UInt32, UInt32, UInt32, IScriptEntry*, HRESULT)
  end

  IScriptNode_GUID = "0aee2a94-bcbb-11d0-8c72-00c04fc2b085"
  IID_IScriptNode = LibC::GUID.new(0xaee2a94_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
  struct IScriptNode
    lpVtbl : IScriptNodeVTbl*
  end

  struct IScriptEntryVTbl
    query_interface : Proc(IScriptEntry*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptEntry*, UInt32)
    release : Proc(IScriptEntry*, UInt32)
    alive : Proc(IScriptEntry*, HRESULT)
    delete : Proc(IScriptEntry*, HRESULT)
    get_parent : Proc(IScriptEntry*, IScriptNode*, HRESULT)
    get_index_in_parent : Proc(IScriptEntry*, UInt32*, HRESULT)
    get_cookie : Proc(IScriptEntry*, UInt32*, HRESULT)
    get_number_of_children : Proc(IScriptEntry*, UInt32*, HRESULT)
    get_child : Proc(IScriptEntry*, UInt32, IScriptNode*, HRESULT)
    get_language : Proc(IScriptEntry*, UInt8**, HRESULT)
    create_child_entry : Proc(IScriptEntry*, UInt32, UInt32, LibC::LPWSTR, IScriptEntry*, HRESULT)
    create_child_handler : Proc(IScriptEntry*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, LibC::LPWSTR, LibC::LPWSTR, ITypeInfo, UInt32, UInt32, UInt32, IScriptEntry*, HRESULT)
    get_text : Proc(IScriptEntry*, UInt8**, HRESULT)
    set_text : Proc(IScriptEntry*, LibC::LPWSTR, HRESULT)
    get_body : Proc(IScriptEntry*, UInt8**, HRESULT)
    set_body : Proc(IScriptEntry*, LibC::LPWSTR, HRESULT)
    get_name : Proc(IScriptEntry*, UInt8**, HRESULT)
    set_name : Proc(IScriptEntry*, LibC::LPWSTR, HRESULT)
    get_item_name : Proc(IScriptEntry*, UInt8**, HRESULT)
    set_item_name : Proc(IScriptEntry*, LibC::LPWSTR, HRESULT)
    get_signature : Proc(IScriptEntry*, ITypeInfo*, UInt32*, HRESULT)
    set_signature : Proc(IScriptEntry*, ITypeInfo, UInt32, HRESULT)
    get_range : Proc(IScriptEntry*, UInt32*, UInt32*, HRESULT)
  end

  IScriptEntry_GUID = "0aee2a95-bcbb-11d0-8c72-00c04fc2b085"
  IID_IScriptEntry = LibC::GUID.new(0xaee2a95_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
  struct IScriptEntry
    lpVtbl : IScriptEntryVTbl*
  end

  struct IScriptScriptletVTbl
    query_interface : Proc(IScriptScriptlet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptScriptlet*, UInt32)
    release : Proc(IScriptScriptlet*, UInt32)
    alive : Proc(IScriptScriptlet*, HRESULT)
    delete : Proc(IScriptScriptlet*, HRESULT)
    get_parent : Proc(IScriptScriptlet*, IScriptNode*, HRESULT)
    get_index_in_parent : Proc(IScriptScriptlet*, UInt32*, HRESULT)
    get_cookie : Proc(IScriptScriptlet*, UInt32*, HRESULT)
    get_number_of_children : Proc(IScriptScriptlet*, UInt32*, HRESULT)
    get_child : Proc(IScriptScriptlet*, UInt32, IScriptNode*, HRESULT)
    get_language : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    create_child_entry : Proc(IScriptScriptlet*, UInt32, UInt32, LibC::LPWSTR, IScriptEntry*, HRESULT)
    create_child_handler : Proc(IScriptScriptlet*, LibC::LPWSTR, LibC::LPWSTR*, UInt32, LibC::LPWSTR, LibC::LPWSTR, ITypeInfo, UInt32, UInt32, UInt32, IScriptEntry*, HRESULT)
    get_text : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_text : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_body : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_body : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_name : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_name : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_item_name : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_item_name : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_signature : Proc(IScriptScriptlet*, ITypeInfo*, UInt32*, HRESULT)
    set_signature : Proc(IScriptScriptlet*, ITypeInfo, UInt32, HRESULT)
    get_range : Proc(IScriptScriptlet*, UInt32*, UInt32*, HRESULT)
    get_sub_item_name : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_sub_item_name : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_event_name : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_event_name : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
    get_simple_event_name : Proc(IScriptScriptlet*, UInt8**, HRESULT)
    set_simple_event_name : Proc(IScriptScriptlet*, LibC::LPWSTR, HRESULT)
  end

  IScriptScriptlet_GUID = "0aee2a96-bcbb-11d0-8c72-00c04fc2b085"
  IID_IScriptScriptlet = LibC::GUID.new(0xaee2a96_u32, 0xbcbb_u16, 0x11d0_u16, StaticArray[0x8c_u8, 0x72_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0xb0_u8, 0x85_u8])
  struct IScriptScriptlet
    lpVtbl : IScriptScriptletVTbl*
  end

  struct IActiveScriptAuthorVTbl
    query_interface : Proc(IActiveScriptAuthor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptAuthor*, UInt32)
    release : Proc(IActiveScriptAuthor*, UInt32)
    add_named_item : Proc(IActiveScriptAuthor*, LibC::LPWSTR, UInt32, IDispatch, HRESULT)
    add_scriptlet : Proc(IActiveScriptAuthor*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    parse_script_text : Proc(IActiveScriptAuthor*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
    get_script_text_attributes : Proc(IActiveScriptAuthor*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    get_scriptlet_text_attributes : Proc(IActiveScriptAuthor*, Char*, UInt32, LibC::LPWSTR, UInt32, UInt16*, HRESULT)
    get_root : Proc(IActiveScriptAuthor*, IScriptNode*, HRESULT)
    get_language_flags : Proc(IActiveScriptAuthor*, UInt32*, HRESULT)
    get_event_handler : Proc(IActiveScriptAuthor*, IDispatch, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IScriptEntry*, HRESULT)
    remove_named_item : Proc(IActiveScriptAuthor*, LibC::LPWSTR, HRESULT)
    add_type_lib : Proc(IActiveScriptAuthor*, Guid*, UInt32, UInt32, UInt32, HRESULT)
    remove_type_lib : Proc(IActiveScriptAuthor*, Guid*, UInt32, UInt32, HRESULT)
    get_chars : Proc(IActiveScriptAuthor*, UInt32, UInt8**, HRESULT)
    get_info_from_context : Proc(IActiveScriptAuthor*, LibC::LPWSTR, UInt32, UInt32, UInt32, UInt32*, UInt32*, UInt32*, Int32*, Int32*, IUnknown*, HRESULT)
    is_commit_char : Proc(IActiveScriptAuthor*, Char, LibC::BOOL*, HRESULT)
  end

  IActiveScriptAuthor_GUID = "9c109da0-7006-11d1-b36c-00a0c911e8b2"
  IID_IActiveScriptAuthor = LibC::GUID.new(0x9c109da0_u32, 0x7006_u16, 0x11d1_u16, StaticArray[0xb3_u8, 0x6c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xe8_u8, 0xb2_u8])
  struct IActiveScriptAuthor
    lpVtbl : IActiveScriptAuthorVTbl*
  end

  struct IActiveScriptAuthorProcedureVTbl
    query_interface : Proc(IActiveScriptAuthorProcedure*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptAuthorProcedure*, UInt32)
    release : Proc(IActiveScriptAuthorProcedure*, UInt32)
    parse_procedure_text : Proc(IActiveScriptAuthorProcedure*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, IDispatch, HRESULT)
  end

  IActiveScriptAuthorProcedure_GUID = "7e2d4b70-bd9a-11d0-9336-00a0c90dcaa9"
  IID_IActiveScriptAuthorProcedure = LibC::GUID.new(0x7e2d4b70_u32, 0xbd9a_u16, 0x11d0_u16, StaticArray[0x93_u8, 0x36_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd_u8, 0xca_u8, 0xa9_u8])
  struct IActiveScriptAuthorProcedure
    lpVtbl : IActiveScriptAuthorProcedureVTbl*
  end

  struct IDebugApplicationNode100VTbl
    query_interface : Proc(IDebugApplicationNode100*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationNode100*, UInt32)
    release : Proc(IDebugApplicationNode100*, UInt32)
    set_filter_for_event_sink : Proc(IDebugApplicationNode100*, UInt32, APPLICATION_NODE_EVENT_FILTER, HRESULT)
    get_excluded_documents : Proc(IDebugApplicationNode100*, APPLICATION_NODE_EVENT_FILTER, TEXT_DOCUMENT_ARRAY*, HRESULT)
    query_is_child_node : Proc(IDebugApplicationNode100*, IDebugDocument, HRESULT)
  end

  IDebugApplicationNode100_GUID = "90a7734e-841b-4f77-9384-a2891e76e7e2"
  IID_IDebugApplicationNode100 = LibC::GUID.new(0x90a7734e_u32, 0x841b_u16, 0x4f77_u16, StaticArray[0x93_u8, 0x84_u8, 0xa2_u8, 0x89_u8, 0x1e_u8, 0x76_u8, 0xe7_u8, 0xe2_u8])
  struct IDebugApplicationNode100
    lpVtbl : IDebugApplicationNode100VTbl*
  end

  struct IWebAppDiagnosticsSetupVTbl
    query_interface : Proc(IWebAppDiagnosticsSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebAppDiagnosticsSetup*, UInt32)
    release : Proc(IWebAppDiagnosticsSetup*, UInt32)
    diagnostics_supported : Proc(IWebAppDiagnosticsSetup*, Int16*, HRESULT)
    create_object_with_site_at_web_app : Proc(IWebAppDiagnosticsSetup*, Guid*, UInt32, Guid*, LibC::UINT_PTR, HRESULT)
  end

  IWebAppDiagnosticsSetup_GUID = "379bfbe1-c6c9-432a-93e1-6d17656c538c"
  IID_IWebAppDiagnosticsSetup = LibC::GUID.new(0x379bfbe1_u32, 0xc6c9_u16, 0x432a_u16, StaticArray[0x93_u8, 0xe1_u8, 0x6d_u8, 0x17_u8, 0x65_u8, 0x6c_u8, 0x53_u8, 0x8c_u8])
  struct IWebAppDiagnosticsSetup
    lpVtbl : IWebAppDiagnosticsSetupVTbl*
  end

  struct IRemoteDebugApplication110VTbl
    query_interface : Proc(IRemoteDebugApplication110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugApplication110*, UInt32)
    release : Proc(IRemoteDebugApplication110*, UInt32)
    set_debugger_options : Proc(IRemoteDebugApplication110*, SCRIPT_DEBUGGER_OPTIONS, SCRIPT_DEBUGGER_OPTIONS, HRESULT)
    get_current_debugger_options : Proc(IRemoteDebugApplication110*, SCRIPT_DEBUGGER_OPTIONS*, HRESULT)
    get_main_thread : Proc(IRemoteDebugApplication110*, IRemoteDebugApplicationThread*, HRESULT)
  end

  IRemoteDebugApplication110_GUID = "d5fe005b-2836-485e-b1f9-89d91aa24fd4"
  IID_IRemoteDebugApplication110 = LibC::GUID.new(0xd5fe005b_u32, 0x2836_u16, 0x485e_u16, StaticArray[0xb1_u8, 0xf9_u8, 0x89_u8, 0xd9_u8, 0x1a_u8, 0xa2_u8, 0x4f_u8, 0xd4_u8])
  struct IRemoteDebugApplication110
    lpVtbl : IRemoteDebugApplication110VTbl*
  end

  struct IDebugApplication11032VTbl
    query_interface : Proc(IDebugApplication11032*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplication11032*, UInt32)
    release : Proc(IDebugApplication11032*, UInt32)
    set_debugger_options : Proc(IDebugApplication11032*, SCRIPT_DEBUGGER_OPTIONS, SCRIPT_DEBUGGER_OPTIONS, HRESULT)
    get_current_debugger_options : Proc(IDebugApplication11032*, SCRIPT_DEBUGGER_OPTIONS*, HRESULT)
    get_main_thread : Proc(IDebugApplication11032*, IRemoteDebugApplicationThread*, HRESULT)
    synchronous_call_in_main_thread : Proc(IDebugApplication11032*, IDebugThreadCall32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
    asynchronous_call_in_main_thread : Proc(IDebugApplication11032*, IDebugThreadCall32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
    callable_wait_for_handles : Proc(IDebugApplication11032*, UInt32, LibC::HANDLE*, UInt32*, HRESULT)
  end

  IDebugApplication11032_GUID = "bdb3b5de-89f2-4e11-84a5-97445f941c7d"
  IID_IDebugApplication11032 = LibC::GUID.new(0xbdb3b5de_u32, 0x89f2_u16, 0x4e11_u16, StaticArray[0x84_u8, 0xa5_u8, 0x97_u8, 0x44_u8, 0x5f_u8, 0x94_u8, 0x1c_u8, 0x7d_u8])
  struct IDebugApplication11032
    lpVtbl : IDebugApplication11032VTbl*
  end

  struct IDebugApplication11064VTbl
    query_interface : Proc(IDebugApplication11064*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplication11064*, UInt32)
    release : Proc(IDebugApplication11064*, UInt32)
    set_debugger_options : Proc(IDebugApplication11064*, SCRIPT_DEBUGGER_OPTIONS, SCRIPT_DEBUGGER_OPTIONS, HRESULT)
    get_current_debugger_options : Proc(IDebugApplication11064*, SCRIPT_DEBUGGER_OPTIONS*, HRESULT)
    get_main_thread : Proc(IDebugApplication11064*, IRemoteDebugApplicationThread*, HRESULT)
    synchronous_call_in_main_thread : Proc(IDebugApplication11064*, IDebugThreadCall64, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
    asynchronous_call_in_main_thread : Proc(IDebugApplication11064*, IDebugThreadCall64, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
    callable_wait_for_handles : Proc(IDebugApplication11064*, UInt32, LibC::HANDLE*, UInt32*, HRESULT)
  end

  IDebugApplication11064_GUID = "2039d958-4eeb-496a-87bb-2e5201eadeef"
  IID_IDebugApplication11064 = LibC::GUID.new(0x2039d958_u32, 0x4eeb_u16, 0x496a_u16, StaticArray[0x87_u8, 0xbb_u8, 0x2e_u8, 0x52_u8, 0x1_u8, 0xea_u8, 0xde_u8, 0xef_u8])
  struct IDebugApplication11064
    lpVtbl : IDebugApplication11064VTbl*
  end

  struct IWebAppDiagnosticsObjectInitializationVTbl
    query_interface : Proc(IWebAppDiagnosticsObjectInitialization*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebAppDiagnosticsObjectInitialization*, UInt32)
    release : Proc(IWebAppDiagnosticsObjectInitialization*, UInt32)
    initialize : Proc(IWebAppDiagnosticsObjectInitialization*, HANDLE_PTR, IUnknown, HRESULT)
  end

  IWebAppDiagnosticsObjectInitialization_GUID = "16ff3a42-a5f5-432b-b625-8e8e16f57e15"
  IID_IWebAppDiagnosticsObjectInitialization = LibC::GUID.new(0x16ff3a42_u32, 0xa5f5_u16, 0x432b_u16, StaticArray[0xb6_u8, 0x25_u8, 0x8e_u8, 0x8e_u8, 0x16_u8, 0xf5_u8, 0x7e_u8, 0x15_u8])
  struct IWebAppDiagnosticsObjectInitialization
    lpVtbl : IWebAppDiagnosticsObjectInitializationVTbl*
  end

  struct IActiveScriptWinRTErrorDebugVTbl
    query_interface : Proc(IActiveScriptWinRTErrorDebug*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptWinRTErrorDebug*, UInt32)
    release : Proc(IActiveScriptWinRTErrorDebug*, UInt32)
    get_exception_info : Proc(IActiveScriptWinRTErrorDebug*, EXCEPINFO*, HRESULT)
    get_source_position : Proc(IActiveScriptWinRTErrorDebug*, UInt32*, UInt32*, Int32*, HRESULT)
    get_source_line_text : Proc(IActiveScriptWinRTErrorDebug*, UInt8**, HRESULT)
    get_restricted_error_string : Proc(IActiveScriptWinRTErrorDebug*, UInt8**, HRESULT)
    get_restricted_error_reference : Proc(IActiveScriptWinRTErrorDebug*, UInt8**, HRESULT)
    get_capability_sid : Proc(IActiveScriptWinRTErrorDebug*, UInt8**, HRESULT)
  end

  IActiveScriptWinRTErrorDebug_GUID = "73a3f82a-0fe9-4b33-ba3b-fe095f697e0a"
  IID_IActiveScriptWinRTErrorDebug = LibC::GUID.new(0x73a3f82a_u32, 0xfe9_u16, 0x4b33_u16, StaticArray[0xba_u8, 0x3b_u8, 0xfe_u8, 0x9_u8, 0x5f_u8, 0x69_u8, 0x7e_u8, 0xa_u8])
  struct IActiveScriptWinRTErrorDebug
    lpVtbl : IActiveScriptWinRTErrorDebugVTbl*
  end

  struct IActiveScriptErrorDebug110VTbl
    query_interface : Proc(IActiveScriptErrorDebug110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveScriptErrorDebug110*, UInt32)
    release : Proc(IActiveScriptErrorDebug110*, UInt32)
    get_exception_thrown_kind : Proc(IActiveScriptErrorDebug110*, SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND*, HRESULT)
  end

  IActiveScriptErrorDebug110_GUID = "516e42b6-89a8-4530-937b-5f0708431442"
  IID_IActiveScriptErrorDebug110 = LibC::GUID.new(0x516e42b6_u32, 0x89a8_u16, 0x4530_u16, StaticArray[0x93_u8, 0x7b_u8, 0x5f_u8, 0x7_u8, 0x8_u8, 0x43_u8, 0x14_u8, 0x42_u8])
  struct IActiveScriptErrorDebug110
    lpVtbl : IActiveScriptErrorDebug110VTbl*
  end

  struct IDebugApplicationThreadEvents110VTbl
    query_interface : Proc(IDebugApplicationThreadEvents110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationThreadEvents110*, UInt32)
    release : Proc(IDebugApplicationThreadEvents110*, UInt32)
    on_suspend_for_break_point : Proc(IDebugApplicationThreadEvents110*, HRESULT)
    on_resume_from_break_point : Proc(IDebugApplicationThreadEvents110*, HRESULT)
    on_thread_request_complete : Proc(IDebugApplicationThreadEvents110*, HRESULT)
    on_begin_thread_request : Proc(IDebugApplicationThreadEvents110*, HRESULT)
  end

  IDebugApplicationThreadEvents110_GUID = "84e5e468-d5da-48a8-83f4-40366429007b"
  IID_IDebugApplicationThreadEvents110 = LibC::GUID.new(0x84e5e468_u32, 0xd5da_u16, 0x48a8_u16, StaticArray[0x83_u8, 0xf4_u8, 0x40_u8, 0x36_u8, 0x64_u8, 0x29_u8, 0x0_u8, 0x7b_u8])
  struct IDebugApplicationThreadEvents110
    lpVtbl : IDebugApplicationThreadEvents110VTbl*
  end

  struct IDebugApplicationThread11032VTbl
    query_interface : Proc(IDebugApplicationThread11032*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationThread11032*, UInt32)
    release : Proc(IDebugApplicationThread11032*, UInt32)
    get_active_thread_request_count : Proc(IDebugApplicationThread11032*, UInt32*, HRESULT)
    is_suspended_for_break_point : Proc(IDebugApplicationThread11032*, LibC::BOOL*, HRESULT)
    is_thread_callable : Proc(IDebugApplicationThread11032*, LibC::BOOL*, HRESULT)
    asynchronous_call_into_thread : Proc(IDebugApplicationThread11032*, IDebugThreadCall32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
  end

  IDebugApplicationThread11032_GUID = "2194ac5c-6561-404a-a2e9-f57d72de3702"
  IID_IDebugApplicationThread11032 = LibC::GUID.new(0x2194ac5c_u32, 0x6561_u16, 0x404a_u16, StaticArray[0xa2_u8, 0xe9_u8, 0xf5_u8, 0x7d_u8, 0x72_u8, 0xde_u8, 0x37_u8, 0x2_u8])
  struct IDebugApplicationThread11032
    lpVtbl : IDebugApplicationThread11032VTbl*
  end

  struct IDebugApplicationThread11064VTbl
    query_interface : Proc(IDebugApplicationThread11064*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugApplicationThread11064*, UInt32)
    release : Proc(IDebugApplicationThread11064*, UInt32)
    get_active_thread_request_count : Proc(IDebugApplicationThread11064*, UInt32*, HRESULT)
    is_suspended_for_break_point : Proc(IDebugApplicationThread11064*, LibC::BOOL*, HRESULT)
    is_thread_callable : Proc(IDebugApplicationThread11064*, LibC::BOOL*, HRESULT)
    asynchronous_call_into_thread : Proc(IDebugApplicationThread11064*, IDebugThreadCall64, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, HRESULT)
  end

  IDebugApplicationThread11064_GUID = "420aa4cc-efd8-4dac-983b-47127826917d"
  IID_IDebugApplicationThread11064 = LibC::GUID.new(0x420aa4cc_u32, 0xefd8_u16, 0x4dac_u16, StaticArray[0x98_u8, 0x3b_u8, 0x47_u8, 0x12_u8, 0x78_u8, 0x26_u8, 0x91_u8, 0x7d_u8])
  struct IDebugApplicationThread11064
    lpVtbl : IDebugApplicationThread11064VTbl*
  end

  struct IRemoteDebugCriticalErrorEvent110VTbl
    query_interface : Proc(IRemoteDebugCriticalErrorEvent110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugCriticalErrorEvent110*, UInt32)
    release : Proc(IRemoteDebugCriticalErrorEvent110*, UInt32)
    get_error_info : Proc(IRemoteDebugCriticalErrorEvent110*, UInt8**, Int32*, UInt8**, IDebugDocumentContext*, HRESULT)
  end

  IRemoteDebugCriticalErrorEvent110_GUID = "2f69c611-6b14-47e8-9260-4bb7c52f504b"
  IID_IRemoteDebugCriticalErrorEvent110 = LibC::GUID.new(0x2f69c611_u32, 0x6b14_u16, 0x47e8_u16, StaticArray[0x92_u8, 0x60_u8, 0x4b_u8, 0xb7_u8, 0xc5_u8, 0x2f_u8, 0x50_u8, 0x4b_u8])
  struct IRemoteDebugCriticalErrorEvent110
    lpVtbl : IRemoteDebugCriticalErrorEvent110VTbl*
  end

  struct IScriptInvocationContextVTbl
    query_interface : Proc(IScriptInvocationContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptInvocationContext*, UInt32)
    release : Proc(IScriptInvocationContext*, UInt32)
    get_context_type : Proc(IScriptInvocationContext*, SCRIPT_INVOCATION_CONTEXT_TYPE*, HRESULT)
    get_context_description : Proc(IScriptInvocationContext*, UInt8**, HRESULT)
    get_context_object : Proc(IScriptInvocationContext*, IUnknown*, HRESULT)
  end

  IScriptInvocationContext_GUID = "5d7741b7-af7e-4a2a-85e5-c77f4d0659fb"
  IID_IScriptInvocationContext = LibC::GUID.new(0x5d7741b7_u32, 0xaf7e_u16, 0x4a2a_u16, StaticArray[0x85_u8, 0xe5_u8, 0xc7_u8, 0x7f_u8, 0x4d_u8, 0x6_u8, 0x59_u8, 0xfb_u8])
  struct IScriptInvocationContext
    lpVtbl : IScriptInvocationContextVTbl*
  end

  struct IDebugStackFrame110VTbl
    query_interface : Proc(IDebugStackFrame110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugStackFrame110*, UInt32)
    release : Proc(IDebugStackFrame110*, UInt32)
    get_code_context : Proc(IDebugStackFrame110*, IDebugCodeContext*, HRESULT)
    get_description_string : Proc(IDebugStackFrame110*, LibC::BOOL, UInt8**, HRESULT)
    get_language_string : Proc(IDebugStackFrame110*, LibC::BOOL, UInt8**, HRESULT)
    get_thread : Proc(IDebugStackFrame110*, IDebugApplicationThread*, HRESULT)
    get_debug_property : Proc(IDebugStackFrame110*, IDebugProperty*, HRESULT)
    get_stack_frame_type : Proc(IDebugStackFrame110*, DEBUG_STACKFRAME_TYPE*, HRESULT)
    get_script_invocation_context : Proc(IDebugStackFrame110*, IScriptInvocationContext*, HRESULT)
  end

  IDebugStackFrame110_GUID = "4b509611-b6ea-4b24-adcb-d0ccfd1a7e33"
  IID_IDebugStackFrame110 = LibC::GUID.new(0x4b509611_u32, 0xb6ea_u16, 0x4b24_u16, StaticArray[0xad_u8, 0xcb_u8, 0xd0_u8, 0xcc_u8, 0xfd_u8, 0x1a_u8, 0x7e_u8, 0x33_u8])
  struct IDebugStackFrame110
    lpVtbl : IDebugStackFrame110VTbl*
  end

  struct IRemoteDebugInfoEvent110VTbl
    query_interface : Proc(IRemoteDebugInfoEvent110*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRemoteDebugInfoEvent110*, UInt32)
    release : Proc(IRemoteDebugInfoEvent110*, UInt32)
    get_event_info : Proc(IRemoteDebugInfoEvent110*, DEBUG_EVENT_INFO_TYPE*, UInt8**, UInt8**, IDebugDocumentContext*, HRESULT)
  end

  IRemoteDebugInfoEvent110_GUID = "9ff56bb6-eb89-4c0f-8823-cc2a4c0b7f26"
  IID_IRemoteDebugInfoEvent110 = LibC::GUID.new(0x9ff56bb6_u32, 0xeb89_u16, 0x4c0f_u16, StaticArray[0x88_u8, 0x23_u8, 0xcc_u8, 0x2a_u8, 0x4c_u8, 0xb_u8, 0x7f_u8, 0x26_u8])
  struct IRemoteDebugInfoEvent110
    lpVtbl : IRemoteDebugInfoEvent110VTbl*
  end

  struct IJsDebugVTbl
    query_interface : Proc(IJsDebug*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebug*, UInt32)
    release : Proc(IJsDebug*, UInt32)
    open_virtual_process : Proc(IJsDebug*, UInt32, UInt64, IJsDebugDataTarget, IJsDebugProcess*, HRESULT)
  end

  IJsDebug_GUID = "be0e89da-2ac5-4c04-ac5e-59956aae3613"
  IID_IJsDebug = LibC::GUID.new(0xbe0e89da_u32, 0x2ac5_u16, 0x4c04_u16, StaticArray[0xac_u8, 0x5e_u8, 0x59_u8, 0x95_u8, 0x6a_u8, 0xae_u8, 0x36_u8, 0x13_u8])
  struct IJsDebug
    lpVtbl : IJsDebugVTbl*
  end

  struct IJsDebugProcessVTbl
    query_interface : Proc(IJsDebugProcess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugProcess*, UInt32)
    release : Proc(IJsDebugProcess*, UInt32)
    create_stack_walker : Proc(IJsDebugProcess*, UInt32, IJsDebugStackWalker*, HRESULT)
    create_break_point : Proc(IJsDebugProcess*, UInt64, UInt32, UInt32, LibC::BOOL, IJsDebugBreakPoint*, HRESULT)
    perform_async_break : Proc(IJsDebugProcess*, UInt32, HRESULT)
    get_external_step_address : Proc(IJsDebugProcess*, UInt64*, HRESULT)
  end

  IJsDebugProcess_GUID = "3d587168-6a2d-4041-bd3b-0de674502862"
  IID_IJsDebugProcess = LibC::GUID.new(0x3d587168_u32, 0x6a2d_u16, 0x4041_u16, StaticArray[0xbd_u8, 0x3b_u8, 0xd_u8, 0xe6_u8, 0x74_u8, 0x50_u8, 0x28_u8, 0x62_u8])
  struct IJsDebugProcess
    lpVtbl : IJsDebugProcessVTbl*
  end

  struct IJsDebugStackWalkerVTbl
    query_interface : Proc(IJsDebugStackWalker*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugStackWalker*, UInt32)
    release : Proc(IJsDebugStackWalker*, UInt32)
    get_next : Proc(IJsDebugStackWalker*, IJsDebugFrame*, HRESULT)
  end

  IJsDebugStackWalker_GUID = "db24b094-73c4-456c-a4ec-e90ea00bdfe3"
  IID_IJsDebugStackWalker = LibC::GUID.new(0xdb24b094_u32, 0x73c4_u16, 0x456c_u16, StaticArray[0xa4_u8, 0xec_u8, 0xe9_u8, 0xe_u8, 0xa0_u8, 0xb_u8, 0xdf_u8, 0xe3_u8])
  struct IJsDebugStackWalker
    lpVtbl : IJsDebugStackWalkerVTbl*
  end

  struct IJsDebugFrameVTbl
    query_interface : Proc(IJsDebugFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugFrame*, UInt32)
    release : Proc(IJsDebugFrame*, UInt32)
    get_stack_range : Proc(IJsDebugFrame*, UInt64*, UInt64*, HRESULT)
    get_name : Proc(IJsDebugFrame*, UInt8**, HRESULT)
    get_document_position_with_id : Proc(IJsDebugFrame*, UInt64*, UInt32*, UInt32*, HRESULT)
    get_document_position_with_name : Proc(IJsDebugFrame*, UInt8**, UInt32*, UInt32*, HRESULT)
    get_debug_property : Proc(IJsDebugFrame*, IJsDebugProperty*, HRESULT)
    get_return_address : Proc(IJsDebugFrame*, UInt64*, HRESULT)
    evaluate : Proc(IJsDebugFrame*, LibC::LPWSTR, IJsDebugProperty*, UInt8**, HRESULT)
  end

  IJsDebugFrame_GUID = "c9196637-ab9d-44b2-bad2-13b95b3f390e"
  IID_IJsDebugFrame = LibC::GUID.new(0xc9196637_u32, 0xab9d_u16, 0x44b2_u16, StaticArray[0xba_u8, 0xd2_u8, 0x13_u8, 0xb9_u8, 0x5b_u8, 0x3f_u8, 0x39_u8, 0xe_u8])
  struct IJsDebugFrame
    lpVtbl : IJsDebugFrameVTbl*
  end

  struct IJsDebugPropertyVTbl
    query_interface : Proc(IJsDebugProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugProperty*, UInt32)
    release : Proc(IJsDebugProperty*, UInt32)
    get_property_info : Proc(IJsDebugProperty*, UInt32, JsDebugPropertyInfo*, HRESULT)
    get_members : Proc(IJsDebugProperty*, JS_PROPERTY_MEMBERS, IJsEnumDebugProperty*, HRESULT)
  end

  IJsDebugProperty_GUID = "f8ffcf2b-3aa4-4320-85c3-52a312ba9633"
  IID_IJsDebugProperty = LibC::GUID.new(0xf8ffcf2b_u32, 0x3aa4_u16, 0x4320_u16, StaticArray[0x85_u8, 0xc3_u8, 0x52_u8, 0xa3_u8, 0x12_u8, 0xba_u8, 0x96_u8, 0x33_u8])
  struct IJsDebugProperty
    lpVtbl : IJsDebugPropertyVTbl*
  end

  struct IJsEnumDebugPropertyVTbl
    query_interface : Proc(IJsEnumDebugProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsEnumDebugProperty*, UInt32)
    release : Proc(IJsEnumDebugProperty*, UInt32)
    next : Proc(IJsEnumDebugProperty*, UInt32, IJsDebugProperty*, UInt32*, HRESULT)
    get_count : Proc(IJsEnumDebugProperty*, UInt32*, HRESULT)
  end

  IJsEnumDebugProperty_GUID = "4092432f-2f0f-4fe1-b638-5b74a52cdcbe"
  IID_IJsEnumDebugProperty = LibC::GUID.new(0x4092432f_u32, 0x2f0f_u16, 0x4fe1_u16, StaticArray[0xb6_u8, 0x38_u8, 0x5b_u8, 0x74_u8, 0xa5_u8, 0x2c_u8, 0xdc_u8, 0xbe_u8])
  struct IJsEnumDebugProperty
    lpVtbl : IJsEnumDebugPropertyVTbl*
  end

  struct IJsDebugBreakPointVTbl
    query_interface : Proc(IJsDebugBreakPoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugBreakPoint*, UInt32)
    release : Proc(IJsDebugBreakPoint*, UInt32)
    is_enabled : Proc(IJsDebugBreakPoint*, LibC::BOOL*, HRESULT)
    enable : Proc(IJsDebugBreakPoint*, HRESULT)
    disable : Proc(IJsDebugBreakPoint*, HRESULT)
    delete : Proc(IJsDebugBreakPoint*, HRESULT)
    get_document_position : Proc(IJsDebugBreakPoint*, UInt64*, UInt32*, UInt32*, HRESULT)
  end

  IJsDebugBreakPoint_GUID = "df6773e3-ed8d-488b-8a3e-5812577d1542"
  IID_IJsDebugBreakPoint = LibC::GUID.new(0xdf6773e3_u32, 0xed8d_u16, 0x488b_u16, StaticArray[0x8a_u8, 0x3e_u8, 0x58_u8, 0x12_u8, 0x57_u8, 0x7d_u8, 0x15_u8, 0x42_u8])
  struct IJsDebugBreakPoint
    lpVtbl : IJsDebugBreakPointVTbl*
  end

  struct IEnumJsStackFramesVTbl
    query_interface : Proc(IEnumJsStackFrames*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumJsStackFrames*, UInt32)
    release : Proc(IEnumJsStackFrames*, UInt32)
    next : Proc(IEnumJsStackFrames*, UInt32, MIDL___MIDL_itf_jscript9diag_0000_0007_0001*, UInt32*, HRESULT)
    reset : Proc(IEnumJsStackFrames*, HRESULT)
  end

  IEnumJsStackFrames_GUID = "5e7da34b-fb51-4791-abe7-cb5bdf419755"
  IID_IEnumJsStackFrames = LibC::GUID.new(0x5e7da34b_u32, 0xfb51_u16, 0x4791_u16, StaticArray[0xab_u8, 0xe7_u8, 0xcb_u8, 0x5b_u8, 0xdf_u8, 0x41_u8, 0x97_u8, 0x55_u8])
  struct IEnumJsStackFrames
    lpVtbl : IEnumJsStackFramesVTbl*
  end

  struct IJsDebugDataTargetVTbl
    query_interface : Proc(IJsDebugDataTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJsDebugDataTarget*, UInt32)
    release : Proc(IJsDebugDataTarget*, UInt32)
    read_memory : Proc(IJsDebugDataTarget*, UInt64, JsDebugReadMemoryFlags, UInt8*, UInt32, UInt32*, HRESULT)
    write_memory : Proc(IJsDebugDataTarget*, UInt64, UInt8*, UInt32, HRESULT)
    allocate_virtual_memory : Proc(IJsDebugDataTarget*, UInt64, UInt32, UInt32, UInt32, UInt64*, HRESULT)
    free_virtual_memory : Proc(IJsDebugDataTarget*, UInt64, UInt32, UInt32, HRESULT)
    get_tls_value : Proc(IJsDebugDataTarget*, UInt32, UInt32, UInt64*, HRESULT)
    read_bstr : Proc(IJsDebugDataTarget*, UInt64, UInt8**, HRESULT)
    read_null_terminated_string : Proc(IJsDebugDataTarget*, UInt64, UInt16, UInt32, UInt8**, HRESULT)
    create_stack_frame_enumerator : Proc(IJsDebugDataTarget*, UInt32, IEnumJsStackFrames*, HRESULT)
    get_thread_context : Proc(IJsDebugDataTarget*, UInt32, UInt32, UInt32, Void*, HRESULT)
  end

  IJsDebugDataTarget_GUID = "53b28977-53a1-48e5-9000-5d0dfa893931"
  IID_IJsDebugDataTarget = LibC::GUID.new(0x53b28977_u32, 0x53a1_u16, 0x48e5_u16, StaticArray[0x90_u8, 0x0_u8, 0x5d_u8, 0xd_u8, 0xfa_u8, 0x89_u8, 0x39_u8, 0x31_u8])
  struct IJsDebugDataTarget
    lpVtbl : IJsDebugDataTargetVTbl*
  end

  struct IObjectSafetyVTbl
    query_interface : Proc(IObjectSafety*, Guid*, Void**, HRESULT)
    add_ref : Proc(IObjectSafety*, UInt32)
    release : Proc(IObjectSafety*, UInt32)
    get_interface_safety_options : Proc(IObjectSafety*, Guid*, UInt32*, UInt32*, HRESULT)
    set_interface_safety_options : Proc(IObjectSafety*, Guid*, UInt32, UInt32, HRESULT)
  end

  IObjectSafety_GUID = "cb5bdc81-93c1-11cf-8f20-00805f2cd064"
  IID_IObjectSafety = LibC::GUID.new(0xcb5bdc81_u32, 0x93c1_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0x20_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x2c_u8, 0xd0_u8, 0x64_u8])
  struct IObjectSafety
    lpVtbl : IObjectSafetyVTbl*
  end


  # Params # remoteoptions : PSTR [In],interfaceid : Guid* [In],interface : Void** [In]
  fun DebugConnect(remoteoptions : PSTR, interfaceid : Guid*, interface : Void**) : HRESULT

  # Params # remoteoptions : LibC::LPWSTR [In],interfaceid : Guid* [In],interface : Void** [In]
  fun DebugConnectWide(remoteoptions : LibC::LPWSTR, interfaceid : Guid*, interface : Void**) : HRESULT

  # Params # interfaceid : Guid* [In],interface : Void** [In]
  fun DebugCreate(interfaceid : Guid*, interface : Void**) : HRESULT

  # Params # interfaceid : Guid* [In],dbgengoptions : UInt32 [In],interface : Void** [In]
  fun DebugCreateEx(interfaceid : Guid*, dbgengoptions : UInt32, interface : Void**) : HRESULT

  # Params # debughost : IDebugHost [In],manager : IDataModelManager* [In]
  fun CreateDataModelManager(debughost : IDebugHost, manager : IDataModelManager*) : HRESULT

  # Params # hprocess : LibC::HANDLE [In],lpbaseaddress : Void* [In],lpbuffer : Void* [In],nsize : LibC::UINT_PTR [In],lpnumberofbytesread : LibC::UINT_PTR* [In]
  fun ReadProcessMemory(hprocess : LibC::HANDLE, lpbaseaddress : Void*, lpbuffer : Void*, nsize : LibC::UINT_PTR, lpnumberofbytesread : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],lpbaseaddress : Void* [In],lpbuffer : Void* [In],nsize : LibC::UINT_PTR [In],lpnumberofbyteswritten : LibC::UINT_PTR* [In]
  fun WriteProcessMemory(hprocess : LibC::HANDLE, lpbaseaddress : Void*, lpbuffer : Void*, nsize : LibC::UINT_PTR, lpnumberofbyteswritten : LibC::UINT_PTR*) : LibC::BOOL

  # Params # hthread : LibC::HANDLE [In],lpcontext : CONTEXT* [In]
  fun GetThreadContext(hthread : LibC::HANDLE, lpcontext : CONTEXT*) : LibC::BOOL

  # Params # hthread : LibC::HANDLE [In],lpcontext : CONTEXT* [In]
  fun SetThreadContext(hthread : LibC::HANDLE, lpcontext : CONTEXT*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],lpbaseaddress : Void* [In],dwsize : LibC::UINT_PTR [In]
  fun FlushInstructionCache(hprocess : LibC::HANDLE, lpbaseaddress : Void*, dwsize : LibC::UINT_PTR) : LibC::BOOL

  # Params # hthread : LibC::HANDLE [In],lpcontext : WOW64_CONTEXT* [In]
  fun Wow64GetThreadContext(hthread : LibC::HANDLE, lpcontext : WOW64_CONTEXT*) : LibC::BOOL

  # Params # hthread : LibC::HANDLE [In],lpcontext : WOW64_CONTEXT* [In]
  fun Wow64SetThreadContext(hthread : LibC::HANDLE, lpcontext : WOW64_CONTEXT*) : LibC::BOOL

  # Params # framestoskip : UInt32 [In],framestocapture : UInt32 [In],backtrace : Void** [In],backtracehash : UInt32* [In]
  fun RtlCaptureStackBackTrace(framestoskip : UInt32, framestocapture : UInt32, backtrace : Void**, backtracehash : UInt32*) : UInt16

  # Params # contextrecord : CONTEXT* [In]
  # Commented out because function is part of Lib C
  #fun RtlCaptureContext(contextrecord : CONTEXT*) : Void

  # Params # contextrecord : CONTEXT* [In]
  fun RtlCaptureContext2(contextrecord : CONTEXT*) : Void

  # Params # targetframe : Void* [In],targetip : Void* [In],exceptionrecord : EXCEPTION_RECORD* [In],returnvalue : Void* [In]
  fun RtlUnwind(targetframe : Void*, targetip : Void*, exceptionrecord : EXCEPTION_RECORD*, returnvalue : Void*) : Void

  # Params # functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY* [In],entrycount : UInt32 [In],baseaddress : UInt64 [In]
  fun RtlAddFunctionTable(functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY*, entrycount : UInt32, baseaddress : UInt64) : BOOLEAN

  # Params # functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY* [In]
  fun RtlDeleteFunctionTable(functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY*) : BOOLEAN

  # Params # tableidentifier : UInt64 [In],baseaddress : UInt64 [In],length : UInt32 [In],callback : PGET_RUNTIME_FUNCTION_CALLBACK [In],context : Void* [In],outofprocesscallbackdll : LibC::LPWSTR [In]
  fun RtlInstallFunctionTableCallback(tableidentifier : UInt64, baseaddress : UInt64, length : UInt32, callback : PGET_RUNTIME_FUNCTION_CALLBACK, context : Void*, outofprocesscallbackdll : LibC::LPWSTR) : BOOLEAN

  # Params # dynamictable : Void** [In],functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY* [In],entrycount : UInt32 [In],maximumentrycount : UInt32 [In],rangebase : LibC::UINT_PTR [In],rangeend : LibC::UINT_PTR [In]
  fun RtlAddGrowableFunctionTable(dynamictable : Void**, functiontable : IMAGE_RUNTIME_FUNCTION_ENTRY*, entrycount : UInt32, maximumentrycount : UInt32, rangebase : LibC::UINT_PTR, rangeend : LibC::UINT_PTR) : UInt32

  # Params # dynamictable : Void* [In],newentrycount : UInt32 [In]
  fun RtlGrowFunctionTable(dynamictable : Void*, newentrycount : UInt32) : Void

  # Params # dynamictable : Void* [In]
  fun RtlDeleteGrowableFunctionTable(dynamictable : Void*) : Void

  # Params # controlpc : UInt64 [In],imagebase : UInt64* [In],historytable : UNWIND_HISTORY_TABLE* [In]
  fun RtlLookupFunctionEntry(controlpc : UInt64, imagebase : UInt64*, historytable : UNWIND_HISTORY_TABLE*) : IMAGE_RUNTIME_FUNCTION_ENTRY*

  # Params # contextrecord : CONTEXT* [In],exceptionrecord : EXCEPTION_RECORD* [In]
  fun RtlRestoreContext(contextrecord : CONTEXT*, exceptionrecord : EXCEPTION_RECORD*) : Void

  # Params # targetframe : Void* [In],targetip : Void* [In],exceptionrecord : EXCEPTION_RECORD* [In],returnvalue : Void* [In],contextrecord : CONTEXT* [In],historytable : UNWIND_HISTORY_TABLE* [In]
  fun RtlUnwindEx(targetframe : Void*, targetip : Void*, exceptionrecord : EXCEPTION_RECORD*, returnvalue : Void*, contextrecord : CONTEXT*, historytable : UNWIND_HISTORY_TABLE*) : Void

  # Params # handlertype : RTL_VIRTUAL_UNWIND_HANDLER_TYPE [In],imagebase : UInt64 [In],controlpc : UInt64 [In],functionentry : IMAGE_RUNTIME_FUNCTION_ENTRY* [In],contextrecord : CONTEXT* [In],handlerdata : Void** [In],establisherframe : UInt64* [In],contextpointers : KNONVOLATILE_CONTEXT_POINTERS* [In]
  fun RtlVirtualUnwind(handlertype : RTL_VIRTUAL_UNWIND_HANDLER_TYPE, imagebase : UInt64, controlpc : UInt64, functionentry : IMAGE_RUNTIME_FUNCTION_ENTRY*, contextrecord : CONTEXT*, handlerdata : Void**, establisherframe : UInt64*, contextpointers : KNONVOLATILE_CONTEXT_POINTERS*) : EXCEPTION_ROUTINE

  # Params # exceptionrecord : EXCEPTION_RECORD* [In]
  fun RtlRaiseException(exceptionrecord : EXCEPTION_RECORD*) : Void

  # Params # pcvalue : Void* [In],baseofimage : Void** [In]
  fun RtlPcToFileHeader(pcvalue : Void*, baseofimage : Void**) : Void*

  # Params # 
  fun IsDebuggerPresent : LibC::BOOL

  # Params # 
  fun DebugBreak : Void

  # Params # lpoutputstring : PSTR [In]
  fun OutputDebugStringA(lpoutputstring : PSTR) : Void

  # Params # lpoutputstring : LibC::LPWSTR [In]
  fun OutputDebugStringW(lpoutputstring : LibC::LPWSTR) : Void

  # Params # dwprocessid : UInt32 [In],dwthreadid : UInt32 [In],dwcontinuestatus : UInt32 [In]
  fun ContinueDebugEvent(dwprocessid : UInt32, dwthreadid : UInt32, dwcontinuestatus : UInt32) : LibC::BOOL

  # Params # lpdebugevent : DEBUG_EVENT* [In],dwmilliseconds : UInt32 [In]
  fun WaitForDebugEvent(lpdebugevent : DEBUG_EVENT*, dwmilliseconds : UInt32) : LibC::BOOL

  # Params # dwprocessid : UInt32 [In]
  fun DebugActiveProcess(dwprocessid : UInt32) : LibC::BOOL

  # Params # dwprocessid : UInt32 [In]
  fun DebugActiveProcessStop(dwprocessid : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],pbdebuggerpresent : LibC::BOOL* [In]
  fun CheckRemoteDebuggerPresent(hprocess : LibC::HANDLE, pbdebuggerpresent : LibC::BOOL*) : LibC::BOOL

  # Params # lpdebugevent : DEBUG_EVENT* [In],dwmilliseconds : UInt32 [In]
  fun WaitForDebugEventEx(lpdebugevent : DEBUG_EVENT*, dwmilliseconds : UInt32) : LibC::BOOL

  # Params # ptr : Void* [In]
  fun EncodePointer(ptr : Void*) : Void*

  # Params # ptr : Void* [In]
  fun DecodePointer(ptr : Void*) : Void*

  # Params # ptr : Void* [In]
  fun EncodeSystemPointer(ptr : Void*) : Void*

  # Params # ptr : Void* [In]
  fun DecodeSystemPointer(ptr : Void*) : Void*

  # Params # processhandle : LibC::HANDLE [In],ptr : Void* [In],encodedptr : Void** [In]
  fun EncodeRemotePointer(processhandle : LibC::HANDLE, ptr : Void*, encodedptr : Void**) : HRESULT

  # Params # processhandle : LibC::HANDLE [In],ptr : Void* [In],decodedptr : Void** [In]
  fun DecodeRemotePointer(processhandle : LibC::HANDLE, ptr : Void*, decodedptr : Void**) : HRESULT

  # Params # dwfreq : UInt32 [In],dwduration : UInt32 [In]
  fun Beep(dwfreq : UInt32, dwduration : UInt32) : LibC::BOOL

  # Params # dwexceptioncode : UInt32 [In],dwexceptionflags : UInt32 [In],nnumberofarguments : UInt32 [In],lparguments : LibC::UINT_PTR* [In]
  fun RaiseException(dwexceptioncode : UInt32, dwexceptionflags : UInt32, nnumberofarguments : UInt32, lparguments : LibC::UINT_PTR*) : Void

  # Params # exceptioninfo : EXCEPTION_POINTERS* [In]
  fun UnhandledExceptionFilter(exceptioninfo : EXCEPTION_POINTERS*) : Int32

  # Params # lptoplevelexceptionfilter : LPTOP_LEVEL_EXCEPTION_FILTER [In]
  fun SetUnhandledExceptionFilter(lptoplevelexceptionfilter : LPTOP_LEVEL_EXCEPTION_FILTER) : LPTOP_LEVEL_EXCEPTION_FILTER

  # Params # 
  fun GetErrorMode : UInt32

  # Params # umode : THREAD_ERROR_MODE [In]
  fun SetErrorMode(umode : THREAD_ERROR_MODE) : UInt32

  # Params # first : UInt32 [In],handler : PVECTORED_EXCEPTION_HANDLER [In]
  # Commented out because function is part of Lib C
  #fun AddVectoredExceptionHandler(first : UInt32, handler : PVECTORED_EXCEPTION_HANDLER) : Void*

  # Params # handle : Void* [In]
  fun RemoveVectoredExceptionHandler(handle : Void*) : UInt32

  # Params # first : UInt32 [In],handler : PVECTORED_EXCEPTION_HANDLER [In]
  fun AddVectoredContinueHandler(first : UInt32, handler : PVECTORED_EXCEPTION_HANDLER) : Void*

  # Params # handle : Void* [In]
  fun RemoveVectoredContinueHandler(handle : Void*) : UInt32

  # Params # pexceptionrecord : EXCEPTION_RECORD* [In],pcontextrecord : CONTEXT* [In],dwflags : UInt32 [In]
  fun RaiseFailFastException(pexceptionrecord : EXCEPTION_RECORD*, pcontextrecord : CONTEXT*, dwflags : UInt32) : Void

  # Params # uaction : UInt32 [In],lpmessagetext : PSTR [In]
  fun FatalAppExitA(uaction : UInt32, lpmessagetext : PSTR) : Void

  # Params # uaction : UInt32 [In],lpmessagetext : LibC::LPWSTR [In]
  fun FatalAppExitW(uaction : UInt32, lpmessagetext : LibC::LPWSTR) : Void

  # Params # 
  fun GetThreadErrorMode : UInt32

  # Params # dwnewmode : THREAD_ERROR_MODE [In],lpoldmode : THREAD_ERROR_MODE* [In]
  fun SetThreadErrorMode(dwnewmode : THREAD_ERROR_MODE, lpoldmode : THREAD_ERROR_MODE*) : LibC::BOOL

  # Params # failedallocationsize : LibC::UINT_PTR [In]
  fun TerminateProcessOnMemoryExhaustion(failedallocationsize : LibC::UINT_PTR) : Void

  # Params # flags : OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS [In],callback : PWAITCHAINCALLBACK [In]
  fun OpenThreadWaitChainSession(flags : OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS, callback : PWAITCHAINCALLBACK) : Void*

  # Params # wcthandle : Void* [In]
  fun CloseThreadWaitChainSession(wcthandle : Void*) : Void

  # Params # wcthandle : Void* [In],context : LibC::UINT_PTR [In],flags : WAIT_CHAIN_THREAD_OPTIONS [In],threadid : UInt32 [In],nodecount : UInt32* [In],nodeinfoarray : WAITCHAIN_NODE_INFO* [In],iscycle : Int32* [In]
  fun GetThreadWaitChain(wcthandle : Void*, context : LibC::UINT_PTR, flags : WAIT_CHAIN_THREAD_OPTIONS, threadid : UInt32, nodecount : UInt32*, nodeinfoarray : WAITCHAIN_NODE_INFO*, iscycle : Int32*) : LibC::BOOL

  # Params # callstatecallback : PCOGETCALLSTATE [In],activationstatecallback : PCOGETACTIVATIONSTATE [In]
  fun RegisterWaitChainCOMCallback(callstatecallback : PCOGETCALLSTATE, activationstatecallback : PCOGETACTIVATIONSTATE) : Void

  # Params # hprocess : LibC::HANDLE [In],processid : UInt32 [In],hfile : LibC::HANDLE [In],dumptype : MINIDUMP_TYPE [In],exceptionparam : MINIDUMP_EXCEPTION_INFORMATION* [In],userstreamparam : MINIDUMP_USER_STREAM_INFORMATION* [In],callbackparam : MINIDUMP_CALLBACK_INFORMATION* [In]
  fun MiniDumpWriteDump(hprocess : LibC::HANDLE, processid : UInt32, hfile : LibC::HANDLE, dumptype : MINIDUMP_TYPE, exceptionparam : MINIDUMP_EXCEPTION_INFORMATION*, userstreamparam : MINIDUMP_USER_STREAM_INFORMATION*, callbackparam : MINIDUMP_CALLBACK_INFORMATION*) : LibC::BOOL

  # Params # baseofdump : Void* [In],streamnumber : UInt32 [In],dir : MINIDUMP_DIRECTORY** [In],streampointer : Void** [In],streamsize : UInt32* [In]
  fun MiniDumpReadDumpStream(baseofdump : Void*, streamnumber : UInt32, dir : MINIDUMP_DIRECTORY**, streampointer : Void**, streamsize : UInt32*) : LibC::BOOL

  # Params # imagename : PSTR [In],dllpath : PSTR [In],symbolpath : PSTR [In]
  fun BindImage(imagename : PSTR, dllpath : PSTR, symbolpath : PSTR) : LibC::BOOL

  # Params # flags : UInt32 [In],imagename : PSTR [In],dllpath : PSTR [In],symbolpath : PSTR [In],statusroutine : PIMAGEHLP_STATUS_ROUTINE [In]
  fun BindImageEx(flags : UInt32, imagename : PSTR, dllpath : PSTR, symbolpath : PSTR, statusroutine : PIMAGEHLP_STATUS_ROUTINE) : LibC::BOOL

  # Params # currentimagename : PSTR [In],symbolpath : PSTR [In],frebase : LibC::BOOL [In],frebasesysfileok : LibC::BOOL [In],fgoingdown : LibC::BOOL [In],checkimagesize : UInt32 [In],oldimagesize : UInt32* [In],oldimagebase : LibC::UINT_PTR* [In],newimagesize : UInt32* [In],newimagebase : LibC::UINT_PTR* [In],timestamp : UInt32 [In]
  fun ReBaseImage(currentimagename : PSTR, symbolpath : PSTR, frebase : LibC::BOOL, frebasesysfileok : LibC::BOOL, fgoingdown : LibC::BOOL, checkimagesize : UInt32, oldimagesize : UInt32*, oldimagebase : LibC::UINT_PTR*, newimagesize : UInt32*, newimagebase : LibC::UINT_PTR*, timestamp : UInt32) : LibC::BOOL

  # Params # currentimagename : PSTR [In],symbolpath : PSTR [In],frebase : LibC::BOOL [In],frebasesysfileok : LibC::BOOL [In],fgoingdown : LibC::BOOL [In],checkimagesize : UInt32 [In],oldimagesize : UInt32* [In],oldimagebase : UInt64* [In],newimagesize : UInt32* [In],newimagebase : UInt64* [In],timestamp : UInt32 [In]
  fun ReBaseImage64(currentimagename : PSTR, symbolpath : PSTR, frebase : LibC::BOOL, frebasesysfileok : LibC::BOOL, fgoingdown : LibC::BOOL, checkimagesize : UInt32, oldimagesize : UInt32*, oldimagebase : UInt64*, newimagesize : UInt32*, newimagebase : UInt64*, timestamp : UInt32) : LibC::BOOL

  # Params # baseaddress : Void* [In],filelength : UInt32 [In],headersum : UInt32* [In],checksum : UInt32* [In]
  fun CheckSumMappedFile(baseaddress : Void*, filelength : UInt32, headersum : UInt32*, checksum : UInt32*) : IMAGE_NT_HEADERS64*

  # Params # filename : PSTR [In],headersum : UInt32* [In],checksum : UInt32* [In]
  fun MapFileAndCheckSumA(filename : PSTR, headersum : UInt32*, checksum : UInt32*) : UInt32

  # Params # filename : LibC::LPWSTR [In],headersum : UInt32* [In],checksum : UInt32* [In]
  fun MapFileAndCheckSumW(filename : LibC::LPWSTR, headersum : UInt32*, checksum : UInt32*) : UInt32

  # Params # loadedimage : LOADED_IMAGE* [In],imageconfiginformation : IMAGE_LOAD_CONFIG_DIRECTORY64* [In]
  fun GetImageConfigInformation(loadedimage : LOADED_IMAGE*, imageconfiginformation : IMAGE_LOAD_CONFIG_DIRECTORY64*) : LibC::BOOL

  # Params # loadedimage : LOADED_IMAGE* [In],sizeunusedheaderbytes : UInt32* [In]
  fun GetImageUnusedHeaderBytes(loadedimage : LOADED_IMAGE*, sizeunusedheaderbytes : UInt32*) : UInt32

  # Params # loadedimage : LOADED_IMAGE* [In],imageconfiginformation : IMAGE_LOAD_CONFIG_DIRECTORY64* [In]
  fun SetImageConfigInformation(loadedimage : LOADED_IMAGE*, imageconfiginformation : IMAGE_LOAD_CONFIG_DIRECTORY64*) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],digestlevel : UInt32 [In],digestfunction : DIGEST_FUNCTION [In],digesthandle : Void* [In]
  fun ImageGetDigestStream(filehandle : LibC::HANDLE, digestlevel : UInt32, digestfunction : DIGEST_FUNCTION, digesthandle : Void*) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],certificate : WIN_CERTIFICATE* [In],index : UInt32* [In]
  fun ImageAddCertificate(filehandle : LibC::HANDLE, certificate : WIN_CERTIFICATE*, index : UInt32*) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],index : UInt32 [In]
  fun ImageRemoveCertificate(filehandle : LibC::HANDLE, index : UInt32) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],typefilter : UInt16 [In],certificatecount : UInt32* [In],indices : UInt32* [In],indexcount : UInt32 [In]
  fun ImageEnumerateCertificates(filehandle : LibC::HANDLE, typefilter : UInt16, certificatecount : UInt32*, indices : UInt32*, indexcount : UInt32) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],certificateindex : UInt32 [In],certificate : WIN_CERTIFICATE* [In],requiredlength : UInt32* [In]
  fun ImageGetCertificateData(filehandle : LibC::HANDLE, certificateindex : UInt32, certificate : WIN_CERTIFICATE*, requiredlength : UInt32*) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],certificateindex : UInt32 [In],certificateheader : WIN_CERTIFICATE* [In]
  fun ImageGetCertificateHeader(filehandle : LibC::HANDLE, certificateindex : UInt32, certificateheader : WIN_CERTIFICATE*) : LibC::BOOL

  # Params # dllname : PSTR [In],dllpath : PSTR [In]
  fun ImageLoad(dllname : PSTR, dllpath : PSTR) : LOADED_IMAGE*

  # Params # loadedimage : LOADED_IMAGE* [In]
  fun ImageUnload(loadedimage : LOADED_IMAGE*) : LibC::BOOL

  # Params # imagename : PSTR [In],dllpath : PSTR [In],loadedimage : LOADED_IMAGE* [In],dotdll : LibC::BOOL [In],readonly : LibC::BOOL [In]
  fun MapAndLoad(imagename : PSTR, dllpath : PSTR, loadedimage : LOADED_IMAGE*, dotdll : LibC::BOOL, readonly : LibC::BOOL) : LibC::BOOL

  # Params # loadedimage : LOADED_IMAGE* [In]
  fun UnMapAndLoad(loadedimage : LOADED_IMAGE*) : LibC::BOOL

  # Params # filehandle : LibC::HANDLE [In],psystemtime : SYSTEMTIME* [In]
  fun TouchFileTimes(filehandle : LibC::HANDLE, psystemtime : SYSTEMTIME*) : LibC::BOOL

  # Params # imagefilename : PSTR [In],symbolpath : PSTR [In],debugfilepath : PSTR [In],ntheaders : IMAGE_NT_HEADERS32* [In]
  fun UpdateDebugInfoFile(imagefilename : PSTR, symbolpath : PSTR, debugfilepath : PSTR, ntheaders : IMAGE_NT_HEADERS32*) : LibC::BOOL

  # Params # imagefilename : PSTR [In],symbolpath : PSTR [In],debugfilepath : PSTR [In],ntheaders : IMAGE_NT_HEADERS32* [In],oldchecksum : UInt32 [In]
  fun UpdateDebugInfoFileEx(imagefilename : PSTR, symbolpath : PSTR, debugfilepath : PSTR, ntheaders : IMAGE_NT_HEADERS32*, oldchecksum : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],filename : PSTR [In],debugfilepath : PSTR [In],callback : PFIND_DEBUG_FILE_CALLBACK [In],callerdata : Void* [In]
  fun SymFindDebugInfoFile(hprocess : LibC::HANDLE, filename : PSTR, debugfilepath : PSTR, callback : PFIND_DEBUG_FILE_CALLBACK, callerdata : Void*) : LibC::HANDLE

  # Params # hprocess : LibC::HANDLE [In],filename : LibC::LPWSTR [In],debugfilepath : LibC::LPWSTR [In],callback : PFIND_DEBUG_FILE_CALLBACKW [In],callerdata : Void* [In]
  fun SymFindDebugInfoFileW(hprocess : LibC::HANDLE, filename : LibC::LPWSTR, debugfilepath : LibC::LPWSTR, callback : PFIND_DEBUG_FILE_CALLBACKW, callerdata : Void*) : LibC::HANDLE

  # Params # filename : PSTR [In],symbolpath : PSTR [In],debugfilepath : PSTR [In]
  fun FindDebugInfoFile(filename : PSTR, symbolpath : PSTR, debugfilepath : PSTR) : LibC::HANDLE

  # Params # filename : PSTR [In],symbolpath : PSTR [In],debugfilepath : PSTR [In],callback : PFIND_DEBUG_FILE_CALLBACK [In],callerdata : Void* [In]
  fun FindDebugInfoFileEx(filename : PSTR, symbolpath : PSTR, debugfilepath : PSTR, callback : PFIND_DEBUG_FILE_CALLBACK, callerdata : Void*) : LibC::HANDLE

  # Params # filename : LibC::LPWSTR [In],symbolpath : LibC::LPWSTR [In],debugfilepath : LibC::LPWSTR [In],callback : PFIND_DEBUG_FILE_CALLBACKW [In],callerdata : Void* [In]
  fun FindDebugInfoFileExW(filename : LibC::LPWSTR, symbolpath : LibC::LPWSTR, debugfilepath : LibC::LPWSTR, callback : PFIND_DEBUG_FILE_CALLBACKW, callerdata : Void*) : LibC::HANDLE

  # Params # hprocess : LibC::HANDLE [In],searchpatha : PSTR [In],filename : PSTR [In],id : Void* [In],two : UInt32 [In],three : UInt32 [In],flags : SYM_FIND_ID_OPTION [In],foundfile : PSTR [In],callback : PFINDFILEINPATHCALLBACK [In],context : Void* [In]
  fun SymFindFileInPath(hprocess : LibC::HANDLE, searchpatha : PSTR, filename : PSTR, id : Void*, two : UInt32, three : UInt32, flags : SYM_FIND_ID_OPTION, foundfile : PSTR, callback : PFINDFILEINPATHCALLBACK, context : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : LibC::LPWSTR [In],filename : LibC::LPWSTR [In],id : Void* [In],two : UInt32 [In],three : UInt32 [In],flags : SYM_FIND_ID_OPTION [In],foundfile : LibC::LPWSTR [In],callback : PFINDFILEINPATHCALLBACKW [In],context : Void* [In]
  fun SymFindFileInPathW(hprocess : LibC::HANDLE, searchpatha : LibC::LPWSTR, filename : LibC::LPWSTR, id : Void*, two : UInt32, three : UInt32, flags : SYM_FIND_ID_OPTION, foundfile : LibC::LPWSTR, callback : PFINDFILEINPATHCALLBACKW, context : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],filename : PSTR [In],imagefilepath : PSTR [In],callback : PFIND_EXE_FILE_CALLBACK [In],callerdata : Void* [In]
  fun SymFindExecutableImage(hprocess : LibC::HANDLE, filename : PSTR, imagefilepath : PSTR, callback : PFIND_EXE_FILE_CALLBACK, callerdata : Void*) : LibC::HANDLE

  # Params # hprocess : LibC::HANDLE [In],filename : LibC::LPWSTR [In],imagefilepath : LibC::LPWSTR [In],callback : PFIND_EXE_FILE_CALLBACKW [In],callerdata : Void* [In]
  fun SymFindExecutableImageW(hprocess : LibC::HANDLE, filename : LibC::LPWSTR, imagefilepath : LibC::LPWSTR, callback : PFIND_EXE_FILE_CALLBACKW, callerdata : Void*) : LibC::HANDLE

  # Params # filename : PSTR [In],symbolpath : PSTR [In],imagefilepath : PSTR [In]
  fun FindExecutableImage(filename : PSTR, symbolpath : PSTR, imagefilepath : PSTR) : LibC::HANDLE

  # Params # filename : PSTR [In],symbolpath : PSTR [In],imagefilepath : PSTR [In],callback : PFIND_EXE_FILE_CALLBACK [In],callerdata : Void* [In]
  fun FindExecutableImageEx(filename : PSTR, symbolpath : PSTR, imagefilepath : PSTR, callback : PFIND_EXE_FILE_CALLBACK, callerdata : Void*) : LibC::HANDLE

  # Params # filename : LibC::LPWSTR [In],symbolpath : LibC::LPWSTR [In],imagefilepath : LibC::LPWSTR [In],callback : PFIND_EXE_FILE_CALLBACKW [In],callerdata : Void* [In]
  fun FindExecutableImageExW(filename : LibC::LPWSTR, symbolpath : LibC::LPWSTR, imagefilepath : LibC::LPWSTR, callback : PFIND_EXE_FILE_CALLBACKW, callerdata : Void*) : LibC::HANDLE

  # Params # base : Void* [In]
  fun ImageNtHeader(base : Void*) : IMAGE_NT_HEADERS64*

  # Params # base : Void* [In],mappedasimage : BOOLEAN [In],directoryentry : IMAGE_DIRECTORY_ENTRY [In],size : UInt32* [In],foundheader : IMAGE_SECTION_HEADER** [In]
  fun ImageDirectoryEntryToDataEx(base : Void*, mappedasimage : BOOLEAN, directoryentry : IMAGE_DIRECTORY_ENTRY, size : UInt32*, foundheader : IMAGE_SECTION_HEADER**) : Void*

  # Params # base : Void* [In],mappedasimage : BOOLEAN [In],directoryentry : IMAGE_DIRECTORY_ENTRY [In],size : UInt32* [In]
  fun ImageDirectoryEntryToData(base : Void*, mappedasimage : BOOLEAN, directoryentry : IMAGE_DIRECTORY_ENTRY, size : UInt32*) : Void*

  # Params # ntheaders : IMAGE_NT_HEADERS64* [In],base : Void* [In],rva : UInt32 [In]
  fun ImageRvaToSection(ntheaders : IMAGE_NT_HEADERS64*, base : Void*, rva : UInt32) : IMAGE_SECTION_HEADER*

  # Params # ntheaders : IMAGE_NT_HEADERS64* [In],base : Void* [In],rva : UInt32 [In],lastrvasection : IMAGE_SECTION_HEADER** [In]
  fun ImageRvaToVa(ntheaders : IMAGE_NT_HEADERS64*, base : Void*, rva : UInt32, lastrvasection : IMAGE_SECTION_HEADER**) : Void*

  # Params # rootpath : PSTR [In],inputpathname : PSTR [In],outputpathbuffer : PSTR [In]
  fun SearchTreeForFile(rootpath : PSTR, inputpathname : PSTR, outputpathbuffer : PSTR) : LibC::BOOL

  # Params # rootpath : LibC::LPWSTR [In],inputpathname : LibC::LPWSTR [In],outputpathbuffer : LibC::LPWSTR [In]
  fun SearchTreeForFileW(rootpath : LibC::LPWSTR, inputpathname : LibC::LPWSTR, outputpathbuffer : LibC::LPWSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],rootpath : PSTR [In],inputpathname : PSTR [In],outputpathbuffer : PSTR [In],cb : PENUMDIRTREE_CALLBACK [In],data : Void* [In]
  fun EnumDirTree(hprocess : LibC::HANDLE, rootpath : PSTR, inputpathname : PSTR, outputpathbuffer : PSTR, cb : PENUMDIRTREE_CALLBACK, data : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],rootpath : LibC::LPWSTR [In],inputpathname : LibC::LPWSTR [In],outputpathbuffer : LibC::LPWSTR [In],cb : PENUMDIRTREE_CALLBACKW [In],data : Void* [In]
  fun EnumDirTreeW(hprocess : LibC::HANDLE, rootpath : LibC::LPWSTR, inputpathname : LibC::LPWSTR, outputpathbuffer : LibC::LPWSTR, cb : PENUMDIRTREE_CALLBACKW, data : Void*) : LibC::BOOL

  # Params # dirpath : PSTR [In]
  fun MakeSureDirectoryPathExists(dirpath : PSTR) : LibC::BOOL

  # Params # name : PSTR [In],outputstring : UInt8* [In],maxstringlength : UInt32 [In],flags : UInt32 [In]
  fun UnDecorateSymbolName(name : PSTR, outputstring : UInt8*, maxstringlength : UInt32, flags : UInt32) : UInt32

  # Params # name : LibC::LPWSTR [In],outputstring : Char* [In],maxstringlength : UInt32 [In],flags : UInt32 [In]
  fun UnDecorateSymbolNameW(name : LibC::LPWSTR, outputstring : Char*, maxstringlength : UInt32, flags : UInt32) : UInt32

  # Params # machinetype : UInt32 [In],hprocess : LibC::HANDLE [In],hthread : LibC::HANDLE [In],stackframe : STACKFRAME64* [In],contextrecord : Void* [In],readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64 [In],functiontableaccessroutine : PFUNCTION_TABLE_ACCESS_ROUTINE64 [In],getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64 [In],translateaddress : PTRANSLATE_ADDRESS_ROUTINE64 [In]
  # Commented out because function is part of Lib C
  #fun StackWalk64(machinetype : UInt32, hprocess : LibC::HANDLE, hthread : LibC::HANDLE, stackframe : STACKFRAME64*, contextrecord : Void*, readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64, functiontableaccessroutine : PFUNCTION_TABLE_ACCESS_ROUTINE64, getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64, translateaddress : PTRANSLATE_ADDRESS_ROUTINE64) : LibC::BOOL

  # Params # machinetype : UInt32 [In],hprocess : LibC::HANDLE [In],hthread : LibC::HANDLE [In],stackframe : STACKFRAME_EX* [In],contextrecord : Void* [In],readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64 [In],functiontableaccessroutine : PFUNCTION_TABLE_ACCESS_ROUTINE64 [In],getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64 [In],translateaddress : PTRANSLATE_ADDRESS_ROUTINE64 [In],flags : UInt32 [In]
  fun StackWalkEx(machinetype : UInt32, hprocess : LibC::HANDLE, hthread : LibC::HANDLE, stackframe : STACKFRAME_EX*, contextrecord : Void*, readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64, functiontableaccessroutine : PFUNCTION_TABLE_ACCESS_ROUTINE64, getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64, translateaddress : PTRANSLATE_ADDRESS_ROUTINE64, flags : UInt32) : LibC::BOOL

  # Params # 
  fun ImagehlpApiVersion : API_VERSION*

  # Params # appversion : API_VERSION* [In]
  fun ImagehlpApiVersionEx(appversion : API_VERSION*) : API_VERSION*

  # Params # module : HINSTANCE [In]
  fun GetTimestampForLoadedLibrary(module : HINSTANCE) : UInt32

  # Params # hwnd : LibC::HANDLE [In]
  fun SymSetParentWindow(hwnd : LibC::HANDLE) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],dir : PSTR [In]
  fun SymSetHomeDirectory(hprocess : LibC::HANDLE, dir : PSTR) : PSTR

  # Params # hprocess : LibC::HANDLE [In],dir : LibC::LPWSTR [In]
  fun SymSetHomeDirectoryW(hprocess : LibC::HANDLE, dir : LibC::LPWSTR) : LibC::LPWSTR

  # Params # type : IMAGEHLP_HD_TYPE [In],dir : UInt8* [In],size : LibC::UINT_PTR [In]
  fun SymGetHomeDirectory(type : IMAGEHLP_HD_TYPE, dir : UInt8*, size : LibC::UINT_PTR) : PSTR

  # Params # type : IMAGEHLP_HD_TYPE [In],dir : Char* [In],size : LibC::UINT_PTR [In]
  fun SymGetHomeDirectoryW(type : IMAGEHLP_HD_TYPE, dir : Char*, size : LibC::UINT_PTR) : LibC::LPWSTR

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],omapto : OMAP** [In],comapto : UInt64* [In],omapfrom : OMAP** [In],comapfrom : UInt64* [In]
  fun SymGetOmaps(hprocess : LibC::HANDLE, baseofdll : UInt64, omapto : OMAP**, comapto : UInt64*, omapfrom : OMAP**, comapfrom : UInt64*) : LibC::BOOL

  # Params # symoptions : UInt32 [In]
  # Commented out because function is part of Lib C
  #fun SymSetOptions(symoptions : UInt32) : UInt32

  # Params # 
  # Commented out because function is part of Lib C
  #fun SymGetOptions : UInt32

  # Params # hprocess : LibC::HANDLE [In]
  # Commented out because function is part of Lib C
  #fun SymCleanup(hprocess : LibC::HANDLE) : LibC::BOOL

  # Params # option : IMAGEHLP_EXTENDED_OPTIONS [In]
  fun SymGetExtendedOption(option : IMAGEHLP_EXTENDED_OPTIONS) : LibC::BOOL

  # Params # option : IMAGEHLP_EXTENDED_OPTIONS [In],value : LibC::BOOL [In]
  fun SymSetExtendedOption(option : IMAGEHLP_EXTENDED_OPTIONS, value : LibC::BOOL) : LibC::BOOL

  # Params # string : PSTR [In],expression : PSTR [In],fcase : LibC::BOOL [In]
  fun SymMatchString(string : PSTR, expression : PSTR, fcase : LibC::BOOL) : LibC::BOOL

  # Params # string : PSTR [In],expression : PSTR [In],fcase : LibC::BOOL [In]
  fun SymMatchStringA(string : PSTR, expression : PSTR, fcase : LibC::BOOL) : LibC::BOOL

  # Params # string : LibC::LPWSTR [In],expression : LibC::LPWSTR [In],fcase : LibC::BOOL [In]
  fun SymMatchStringW(string : LibC::LPWSTR, expression : LibC::LPWSTR, fcase : LibC::BOOL) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modbase : UInt64 [In],mask : PSTR [In],cbsrcfiles : PSYM_ENUMSOURCEFILES_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumSourceFiles(hprocess : LibC::HANDLE, modbase : UInt64, mask : PSTR, cbsrcfiles : PSYM_ENUMSOURCEFILES_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modbase : UInt64 [In],mask : LibC::LPWSTR [In],cbsrcfiles : PSYM_ENUMSOURCEFILES_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumSourceFilesW(hprocess : LibC::HANDLE, modbase : UInt64, mask : LibC::LPWSTR, cbsrcfiles : PSYM_ENUMSOURCEFILES_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enummodulescallback : PSYM_ENUMMODULES_CALLBACK64 [In],usercontext : Void* [In]
  fun SymEnumerateModules64(hprocess : LibC::HANDLE, enummodulescallback : PSYM_ENUMMODULES_CALLBACK64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enummodulescallback : PSYM_ENUMMODULES_CALLBACKW64 [In],usercontext : Void* [In]
  fun SymEnumerateModulesW64(hprocess : LibC::HANDLE, enummodulescallback : PSYM_ENUMMODULES_CALLBACKW64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACK64 [In],usercontext : Void* [In]
  fun EnumerateLoadedModulesEx(hprocess : LibC::HANDLE, enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACK64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACKW64 [In],usercontext : Void* [In]
  fun EnumerateLoadedModulesExW(hprocess : LibC::HANDLE, enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACKW64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACK64 [In],usercontext : Void* [In]
  fun EnumerateLoadedModules64(hprocess : LibC::HANDLE, enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACK64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACKW64 [In],usercontext : Void* [In]
  fun EnumerateLoadedModulesW64(hprocess : LibC::HANDLE, enumloadedmodulescallback : PENUMLOADED_MODULES_CALLBACKW64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],addrbase : UInt64 [In]
  fun SymFunctionTableAccess64(hprocess : LibC::HANDLE, addrbase : UInt64) : Void*

  # Params # hprocess : LibC::HANDLE [In],addrbase : UInt64 [In],readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64 [In],getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64 [In]
  fun SymFunctionTableAccess64AccessRoutines(hprocess : LibC::HANDLE, addrbase : UInt64, readmemoryroutine : PREAD_PROCESS_MEMORY_ROUTINE64, getmodulebaseroutine : PGET_MODULE_BASE_ROUTINE64) : Void*

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],buffer : Void* [In],size : UInt32* [In]
  fun SymGetUnwindInfo(hprocess : LibC::HANDLE, address : UInt64, buffer : Void*, size : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In],moduleinfo : IMAGEHLP_MODULE64* [In]
  fun SymGetModuleInfo64(hprocess : LibC::HANDLE, qwaddr : UInt64, moduleinfo : IMAGEHLP_MODULE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In],moduleinfo : IMAGEHLP_MODULEW64* [In]
  # Commented out because function is part of Lib C
  #fun SymGetModuleInfoW64(hprocess : LibC::HANDLE, qwaddr : UInt64, moduleinfo : IMAGEHLP_MODULEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In]
  # Commented out because function is part of Lib C
  #fun SymGetModuleBase64(hprocess : LibC::HANDLE, qwaddr : UInt64) : UInt64

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],obj : PSTR [In],file : PSTR [In],enumlinescallback : PSYM_ENUMLINES_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumLines(hprocess : LibC::HANDLE, base : UInt64, obj : PSTR, file : PSTR, enumlinescallback : PSYM_ENUMLINES_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],obj : LibC::LPWSTR [In],file : LibC::LPWSTR [In],enumlinescallback : PSYM_ENUMLINES_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumLinesW(hprocess : LibC::HANDLE, base : UInt64, obj : LibC::LPWSTR, file : LibC::LPWSTR, enumlinescallback : PSYM_ENUMLINES_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In],pdwdisplacement : UInt32* [In],line64 : IMAGEHLP_LINE64* [In]
  fun SymGetLineFromAddr64(hprocess : LibC::HANDLE, qwaddr : UInt64, pdwdisplacement : UInt32*, line64 : IMAGEHLP_LINE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],dwaddr : UInt64 [In],pdwdisplacement : UInt32* [In],line : IMAGEHLP_LINEW64* [In]
  # Commented out because function is part of Lib C
  #fun SymGetLineFromAddrW64(hprocess : LibC::HANDLE, dwaddr : UInt64, pdwdisplacement : UInt32*, line : IMAGEHLP_LINEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In],inlinecontext : UInt32 [In],qwmodulebaseaddress : UInt64 [In],pdwdisplacement : UInt32* [In],line64 : IMAGEHLP_LINE64* [In]
  fun SymGetLineFromInlineContext(hprocess : LibC::HANDLE, qwaddr : UInt64, inlinecontext : UInt32, qwmodulebaseaddress : UInt64, pdwdisplacement : UInt32*, line64 : IMAGEHLP_LINE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],dwaddr : UInt64 [In],inlinecontext : UInt32 [In],qwmodulebaseaddress : UInt64 [In],pdwdisplacement : UInt32* [In],line : IMAGEHLP_LINEW64* [In]
  fun SymGetLineFromInlineContextW(hprocess : LibC::HANDLE, dwaddr : UInt64, inlinecontext : UInt32, qwmodulebaseaddress : UInt64, pdwdisplacement : UInt32*, line : IMAGEHLP_LINEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],obj : PSTR [In],file : PSTR [In],line : UInt32 [In],flags : UInt32 [In],enumlinescallback : PSYM_ENUMLINES_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumSourceLines(hprocess : LibC::HANDLE, base : UInt64, obj : PSTR, file : PSTR, line : UInt32, flags : UInt32, enumlinescallback : PSYM_ENUMLINES_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],obj : LibC::LPWSTR [In],file : LibC::LPWSTR [In],line : UInt32 [In],flags : UInt32 [In],enumlinescallback : PSYM_ENUMLINES_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumSourceLinesW(hprocess : LibC::HANDLE, base : UInt64, obj : LibC::LPWSTR, file : LibC::LPWSTR, line : UInt32, flags : UInt32, enumlinescallback : PSYM_ENUMLINES_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In]
  fun SymAddrIncludeInlineTrace(hprocess : LibC::HANDLE, address : UInt64) : UInt32

  # Params # hprocess : LibC::HANDLE [In],address1 : UInt64 [In],inlinecontext1 : UInt32 [In],retaddress1 : UInt64 [In],address2 : UInt64 [In],retaddress2 : UInt64 [In]
  fun SymCompareInlineTrace(hprocess : LibC::HANDLE, address1 : UInt64, inlinecontext1 : UInt32, retaddress1 : UInt64, address2 : UInt64, retaddress2 : UInt64) : UInt32

  # Params # hprocess : LibC::HANDLE [In],startaddress : UInt64 [In],startcontext : UInt32 [In],startretaddress : UInt64 [In],curaddress : UInt64 [In],curcontext : UInt32* [In],curframeindex : UInt32* [In]
  fun SymQueryInlineTrace(hprocess : LibC::HANDLE, startaddress : UInt64, startcontext : UInt32, startretaddress : UInt64, curaddress : UInt64, curcontext : UInt32*, curframeindex : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modulename : PSTR [In],filename : PSTR [In],dwlinenumber : UInt32 [In],pldisplacement : Int32* [In],line : IMAGEHLP_LINE64* [In]
  fun SymGetLineFromName64(hprocess : LibC::HANDLE, modulename : PSTR, filename : PSTR, dwlinenumber : UInt32, pldisplacement : Int32*, line : IMAGEHLP_LINE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modulename : LibC::LPWSTR [In],filename : LibC::LPWSTR [In],dwlinenumber : UInt32 [In],pldisplacement : Int32* [In],line : IMAGEHLP_LINEW64* [In]
  fun SymGetLineFromNameW64(hprocess : LibC::HANDLE, modulename : LibC::LPWSTR, filename : LibC::LPWSTR, dwlinenumber : UInt32, pldisplacement : Int32*, line : IMAGEHLP_LINEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],line : IMAGEHLP_LINE64* [In]
  fun SymGetLineNext64(hprocess : LibC::HANDLE, line : IMAGEHLP_LINE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],line : IMAGEHLP_LINEW64* [In]
  fun SymGetLineNextW64(hprocess : LibC::HANDLE, line : IMAGEHLP_LINEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],line : IMAGEHLP_LINE64* [In]
  fun SymGetLinePrev64(hprocess : LibC::HANDLE, line : IMAGEHLP_LINE64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],line : IMAGEHLP_LINEW64* [In]
  fun SymGetLinePrevW64(hprocess : LibC::HANDLE, line : IMAGEHLP_LINEW64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modulename : PSTR [In],filename : PSTR [In],buffer : UInt64* [In],bufferlines : UInt32 [In]
  fun SymGetFileLineOffsets64(hprocess : LibC::HANDLE, modulename : PSTR, filename : PSTR, buffer : UInt64*, bufferlines : UInt32) : UInt32

  # Params # filename : PSTR [In],match : PSTR [In],filenamestop : PSTR* [In],matchstop : PSTR* [In]
  fun SymMatchFileName(filename : PSTR, match : PSTR, filenamestop : PSTR*, matchstop : PSTR*) : LibC::BOOL

  # Params # filename : LibC::LPWSTR [In],match : LibC::LPWSTR [In],filenamestop : LibC::LPWSTR* [In],matchstop : LibC::LPWSTR* [In]
  fun SymMatchFileNameW(filename : LibC::LPWSTR, match : LibC::LPWSTR, filenamestop : LibC::LPWSTR*, matchstop : LibC::LPWSTR*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],params : PSTR [In],filespec : PSTR [In],filepath : UInt8* [In],size : UInt32 [In]
  fun SymGetSourceFile(hprocess : LibC::HANDLE, base : UInt64, params : PSTR, filespec : PSTR, filepath : UInt8*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],params : LibC::LPWSTR [In],filespec : LibC::LPWSTR [In],filepath : Char* [In],size : UInt32 [In]
  fun SymGetSourceFileW(hprocess : LibC::HANDLE, base : UInt64, params : LibC::LPWSTR, filespec : LibC::LPWSTR, filepath : Char*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : PSTR [In],token : Void** [In],size : UInt32* [In]
  fun SymGetSourceFileToken(hprocess : LibC::HANDLE, base : UInt64, filespec : PSTR, token : Void**, size : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : PSTR [In],tokenname : PSTR [In],tokenparameters : PSTR [In],token : Void** [In],size : UInt32* [In]
  fun SymGetSourceFileTokenByTokenName(hprocess : LibC::HANDLE, base : UInt64, filespec : PSTR, tokenname : PSTR, tokenparameters : PSTR, token : Void**, size : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : LibC::LPWSTR [In],pchecksumtype : UInt32* [In],pchecksum : UInt8* [In],checksumsize : UInt32 [In],pactualbyteswritten : UInt32* [In]
  fun SymGetSourceFileChecksumW(hprocess : LibC::HANDLE, base : UInt64, filespec : LibC::LPWSTR, pchecksumtype : UInt32*, pchecksum : UInt8*, checksumsize : UInt32, pactualbyteswritten : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : PSTR [In],pchecksumtype : UInt32* [In],pchecksum : UInt8* [In],checksumsize : UInt32 [In],pactualbyteswritten : UInt32* [In]
  fun SymGetSourceFileChecksum(hprocess : LibC::HANDLE, base : UInt64, filespec : PSTR, pchecksumtype : UInt32*, pchecksum : UInt8*, checksumsize : UInt32, pactualbyteswritten : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : LibC::LPWSTR [In],token : Void** [In],size : UInt32* [In]
  fun SymGetSourceFileTokenW(hprocess : LibC::HANDLE, base : UInt64, filespec : LibC::LPWSTR, token : Void**, size : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : LibC::LPWSTR [In],tokenname : LibC::LPWSTR [In],tokenparameters : LibC::LPWSTR [In],token : Void** [In],size : UInt32* [In]
  fun SymGetSourceFileTokenByTokenNameW(hprocess : LibC::HANDLE, base : UInt64, filespec : LibC::LPWSTR, tokenname : LibC::LPWSTR, tokenparameters : LibC::LPWSTR, token : Void**, size : UInt32*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],params : PSTR [In],filepath : UInt8* [In],size : UInt32 [In]
  fun SymGetSourceFileFromToken(hprocess : LibC::HANDLE, token : Void*, params : PSTR, filepath : UInt8*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],tokenname : PSTR [In],params : PSTR [In],filepath : UInt8* [In],size : UInt32 [In]
  fun SymGetSourceFileFromTokenByTokenName(hprocess : LibC::HANDLE, token : Void*, tokenname : PSTR, params : PSTR, filepath : UInt8*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],params : LibC::LPWSTR [In],filepath : Char* [In],size : UInt32 [In]
  fun SymGetSourceFileFromTokenW(hprocess : LibC::HANDLE, token : Void*, params : LibC::LPWSTR, filepath : Char*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],tokenname : LibC::LPWSTR [In],params : LibC::LPWSTR [In],filepath : Char* [In],size : UInt32 [In]
  fun SymGetSourceFileFromTokenByTokenNameW(hprocess : LibC::HANDLE, token : Void*, tokenname : LibC::LPWSTR, params : LibC::LPWSTR, filepath : Char*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],params : PSTR [In],varname : PSTR [In],value : UInt8* [In],size : UInt32 [In]
  fun SymGetSourceVarFromToken(hprocess : LibC::HANDLE, token : Void*, params : PSTR, varname : PSTR, value : UInt8*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],token : Void* [In],params : LibC::LPWSTR [In],varname : LibC::LPWSTR [In],value : Char* [In],size : UInt32 [In]
  fun SymGetSourceVarFromTokenW(hprocess : LibC::HANDLE, token : Void*, params : LibC::LPWSTR, varname : LibC::LPWSTR, value : Char*, size : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],callback : PENUMSOURCEFILETOKENSCALLBACK [In]
  fun SymEnumSourceFileTokens(hprocess : LibC::HANDLE, base : UInt64, callback : PENUMSOURCEFILETOKENSCALLBACK) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],usersearchpath : PSTR [In],finvadeprocess : LibC::BOOL [In]
  fun SymInitialize(hprocess : LibC::HANDLE, usersearchpath : PSTR, finvadeprocess : LibC::BOOL) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],usersearchpath : LibC::LPWSTR [In],finvadeprocess : LibC::BOOL [In]
  # Commented out because function is part of Lib C
  #fun SymInitializeW(hprocess : LibC::HANDLE, usersearchpath : LibC::LPWSTR, finvadeprocess : LibC::BOOL) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : UInt8* [In],searchpathlength : UInt32 [In]
  fun SymGetSearchPath(hprocess : LibC::HANDLE, searchpatha : UInt8*, searchpathlength : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : Char* [In],searchpathlength : UInt32 [In]
  fun SymGetSearchPathW(hprocess : LibC::HANDLE, searchpatha : Char*, searchpathlength : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : PSTR [In]
  fun SymSetSearchPath(hprocess : LibC::HANDLE, searchpatha : PSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : LibC::LPWSTR [In]
  fun SymSetSearchPathW(hprocess : LibC::HANDLE, searchpatha : LibC::LPWSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],hfile : LibC::HANDLE [In],imagename : PSTR [In],modulename : PSTR [In],baseofdll : UInt64 [In],dllsize : UInt32 [In],data : MODLOAD_DATA* [In],flags : SYM_LOAD_FLAGS [In]
  fun SymLoadModuleEx(hprocess : LibC::HANDLE, hfile : LibC::HANDLE, imagename : PSTR, modulename : PSTR, baseofdll : UInt64, dllsize : UInt32, data : MODLOAD_DATA*, flags : SYM_LOAD_FLAGS) : UInt64

  # Params # hprocess : LibC::HANDLE [In],hfile : LibC::HANDLE [In],imagename : LibC::LPWSTR [In],modulename : LibC::LPWSTR [In],baseofdll : UInt64 [In],dllsize : UInt32 [In],data : MODLOAD_DATA* [In],flags : SYM_LOAD_FLAGS [In]
  fun SymLoadModuleExW(hprocess : LibC::HANDLE, hfile : LibC::HANDLE, imagename : LibC::LPWSTR, modulename : LibC::LPWSTR, baseofdll : UInt64, dllsize : UInt32, data : MODLOAD_DATA*, flags : SYM_LOAD_FLAGS) : UInt64

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In]
  fun SymUnloadModule64(hprocess : LibC::HANDLE, baseofdll : UInt64) : LibC::BOOL

  # Params # sym : IMAGEHLP_SYMBOL64* [In],undecname : UInt8* [In],undecnamelength : UInt32 [In]
  fun SymUnDName64(sym : IMAGEHLP_SYMBOL64*, undecname : UInt8*, undecnamelength : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],callbackfunction : PSYMBOL_REGISTERED_CALLBACK64 [In],usercontext : UInt64 [In]
  fun SymRegisterCallback64(hprocess : LibC::HANDLE, callbackfunction : PSYMBOL_REGISTERED_CALLBACK64, usercontext : UInt64) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],callbackfunction : PSYMBOL_REGISTERED_CALLBACK64 [In],usercontext : UInt64 [In]
  fun SymRegisterCallbackW64(hprocess : LibC::HANDLE, callbackfunction : PSYMBOL_REGISTERED_CALLBACK64, usercontext : UInt64) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],callbackfunction : PSYMBOL_FUNCENTRY_CALLBACK64 [In],usercontext : UInt64 [In]
  fun SymRegisterFunctionEntryCallback64(hprocess : LibC::HANDLE, callbackfunction : PSYMBOL_FUNCENTRY_CALLBACK64, usercontext : UInt64) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],stackframe : IMAGEHLP_STACK_FRAME* [In],context : Void* [In]
  fun SymSetContext(hprocess : LibC::HANDLE, stackframe : IMAGEHLP_STACK_FRAME*, context : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In]
  fun SymSetScopeFromAddr(hprocess : LibC::HANDLE, address : UInt64) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],inlinecontext : UInt32 [In]
  fun SymSetScopeFromInlineContext(hprocess : LibC::HANDLE, address : UInt64, inlinecontext : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In]
  fun SymSetScopeFromIndex(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32) : LibC::BOOL

  # Params # enumprocessescallback : PSYM_ENUMPROCESSES_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumProcesses(enumprocessescallback : PSYM_ENUMPROCESSES_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],displacement : UInt64* [In],symbol : SYMBOL_INFO* [In]
  fun SymFromAddr(hprocess : LibC::HANDLE, address : UInt64, displacement : UInt64*, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],displacement : UInt64* [In],symbol : SYMBOL_INFOW* [In]
  # Commented out because function is part of Lib C
  #fun SymFromAddrW(hprocess : LibC::HANDLE, address : UInt64, displacement : UInt64*, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],inlinecontext : UInt32 [In],displacement : UInt64* [In],symbol : SYMBOL_INFO* [In]
  fun SymFromInlineContext(hprocess : LibC::HANDLE, address : UInt64, inlinecontext : UInt32, displacement : UInt64*, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],inlinecontext : UInt32 [In],displacement : UInt64* [In],symbol : SYMBOL_INFOW* [In]
  fun SymFromInlineContextW(hprocess : LibC::HANDLE, address : UInt64, inlinecontext : UInt32, displacement : UInt64*, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],token : UInt32 [In],symbol : SYMBOL_INFO* [In]
  fun SymFromToken(hprocess : LibC::HANDLE, base : UInt64, token : UInt32, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],token : UInt32 [In],symbol : SYMBOL_INFOW* [In]
  fun SymFromTokenW(hprocess : LibC::HANDLE, base : UInt64, token : UInt32, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],si : SYMBOL_INFO* [In]
  fun SymNext(hprocess : LibC::HANDLE, si : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],siw : SYMBOL_INFOW* [In]
  fun SymNextW(hprocess : LibC::HANDLE, siw : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],si : SYMBOL_INFO* [In]
  fun SymPrev(hprocess : LibC::HANDLE, si : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],siw : SYMBOL_INFOW* [In]
  fun SymPrevW(hprocess : LibC::HANDLE, siw : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],name : PSTR [In],symbol : SYMBOL_INFO* [In]
  fun SymFromName(hprocess : LibC::HANDLE, name : PSTR, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],name : LibC::LPWSTR [In],symbol : SYMBOL_INFOW* [In]
  fun SymFromNameW(hprocess : LibC::HANDLE, name : LibC::LPWSTR, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : PSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumSymbols(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : PSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : PSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In],options : UInt32 [In]
  fun SymEnumSymbolsEx(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : PSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*, options : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : LibC::LPWSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumSymbolsW(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : LibC::LPWSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : LibC::LPWSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In],options : UInt32 [In]
  fun SymEnumSymbolsExW(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : LibC::LPWSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*, options : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumSymbolsForAddr(hprocess : LibC::HANDLE, address : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],address : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumSymbolsForAddrW(hprocess : LibC::HANDLE, address : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symtag : UInt32 [In],mask : PSTR [In],address : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In],options : UInt32 [In]
  fun SymSearch(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symtag : UInt32, mask : PSTR, address : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*, options : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symtag : UInt32 [In],mask : LibC::LPWSTR [In],address : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In],options : UInt32 [In]
  fun SymSearchW(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symtag : UInt32, mask : LibC::LPWSTR, address : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*, options : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symbol : SYMBOL_INFO* [In]
  fun SymGetScope(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symbol : SYMBOL_INFOW* [In]
  fun SymGetScopeW(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symbol : SYMBOL_INFO* [In]
  fun SymFromIndex(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],index : UInt32 [In],symbol : SYMBOL_INFOW* [In]
  fun SymFromIndexW(hprocess : LibC::HANDLE, baseofdll : UInt64, index : UInt32, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modbase : UInt64 [In],typeid : UInt32 [In],gettype : IMAGEHLP_SYMBOL_TYPE_INFO [In],pinfo : Void* [In]
  fun SymGetTypeInfo(hprocess : LibC::HANDLE, modbase : UInt64, typeid : UInt32, gettype : IMAGEHLP_SYMBOL_TYPE_INFO, pinfo : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],modbase : UInt64 [In],params : IMAGEHLP_GET_TYPE_INFO_PARAMS* [In]
  fun SymGetTypeInfoEx(hprocess : LibC::HANDLE, modbase : UInt64, params : IMAGEHLP_GET_TYPE_INFO_PARAMS*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumTypes(hprocess : LibC::HANDLE, baseofdll : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumTypesW(hprocess : LibC::HANDLE, baseofdll : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : PSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumTypesByName(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : PSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],mask : LibC::LPWSTR [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW [In],usercontext : Void* [In]
  fun SymEnumTypesByNameW(hprocess : LibC::HANDLE, baseofdll : UInt64, mask : LibC::LPWSTR, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACKW, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : PSTR [In],symbol : SYMBOL_INFO* [In]
  fun SymGetTypeFromName(hprocess : LibC::HANDLE, baseofdll : UInt64, name : PSTR, symbol : SYMBOL_INFO*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : LibC::LPWSTR [In],symbol : SYMBOL_INFOW* [In]
  fun SymGetTypeFromNameW(hprocess : LibC::HANDLE, baseofdll : UInt64, name : LibC::LPWSTR, symbol : SYMBOL_INFOW*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : PSTR [In],address : UInt64 [In],size : UInt32 [In],flags : UInt32 [In]
  fun SymAddSymbol(hprocess : LibC::HANDLE, baseofdll : UInt64, name : PSTR, address : UInt64, size : UInt32, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : LibC::LPWSTR [In],address : UInt64 [In],size : UInt32 [In],flags : UInt32 [In]
  fun SymAddSymbolW(hprocess : LibC::HANDLE, baseofdll : UInt64, name : LibC::LPWSTR, address : UInt64, size : UInt32, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : PSTR [In],address : UInt64 [In],flags : UInt32 [In]
  fun SymDeleteSymbol(hprocess : LibC::HANDLE, baseofdll : UInt64, name : PSTR, address : UInt64, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],name : LibC::LPWSTR [In],address : UInt64 [In],flags : UInt32 [In]
  fun SymDeleteSymbolW(hprocess : LibC::HANDLE, baseofdll : UInt64, name : LibC::LPWSTR, address : UInt64, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In]
  fun SymRefreshModuleList(hprocess : LibC::HANDLE) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],streamfile : PSTR [In],buffer : UInt8* [In],size : LibC::UINT_PTR [In]
  fun SymAddSourceStream(hprocess : LibC::HANDLE, base : UInt64, streamfile : PSTR, buffer : UInt8*, size : LibC::UINT_PTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],streamfile : PSTR [In],buffer : UInt8* [In],size : LibC::UINT_PTR [In]
  fun SymAddSourceStreamA(hprocess : LibC::HANDLE, base : UInt64, streamfile : PSTR, buffer : UInt8*, size : LibC::UINT_PTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],base : UInt64 [In],filespec : LibC::LPWSTR [In],buffer : UInt8* [In],size : LibC::UINT_PTR [In]
  fun SymAddSourceStreamW(hprocess : LibC::HANDLE, base : UInt64, filespec : LibC::LPWSTR, buffer : UInt8*, size : LibC::UINT_PTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],path : LibC::LPWSTR [In]
  fun SymSrvIsStoreW(hprocess : LibC::HANDLE, path : LibC::LPWSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],path : PSTR [In]
  fun SymSrvIsStore(hprocess : LibC::HANDLE, path : PSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],sympath : PSTR [In],type : PSTR [In],file1 : PSTR [In],file2 : PSTR [In]
  fun SymSrvDeltaName(hprocess : LibC::HANDLE, sympath : PSTR, type : PSTR, file1 : PSTR, file2 : PSTR) : PSTR

  # Params # hprocess : LibC::HANDLE [In],sympath : LibC::LPWSTR [In],type : LibC::LPWSTR [In],file1 : LibC::LPWSTR [In],file2 : LibC::LPWSTR [In]
  fun SymSrvDeltaNameW(hprocess : LibC::HANDLE, sympath : LibC::LPWSTR, type : LibC::LPWSTR, file1 : LibC::LPWSTR, file2 : LibC::LPWSTR) : LibC::LPWSTR

  # Params # hprocess : LibC::HANDLE [In],sympath : PSTR [In],node : PSTR [In],file : PSTR [In]
  fun SymSrvGetSupplement(hprocess : LibC::HANDLE, sympath : PSTR, node : PSTR, file : PSTR) : PSTR

  # Params # hprocess : LibC::HANDLE [In],sympath : LibC::LPWSTR [In],node : LibC::LPWSTR [In],file : LibC::LPWSTR [In]
  fun SymSrvGetSupplementW(hprocess : LibC::HANDLE, sympath : LibC::LPWSTR, node : LibC::LPWSTR, file : LibC::LPWSTR) : LibC::LPWSTR

  # Params # file : PSTR [In],id : Guid* [In],val1 : UInt32* [In],val2 : UInt32* [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexes(file : PSTR, id : Guid*, val1 : UInt32*, val2 : UInt32*, flags : UInt32) : LibC::BOOL

  # Params # file : LibC::LPWSTR [In],id : Guid* [In],val1 : UInt32* [In],val2 : UInt32* [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexesW(file : LibC::LPWSTR, id : Guid*, val1 : UInt32*, val2 : UInt32*, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],srvpath : LibC::LPWSTR [In],file : LibC::LPWSTR [In],index : Char* [In],size : LibC::UINT_PTR [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexStringW(hprocess : LibC::HANDLE, srvpath : LibC::LPWSTR, file : LibC::LPWSTR, index : Char*, size : LibC::UINT_PTR, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],srvpath : PSTR [In],file : PSTR [In],index : UInt8* [In],size : LibC::UINT_PTR [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexString(hprocess : LibC::HANDLE, srvpath : PSTR, file : PSTR, index : UInt8*, size : LibC::UINT_PTR, flags : UInt32) : LibC::BOOL

  # Params # file : PSTR [In],info : SYMSRV_INDEX_INFO* [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexInfo(file : PSTR, info : SYMSRV_INDEX_INFO*, flags : UInt32) : LibC::BOOL

  # Params # file : LibC::LPWSTR [In],info : SYMSRV_INDEX_INFOW* [In],flags : UInt32 [In]
  fun SymSrvGetFileIndexInfoW(file : LibC::LPWSTR, info : SYMSRV_INDEX_INFOW*, flags : UInt32) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],srvpath : PSTR [In],node : PSTR [In],file : PSTR [In],flags : UInt32 [In]
  fun SymSrvStoreSupplement(hprocess : LibC::HANDLE, srvpath : PSTR, node : PSTR, file : PSTR, flags : UInt32) : PSTR

  # Params # hprocess : LibC::HANDLE [In],sympath : LibC::LPWSTR [In],node : LibC::LPWSTR [In],file : LibC::LPWSTR [In],flags : UInt32 [In]
  fun SymSrvStoreSupplementW(hprocess : LibC::HANDLE, sympath : LibC::LPWSTR, node : LibC::LPWSTR, file : LibC::LPWSTR, flags : UInt32) : LibC::LPWSTR

  # Params # hprocess : LibC::HANDLE [In],srvpath : PSTR [In],file : PSTR [In],flags : SYM_SRV_STORE_FILE_FLAGS [In]
  fun SymSrvStoreFile(hprocess : LibC::HANDLE, srvpath : PSTR, file : PSTR, flags : SYM_SRV_STORE_FILE_FLAGS) : PSTR

  # Params # hprocess : LibC::HANDLE [In],srvpath : LibC::LPWSTR [In],file : LibC::LPWSTR [In],flags : SYM_SRV_STORE_FILE_FLAGS [In]
  fun SymSrvStoreFileW(hprocess : LibC::HANDLE, srvpath : LibC::LPWSTR, file : LibC::LPWSTR, flags : SYM_SRV_STORE_FILE_FLAGS) : LibC::LPWSTR

  # Params # hprocess : LibC::HANDLE [In],sympath : PSTR [In],imagefile : PSTR [In],type : IMAGEHLP_SF_TYPE [In],symbolfile : UInt8* [In],csymbolfile : LibC::UINT_PTR [In],dbgfile : UInt8* [In],cdbgfile : LibC::UINT_PTR [In]
  fun SymGetSymbolFile(hprocess : LibC::HANDLE, sympath : PSTR, imagefile : PSTR, type : IMAGEHLP_SF_TYPE, symbolfile : UInt8*, csymbolfile : LibC::UINT_PTR, dbgfile : UInt8*, cdbgfile : LibC::UINT_PTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],sympath : LibC::LPWSTR [In],imagefile : LibC::LPWSTR [In],type : IMAGEHLP_SF_TYPE [In],symbolfile : Char* [In],csymbolfile : LibC::UINT_PTR [In],dbgfile : Char* [In],cdbgfile : LibC::UINT_PTR [In]
  fun SymGetSymbolFileW(hprocess : LibC::HANDLE, sympath : LibC::LPWSTR, imagefile : LibC::LPWSTR, type : IMAGEHLP_SF_TYPE, symbolfile : Char*, csymbolfile : LibC::UINT_PTR, dbgfile : Char*, cdbgfile : LibC::UINT_PTR) : LibC::BOOL

  # Params # filename : PSTR [In],callback : PDBGHELP_CREATE_USER_DUMP_CALLBACK [In],userdata : Void* [In]
  fun DbgHelpCreateUserDump(filename : PSTR, callback : PDBGHELP_CREATE_USER_DUMP_CALLBACK, userdata : Void*) : LibC::BOOL

  # Params # filename : LibC::LPWSTR [In],callback : PDBGHELP_CREATE_USER_DUMP_CALLBACK [In],userdata : Void* [In]
  fun DbgHelpCreateUserDumpW(filename : LibC::LPWSTR, callback : PDBGHELP_CREATE_USER_DUMP_CALLBACK, userdata : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],qwaddr : UInt64 [In],pdwdisplacement : UInt64* [In],symbol : IMAGEHLP_SYMBOL64* [In]
  fun SymGetSymFromAddr64(hprocess : LibC::HANDLE, qwaddr : UInt64, pdwdisplacement : UInt64*, symbol : IMAGEHLP_SYMBOL64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],name : PSTR [In],symbol : IMAGEHLP_SYMBOL64* [In]
  fun SymGetSymFromName64(hprocess : LibC::HANDLE, name : PSTR, symbol : IMAGEHLP_SYMBOL64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : PSTR [In],filename : PSTR [In],id : Void* [In],two : UInt32 [In],three : UInt32 [In],flags : UInt32 [In],filepath : PSTR [In]
  fun FindFileInPath(hprocess : LibC::HANDLE, searchpatha : PSTR, filename : PSTR, id : Void*, two : UInt32, three : UInt32, flags : UInt32, filepath : PSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],searchpatha : PSTR [In],filename : PSTR [In],one : UInt32 [In],two : UInt32 [In],three : UInt32 [In],filepath : PSTR [In]
  fun FindFileInSearchPath(hprocess : LibC::HANDLE, searchpatha : PSTR, filename : PSTR, one : UInt32, two : UInt32, three : UInt32, filepath : PSTR) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK [In],usercontext : Void* [In]
  fun SymEnumSym(hprocess : LibC::HANDLE, baseofdll : UInt64, enumsymbolscallback : PSYM_ENUMERATESYMBOLS_CALLBACK, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],enumsymbolscallback : PSYM_ENUMSYMBOLS_CALLBACK64 [In],usercontext : Void* [In]
  fun SymEnumerateSymbols64(hprocess : LibC::HANDLE, baseofdll : UInt64, enumsymbolscallback : PSYM_ENUMSYMBOLS_CALLBACK64, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],baseofdll : UInt64 [In],enumsymbolscallback : PSYM_ENUMSYMBOLS_CALLBACK64W [In],usercontext : Void* [In]
  fun SymEnumerateSymbolsW64(hprocess : LibC::HANDLE, baseofdll : UInt64, enumsymbolscallback : PSYM_ENUMSYMBOLS_CALLBACK64W, usercontext : Void*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],hfile : LibC::HANDLE [In],imagename : PSTR [In],modulename : PSTR [In],baseofdll : UInt64 [In],sizeofdll : UInt32 [In]
  fun SymLoadModule64(hprocess : LibC::HANDLE, hfile : LibC::HANDLE, imagename : PSTR, modulename : PSTR, baseofdll : UInt64, sizeofdll : UInt32) : UInt64

  # Params # hprocess : LibC::HANDLE [In],symbol : IMAGEHLP_SYMBOL64* [In]
  fun SymGetSymNext64(hprocess : LibC::HANDLE, symbol : IMAGEHLP_SYMBOL64*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In],symbol : IMAGEHLP_SYMBOL64* [In]
  fun SymGetSymPrev64(hprocess : LibC::HANDLE, symbol : IMAGEHLP_SYMBOL64*) : LibC::BOOL

  # Params # lpstartaddress : LPCALL_BACK_USER_INTERRUPT_ROUTINE [In]
  fun SetCheckUserInterruptShared(lpstartaddress : LPCALL_BACK_USER_INTERRUPT_ROUTINE) : Void

  # Params # 
  fun GetSymLoadError : UInt32

  # Params # error : UInt32 [In]
  fun SetSymLoadError(error : UInt32) : Void

  # Params # hprocess : LibC::HANDLE [In],ploadmodule : LibC::LPWSTR [In],psymboldata : DBGHELP_DATA_REPORT_STRUCT* [In]
  fun ReportSymbolLoadSummary(hprocess : LibC::HANDLE, ploadmodule : LibC::LPWSTR, psymboldata : DBGHELP_DATA_REPORT_STRUCT*) : LibC::BOOL

  # Params # hprocess : LibC::HANDLE [In]
  fun RemoveInvalidModuleList(hprocess : LibC::HANDLE) : Void

  # Params # 
  fun RangeMapCreate : Void*

  # Params # rmaphandle : Void* [In]
  fun RangeMapFree(rmaphandle : Void*) : Void

  # Params # rmaphandle : Void* [In],imagename : LibC::LPWSTR [In],mappedimage : Void* [In],mappingbytes : UInt32 [In],imagebase : UInt64 [In],usertag : UInt64 [In],mappingflags : UInt32 [In]
  fun RangeMapAddPeImageSections(rmaphandle : Void*, imagename : LibC::LPWSTR, mappedimage : Void*, mappingbytes : UInt32, imagebase : UInt64, usertag : UInt64, mappingflags : UInt32) : LibC::BOOL

  # Params # rmaphandle : Void* [In],usertag : UInt64 [In]
  fun RangeMapRemove(rmaphandle : Void*, usertag : UInt64) : LibC::BOOL

  # Params # rmaphandle : Void* [In],offset : UInt64 [In],buffer : Void* [In],requestbytes : UInt32 [In],flags : UInt32 [In],donebytes : UInt32* [In]
  fun RangeMapRead(rmaphandle : Void*, offset : UInt64, buffer : Void*, requestbytes : UInt32, flags : UInt32, donebytes : UInt32*) : LibC::BOOL

  # Params # rmaphandle : Void* [In],offset : UInt64 [In],buffer : Void* [In],requestbytes : UInt32 [In],flags : UInt32 [In],donebytes : UInt32* [In]
  fun RangeMapWrite(rmaphandle : Void*, offset : UInt64, buffer : Void*, requestbytes : UInt32, flags : UInt32, donebytes : UInt32*) : LibC::BOOL

  # Params # utype : UInt32 [In]
  fun MessageBeep(utype : UInt32) : LibC::BOOL

  # Params # exitcode : Int32 [In]
  fun FatalExit(exitcode : Int32) : Void

  # Params # hthread : LibC::HANDLE [In],dwselector : UInt32 [In],lpselectorentry : LDT_ENTRY* [In]
  fun GetThreadSelectorEntry(hthread : LibC::HANDLE, dwselector : UInt32, lpselectorentry : LDT_ENTRY*) : LibC::BOOL

  # Params # hthread : LibC::HANDLE [In],dwselector : UInt32 [In],lpselectorentry : WOW64_LDT_ENTRY* [In]
  fun Wow64GetThreadSelectorEntry(hthread : LibC::HANDLE, dwselector : UInt32, lpselectorentry : WOW64_LDT_ENTRY*) : LibC::BOOL

  # Params # killonexit : LibC::BOOL [In]
  fun DebugSetProcessKillOnExit(killonexit : LibC::BOOL) : LibC::BOOL

  # Params # process : LibC::HANDLE [In]
  fun DebugBreakProcess(process : LibC::HANDLE) : LibC::BOOL

  # Params # dwflags : FORMAT_MESSAGE_OPTIONS [In],lpsource : Void* [In],dwmessageid : UInt32 [In],dwlanguageid : UInt32 [In],lpbuffer : PSTR [In],nsize : UInt32 [In],arguments : Int8** [In]
  # Commented out because function is part of Lib C
  #fun FormatMessageA(dwflags : FORMAT_MESSAGE_OPTIONS, lpsource : Void*, dwmessageid : UInt32, dwlanguageid : UInt32, lpbuffer : PSTR, nsize : UInt32, arguments : Int8**) : UInt32

  # Params # dwflags : FORMAT_MESSAGE_OPTIONS [In],lpsource : Void* [In],dwmessageid : UInt32 [In],dwlanguageid : UInt32 [In],lpbuffer : LibC::LPWSTR [In],nsize : UInt32 [In],arguments : Int8** [In]
  # Commented out because function is part of Lib C
  #fun FormatMessageW(dwflags : FORMAT_MESSAGE_OPTIONS, lpsource : Void*, dwmessageid : UInt32, dwlanguageid : UInt32, lpbuffer : LibC::LPWSTR, nsize : UInt32, arguments : Int8**) : UInt32

  # Params # destination : CONTEXT* [In],contextflags : UInt32 [In],source : CONTEXT* [In]
  fun CopyContext(destination : CONTEXT*, contextflags : UInt32, source : CONTEXT*) : LibC::BOOL

  # Params # buffer : Void* [In],contextflags : UInt32 [In],context : CONTEXT** [In],contextlength : UInt32* [In]
  fun InitializeContext(buffer : Void*, contextflags : UInt32, context : CONTEXT**, contextlength : UInt32*) : LibC::BOOL

  # Params # buffer : Void* [In],contextflags : UInt32 [In],context : CONTEXT** [In],contextlength : UInt32* [In],xstatecompactionmask : UInt64 [In]
  fun InitializeContext2(buffer : Void*, contextflags : UInt32, context : CONTEXT**, contextlength : UInt32*, xstatecompactionmask : UInt64) : LibC::BOOL

  # Params # 
  fun GetEnabledXStateFeatures : UInt64

  # Params # context : CONTEXT* [In],featuremask : UInt64* [In]
  fun GetXStateFeaturesMask(context : CONTEXT*, featuremask : UInt64*) : LibC::BOOL

  # Params # context : CONTEXT* [In],featureid : UInt32 [In],length : UInt32* [In]
  fun LocateXStateFeature(context : CONTEXT*, featureid : UInt32, length : UInt32*) : Void*

  # Params # context : CONTEXT* [In],featuremask : UInt64 [In]
  fun SetXStateFeaturesMask(context : CONTEXT*, featuremask : UInt64) : LibC::BOOL
end
struct LibWin32::IDebugAdvanced
  def query_interface(this : IDebugAdvanced*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAdvanced*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAdvanced*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_thread_context(this : IDebugAdvanced*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.get_thread_context.call(this, context, contextsize)
  end
  def set_thread_context(this : IDebugAdvanced*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_thread_context.call(this, context, contextsize)
  end
end
struct LibWin32::IDebugAdvanced2
  def query_interface(this : IDebugAdvanced2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAdvanced2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAdvanced2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_thread_context(this : IDebugAdvanced2*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.get_thread_context.call(this, context, contextsize)
  end
  def set_thread_context(this : IDebugAdvanced2*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_thread_context.call(this, context, contextsize)
  end
  def request(this : IDebugAdvanced2*, request : UInt32, inbuffer : Void*, inbuffersize : UInt32, outbuffer : Void*, outbuffersize : UInt32, outsize : UInt32*) : HRESULT
    @lpVtbl.value.request.call(this, request, inbuffer, inbuffersize, outbuffer, outbuffersize, outsize)
  end
  def get_source_file_information(this : IDebugAdvanced2*, which : UInt32, sourcefile : PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_information.call(this, which, sourcefile, arg64, arg32, buffer, buffersize, infosize)
  end
  def find_source_file_and_token(this : IDebugAdvanced2*, startelement : UInt32, modaddr : UInt64, file : PSTR, flags : UInt32, filetoken : Void*, filetokensize : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_and_token.call(this, startelement, modaddr, file, flags, filetoken, filetokensize, foundelement, buffer, buffersize, foundsize)
  end
  def get_symbol_information(this : IDebugAdvanced2*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : UInt8*, stringbuffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize)
  end
  def get_system_object_information(this : IDebugAdvanced2*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffersize, infosize)
  end
end
struct LibWin32::IDebugAdvanced3
  def query_interface(this : IDebugAdvanced3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAdvanced3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAdvanced3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_thread_context(this : IDebugAdvanced3*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.get_thread_context.call(this, context, contextsize)
  end
  def set_thread_context(this : IDebugAdvanced3*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_thread_context.call(this, context, contextsize)
  end
  def request(this : IDebugAdvanced3*, request : UInt32, inbuffer : Void*, inbuffersize : UInt32, outbuffer : Void*, outbuffersize : UInt32, outsize : UInt32*) : HRESULT
    @lpVtbl.value.request.call(this, request, inbuffer, inbuffersize, outbuffer, outbuffersize, outsize)
  end
  def get_source_file_information(this : IDebugAdvanced3*, which : UInt32, sourcefile : PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_information.call(this, which, sourcefile, arg64, arg32, buffer, buffersize, infosize)
  end
  def find_source_file_and_token(this : IDebugAdvanced3*, startelement : UInt32, modaddr : UInt64, file : PSTR, flags : UInt32, filetoken : Void*, filetokensize : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_and_token.call(this, startelement, modaddr, file, flags, filetoken, filetokensize, foundelement, buffer, buffersize, foundsize)
  end
  def get_symbol_information(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : UInt8*, stringbuffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize)
  end
  def get_system_object_information(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffersize, infosize)
  end
  def get_source_file_information_wide(this : IDebugAdvanced3*, which : UInt32, sourcefile : LibC::LPWSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_information_wide.call(this, which, sourcefile, arg64, arg32, buffer, buffersize, infosize)
  end
  def find_source_file_and_token_wide(this : IDebugAdvanced3*, startelement : UInt32, modaddr : UInt64, file : LibC::LPWSTR, flags : UInt32, filetoken : Void*, filetokensize : UInt32, foundelement : UInt32*, buffer : Char*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_and_token_wide.call(this, startelement, modaddr, file, flags, filetoken, filetokensize, foundelement, buffer, buffersize, foundsize)
  end
  def get_symbol_information_wide(this : IDebugAdvanced3*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : Char*, stringbuffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_information_wide.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize)
  end
end
struct LibWin32::IDebugAdvanced4
  def query_interface(this : IDebugAdvanced4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAdvanced4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAdvanced4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_thread_context(this : IDebugAdvanced4*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.get_thread_context.call(this, context, contextsize)
  end
  def set_thread_context(this : IDebugAdvanced4*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_thread_context.call(this, context, contextsize)
  end
  def request(this : IDebugAdvanced4*, request : UInt32, inbuffer : Void*, inbuffersize : UInt32, outbuffer : Void*, outbuffersize : UInt32, outsize : UInt32*) : HRESULT
    @lpVtbl.value.request.call(this, request, inbuffer, inbuffersize, outbuffer, outbuffersize, outsize)
  end
  def get_source_file_information(this : IDebugAdvanced4*, which : UInt32, sourcefile : PSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_information.call(this, which, sourcefile, arg64, arg32, buffer, buffersize, infosize)
  end
  def find_source_file_and_token(this : IDebugAdvanced4*, startelement : UInt32, modaddr : UInt64, file : PSTR, flags : UInt32, filetoken : Void*, filetokensize : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_and_token.call(this, startelement, modaddr, file, flags, filetoken, filetokensize, foundelement, buffer, buffersize, foundsize)
  end
  def get_symbol_information(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : UInt8*, stringbuffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_information.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize)
  end
  def get_system_object_information(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_object_information.call(this, which, arg64, arg32, buffer, buffersize, infosize)
  end
  def get_source_file_information_wide(this : IDebugAdvanced4*, which : UInt32, sourcefile : LibC::LPWSTR, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_information_wide.call(this, which, sourcefile, arg64, arg32, buffer, buffersize, infosize)
  end
  def find_source_file_and_token_wide(this : IDebugAdvanced4*, startelement : UInt32, modaddr : UInt64, file : LibC::LPWSTR, flags : UInt32, filetoken : Void*, filetokensize : UInt32, foundelement : UInt32*, buffer : Char*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_and_token_wide.call(this, startelement, modaddr, file, flags, filetoken, filetokensize, foundelement, buffer, buffersize, foundsize)
  end
  def get_symbol_information_wide(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : Char*, stringbuffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_information_wide.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize)
  end
  def get_symbol_information_wide_ex(this : IDebugAdvanced4*, which : UInt32, arg64 : UInt64, arg32 : UInt32, buffer : Void*, buffersize : UInt32, infosize : UInt32*, stringbuffer : Char*, stringbuffersize : UInt32, stringsize : UInt32*, pinfoex : SYMBOL_INFO_EX*) : HRESULT
    @lpVtbl.value.get_symbol_information_wide_ex.call(this, which, arg64, arg32, buffer, buffersize, infosize, stringbuffer, stringbuffersize, stringsize, pinfoex)
  end
end
struct LibWin32::IDebugBreakpoint
  def query_interface(this : IDebugBreakpoint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugBreakpoint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugBreakpoint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IDebugBreakpoint*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_id.call(this, id)
  end
  def get_type(this : IDebugBreakpoint*, breaktype : UInt32*, proctype : UInt32*) : HRESULT
    @lpVtbl.value.get_type.call(this, breaktype, proctype)
  end
  def get_adder(this : IDebugBreakpoint*, adder : IDebugClient*) : HRESULT
    @lpVtbl.value.get_adder.call(this, adder)
  end
  def get_flags(this : IDebugBreakpoint*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, flags)
  end
  def add_flags(this : IDebugBreakpoint*, flags : UInt32) : HRESULT
    @lpVtbl.value.add_flags.call(this, flags)
  end
  def remove_flags(this : IDebugBreakpoint*, flags : UInt32) : HRESULT
    @lpVtbl.value.remove_flags.call(this, flags)
  end
  def set_flags(this : IDebugBreakpoint*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, flags)
  end
  def get_offset(this : IDebugBreakpoint*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset.call(this, offset)
  end
  def set_offset(this : IDebugBreakpoint*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_offset.call(this, offset)
  end
  def get_data_parameters(this : IDebugBreakpoint*, size : UInt32*, accesstype : UInt32*) : HRESULT
    @lpVtbl.value.get_data_parameters.call(this, size, accesstype)
  end
  def set_data_parameters(this : IDebugBreakpoint*, size : UInt32, accesstype : UInt32) : HRESULT
    @lpVtbl.value.set_data_parameters.call(this, size, accesstype)
  end
  def get_pass_count(this : IDebugBreakpoint*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_pass_count.call(this, count)
  end
  def set_pass_count(this : IDebugBreakpoint*, count : UInt32) : HRESULT
    @lpVtbl.value.set_pass_count.call(this, count)
  end
  def get_current_pass_count(this : IDebugBreakpoint*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_current_pass_count.call(this, count)
  end
  def get_match_thread_id(this : IDebugBreakpoint*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_match_thread_id.call(this, id)
  end
  def set_match_thread_id(this : IDebugBreakpoint*, thread : UInt32) : HRESULT
    @lpVtbl.value.set_match_thread_id.call(this, thread)
  end
  def get_command(this : IDebugBreakpoint*, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_command.call(this, buffer, buffersize, commandsize)
  end
  def set_command(this : IDebugBreakpoint*, command : PSTR) : HRESULT
    @lpVtbl.value.set_command.call(this, command)
  end
  def get_offset_expression(this : IDebugBreakpoint*, buffer : UInt8*, buffersize : UInt32, expressionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_expression.call(this, buffer, buffersize, expressionsize)
  end
  def set_offset_expression(this : IDebugBreakpoint*, expression : PSTR) : HRESULT
    @lpVtbl.value.set_offset_expression.call(this, expression)
  end
  def get_parameters(this : IDebugBreakpoint*, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, params)
  end
end
struct LibWin32::IDebugBreakpoint2
  def query_interface(this : IDebugBreakpoint2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugBreakpoint2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugBreakpoint2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IDebugBreakpoint2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_id.call(this, id)
  end
  def get_type(this : IDebugBreakpoint2*, breaktype : UInt32*, proctype : UInt32*) : HRESULT
    @lpVtbl.value.get_type.call(this, breaktype, proctype)
  end
  def get_adder(this : IDebugBreakpoint2*, adder : IDebugClient*) : HRESULT
    @lpVtbl.value.get_adder.call(this, adder)
  end
  def get_flags(this : IDebugBreakpoint2*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, flags)
  end
  def add_flags(this : IDebugBreakpoint2*, flags : UInt32) : HRESULT
    @lpVtbl.value.add_flags.call(this, flags)
  end
  def remove_flags(this : IDebugBreakpoint2*, flags : UInt32) : HRESULT
    @lpVtbl.value.remove_flags.call(this, flags)
  end
  def set_flags(this : IDebugBreakpoint2*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, flags)
  end
  def get_offset(this : IDebugBreakpoint2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset.call(this, offset)
  end
  def set_offset(this : IDebugBreakpoint2*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_offset.call(this, offset)
  end
  def get_data_parameters(this : IDebugBreakpoint2*, size : UInt32*, accesstype : UInt32*) : HRESULT
    @lpVtbl.value.get_data_parameters.call(this, size, accesstype)
  end
  def set_data_parameters(this : IDebugBreakpoint2*, size : UInt32, accesstype : UInt32) : HRESULT
    @lpVtbl.value.set_data_parameters.call(this, size, accesstype)
  end
  def get_pass_count(this : IDebugBreakpoint2*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_pass_count.call(this, count)
  end
  def set_pass_count(this : IDebugBreakpoint2*, count : UInt32) : HRESULT
    @lpVtbl.value.set_pass_count.call(this, count)
  end
  def get_current_pass_count(this : IDebugBreakpoint2*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_current_pass_count.call(this, count)
  end
  def get_match_thread_id(this : IDebugBreakpoint2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_match_thread_id.call(this, id)
  end
  def set_match_thread_id(this : IDebugBreakpoint2*, thread : UInt32) : HRESULT
    @lpVtbl.value.set_match_thread_id.call(this, thread)
  end
  def get_command(this : IDebugBreakpoint2*, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_command.call(this, buffer, buffersize, commandsize)
  end
  def set_command(this : IDebugBreakpoint2*, command : PSTR) : HRESULT
    @lpVtbl.value.set_command.call(this, command)
  end
  def get_offset_expression(this : IDebugBreakpoint2*, buffer : UInt8*, buffersize : UInt32, expressionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_expression.call(this, buffer, buffersize, expressionsize)
  end
  def set_offset_expression(this : IDebugBreakpoint2*, expression : PSTR) : HRESULT
    @lpVtbl.value.set_offset_expression.call(this, expression)
  end
  def get_parameters(this : IDebugBreakpoint2*, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, params)
  end
  def get_command_wide(this : IDebugBreakpoint2*, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_command_wide.call(this, buffer, buffersize, commandsize)
  end
  def set_command_wide(this : IDebugBreakpoint2*, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_command_wide.call(this, command)
  end
  def get_offset_expression_wide(this : IDebugBreakpoint2*, buffer : Char*, buffersize : UInt32, expressionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_expression_wide.call(this, buffer, buffersize, expressionsize)
  end
  def set_offset_expression_wide(this : IDebugBreakpoint2*, expression : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_offset_expression_wide.call(this, expression)
  end
end
struct LibWin32::IDebugBreakpoint3
  def query_interface(this : IDebugBreakpoint3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugBreakpoint3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugBreakpoint3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IDebugBreakpoint3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_id.call(this, id)
  end
  def get_type(this : IDebugBreakpoint3*, breaktype : UInt32*, proctype : UInt32*) : HRESULT
    @lpVtbl.value.get_type.call(this, breaktype, proctype)
  end
  def get_adder(this : IDebugBreakpoint3*, adder : IDebugClient*) : HRESULT
    @lpVtbl.value.get_adder.call(this, adder)
  end
  def get_flags(this : IDebugBreakpoint3*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_flags.call(this, flags)
  end
  def add_flags(this : IDebugBreakpoint3*, flags : UInt32) : HRESULT
    @lpVtbl.value.add_flags.call(this, flags)
  end
  def remove_flags(this : IDebugBreakpoint3*, flags : UInt32) : HRESULT
    @lpVtbl.value.remove_flags.call(this, flags)
  end
  def set_flags(this : IDebugBreakpoint3*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_flags.call(this, flags)
  end
  def get_offset(this : IDebugBreakpoint3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset.call(this, offset)
  end
  def set_offset(this : IDebugBreakpoint3*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_offset.call(this, offset)
  end
  def get_data_parameters(this : IDebugBreakpoint3*, size : UInt32*, accesstype : UInt32*) : HRESULT
    @lpVtbl.value.get_data_parameters.call(this, size, accesstype)
  end
  def set_data_parameters(this : IDebugBreakpoint3*, size : UInt32, accesstype : UInt32) : HRESULT
    @lpVtbl.value.set_data_parameters.call(this, size, accesstype)
  end
  def get_pass_count(this : IDebugBreakpoint3*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_pass_count.call(this, count)
  end
  def set_pass_count(this : IDebugBreakpoint3*, count : UInt32) : HRESULT
    @lpVtbl.value.set_pass_count.call(this, count)
  end
  def get_current_pass_count(this : IDebugBreakpoint3*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_current_pass_count.call(this, count)
  end
  def get_match_thread_id(this : IDebugBreakpoint3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_match_thread_id.call(this, id)
  end
  def set_match_thread_id(this : IDebugBreakpoint3*, thread : UInt32) : HRESULT
    @lpVtbl.value.set_match_thread_id.call(this, thread)
  end
  def get_command(this : IDebugBreakpoint3*, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_command.call(this, buffer, buffersize, commandsize)
  end
  def set_command(this : IDebugBreakpoint3*, command : PSTR) : HRESULT
    @lpVtbl.value.set_command.call(this, command)
  end
  def get_offset_expression(this : IDebugBreakpoint3*, buffer : UInt8*, buffersize : UInt32, expressionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_expression.call(this, buffer, buffersize, expressionsize)
  end
  def set_offset_expression(this : IDebugBreakpoint3*, expression : PSTR) : HRESULT
    @lpVtbl.value.set_offset_expression.call(this, expression)
  end
  def get_parameters(this : IDebugBreakpoint3*, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, params)
  end
  def get_command_wide(this : IDebugBreakpoint3*, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_command_wide.call(this, buffer, buffersize, commandsize)
  end
  def set_command_wide(this : IDebugBreakpoint3*, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_command_wide.call(this, command)
  end
  def get_offset_expression_wide(this : IDebugBreakpoint3*, buffer : Char*, buffersize : UInt32, expressionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_expression_wide.call(this, buffer, buffersize, expressionsize)
  end
  def set_offset_expression_wide(this : IDebugBreakpoint3*, expression : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_offset_expression_wide.call(this, expression)
  end
  def get_guid(this : IDebugBreakpoint3*, guid : Guid*) : HRESULT
    @lpVtbl.value.get_guid.call(this, guid)
  end
end
struct LibWin32::IDebugClient
  def query_interface(this : IDebugClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
end
struct LibWin32::IDebugClient2
  def query_interface(this : IDebugClient2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient2*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient2*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient2*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient2*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient2*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient2*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient2*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient2*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient2*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient2*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient2*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient2*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient2*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient2*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient2*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient2*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient2*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient2*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient2*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient2*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient2*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient2*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient2*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient2*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient2*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient2*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient2*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient2*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient2*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient2*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient2*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient2*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient2*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient2*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient2*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient2*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient2*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient2*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient2*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient2*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient2*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient2*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient2*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient2*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient2*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient2*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient2*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
end
struct LibWin32::IDebugClient3
  def query_interface(this : IDebugClient3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient3*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient3*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient3*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient3*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient3*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient3*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient3*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient3*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient3*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient3*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient3*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient3*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient3*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient3*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient3*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient3*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient3*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient3*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient3*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient3*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient3*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient3*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient3*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient3*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient3*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient3*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient3*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient3*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient3*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient3*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient3*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient3*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient3*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient3*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient3*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient3*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient3*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient3*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient3*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient3*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient3*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient3*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient3*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient3*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient3*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient3*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient3*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient3*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient3*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient3*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient3*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
end
struct LibWin32::IDebugClient4
  def query_interface(this : IDebugClient4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient4*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient4*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient4*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient4*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient4*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient4*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient4*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient4*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient4*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient4*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient4*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient4*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient4*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient4*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient4*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient4*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient4*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient4*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient4*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient4*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient4*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient4*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient4*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient4*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient4*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient4*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient4*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient4*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient4*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient4*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient4*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient4*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient4*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient4*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient4*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient4*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient4*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient4*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient4*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient4*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient4*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient4*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient4*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient4*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient4*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient4*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient4*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient4*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient4*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient4*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient4*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
  def open_dump_file_wide(this : IDebugClient4*, filename : LibC::LPWSTR, filehandle : UInt64) : HRESULT
    @lpVtbl.value.open_dump_file_wide.call(this, filename, filehandle)
  end
  def write_dump_file_wide(this : IDebugClient4*, filename : LibC::LPWSTR, filehandle : UInt64, qualifier : UInt32, formatflags : UInt32, comment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_dump_file_wide.call(this, filename, filehandle, qualifier, formatflags, comment)
  end
  def add_dump_information_file_wide(this : IDebugClient4*, filename : LibC::LPWSTR, filehandle : UInt64, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file_wide.call(this, filename, filehandle, type)
  end
  def get_number_dump_files(this : IDebugClient4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_dump_files.call(this, number)
  end
  def get_dump_file(this : IDebugClient4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def get_dump_file_wide(this : IDebugClient4*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file_wide.call(this, index, buffer, buffersize, namesize, handle, type)
  end
end
struct LibWin32::IDebugClient5
  def query_interface(this : IDebugClient5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient5*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient5*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient5*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient5*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient5*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient5*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient5*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient5*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient5*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient5*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient5*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient5*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient5*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient5*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient5*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient5*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient5*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient5*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient5*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient5*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient5*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient5*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient5*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient5*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient5*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient5*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient5*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient5*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient5*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient5*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient5*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient5*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient5*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient5*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient5*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient5*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient5*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient5*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient5*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient5*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient5*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient5*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient5*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient5*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient5*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient5*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient5*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient5*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient5*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient5*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient5*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
  def open_dump_file_wide(this : IDebugClient5*, filename : LibC::LPWSTR, filehandle : UInt64) : HRESULT
    @lpVtbl.value.open_dump_file_wide.call(this, filename, filehandle)
  end
  def write_dump_file_wide(this : IDebugClient5*, filename : LibC::LPWSTR, filehandle : UInt64, qualifier : UInt32, formatflags : UInt32, comment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_dump_file_wide.call(this, filename, filehandle, qualifier, formatflags, comment)
  end
  def add_dump_information_file_wide(this : IDebugClient5*, filename : LibC::LPWSTR, filehandle : UInt64, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file_wide.call(this, filename, filehandle, type)
  end
  def get_number_dump_files(this : IDebugClient5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_dump_files.call(this, number)
  end
  def get_dump_file(this : IDebugClient5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def get_dump_file_wide(this : IDebugClient5*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file_wide.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def attach_kernel_wide(this : IDebugClient5*, flags : UInt32, connectoptions : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.attach_kernel_wide.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options_wide(this : IDebugClient5*, buffer : Char*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options_wide.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options_wide(this : IDebugClient5*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options_wide.call(this, options)
  end
  def start_process_server_wide(this : IDebugClient5*, flags : UInt32, options : LibC::LPWSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server_wide.call(this, flags, options, reserved)
  end
  def connect_process_server_wide(this : IDebugClient5*, remoteoptions : LibC::LPWSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server_wide.call(this, remoteoptions, server)
  end
  def start_server_wide(this : IDebugClient5*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.start_server_wide.call(this, options)
  end
  def output_servers_wide(this : IDebugClient5*, outputcontrol : UInt32, machine : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers_wide.call(this, outputcontrol, machine, flags)
  end
  def get_output_callbacks_wide(this : IDebugClient5*, callbacks : IDebugOutputCallbacksWide*) : HRESULT
    @lpVtbl.value.get_output_callbacks_wide.call(this, callbacks)
  end
  def set_output_callbacks_wide(this : IDebugClient5*, callbacks : IDebugOutputCallbacksWide) : HRESULT
    @lpVtbl.value.set_output_callbacks_wide.call(this, callbacks)
  end
  def get_output_line_prefix_wide(this : IDebugClient5*, buffer : Char*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix_wide.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix_wide(this : IDebugClient5*, prefix : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix_wide.call(this, prefix)
  end
  def get_identity_wide(this : IDebugClient5*, buffer : Char*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity_wide.call(this, buffer, buffersize, identitysize)
  end
  def output_identity_wide(this : IDebugClient5*, outputcontrol : UInt32, flags : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_identity_wide.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks_wide(this : IDebugClient5*, callbacks : IDebugEventCallbacksWide*) : HRESULT
    @lpVtbl.value.get_event_callbacks_wide.call(this, callbacks)
  end
  def set_event_callbacks_wide(this : IDebugClient5*, callbacks : IDebugEventCallbacksWide) : HRESULT
    @lpVtbl.value.set_event_callbacks_wide.call(this, callbacks)
  end
  def create_process2(this : IDebugClient5*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR) : HRESULT
    @lpVtbl.value.create_process2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process2_wide(this : IDebugClient5*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_process2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process_and_attach2(this : IDebugClient5*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def create_process_and_attach2_wide(this : IDebugClient5*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def push_output_line_prefix(this : IDebugClient5*, newprefix : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix.call(this, newprefix, handle)
  end
  def push_output_line_prefix_wide(this : IDebugClient5*, newprefix : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix_wide.call(this, newprefix, handle)
  end
  def pop_output_line_prefix(this : IDebugClient5*, handle : UInt64) : HRESULT
    @lpVtbl.value.pop_output_line_prefix.call(this, handle)
  end
  def get_number_input_callbacks(this : IDebugClient5*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_input_callbacks.call(this, count)
  end
  def get_number_output_callbacks(this : IDebugClient5*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_output_callbacks.call(this, count)
  end
  def get_number_event_callbacks(this : IDebugClient5*, eventflags : UInt32, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_callbacks.call(this, eventflags, count)
  end
  def get_quit_lock_string(this : IDebugClient5*, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string(this : IDebugClient5*, string : PSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string.call(this, string)
  end
  def get_quit_lock_string_wide(this : IDebugClient5*, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string_wide.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string_wide(this : IDebugClient5*, string : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string_wide.call(this, string)
  end
end
struct LibWin32::IDebugClient6
  def query_interface(this : IDebugClient6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient6*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient6*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient6*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient6*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient6*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient6*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient6*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient6*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient6*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient6*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient6*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient6*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient6*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient6*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient6*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient6*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient6*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient6*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient6*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient6*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient6*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient6*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient6*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient6*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient6*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient6*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient6*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient6*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient6*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient6*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient6*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient6*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient6*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient6*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient6*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient6*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient6*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient6*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient6*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient6*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient6*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient6*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient6*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient6*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient6*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient6*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient6*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient6*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient6*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient6*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient6*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
  def open_dump_file_wide(this : IDebugClient6*, filename : LibC::LPWSTR, filehandle : UInt64) : HRESULT
    @lpVtbl.value.open_dump_file_wide.call(this, filename, filehandle)
  end
  def write_dump_file_wide(this : IDebugClient6*, filename : LibC::LPWSTR, filehandle : UInt64, qualifier : UInt32, formatflags : UInt32, comment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_dump_file_wide.call(this, filename, filehandle, qualifier, formatflags, comment)
  end
  def add_dump_information_file_wide(this : IDebugClient6*, filename : LibC::LPWSTR, filehandle : UInt64, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file_wide.call(this, filename, filehandle, type)
  end
  def get_number_dump_files(this : IDebugClient6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_dump_files.call(this, number)
  end
  def get_dump_file(this : IDebugClient6*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def get_dump_file_wide(this : IDebugClient6*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file_wide.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def attach_kernel_wide(this : IDebugClient6*, flags : UInt32, connectoptions : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.attach_kernel_wide.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options_wide(this : IDebugClient6*, buffer : Char*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options_wide.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options_wide(this : IDebugClient6*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options_wide.call(this, options)
  end
  def start_process_server_wide(this : IDebugClient6*, flags : UInt32, options : LibC::LPWSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server_wide.call(this, flags, options, reserved)
  end
  def connect_process_server_wide(this : IDebugClient6*, remoteoptions : LibC::LPWSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server_wide.call(this, remoteoptions, server)
  end
  def start_server_wide(this : IDebugClient6*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.start_server_wide.call(this, options)
  end
  def output_servers_wide(this : IDebugClient6*, outputcontrol : UInt32, machine : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers_wide.call(this, outputcontrol, machine, flags)
  end
  def get_output_callbacks_wide(this : IDebugClient6*, callbacks : IDebugOutputCallbacksWide*) : HRESULT
    @lpVtbl.value.get_output_callbacks_wide.call(this, callbacks)
  end
  def set_output_callbacks_wide(this : IDebugClient6*, callbacks : IDebugOutputCallbacksWide) : HRESULT
    @lpVtbl.value.set_output_callbacks_wide.call(this, callbacks)
  end
  def get_output_line_prefix_wide(this : IDebugClient6*, buffer : Char*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix_wide.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix_wide(this : IDebugClient6*, prefix : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix_wide.call(this, prefix)
  end
  def get_identity_wide(this : IDebugClient6*, buffer : Char*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity_wide.call(this, buffer, buffersize, identitysize)
  end
  def output_identity_wide(this : IDebugClient6*, outputcontrol : UInt32, flags : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_identity_wide.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks_wide(this : IDebugClient6*, callbacks : IDebugEventCallbacksWide*) : HRESULT
    @lpVtbl.value.get_event_callbacks_wide.call(this, callbacks)
  end
  def set_event_callbacks_wide(this : IDebugClient6*, callbacks : IDebugEventCallbacksWide) : HRESULT
    @lpVtbl.value.set_event_callbacks_wide.call(this, callbacks)
  end
  def create_process2(this : IDebugClient6*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR) : HRESULT
    @lpVtbl.value.create_process2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process2_wide(this : IDebugClient6*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_process2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process_and_attach2(this : IDebugClient6*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def create_process_and_attach2_wide(this : IDebugClient6*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def push_output_line_prefix(this : IDebugClient6*, newprefix : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix.call(this, newprefix, handle)
  end
  def push_output_line_prefix_wide(this : IDebugClient6*, newprefix : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix_wide.call(this, newprefix, handle)
  end
  def pop_output_line_prefix(this : IDebugClient6*, handle : UInt64) : HRESULT
    @lpVtbl.value.pop_output_line_prefix.call(this, handle)
  end
  def get_number_input_callbacks(this : IDebugClient6*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_input_callbacks.call(this, count)
  end
  def get_number_output_callbacks(this : IDebugClient6*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_output_callbacks.call(this, count)
  end
  def get_number_event_callbacks(this : IDebugClient6*, eventflags : UInt32, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_callbacks.call(this, eventflags, count)
  end
  def get_quit_lock_string(this : IDebugClient6*, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string(this : IDebugClient6*, string : PSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string.call(this, string)
  end
  def get_quit_lock_string_wide(this : IDebugClient6*, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string_wide.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string_wide(this : IDebugClient6*, string : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string_wide.call(this, string)
  end
  def set_event_context_callbacks(this : IDebugClient6*, callbacks : IDebugEventContextCallbacks) : HRESULT
    @lpVtbl.value.set_event_context_callbacks.call(this, callbacks)
  end
end
struct LibWin32::IDebugClient7
  def query_interface(this : IDebugClient7*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient7*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient7*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient7*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient7*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient7*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient7*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient7*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient7*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient7*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient7*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient7*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient7*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient7*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient7*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient7*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient7*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient7*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient7*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient7*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient7*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient7*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient7*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient7*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient7*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient7*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient7*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient7*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient7*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient7*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient7*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient7*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient7*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient7*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient7*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient7*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient7*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient7*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient7*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient7*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient7*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient7*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient7*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient7*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient7*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient7*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient7*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient7*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient7*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient7*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient7*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient7*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient7*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient7*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
  def open_dump_file_wide(this : IDebugClient7*, filename : LibC::LPWSTR, filehandle : UInt64) : HRESULT
    @lpVtbl.value.open_dump_file_wide.call(this, filename, filehandle)
  end
  def write_dump_file_wide(this : IDebugClient7*, filename : LibC::LPWSTR, filehandle : UInt64, qualifier : UInt32, formatflags : UInt32, comment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_dump_file_wide.call(this, filename, filehandle, qualifier, formatflags, comment)
  end
  def add_dump_information_file_wide(this : IDebugClient7*, filename : LibC::LPWSTR, filehandle : UInt64, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file_wide.call(this, filename, filehandle, type)
  end
  def get_number_dump_files(this : IDebugClient7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_dump_files.call(this, number)
  end
  def get_dump_file(this : IDebugClient7*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def get_dump_file_wide(this : IDebugClient7*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file_wide.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def attach_kernel_wide(this : IDebugClient7*, flags : UInt32, connectoptions : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.attach_kernel_wide.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options_wide(this : IDebugClient7*, buffer : Char*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options_wide.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options_wide(this : IDebugClient7*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options_wide.call(this, options)
  end
  def start_process_server_wide(this : IDebugClient7*, flags : UInt32, options : LibC::LPWSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server_wide.call(this, flags, options, reserved)
  end
  def connect_process_server_wide(this : IDebugClient7*, remoteoptions : LibC::LPWSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server_wide.call(this, remoteoptions, server)
  end
  def start_server_wide(this : IDebugClient7*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.start_server_wide.call(this, options)
  end
  def output_servers_wide(this : IDebugClient7*, outputcontrol : UInt32, machine : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers_wide.call(this, outputcontrol, machine, flags)
  end
  def get_output_callbacks_wide(this : IDebugClient7*, callbacks : IDebugOutputCallbacksWide*) : HRESULT
    @lpVtbl.value.get_output_callbacks_wide.call(this, callbacks)
  end
  def set_output_callbacks_wide(this : IDebugClient7*, callbacks : IDebugOutputCallbacksWide) : HRESULT
    @lpVtbl.value.set_output_callbacks_wide.call(this, callbacks)
  end
  def get_output_line_prefix_wide(this : IDebugClient7*, buffer : Char*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix_wide.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix_wide(this : IDebugClient7*, prefix : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix_wide.call(this, prefix)
  end
  def get_identity_wide(this : IDebugClient7*, buffer : Char*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity_wide.call(this, buffer, buffersize, identitysize)
  end
  def output_identity_wide(this : IDebugClient7*, outputcontrol : UInt32, flags : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_identity_wide.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks_wide(this : IDebugClient7*, callbacks : IDebugEventCallbacksWide*) : HRESULT
    @lpVtbl.value.get_event_callbacks_wide.call(this, callbacks)
  end
  def set_event_callbacks_wide(this : IDebugClient7*, callbacks : IDebugEventCallbacksWide) : HRESULT
    @lpVtbl.value.set_event_callbacks_wide.call(this, callbacks)
  end
  def create_process2(this : IDebugClient7*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR) : HRESULT
    @lpVtbl.value.create_process2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process2_wide(this : IDebugClient7*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_process2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process_and_attach2(this : IDebugClient7*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def create_process_and_attach2_wide(this : IDebugClient7*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def push_output_line_prefix(this : IDebugClient7*, newprefix : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix.call(this, newprefix, handle)
  end
  def push_output_line_prefix_wide(this : IDebugClient7*, newprefix : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix_wide.call(this, newprefix, handle)
  end
  def pop_output_line_prefix(this : IDebugClient7*, handle : UInt64) : HRESULT
    @lpVtbl.value.pop_output_line_prefix.call(this, handle)
  end
  def get_number_input_callbacks(this : IDebugClient7*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_input_callbacks.call(this, count)
  end
  def get_number_output_callbacks(this : IDebugClient7*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_output_callbacks.call(this, count)
  end
  def get_number_event_callbacks(this : IDebugClient7*, eventflags : UInt32, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_callbacks.call(this, eventflags, count)
  end
  def get_quit_lock_string(this : IDebugClient7*, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string(this : IDebugClient7*, string : PSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string.call(this, string)
  end
  def get_quit_lock_string_wide(this : IDebugClient7*, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string_wide.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string_wide(this : IDebugClient7*, string : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string_wide.call(this, string)
  end
  def set_event_context_callbacks(this : IDebugClient7*, callbacks : IDebugEventContextCallbacks) : HRESULT
    @lpVtbl.value.set_event_context_callbacks.call(this, callbacks)
  end
  def set_client_context(this : IDebugClient7*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_client_context.call(this, context, contextsize)
  end
end
struct LibWin32::IDebugClient8
  def query_interface(this : IDebugClient8*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugClient8*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugClient8*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def attach_kernel(this : IDebugClient8*, flags : UInt32, connectoptions : PSTR) : HRESULT
    @lpVtbl.value.attach_kernel.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options(this : IDebugClient8*, buffer : UInt8*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options(this : IDebugClient8*, options : PSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options.call(this, options)
  end
  def start_process_server(this : IDebugClient8*, flags : UInt32, options : PSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server.call(this, flags, options, reserved)
  end
  def connect_process_server(this : IDebugClient8*, remoteoptions : PSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server.call(this, remoteoptions, server)
  end
  def disconnect_process_server(this : IDebugClient8*, server : UInt64) : HRESULT
    @lpVtbl.value.disconnect_process_server.call(this, server)
  end
  def get_running_process_system_ids(this : IDebugClient8*, server : UInt64, ids : UInt32*, count : UInt32, actualcount : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_ids.call(this, server, ids, count, actualcount)
  end
  def get_running_process_system_id_by_executable_name(this : IDebugClient8*, server : UInt64, exename : PSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name.call(this, server, exename, flags, id)
  end
  def get_running_process_description(this : IDebugClient8*, server : UInt64, systemid : UInt32, flags : UInt32, exename : UInt8*, exenamesize : UInt32, actualexenamesize : UInt32*, description : UInt8*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def attach_process(this : IDebugClient8*, server : UInt64, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.attach_process.call(this, server, processid, attachflags)
  end
  def create_process_a(this : IDebugClient8*, server : UInt64, commandline : PSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, server, commandline, createflags)
  end
  def create_process_and_attach(this : IDebugClient8*, server : UInt64, commandline : PSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach.call(this, server, commandline, createflags, processid, attachflags)
  end
  def get_process_options(this : IDebugClient8*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_process_options.call(this, options)
  end
  def add_process_options(this : IDebugClient8*, options : UInt32) : HRESULT
    @lpVtbl.value.add_process_options.call(this, options)
  end
  def remove_process_options(this : IDebugClient8*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_process_options.call(this, options)
  end
  def set_process_options(this : IDebugClient8*, options : UInt32) : HRESULT
    @lpVtbl.value.set_process_options.call(this, options)
  end
  def open_dump_file(this : IDebugClient8*, dumpfile : PSTR) : HRESULT
    @lpVtbl.value.open_dump_file.call(this, dumpfile)
  end
  def write_dump_file(this : IDebugClient8*, dumpfile : PSTR, qualifier : UInt32) : HRESULT
    @lpVtbl.value.write_dump_file.call(this, dumpfile, qualifier)
  end
  def connect_session(this : IDebugClient8*, flags : UInt32, historylimit : UInt32) : HRESULT
    @lpVtbl.value.connect_session.call(this, flags, historylimit)
  end
  def start_server(this : IDebugClient8*, options : PSTR) : HRESULT
    @lpVtbl.value.start_server.call(this, options)
  end
  def output_servers(this : IDebugClient8*, outputcontrol : UInt32, machine : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers.call(this, outputcontrol, machine, flags)
  end
  def terminate_processes(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.terminate_processes.call(this)
  end
  def detach_processes(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.detach_processes.call(this)
  end
  def end_session(this : IDebugClient8*, flags : UInt32) : HRESULT
    @lpVtbl.value.end_session.call(this, flags)
  end
  def get_exit_code(this : IDebugClient8*, code : UInt32*) : HRESULT
    @lpVtbl.value.get_exit_code.call(this, code)
  end
  def dispatch_callbacks(this : IDebugClient8*, timeout : UInt32) : HRESULT
    @lpVtbl.value.dispatch_callbacks.call(this, timeout)
  end
  def exit_dispatch(this : IDebugClient8*, client : IDebugClient) : HRESULT
    @lpVtbl.value.exit_dispatch.call(this, client)
  end
  def create_client(this : IDebugClient8*, client : IDebugClient*) : HRESULT
    @lpVtbl.value.create_client.call(this, client)
  end
  def get_input_callbacks(this : IDebugClient8*, callbacks : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.get_input_callbacks.call(this, callbacks)
  end
  def set_input_callbacks(this : IDebugClient8*, callbacks : IDebugInputCallbacks) : HRESULT
    @lpVtbl.value.set_input_callbacks.call(this, callbacks)
  end
  def get_output_callbacks(this : IDebugClient8*, callbacks : IDebugOutputCallbacks*) : HRESULT
    @lpVtbl.value.get_output_callbacks.call(this, callbacks)
  end
  def set_output_callbacks(this : IDebugClient8*, callbacks : IDebugOutputCallbacks) : HRESULT
    @lpVtbl.value.set_output_callbacks.call(this, callbacks)
  end
  def get_output_mask(this : IDebugClient8*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_output_mask.call(this, mask)
  end
  def set_output_mask(this : IDebugClient8*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_output_mask.call(this, mask)
  end
  def get_other_output_mask(this : IDebugClient8*, client : IDebugClient, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_other_output_mask.call(this, client, mask)
  end
  def set_other_output_mask(this : IDebugClient8*, client : IDebugClient, mask : UInt32) : HRESULT
    @lpVtbl.value.set_other_output_mask.call(this, client, mask)
  end
  def get_output_width(this : IDebugClient8*, columns : UInt32*) : HRESULT
    @lpVtbl.value.get_output_width.call(this, columns)
  end
  def set_output_width(this : IDebugClient8*, columns : UInt32) : HRESULT
    @lpVtbl.value.set_output_width.call(this, columns)
  end
  def get_output_line_prefix(this : IDebugClient8*, buffer : UInt8*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix(this : IDebugClient8*, prefix : PSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix.call(this, prefix)
  end
  def get_identity(this : IDebugClient8*, buffer : UInt8*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity.call(this, buffer, buffersize, identitysize)
  end
  def output_identity(this : IDebugClient8*, outputcontrol : UInt32, flags : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_identity.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks(this : IDebugClient8*, callbacks : IDebugEventCallbacks*) : HRESULT
    @lpVtbl.value.get_event_callbacks.call(this, callbacks)
  end
  def set_event_callbacks(this : IDebugClient8*, callbacks : IDebugEventCallbacks) : HRESULT
    @lpVtbl.value.set_event_callbacks.call(this, callbacks)
  end
  def flush_callbacks(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.flush_callbacks.call(this)
  end
  def write_dump_file2(this : IDebugClient8*, dumpfile : PSTR, qualifier : UInt32, formatflags : UInt32, comment : PSTR) : HRESULT
    @lpVtbl.value.write_dump_file2.call(this, dumpfile, qualifier, formatflags, comment)
  end
  def add_dump_information_file(this : IDebugClient8*, infofile : PSTR, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file.call(this, infofile, type)
  end
  def end_process_server(this : IDebugClient8*, server : UInt64) : HRESULT
    @lpVtbl.value.end_process_server.call(this, server)
  end
  def wait_for_process_server_end(this : IDebugClient8*, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_process_server_end.call(this, timeout)
  end
  def is_kernel_debugger_enabled(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.is_kernel_debugger_enabled.call(this)
  end
  def terminate_current_process(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.terminate_current_process.call(this)
  end
  def detach_current_process(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.detach_current_process.call(this)
  end
  def abandon_current_process(this : IDebugClient8*) : HRESULT
    @lpVtbl.value.abandon_current_process.call(this)
  end
  def get_running_process_system_id_by_executable_name_wide(this : IDebugClient8*, server : UInt64, exename : LibC::LPWSTR, flags : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_system_id_by_executable_name_wide.call(this, server, exename, flags, id)
  end
  def get_running_process_description_wide(this : IDebugClient8*, server : UInt64, systemid : UInt32, flags : UInt32, exename : Char*, exenamesize : UInt32, actualexenamesize : UInt32*, description : Char*, descriptionsize : UInt32, actualdescriptionsize : UInt32*) : HRESULT
    @lpVtbl.value.get_running_process_description_wide.call(this, server, systemid, flags, exename, exenamesize, actualexenamesize, description, descriptionsize, actualdescriptionsize)
  end
  def create_process_wide(this : IDebugClient8*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_wide.call(this, server, commandline, createflags)
  end
  def create_process_and_attach_wide(this : IDebugClient8*, server : UInt64, commandline : LibC::LPWSTR, createflags : UInt32, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach_wide.call(this, server, commandline, createflags, processid, attachflags)
  end
  def open_dump_file_wide(this : IDebugClient8*, filename : LibC::LPWSTR, filehandle : UInt64) : HRESULT
    @lpVtbl.value.open_dump_file_wide.call(this, filename, filehandle)
  end
  def write_dump_file_wide(this : IDebugClient8*, filename : LibC::LPWSTR, filehandle : UInt64, qualifier : UInt32, formatflags : UInt32, comment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_dump_file_wide.call(this, filename, filehandle, qualifier, formatflags, comment)
  end
  def add_dump_information_file_wide(this : IDebugClient8*, filename : LibC::LPWSTR, filehandle : UInt64, type : UInt32) : HRESULT
    @lpVtbl.value.add_dump_information_file_wide.call(this, filename, filehandle, type)
  end
  def get_number_dump_files(this : IDebugClient8*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_dump_files.call(this, number)
  end
  def get_dump_file(this : IDebugClient8*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def get_dump_file_wide(this : IDebugClient8*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*, handle : UInt64*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_file_wide.call(this, index, buffer, buffersize, namesize, handle, type)
  end
  def attach_kernel_wide(this : IDebugClient8*, flags : UInt32, connectoptions : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.attach_kernel_wide.call(this, flags, connectoptions)
  end
  def get_kernel_connection_options_wide(this : IDebugClient8*, buffer : Char*, buffersize : UInt32, optionssize : UInt32*) : HRESULT
    @lpVtbl.value.get_kernel_connection_options_wide.call(this, buffer, buffersize, optionssize)
  end
  def set_kernel_connection_options_wide(this : IDebugClient8*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_kernel_connection_options_wide.call(this, options)
  end
  def start_process_server_wide(this : IDebugClient8*, flags : UInt32, options : LibC::LPWSTR, reserved : Void*) : HRESULT
    @lpVtbl.value.start_process_server_wide.call(this, flags, options, reserved)
  end
  def connect_process_server_wide(this : IDebugClient8*, remoteoptions : LibC::LPWSTR, server : UInt64*) : HRESULT
    @lpVtbl.value.connect_process_server_wide.call(this, remoteoptions, server)
  end
  def start_server_wide(this : IDebugClient8*, options : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.start_server_wide.call(this, options)
  end
  def output_servers_wide(this : IDebugClient8*, outputcontrol : UInt32, machine : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.output_servers_wide.call(this, outputcontrol, machine, flags)
  end
  def get_output_callbacks_wide(this : IDebugClient8*, callbacks : IDebugOutputCallbacksWide*) : HRESULT
    @lpVtbl.value.get_output_callbacks_wide.call(this, callbacks)
  end
  def set_output_callbacks_wide(this : IDebugClient8*, callbacks : IDebugOutputCallbacksWide) : HRESULT
    @lpVtbl.value.set_output_callbacks_wide.call(this, callbacks)
  end
  def get_output_line_prefix_wide(this : IDebugClient8*, buffer : Char*, buffersize : UInt32, prefixsize : UInt32*) : HRESULT
    @lpVtbl.value.get_output_line_prefix_wide.call(this, buffer, buffersize, prefixsize)
  end
  def set_output_line_prefix_wide(this : IDebugClient8*, prefix : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_output_line_prefix_wide.call(this, prefix)
  end
  def get_identity_wide(this : IDebugClient8*, buffer : Char*, buffersize : UInt32, identitysize : UInt32*) : HRESULT
    @lpVtbl.value.get_identity_wide.call(this, buffer, buffersize, identitysize)
  end
  def output_identity_wide(this : IDebugClient8*, outputcontrol : UInt32, flags : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_identity_wide.call(this, outputcontrol, flags, format)
  end
  def get_event_callbacks_wide(this : IDebugClient8*, callbacks : IDebugEventCallbacksWide*) : HRESULT
    @lpVtbl.value.get_event_callbacks_wide.call(this, callbacks)
  end
  def set_event_callbacks_wide(this : IDebugClient8*, callbacks : IDebugEventCallbacksWide) : HRESULT
    @lpVtbl.value.set_event_callbacks_wide.call(this, callbacks)
  end
  def create_process2(this : IDebugClient8*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR) : HRESULT
    @lpVtbl.value.create_process2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process2_wide(this : IDebugClient8*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.create_process2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment)
  end
  def create_process_and_attach2(this : IDebugClient8*, server : UInt64, commandline : PSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : PSTR, environment : PSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def create_process_and_attach2_wide(this : IDebugClient8*, server : UInt64, commandline : LibC::LPWSTR, optionsbuffer : Void*, optionsbuffersize : UInt32, initialdirectory : LibC::LPWSTR, environment : LibC::LPWSTR, processid : UInt32, attachflags : UInt32) : HRESULT
    @lpVtbl.value.create_process_and_attach2_wide.call(this, server, commandline, optionsbuffer, optionsbuffersize, initialdirectory, environment, processid, attachflags)
  end
  def push_output_line_prefix(this : IDebugClient8*, newprefix : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix.call(this, newprefix, handle)
  end
  def push_output_line_prefix_wide(this : IDebugClient8*, newprefix : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.push_output_line_prefix_wide.call(this, newprefix, handle)
  end
  def pop_output_line_prefix(this : IDebugClient8*, handle : UInt64) : HRESULT
    @lpVtbl.value.pop_output_line_prefix.call(this, handle)
  end
  def get_number_input_callbacks(this : IDebugClient8*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_input_callbacks.call(this, count)
  end
  def get_number_output_callbacks(this : IDebugClient8*, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_output_callbacks.call(this, count)
  end
  def get_number_event_callbacks(this : IDebugClient8*, eventflags : UInt32, count : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_callbacks.call(this, eventflags, count)
  end
  def get_quit_lock_string(this : IDebugClient8*, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string(this : IDebugClient8*, string : PSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string.call(this, string)
  end
  def get_quit_lock_string_wide(this : IDebugClient8*, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_quit_lock_string_wide.call(this, buffer, buffersize, stringsize)
  end
  def set_quit_lock_string_wide(this : IDebugClient8*, string : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_quit_lock_string_wide.call(this, string)
  end
  def set_event_context_callbacks(this : IDebugClient8*, callbacks : IDebugEventContextCallbacks) : HRESULT
    @lpVtbl.value.set_event_context_callbacks.call(this, callbacks)
  end
  def set_client_context(this : IDebugClient8*, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.set_client_context.call(this, context, contextsize)
  end
  def open_dump_file_wide2(this : IDebugClient8*, filename : LibC::LPWSTR, filehandle : UInt64, alternatearch : UInt32) : HRESULT
    @lpVtbl.value.open_dump_file_wide2.call(this, filename, filehandle, alternatearch)
  end
end
struct LibWin32::IDebugPlmClient
  def query_interface(this : IDebugPlmClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPlmClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPlmClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def launch_plm_package_for_debug_wide(this : IDebugPlmClient*, server : UInt64, timeout : UInt32, packagefullname : LibC::LPWSTR, appname : LibC::LPWSTR, arguments : LibC::LPWSTR, processid : UInt32*, threadid : UInt32*) : HRESULT
    @lpVtbl.value.launch_plm_package_for_debug_wide.call(this, server, timeout, packagefullname, appname, arguments, processid, threadid)
  end
end
struct LibWin32::IDebugPlmClient2
  def query_interface(this : IDebugPlmClient2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPlmClient2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPlmClient2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def launch_plm_package_for_debug_wide(this : IDebugPlmClient2*, server : UInt64, timeout : UInt32, packagefullname : LibC::LPWSTR, appname : LibC::LPWSTR, arguments : LibC::LPWSTR, processid : UInt32*, threadid : UInt32*) : HRESULT
    @lpVtbl.value.launch_plm_package_for_debug_wide.call(this, server, timeout, packagefullname, appname, arguments, processid, threadid)
  end
  def launch_plm_bg_task_for_debug_wide(this : IDebugPlmClient2*, server : UInt64, timeout : UInt32, packagefullname : LibC::LPWSTR, backgroundtaskid : LibC::LPWSTR, processid : UInt32*, threadid : UInt32*) : HRESULT
    @lpVtbl.value.launch_plm_bg_task_for_debug_wide.call(this, server, timeout, packagefullname, backgroundtaskid, processid, threadid)
  end
end
struct LibWin32::IDebugPlmClient3
  def query_interface(this : IDebugPlmClient3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPlmClient3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPlmClient3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def launch_plm_package_for_debug_wide(this : IDebugPlmClient3*, server : UInt64, timeout : UInt32, packagefullname : LibC::LPWSTR, appname : LibC::LPWSTR, arguments : LibC::LPWSTR, processid : UInt32*, threadid : UInt32*) : HRESULT
    @lpVtbl.value.launch_plm_package_for_debug_wide.call(this, server, timeout, packagefullname, appname, arguments, processid, threadid)
  end
  def launch_plm_bg_task_for_debug_wide(this : IDebugPlmClient3*, server : UInt64, timeout : UInt32, packagefullname : LibC::LPWSTR, backgroundtaskid : LibC::LPWSTR, processid : UInt32*, threadid : UInt32*) : HRESULT
    @lpVtbl.value.launch_plm_bg_task_for_debug_wide.call(this, server, timeout, packagefullname, backgroundtaskid, processid, threadid)
  end
  def query_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR, stream : IDebugOutputStream) : HRESULT
    @lpVtbl.value.query_plm_package_wide.call(this, server, packagefullname, stream)
  end
  def query_plm_package_list(this : IDebugPlmClient3*, server : UInt64, stream : IDebugOutputStream) : HRESULT
    @lpVtbl.value.query_plm_package_list.call(this, server, stream)
  end
  def enable_plm_package_debug_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.enable_plm_package_debug_wide.call(this, server, packagefullname)
  end
  def disable_plm_package_debug_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.disable_plm_package_debug_wide.call(this, server, packagefullname)
  end
  def suspend_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.suspend_plm_package_wide.call(this, server, packagefullname)
  end
  def resume_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.resume_plm_package_wide.call(this, server, packagefullname)
  end
  def terminate_plm_package_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.terminate_plm_package_wide.call(this, server, packagefullname)
  end
  def launch_and_debug_plm_app_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR, appname : LibC::LPWSTR, arguments : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.launch_and_debug_plm_app_wide.call(this, server, packagefullname, appname, arguments)
  end
  def activate_and_debug_plm_bg_task_wide(this : IDebugPlmClient3*, server : UInt64, packagefullname : LibC::LPWSTR, backgroundtaskid : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.activate_and_debug_plm_bg_task_wide.call(this, server, packagefullname, backgroundtaskid)
  end
end
struct LibWin32::IDebugOutputStream
  def query_interface(this : IDebugOutputStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugOutputStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugOutputStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def write(this : IDebugOutputStream*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write.call(this, psz)
  end
end
struct LibWin32::IDebugControl
  def query_interface(this : IDebugControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
end
struct LibWin32::IDebugControl2
  def query_interface(this : IDebugControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl2*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl2*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl2*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl2*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl2*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl2*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl2*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl2*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl2*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl2*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl2*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl2*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl2*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl2*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl2*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl2*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl2*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl2*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl2*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl2*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl2*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl2*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl2*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl2*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl2*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl2*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl2*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl2*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl2*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl2*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl2*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl2*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl2*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl2*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl2*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl2*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl2*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl2*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl2*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl2*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl2*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl2*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl2*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl2*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl2*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl2*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl2*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl2*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl2*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl2*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl2*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl2*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl2*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl2*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl2*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl2*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl2*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl2*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl2*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl2*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl2*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl2*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl2*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl2*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl2*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl2*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl2*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl2*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl2*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl2*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl2*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl2*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl2*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl2*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl2*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl2*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl2*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl2*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl2*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl2*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl2*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl2*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl2*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl2*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl2*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl2*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl2*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl2*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl2*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl2*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
end
struct LibWin32::IDebugControl3
  def query_interface(this : IDebugControl3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl3*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl3*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl3*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl3*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl3*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl3*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl3*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl3*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl3*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl3*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl3*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl3*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl3*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl3*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl3*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl3*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl3*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl3*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl3*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl3*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl3*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl3*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl3*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl3*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl3*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl3*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl3*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl3*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl3*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl3*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl3*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl3*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl3*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl3*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl3*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl3*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl3*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl3*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl3*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl3*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl3*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl3*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl3*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl3*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl3*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl3*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl3*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl3*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl3*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl3*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl3*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl3*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl3*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl3*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl3*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl3*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl3*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl3*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl3*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl3*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl3*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl3*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl3*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl3*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl3*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl3*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl3*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl3*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl3*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl3*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl3*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl3*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl3*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl3*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl3*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl3*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl3*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl3*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl3*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl3*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl3*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl3*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl3*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl3*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl3*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl3*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl3*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl3*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
  def get_assembly_options(this : IDebugControl3*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_assembly_options.call(this, options)
  end
  def add_assembly_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.add_assembly_options.call(this, options)
  end
  def remove_assembly_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_assembly_options.call(this, options)
  end
  def set_assembly_options(this : IDebugControl3*, options : UInt32) : HRESULT
    @lpVtbl.value.set_assembly_options.call(this, options)
  end
  def get_expression_syntax(this : IDebugControl3*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax.call(this, flags)
  end
  def set_expression_syntax(this : IDebugControl3*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_expression_syntax.call(this, flags)
  end
  def set_expression_syntax_by_name(this : IDebugControl3*, abbrevname : PSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name.call(this, abbrevname)
  end
  def get_number_expression_syntaxes(this : IDebugControl3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_expression_syntaxes.call(this, number)
  end
  def get_expression_syntax_names(this : IDebugControl3*, index : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_number_events(this : IDebugControl3*, events : UInt32*) : HRESULT
    @lpVtbl.value.get_number_events.call(this, events)
  end
  def get_event_index_description(this : IDebugControl3*, index : UInt32, which : UInt32, buffer : PSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_current_event_index(this : IDebugControl3*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_event_index.call(this, index)
  end
  def set_next_event_index(this : IDebugControl3*, relation : UInt32, value : UInt32, nextindex : UInt32*) : HRESULT
    @lpVtbl.value.set_next_event_index.call(this, relation, value, nextindex)
  end
end
struct LibWin32::IDebugControl4
  def query_interface(this : IDebugControl4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl4*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl4*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl4*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl4*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl4*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl4*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl4*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl4*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl4*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl4*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl4*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl4*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl4*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl4*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl4*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl4*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl4*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl4*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl4*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl4*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl4*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl4*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl4*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl4*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl4*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl4*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl4*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl4*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl4*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl4*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl4*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl4*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl4*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl4*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl4*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl4*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl4*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl4*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl4*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl4*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl4*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl4*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl4*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl4*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl4*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl4*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl4*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl4*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl4*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl4*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl4*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl4*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl4*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl4*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl4*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl4*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl4*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl4*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl4*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl4*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl4*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl4*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl4*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl4*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl4*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl4*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl4*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl4*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl4*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl4*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl4*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl4*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl4*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl4*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl4*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl4*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl4*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl4*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl4*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl4*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl4*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl4*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl4*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl4*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl4*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl4*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl4*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
  def get_assembly_options(this : IDebugControl4*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_assembly_options.call(this, options)
  end
  def add_assembly_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.add_assembly_options.call(this, options)
  end
  def remove_assembly_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_assembly_options.call(this, options)
  end
  def set_assembly_options(this : IDebugControl4*, options : UInt32) : HRESULT
    @lpVtbl.value.set_assembly_options.call(this, options)
  end
  def get_expression_syntax(this : IDebugControl4*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax.call(this, flags)
  end
  def set_expression_syntax(this : IDebugControl4*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_expression_syntax.call(this, flags)
  end
  def set_expression_syntax_by_name(this : IDebugControl4*, abbrevname : PSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name.call(this, abbrevname)
  end
  def get_number_expression_syntaxes(this : IDebugControl4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_expression_syntaxes.call(this, number)
  end
  def get_expression_syntax_names(this : IDebugControl4*, index : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_number_events(this : IDebugControl4*, events : UInt32*) : HRESULT
    @lpVtbl.value.get_number_events.call(this, events)
  end
  def get_event_index_description(this : IDebugControl4*, index : UInt32, which : UInt32, buffer : PSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_current_event_index(this : IDebugControl4*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_event_index.call(this, index)
  end
  def set_next_event_index(this : IDebugControl4*, relation : UInt32, value : UInt32, nextindex : UInt32*) : HRESULT
    @lpVtbl.value.set_next_event_index.call(this, relation, value, nextindex)
  end
  def get_log_file_wide(this : IDebugControl4*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file_wide.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file_wide(this : IDebugControl4*, file : LibC::LPWSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file_wide.call(this, file, append)
  end
  def input_wide(this : IDebugControl4*, buffer : Char*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input_wide.call(this, buffer, buffersize, inputsize)
  end
  def return_input_wide(this : IDebugControl4*, buffer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.return_input_wide.call(this, buffer)
  end
  def output_wide(this : IDebugControl4*, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_wide.call(this, mask, format)
  end
  def output_va_list_wide(this : IDebugControl4*, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list_wide.call(this, mask, format, args)
  end
  def controlled_output_wide(this : IDebugControl4*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.controlled_output_wide.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list_wide(this : IDebugControl4*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list_wide.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt_wide(this : IDebugControl4*, outputcontrol : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_prompt_wide.call(this, outputcontrol, format)
  end
  def output_prompt_va_list_wide(this : IDebugControl4*, outputcontrol : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list_wide.call(this, outputcontrol, format, args)
  end
  def get_prompt_text_wide(this : IDebugControl4*, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text_wide.call(this, buffer, buffersize, textsize)
  end
  def assemble_wide(this : IDebugControl4*, offset : UInt64, instr : LibC::LPWSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble_wide.call(this, offset, instr, endoffset)
  end
  def disassemble_wide(this : IDebugControl4*, offset : UInt64, flags : UInt32, buffer : Char*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble_wide.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_processor_type_names_wide(this : IDebugControl4*, type : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names_wide.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_text_macro_wide(this : IDebugControl4*, slot : UInt32, buffer : Char*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro_wide.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro_wide(this : IDebugControl4*, slot : UInt32, macro_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_macro_wide.call(this, slot, macro_)
  end
  def evaluate_wide(this : IDebugControl4*, expression : LibC::LPWSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate_wide.call(this, expression, desiredtype, value, remainderindex)
  end
  def execute_wide(this : IDebugControl4*, outputcontrol : UInt32, command : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_wide.call(this, outputcontrol, command, flags)
  end
  def execute_command_file_wide(this : IDebugControl4*, outputcontrol : UInt32, commandfile : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file_wide.call(this, outputcontrol, commandfile, flags)
  end
  def get_breakpoint_by_index2(this : IDebugControl4*, index : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index2.call(this, index, bp)
  end
  def get_breakpoint_by_id2(this : IDebugControl4*, id : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id2.call(this, id, bp)
  end
  def add_breakpoint2(this : IDebugControl4*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.add_breakpoint2.call(this, type, desiredid, bp)
  end
  def remove_breakpoint2(this : IDebugControl4*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.remove_breakpoint2.call(this, bp)
  end
  def add_extension_wide(this : IDebugControl4*, path : LibC::LPWSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension_wide.call(this, path, flags, handle)
  end
  def get_extension_by_path_wide(this : IDebugControl4*, path : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path_wide.call(this, path, handle)
  end
  def call_extension_wide(this : IDebugControl4*, handle : UInt64, function : LibC::LPWSTR, arguments : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.call_extension_wide.call(this, handle, function, arguments)
  end
  def get_extension_function_wide(this : IDebugControl4*, handle : UInt64, funcname : LibC::LPWSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function_wide.call(this, handle, funcname, function)
  end
  def get_event_filter_text_wide(this : IDebugControl4*, index : UInt32, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text_wide.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command_wide(this : IDebugControl4*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command_wide(this : IDebugControl4*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command_wide.call(this, index, command)
  end
  def get_specific_filter_argument_wide(this : IDebugControl4*, index : UInt32, buffer : Char*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument_wide.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument_wide(this : IDebugControl4*, index : UInt32, argument : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument_wide.call(this, index, argument)
  end
  def get_exception_filter_second_command_wide(this : IDebugControl4*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command_wide(this : IDebugControl4*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command_wide.call(this, index, command)
  end
  def get_last_event_information_wide(this : IDebugControl4*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : Char*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information_wide.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_text_replacement_wide(this : IDebugControl4*, srctext : LibC::LPWSTR, index : UInt32, srcbuffer : Char*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : Char*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement_wide.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement_wide(this : IDebugControl4*, srctext : LibC::LPWSTR, dsttext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_replacement_wide.call(this, srctext, dsttext)
  end
  def set_expression_syntax_by_name_wide(this : IDebugControl4*, abbrevname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name_wide.call(this, abbrevname)
  end
  def get_expression_syntax_names_wide(this : IDebugControl4*, index : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names_wide.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_event_index_description_wide(this : IDebugControl4*, index : UInt32, which : UInt32, buffer : LibC::LPWSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description_wide.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_log_file2(this : IDebugControl4*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2(this : IDebugControl4*, file : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2.call(this, file, flags)
  end
  def get_log_file2_wide(this : IDebugControl4*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2_wide.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2_wide(this : IDebugControl4*, file : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2_wide.call(this, file, flags)
  end
  def get_system_version_values(this : IDebugControl4*, platformid : UInt32*, win32major : UInt32*, win32minor : UInt32*, kdmajor : UInt32*, kdminor : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_values.call(this, platformid, win32major, win32minor, kdmajor, kdminor)
  end
  def get_system_version_string(this : IDebugControl4*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string.call(this, which, buffer, buffersize, stringsize)
  end
  def get_system_version_string_wide(this : IDebugControl4*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string_wide.call(this, which, buffer, buffersize, stringsize)
  end
  def get_context_stack_trace(this : IDebugControl4*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace(this : IDebugControl4*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_stored_event_information(this : IDebugControl4*, type : UInt32*, processid : UInt32*, threadid : UInt32*, context : Void*, contextsize : UInt32, contextused : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*) : HRESULT
    @lpVtbl.value.get_stored_event_information.call(this, type, processid, threadid, context, contextsize, contextused, extrainformation, extrainformationsize, extrainformationused)
  end
  def get_managed_status(this : IDebugControl4*, flags : UInt32*, whichstring : UInt32, string : UInt8*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def get_managed_status_wide(this : IDebugControl4*, flags : UInt32*, whichstring : UInt32, string : Char*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status_wide.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def reset_managed_status(this : IDebugControl4*, flags : UInt32) : HRESULT
    @lpVtbl.value.reset_managed_status.call(this, flags)
  end
end
struct LibWin32::IDebugControl5
  def query_interface(this : IDebugControl5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl5*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl5*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl5*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl5*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl5*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl5*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl5*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl5*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl5*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl5*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl5*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl5*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl5*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl5*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl5*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl5*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl5*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl5*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl5*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl5*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl5*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl5*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl5*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl5*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl5*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl5*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl5*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl5*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl5*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl5*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl5*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl5*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl5*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl5*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl5*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl5*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl5*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl5*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl5*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl5*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl5*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl5*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl5*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl5*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl5*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl5*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl5*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl5*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl5*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl5*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl5*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl5*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl5*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl5*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl5*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl5*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl5*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl5*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl5*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl5*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl5*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl5*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl5*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl5*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl5*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl5*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl5*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl5*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl5*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl5*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl5*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl5*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl5*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl5*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl5*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl5*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl5*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl5*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl5*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl5*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl5*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl5*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl5*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl5*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl5*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl5*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl5*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl5*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl5*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
  def get_assembly_options(this : IDebugControl5*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_assembly_options.call(this, options)
  end
  def add_assembly_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.add_assembly_options.call(this, options)
  end
  def remove_assembly_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_assembly_options.call(this, options)
  end
  def set_assembly_options(this : IDebugControl5*, options : UInt32) : HRESULT
    @lpVtbl.value.set_assembly_options.call(this, options)
  end
  def get_expression_syntax(this : IDebugControl5*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax.call(this, flags)
  end
  def set_expression_syntax(this : IDebugControl5*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_expression_syntax.call(this, flags)
  end
  def set_expression_syntax_by_name(this : IDebugControl5*, abbrevname : PSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name.call(this, abbrevname)
  end
  def get_number_expression_syntaxes(this : IDebugControl5*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_expression_syntaxes.call(this, number)
  end
  def get_expression_syntax_names(this : IDebugControl5*, index : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_number_events(this : IDebugControl5*, events : UInt32*) : HRESULT
    @lpVtbl.value.get_number_events.call(this, events)
  end
  def get_event_index_description(this : IDebugControl5*, index : UInt32, which : UInt32, buffer : PSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_current_event_index(this : IDebugControl5*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_event_index.call(this, index)
  end
  def set_next_event_index(this : IDebugControl5*, relation : UInt32, value : UInt32, nextindex : UInt32*) : HRESULT
    @lpVtbl.value.set_next_event_index.call(this, relation, value, nextindex)
  end
  def get_log_file_wide(this : IDebugControl5*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file_wide.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file_wide(this : IDebugControl5*, file : LibC::LPWSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file_wide.call(this, file, append)
  end
  def input_wide(this : IDebugControl5*, buffer : Char*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input_wide.call(this, buffer, buffersize, inputsize)
  end
  def return_input_wide(this : IDebugControl5*, buffer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.return_input_wide.call(this, buffer)
  end
  def output_wide(this : IDebugControl5*, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_wide.call(this, mask, format)
  end
  def output_va_list_wide(this : IDebugControl5*, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list_wide.call(this, mask, format, args)
  end
  def controlled_output_wide(this : IDebugControl5*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.controlled_output_wide.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list_wide(this : IDebugControl5*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list_wide.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt_wide(this : IDebugControl5*, outputcontrol : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_prompt_wide.call(this, outputcontrol, format)
  end
  def output_prompt_va_list_wide(this : IDebugControl5*, outputcontrol : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list_wide.call(this, outputcontrol, format, args)
  end
  def get_prompt_text_wide(this : IDebugControl5*, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text_wide.call(this, buffer, buffersize, textsize)
  end
  def assemble_wide(this : IDebugControl5*, offset : UInt64, instr : LibC::LPWSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble_wide.call(this, offset, instr, endoffset)
  end
  def disassemble_wide(this : IDebugControl5*, offset : UInt64, flags : UInt32, buffer : Char*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble_wide.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_processor_type_names_wide(this : IDebugControl5*, type : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names_wide.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_text_macro_wide(this : IDebugControl5*, slot : UInt32, buffer : Char*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro_wide.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro_wide(this : IDebugControl5*, slot : UInt32, macro_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_macro_wide.call(this, slot, macro_)
  end
  def evaluate_wide(this : IDebugControl5*, expression : LibC::LPWSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate_wide.call(this, expression, desiredtype, value, remainderindex)
  end
  def execute_wide(this : IDebugControl5*, outputcontrol : UInt32, command : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_wide.call(this, outputcontrol, command, flags)
  end
  def execute_command_file_wide(this : IDebugControl5*, outputcontrol : UInt32, commandfile : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file_wide.call(this, outputcontrol, commandfile, flags)
  end
  def get_breakpoint_by_index2(this : IDebugControl5*, index : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index2.call(this, index, bp)
  end
  def get_breakpoint_by_id2(this : IDebugControl5*, id : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id2.call(this, id, bp)
  end
  def add_breakpoint2(this : IDebugControl5*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.add_breakpoint2.call(this, type, desiredid, bp)
  end
  def remove_breakpoint2(this : IDebugControl5*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.remove_breakpoint2.call(this, bp)
  end
  def add_extension_wide(this : IDebugControl5*, path : LibC::LPWSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension_wide.call(this, path, flags, handle)
  end
  def get_extension_by_path_wide(this : IDebugControl5*, path : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path_wide.call(this, path, handle)
  end
  def call_extension_wide(this : IDebugControl5*, handle : UInt64, function : LibC::LPWSTR, arguments : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.call_extension_wide.call(this, handle, function, arguments)
  end
  def get_extension_function_wide(this : IDebugControl5*, handle : UInt64, funcname : LibC::LPWSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function_wide.call(this, handle, funcname, function)
  end
  def get_event_filter_text_wide(this : IDebugControl5*, index : UInt32, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text_wide.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command_wide(this : IDebugControl5*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command_wide(this : IDebugControl5*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command_wide.call(this, index, command)
  end
  def get_specific_filter_argument_wide(this : IDebugControl5*, index : UInt32, buffer : Char*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument_wide.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument_wide(this : IDebugControl5*, index : UInt32, argument : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument_wide.call(this, index, argument)
  end
  def get_exception_filter_second_command_wide(this : IDebugControl5*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command_wide(this : IDebugControl5*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command_wide.call(this, index, command)
  end
  def get_last_event_information_wide(this : IDebugControl5*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : Char*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information_wide.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_text_replacement_wide(this : IDebugControl5*, srctext : LibC::LPWSTR, index : UInt32, srcbuffer : Char*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : Char*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement_wide.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement_wide(this : IDebugControl5*, srctext : LibC::LPWSTR, dsttext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_replacement_wide.call(this, srctext, dsttext)
  end
  def set_expression_syntax_by_name_wide(this : IDebugControl5*, abbrevname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name_wide.call(this, abbrevname)
  end
  def get_expression_syntax_names_wide(this : IDebugControl5*, index : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names_wide.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_event_index_description_wide(this : IDebugControl5*, index : UInt32, which : UInt32, buffer : LibC::LPWSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description_wide.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_log_file2(this : IDebugControl5*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2(this : IDebugControl5*, file : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2.call(this, file, flags)
  end
  def get_log_file2_wide(this : IDebugControl5*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2_wide.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2_wide(this : IDebugControl5*, file : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2_wide.call(this, file, flags)
  end
  def get_system_version_values(this : IDebugControl5*, platformid : UInt32*, win32major : UInt32*, win32minor : UInt32*, kdmajor : UInt32*, kdminor : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_values.call(this, platformid, win32major, win32minor, kdmajor, kdminor)
  end
  def get_system_version_string(this : IDebugControl5*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string.call(this, which, buffer, buffersize, stringsize)
  end
  def get_system_version_string_wide(this : IDebugControl5*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string_wide.call(this, which, buffer, buffersize, stringsize)
  end
  def get_context_stack_trace(this : IDebugControl5*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace(this : IDebugControl5*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_stored_event_information(this : IDebugControl5*, type : UInt32*, processid : UInt32*, threadid : UInt32*, context : Void*, contextsize : UInt32, contextused : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*) : HRESULT
    @lpVtbl.value.get_stored_event_information.call(this, type, processid, threadid, context, contextsize, contextused, extrainformation, extrainformationsize, extrainformationused)
  end
  def get_managed_status(this : IDebugControl5*, flags : UInt32*, whichstring : UInt32, string : UInt8*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def get_managed_status_wide(this : IDebugControl5*, flags : UInt32*, whichstring : UInt32, string : Char*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status_wide.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def reset_managed_status(this : IDebugControl5*, flags : UInt32) : HRESULT
    @lpVtbl.value.reset_managed_status.call(this, flags)
  end
  def get_stack_trace_ex(this : IDebugControl5*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace_ex.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def output_stack_trace_ex(this : IDebugControl5*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace_ex.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_context_stack_trace_ex(this : IDebugControl5*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace_ex.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace_ex(this : IDebugControl5*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace_ex.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_breakpoint_by_guid(this : IDebugControl5*, guid : Guid*, bp : IDebugBreakpoint3*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_guid.call(this, guid, bp)
  end
end
struct LibWin32::IDebugControl6
  def query_interface(this : IDebugControl6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl6*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl6*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl6*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl6*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl6*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl6*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl6*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl6*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl6*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl6*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl6*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl6*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl6*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl6*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl6*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl6*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl6*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl6*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl6*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl6*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl6*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl6*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl6*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl6*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl6*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl6*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl6*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl6*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl6*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl6*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl6*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl6*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl6*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl6*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl6*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl6*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl6*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl6*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl6*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl6*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl6*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl6*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl6*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl6*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl6*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl6*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl6*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl6*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl6*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl6*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl6*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl6*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl6*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl6*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl6*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl6*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl6*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl6*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl6*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl6*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl6*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl6*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl6*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl6*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl6*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl6*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl6*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl6*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl6*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl6*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl6*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl6*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl6*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl6*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl6*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl6*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl6*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl6*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl6*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl6*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl6*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl6*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl6*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl6*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl6*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl6*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl6*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl6*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl6*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl6*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
  def get_assembly_options(this : IDebugControl6*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_assembly_options.call(this, options)
  end
  def add_assembly_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.add_assembly_options.call(this, options)
  end
  def remove_assembly_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_assembly_options.call(this, options)
  end
  def set_assembly_options(this : IDebugControl6*, options : UInt32) : HRESULT
    @lpVtbl.value.set_assembly_options.call(this, options)
  end
  def get_expression_syntax(this : IDebugControl6*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax.call(this, flags)
  end
  def set_expression_syntax(this : IDebugControl6*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_expression_syntax.call(this, flags)
  end
  def set_expression_syntax_by_name(this : IDebugControl6*, abbrevname : PSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name.call(this, abbrevname)
  end
  def get_number_expression_syntaxes(this : IDebugControl6*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_expression_syntaxes.call(this, number)
  end
  def get_expression_syntax_names(this : IDebugControl6*, index : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_number_events(this : IDebugControl6*, events : UInt32*) : HRESULT
    @lpVtbl.value.get_number_events.call(this, events)
  end
  def get_event_index_description(this : IDebugControl6*, index : UInt32, which : UInt32, buffer : PSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_current_event_index(this : IDebugControl6*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_event_index.call(this, index)
  end
  def set_next_event_index(this : IDebugControl6*, relation : UInt32, value : UInt32, nextindex : UInt32*) : HRESULT
    @lpVtbl.value.set_next_event_index.call(this, relation, value, nextindex)
  end
  def get_log_file_wide(this : IDebugControl6*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file_wide.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file_wide(this : IDebugControl6*, file : LibC::LPWSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file_wide.call(this, file, append)
  end
  def input_wide(this : IDebugControl6*, buffer : Char*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input_wide.call(this, buffer, buffersize, inputsize)
  end
  def return_input_wide(this : IDebugControl6*, buffer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.return_input_wide.call(this, buffer)
  end
  def output_wide(this : IDebugControl6*, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_wide.call(this, mask, format)
  end
  def output_va_list_wide(this : IDebugControl6*, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list_wide.call(this, mask, format, args)
  end
  def controlled_output_wide(this : IDebugControl6*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.controlled_output_wide.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list_wide(this : IDebugControl6*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list_wide.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt_wide(this : IDebugControl6*, outputcontrol : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_prompt_wide.call(this, outputcontrol, format)
  end
  def output_prompt_va_list_wide(this : IDebugControl6*, outputcontrol : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list_wide.call(this, outputcontrol, format, args)
  end
  def get_prompt_text_wide(this : IDebugControl6*, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text_wide.call(this, buffer, buffersize, textsize)
  end
  def assemble_wide(this : IDebugControl6*, offset : UInt64, instr : LibC::LPWSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble_wide.call(this, offset, instr, endoffset)
  end
  def disassemble_wide(this : IDebugControl6*, offset : UInt64, flags : UInt32, buffer : Char*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble_wide.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_processor_type_names_wide(this : IDebugControl6*, type : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names_wide.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_text_macro_wide(this : IDebugControl6*, slot : UInt32, buffer : Char*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro_wide.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro_wide(this : IDebugControl6*, slot : UInt32, macro_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_macro_wide.call(this, slot, macro_)
  end
  def evaluate_wide(this : IDebugControl6*, expression : LibC::LPWSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate_wide.call(this, expression, desiredtype, value, remainderindex)
  end
  def execute_wide(this : IDebugControl6*, outputcontrol : UInt32, command : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_wide.call(this, outputcontrol, command, flags)
  end
  def execute_command_file_wide(this : IDebugControl6*, outputcontrol : UInt32, commandfile : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file_wide.call(this, outputcontrol, commandfile, flags)
  end
  def get_breakpoint_by_index2(this : IDebugControl6*, index : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index2.call(this, index, bp)
  end
  def get_breakpoint_by_id2(this : IDebugControl6*, id : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id2.call(this, id, bp)
  end
  def add_breakpoint2(this : IDebugControl6*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.add_breakpoint2.call(this, type, desiredid, bp)
  end
  def remove_breakpoint2(this : IDebugControl6*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.remove_breakpoint2.call(this, bp)
  end
  def add_extension_wide(this : IDebugControl6*, path : LibC::LPWSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension_wide.call(this, path, flags, handle)
  end
  def get_extension_by_path_wide(this : IDebugControl6*, path : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path_wide.call(this, path, handle)
  end
  def call_extension_wide(this : IDebugControl6*, handle : UInt64, function : LibC::LPWSTR, arguments : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.call_extension_wide.call(this, handle, function, arguments)
  end
  def get_extension_function_wide(this : IDebugControl6*, handle : UInt64, funcname : LibC::LPWSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function_wide.call(this, handle, funcname, function)
  end
  def get_event_filter_text_wide(this : IDebugControl6*, index : UInt32, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text_wide.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command_wide(this : IDebugControl6*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command_wide(this : IDebugControl6*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command_wide.call(this, index, command)
  end
  def get_specific_filter_argument_wide(this : IDebugControl6*, index : UInt32, buffer : Char*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument_wide.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument_wide(this : IDebugControl6*, index : UInt32, argument : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument_wide.call(this, index, argument)
  end
  def get_exception_filter_second_command_wide(this : IDebugControl6*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command_wide(this : IDebugControl6*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command_wide.call(this, index, command)
  end
  def get_last_event_information_wide(this : IDebugControl6*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : Char*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information_wide.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_text_replacement_wide(this : IDebugControl6*, srctext : LibC::LPWSTR, index : UInt32, srcbuffer : Char*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : Char*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement_wide.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement_wide(this : IDebugControl6*, srctext : LibC::LPWSTR, dsttext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_replacement_wide.call(this, srctext, dsttext)
  end
  def set_expression_syntax_by_name_wide(this : IDebugControl6*, abbrevname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name_wide.call(this, abbrevname)
  end
  def get_expression_syntax_names_wide(this : IDebugControl6*, index : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names_wide.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_event_index_description_wide(this : IDebugControl6*, index : UInt32, which : UInt32, buffer : LibC::LPWSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description_wide.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_log_file2(this : IDebugControl6*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2(this : IDebugControl6*, file : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2.call(this, file, flags)
  end
  def get_log_file2_wide(this : IDebugControl6*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2_wide.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2_wide(this : IDebugControl6*, file : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2_wide.call(this, file, flags)
  end
  def get_system_version_values(this : IDebugControl6*, platformid : UInt32*, win32major : UInt32*, win32minor : UInt32*, kdmajor : UInt32*, kdminor : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_values.call(this, platformid, win32major, win32minor, kdmajor, kdminor)
  end
  def get_system_version_string(this : IDebugControl6*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string.call(this, which, buffer, buffersize, stringsize)
  end
  def get_system_version_string_wide(this : IDebugControl6*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string_wide.call(this, which, buffer, buffersize, stringsize)
  end
  def get_context_stack_trace(this : IDebugControl6*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace(this : IDebugControl6*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_stored_event_information(this : IDebugControl6*, type : UInt32*, processid : UInt32*, threadid : UInt32*, context : Void*, contextsize : UInt32, contextused : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*) : HRESULT
    @lpVtbl.value.get_stored_event_information.call(this, type, processid, threadid, context, contextsize, contextused, extrainformation, extrainformationsize, extrainformationused)
  end
  def get_managed_status(this : IDebugControl6*, flags : UInt32*, whichstring : UInt32, string : UInt8*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def get_managed_status_wide(this : IDebugControl6*, flags : UInt32*, whichstring : UInt32, string : Char*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status_wide.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def reset_managed_status(this : IDebugControl6*, flags : UInt32) : HRESULT
    @lpVtbl.value.reset_managed_status.call(this, flags)
  end
  def get_stack_trace_ex(this : IDebugControl6*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace_ex.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def output_stack_trace_ex(this : IDebugControl6*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace_ex.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_context_stack_trace_ex(this : IDebugControl6*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace_ex.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace_ex(this : IDebugControl6*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace_ex.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_breakpoint_by_guid(this : IDebugControl6*, guid : Guid*, bp : IDebugBreakpoint3*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_guid.call(this, guid, bp)
  end
  def get_execution_status_ex(this : IDebugControl6*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status_ex.call(this, status)
  end
  def get_synchronization_status(this : IDebugControl6*, sendsattempted : UInt32*, secondssincelastresponse : UInt32*) : HRESULT
    @lpVtbl.value.get_synchronization_status.call(this, sendsattempted, secondssincelastresponse)
  end
end
struct LibWin32::IDebugControl7
  def query_interface(this : IDebugControl7*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugControl7*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugControl7*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interrupt(this : IDebugControl7*) : HRESULT
    @lpVtbl.value.get_interrupt.call(this)
  end
  def set_interrupt(this : IDebugControl7*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt.call(this, flags)
  end
  def get_interrupt_timeout(this : IDebugControl7*, seconds : UInt32*) : HRESULT
    @lpVtbl.value.get_interrupt_timeout.call(this, seconds)
  end
  def set_interrupt_timeout(this : IDebugControl7*, seconds : UInt32) : HRESULT
    @lpVtbl.value.set_interrupt_timeout.call(this, seconds)
  end
  def get_log_file(this : IDebugControl7*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file(this : IDebugControl7*, file : PSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file.call(this, file, append)
  end
  def close_log_file(this : IDebugControl7*) : HRESULT
    @lpVtbl.value.close_log_file.call(this)
  end
  def get_log_mask(this : IDebugControl7*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_log_mask.call(this, mask)
  end
  def set_log_mask(this : IDebugControl7*, mask : UInt32) : HRESULT
    @lpVtbl.value.set_log_mask.call(this, mask)
  end
  def input(this : IDebugControl7*, buffer : UInt8*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input.call(this, buffer, buffersize, inputsize)
  end
  def return_input(this : IDebugControl7*, buffer : PSTR) : HRESULT
    @lpVtbl.value.return_input.call(this, buffer)
  end
  def output(this : IDebugControl7*, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, format)
  end
  def output_va_list(this : IDebugControl7*, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list.call(this, mask, format, args)
  end
  def controlled_output(this : IDebugControl7*, outputcontrol : UInt32, mask : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.controlled_output.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list(this : IDebugControl7*, outputcontrol : UInt32, mask : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt(this : IDebugControl7*, outputcontrol : UInt32, format : PSTR) : HRESULT
    @lpVtbl.value.output_prompt.call(this, outputcontrol, format)
  end
  def output_prompt_va_list(this : IDebugControl7*, outputcontrol : UInt32, format : PSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list.call(this, outputcontrol, format, args)
  end
  def get_prompt_text(this : IDebugControl7*, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text.call(this, buffer, buffersize, textsize)
  end
  def output_current_state(this : IDebugControl7*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_current_state.call(this, outputcontrol, flags)
  end
  def output_version_information(this : IDebugControl7*, outputcontrol : UInt32) : HRESULT
    @lpVtbl.value.output_version_information.call(this, outputcontrol)
  end
  def get_notify_event_handle(this : IDebugControl7*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_notify_event_handle.call(this, handle)
  end
  def set_notify_event_handle(this : IDebugControl7*, handle : UInt64) : HRESULT
    @lpVtbl.value.set_notify_event_handle.call(this, handle)
  end
  def assemble(this : IDebugControl7*, offset : UInt64, instr : PSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble.call(this, offset, instr, endoffset)
  end
  def disassemble(this : IDebugControl7*, offset : UInt64, flags : UInt32, buffer : UInt8*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_disassemble_effective_offset(this : IDebugControl7*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_disassemble_effective_offset.call(this, offset)
  end
  def output_disassembly(this : IDebugControl7*, outputcontrol : UInt32, offset : UInt64, flags : UInt32, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly.call(this, outputcontrol, offset, flags, endoffset)
  end
  def output_disassembly_lines(this : IDebugControl7*, outputcontrol : UInt32, previouslines : UInt32, totallines : UInt32, offset : UInt64, flags : UInt32, offsetline : UInt32*, startoffset : UInt64*, endoffset : UInt64*, lineoffsets : UInt64*) : HRESULT
    @lpVtbl.value.output_disassembly_lines.call(this, outputcontrol, previouslines, totallines, offset, flags, offsetline, startoffset, endoffset, lineoffsets)
  end
  def get_near_instruction(this : IDebugControl7*, offset : UInt64, delta : Int32, nearoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_near_instruction.call(this, offset, delta, nearoffset)
  end
  def get_stack_trace(this : IDebugControl7*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def get_return_offset(this : IDebugControl7*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_return_offset.call(this, offset)
  end
  def output_stack_trace(this : IDebugControl7*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_debuggee_type(this : IDebugControl7*, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type.call(this, class_, qualifier)
  end
  def get_actual_processor_type(this : IDebugControl7*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_actual_processor_type.call(this, type)
  end
  def get_executing_processor_type(this : IDebugControl7*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_executing_processor_type.call(this, type)
  end
  def get_number_possible_executing_processor_types(this : IDebugControl7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_possible_executing_processor_types.call(this, number)
  end
  def get_possible_executing_processor_types(this : IDebugControl7*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_possible_executing_processor_types.call(this, start, count, types)
  end
  def get_number_processors(this : IDebugControl7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processors.call(this, number)
  end
  def get_system_version(this : IDebugControl7*, platformid : UInt32*, major : UInt32*, minor : UInt32*, servicepackstring : UInt8*, servicepackstringsize : UInt32, servicepackstringused : UInt32*, servicepacknumber : UInt32*, buildstring : UInt8*, buildstringsize : UInt32, buildstringused : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version.call(this, platformid, major, minor, servicepackstring, servicepackstringsize, servicepackstringused, servicepacknumber, buildstring, buildstringsize, buildstringused)
  end
  def get_page_size(this : IDebugControl7*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_page_size.call(this, size)
  end
  def is_pointer64_bit(this : IDebugControl7*) : HRESULT
    @lpVtbl.value.is_pointer64_bit.call(this)
  end
  def read_bug_check_data(this : IDebugControl7*, code : UInt32*, arg1 : UInt64*, arg2 : UInt64*, arg3 : UInt64*, arg4 : UInt64*) : HRESULT
    @lpVtbl.value.read_bug_check_data.call(this, code, arg1, arg2, arg3, arg4)
  end
  def get_number_supported_processor_types(this : IDebugControl7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_supported_processor_types.call(this, number)
  end
  def get_supported_processor_types(this : IDebugControl7*, start : UInt32, count : UInt32, types : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_processor_types.call(this, start, count, types)
  end
  def get_processor_type_names(this : IDebugControl7*, type : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_effective_processor_type(this : IDebugControl7*, type : UInt32*) : HRESULT
    @lpVtbl.value.get_effective_processor_type.call(this, type)
  end
  def set_effective_processor_type(this : IDebugControl7*, type : UInt32) : HRESULT
    @lpVtbl.value.set_effective_processor_type.call(this, type)
  end
  def get_execution_status(this : IDebugControl7*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status.call(this, status)
  end
  def set_execution_status(this : IDebugControl7*, status : UInt32) : HRESULT
    @lpVtbl.value.set_execution_status.call(this, status)
  end
  def get_code_level(this : IDebugControl7*, level : UInt32*) : HRESULT
    @lpVtbl.value.get_code_level.call(this, level)
  end
  def set_code_level(this : IDebugControl7*, level : UInt32) : HRESULT
    @lpVtbl.value.set_code_level.call(this, level)
  end
  def get_engine_options(this : IDebugControl7*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_engine_options.call(this, options)
  end
  def add_engine_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.add_engine_options.call(this, options)
  end
  def remove_engine_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_engine_options.call(this, options)
  end
  def set_engine_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.set_engine_options.call(this, options)
  end
  def get_system_error_control(this : IDebugControl7*, outputlevel : UInt32*, breaklevel : UInt32*) : HRESULT
    @lpVtbl.value.get_system_error_control.call(this, outputlevel, breaklevel)
  end
  def set_system_error_control(this : IDebugControl7*, outputlevel : UInt32, breaklevel : UInt32) : HRESULT
    @lpVtbl.value.set_system_error_control.call(this, outputlevel, breaklevel)
  end
  def get_text_macro(this : IDebugControl7*, slot : UInt32, buffer : UInt8*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro(this : IDebugControl7*, slot : UInt32, macro_ : PSTR) : HRESULT
    @lpVtbl.value.set_text_macro.call(this, slot, macro_)
  end
  def get_radix(this : IDebugControl7*, radix : UInt32*) : HRESULT
    @lpVtbl.value.get_radix.call(this, radix)
  end
  def set_radix(this : IDebugControl7*, radix : UInt32) : HRESULT
    @lpVtbl.value.set_radix.call(this, radix)
  end
  def evaluate(this : IDebugControl7*, expression : PSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate.call(this, expression, desiredtype, value, remainderindex)
  end
  def coerce_value(this : IDebugControl7*, in_ : DEBUG_VALUE*, outtype : UInt32, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_value.call(this, in_, outtype, out_)
  end
  def coerce_values(this : IDebugControl7*, count : UInt32, in_ : DEBUG_VALUE*, outtypes : UInt32*, out_ : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.coerce_values.call(this, count, in_, outtypes, out_)
  end
  def execute(this : IDebugControl7*, outputcontrol : UInt32, command : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute.call(this, outputcontrol, command, flags)
  end
  def execute_command_file(this : IDebugControl7*, outputcontrol : UInt32, commandfile : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file.call(this, outputcontrol, commandfile, flags)
  end
  def get_number_breakpoints(this : IDebugControl7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_breakpoints.call(this, number)
  end
  def get_breakpoint_by_index(this : IDebugControl7*, index : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index.call(this, index, bp)
  end
  def get_breakpoint_by_id(this : IDebugControl7*, id : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id.call(this, id, bp)
  end
  def get_breakpoint_parameters(this : IDebugControl7*, count : UInt32, ids : UInt32*, start : UInt32, params : DEBUG_BREAKPOINT_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_breakpoint_parameters.call(this, count, ids, start, params)
  end
  def add_breakpoint(this : IDebugControl7*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint*) : HRESULT
    @lpVtbl.value.add_breakpoint.call(this, type, desiredid, bp)
  end
  def remove_breakpoint(this : IDebugControl7*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.remove_breakpoint.call(this, bp)
  end
  def add_extension(this : IDebugControl7*, path : PSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension.call(this, path, flags, handle)
  end
  def remove_extension(this : IDebugControl7*, handle : UInt64) : HRESULT
    @lpVtbl.value.remove_extension.call(this, handle)
  end
  def get_extension_by_path(this : IDebugControl7*, path : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path.call(this, path, handle)
  end
  def call_extension(this : IDebugControl7*, handle : UInt64, function : PSTR, arguments : PSTR) : HRESULT
    @lpVtbl.value.call_extension.call(this, handle, function, arguments)
  end
  def get_extension_function(this : IDebugControl7*, handle : UInt64, funcname : PSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function.call(this, handle, funcname, function)
  end
  def get_windbg_extension_apis32(this : IDebugControl7*, api : WINDBG_EXTENSION_APIS32*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis32.call(this, api)
  end
  def get_windbg_extension_apis64(this : IDebugControl7*, api : WINDBG_EXTENSION_APIS64*) : HRESULT
    @lpVtbl.value.get_windbg_extension_apis64.call(this, api)
  end
  def get_number_event_filters(this : IDebugControl7*, specificevents : UInt32*, specificexceptions : UInt32*, arbitraryexceptions : UInt32*) : HRESULT
    @lpVtbl.value.get_number_event_filters.call(this, specificevents, specificexceptions, arbitraryexceptions)
  end
  def get_event_filter_text(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command(this : IDebugControl7*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command.call(this, index, command)
  end
  def get_specific_filter_parameters(this : IDebugControl7*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_specific_filter_parameters.call(this, start, count, params)
  end
  def set_specific_filter_parameters(this : IDebugControl7*, start : UInt32, count : UInt32, params : DEBUG_SPECIFIC_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_specific_filter_parameters.call(this, start, count, params)
  end
  def get_specific_filter_argument(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument(this : IDebugControl7*, index : UInt32, argument : PSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument.call(this, index, argument)
  end
  def get_exception_filter_parameters(this : IDebugControl7*, count : UInt32, codes : UInt32*, start : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_exception_filter_parameters.call(this, count, codes, start, params)
  end
  def set_exception_filter_parameters(this : IDebugControl7*, count : UInt32, params : DEBUG_EXCEPTION_FILTER_PARAMETERS*) : HRESULT
    @lpVtbl.value.set_exception_filter_parameters.call(this, count, params)
  end
  def get_exception_filter_second_command(this : IDebugControl7*, index : UInt32, buffer : UInt8*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command(this : IDebugControl7*, index : UInt32, command : PSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command.call(this, index, command)
  end
  def wait_for_event(this : IDebugControl7*, flags : UInt32, timeout : UInt32) : HRESULT
    @lpVtbl.value.wait_for_event.call(this, flags, timeout)
  end
  def get_last_event_information(this : IDebugControl7*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : UInt8*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_current_time_date(this : IDebugControl7*, timedate : UInt32*) : HRESULT
    @lpVtbl.value.get_current_time_date.call(this, timedate)
  end
  def get_current_system_up_time(this : IDebugControl7*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_up_time.call(this, uptime)
  end
  def get_dump_format_flags(this : IDebugControl7*, formatflags : UInt32*) : HRESULT
    @lpVtbl.value.get_dump_format_flags.call(this, formatflags)
  end
  def get_number_text_replacements(this : IDebugControl7*, numrepl : UInt32*) : HRESULT
    @lpVtbl.value.get_number_text_replacements.call(this, numrepl)
  end
  def get_text_replacement(this : IDebugControl7*, srctext : PSTR, index : UInt32, srcbuffer : UInt8*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : UInt8*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement(this : IDebugControl7*, srctext : PSTR, dsttext : PSTR) : HRESULT
    @lpVtbl.value.set_text_replacement.call(this, srctext, dsttext)
  end
  def remove_text_replacements(this : IDebugControl7*) : HRESULT
    @lpVtbl.value.remove_text_replacements.call(this)
  end
  def output_text_replacements(this : IDebugControl7*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_text_replacements.call(this, outputcontrol, flags)
  end
  def get_assembly_options(this : IDebugControl7*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_assembly_options.call(this, options)
  end
  def add_assembly_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.add_assembly_options.call(this, options)
  end
  def remove_assembly_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_assembly_options.call(this, options)
  end
  def set_assembly_options(this : IDebugControl7*, options : UInt32) : HRESULT
    @lpVtbl.value.set_assembly_options.call(this, options)
  end
  def get_expression_syntax(this : IDebugControl7*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax.call(this, flags)
  end
  def set_expression_syntax(this : IDebugControl7*, flags : UInt32) : HRESULT
    @lpVtbl.value.set_expression_syntax.call(this, flags)
  end
  def set_expression_syntax_by_name(this : IDebugControl7*, abbrevname : PSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name.call(this, abbrevname)
  end
  def get_number_expression_syntaxes(this : IDebugControl7*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_expression_syntaxes.call(this, number)
  end
  def get_expression_syntax_names(this : IDebugControl7*, index : UInt32, fullnamebuffer : UInt8*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : UInt8*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_number_events(this : IDebugControl7*, events : UInt32*) : HRESULT
    @lpVtbl.value.get_number_events.call(this, events)
  end
  def get_event_index_description(this : IDebugControl7*, index : UInt32, which : UInt32, buffer : PSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_current_event_index(this : IDebugControl7*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_event_index.call(this, index)
  end
  def set_next_event_index(this : IDebugControl7*, relation : UInt32, value : UInt32, nextindex : UInt32*) : HRESULT
    @lpVtbl.value.set_next_event_index.call(this, relation, value, nextindex)
  end
  def get_log_file_wide(this : IDebugControl7*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, append : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_log_file_wide.call(this, buffer, buffersize, filesize, append)
  end
  def open_log_file_wide(this : IDebugControl7*, file : LibC::LPWSTR, append : LibC::BOOL) : HRESULT
    @lpVtbl.value.open_log_file_wide.call(this, file, append)
  end
  def input_wide(this : IDebugControl7*, buffer : Char*, buffersize : UInt32, inputsize : UInt32*) : HRESULT
    @lpVtbl.value.input_wide.call(this, buffer, buffersize, inputsize)
  end
  def return_input_wide(this : IDebugControl7*, buffer : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.return_input_wide.call(this, buffer)
  end
  def output_wide(this : IDebugControl7*, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_wide.call(this, mask, format)
  end
  def output_va_list_wide(this : IDebugControl7*, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_va_list_wide.call(this, mask, format, args)
  end
  def controlled_output_wide(this : IDebugControl7*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.controlled_output_wide.call(this, outputcontrol, mask, format)
  end
  def controlled_output_va_list_wide(this : IDebugControl7*, outputcontrol : UInt32, mask : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.controlled_output_va_list_wide.call(this, outputcontrol, mask, format, args)
  end
  def output_prompt_wide(this : IDebugControl7*, outputcontrol : UInt32, format : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_prompt_wide.call(this, outputcontrol, format)
  end
  def output_prompt_va_list_wide(this : IDebugControl7*, outputcontrol : UInt32, format : LibC::LPWSTR, args : Int8*) : HRESULT
    @lpVtbl.value.output_prompt_va_list_wide.call(this, outputcontrol, format, args)
  end
  def get_prompt_text_wide(this : IDebugControl7*, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_prompt_text_wide.call(this, buffer, buffersize, textsize)
  end
  def assemble_wide(this : IDebugControl7*, offset : UInt64, instr : LibC::LPWSTR, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.assemble_wide.call(this, offset, instr, endoffset)
  end
  def disassemble_wide(this : IDebugControl7*, offset : UInt64, flags : UInt32, buffer : Char*, buffersize : UInt32, disassemblysize : UInt32*, endoffset : UInt64*) : HRESULT
    @lpVtbl.value.disassemble_wide.call(this, offset, flags, buffer, buffersize, disassemblysize, endoffset)
  end
  def get_processor_type_names_wide(this : IDebugControl7*, type : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_processor_type_names_wide.call(this, type, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_text_macro_wide(this : IDebugControl7*, slot : UInt32, buffer : Char*, buffersize : UInt32, macrosize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_macro_wide.call(this, slot, buffer, buffersize, macrosize)
  end
  def set_text_macro_wide(this : IDebugControl7*, slot : UInt32, macro_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_macro_wide.call(this, slot, macro_)
  end
  def evaluate_wide(this : IDebugControl7*, expression : LibC::LPWSTR, desiredtype : UInt32, value : DEBUG_VALUE*, remainderindex : UInt32*) : HRESULT
    @lpVtbl.value.evaluate_wide.call(this, expression, desiredtype, value, remainderindex)
  end
  def execute_wide(this : IDebugControl7*, outputcontrol : UInt32, command : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_wide.call(this, outputcontrol, command, flags)
  end
  def execute_command_file_wide(this : IDebugControl7*, outputcontrol : UInt32, commandfile : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.execute_command_file_wide.call(this, outputcontrol, commandfile, flags)
  end
  def get_breakpoint_by_index2(this : IDebugControl7*, index : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_index2.call(this, index, bp)
  end
  def get_breakpoint_by_id2(this : IDebugControl7*, id : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_id2.call(this, id, bp)
  end
  def add_breakpoint2(this : IDebugControl7*, type : UInt32, desiredid : UInt32, bp : IDebugBreakpoint2*) : HRESULT
    @lpVtbl.value.add_breakpoint2.call(this, type, desiredid, bp)
  end
  def remove_breakpoint2(this : IDebugControl7*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.remove_breakpoint2.call(this, bp)
  end
  def add_extension_wide(this : IDebugControl7*, path : LibC::LPWSTR, flags : UInt32, handle : UInt64*) : HRESULT
    @lpVtbl.value.add_extension_wide.call(this, path, flags, handle)
  end
  def get_extension_by_path_wide(this : IDebugControl7*, path : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_extension_by_path_wide.call(this, path, handle)
  end
  def call_extension_wide(this : IDebugControl7*, handle : UInt64, function : LibC::LPWSTR, arguments : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.call_extension_wide.call(this, handle, function, arguments)
  end
  def get_extension_function_wide(this : IDebugControl7*, handle : UInt64, funcname : LibC::LPWSTR, function : FARPROC*) : HRESULT
    @lpVtbl.value.get_extension_function_wide.call(this, handle, funcname, function)
  end
  def get_event_filter_text_wide(this : IDebugControl7*, index : UInt32, buffer : Char*, buffersize : UInt32, textsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_text_wide.call(this, index, buffer, buffersize, textsize)
  end
  def get_event_filter_command_wide(this : IDebugControl7*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_filter_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_event_filter_command_wide(this : IDebugControl7*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_event_filter_command_wide.call(this, index, command)
  end
  def get_specific_filter_argument_wide(this : IDebugControl7*, index : UInt32, buffer : Char*, buffersize : UInt32, argumentsize : UInt32*) : HRESULT
    @lpVtbl.value.get_specific_filter_argument_wide.call(this, index, buffer, buffersize, argumentsize)
  end
  def set_specific_filter_argument_wide(this : IDebugControl7*, index : UInt32, argument : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_specific_filter_argument_wide.call(this, index, argument)
  end
  def get_exception_filter_second_command_wide(this : IDebugControl7*, index : UInt32, buffer : Char*, buffersize : UInt32, commandsize : UInt32*) : HRESULT
    @lpVtbl.value.get_exception_filter_second_command_wide.call(this, index, buffer, buffersize, commandsize)
  end
  def set_exception_filter_second_command_wide(this : IDebugControl7*, index : UInt32, command : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_exception_filter_second_command_wide.call(this, index, command)
  end
  def get_last_event_information_wide(this : IDebugControl7*, type : UInt32*, processid : UInt32*, threadid : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*, description : Char*, descriptionsize : UInt32, descriptionused : UInt32*) : HRESULT
    @lpVtbl.value.get_last_event_information_wide.call(this, type, processid, threadid, extrainformation, extrainformationsize, extrainformationused, description, descriptionsize, descriptionused)
  end
  def get_text_replacement_wide(this : IDebugControl7*, srctext : LibC::LPWSTR, index : UInt32, srcbuffer : Char*, srcbuffersize : UInt32, srcsize : UInt32*, dstbuffer : Char*, dstbuffersize : UInt32, dstsize : UInt32*) : HRESULT
    @lpVtbl.value.get_text_replacement_wide.call(this, srctext, index, srcbuffer, srcbuffersize, srcsize, dstbuffer, dstbuffersize, dstsize)
  end
  def set_text_replacement_wide(this : IDebugControl7*, srctext : LibC::LPWSTR, dsttext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text_replacement_wide.call(this, srctext, dsttext)
  end
  def set_expression_syntax_by_name_wide(this : IDebugControl7*, abbrevname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_expression_syntax_by_name_wide.call(this, abbrevname)
  end
  def get_expression_syntax_names_wide(this : IDebugControl7*, index : UInt32, fullnamebuffer : Char*, fullnamebuffersize : UInt32, fullnamesize : UInt32*, abbrevnamebuffer : Char*, abbrevnamebuffersize : UInt32, abbrevnamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_expression_syntax_names_wide.call(this, index, fullnamebuffer, fullnamebuffersize, fullnamesize, abbrevnamebuffer, abbrevnamebuffersize, abbrevnamesize)
  end
  def get_event_index_description_wide(this : IDebugControl7*, index : UInt32, which : UInt32, buffer : LibC::LPWSTR, buffersize : UInt32, descsize : UInt32*) : HRESULT
    @lpVtbl.value.get_event_index_description_wide.call(this, index, which, buffer, buffersize, descsize)
  end
  def get_log_file2(this : IDebugControl7*, buffer : UInt8*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2(this : IDebugControl7*, file : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2.call(this, file, flags)
  end
  def get_log_file2_wide(this : IDebugControl7*, buffer : Char*, buffersize : UInt32, filesize : UInt32*, flags : UInt32*) : HRESULT
    @lpVtbl.value.get_log_file2_wide.call(this, buffer, buffersize, filesize, flags)
  end
  def open_log_file2_wide(this : IDebugControl7*, file : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.open_log_file2_wide.call(this, file, flags)
  end
  def get_system_version_values(this : IDebugControl7*, platformid : UInt32*, win32major : UInt32*, win32minor : UInt32*, kdmajor : UInt32*, kdminor : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_values.call(this, platformid, win32major, win32minor, kdmajor, kdminor)
  end
  def get_system_version_string(this : IDebugControl7*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string.call(this, which, buffer, buffersize, stringsize)
  end
  def get_system_version_string_wide(this : IDebugControl7*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_system_version_string_wide.call(this, which, buffer, buffersize, stringsize)
  end
  def get_context_stack_trace(this : IDebugControl7*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace(this : IDebugControl7*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_stored_event_information(this : IDebugControl7*, type : UInt32*, processid : UInt32*, threadid : UInt32*, context : Void*, contextsize : UInt32, contextused : UInt32*, extrainformation : Void*, extrainformationsize : UInt32, extrainformationused : UInt32*) : HRESULT
    @lpVtbl.value.get_stored_event_information.call(this, type, processid, threadid, context, contextsize, contextused, extrainformation, extrainformationsize, extrainformationused)
  end
  def get_managed_status(this : IDebugControl7*, flags : UInt32*, whichstring : UInt32, string : UInt8*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def get_managed_status_wide(this : IDebugControl7*, flags : UInt32*, whichstring : UInt32, string : Char*, stringsize : UInt32, stringneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_managed_status_wide.call(this, flags, whichstring, string, stringsize, stringneeded)
  end
  def reset_managed_status(this : IDebugControl7*, flags : UInt32) : HRESULT
    @lpVtbl.value.reset_managed_status.call(this, flags)
  end
  def get_stack_trace_ex(this : IDebugControl7*, frameoffset : UInt64, stackoffset : UInt64, instructionoffset : UInt64, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_stack_trace_ex.call(this, frameoffset, stackoffset, instructionoffset, frames, framessize, framesfilled)
  end
  def output_stack_trace_ex(this : IDebugControl7*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_stack_trace_ex.call(this, outputcontrol, frames, framessize, flags)
  end
  def get_context_stack_trace_ex(this : IDebugControl7*, startcontext : Void*, startcontextsize : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, framesfilled : UInt32*) : HRESULT
    @lpVtbl.value.get_context_stack_trace_ex.call(this, startcontext, startcontextsize, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, framesfilled)
  end
  def output_context_stack_trace_ex(this : IDebugControl7*, outputcontrol : UInt32, frames : DEBUG_STACK_FRAME_EX*, framessize : UInt32, framecontexts : Void*, framecontextssize : UInt32, framecontextsentrysize : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_context_stack_trace_ex.call(this, outputcontrol, frames, framessize, framecontexts, framecontextssize, framecontextsentrysize, flags)
  end
  def get_breakpoint_by_guid(this : IDebugControl7*, guid : Guid*, bp : IDebugBreakpoint3*) : HRESULT
    @lpVtbl.value.get_breakpoint_by_guid.call(this, guid, bp)
  end
  def get_execution_status_ex(this : IDebugControl7*, status : UInt32*) : HRESULT
    @lpVtbl.value.get_execution_status_ex.call(this, status)
  end
  def get_synchronization_status(this : IDebugControl7*, sendsattempted : UInt32*, secondssincelastresponse : UInt32*) : HRESULT
    @lpVtbl.value.get_synchronization_status.call(this, sendsattempted, secondssincelastresponse)
  end
  def get_debuggee_type2(this : IDebugControl7*, flags : UInt32, class_ : UInt32*, qualifier : UInt32*) : HRESULT
    @lpVtbl.value.get_debuggee_type2.call(this, flags, class_, qualifier)
  end
end
struct LibWin32::IDebugDataSpaces
  def query_interface(this : IDebugDataSpaces*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDataSpaces*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDataSpaces*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_virtual(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual.call(this, offset, buffer, buffersize, byteswritten)
  end
  def search_virtual(this : IDebugDataSpaces*, offset : UInt64, length : UInt64, pattern : Void*, patternsize : UInt32, patterngranularity : UInt32, matchoffset : UInt64*) : HRESULT
    @lpVtbl.value.search_virtual.call(this, offset, length, pattern, patternsize, patterngranularity, matchoffset)
  end
  def read_virtual_uncached(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual_uncached.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual_uncached(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual_uncached.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_pointers_virtual(this : IDebugDataSpaces*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers_virtual.call(this, count, offset, ptrs)
  end
  def write_pointers_virtual(this : IDebugDataSpaces*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers_virtual.call(this, count, offset, ptrs)
  end
  def read_physical(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_physical.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_physical(this : IDebugDataSpaces*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_physical.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_control(this : IDebugDataSpaces*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_control.call(this, processor, offset, buffer, buffersize, bytesread)
  end
  def write_control(this : IDebugDataSpaces*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_control.call(this, processor, offset, buffer, buffersize, byteswritten)
  end
  def read_io(this : IDebugDataSpaces*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, bytesread)
  end
  def write_io(this : IDebugDataSpaces*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, byteswritten)
  end
  def read_msr(this : IDebugDataSpaces*, msr : UInt32, value : UInt64*) : HRESULT
    @lpVtbl.value.read_msr.call(this, msr, value)
  end
  def write_msr(this : IDebugDataSpaces*, msr : UInt32, value : UInt64) : HRESULT
    @lpVtbl.value.write_msr.call(this, msr, value)
  end
  def read_bus_data(this : IDebugDataSpaces*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, bytesread)
  end
  def write_bus_data(this : IDebugDataSpaces*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, byteswritten)
  end
  def check_low_memory(this : IDebugDataSpaces*) : HRESULT
    @lpVtbl.value.check_low_memory.call(this)
  end
  def read_debugger_data(this : IDebugDataSpaces*, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_debugger_data.call(this, index, buffer, buffersize, datasize)
  end
  def read_processor_system_data(this : IDebugDataSpaces*, processor : UInt32, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_processor_system_data.call(this, processor, index, buffer, buffersize, datasize)
  end
end
struct LibWin32::IDebugDataSpaces2
  def query_interface(this : IDebugDataSpaces2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDataSpaces2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDataSpaces2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_virtual(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual.call(this, offset, buffer, buffersize, byteswritten)
  end
  def search_virtual(this : IDebugDataSpaces2*, offset : UInt64, length : UInt64, pattern : Void*, patternsize : UInt32, patterngranularity : UInt32, matchoffset : UInt64*) : HRESULT
    @lpVtbl.value.search_virtual.call(this, offset, length, pattern, patternsize, patterngranularity, matchoffset)
  end
  def read_virtual_uncached(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual_uncached.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual_uncached(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual_uncached.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_pointers_virtual(this : IDebugDataSpaces2*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers_virtual.call(this, count, offset, ptrs)
  end
  def write_pointers_virtual(this : IDebugDataSpaces2*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers_virtual.call(this, count, offset, ptrs)
  end
  def read_physical(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_physical.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_physical(this : IDebugDataSpaces2*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_physical.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_control(this : IDebugDataSpaces2*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_control.call(this, processor, offset, buffer, buffersize, bytesread)
  end
  def write_control(this : IDebugDataSpaces2*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_control.call(this, processor, offset, buffer, buffersize, byteswritten)
  end
  def read_io(this : IDebugDataSpaces2*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, bytesread)
  end
  def write_io(this : IDebugDataSpaces2*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, byteswritten)
  end
  def read_msr(this : IDebugDataSpaces2*, msr : UInt32, value : UInt64*) : HRESULT
    @lpVtbl.value.read_msr.call(this, msr, value)
  end
  def write_msr(this : IDebugDataSpaces2*, msr : UInt32, value : UInt64) : HRESULT
    @lpVtbl.value.write_msr.call(this, msr, value)
  end
  def read_bus_data(this : IDebugDataSpaces2*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, bytesread)
  end
  def write_bus_data(this : IDebugDataSpaces2*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, byteswritten)
  end
  def check_low_memory(this : IDebugDataSpaces2*) : HRESULT
    @lpVtbl.value.check_low_memory.call(this)
  end
  def read_debugger_data(this : IDebugDataSpaces2*, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_debugger_data.call(this, index, buffer, buffersize, datasize)
  end
  def read_processor_system_data(this : IDebugDataSpaces2*, processor : UInt32, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_processor_system_data.call(this, processor, index, buffer, buffersize, datasize)
  end
  def virtual_to_physical(this : IDebugDataSpaces2*, virtual : UInt64, physical : UInt64*) : HRESULT
    @lpVtbl.value.virtual_to_physical.call(this, virtual, physical)
  end
  def get_virtual_translation_physical_offsets(this : IDebugDataSpaces2*, virtual : UInt64, offsets : UInt64*, offsetssize : UInt32, levels : UInt32*) : HRESULT
    @lpVtbl.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsetssize, levels)
  end
  def read_handle_data(this : IDebugDataSpaces2*, handle : UInt64, datatype : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_handle_data.call(this, handle, datatype, buffer, buffersize, datasize)
  end
  def fill_virtual(this : IDebugDataSpaces2*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_virtual.call(this, start, size, pattern, patternsize, filled)
  end
  def fill_physical(this : IDebugDataSpaces2*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_physical.call(this, start, size, pattern, patternsize, filled)
  end
  def query_virtual(this : IDebugDataSpaces2*, offset : UInt64, info : MEMORY_BASIC_INFORMATION64*) : HRESULT
    @lpVtbl.value.query_virtual.call(this, offset, info)
  end
end
struct LibWin32::IDebugDataSpaces3
  def query_interface(this : IDebugDataSpaces3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDataSpaces3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDataSpaces3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_virtual(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual.call(this, offset, buffer, buffersize, byteswritten)
  end
  def search_virtual(this : IDebugDataSpaces3*, offset : UInt64, length : UInt64, pattern : Void*, patternsize : UInt32, patterngranularity : UInt32, matchoffset : UInt64*) : HRESULT
    @lpVtbl.value.search_virtual.call(this, offset, length, pattern, patternsize, patterngranularity, matchoffset)
  end
  def read_virtual_uncached(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual_uncached.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual_uncached(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual_uncached.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_pointers_virtual(this : IDebugDataSpaces3*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers_virtual.call(this, count, offset, ptrs)
  end
  def write_pointers_virtual(this : IDebugDataSpaces3*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers_virtual.call(this, count, offset, ptrs)
  end
  def read_physical(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_physical.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_physical(this : IDebugDataSpaces3*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_physical.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_control(this : IDebugDataSpaces3*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_control.call(this, processor, offset, buffer, buffersize, bytesread)
  end
  def write_control(this : IDebugDataSpaces3*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_control.call(this, processor, offset, buffer, buffersize, byteswritten)
  end
  def read_io(this : IDebugDataSpaces3*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, bytesread)
  end
  def write_io(this : IDebugDataSpaces3*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, byteswritten)
  end
  def read_msr(this : IDebugDataSpaces3*, msr : UInt32, value : UInt64*) : HRESULT
    @lpVtbl.value.read_msr.call(this, msr, value)
  end
  def write_msr(this : IDebugDataSpaces3*, msr : UInt32, value : UInt64) : HRESULT
    @lpVtbl.value.write_msr.call(this, msr, value)
  end
  def read_bus_data(this : IDebugDataSpaces3*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, bytesread)
  end
  def write_bus_data(this : IDebugDataSpaces3*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, byteswritten)
  end
  def check_low_memory(this : IDebugDataSpaces3*) : HRESULT
    @lpVtbl.value.check_low_memory.call(this)
  end
  def read_debugger_data(this : IDebugDataSpaces3*, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_debugger_data.call(this, index, buffer, buffersize, datasize)
  end
  def read_processor_system_data(this : IDebugDataSpaces3*, processor : UInt32, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_processor_system_data.call(this, processor, index, buffer, buffersize, datasize)
  end
  def virtual_to_physical(this : IDebugDataSpaces3*, virtual : UInt64, physical : UInt64*) : HRESULT
    @lpVtbl.value.virtual_to_physical.call(this, virtual, physical)
  end
  def get_virtual_translation_physical_offsets(this : IDebugDataSpaces3*, virtual : UInt64, offsets : UInt64*, offsetssize : UInt32, levels : UInt32*) : HRESULT
    @lpVtbl.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsetssize, levels)
  end
  def read_handle_data(this : IDebugDataSpaces3*, handle : UInt64, datatype : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_handle_data.call(this, handle, datatype, buffer, buffersize, datasize)
  end
  def fill_virtual(this : IDebugDataSpaces3*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_virtual.call(this, start, size, pattern, patternsize, filled)
  end
  def fill_physical(this : IDebugDataSpaces3*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_physical.call(this, start, size, pattern, patternsize, filled)
  end
  def query_virtual(this : IDebugDataSpaces3*, offset : UInt64, info : MEMORY_BASIC_INFORMATION64*) : HRESULT
    @lpVtbl.value.query_virtual.call(this, offset, info)
  end
  def read_image_nt_headers(this : IDebugDataSpaces3*, imagebase : UInt64, headers : IMAGE_NT_HEADERS64*) : HRESULT
    @lpVtbl.value.read_image_nt_headers.call(this, imagebase, headers)
  end
  def read_tagged(this : IDebugDataSpaces3*, tag : Guid*, offset : UInt32, buffer : Void*, buffersize : UInt32, totalsize : UInt32*) : HRESULT
    @lpVtbl.value.read_tagged.call(this, tag, offset, buffer, buffersize, totalsize)
  end
  def start_enum_tagged(this : IDebugDataSpaces3*, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_enum_tagged.call(this, handle)
  end
  def get_next_tagged(this : IDebugDataSpaces3*, handle : UInt64, tag : Guid*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_next_tagged.call(this, handle, tag, size)
  end
  def end_enum_tagged(this : IDebugDataSpaces3*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_enum_tagged.call(this, handle)
  end
end
struct LibWin32::IDebugDataSpaces4
  def query_interface(this : IDebugDataSpaces4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDataSpaces4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDataSpaces4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_virtual(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual.call(this, offset, buffer, buffersize, byteswritten)
  end
  def search_virtual(this : IDebugDataSpaces4*, offset : UInt64, length : UInt64, pattern : Void*, patternsize : UInt32, patterngranularity : UInt32, matchoffset : UInt64*) : HRESULT
    @lpVtbl.value.search_virtual.call(this, offset, length, pattern, patternsize, patterngranularity, matchoffset)
  end
  def read_virtual_uncached(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_virtual_uncached.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_virtual_uncached(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_virtual_uncached.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_pointers_virtual(this : IDebugDataSpaces4*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers_virtual.call(this, count, offset, ptrs)
  end
  def write_pointers_virtual(this : IDebugDataSpaces4*, count : UInt32, offset : UInt64, ptrs : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers_virtual.call(this, count, offset, ptrs)
  end
  def read_physical(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_physical.call(this, offset, buffer, buffersize, bytesread)
  end
  def write_physical(this : IDebugDataSpaces4*, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_physical.call(this, offset, buffer, buffersize, byteswritten)
  end
  def read_control(this : IDebugDataSpaces4*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_control.call(this, processor, offset, buffer, buffersize, bytesread)
  end
  def write_control(this : IDebugDataSpaces4*, processor : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_control.call(this, processor, offset, buffer, buffersize, byteswritten)
  end
  def read_io(this : IDebugDataSpaces4*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, bytesread)
  end
  def write_io(this : IDebugDataSpaces4*, interfacetype : UInt32, busnumber : UInt32, addressspace : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_io.call(this, interfacetype, busnumber, addressspace, offset, buffer, buffersize, byteswritten)
  end
  def read_msr(this : IDebugDataSpaces4*, msr : UInt32, value : UInt64*) : HRESULT
    @lpVtbl.value.read_msr.call(this, msr, value)
  end
  def write_msr(this : IDebugDataSpaces4*, msr : UInt32, value : UInt64) : HRESULT
    @lpVtbl.value.write_msr.call(this, msr, value)
  end
  def read_bus_data(this : IDebugDataSpaces4*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, bytesread)
  end
  def write_bus_data(this : IDebugDataSpaces4*, busdatatype : UInt32, busnumber : UInt32, slotnumber : UInt32, offset : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_bus_data.call(this, busdatatype, busnumber, slotnumber, offset, buffer, buffersize, byteswritten)
  end
  def check_low_memory(this : IDebugDataSpaces4*) : HRESULT
    @lpVtbl.value.check_low_memory.call(this)
  end
  def read_debugger_data(this : IDebugDataSpaces4*, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_debugger_data.call(this, index, buffer, buffersize, datasize)
  end
  def read_processor_system_data(this : IDebugDataSpaces4*, processor : UInt32, index : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_processor_system_data.call(this, processor, index, buffer, buffersize, datasize)
  end
  def virtual_to_physical(this : IDebugDataSpaces4*, virtual : UInt64, physical : UInt64*) : HRESULT
    @lpVtbl.value.virtual_to_physical.call(this, virtual, physical)
  end
  def get_virtual_translation_physical_offsets(this : IDebugDataSpaces4*, virtual : UInt64, offsets : UInt64*, offsetssize : UInt32, levels : UInt32*) : HRESULT
    @lpVtbl.value.get_virtual_translation_physical_offsets.call(this, virtual, offsets, offsetssize, levels)
  end
  def read_handle_data(this : IDebugDataSpaces4*, handle : UInt64, datatype : UInt32, buffer : Void*, buffersize : UInt32, datasize : UInt32*) : HRESULT
    @lpVtbl.value.read_handle_data.call(this, handle, datatype, buffer, buffersize, datasize)
  end
  def fill_virtual(this : IDebugDataSpaces4*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_virtual.call(this, start, size, pattern, patternsize, filled)
  end
  def fill_physical(this : IDebugDataSpaces4*, start : UInt64, size : UInt32, pattern : Void*, patternsize : UInt32, filled : UInt32*) : HRESULT
    @lpVtbl.value.fill_physical.call(this, start, size, pattern, patternsize, filled)
  end
  def query_virtual(this : IDebugDataSpaces4*, offset : UInt64, info : MEMORY_BASIC_INFORMATION64*) : HRESULT
    @lpVtbl.value.query_virtual.call(this, offset, info)
  end
  def read_image_nt_headers(this : IDebugDataSpaces4*, imagebase : UInt64, headers : IMAGE_NT_HEADERS64*) : HRESULT
    @lpVtbl.value.read_image_nt_headers.call(this, imagebase, headers)
  end
  def read_tagged(this : IDebugDataSpaces4*, tag : Guid*, offset : UInt32, buffer : Void*, buffersize : UInt32, totalsize : UInt32*) : HRESULT
    @lpVtbl.value.read_tagged.call(this, tag, offset, buffer, buffersize, totalsize)
  end
  def start_enum_tagged(this : IDebugDataSpaces4*, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_enum_tagged.call(this, handle)
  end
  def get_next_tagged(this : IDebugDataSpaces4*, handle : UInt64, tag : Guid*, size : UInt32*) : HRESULT
    @lpVtbl.value.get_next_tagged.call(this, handle, tag, size)
  end
  def end_enum_tagged(this : IDebugDataSpaces4*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_enum_tagged.call(this, handle)
  end
  def get_offset_information(this : IDebugDataSpaces4*, space : UInt32, which : UInt32, offset : UInt64, buffer : Void*, buffersize : UInt32, infosize : UInt32*) : HRESULT
    @lpVtbl.value.get_offset_information.call(this, space, which, offset, buffer, buffersize, infosize)
  end
  def get_next_differently_valid_offset_virtual(this : IDebugDataSpaces4*, offset : UInt64, nextoffset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_differently_valid_offset_virtual.call(this, offset, nextoffset)
  end
  def get_valid_region_virtual(this : IDebugDataSpaces4*, base : UInt64, size : UInt32, validbase : UInt64*, validsize : UInt32*) : HRESULT
    @lpVtbl.value.get_valid_region_virtual.call(this, base, size, validbase, validsize)
  end
  def search_virtual2(this : IDebugDataSpaces4*, offset : UInt64, length : UInt64, flags : UInt32, pattern : Void*, patternsize : UInt32, patterngranularity : UInt32, matchoffset : UInt64*) : HRESULT
    @lpVtbl.value.search_virtual2.call(this, offset, length, flags, pattern, patternsize, patterngranularity, matchoffset)
  end
  def read_multi_byte_string_virtual(this : IDebugDataSpaces4*, offset : UInt64, maxbytes : UInt32, buffer : UInt8*, buffersize : UInt32, stringbytes : UInt32*) : HRESULT
    @lpVtbl.value.read_multi_byte_string_virtual.call(this, offset, maxbytes, buffer, buffersize, stringbytes)
  end
  def read_multi_byte_string_virtual_wide(this : IDebugDataSpaces4*, offset : UInt64, maxbytes : UInt32, codepage : UInt32, buffer : Char*, buffersize : UInt32, stringbytes : UInt32*) : HRESULT
    @lpVtbl.value.read_multi_byte_string_virtual_wide.call(this, offset, maxbytes, codepage, buffer, buffersize, stringbytes)
  end
  def read_unicode_string_virtual(this : IDebugDataSpaces4*, offset : UInt64, maxbytes : UInt32, codepage : UInt32, buffer : UInt8*, buffersize : UInt32, stringbytes : UInt32*) : HRESULT
    @lpVtbl.value.read_unicode_string_virtual.call(this, offset, maxbytes, codepage, buffer, buffersize, stringbytes)
  end
  def read_unicode_string_virtual_wide(this : IDebugDataSpaces4*, offset : UInt64, maxbytes : UInt32, buffer : Char*, buffersize : UInt32, stringbytes : UInt32*) : HRESULT
    @lpVtbl.value.read_unicode_string_virtual_wide.call(this, offset, maxbytes, buffer, buffersize, stringbytes)
  end
  def read_physical2(this : IDebugDataSpaces4*, offset : UInt64, flags : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_physical2.call(this, offset, flags, buffer, buffersize, bytesread)
  end
  def write_physical2(this : IDebugDataSpaces4*, offset : UInt64, flags : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_physical2.call(this, offset, flags, buffer, buffersize, byteswritten)
  end
end
struct LibWin32::IDebugEventCallbacks
  def query_interface(this : IDebugEventCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugEventCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugEventCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interest_mask(this : IDebugEventCallbacks*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def breakpoint(this : IDebugEventCallbacks*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.breakpoint.call(this, bp)
  end
  def exception(this : IDebugEventCallbacks*, exception : EXCEPTION_RECORD64*, firstchance : UInt32) : HRESULT
    @lpVtbl.value.exception.call(this, exception, firstchance)
  end
  def create_thread(this : IDebugEventCallbacks*, handle : UInt64, dataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_thread.call(this, handle, dataoffset, startoffset)
  end
  def exit_thread(this : IDebugEventCallbacks*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_thread.call(this, exitcode)
  end
  def create_process_a(this : IDebugEventCallbacks*, imagefilehandle : UInt64, handle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : PSTR, imagename : PSTR, checksum : UInt32, timedatestamp : UInt32, initialthreadhandle : UInt64, threaddataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_process_a.call(this, imagefilehandle, handle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, initialthreadhandle, threaddataoffset, startoffset)
  end
  def exit_process(this : IDebugEventCallbacks*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_process.call(this, exitcode)
  end
  def load_module(this : IDebugEventCallbacks*, imagefilehandle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : PSTR, imagename : PSTR, checksum : UInt32, timedatestamp : UInt32) : HRESULT
    @lpVtbl.value.load_module.call(this, imagefilehandle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp)
  end
  def unload_module(this : IDebugEventCallbacks*, imagebasename : PSTR, baseoffset : UInt64) : HRESULT
    @lpVtbl.value.unload_module.call(this, imagebasename, baseoffset)
  end
  def system_error(this : IDebugEventCallbacks*, error : UInt32, level : UInt32) : HRESULT
    @lpVtbl.value.system_error.call(this, error, level)
  end
  def session_status(this : IDebugEventCallbacks*, status : UInt32) : HRESULT
    @lpVtbl.value.session_status.call(this, status)
  end
  def change_debuggee_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_debuggee_state.call(this, flags, argument)
  end
  def change_engine_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_engine_state.call(this, flags, argument)
  end
  def change_symbol_state(this : IDebugEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_symbol_state.call(this, flags, argument)
  end
end
struct LibWin32::IDebugEventCallbacksWide
  def query_interface(this : IDebugEventCallbacksWide*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugEventCallbacksWide*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugEventCallbacksWide*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interest_mask(this : IDebugEventCallbacksWide*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def breakpoint(this : IDebugEventCallbacksWide*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.breakpoint.call(this, bp)
  end
  def exception(this : IDebugEventCallbacksWide*, exception : EXCEPTION_RECORD64*, firstchance : UInt32) : HRESULT
    @lpVtbl.value.exception.call(this, exception, firstchance)
  end
  def create_thread(this : IDebugEventCallbacksWide*, handle : UInt64, dataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_thread.call(this, handle, dataoffset, startoffset)
  end
  def exit_thread(this : IDebugEventCallbacksWide*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_thread.call(this, exitcode)
  end
  def create_process_a(this : IDebugEventCallbacksWide*, imagefilehandle : UInt64, handle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32, initialthreadhandle : UInt64, threaddataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_process_a.call(this, imagefilehandle, handle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, initialthreadhandle, threaddataoffset, startoffset)
  end
  def exit_process(this : IDebugEventCallbacksWide*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_process.call(this, exitcode)
  end
  def load_module(this : IDebugEventCallbacksWide*, imagefilehandle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32) : HRESULT
    @lpVtbl.value.load_module.call(this, imagefilehandle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp)
  end
  def unload_module(this : IDebugEventCallbacksWide*, imagebasename : LibC::LPWSTR, baseoffset : UInt64) : HRESULT
    @lpVtbl.value.unload_module.call(this, imagebasename, baseoffset)
  end
  def system_error(this : IDebugEventCallbacksWide*, error : UInt32, level : UInt32) : HRESULT
    @lpVtbl.value.system_error.call(this, error, level)
  end
  def session_status(this : IDebugEventCallbacksWide*, status : UInt32) : HRESULT
    @lpVtbl.value.session_status.call(this, status)
  end
  def change_debuggee_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_debuggee_state.call(this, flags, argument)
  end
  def change_engine_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_engine_state.call(this, flags, argument)
  end
  def change_symbol_state(this : IDebugEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_symbol_state.call(this, flags, argument)
  end
end
struct LibWin32::IDebugEventContextCallbacks
  def query_interface(this : IDebugEventContextCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugEventContextCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugEventContextCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interest_mask(this : IDebugEventContextCallbacks*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def breakpoint(this : IDebugEventContextCallbacks*, bp : IDebugBreakpoint2, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.breakpoint.call(this, bp, context, contextsize)
  end
  def exception(this : IDebugEventContextCallbacks*, exception : EXCEPTION_RECORD64*, firstchance : UInt32, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.exception.call(this, exception, firstchance, context, contextsize)
  end
  def create_thread(this : IDebugEventContextCallbacks*, handle : UInt64, dataoffset : UInt64, startoffset : UInt64, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.create_thread.call(this, handle, dataoffset, startoffset, context, contextsize)
  end
  def exit_thread(this : IDebugEventContextCallbacks*, exitcode : UInt32, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.exit_thread.call(this, exitcode, context, contextsize)
  end
  def create_process_a(this : IDebugEventContextCallbacks*, imagefilehandle : UInt64, handle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32, initialthreadhandle : UInt64, threaddataoffset : UInt64, startoffset : UInt64, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.create_process_a.call(this, imagefilehandle, handle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, initialthreadhandle, threaddataoffset, startoffset, context, contextsize)
  end
  def exit_process(this : IDebugEventContextCallbacks*, exitcode : UInt32, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.exit_process.call(this, exitcode, context, contextsize)
  end
  def load_module(this : IDebugEventContextCallbacks*, imagefilehandle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.load_module.call(this, imagefilehandle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, context, contextsize)
  end
  def unload_module(this : IDebugEventContextCallbacks*, imagebasename : LibC::LPWSTR, baseoffset : UInt64, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.unload_module.call(this, imagebasename, baseoffset, context, contextsize)
  end
  def system_error(this : IDebugEventContextCallbacks*, error : UInt32, level : UInt32, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.system_error.call(this, error, level, context, contextsize)
  end
  def session_status(this : IDebugEventContextCallbacks*, status : UInt32) : HRESULT
    @lpVtbl.value.session_status.call(this, status)
  end
  def change_debuggee_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.change_debuggee_state.call(this, flags, argument, context, contextsize)
  end
  def change_engine_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64, context : Void*, contextsize : UInt32) : HRESULT
    @lpVtbl.value.change_engine_state.call(this, flags, argument, context, contextsize)
  end
  def change_symbol_state(this : IDebugEventContextCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_symbol_state.call(this, flags, argument)
  end
end
struct LibWin32::IDebugInputCallbacks
  def query_interface(this : IDebugInputCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugInputCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugInputCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_input(this : IDebugInputCallbacks*, buffersize : UInt32) : HRESULT
    @lpVtbl.value.start_input.call(this, buffersize)
  end
  def end_input(this : IDebugInputCallbacks*) : HRESULT
    @lpVtbl.value.end_input.call(this)
  end
end
struct LibWin32::IDebugOutputCallbacks
  def query_interface(this : IDebugOutputCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugOutputCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugOutputCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def output(this : IDebugOutputCallbacks*, mask : UInt32, text : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, text)
  end
end
struct LibWin32::IDebugOutputCallbacksWide
  def query_interface(this : IDebugOutputCallbacksWide*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugOutputCallbacksWide*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugOutputCallbacksWide*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def output(this : IDebugOutputCallbacksWide*, mask : UInt32, text : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, text)
  end
end
struct LibWin32::IDebugOutputCallbacks2
  def query_interface(this : IDebugOutputCallbacks2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugOutputCallbacks2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugOutputCallbacks2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def output(this : IDebugOutputCallbacks2*, mask : UInt32, text : PSTR) : HRESULT
    @lpVtbl.value.output.call(this, mask, text)
  end
  def get_interest_mask(this : IDebugOutputCallbacks2*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def output2(this : IDebugOutputCallbacks2*, which : UInt32, flags : UInt32, arg : UInt64, text : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output2.call(this, which, flags, arg, text)
  end
end
struct LibWin32::IDebugRegisters
  def query_interface(this : IDebugRegisters*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugRegisters*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugRegisters*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_number_registers(this : IDebugRegisters*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_registers.call(this, number)
  end
  def get_description(this : IDebugRegisters*, register : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, desc : DEBUG_REGISTER_DESCRIPTION*) : HRESULT
    @lpVtbl.value.get_description.call(this, register, namebuffer, namebuffersize, namesize, desc)
  end
  def get_index_by_name(this : IDebugRegisters*, name : PSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.get_index_by_name.call(this, name, index)
  end
  def get_value(this : IDebugRegisters*, register : UInt32, value : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_value.call(this, register, value)
  end
  def set_value(this : IDebugRegisters*, register : UInt32, value : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_value.call(this, register, value)
  end
  def get_values(this : IDebugRegisters*, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_values.call(this, count, indices, start, values)
  end
  def set_values(this : IDebugRegisters*, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_values.call(this, count, indices, start, values)
  end
  def output_registers(this : IDebugRegisters*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_registers.call(this, outputcontrol, flags)
  end
  def get_instruction_offset(this : IDebugRegisters*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_instruction_offset.call(this, offset)
  end
  def get_stack_offset(this : IDebugRegisters*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_stack_offset.call(this, offset)
  end
  def get_frame_offset(this : IDebugRegisters*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_frame_offset.call(this, offset)
  end
end
struct LibWin32::IDebugRegisters2
  def query_interface(this : IDebugRegisters2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugRegisters2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugRegisters2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_number_registers(this : IDebugRegisters2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_registers.call(this, number)
  end
  def get_description(this : IDebugRegisters2*, register : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, desc : DEBUG_REGISTER_DESCRIPTION*) : HRESULT
    @lpVtbl.value.get_description.call(this, register, namebuffer, namebuffersize, namesize, desc)
  end
  def get_index_by_name(this : IDebugRegisters2*, name : PSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.get_index_by_name.call(this, name, index)
  end
  def get_value(this : IDebugRegisters2*, register : UInt32, value : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_value.call(this, register, value)
  end
  def set_value(this : IDebugRegisters2*, register : UInt32, value : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_value.call(this, register, value)
  end
  def get_values(this : IDebugRegisters2*, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_values.call(this, count, indices, start, values)
  end
  def set_values(this : IDebugRegisters2*, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_values.call(this, count, indices, start, values)
  end
  def output_registers(this : IDebugRegisters2*, outputcontrol : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_registers.call(this, outputcontrol, flags)
  end
  def get_instruction_offset(this : IDebugRegisters2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_instruction_offset.call(this, offset)
  end
  def get_stack_offset(this : IDebugRegisters2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_stack_offset.call(this, offset)
  end
  def get_frame_offset(this : IDebugRegisters2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_frame_offset.call(this, offset)
  end
  def get_description_wide(this : IDebugRegisters2*, register : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, desc : DEBUG_REGISTER_DESCRIPTION*) : HRESULT
    @lpVtbl.value.get_description_wide.call(this, register, namebuffer, namebuffersize, namesize, desc)
  end
  def get_index_by_name_wide(this : IDebugRegisters2*, name : LibC::LPWSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.get_index_by_name_wide.call(this, name, index)
  end
  def get_number_pseudo_registers(this : IDebugRegisters2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_pseudo_registers.call(this, number)
  end
  def get_pseudo_description(this : IDebugRegisters2*, register : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, typemodule : UInt64*, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_pseudo_description.call(this, register, namebuffer, namebuffersize, namesize, typemodule, typeid)
  end
  def get_pseudo_description_wide(this : IDebugRegisters2*, register : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, typemodule : UInt64*, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_pseudo_description_wide.call(this, register, namebuffer, namebuffersize, namesize, typemodule, typeid)
  end
  def get_pseudo_index_by_name(this : IDebugRegisters2*, name : PSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.get_pseudo_index_by_name.call(this, name, index)
  end
  def get_pseudo_index_by_name_wide(this : IDebugRegisters2*, name : LibC::LPWSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.get_pseudo_index_by_name_wide.call(this, name, index)
  end
  def get_pseudo_values(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_pseudo_values.call(this, source, count, indices, start, values)
  end
  def set_pseudo_values(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_pseudo_values.call(this, source, count, indices, start, values)
  end
  def get_values2(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.get_values2.call(this, source, count, indices, start, values)
  end
  def set_values2(this : IDebugRegisters2*, source : UInt32, count : UInt32, indices : UInt32*, start : UInt32, values : DEBUG_VALUE*) : HRESULT
    @lpVtbl.value.set_values2.call(this, source, count, indices, start, values)
  end
  def output_registers2(this : IDebugRegisters2*, outputcontrol : UInt32, source : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_registers2.call(this, outputcontrol, source, flags)
  end
  def get_instruction_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_instruction_offset2.call(this, source, offset)
  end
  def get_stack_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_stack_offset2.call(this, source, offset)
  end
  def get_frame_offset2(this : IDebugRegisters2*, source : UInt32, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_frame_offset2.call(this, source, offset)
  end
end
struct LibWin32::IDebugSymbolGroup
  def query_interface(this : IDebugSymbolGroup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbolGroup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbolGroup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_number_symbols(this : IDebugSymbolGroup*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_symbols.call(this, number)
  end
  def add_symbol(this : IDebugSymbolGroup*, name : PSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.add_symbol.call(this, name, index)
  end
  def remove_symbol_by_name(this : IDebugSymbolGroup*, name : PSTR) : HRESULT
    @lpVtbl.value.remove_symbol_by_name.call(this, name)
  end
  def remove_symbol_by_index(this : IDebugSymbolGroup*, index : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_by_index.call(this, index)
  end
  def get_symbol_name(this : IDebugSymbolGroup*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_name.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_parameters(this : IDebugSymbolGroup*, start : UInt32, count : UInt32, params : DEBUG_SYMBOL_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_symbol_parameters.call(this, start, count, params)
  end
  def expand_symbol(this : IDebugSymbolGroup*, index : UInt32, expand : LibC::BOOL) : HRESULT
    @lpVtbl.value.expand_symbol.call(this, index, expand)
  end
  def output_symbols(this : IDebugSymbolGroup*, outputcontrol : UInt32, flags : UInt32, start : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.output_symbols.call(this, outputcontrol, flags, start, count)
  end
  def write_symbol(this : IDebugSymbolGroup*, index : UInt32, value : PSTR) : HRESULT
    @lpVtbl.value.write_symbol.call(this, index, value)
  end
  def output_as_type(this : IDebugSymbolGroup*, index : UInt32, type : PSTR) : HRESULT
    @lpVtbl.value.output_as_type.call(this, index, type)
  end
end
struct LibWin32::IDebugSymbolGroup2
  def query_interface(this : IDebugSymbolGroup2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbolGroup2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbolGroup2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_number_symbols(this : IDebugSymbolGroup2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_symbols.call(this, number)
  end
  def add_symbol(this : IDebugSymbolGroup2*, name : PSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.add_symbol.call(this, name, index)
  end
  def remove_symbol_by_name(this : IDebugSymbolGroup2*, name : PSTR) : HRESULT
    @lpVtbl.value.remove_symbol_by_name.call(this, name)
  end
  def remove_symbol_by_index(this : IDebugSymbolGroup2*, index : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_by_index.call(this, index)
  end
  def get_symbol_name(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_name.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_parameters(this : IDebugSymbolGroup2*, start : UInt32, count : UInt32, params : DEBUG_SYMBOL_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_symbol_parameters.call(this, start, count, params)
  end
  def expand_symbol(this : IDebugSymbolGroup2*, index : UInt32, expand : LibC::BOOL) : HRESULT
    @lpVtbl.value.expand_symbol.call(this, index, expand)
  end
  def output_symbols(this : IDebugSymbolGroup2*, outputcontrol : UInt32, flags : UInt32, start : UInt32, count : UInt32) : HRESULT
    @lpVtbl.value.output_symbols.call(this, outputcontrol, flags, start, count)
  end
  def write_symbol(this : IDebugSymbolGroup2*, index : UInt32, value : PSTR) : HRESULT
    @lpVtbl.value.write_symbol.call(this, index, value)
  end
  def output_as_type(this : IDebugSymbolGroup2*, index : UInt32, type : PSTR) : HRESULT
    @lpVtbl.value.output_as_type.call(this, index, type)
  end
  def add_symbol_wide(this : IDebugSymbolGroup2*, name : LibC::LPWSTR, index : UInt32*) : HRESULT
    @lpVtbl.value.add_symbol_wide.call(this, name, index)
  end
  def remove_symbol_by_name_wide(this : IDebugSymbolGroup2*, name : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.remove_symbol_by_name_wide.call(this, name)
  end
  def get_symbol_name_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_name_wide.call(this, index, buffer, buffersize, namesize)
  end
  def write_symbol_wide(this : IDebugSymbolGroup2*, index : UInt32, value : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_symbol_wide.call(this, index, value)
  end
  def output_as_type_wide(this : IDebugSymbolGroup2*, index : UInt32, type : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.output_as_type_wide.call(this, index, type)
  end
  def get_symbol_type_name(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_type_name.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_type_name_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_type_name_wide.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_size(this : IDebugSymbolGroup2*, index : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_size.call(this, index, size)
  end
  def get_symbol_offset(this : IDebugSymbolGroup2*, index : UInt32, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_offset.call(this, index, offset)
  end
  def get_symbol_register(this : IDebugSymbolGroup2*, index : UInt32, register : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_register.call(this, index, register)
  end
  def get_symbol_value_text(this : IDebugSymbolGroup2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_value_text.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_value_text_wide(this : IDebugSymbolGroup2*, index : UInt32, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_value_text_wide.call(this, index, buffer, buffersize, namesize)
  end
  def get_symbol_entry_information(this : IDebugSymbolGroup2*, index : UInt32, entry : DEBUG_SYMBOL_ENTRY*) : HRESULT
    @lpVtbl.value.get_symbol_entry_information.call(this, index, entry)
  end
end
struct LibWin32::IDebugSymbols
  def query_interface(this : IDebugSymbols*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbols*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbols*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbol_options(this : IDebugSymbols*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_options.call(this, options)
  end
  def add_symbol_options(this : IDebugSymbols*, options : UInt32) : HRESULT
    @lpVtbl.value.add_symbol_options.call(this, options)
  end
  def remove_symbol_options(this : IDebugSymbols*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_options.call(this, options)
  end
  def set_symbol_options(this : IDebugSymbols*, options : UInt32) : HRESULT
    @lpVtbl.value.set_symbol_options.call(this, options)
  end
  def get_name_by_offset(this : IDebugSymbols*, offset : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name(this : IDebugSymbols*, symbol : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name.call(this, symbol, offset)
  end
  def get_near_name_by_offset(this : IDebugSymbols*, offset : UInt64, delta : Int32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset(this : IDebugSymbols*, offset : UInt64, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line(this : IDebugSymbols*, line : UInt32, file : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line.call(this, line, file, offset)
  end
  def get_number_modules(this : IDebugSymbols*, loaded : UInt32*, unloaded : UInt32*) : HRESULT
    @lpVtbl.value.get_number_modules.call(this, loaded, unloaded)
  end
  def get_module_by_index(this : IDebugSymbols*, index : UInt32, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_index.call(this, index, base)
  end
  def get_module_by_module_name(this : IDebugSymbols*, name : PSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name.call(this, name, startindex, index, base)
  end
  def get_module_by_offset(this : IDebugSymbols*, offset : UInt64, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset.call(this, offset, startindex, index, base)
  end
  def get_module_names(this : IDebugSymbols*, index : UInt32, base : UInt64, imagenamebuffer : UInt8*, imagenamebuffersize : UInt32, imagenamesize : UInt32*, modulenamebuffer : UInt8*, modulenamebuffersize : UInt32, modulenamesize : UInt32*, loadedimagenamebuffer : UInt8*, loadedimagenamebuffersize : UInt32, loadedimagenamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_names.call(this, index, base, imagenamebuffer, imagenamebuffersize, imagenamesize, modulenamebuffer, modulenamebuffersize, modulenamesize, loadedimagenamebuffer, loadedimagenamebuffersize, loadedimagenamesize)
  end
  def get_module_parameters(this : IDebugSymbols*, count : UInt32, bases : UInt64*, start : UInt32, params : DEBUG_MODULE_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_module_parameters.call(this, count, bases, start, params)
  end
  def get_symbol_module(this : IDebugSymbols*, symbol : PSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module.call(this, symbol, base)
  end
  def get_type_name(this : IDebugSymbols*, module_ : UInt64, typeid : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id(this : IDebugSymbols*, module_ : UInt64, name : PSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id.call(this, module_, name, typeid)
  end
  def get_type_size(this : IDebugSymbols*, module_ : UInt64, typeid : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_type_size.call(this, module_, typeid, size)
  end
  def get_field_offset(this : IDebugSymbols*, module_ : UInt64, typeid : UInt32, field : PSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id(this : IDebugSymbols*, symbol : PSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id.call(this, symbol, typeid, module_)
  end
  def get_offset_type_id(this : IDebugSymbols*, offset : UInt64, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_type_id.call(this, offset, typeid, module_)
  end
  def read_typed_data_virtual(this : IDebugSymbols*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_virtual(this : IDebugSymbols*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_virtual(this : IDebugSymbols*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_virtual.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def read_typed_data_physical(this : IDebugSymbols*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_physical(this : IDebugSymbols*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_physical(this : IDebugSymbols*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_physical.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def get_scope(this : IDebugSymbols*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope(this : IDebugSymbols*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def reset_scope(this : IDebugSymbols*) : HRESULT
    @lpVtbl.value.reset_scope.call(this)
  end
  def get_scope_symbol_group(this : IDebugSymbols*, flags : UInt32, update : IDebugSymbolGroup, symbols : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group.call(this, flags, update, symbols)
  end
  def create_symbol_group(this : IDebugSymbols*, group : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.create_symbol_group.call(this, group)
  end
  def start_symbol_match(this : IDebugSymbols*, pattern : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match.call(this, pattern, handle)
  end
  def get_next_symbol_match(this : IDebugSymbols*, handle : UInt64, buffer : UInt8*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def end_symbol_match(this : IDebugSymbols*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_symbol_match.call(this, handle)
  end
  def reload(this : IDebugSymbols*, module_ : PSTR) : HRESULT
    @lpVtbl.value.reload.call(this, module_)
  end
  def get_symbol_path(this : IDebugSymbols*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path(this : IDebugSymbols*, path : PSTR) : HRESULT
    @lpVtbl.value.set_symbol_path.call(this, path)
  end
  def append_symbol_path(this : IDebugSymbols*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_symbol_path.call(this, addition)
  end
  def get_image_path(this : IDebugSymbols*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path(this : IDebugSymbols*, path : PSTR) : HRESULT
    @lpVtbl.value.set_image_path.call(this, path)
  end
  def append_image_path(this : IDebugSymbols*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_image_path.call(this, addition)
  end
  def get_source_path(this : IDebugSymbols*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element(this : IDebugSymbols*, index : UInt32, buffer : UInt8*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path(this : IDebugSymbols*, path : PSTR) : HRESULT
    @lpVtbl.value.set_source_path.call(this, path)
  end
  def append_source_path(this : IDebugSymbols*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_source_path.call(this, addition)
  end
  def find_source_file(this : IDebugSymbols*, startelement : UInt32, file : PSTR, flags : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets(this : IDebugSymbols*, file : PSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets.call(this, file, buffer, bufferlines, filelines)
  end
end
struct LibWin32::IDebugSymbols2
  def query_interface(this : IDebugSymbols2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbols2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbols2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbol_options(this : IDebugSymbols2*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_options.call(this, options)
  end
  def add_symbol_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.add_symbol_options.call(this, options)
  end
  def remove_symbol_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_options.call(this, options)
  end
  def set_symbol_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.set_symbol_options.call(this, options)
  end
  def get_name_by_offset(this : IDebugSymbols2*, offset : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name(this : IDebugSymbols2*, symbol : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name.call(this, symbol, offset)
  end
  def get_near_name_by_offset(this : IDebugSymbols2*, offset : UInt64, delta : Int32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset(this : IDebugSymbols2*, offset : UInt64, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line(this : IDebugSymbols2*, line : UInt32, file : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line.call(this, line, file, offset)
  end
  def get_number_modules(this : IDebugSymbols2*, loaded : UInt32*, unloaded : UInt32*) : HRESULT
    @lpVtbl.value.get_number_modules.call(this, loaded, unloaded)
  end
  def get_module_by_index(this : IDebugSymbols2*, index : UInt32, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_index.call(this, index, base)
  end
  def get_module_by_module_name(this : IDebugSymbols2*, name : PSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name.call(this, name, startindex, index, base)
  end
  def get_module_by_offset(this : IDebugSymbols2*, offset : UInt64, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset.call(this, offset, startindex, index, base)
  end
  def get_module_names(this : IDebugSymbols2*, index : UInt32, base : UInt64, imagenamebuffer : UInt8*, imagenamebuffersize : UInt32, imagenamesize : UInt32*, modulenamebuffer : UInt8*, modulenamebuffersize : UInt32, modulenamesize : UInt32*, loadedimagenamebuffer : UInt8*, loadedimagenamebuffersize : UInt32, loadedimagenamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_names.call(this, index, base, imagenamebuffer, imagenamebuffersize, imagenamesize, modulenamebuffer, modulenamebuffersize, modulenamesize, loadedimagenamebuffer, loadedimagenamebuffersize, loadedimagenamesize)
  end
  def get_module_parameters(this : IDebugSymbols2*, count : UInt32, bases : UInt64*, start : UInt32, params : DEBUG_MODULE_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_module_parameters.call(this, count, bases, start, params)
  end
  def get_symbol_module(this : IDebugSymbols2*, symbol : PSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module.call(this, symbol, base)
  end
  def get_type_name(this : IDebugSymbols2*, module_ : UInt64, typeid : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id(this : IDebugSymbols2*, module_ : UInt64, name : PSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id.call(this, module_, name, typeid)
  end
  def get_type_size(this : IDebugSymbols2*, module_ : UInt64, typeid : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_type_size.call(this, module_, typeid, size)
  end
  def get_field_offset(this : IDebugSymbols2*, module_ : UInt64, typeid : UInt32, field : PSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id(this : IDebugSymbols2*, symbol : PSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id.call(this, symbol, typeid, module_)
  end
  def get_offset_type_id(this : IDebugSymbols2*, offset : UInt64, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_type_id.call(this, offset, typeid, module_)
  end
  def read_typed_data_virtual(this : IDebugSymbols2*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_virtual(this : IDebugSymbols2*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_virtual(this : IDebugSymbols2*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_virtual.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def read_typed_data_physical(this : IDebugSymbols2*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_physical(this : IDebugSymbols2*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_physical(this : IDebugSymbols2*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_physical.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def get_scope(this : IDebugSymbols2*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope(this : IDebugSymbols2*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def reset_scope(this : IDebugSymbols2*) : HRESULT
    @lpVtbl.value.reset_scope.call(this)
  end
  def get_scope_symbol_group(this : IDebugSymbols2*, flags : UInt32, update : IDebugSymbolGroup, symbols : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group.call(this, flags, update, symbols)
  end
  def create_symbol_group(this : IDebugSymbols2*, group : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.create_symbol_group.call(this, group)
  end
  def start_symbol_match(this : IDebugSymbols2*, pattern : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match.call(this, pattern, handle)
  end
  def get_next_symbol_match(this : IDebugSymbols2*, handle : UInt64, buffer : UInt8*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def end_symbol_match(this : IDebugSymbols2*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_symbol_match.call(this, handle)
  end
  def reload(this : IDebugSymbols2*, module_ : PSTR) : HRESULT
    @lpVtbl.value.reload.call(this, module_)
  end
  def get_symbol_path(this : IDebugSymbols2*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path(this : IDebugSymbols2*, path : PSTR) : HRESULT
    @lpVtbl.value.set_symbol_path.call(this, path)
  end
  def append_symbol_path(this : IDebugSymbols2*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_symbol_path.call(this, addition)
  end
  def get_image_path(this : IDebugSymbols2*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path(this : IDebugSymbols2*, path : PSTR) : HRESULT
    @lpVtbl.value.set_image_path.call(this, path)
  end
  def append_image_path(this : IDebugSymbols2*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_image_path.call(this, addition)
  end
  def get_source_path(this : IDebugSymbols2*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element(this : IDebugSymbols2*, index : UInt32, buffer : UInt8*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path(this : IDebugSymbols2*, path : PSTR) : HRESULT
    @lpVtbl.value.set_source_path.call(this, path)
  end
  def append_source_path(this : IDebugSymbols2*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_source_path.call(this, addition)
  end
  def find_source_file(this : IDebugSymbols2*, startelement : UInt32, file : PSTR, flags : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets(this : IDebugSymbols2*, file : PSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information(this : IDebugSymbols2*, index : UInt32, base : UInt64, item : PSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string(this : IDebugSymbols2*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name(this : IDebugSymbols2*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name(this : IDebugSymbols2*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def get_type_options(this : IDebugSymbols2*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_type_options.call(this, options)
  end
  def add_type_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.add_type_options.call(this, options)
  end
  def remove_type_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_type_options.call(this, options)
  end
  def set_type_options(this : IDebugSymbols2*, options : UInt32) : HRESULT
    @lpVtbl.value.set_type_options.call(this, options)
  end
end
struct LibWin32::IDebugSymbols3
  def query_interface(this : IDebugSymbols3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbols3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbols3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbol_options(this : IDebugSymbols3*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_options.call(this, options)
  end
  def add_symbol_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.add_symbol_options.call(this, options)
  end
  def remove_symbol_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_options.call(this, options)
  end
  def set_symbol_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.set_symbol_options.call(this, options)
  end
  def get_name_by_offset(this : IDebugSymbols3*, offset : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name(this : IDebugSymbols3*, symbol : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name.call(this, symbol, offset)
  end
  def get_near_name_by_offset(this : IDebugSymbols3*, offset : UInt64, delta : Int32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset(this : IDebugSymbols3*, offset : UInt64, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line(this : IDebugSymbols3*, line : UInt32, file : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line.call(this, line, file, offset)
  end
  def get_number_modules(this : IDebugSymbols3*, loaded : UInt32*, unloaded : UInt32*) : HRESULT
    @lpVtbl.value.get_number_modules.call(this, loaded, unloaded)
  end
  def get_module_by_index(this : IDebugSymbols3*, index : UInt32, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_index.call(this, index, base)
  end
  def get_module_by_module_name(this : IDebugSymbols3*, name : PSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name.call(this, name, startindex, index, base)
  end
  def get_module_by_offset(this : IDebugSymbols3*, offset : UInt64, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset.call(this, offset, startindex, index, base)
  end
  def get_module_names(this : IDebugSymbols3*, index : UInt32, base : UInt64, imagenamebuffer : UInt8*, imagenamebuffersize : UInt32, imagenamesize : UInt32*, modulenamebuffer : UInt8*, modulenamebuffersize : UInt32, modulenamesize : UInt32*, loadedimagenamebuffer : UInt8*, loadedimagenamebuffersize : UInt32, loadedimagenamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_names.call(this, index, base, imagenamebuffer, imagenamebuffersize, imagenamesize, modulenamebuffer, modulenamebuffersize, modulenamesize, loadedimagenamebuffer, loadedimagenamebuffersize, loadedimagenamesize)
  end
  def get_module_parameters(this : IDebugSymbols3*, count : UInt32, bases : UInt64*, start : UInt32, params : DEBUG_MODULE_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_module_parameters.call(this, count, bases, start, params)
  end
  def get_symbol_module(this : IDebugSymbols3*, symbol : PSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module.call(this, symbol, base)
  end
  def get_type_name(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id(this : IDebugSymbols3*, module_ : UInt64, name : PSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id.call(this, module_, name, typeid)
  end
  def get_type_size(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_type_size.call(this, module_, typeid, size)
  end
  def get_field_offset(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, field : PSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id(this : IDebugSymbols3*, symbol : PSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id.call(this, symbol, typeid, module_)
  end
  def get_offset_type_id(this : IDebugSymbols3*, offset : UInt64, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_type_id.call(this, offset, typeid, module_)
  end
  def read_typed_data_virtual(this : IDebugSymbols3*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_virtual(this : IDebugSymbols3*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_virtual(this : IDebugSymbols3*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_virtual.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def read_typed_data_physical(this : IDebugSymbols3*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_physical(this : IDebugSymbols3*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_physical(this : IDebugSymbols3*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_physical.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def get_scope(this : IDebugSymbols3*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope(this : IDebugSymbols3*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def reset_scope(this : IDebugSymbols3*) : HRESULT
    @lpVtbl.value.reset_scope.call(this)
  end
  def get_scope_symbol_group(this : IDebugSymbols3*, flags : UInt32, update : IDebugSymbolGroup, symbols : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group.call(this, flags, update, symbols)
  end
  def create_symbol_group(this : IDebugSymbols3*, group : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.create_symbol_group.call(this, group)
  end
  def start_symbol_match(this : IDebugSymbols3*, pattern : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match.call(this, pattern, handle)
  end
  def get_next_symbol_match(this : IDebugSymbols3*, handle : UInt64, buffer : UInt8*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def end_symbol_match(this : IDebugSymbols3*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_symbol_match.call(this, handle)
  end
  def reload(this : IDebugSymbols3*, module_ : PSTR) : HRESULT
    @lpVtbl.value.reload.call(this, module_)
  end
  def get_symbol_path(this : IDebugSymbols3*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path(this : IDebugSymbols3*, path : PSTR) : HRESULT
    @lpVtbl.value.set_symbol_path.call(this, path)
  end
  def append_symbol_path(this : IDebugSymbols3*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_symbol_path.call(this, addition)
  end
  def get_image_path(this : IDebugSymbols3*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path(this : IDebugSymbols3*, path : PSTR) : HRESULT
    @lpVtbl.value.set_image_path.call(this, path)
  end
  def append_image_path(this : IDebugSymbols3*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_image_path.call(this, addition)
  end
  def get_source_path(this : IDebugSymbols3*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element(this : IDebugSymbols3*, index : UInt32, buffer : UInt8*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path(this : IDebugSymbols3*, path : PSTR) : HRESULT
    @lpVtbl.value.set_source_path.call(this, path)
  end
  def append_source_path(this : IDebugSymbols3*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_source_path.call(this, addition)
  end
  def find_source_file(this : IDebugSymbols3*, startelement : UInt32, file : PSTR, flags : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets(this : IDebugSymbols3*, file : PSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information(this : IDebugSymbols3*, index : UInt32, base : UInt64, item : PSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string(this : IDebugSymbols3*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def get_type_options(this : IDebugSymbols3*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_type_options.call(this, options)
  end
  def add_type_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.add_type_options.call(this, options)
  end
  def remove_type_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_type_options.call(this, options)
  end
  def set_type_options(this : IDebugSymbols3*, options : UInt32) : HRESULT
    @lpVtbl.value.set_type_options.call(this, options)
  end
  def get_name_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset_wide.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name_wide(this : IDebugSymbols3*, symbol : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name_wide.call(this, symbol, offset)
  end
  def get_near_name_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, delta : Int32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset_wide.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset_wide(this : IDebugSymbols3*, offset : UInt64, line : UInt32*, filebuffer : Char*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset_wide.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line_wide(this : IDebugSymbols3*, line : UInt32, file : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line_wide.call(this, line, file, offset)
  end
  def get_module_by_module_name_wide(this : IDebugSymbols3*, name : LibC::LPWSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name_wide.call(this, name, startindex, index, base)
  end
  def get_symbol_module_wide(this : IDebugSymbols3*, symbol : LibC::LPWSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module_wide.call(this, symbol, base)
  end
  def get_type_name_wide(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name_wide.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id_wide(this : IDebugSymbols3*, module_ : UInt64, name : LibC::LPWSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id_wide.call(this, module_, name, typeid)
  end
  def get_field_offset_wide(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, field : LibC::LPWSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset_wide.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id_wide(this : IDebugSymbols3*, symbol : LibC::LPWSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id_wide.call(this, symbol, typeid, module_)
  end
  def get_scope_symbol_group2(this : IDebugSymbols3*, flags : UInt32, update : IDebugSymbolGroup2, symbols : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group2.call(this, flags, update, symbols)
  end
  def create_symbol_group2(this : IDebugSymbols3*, group : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.create_symbol_group2.call(this, group)
  end
  def start_symbol_match_wide(this : IDebugSymbols3*, pattern : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match_wide.call(this, pattern, handle)
  end
  def get_next_symbol_match_wide(this : IDebugSymbols3*, handle : UInt64, buffer : Char*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match_wide.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def reload_wide(this : IDebugSymbols3*, module_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.reload_wide.call(this, module_)
  end
  def get_symbol_path_wide(this : IDebugSymbols3*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path_wide(this : IDebugSymbols3*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_symbol_path_wide.call(this, path)
  end
  def append_symbol_path_wide(this : IDebugSymbols3*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_symbol_path_wide.call(this, addition)
  end
  def get_image_path_wide(this : IDebugSymbols3*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path_wide(this : IDebugSymbols3*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_image_path_wide.call(this, path)
  end
  def append_image_path_wide(this : IDebugSymbols3*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_image_path_wide.call(this, addition)
  end
  def get_source_path_wide(this : IDebugSymbols3*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element_wide(this : IDebugSymbols3*, index : UInt32, buffer : Char*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element_wide.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path_wide(this : IDebugSymbols3*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_source_path_wide.call(this, path)
  end
  def append_source_path_wide(this : IDebugSymbols3*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_source_path_wide.call(this, addition)
  end
  def find_source_file_wide(this : IDebugSymbols3*, startelement : UInt32, file : LibC::LPWSTR, flags : UInt32, foundelement : UInt32*, buffer : Char*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_wide.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets_wide(this : IDebugSymbols3*, file : LibC::LPWSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets_wide.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information_wide(this : IDebugSymbols3*, index : UInt32, base : UInt64, item : LibC::LPWSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string_wide(this : IDebugSymbols3*, which : UInt32, index : UInt32, base : UInt64, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name_wide(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name_wide.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name_wide(this : IDebugSymbols3*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name_wide.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def is_managed_module(this : IDebugSymbols3*, index : UInt32, base : UInt64) : HRESULT
    @lpVtbl.value.is_managed_module.call(this, index, base)
  end
  def get_module_by_module_name2(this : IDebugSymbols3*, name : PSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_module_name2_wide(this : IDebugSymbols3*, name : LibC::LPWSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2_wide.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_offset2(this : IDebugSymbols3*, offset : UInt64, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset2.call(this, offset, startindex, flags, index, base)
  end
  def add_synthetic_module(this : IDebugSymbols3*, base : UInt64, size : UInt32, imagepath : PSTR, modulename : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module.call(this, base, size, imagepath, modulename, flags)
  end
  def add_synthetic_module_wide(this : IDebugSymbols3*, base : UInt64, size : UInt32, imagepath : LibC::LPWSTR, modulename : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module_wide.call(this, base, size, imagepath, modulename, flags)
  end
  def remove_synthetic_module(this : IDebugSymbols3*, base : UInt64) : HRESULT
    @lpVtbl.value.remove_synthetic_module.call(this, base)
  end
  def get_current_scope_frame_index(this : IDebugSymbols3*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_scope_frame_index.call(this, index)
  end
  def set_scope_frame_by_index(this : IDebugSymbols3*, index : UInt32) : HRESULT
    @lpVtbl.value.set_scope_frame_by_index.call(this, index)
  end
  def set_scope_from_jit_debug_info(this : IDebugSymbols3*, outputcontrol : UInt32, infooffset : UInt64) : HRESULT
    @lpVtbl.value.set_scope_from_jit_debug_info.call(this, outputcontrol, infooffset)
  end
  def set_scope_from_stored_event(this : IDebugSymbols3*) : HRESULT
    @lpVtbl.value.set_scope_from_stored_event.call(this)
  end
  def output_symbol_by_offset(this : IDebugSymbols3*, outputcontrol : UInt32, flags : UInt32, offset : UInt64) : HRESULT
    @lpVtbl.value.output_symbol_by_offset.call(this, outputcontrol, flags, offset)
  end
  def get_function_entry_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, buffer : Void*, buffersize : UInt32, bufferneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffersize, bufferneeded)
  end
  def get_field_type_and_offset(this : IDebugSymbols3*, module_ : UInt64, containertypeid : UInt32, field : PSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def get_field_type_and_offset_wide(this : IDebugSymbols3*, module_ : UInt64, containertypeid : UInt32, field : LibC::LPWSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset_wide.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def add_synthetic_symbol(this : IDebugSymbols3*, offset : UInt64, size : UInt32, name : PSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
  end
  def add_synthetic_symbol_wide(this : IDebugSymbols3*, offset : UInt64, size : UInt32, name : LibC::LPWSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
  end
  def remove_synthetic_symbol(this : IDebugSymbols3*, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.remove_synthetic_symbol.call(this, id)
  end
  def get_symbol_entries_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, displacements : UInt64*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, idscount, entries)
  end
  def get_symbol_entries_by_name(this : IDebugSymbols3*, symbol : PSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entries_by_name_wide(this : IDebugSymbols3*, symbol : LibC::LPWSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entry_by_token(this : IDebugSymbols3*, modulebase : UInt64, token : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_token.call(this, modulebase, token, id)
  end
  def get_symbol_entry_information(this : IDebugSymbols3*, id : DEBUG_MODULE_AND_ID*, info : DEBUG_SYMBOL_ENTRY*) : HRESULT
    @lpVtbl.value.get_symbol_entry_information.call(this, id, info)
  end
  def get_symbol_entry_string(this : IDebugSymbols3*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_string_wide(this : IDebugSymbols3*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_offset_regions(this : IDebugSymbols3*, id : DEBUG_MODULE_AND_ID*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regionscount, regionsavail)
  end
  def get_symbol_entry_by_symbol_entry(this : IDebugSymbols3*, fromid : DEBUG_MODULE_AND_ID*, flags : UInt32, toid : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_symbol_entry.call(this, fromid, flags, toid)
  end
  def get_source_entries_by_offset(this : IDebugSymbols3*, offset : UInt64, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_offset.call(this, offset, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line(this : IDebugSymbols3*, line : UInt32, file : PSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line_wide(this : IDebugSymbols3*, line : UInt32, file : LibC::LPWSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entry_string(this : IDebugSymbols3*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_string_wide(this : IDebugSymbols3*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_offset_regions(this : IDebugSymbols3*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regionscount, regionsavail)
  end
  def get_source_entry_by_source_entry(this : IDebugSymbols3*, fromentry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, toentry : DEBUG_SYMBOL_SOURCE_ENTRY*) : HRESULT
    @lpVtbl.value.get_source_entry_by_source_entry.call(this, fromentry, flags, toentry)
  end
end
struct LibWin32::IDebugSymbols4
  def query_interface(this : IDebugSymbols4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbols4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbols4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbol_options(this : IDebugSymbols4*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_options.call(this, options)
  end
  def add_symbol_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.add_symbol_options.call(this, options)
  end
  def remove_symbol_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_options.call(this, options)
  end
  def set_symbol_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.set_symbol_options.call(this, options)
  end
  def get_name_by_offset(this : IDebugSymbols4*, offset : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name(this : IDebugSymbols4*, symbol : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name.call(this, symbol, offset)
  end
  def get_near_name_by_offset(this : IDebugSymbols4*, offset : UInt64, delta : Int32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset(this : IDebugSymbols4*, offset : UInt64, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line(this : IDebugSymbols4*, line : UInt32, file : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line.call(this, line, file, offset)
  end
  def get_number_modules(this : IDebugSymbols4*, loaded : UInt32*, unloaded : UInt32*) : HRESULT
    @lpVtbl.value.get_number_modules.call(this, loaded, unloaded)
  end
  def get_module_by_index(this : IDebugSymbols4*, index : UInt32, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_index.call(this, index, base)
  end
  def get_module_by_module_name(this : IDebugSymbols4*, name : PSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name.call(this, name, startindex, index, base)
  end
  def get_module_by_offset(this : IDebugSymbols4*, offset : UInt64, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset.call(this, offset, startindex, index, base)
  end
  def get_module_names(this : IDebugSymbols4*, index : UInt32, base : UInt64, imagenamebuffer : UInt8*, imagenamebuffersize : UInt32, imagenamesize : UInt32*, modulenamebuffer : UInt8*, modulenamebuffersize : UInt32, modulenamesize : UInt32*, loadedimagenamebuffer : UInt8*, loadedimagenamebuffersize : UInt32, loadedimagenamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_names.call(this, index, base, imagenamebuffer, imagenamebuffersize, imagenamesize, modulenamebuffer, modulenamebuffersize, modulenamesize, loadedimagenamebuffer, loadedimagenamebuffersize, loadedimagenamesize)
  end
  def get_module_parameters(this : IDebugSymbols4*, count : UInt32, bases : UInt64*, start : UInt32, params : DEBUG_MODULE_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_module_parameters.call(this, count, bases, start, params)
  end
  def get_symbol_module(this : IDebugSymbols4*, symbol : PSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module.call(this, symbol, base)
  end
  def get_type_name(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id(this : IDebugSymbols4*, module_ : UInt64, name : PSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id.call(this, module_, name, typeid)
  end
  def get_type_size(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_type_size.call(this, module_, typeid, size)
  end
  def get_field_offset(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, field : PSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id(this : IDebugSymbols4*, symbol : PSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id.call(this, symbol, typeid, module_)
  end
  def get_offset_type_id(this : IDebugSymbols4*, offset : UInt64, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_type_id.call(this, offset, typeid, module_)
  end
  def read_typed_data_virtual(this : IDebugSymbols4*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_virtual(this : IDebugSymbols4*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_virtual(this : IDebugSymbols4*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_virtual.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def read_typed_data_physical(this : IDebugSymbols4*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_physical(this : IDebugSymbols4*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_physical(this : IDebugSymbols4*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_physical.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def get_scope(this : IDebugSymbols4*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope(this : IDebugSymbols4*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def reset_scope(this : IDebugSymbols4*) : HRESULT
    @lpVtbl.value.reset_scope.call(this)
  end
  def get_scope_symbol_group(this : IDebugSymbols4*, flags : UInt32, update : IDebugSymbolGroup, symbols : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group.call(this, flags, update, symbols)
  end
  def create_symbol_group(this : IDebugSymbols4*, group : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.create_symbol_group.call(this, group)
  end
  def start_symbol_match(this : IDebugSymbols4*, pattern : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match.call(this, pattern, handle)
  end
  def get_next_symbol_match(this : IDebugSymbols4*, handle : UInt64, buffer : UInt8*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def end_symbol_match(this : IDebugSymbols4*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_symbol_match.call(this, handle)
  end
  def reload(this : IDebugSymbols4*, module_ : PSTR) : HRESULT
    @lpVtbl.value.reload.call(this, module_)
  end
  def get_symbol_path(this : IDebugSymbols4*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path(this : IDebugSymbols4*, path : PSTR) : HRESULT
    @lpVtbl.value.set_symbol_path.call(this, path)
  end
  def append_symbol_path(this : IDebugSymbols4*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_symbol_path.call(this, addition)
  end
  def get_image_path(this : IDebugSymbols4*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path(this : IDebugSymbols4*, path : PSTR) : HRESULT
    @lpVtbl.value.set_image_path.call(this, path)
  end
  def append_image_path(this : IDebugSymbols4*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_image_path.call(this, addition)
  end
  def get_source_path(this : IDebugSymbols4*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element(this : IDebugSymbols4*, index : UInt32, buffer : UInt8*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path(this : IDebugSymbols4*, path : PSTR) : HRESULT
    @lpVtbl.value.set_source_path.call(this, path)
  end
  def append_source_path(this : IDebugSymbols4*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_source_path.call(this, addition)
  end
  def find_source_file(this : IDebugSymbols4*, startelement : UInt32, file : PSTR, flags : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets(this : IDebugSymbols4*, file : PSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information(this : IDebugSymbols4*, index : UInt32, base : UInt64, item : PSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string(this : IDebugSymbols4*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def get_type_options(this : IDebugSymbols4*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_type_options.call(this, options)
  end
  def add_type_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.add_type_options.call(this, options)
  end
  def remove_type_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_type_options.call(this, options)
  end
  def set_type_options(this : IDebugSymbols4*, options : UInt32) : HRESULT
    @lpVtbl.value.set_type_options.call(this, options)
  end
  def get_name_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset_wide.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name_wide(this : IDebugSymbols4*, symbol : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name_wide.call(this, symbol, offset)
  end
  def get_near_name_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, delta : Int32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset_wide.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset_wide(this : IDebugSymbols4*, offset : UInt64, line : UInt32*, filebuffer : Char*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset_wide.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line_wide(this : IDebugSymbols4*, line : UInt32, file : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line_wide.call(this, line, file, offset)
  end
  def get_module_by_module_name_wide(this : IDebugSymbols4*, name : LibC::LPWSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name_wide.call(this, name, startindex, index, base)
  end
  def get_symbol_module_wide(this : IDebugSymbols4*, symbol : LibC::LPWSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module_wide.call(this, symbol, base)
  end
  def get_type_name_wide(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name_wide.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id_wide(this : IDebugSymbols4*, module_ : UInt64, name : LibC::LPWSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id_wide.call(this, module_, name, typeid)
  end
  def get_field_offset_wide(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, field : LibC::LPWSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset_wide.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id_wide(this : IDebugSymbols4*, symbol : LibC::LPWSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id_wide.call(this, symbol, typeid, module_)
  end
  def get_scope_symbol_group2(this : IDebugSymbols4*, flags : UInt32, update : IDebugSymbolGroup2, symbols : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group2.call(this, flags, update, symbols)
  end
  def create_symbol_group2(this : IDebugSymbols4*, group : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.create_symbol_group2.call(this, group)
  end
  def start_symbol_match_wide(this : IDebugSymbols4*, pattern : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match_wide.call(this, pattern, handle)
  end
  def get_next_symbol_match_wide(this : IDebugSymbols4*, handle : UInt64, buffer : Char*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match_wide.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def reload_wide(this : IDebugSymbols4*, module_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.reload_wide.call(this, module_)
  end
  def get_symbol_path_wide(this : IDebugSymbols4*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path_wide(this : IDebugSymbols4*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_symbol_path_wide.call(this, path)
  end
  def append_symbol_path_wide(this : IDebugSymbols4*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_symbol_path_wide.call(this, addition)
  end
  def get_image_path_wide(this : IDebugSymbols4*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path_wide(this : IDebugSymbols4*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_image_path_wide.call(this, path)
  end
  def append_image_path_wide(this : IDebugSymbols4*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_image_path_wide.call(this, addition)
  end
  def get_source_path_wide(this : IDebugSymbols4*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element_wide(this : IDebugSymbols4*, index : UInt32, buffer : Char*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element_wide.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path_wide(this : IDebugSymbols4*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_source_path_wide.call(this, path)
  end
  def append_source_path_wide(this : IDebugSymbols4*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_source_path_wide.call(this, addition)
  end
  def find_source_file_wide(this : IDebugSymbols4*, startelement : UInt32, file : LibC::LPWSTR, flags : UInt32, foundelement : UInt32*, buffer : Char*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_wide.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets_wide(this : IDebugSymbols4*, file : LibC::LPWSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets_wide.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information_wide(this : IDebugSymbols4*, index : UInt32, base : UInt64, item : LibC::LPWSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string_wide(this : IDebugSymbols4*, which : UInt32, index : UInt32, base : UInt64, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name_wide(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name_wide.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name_wide(this : IDebugSymbols4*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name_wide.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def is_managed_module(this : IDebugSymbols4*, index : UInt32, base : UInt64) : HRESULT
    @lpVtbl.value.is_managed_module.call(this, index, base)
  end
  def get_module_by_module_name2(this : IDebugSymbols4*, name : PSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_module_name2_wide(this : IDebugSymbols4*, name : LibC::LPWSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2_wide.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_offset2(this : IDebugSymbols4*, offset : UInt64, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset2.call(this, offset, startindex, flags, index, base)
  end
  def add_synthetic_module(this : IDebugSymbols4*, base : UInt64, size : UInt32, imagepath : PSTR, modulename : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module.call(this, base, size, imagepath, modulename, flags)
  end
  def add_synthetic_module_wide(this : IDebugSymbols4*, base : UInt64, size : UInt32, imagepath : LibC::LPWSTR, modulename : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module_wide.call(this, base, size, imagepath, modulename, flags)
  end
  def remove_synthetic_module(this : IDebugSymbols4*, base : UInt64) : HRESULT
    @lpVtbl.value.remove_synthetic_module.call(this, base)
  end
  def get_current_scope_frame_index(this : IDebugSymbols4*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_scope_frame_index.call(this, index)
  end
  def set_scope_frame_by_index(this : IDebugSymbols4*, index : UInt32) : HRESULT
    @lpVtbl.value.set_scope_frame_by_index.call(this, index)
  end
  def set_scope_from_jit_debug_info(this : IDebugSymbols4*, outputcontrol : UInt32, infooffset : UInt64) : HRESULT
    @lpVtbl.value.set_scope_from_jit_debug_info.call(this, outputcontrol, infooffset)
  end
  def set_scope_from_stored_event(this : IDebugSymbols4*) : HRESULT
    @lpVtbl.value.set_scope_from_stored_event.call(this)
  end
  def output_symbol_by_offset(this : IDebugSymbols4*, outputcontrol : UInt32, flags : UInt32, offset : UInt64) : HRESULT
    @lpVtbl.value.output_symbol_by_offset.call(this, outputcontrol, flags, offset)
  end
  def get_function_entry_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, buffer : Void*, buffersize : UInt32, bufferneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffersize, bufferneeded)
  end
  def get_field_type_and_offset(this : IDebugSymbols4*, module_ : UInt64, containertypeid : UInt32, field : PSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def get_field_type_and_offset_wide(this : IDebugSymbols4*, module_ : UInt64, containertypeid : UInt32, field : LibC::LPWSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset_wide.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def add_synthetic_symbol(this : IDebugSymbols4*, offset : UInt64, size : UInt32, name : PSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
  end
  def add_synthetic_symbol_wide(this : IDebugSymbols4*, offset : UInt64, size : UInt32, name : LibC::LPWSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
  end
  def remove_synthetic_symbol(this : IDebugSymbols4*, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.remove_synthetic_symbol.call(this, id)
  end
  def get_symbol_entries_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, displacements : UInt64*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, idscount, entries)
  end
  def get_symbol_entries_by_name(this : IDebugSymbols4*, symbol : PSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entries_by_name_wide(this : IDebugSymbols4*, symbol : LibC::LPWSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entry_by_token(this : IDebugSymbols4*, modulebase : UInt64, token : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_token.call(this, modulebase, token, id)
  end
  def get_symbol_entry_information(this : IDebugSymbols4*, id : DEBUG_MODULE_AND_ID*, info : DEBUG_SYMBOL_ENTRY*) : HRESULT
    @lpVtbl.value.get_symbol_entry_information.call(this, id, info)
  end
  def get_symbol_entry_string(this : IDebugSymbols4*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_string_wide(this : IDebugSymbols4*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_offset_regions(this : IDebugSymbols4*, id : DEBUG_MODULE_AND_ID*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regionscount, regionsavail)
  end
  def get_symbol_entry_by_symbol_entry(this : IDebugSymbols4*, fromid : DEBUG_MODULE_AND_ID*, flags : UInt32, toid : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_symbol_entry.call(this, fromid, flags, toid)
  end
  def get_source_entries_by_offset(this : IDebugSymbols4*, offset : UInt64, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_offset.call(this, offset, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line(this : IDebugSymbols4*, line : UInt32, file : PSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line_wide(this : IDebugSymbols4*, line : UInt32, file : LibC::LPWSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entry_string(this : IDebugSymbols4*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_string_wide(this : IDebugSymbols4*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_offset_regions(this : IDebugSymbols4*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regionscount, regionsavail)
  end
  def get_source_entry_by_source_entry(this : IDebugSymbols4*, fromentry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, toentry : DEBUG_SYMBOL_SOURCE_ENTRY*) : HRESULT
    @lpVtbl.value.get_source_entry_by_source_entry.call(this, fromentry, flags, toentry)
  end
  def get_scope_ex(this : IDebugSymbols4*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME_EX*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope_ex.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope_ex(this : IDebugSymbols4*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME_EX*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope_ex.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def get_name_by_inline_context(this : IDebugSymbols4*, offset : UInt64, inlinecontext : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_inline_context.call(this, offset, inlinecontext, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_name_by_inline_context_wide(this : IDebugSymbols4*, offset : UInt64, inlinecontext : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_inline_context_wide.call(this, offset, inlinecontext, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_inline_context(this : IDebugSymbols4*, offset : UInt64, inlinecontext : UInt32, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_inline_context.call(this, offset, inlinecontext, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_line_by_inline_context_wide(this : IDebugSymbols4*, offset : UInt64, inlinecontext : UInt32, line : UInt32*, filebuffer : Char*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_inline_context_wide.call(this, offset, inlinecontext, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def output_symbol_by_inline_context(this : IDebugSymbols4*, outputcontrol : UInt32, flags : UInt32, offset : UInt64, inlinecontext : UInt32) : HRESULT
    @lpVtbl.value.output_symbol_by_inline_context.call(this, outputcontrol, flags, offset, inlinecontext)
  end
end
struct LibWin32::IDebugSymbols5
  def query_interface(this : IDebugSymbols5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSymbols5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSymbols5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_symbol_options(this : IDebugSymbols5*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_options.call(this, options)
  end
  def add_symbol_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.add_symbol_options.call(this, options)
  end
  def remove_symbol_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_symbol_options.call(this, options)
  end
  def set_symbol_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.set_symbol_options.call(this, options)
  end
  def get_name_by_offset(this : IDebugSymbols5*, offset : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name(this : IDebugSymbols5*, symbol : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name.call(this, symbol, offset)
  end
  def get_near_name_by_offset(this : IDebugSymbols5*, offset : UInt64, delta : Int32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset(this : IDebugSymbols5*, offset : UInt64, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line(this : IDebugSymbols5*, line : UInt32, file : PSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line.call(this, line, file, offset)
  end
  def get_number_modules(this : IDebugSymbols5*, loaded : UInt32*, unloaded : UInt32*) : HRESULT
    @lpVtbl.value.get_number_modules.call(this, loaded, unloaded)
  end
  def get_module_by_index(this : IDebugSymbols5*, index : UInt32, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_index.call(this, index, base)
  end
  def get_module_by_module_name(this : IDebugSymbols5*, name : PSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name.call(this, name, startindex, index, base)
  end
  def get_module_by_offset(this : IDebugSymbols5*, offset : UInt64, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset.call(this, offset, startindex, index, base)
  end
  def get_module_names(this : IDebugSymbols5*, index : UInt32, base : UInt64, imagenamebuffer : UInt8*, imagenamebuffersize : UInt32, imagenamesize : UInt32*, modulenamebuffer : UInt8*, modulenamebuffersize : UInt32, modulenamesize : UInt32*, loadedimagenamebuffer : UInt8*, loadedimagenamebuffersize : UInt32, loadedimagenamesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_names.call(this, index, base, imagenamebuffer, imagenamebuffersize, imagenamesize, modulenamebuffer, modulenamebuffersize, modulenamesize, loadedimagenamebuffer, loadedimagenamebuffersize, loadedimagenamesize)
  end
  def get_module_parameters(this : IDebugSymbols5*, count : UInt32, bases : UInt64*, start : UInt32, params : DEBUG_MODULE_PARAMETERS*) : HRESULT
    @lpVtbl.value.get_module_parameters.call(this, count, bases, start, params)
  end
  def get_symbol_module(this : IDebugSymbols5*, symbol : PSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module.call(this, symbol, base)
  end
  def get_type_name(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id(this : IDebugSymbols5*, module_ : UInt64, name : PSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id.call(this, module_, name, typeid)
  end
  def get_type_size(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, size : UInt32*) : HRESULT
    @lpVtbl.value.get_type_size.call(this, module_, typeid, size)
  end
  def get_field_offset(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, field : PSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id(this : IDebugSymbols5*, symbol : PSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id.call(this, symbol, typeid, module_)
  end
  def get_offset_type_id(this : IDebugSymbols5*, offset : UInt64, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_type_id.call(this, offset, typeid, module_)
  end
  def read_typed_data_virtual(this : IDebugSymbols5*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_virtual(this : IDebugSymbols5*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_virtual.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_virtual(this : IDebugSymbols5*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_virtual.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def read_typed_data_physical(this : IDebugSymbols5*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, bytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, bytesread)
  end
  def write_typed_data_physical(this : IDebugSymbols5*, offset : UInt64, module_ : UInt64, typeid : UInt32, buffer : Void*, buffersize : UInt32, byteswritten : UInt32*) : HRESULT
    @lpVtbl.value.write_typed_data_physical.call(this, offset, module_, typeid, buffer, buffersize, byteswritten)
  end
  def output_typed_data_physical(this : IDebugSymbols5*, outputcontrol : UInt32, offset : UInt64, module_ : UInt64, typeid : UInt32, flags : UInt32) : HRESULT
    @lpVtbl.value.output_typed_data_physical.call(this, outputcontrol, offset, module_, typeid, flags)
  end
  def get_scope(this : IDebugSymbols5*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope(this : IDebugSymbols5*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def reset_scope(this : IDebugSymbols5*) : HRESULT
    @lpVtbl.value.reset_scope.call(this)
  end
  def get_scope_symbol_group(this : IDebugSymbols5*, flags : UInt32, update : IDebugSymbolGroup, symbols : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group.call(this, flags, update, symbols)
  end
  def create_symbol_group(this : IDebugSymbols5*, group : IDebugSymbolGroup*) : HRESULT
    @lpVtbl.value.create_symbol_group.call(this, group)
  end
  def start_symbol_match(this : IDebugSymbols5*, pattern : PSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match.call(this, pattern, handle)
  end
  def get_next_symbol_match(this : IDebugSymbols5*, handle : UInt64, buffer : UInt8*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def end_symbol_match(this : IDebugSymbols5*, handle : UInt64) : HRESULT
    @lpVtbl.value.end_symbol_match.call(this, handle)
  end
  def reload(this : IDebugSymbols5*, module_ : PSTR) : HRESULT
    @lpVtbl.value.reload.call(this, module_)
  end
  def get_symbol_path(this : IDebugSymbols5*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path(this : IDebugSymbols5*, path : PSTR) : HRESULT
    @lpVtbl.value.set_symbol_path.call(this, path)
  end
  def append_symbol_path(this : IDebugSymbols5*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_symbol_path.call(this, addition)
  end
  def get_image_path(this : IDebugSymbols5*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path(this : IDebugSymbols5*, path : PSTR) : HRESULT
    @lpVtbl.value.set_image_path.call(this, path)
  end
  def append_image_path(this : IDebugSymbols5*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_image_path.call(this, addition)
  end
  def get_source_path(this : IDebugSymbols5*, buffer : UInt8*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element(this : IDebugSymbols5*, index : UInt32, buffer : UInt8*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path(this : IDebugSymbols5*, path : PSTR) : HRESULT
    @lpVtbl.value.set_source_path.call(this, path)
  end
  def append_source_path(this : IDebugSymbols5*, addition : PSTR) : HRESULT
    @lpVtbl.value.append_source_path.call(this, addition)
  end
  def find_source_file(this : IDebugSymbols5*, startelement : UInt32, file : PSTR, flags : UInt32, foundelement : UInt32*, buffer : UInt8*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets(this : IDebugSymbols5*, file : PSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information(this : IDebugSymbols5*, index : UInt32, base : UInt64, item : PSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string(this : IDebugSymbols5*, which : UInt32, index : UInt32, base : UInt64, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def get_type_options(this : IDebugSymbols5*, options : UInt32*) : HRESULT
    @lpVtbl.value.get_type_options.call(this, options)
  end
  def add_type_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.add_type_options.call(this, options)
  end
  def remove_type_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.remove_type_options.call(this, options)
  end
  def set_type_options(this : IDebugSymbols5*, options : UInt32) : HRESULT
    @lpVtbl.value.set_type_options.call(this, options)
  end
  def get_name_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_offset_wide.call(this, offset, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_offset_by_name_wide(this : IDebugSymbols5*, symbol : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_name_wide.call(this, symbol, offset)
  end
  def get_near_name_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, delta : Int32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_near_name_by_offset_wide.call(this, offset, delta, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_offset_wide(this : IDebugSymbols5*, offset : UInt64, line : UInt32*, filebuffer : Char*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_offset_wide.call(this, offset, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_offset_by_line_wide(this : IDebugSymbols5*, line : UInt32, file : LibC::LPWSTR, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset_by_line_wide.call(this, line, file, offset)
  end
  def get_module_by_module_name_wide(this : IDebugSymbols5*, name : LibC::LPWSTR, startindex : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name_wide.call(this, name, startindex, index, base)
  end
  def get_symbol_module_wide(this : IDebugSymbols5*, symbol : LibC::LPWSTR, base : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_module_wide.call(this, symbol, base)
  end
  def get_type_name_wide(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_type_name_wide.call(this, module_, typeid, namebuffer, namebuffersize, namesize)
  end
  def get_type_id_wide(this : IDebugSymbols5*, module_ : UInt64, name : LibC::LPWSTR, typeid : UInt32*) : HRESULT
    @lpVtbl.value.get_type_id_wide.call(this, module_, name, typeid)
  end
  def get_field_offset_wide(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, field : LibC::LPWSTR, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_offset_wide.call(this, module_, typeid, field, offset)
  end
  def get_symbol_type_id_wide(this : IDebugSymbols5*, symbol : LibC::LPWSTR, typeid : UInt32*, module_ : UInt64*) : HRESULT
    @lpVtbl.value.get_symbol_type_id_wide.call(this, symbol, typeid, module_)
  end
  def get_scope_symbol_group2(this : IDebugSymbols5*, flags : UInt32, update : IDebugSymbolGroup2, symbols : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.get_scope_symbol_group2.call(this, flags, update, symbols)
  end
  def create_symbol_group2(this : IDebugSymbols5*, group : IDebugSymbolGroup2*) : HRESULT
    @lpVtbl.value.create_symbol_group2.call(this, group)
  end
  def start_symbol_match_wide(this : IDebugSymbols5*, pattern : LibC::LPWSTR, handle : UInt64*) : HRESULT
    @lpVtbl.value.start_symbol_match_wide.call(this, pattern, handle)
  end
  def get_next_symbol_match_wide(this : IDebugSymbols5*, handle : UInt64, buffer : Char*, buffersize : UInt32, matchsize : UInt32*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_next_symbol_match_wide.call(this, handle, buffer, buffersize, matchsize, offset)
  end
  def reload_wide(this : IDebugSymbols5*, module_ : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.reload_wide.call(this, module_)
  end
  def get_symbol_path_wide(this : IDebugSymbols5*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_symbol_path_wide(this : IDebugSymbols5*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_symbol_path_wide.call(this, path)
  end
  def append_symbol_path_wide(this : IDebugSymbols5*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_symbol_path_wide.call(this, addition)
  end
  def get_image_path_wide(this : IDebugSymbols5*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_image_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def set_image_path_wide(this : IDebugSymbols5*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_image_path_wide.call(this, path)
  end
  def append_image_path_wide(this : IDebugSymbols5*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_image_path_wide.call(this, addition)
  end
  def get_source_path_wide(this : IDebugSymbols5*, buffer : Char*, buffersize : UInt32, pathsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_wide.call(this, buffer, buffersize, pathsize)
  end
  def get_source_path_element_wide(this : IDebugSymbols5*, index : UInt32, buffer : Char*, buffersize : UInt32, elementsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_path_element_wide.call(this, index, buffer, buffersize, elementsize)
  end
  def set_source_path_wide(this : IDebugSymbols5*, path : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_source_path_wide.call(this, path)
  end
  def append_source_path_wide(this : IDebugSymbols5*, addition : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.append_source_path_wide.call(this, addition)
  end
  def find_source_file_wide(this : IDebugSymbols5*, startelement : UInt32, file : LibC::LPWSTR, flags : UInt32, foundelement : UInt32*, buffer : Char*, buffersize : UInt32, foundsize : UInt32*) : HRESULT
    @lpVtbl.value.find_source_file_wide.call(this, startelement, file, flags, foundelement, buffer, buffersize, foundsize)
  end
  def get_source_file_line_offsets_wide(this : IDebugSymbols5*, file : LibC::LPWSTR, buffer : UInt64*, bufferlines : UInt32, filelines : UInt32*) : HRESULT
    @lpVtbl.value.get_source_file_line_offsets_wide.call(this, file, buffer, bufferlines, filelines)
  end
  def get_module_version_information_wide(this : IDebugSymbols5*, index : UInt32, base : UInt64, item : LibC::LPWSTR, buffer : Void*, buffersize : UInt32, verinfosize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_version_information_wide.call(this, index, base, item, buffer, buffersize, verinfosize)
  end
  def get_module_name_string_wide(this : IDebugSymbols5*, which : UInt32, index : UInt32, base : UInt64, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_module_name_string_wide.call(this, which, index, base, buffer, buffersize, namesize)
  end
  def get_constant_name_wide(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, value : UInt64, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_constant_name_wide.call(this, module_, typeid, value, namebuffer, namebuffersize, namesize)
  end
  def get_field_name_wide(this : IDebugSymbols5*, module_ : UInt64, typeid : UInt32, fieldindex : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_field_name_wide.call(this, module_, typeid, fieldindex, namebuffer, namebuffersize, namesize)
  end
  def is_managed_module(this : IDebugSymbols5*, index : UInt32, base : UInt64) : HRESULT
    @lpVtbl.value.is_managed_module.call(this, index, base)
  end
  def get_module_by_module_name2(this : IDebugSymbols5*, name : PSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_module_name2_wide(this : IDebugSymbols5*, name : LibC::LPWSTR, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_module_name2_wide.call(this, name, startindex, flags, index, base)
  end
  def get_module_by_offset2(this : IDebugSymbols5*, offset : UInt64, startindex : UInt32, flags : UInt32, index : UInt32*, base : UInt64*) : HRESULT
    @lpVtbl.value.get_module_by_offset2.call(this, offset, startindex, flags, index, base)
  end
  def add_synthetic_module(this : IDebugSymbols5*, base : UInt64, size : UInt32, imagepath : PSTR, modulename : PSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module.call(this, base, size, imagepath, modulename, flags)
  end
  def add_synthetic_module_wide(this : IDebugSymbols5*, base : UInt64, size : UInt32, imagepath : LibC::LPWSTR, modulename : LibC::LPWSTR, flags : UInt32) : HRESULT
    @lpVtbl.value.add_synthetic_module_wide.call(this, base, size, imagepath, modulename, flags)
  end
  def remove_synthetic_module(this : IDebugSymbols5*, base : UInt64) : HRESULT
    @lpVtbl.value.remove_synthetic_module.call(this, base)
  end
  def get_current_scope_frame_index(this : IDebugSymbols5*, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_scope_frame_index.call(this, index)
  end
  def set_scope_frame_by_index(this : IDebugSymbols5*, index : UInt32) : HRESULT
    @lpVtbl.value.set_scope_frame_by_index.call(this, index)
  end
  def set_scope_from_jit_debug_info(this : IDebugSymbols5*, outputcontrol : UInt32, infooffset : UInt64) : HRESULT
    @lpVtbl.value.set_scope_from_jit_debug_info.call(this, outputcontrol, infooffset)
  end
  def set_scope_from_stored_event(this : IDebugSymbols5*) : HRESULT
    @lpVtbl.value.set_scope_from_stored_event.call(this)
  end
  def output_symbol_by_offset(this : IDebugSymbols5*, outputcontrol : UInt32, flags : UInt32, offset : UInt64) : HRESULT
    @lpVtbl.value.output_symbol_by_offset.call(this, outputcontrol, flags, offset)
  end
  def get_function_entry_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, buffer : Void*, buffersize : UInt32, bufferneeded : UInt32*) : HRESULT
    @lpVtbl.value.get_function_entry_by_offset.call(this, offset, flags, buffer, buffersize, bufferneeded)
  end
  def get_field_type_and_offset(this : IDebugSymbols5*, module_ : UInt64, containertypeid : UInt32, field : PSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def get_field_type_and_offset_wide(this : IDebugSymbols5*, module_ : UInt64, containertypeid : UInt32, field : LibC::LPWSTR, fieldtypeid : UInt32*, offset : UInt32*) : HRESULT
    @lpVtbl.value.get_field_type_and_offset_wide.call(this, module_, containertypeid, field, fieldtypeid, offset)
  end
  def add_synthetic_symbol(this : IDebugSymbols5*, offset : UInt64, size : UInt32, name : PSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol.call(this, offset, size, name, flags, id)
  end
  def add_synthetic_symbol_wide(this : IDebugSymbols5*, offset : UInt64, size : UInt32, name : LibC::LPWSTR, flags : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.add_synthetic_symbol_wide.call(this, offset, size, name, flags, id)
  end
  def remove_synthetic_symbol(this : IDebugSymbols5*, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.remove_synthetic_symbol.call(this, id)
  end
  def get_symbol_entries_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, displacements : UInt64*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_offset.call(this, offset, flags, ids, displacements, idscount, entries)
  end
  def get_symbol_entries_by_name(this : IDebugSymbols5*, symbol : PSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entries_by_name_wide(this : IDebugSymbols5*, symbol : LibC::LPWSTR, flags : UInt32, ids : DEBUG_MODULE_AND_ID*, idscount : UInt32, entries : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entries_by_name_wide.call(this, symbol, flags, ids, idscount, entries)
  end
  def get_symbol_entry_by_token(this : IDebugSymbols5*, modulebase : UInt64, token : UInt32, id : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_token.call(this, modulebase, token, id)
  end
  def get_symbol_entry_information(this : IDebugSymbols5*, id : DEBUG_MODULE_AND_ID*, info : DEBUG_SYMBOL_ENTRY*) : HRESULT
    @lpVtbl.value.get_symbol_entry_information.call(this, id, info)
  end
  def get_symbol_entry_string(this : IDebugSymbols5*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_string_wide(this : IDebugSymbols5*, id : DEBUG_MODULE_AND_ID*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_string_wide.call(this, id, which, buffer, buffersize, stringsize)
  end
  def get_symbol_entry_offset_regions(this : IDebugSymbols5*, id : DEBUG_MODULE_AND_ID*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_symbol_entry_offset_regions.call(this, id, flags, regions, regionscount, regionsavail)
  end
  def get_symbol_entry_by_symbol_entry(this : IDebugSymbols5*, fromid : DEBUG_MODULE_AND_ID*, flags : UInt32, toid : DEBUG_MODULE_AND_ID*) : HRESULT
    @lpVtbl.value.get_symbol_entry_by_symbol_entry.call(this, fromid, flags, toid)
  end
  def get_source_entries_by_offset(this : IDebugSymbols5*, offset : UInt64, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_offset.call(this, offset, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line(this : IDebugSymbols5*, line : UInt32, file : PSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entries_by_line_wide(this : IDebugSymbols5*, line : UInt32, file : LibC::LPWSTR, flags : UInt32, entries : DEBUG_SYMBOL_SOURCE_ENTRY*, entriescount : UInt32, entriesavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entries_by_line_wide.call(this, line, file, flags, entries, entriescount, entriesavail)
  end
  def get_source_entry_string(this : IDebugSymbols5*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : UInt8*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_string_wide(this : IDebugSymbols5*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, which : UInt32, buffer : Char*, buffersize : UInt32, stringsize : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_string_wide.call(this, entry, which, buffer, buffersize, stringsize)
  end
  def get_source_entry_offset_regions(this : IDebugSymbols5*, entry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, regions : DEBUG_OFFSET_REGION*, regionscount : UInt32, regionsavail : UInt32*) : HRESULT
    @lpVtbl.value.get_source_entry_offset_regions.call(this, entry, flags, regions, regionscount, regionsavail)
  end
  def get_source_entry_by_source_entry(this : IDebugSymbols5*, fromentry : DEBUG_SYMBOL_SOURCE_ENTRY*, flags : UInt32, toentry : DEBUG_SYMBOL_SOURCE_ENTRY*) : HRESULT
    @lpVtbl.value.get_source_entry_by_source_entry.call(this, fromentry, flags, toentry)
  end
  def get_scope_ex(this : IDebugSymbols5*, instructionoffset : UInt64*, scopeframe : DEBUG_STACK_FRAME_EX*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.get_scope_ex.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def set_scope_ex(this : IDebugSymbols5*, instructionoffset : UInt64, scopeframe : DEBUG_STACK_FRAME_EX*, scopecontext : Void*, scopecontextsize : UInt32) : HRESULT
    @lpVtbl.value.set_scope_ex.call(this, instructionoffset, scopeframe, scopecontext, scopecontextsize)
  end
  def get_name_by_inline_context(this : IDebugSymbols5*, offset : UInt64, inlinecontext : UInt32, namebuffer : UInt8*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_inline_context.call(this, offset, inlinecontext, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_name_by_inline_context_wide(this : IDebugSymbols5*, offset : UInt64, inlinecontext : UInt32, namebuffer : Char*, namebuffersize : UInt32, namesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_name_by_inline_context_wide.call(this, offset, inlinecontext, namebuffer, namebuffersize, namesize, displacement)
  end
  def get_line_by_inline_context(this : IDebugSymbols5*, offset : UInt64, inlinecontext : UInt32, line : UInt32*, filebuffer : UInt8*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_inline_context.call(this, offset, inlinecontext, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def get_line_by_inline_context_wide(this : IDebugSymbols5*, offset : UInt64, inlinecontext : UInt32, line : UInt32*, filebuffer : Char*, filebuffersize : UInt32, filesize : UInt32*, displacement : UInt64*) : HRESULT
    @lpVtbl.value.get_line_by_inline_context_wide.call(this, offset, inlinecontext, line, filebuffer, filebuffersize, filesize, displacement)
  end
  def output_symbol_by_inline_context(this : IDebugSymbols5*, outputcontrol : UInt32, flags : UInt32, offset : UInt64, inlinecontext : UInt32) : HRESULT
    @lpVtbl.value.output_symbol_by_inline_context.call(this, outputcontrol, flags, offset, inlinecontext)
  end
  def get_current_scope_frame_index_ex(this : IDebugSymbols5*, flags : UInt32, index : UInt32*) : HRESULT
    @lpVtbl.value.get_current_scope_frame_index_ex.call(this, flags, index)
  end
  def set_scope_frame_by_index_ex(this : IDebugSymbols5*, flags : UInt32, index : UInt32) : HRESULT
    @lpVtbl.value.set_scope_frame_by_index_ex.call(this, flags, index)
  end
end
struct LibWin32::IDebugSystemObjects
  def query_interface(this : IDebugSystemObjects*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSystemObjects*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSystemObjects*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_thread(this : IDebugSystemObjects*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_thread.call(this, id)
  end
  def get_event_process(this : IDebugSystemObjects*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_process.call(this, id)
  end
  def get_current_thread_id(this : IDebugSystemObjects*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_id.call(this, id)
  end
  def set_current_thread_id(this : IDebugSystemObjects*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_thread_id.call(this, id)
  end
  def get_current_process_id(this : IDebugSystemObjects*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_id.call(this, id)
  end
  def set_current_process_id(this : IDebugSystemObjects*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_process_id.call(this, id)
  end
  def get_number_threads(this : IDebugSystemObjects*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_threads.call(this, number)
  end
  def get_total_number_threads(this : IDebugSystemObjects*, total : UInt32*, largestprocess : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads.call(this, total, largestprocess)
  end
  def get_thread_ids_by_index(this : IDebugSystemObjects*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_thread_id_by_processor(this : IDebugSystemObjects*, processor : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_processor.call(this, processor, id)
  end
  def get_current_thread_data_offset(this : IDebugSystemObjects*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_data_offset.call(this, offset)
  end
  def get_thread_id_by_data_offset(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_data_offset.call(this, offset, id)
  end
  def get_current_thread_teb(this : IDebugSystemObjects*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_teb.call(this, offset)
  end
  def get_thread_id_by_teb(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_teb.call(this, offset, id)
  end
  def get_current_thread_system_id(this : IDebugSystemObjects*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_system_id.call(this, sysid)
  end
  def get_thread_id_by_system_id(this : IDebugSystemObjects*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_system_id.call(this, sysid, id)
  end
  def get_current_thread_handle(this : IDebugSystemObjects*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_handle.call(this, handle)
  end
  def get_thread_id_by_handle(this : IDebugSystemObjects*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_handle.call(this, handle, id)
  end
  def get_number_processes(this : IDebugSystemObjects*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processes.call(this, number)
  end
  def get_process_ids_by_index(this : IDebugSystemObjects*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_process_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_current_process_data_offset(this : IDebugSystemObjects*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_data_offset.call(this, offset)
  end
  def get_process_id_by_data_offset(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_data_offset.call(this, offset, id)
  end
  def get_current_process_peb(this : IDebugSystemObjects*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_peb.call(this, offset)
  end
  def get_process_id_by_peb(this : IDebugSystemObjects*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_peb.call(this, offset, id)
  end
  def get_current_process_system_id(this : IDebugSystemObjects*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_system_id.call(this, sysid)
  end
  def get_process_id_by_system_id(this : IDebugSystemObjects*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_system_id.call(this, sysid, id)
  end
  def get_current_process_handle(this : IDebugSystemObjects*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_handle.call(this, handle)
  end
  def get_process_id_by_handle(this : IDebugSystemObjects*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_handle.call(this, handle, id)
  end
  def get_current_process_executable_name(this : IDebugSystemObjects*, buffer : UInt8*, buffersize : UInt32, exesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_executable_name.call(this, buffer, buffersize, exesize)
  end
end
struct LibWin32::IDebugSystemObjects2
  def query_interface(this : IDebugSystemObjects2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSystemObjects2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSystemObjects2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_thread(this : IDebugSystemObjects2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_thread.call(this, id)
  end
  def get_event_process(this : IDebugSystemObjects2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_process.call(this, id)
  end
  def get_current_thread_id(this : IDebugSystemObjects2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_id.call(this, id)
  end
  def set_current_thread_id(this : IDebugSystemObjects2*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_thread_id.call(this, id)
  end
  def get_current_process_id(this : IDebugSystemObjects2*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_id.call(this, id)
  end
  def set_current_process_id(this : IDebugSystemObjects2*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_process_id.call(this, id)
  end
  def get_number_threads(this : IDebugSystemObjects2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_threads.call(this, number)
  end
  def get_total_number_threads(this : IDebugSystemObjects2*, total : UInt32*, largestprocess : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads.call(this, total, largestprocess)
  end
  def get_thread_ids_by_index(this : IDebugSystemObjects2*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_thread_id_by_processor(this : IDebugSystemObjects2*, processor : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_processor.call(this, processor, id)
  end
  def get_current_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_data_offset.call(this, offset)
  end
  def get_thread_id_by_data_offset(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_data_offset.call(this, offset, id)
  end
  def get_current_thread_teb(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_teb.call(this, offset)
  end
  def get_thread_id_by_teb(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_teb.call(this, offset, id)
  end
  def get_current_thread_system_id(this : IDebugSystemObjects2*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_system_id.call(this, sysid)
  end
  def get_thread_id_by_system_id(this : IDebugSystemObjects2*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_system_id.call(this, sysid, id)
  end
  def get_current_thread_handle(this : IDebugSystemObjects2*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_handle.call(this, handle)
  end
  def get_thread_id_by_handle(this : IDebugSystemObjects2*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_handle.call(this, handle, id)
  end
  def get_number_processes(this : IDebugSystemObjects2*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processes.call(this, number)
  end
  def get_process_ids_by_index(this : IDebugSystemObjects2*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_process_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_current_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_data_offset.call(this, offset)
  end
  def get_process_id_by_data_offset(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_data_offset.call(this, offset, id)
  end
  def get_current_process_peb(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_peb.call(this, offset)
  end
  def get_process_id_by_peb(this : IDebugSystemObjects2*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_peb.call(this, offset, id)
  end
  def get_current_process_system_id(this : IDebugSystemObjects2*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_system_id.call(this, sysid)
  end
  def get_process_id_by_system_id(this : IDebugSystemObjects2*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_system_id.call(this, sysid, id)
  end
  def get_current_process_handle(this : IDebugSystemObjects2*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_handle.call(this, handle)
  end
  def get_process_id_by_handle(this : IDebugSystemObjects2*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_handle.call(this, handle, id)
  end
  def get_current_process_executable_name(this : IDebugSystemObjects2*, buffer : UInt8*, buffersize : UInt32, exesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_executable_name.call(this, buffer, buffersize, exesize)
  end
  def get_current_process_up_time(this : IDebugSystemObjects2*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_up_time.call(this, uptime)
  end
  def get_implicit_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_thread_data_offset.call(this, offset)
  end
  def set_implicit_thread_data_offset(this : IDebugSystemObjects2*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_thread_data_offset.call(this, offset)
  end
  def get_implicit_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_process_data_offset.call(this, offset)
  end
  def set_implicit_process_data_offset(this : IDebugSystemObjects2*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_process_data_offset.call(this, offset)
  end
end
struct LibWin32::IDebugSystemObjects3
  def query_interface(this : IDebugSystemObjects3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSystemObjects3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSystemObjects3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_thread(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_thread.call(this, id)
  end
  def get_event_process(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_process.call(this, id)
  end
  def get_current_thread_id(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_id.call(this, id)
  end
  def set_current_thread_id(this : IDebugSystemObjects3*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_thread_id.call(this, id)
  end
  def get_current_process_id(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_id.call(this, id)
  end
  def set_current_process_id(this : IDebugSystemObjects3*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_process_id.call(this, id)
  end
  def get_number_threads(this : IDebugSystemObjects3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_threads.call(this, number)
  end
  def get_total_number_threads(this : IDebugSystemObjects3*, total : UInt32*, largestprocess : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads.call(this, total, largestprocess)
  end
  def get_thread_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_thread_id_by_processor(this : IDebugSystemObjects3*, processor : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_processor.call(this, processor, id)
  end
  def get_current_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_data_offset.call(this, offset)
  end
  def get_thread_id_by_data_offset(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_data_offset.call(this, offset, id)
  end
  def get_current_thread_teb(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_teb.call(this, offset)
  end
  def get_thread_id_by_teb(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_teb.call(this, offset, id)
  end
  def get_current_thread_system_id(this : IDebugSystemObjects3*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_system_id.call(this, sysid)
  end
  def get_thread_id_by_system_id(this : IDebugSystemObjects3*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_system_id.call(this, sysid, id)
  end
  def get_current_thread_handle(this : IDebugSystemObjects3*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_handle.call(this, handle)
  end
  def get_thread_id_by_handle(this : IDebugSystemObjects3*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_handle.call(this, handle, id)
  end
  def get_number_processes(this : IDebugSystemObjects3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processes.call(this, number)
  end
  def get_process_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_process_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_current_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_data_offset.call(this, offset)
  end
  def get_process_id_by_data_offset(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_data_offset.call(this, offset, id)
  end
  def get_current_process_peb(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_peb.call(this, offset)
  end
  def get_process_id_by_peb(this : IDebugSystemObjects3*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_peb.call(this, offset, id)
  end
  def get_current_process_system_id(this : IDebugSystemObjects3*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_system_id.call(this, sysid)
  end
  def get_process_id_by_system_id(this : IDebugSystemObjects3*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_system_id.call(this, sysid, id)
  end
  def get_current_process_handle(this : IDebugSystemObjects3*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_handle.call(this, handle)
  end
  def get_process_id_by_handle(this : IDebugSystemObjects3*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_handle.call(this, handle, id)
  end
  def get_current_process_executable_name(this : IDebugSystemObjects3*, buffer : UInt8*, buffersize : UInt32, exesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_executable_name.call(this, buffer, buffersize, exesize)
  end
  def get_current_process_up_time(this : IDebugSystemObjects3*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_up_time.call(this, uptime)
  end
  def get_implicit_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_thread_data_offset.call(this, offset)
  end
  def set_implicit_thread_data_offset(this : IDebugSystemObjects3*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_thread_data_offset.call(this, offset)
  end
  def get_implicit_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_process_data_offset.call(this, offset)
  end
  def set_implicit_process_data_offset(this : IDebugSystemObjects3*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_process_data_offset.call(this, offset)
  end
  def get_event_system(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_system.call(this, id)
  end
  def get_current_system_id(this : IDebugSystemObjects3*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_id.call(this, id)
  end
  def set_current_system_id(this : IDebugSystemObjects3*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_system_id.call(this, id)
  end
  def get_number_systems(this : IDebugSystemObjects3*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_systems.call(this, number)
  end
  def get_system_ids_by_index(this : IDebugSystemObjects3*, start : UInt32, count : UInt32, ids : UInt32*) : HRESULT
    @lpVtbl.value.get_system_ids_by_index.call(this, start, count, ids)
  end
  def get_total_number_threads_and_processes(this : IDebugSystemObjects3*, totalthreads : UInt32*, totalprocesses : UInt32*, largestprocessthreads : UInt32*, largestsystemthreads : UInt32*, largestsystemprocesses : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads_and_processes.call(this, totalthreads, totalprocesses, largestprocessthreads, largestsystemthreads, largestsystemprocesses)
  end
  def get_current_system_server(this : IDebugSystemObjects3*, server : UInt64*) : HRESULT
    @lpVtbl.value.get_current_system_server.call(this, server)
  end
  def get_system_by_server(this : IDebugSystemObjects3*, server : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_system_by_server.call(this, server, id)
  end
  def get_current_system_server_name(this : IDebugSystemObjects3*, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_server_name.call(this, buffer, buffersize, namesize)
  end
end
struct LibWin32::IDebugSystemObjects4
  def query_interface(this : IDebugSystemObjects4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSystemObjects4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSystemObjects4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_thread(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_thread.call(this, id)
  end
  def get_event_process(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_process.call(this, id)
  end
  def get_current_thread_id(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_id.call(this, id)
  end
  def set_current_thread_id(this : IDebugSystemObjects4*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_thread_id.call(this, id)
  end
  def get_current_process_id(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_id.call(this, id)
  end
  def set_current_process_id(this : IDebugSystemObjects4*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_process_id.call(this, id)
  end
  def get_number_threads(this : IDebugSystemObjects4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_threads.call(this, number)
  end
  def get_total_number_threads(this : IDebugSystemObjects4*, total : UInt32*, largestprocess : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads.call(this, total, largestprocess)
  end
  def get_thread_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_thread_id_by_processor(this : IDebugSystemObjects4*, processor : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_processor.call(this, processor, id)
  end
  def get_current_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_data_offset.call(this, offset)
  end
  def get_thread_id_by_data_offset(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_data_offset.call(this, offset, id)
  end
  def get_current_thread_teb(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_teb.call(this, offset)
  end
  def get_thread_id_by_teb(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_teb.call(this, offset, id)
  end
  def get_current_thread_system_id(this : IDebugSystemObjects4*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_thread_system_id.call(this, sysid)
  end
  def get_thread_id_by_system_id(this : IDebugSystemObjects4*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_system_id.call(this, sysid, id)
  end
  def get_current_thread_handle(this : IDebugSystemObjects4*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_thread_handle.call(this, handle)
  end
  def get_thread_id_by_handle(this : IDebugSystemObjects4*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_thread_id_by_handle.call(this, handle, id)
  end
  def get_number_processes(this : IDebugSystemObjects4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_processes.call(this, number)
  end
  def get_process_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*, sysids : UInt32*) : HRESULT
    @lpVtbl.value.get_process_ids_by_index.call(this, start, count, ids, sysids)
  end
  def get_current_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_data_offset.call(this, offset)
  end
  def get_process_id_by_data_offset(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_data_offset.call(this, offset, id)
  end
  def get_current_process_peb(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_peb.call(this, offset)
  end
  def get_process_id_by_peb(this : IDebugSystemObjects4*, offset : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_peb.call(this, offset, id)
  end
  def get_current_process_system_id(this : IDebugSystemObjects4*, sysid : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_system_id.call(this, sysid)
  end
  def get_process_id_by_system_id(this : IDebugSystemObjects4*, sysid : UInt32, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_system_id.call(this, sysid, id)
  end
  def get_current_process_handle(this : IDebugSystemObjects4*, handle : UInt64*) : HRESULT
    @lpVtbl.value.get_current_process_handle.call(this, handle)
  end
  def get_process_id_by_handle(this : IDebugSystemObjects4*, handle : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_process_id_by_handle.call(this, handle, id)
  end
  def get_current_process_executable_name(this : IDebugSystemObjects4*, buffer : UInt8*, buffersize : UInt32, exesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_executable_name.call(this, buffer, buffersize, exesize)
  end
  def get_current_process_up_time(this : IDebugSystemObjects4*, uptime : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_up_time.call(this, uptime)
  end
  def get_implicit_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_thread_data_offset.call(this, offset)
  end
  def set_implicit_thread_data_offset(this : IDebugSystemObjects4*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_thread_data_offset.call(this, offset)
  end
  def get_implicit_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_implicit_process_data_offset.call(this, offset)
  end
  def set_implicit_process_data_offset(this : IDebugSystemObjects4*, offset : UInt64) : HRESULT
    @lpVtbl.value.set_implicit_process_data_offset.call(this, offset)
  end
  def get_event_system(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_event_system.call(this, id)
  end
  def get_current_system_id(this : IDebugSystemObjects4*, id : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_id.call(this, id)
  end
  def set_current_system_id(this : IDebugSystemObjects4*, id : UInt32) : HRESULT
    @lpVtbl.value.set_current_system_id.call(this, id)
  end
  def get_number_systems(this : IDebugSystemObjects4*, number : UInt32*) : HRESULT
    @lpVtbl.value.get_number_systems.call(this, number)
  end
  def get_system_ids_by_index(this : IDebugSystemObjects4*, start : UInt32, count : UInt32, ids : UInt32*) : HRESULT
    @lpVtbl.value.get_system_ids_by_index.call(this, start, count, ids)
  end
  def get_total_number_threads_and_processes(this : IDebugSystemObjects4*, totalthreads : UInt32*, totalprocesses : UInt32*, largestprocessthreads : UInt32*, largestsystemthreads : UInt32*, largestsystemprocesses : UInt32*) : HRESULT
    @lpVtbl.value.get_total_number_threads_and_processes.call(this, totalthreads, totalprocesses, largestprocessthreads, largestsystemthreads, largestsystemprocesses)
  end
  def get_current_system_server(this : IDebugSystemObjects4*, server : UInt64*) : HRESULT
    @lpVtbl.value.get_current_system_server.call(this, server)
  end
  def get_system_by_server(this : IDebugSystemObjects4*, server : UInt64, id : UInt32*) : HRESULT
    @lpVtbl.value.get_system_by_server.call(this, server, id)
  end
  def get_current_system_server_name(this : IDebugSystemObjects4*, buffer : UInt8*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_server_name.call(this, buffer, buffersize, namesize)
  end
  def get_current_process_executable_name_wide(this : IDebugSystemObjects4*, buffer : Char*, buffersize : UInt32, exesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_process_executable_name_wide.call(this, buffer, buffersize, exesize)
  end
  def get_current_system_server_name_wide(this : IDebugSystemObjects4*, buffer : Char*, buffersize : UInt32, namesize : UInt32*) : HRESULT
    @lpVtbl.value.get_current_system_server_name_wide.call(this, buffer, buffersize, namesize)
  end
end
struct LibWin32::DebugBaseEventCallbacks
  def query_interface(this : DebugBaseEventCallbacks*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DebugBaseEventCallbacks*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DebugBaseEventCallbacks*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interest_mask(this : DebugBaseEventCallbacks*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def breakpoint(this : DebugBaseEventCallbacks*, bp : IDebugBreakpoint) : HRESULT
    @lpVtbl.value.breakpoint.call(this, bp)
  end
  def exception(this : DebugBaseEventCallbacks*, exception : EXCEPTION_RECORD64*, firstchance : UInt32) : HRESULT
    @lpVtbl.value.exception.call(this, exception, firstchance)
  end
  def create_thread(this : DebugBaseEventCallbacks*, handle : UInt64, dataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_thread.call(this, handle, dataoffset, startoffset)
  end
  def exit_thread(this : DebugBaseEventCallbacks*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_thread.call(this, exitcode)
  end
  def create_process_a(this : DebugBaseEventCallbacks*, imagefilehandle : UInt64, handle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : PSTR, imagename : PSTR, checksum : UInt32, timedatestamp : UInt32, initialthreadhandle : UInt64, threaddataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_process_a.call(this, imagefilehandle, handle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, initialthreadhandle, threaddataoffset, startoffset)
  end
  def exit_process(this : DebugBaseEventCallbacks*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_process.call(this, exitcode)
  end
  def load_module(this : DebugBaseEventCallbacks*, imagefilehandle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : PSTR, imagename : PSTR, checksum : UInt32, timedatestamp : UInt32) : HRESULT
    @lpVtbl.value.load_module.call(this, imagefilehandle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp)
  end
  def unload_module(this : DebugBaseEventCallbacks*, imagebasename : PSTR, baseoffset : UInt64) : HRESULT
    @lpVtbl.value.unload_module.call(this, imagebasename, baseoffset)
  end
  def system_error(this : DebugBaseEventCallbacks*, error : UInt32, level : UInt32) : HRESULT
    @lpVtbl.value.system_error.call(this, error, level)
  end
  def session_status(this : DebugBaseEventCallbacks*, status : UInt32) : HRESULT
    @lpVtbl.value.session_status.call(this, status)
  end
  def change_debuggee_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_debuggee_state.call(this, flags, argument)
  end
  def change_engine_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_engine_state.call(this, flags, argument)
  end
  def change_symbol_state(this : DebugBaseEventCallbacks*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_symbol_state.call(this, flags, argument)
  end
end
struct LibWin32::DebugBaseEventCallbacksWide
  def query_interface(this : DebugBaseEventCallbacksWide*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DebugBaseEventCallbacksWide*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DebugBaseEventCallbacksWide*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interest_mask(this : DebugBaseEventCallbacksWide*, mask : UInt32*) : HRESULT
    @lpVtbl.value.get_interest_mask.call(this, mask)
  end
  def breakpoint(this : DebugBaseEventCallbacksWide*, bp : IDebugBreakpoint2) : HRESULT
    @lpVtbl.value.breakpoint.call(this, bp)
  end
  def exception(this : DebugBaseEventCallbacksWide*, exception : EXCEPTION_RECORD64*, firstchance : UInt32) : HRESULT
    @lpVtbl.value.exception.call(this, exception, firstchance)
  end
  def create_thread(this : DebugBaseEventCallbacksWide*, handle : UInt64, dataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_thread.call(this, handle, dataoffset, startoffset)
  end
  def exit_thread(this : DebugBaseEventCallbacksWide*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_thread.call(this, exitcode)
  end
  def create_process_a(this : DebugBaseEventCallbacksWide*, imagefilehandle : UInt64, handle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32, initialthreadhandle : UInt64, threaddataoffset : UInt64, startoffset : UInt64) : HRESULT
    @lpVtbl.value.create_process_a.call(this, imagefilehandle, handle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp, initialthreadhandle, threaddataoffset, startoffset)
  end
  def exit_process(this : DebugBaseEventCallbacksWide*, exitcode : UInt32) : HRESULT
    @lpVtbl.value.exit_process.call(this, exitcode)
  end
  def load_module(this : DebugBaseEventCallbacksWide*, imagefilehandle : UInt64, baseoffset : UInt64, modulesize : UInt32, modulename : LibC::LPWSTR, imagename : LibC::LPWSTR, checksum : UInt32, timedatestamp : UInt32) : HRESULT
    @lpVtbl.value.load_module.call(this, imagefilehandle, baseoffset, modulesize, modulename, imagename, checksum, timedatestamp)
  end
  def unload_module(this : DebugBaseEventCallbacksWide*, imagebasename : LibC::LPWSTR, baseoffset : UInt64) : HRESULT
    @lpVtbl.value.unload_module.call(this, imagebasename, baseoffset)
  end
  def system_error(this : DebugBaseEventCallbacksWide*, error : UInt32, level : UInt32) : HRESULT
    @lpVtbl.value.system_error.call(this, error, level)
  end
  def session_status(this : DebugBaseEventCallbacksWide*, status : UInt32) : HRESULT
    @lpVtbl.value.session_status.call(this, status)
  end
  def change_debuggee_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_debuggee_state.call(this, flags, argument)
  end
  def change_engine_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_engine_state.call(this, flags, argument)
  end
  def change_symbol_state(this : DebugBaseEventCallbacksWide*, flags : UInt32, argument : UInt64) : HRESULT
    @lpVtbl.value.change_symbol_state.call(this, flags, argument)
  end
end
struct LibWin32::IHostDataModelAccess
  def query_interface(this : IHostDataModelAccess*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHostDataModelAccess*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHostDataModelAccess*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_data_model(this : IHostDataModelAccess*, manager : IDataModelManager*, host : IDebugHost*) : HRESULT
    @lpVtbl.value.get_data_model.call(this, manager, host)
  end
end
struct LibWin32::IKeyStore
  def query_interface(this : IKeyStore*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IKeyStore*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IKeyStore*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_key(this : IKeyStore*, key : LibC::LPWSTR, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key.call(this, key, object, metadata)
  end
  def set_key(this : IKeyStore*, key : LibC::LPWSTR, object : IModelObject, metadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_key.call(this, key, object, metadata)
  end
  def get_key_value(this : IKeyStore*, key : LibC::LPWSTR, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key_value.call(this, key, object, metadata)
  end
  def set_key_value(this : IKeyStore*, key : LibC::LPWSTR, object : IModelObject) : HRESULT
    @lpVtbl.value.set_key_value.call(this, key, object)
  end
  def clear_keys(this : IKeyStore*) : HRESULT
    @lpVtbl.value.clear_keys.call(this)
  end
end
struct LibWin32::IModelObject
  def query_interface(this : IModelObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IModelObject*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def get_kind(this : IModelObject*, kind : ModelObjectKind*) : HRESULT
    @lpVtbl.value.get_kind.call(this, kind)
  end
  def get_intrinsic_value(this : IModelObject*, intrinsicdata : VARIANT*) : HRESULT
    @lpVtbl.value.get_intrinsic_value.call(this, intrinsicdata)
  end
  def get_intrinsic_value_as(this : IModelObject*, vt : UInt16, intrinsicdata : VARIANT*) : HRESULT
    @lpVtbl.value.get_intrinsic_value_as.call(this, vt, intrinsicdata)
  end
  def get_key_value(this : IModelObject*, key : LibC::LPWSTR, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key_value.call(this, key, object, metadata)
  end
  def set_key_value(this : IModelObject*, key : LibC::LPWSTR, object : IModelObject) : HRESULT
    @lpVtbl.value.set_key_value.call(this, key, object)
  end
  def enumerate_key_values(this : IModelObject*, enumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_key_values.call(this, enumerator)
  end
  def get_raw_value(this : IModelObject*, kind : SymbolKind, name : LibC::LPWSTR, searchflags : UInt32, object : IModelObject*) : HRESULT
    @lpVtbl.value.get_raw_value.call(this, kind, name, searchflags, object)
  end
  def enumerate_raw_values(this : IModelObject*, kind : SymbolKind, searchflags : UInt32, enumerator : IRawEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_raw_values.call(this, kind, searchflags, enumerator)
  end
  def dereference(this : IModelObject*, object : IModelObject*) : HRESULT
    @lpVtbl.value.dereference.call(this, object)
  end
  def try_cast_to_runtime_type(this : IModelObject*, runtimetypedobject : IModelObject*) : HRESULT
    @lpVtbl.value.try_cast_to_runtime_type.call(this, runtimetypedobject)
  end
  def get_concept(this : IModelObject*, conceptid : Guid*, conceptinterface : IUnknown*, conceptmetadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_concept.call(this, conceptid, conceptinterface, conceptmetadata)
  end
  def get_location(this : IModelObject*, location : Location*) : HRESULT
    @lpVtbl.value.get_location.call(this, location)
  end
  def get_type_info(this : IModelObject*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, type)
  end
  def get_target_info(this : IModelObject*, location : Location*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_target_info.call(this, location, type)
  end
  def get_number_of_parent_models(this : IModelObject*, nummodels : UInt64*) : HRESULT
    @lpVtbl.value.get_number_of_parent_models.call(this, nummodels)
  end
  def get_parent_model(this : IModelObject*, i : UInt64, model : IModelObject*, contextobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_parent_model.call(this, i, model, contextobject)
  end
  def add_parent_model(this : IModelObject*, model : IModelObject, contextobject : IModelObject, override : UInt8) : HRESULT
    @lpVtbl.value.add_parent_model.call(this, model, contextobject, override)
  end
  def remove_parent_model(this : IModelObject*, model : IModelObject) : HRESULT
    @lpVtbl.value.remove_parent_model.call(this, model)
  end
  def get_key(this : IModelObject*, key : LibC::LPWSTR, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key.call(this, key, object, metadata)
  end
  def get_key_reference(this : IModelObject*, key : LibC::LPWSTR, objectreference : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key_reference.call(this, key, objectreference, metadata)
  end
  def set_key(this : IModelObject*, key : LibC::LPWSTR, object : IModelObject, metadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_key.call(this, key, object, metadata)
  end
  def clear_keys(this : IModelObject*) : HRESULT
    @lpVtbl.value.clear_keys.call(this)
  end
  def enumerate_keys(this : IModelObject*, enumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_keys.call(this, enumerator)
  end
  def enumerate_key_references(this : IModelObject*, enumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_key_references.call(this, enumerator)
  end
  def set_concept(this : IModelObject*, conceptid : Guid*, conceptinterface : IUnknown, conceptmetadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_concept.call(this, conceptid, conceptinterface, conceptmetadata)
  end
  def clear_concepts(this : IModelObject*) : HRESULT
    @lpVtbl.value.clear_concepts.call(this)
  end
  def get_raw_reference(this : IModelObject*, kind : SymbolKind, name : LibC::LPWSTR, searchflags : UInt32, object : IModelObject*) : HRESULT
    @lpVtbl.value.get_raw_reference.call(this, kind, name, searchflags, object)
  end
  def enumerate_raw_references(this : IModelObject*, kind : SymbolKind, searchflags : UInt32, enumerator : IRawEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_raw_references.call(this, kind, searchflags, enumerator)
  end
  def set_context_for_data_model(this : IModelObject*, datamodelobject : IModelObject, context : IUnknown) : HRESULT
    @lpVtbl.value.set_context_for_data_model.call(this, datamodelobject, context)
  end
  def get_context_for_data_model(this : IModelObject*, datamodelobject : IModelObject, context : IUnknown*) : HRESULT
    @lpVtbl.value.get_context_for_data_model.call(this, datamodelobject, context)
  end
  def compare(this : IModelObject*, other : IModelObject, ppresult : IModelObject*) : HRESULT
    @lpVtbl.value.compare.call(this, other, ppresult)
  end
  def is_equal_to(this : IModelObject*, other : IModelObject, equal : Bool*) : HRESULT
    @lpVtbl.value.is_equal_to.call(this, other, equal)
  end
end
struct LibWin32::IDataModelManager
  def query_interface(this : IDataModelManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def close(this : IDataModelManager*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def create_no_value(this : IDataModelManager*, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_no_value.call(this, object)
  end
  def create_error_object(this : IDataModelManager*, hrerror : HRESULT, pwszmessage : LibC::LPWSTR, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_error_object.call(this, hrerror, pwszmessage, object)
  end
  def create_typed_object(this : IDataModelManager*, context : IDebugHostContext, objectlocation : Location, objecttype : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_object.call(this, context, objectlocation, objecttype, object)
  end
  def create_typed_object_reference(this : IDataModelManager*, context : IDebugHostContext, objectlocation : Location, objecttype : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_object_reference.call(this, context, objectlocation, objecttype, object)
  end
  def create_synthetic_object(this : IDataModelManager*, context : IDebugHostContext, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_synthetic_object.call(this, context, object)
  end
  def create_data_model_object(this : IDataModelManager*, datamodel : IDataModelConcept, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_data_model_object.call(this, datamodel, object)
  end
  def create_intrinsic_object(this : IDataModelManager*, objectkind : ModelObjectKind, intrinsicdata : VARIANT*, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_intrinsic_object.call(this, objectkind, intrinsicdata, object)
  end
  def create_typed_intrinsic_object(this : IDataModelManager*, intrinsicdata : VARIANT*, type : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_intrinsic_object.call(this, intrinsicdata, type, object)
  end
  def get_model_for_type_signature(this : IDataModelManager*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject*) : HRESULT
    @lpVtbl.value.get_model_for_type_signature.call(this, typesignature, datamodel)
  end
  def get_model_for_type(this : IDataModelManager*, type : IDebugHostType, datamodel : IModelObject*, typesignature : IDebugHostTypeSignature*, wildcardmatches : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.get_model_for_type.call(this, type, datamodel, typesignature, wildcardmatches)
  end
  def register_model_for_type_signature(this : IDataModelManager*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject) : HRESULT
    @lpVtbl.value.register_model_for_type_signature.call(this, typesignature, datamodel)
  end
  def unregister_model_for_type_signature(this : IDataModelManager*, datamodel : IModelObject, typesignature : IDebugHostTypeSignature) : HRESULT
    @lpVtbl.value.unregister_model_for_type_signature.call(this, datamodel, typesignature)
  end
  def register_extension_for_type_signature(this : IDataModelManager*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject) : HRESULT
    @lpVtbl.value.register_extension_for_type_signature.call(this, typesignature, datamodel)
  end
  def unregister_extension_for_type_signature(this : IDataModelManager*, datamodel : IModelObject, typesignature : IDebugHostTypeSignature) : HRESULT
    @lpVtbl.value.unregister_extension_for_type_signature.call(this, datamodel, typesignature)
  end
  def create_metadata_store(this : IDataModelManager*, parentstore : IKeyStore, metadatastore : IKeyStore*) : HRESULT
    @lpVtbl.value.create_metadata_store.call(this, parentstore, metadatastore)
  end
  def get_root_namespace(this : IDataModelManager*, rootnamespace : IModelObject*) : HRESULT
    @lpVtbl.value.get_root_namespace.call(this, rootnamespace)
  end
  def register_named_model(this : IDataModelManager*, modelname : LibC::LPWSTR, modeobject : IModelObject) : HRESULT
    @lpVtbl.value.register_named_model.call(this, modelname, modeobject)
  end
  def unregister_named_model(this : IDataModelManager*, modelname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.unregister_named_model.call(this, modelname)
  end
  def acquire_named_model(this : IDataModelManager*, modelname : LibC::LPWSTR, modelobject : IModelObject*) : HRESULT
    @lpVtbl.value.acquire_named_model.call(this, modelname, modelobject)
  end
end
struct LibWin32::IModelKeyReference
  def query_interface(this : IModelKeyReference*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelKeyReference*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelKeyReference*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_key_name(this : IModelKeyReference*, keyname : UInt8**) : HRESULT
    @lpVtbl.value.get_key_name.call(this, keyname)
  end
  def get_original_object(this : IModelKeyReference*, originalobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_original_object.call(this, originalobject)
  end
  def get_context_object(this : IModelKeyReference*, containingobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_context_object.call(this, containingobject)
  end
  def get_key(this : IModelKeyReference*, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key.call(this, object, metadata)
  end
  def get_key_value(this : IModelKeyReference*, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key_value.call(this, object, metadata)
  end
  def set_key(this : IModelKeyReference*, object : IModelObject, metadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_key.call(this, object, metadata)
  end
  def set_key_value(this : IModelKeyReference*, object : IModelObject) : HRESULT
    @lpVtbl.value.set_key_value.call(this, object)
  end
end
struct LibWin32::IModelPropertyAccessor
  def query_interface(this : IModelPropertyAccessor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelPropertyAccessor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelPropertyAccessor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_value(this : IModelPropertyAccessor*, key : LibC::LPWSTR, contextobject : IModelObject, value : IModelObject*) : HRESULT
    @lpVtbl.value.get_value.call(this, key, contextobject, value)
  end
  def set_value(this : IModelPropertyAccessor*, key : LibC::LPWSTR, contextobject : IModelObject, value : IModelObject) : HRESULT
    @lpVtbl.value.set_value.call(this, key, contextobject, value)
  end
end
struct LibWin32::IModelMethod
  def query_interface(this : IModelMethod*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelMethod*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelMethod*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def call(this : IModelMethod*, pcontextobject : IModelObject, argcount : UInt64, pparguments : IModelObject*, ppresult : IModelObject*, ppmetadata : IKeyStore*) : HRESULT
    @lpVtbl.value.call.call(this, pcontextobject, argcount, pparguments, ppresult, ppmetadata)
  end
end
struct LibWin32::IKeyEnumerator
  def query_interface(this : IKeyEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IKeyEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IKeyEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IKeyEnumerator*, key : UInt8**, value : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_next.call(this, key, value, metadata)
  end
end
struct LibWin32::IRawEnumerator
  def query_interface(this : IRawEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRawEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRawEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IRawEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IRawEnumerator*, name : UInt8**, kind : SymbolKind*, value : IModelObject*) : HRESULT
    @lpVtbl.value.get_next.call(this, name, kind, value)
  end
end
struct LibWin32::IDataModelConcept
  def query_interface(this : IDataModelConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize_object(this : IDataModelConcept*, modelobject : IModelObject, matchingtypesignature : IDebugHostTypeSignature, wildcardmatches : IDebugHostSymbolEnumerator) : HRESULT
    @lpVtbl.value.initialize_object.call(this, modelobject, matchingtypesignature, wildcardmatches)
  end
  def get_name(this : IDataModelConcept*, modelname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, modelname)
  end
end
struct LibWin32::IStringDisplayableConcept
  def query_interface(this : IStringDisplayableConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IStringDisplayableConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IStringDisplayableConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def to_display_string(this : IStringDisplayableConcept*, contextobject : IModelObject, metadata : IKeyStore, displaystring : UInt8**) : HRESULT
    @lpVtbl.value.to_display_string.call(this, contextobject, metadata, displaystring)
  end
end
struct LibWin32::ICodeAddressConcept
  def query_interface(this : ICodeAddressConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICodeAddressConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICodeAddressConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_containing_symbol(this : ICodeAddressConcept*, pcontextobject : IModelObject, ppsymbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.get_containing_symbol.call(this, pcontextobject, ppsymbol)
  end
end
struct LibWin32::IModelIterator
  def query_interface(this : IModelIterator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelIterator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelIterator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IModelIterator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IModelIterator*, object : IModelObject*, dimensions : UInt64, indexers : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_next.call(this, object, dimensions, indexers, metadata)
  end
end
struct LibWin32::IIterableConcept
  def query_interface(this : IIterableConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIterableConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIterableConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_default_index_dimensionality(this : IIterableConcept*, contextobject : IModelObject, dimensionality : UInt64*) : HRESULT
    @lpVtbl.value.get_default_index_dimensionality.call(this, contextobject, dimensionality)
  end
  def get_iterator(this : IIterableConcept*, contextobject : IModelObject, iterator : IModelIterator*) : HRESULT
    @lpVtbl.value.get_iterator.call(this, contextobject, iterator)
  end
end
struct LibWin32::IIndexableConcept
  def query_interface(this : IIndexableConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIndexableConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIndexableConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_dimensionality(this : IIndexableConcept*, contextobject : IModelObject, dimensionality : UInt64*) : HRESULT
    @lpVtbl.value.get_dimensionality.call(this, contextobject, dimensionality)
  end
  def get_at(this : IIndexableConcept*, contextobject : IModelObject, indexercount : UInt64, indexers : IModelObject*, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_at.call(this, contextobject, indexercount, indexers, object, metadata)
  end
  def set_at(this : IIndexableConcept*, contextobject : IModelObject, indexercount : UInt64, indexers : IModelObject*, value : IModelObject) : HRESULT
    @lpVtbl.value.set_at.call(this, contextobject, indexercount, indexers, value)
  end
end
struct LibWin32::IPreferredRuntimeTypeConcept
  def query_interface(this : IPreferredRuntimeTypeConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPreferredRuntimeTypeConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPreferredRuntimeTypeConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def cast_to_preferred_runtime_type(this : IPreferredRuntimeTypeConcept*, contextobject : IModelObject, object : IModelObject*) : HRESULT
    @lpVtbl.value.cast_to_preferred_runtime_type.call(this, contextobject, object)
  end
end
struct LibWin32::IDebugHost
  def query_interface(this : IDebugHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_host_defined_interface(this : IDebugHost*, hostunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_host_defined_interface.call(this, hostunk)
  end
  def get_current_context(this : IDebugHost*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_current_context.call(this, context)
  end
  def get_default_metadata(this : IDebugHost*, defaultmetadatastore : IKeyStore*) : HRESULT
    @lpVtbl.value.get_default_metadata.call(this, defaultmetadatastore)
  end
end
struct LibWin32::IDebugHostContext
  def query_interface(this : IDebugHostContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_equal_to(this : IDebugHostContext*, pcontext : IDebugHostContext, pisequal : Bool*) : HRESULT
    @lpVtbl.value.is_equal_to.call(this, pcontext, pisequal)
  end
end
struct LibWin32::IDebugHostErrorSink
  def query_interface(this : IDebugHostErrorSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostErrorSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostErrorSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def report_error(this : IDebugHostErrorSink*, errclass : ErrorClass, hrerror : HRESULT, message : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.report_error.call(this, errclass, hrerror, message)
  end
end
struct LibWin32::IDebugHostSymbol
  def query_interface(this : IDebugHostSymbol*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostSymbol*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostSymbol*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostSymbol*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostSymbol*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostSymbol*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostSymbol*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostSymbol*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostSymbol*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostSymbol*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
end
struct LibWin32::IDebugHostSymbolEnumerator
  def query_interface(this : IDebugHostSymbolEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostSymbolEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostSymbolEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IDebugHostSymbolEnumerator*, symbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.get_next.call(this, symbol)
  end
end
struct LibWin32::IDebugHostModule
  def query_interface(this : IDebugHostModule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostModule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostModule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostModule*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostModule*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostModule*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostModule*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostModule*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostModule*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostModule*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_image_name(this : IDebugHostModule*, allowpath : UInt8, imagename : UInt8**) : HRESULT
    @lpVtbl.value.get_image_name.call(this, allowpath, imagename)
  end
  def get_base_location(this : IDebugHostModule*, modulebaselocation : Location*) : HRESULT
    @lpVtbl.value.get_base_location.call(this, modulebaselocation)
  end
  def get_version(this : IDebugHostModule*, fileversion : UInt64*, productversion : UInt64*) : HRESULT
    @lpVtbl.value.get_version.call(this, fileversion, productversion)
  end
  def find_type_by_name(this : IDebugHostModule*, typename : LibC::LPWSTR, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.find_type_by_name.call(this, typename, type)
  end
  def find_symbol_by_rva(this : IDebugHostModule*, rva : UInt64, symbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.find_symbol_by_rva.call(this, rva, symbol)
  end
  def find_symbol_by_name(this : IDebugHostModule*, symbolname : LibC::LPWSTR, symbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.find_symbol_by_name.call(this, symbolname, symbol)
  end
end
struct LibWin32::IDebugHostType
  def query_interface(this : IDebugHostType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostType*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostType*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostType*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostType*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostType*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostType*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostType*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_type_kind(this : IDebugHostType*, kind : TypeKind*) : HRESULT
    @lpVtbl.value.get_type_kind.call(this, kind)
  end
  def get_size(this : IDebugHostType*, size : UInt64*) : HRESULT
    @lpVtbl.value.get_size.call(this, size)
  end
  def get_base_type(this : IDebugHostType*, basetype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_base_type.call(this, basetype)
  end
  def get_hash_code(this : IDebugHostType*, hashcode : UInt32*) : HRESULT
    @lpVtbl.value.get_hash_code.call(this, hashcode)
  end
  def get_intrinsic_type(this : IDebugHostType*, intrinsickind : IntrinsicKind*, carriertype : UInt16*) : HRESULT
    @lpVtbl.value.get_intrinsic_type.call(this, intrinsickind, carriertype)
  end
  def get_bit_field(this : IDebugHostType*, lsboffield : UInt32*, lengthoffield : UInt32*) : HRESULT
    @lpVtbl.value.get_bit_field.call(this, lsboffield, lengthoffield)
  end
  def get_pointer_kind(this : IDebugHostType*, pointerkind : PointerKind*) : HRESULT
    @lpVtbl.value.get_pointer_kind.call(this, pointerkind)
  end
  def get_member_type(this : IDebugHostType*, membertype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_member_type.call(this, membertype)
  end
  def create_pointer_to(this : IDebugHostType*, kind : PointerKind, newtype : IDebugHostType*) : HRESULT
    @lpVtbl.value.create_pointer_to.call(this, kind, newtype)
  end
  def get_array_dimensionality(this : IDebugHostType*, arraydimensionality : UInt64*) : HRESULT
    @lpVtbl.value.get_array_dimensionality.call(this, arraydimensionality)
  end
  def get_array_dimensions(this : IDebugHostType*, dimensions : UInt64, pdimensions : ArrayDimension*) : HRESULT
    @lpVtbl.value.get_array_dimensions.call(this, dimensions, pdimensions)
  end
  def create_array_of(this : IDebugHostType*, dimensions : UInt64, pdimensions : ArrayDimension*, newtype : IDebugHostType*) : HRESULT
    @lpVtbl.value.create_array_of.call(this, dimensions, pdimensions, newtype)
  end
  def get_function_calling_convention(this : IDebugHostType*, conventionkind : CallingConventionKind*) : HRESULT
    @lpVtbl.value.get_function_calling_convention.call(this, conventionkind)
  end
  def get_function_return_type(this : IDebugHostType*, returntype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_function_return_type.call(this, returntype)
  end
  def get_function_parameter_type_count(this : IDebugHostType*, count : UInt64*) : HRESULT
    @lpVtbl.value.get_function_parameter_type_count.call(this, count)
  end
  def get_function_parameter_type_at(this : IDebugHostType*, i : UInt64, parametertype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_function_parameter_type_at.call(this, i, parametertype)
  end
  def is_generic(this : IDebugHostType*, isgeneric : Bool*) : HRESULT
    @lpVtbl.value.is_generic.call(this, isgeneric)
  end
  def get_generic_argument_count(this : IDebugHostType*, argcount : UInt64*) : HRESULT
    @lpVtbl.value.get_generic_argument_count.call(this, argcount)
  end
  def get_generic_argument_at(this : IDebugHostType*, i : UInt64, argument : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.get_generic_argument_at.call(this, i, argument)
  end
end
struct LibWin32::IDebugHostConstant
  def query_interface(this : IDebugHostConstant*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostConstant*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostConstant*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostConstant*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostConstant*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostConstant*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostConstant*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostConstant*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostConstant*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostConstant*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_value(this : IDebugHostConstant*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, value)
  end
end
struct LibWin32::IDebugHostField
  def query_interface(this : IDebugHostField*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostField*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostField*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostField*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostField*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostField*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostField*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostField*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostField*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostField*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_location_kind(this : IDebugHostField*, locationkind : LocationKind*) : HRESULT
    @lpVtbl.value.get_location_kind.call(this, locationkind)
  end
  def get_offset(this : IDebugHostField*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset.call(this, offset)
  end
  def get_location(this : IDebugHostField*, location : Location*) : HRESULT
    @lpVtbl.value.get_location.call(this, location)
  end
  def get_value(this : IDebugHostField*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, value)
  end
end
struct LibWin32::IDebugHostData
  def query_interface(this : IDebugHostData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostData*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostData*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostData*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostData*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostData*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostData*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostData*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_location_kind(this : IDebugHostData*, locationkind : LocationKind*) : HRESULT
    @lpVtbl.value.get_location_kind.call(this, locationkind)
  end
  def get_location(this : IDebugHostData*, location : Location*) : HRESULT
    @lpVtbl.value.get_location.call(this, location)
  end
  def get_value(this : IDebugHostData*, value : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, value)
  end
end
struct LibWin32::IDebugHostPublic
  def query_interface(this : IDebugHostPublic*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostPublic*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostPublic*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostPublic*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostPublic*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostPublic*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostPublic*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostPublic*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostPublic*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostPublic*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_location_kind(this : IDebugHostPublic*, locationkind : LocationKind*) : HRESULT
    @lpVtbl.value.get_location_kind.call(this, locationkind)
  end
  def get_location(this : IDebugHostPublic*, location : Location*) : HRESULT
    @lpVtbl.value.get_location.call(this, location)
  end
end
struct LibWin32::IDebugHostBaseClass
  def query_interface(this : IDebugHostBaseClass*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostBaseClass*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostBaseClass*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostBaseClass*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostBaseClass*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostBaseClass*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostBaseClass*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostBaseClass*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostBaseClass*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostBaseClass*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_offset(this : IDebugHostBaseClass*, offset : UInt64*) : HRESULT
    @lpVtbl.value.get_offset.call(this, offset)
  end
end
struct LibWin32::IDebugHostSymbols
  def query_interface(this : IDebugHostSymbols*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostSymbols*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostSymbols*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_module_signature(this : IDebugHostSymbols*, pwszmodulename : LibC::LPWSTR, pwszminversion : LibC::LPWSTR, pwszmaxversion : LibC::LPWSTR, ppmodulesignature : IDebugHostModuleSignature*) : HRESULT
    @lpVtbl.value.create_module_signature.call(this, pwszmodulename, pwszminversion, pwszmaxversion, ppmodulesignature)
  end
  def create_type_signature(this : IDebugHostSymbols*, signaturespecification : LibC::LPWSTR, module_ : IDebugHostModule, typesignature : IDebugHostTypeSignature*) : HRESULT
    @lpVtbl.value.create_type_signature.call(this, signaturespecification, module_, typesignature)
  end
  def create_type_signature_for_module_range(this : IDebugHostSymbols*, signaturespecification : LibC::LPWSTR, modulename : LibC::LPWSTR, minversion : LibC::LPWSTR, maxversion : LibC::LPWSTR, typesignature : IDebugHostTypeSignature*) : HRESULT
    @lpVtbl.value.create_type_signature_for_module_range.call(this, signaturespecification, modulename, minversion, maxversion, typesignature)
  end
  def enumerate_modules(this : IDebugHostSymbols*, context : IDebugHostContext, moduleenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_modules.call(this, context, moduleenum)
  end
  def find_module_by_name(this : IDebugHostSymbols*, context : IDebugHostContext, modulename : LibC::LPWSTR, module_ : IDebugHostModule*) : HRESULT
    @lpVtbl.value.find_module_by_name.call(this, context, modulename, module_)
  end
  def find_module_by_location(this : IDebugHostSymbols*, context : IDebugHostContext, modulelocation : Location, module_ : IDebugHostModule*) : HRESULT
    @lpVtbl.value.find_module_by_location.call(this, context, modulelocation, module_)
  end
  def get_most_derived_object(this : IDebugHostSymbols*, pcontext : IDebugHostContext, location : Location, objecttype : IDebugHostType, derivedlocation : Location*, derivedtype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_most_derived_object.call(this, pcontext, location, objecttype, derivedlocation, derivedtype)
  end
end
struct LibWin32::IDebugHostMemory
  def query_interface(this : IDebugHostMemory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostMemory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostMemory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_bytes(this : IDebugHostMemory*, context : IDebugHostContext, location : Location, buffer : Void*, buffersize : UInt64, bytesread : UInt64*) : HRESULT
    @lpVtbl.value.read_bytes.call(this, context, location, buffer, buffersize, bytesread)
  end
  def write_bytes(this : IDebugHostMemory*, context : IDebugHostContext, location : Location, buffer : Void*, buffersize : UInt64, byteswritten : UInt64*) : HRESULT
    @lpVtbl.value.write_bytes.call(this, context, location, buffer, buffersize, byteswritten)
  end
  def read_pointers(this : IDebugHostMemory*, context : IDebugHostContext, location : Location, count : UInt64, pointers : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers.call(this, context, location, count, pointers)
  end
  def write_pointers(this : IDebugHostMemory*, context : IDebugHostContext, location : Location, count : UInt64, pointers : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers.call(this, context, location, count, pointers)
  end
  def get_display_string_for_location(this : IDebugHostMemory*, context : IDebugHostContext, location : Location, verbose : UInt8, locationname : UInt8**) : HRESULT
    @lpVtbl.value.get_display_string_for_location.call(this, context, location, verbose, locationname)
  end
end
struct LibWin32::IDebugHostEvaluator
  def query_interface(this : IDebugHostEvaluator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostEvaluator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostEvaluator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def evaluate_expression(this : IDebugHostEvaluator*, context : IDebugHostContext, expression : LibC::LPWSTR, bindingcontext : IModelObject, result : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.evaluate_expression.call(this, context, expression, bindingcontext, result, metadata)
  end
  def evaluate_extended_expression(this : IDebugHostEvaluator*, context : IDebugHostContext, expression : LibC::LPWSTR, bindingcontext : IModelObject, result : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.evaluate_extended_expression.call(this, context, expression, bindingcontext, result, metadata)
  end
end
struct LibWin32::IDebugHostModuleSignature
  def query_interface(this : IDebugHostModuleSignature*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostModuleSignature*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostModuleSignature*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_match(this : IDebugHostModuleSignature*, pmodule : IDebugHostModule, ismatch : Bool*) : HRESULT
    @lpVtbl.value.is_match.call(this, pmodule, ismatch)
  end
end
struct LibWin32::IDebugHostTypeSignature
  def query_interface(this : IDebugHostTypeSignature*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostTypeSignature*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostTypeSignature*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_hash_code(this : IDebugHostTypeSignature*, hashcode : UInt32*) : HRESULT
    @lpVtbl.value.get_hash_code.call(this, hashcode)
  end
  def is_match(this : IDebugHostTypeSignature*, type : IDebugHostType, ismatch : Bool*, wildcardmatches : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.is_match.call(this, type, ismatch, wildcardmatches)
  end
  def compare_against(this : IDebugHostTypeSignature*, typesignature : IDebugHostTypeSignature, result : SignatureComparison*) : HRESULT
    @lpVtbl.value.compare_against.call(this, typesignature, result)
  end
end
struct LibWin32::IDebugHostSymbol2
  def query_interface(this : IDebugHostSymbol2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostSymbol2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostSymbol2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostSymbol2*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostSymbol2*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostSymbol2*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostSymbol2*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostSymbol2*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostSymbol2*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostSymbol2*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_language(this : IDebugHostSymbol2*, pkind : LanguageKind*) : HRESULT
    @lpVtbl.value.get_language.call(this, pkind)
  end
end
struct LibWin32::IDebugHostType2
  def query_interface(this : IDebugHostType2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostType2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostType2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostType2*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostType2*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostType2*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostType2*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostType2*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostType2*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostType2*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_type_kind(this : IDebugHostType2*, kind : TypeKind*) : HRESULT
    @lpVtbl.value.get_type_kind.call(this, kind)
  end
  def get_size(this : IDebugHostType2*, size : UInt64*) : HRESULT
    @lpVtbl.value.get_size.call(this, size)
  end
  def get_base_type(this : IDebugHostType2*, basetype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_base_type.call(this, basetype)
  end
  def get_hash_code(this : IDebugHostType2*, hashcode : UInt32*) : HRESULT
    @lpVtbl.value.get_hash_code.call(this, hashcode)
  end
  def get_intrinsic_type(this : IDebugHostType2*, intrinsickind : IntrinsicKind*, carriertype : UInt16*) : HRESULT
    @lpVtbl.value.get_intrinsic_type.call(this, intrinsickind, carriertype)
  end
  def get_bit_field(this : IDebugHostType2*, lsboffield : UInt32*, lengthoffield : UInt32*) : HRESULT
    @lpVtbl.value.get_bit_field.call(this, lsboffield, lengthoffield)
  end
  def get_pointer_kind(this : IDebugHostType2*, pointerkind : PointerKind*) : HRESULT
    @lpVtbl.value.get_pointer_kind.call(this, pointerkind)
  end
  def get_member_type(this : IDebugHostType2*, membertype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_member_type.call(this, membertype)
  end
  def create_pointer_to(this : IDebugHostType2*, kind : PointerKind, newtype : IDebugHostType*) : HRESULT
    @lpVtbl.value.create_pointer_to.call(this, kind, newtype)
  end
  def get_array_dimensionality(this : IDebugHostType2*, arraydimensionality : UInt64*) : HRESULT
    @lpVtbl.value.get_array_dimensionality.call(this, arraydimensionality)
  end
  def get_array_dimensions(this : IDebugHostType2*, dimensions : UInt64, pdimensions : ArrayDimension*) : HRESULT
    @lpVtbl.value.get_array_dimensions.call(this, dimensions, pdimensions)
  end
  def create_array_of(this : IDebugHostType2*, dimensions : UInt64, pdimensions : ArrayDimension*, newtype : IDebugHostType*) : HRESULT
    @lpVtbl.value.create_array_of.call(this, dimensions, pdimensions, newtype)
  end
  def get_function_calling_convention(this : IDebugHostType2*, conventionkind : CallingConventionKind*) : HRESULT
    @lpVtbl.value.get_function_calling_convention.call(this, conventionkind)
  end
  def get_function_return_type(this : IDebugHostType2*, returntype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_function_return_type.call(this, returntype)
  end
  def get_function_parameter_type_count(this : IDebugHostType2*, count : UInt64*) : HRESULT
    @lpVtbl.value.get_function_parameter_type_count.call(this, count)
  end
  def get_function_parameter_type_at(this : IDebugHostType2*, i : UInt64, parametertype : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_function_parameter_type_at.call(this, i, parametertype)
  end
  def is_generic(this : IDebugHostType2*, isgeneric : Bool*) : HRESULT
    @lpVtbl.value.is_generic.call(this, isgeneric)
  end
  def get_generic_argument_count(this : IDebugHostType2*, argcount : UInt64*) : HRESULT
    @lpVtbl.value.get_generic_argument_count.call(this, argcount)
  end
  def get_generic_argument_at(this : IDebugHostType2*, i : UInt64, argument : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.get_generic_argument_at.call(this, i, argument)
  end
  def is_typedef(this : IDebugHostType2*, istypedef : Bool*) : HRESULT
    @lpVtbl.value.is_typedef.call(this, istypedef)
  end
  def get_typedef_base_type(this : IDebugHostType2*, basetype : IDebugHostType2*) : HRESULT
    @lpVtbl.value.get_typedef_base_type.call(this, basetype)
  end
  def get_typedef_final_base_type(this : IDebugHostType2*, finalbasetype : IDebugHostType2*) : HRESULT
    @lpVtbl.value.get_typedef_final_base_type.call(this, finalbasetype)
  end
  def get_function_var_args_kind(this : IDebugHostType2*, varargskind : VarArgsKind*) : HRESULT
    @lpVtbl.value.get_function_var_args_kind.call(this, varargskind)
  end
  def get_function_instance_pointer_type(this : IDebugHostType2*, instancepointertype : IDebugHostType2*) : HRESULT
    @lpVtbl.value.get_function_instance_pointer_type.call(this, instancepointertype)
  end
end
struct LibWin32::IDebugHostStatus
  def query_interface(this : IDebugHostStatus*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostStatus*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostStatus*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def poll_user_interrupt(this : IDebugHostStatus*, interruptrequested : Bool*) : HRESULT
    @lpVtbl.value.poll_user_interrupt.call(this, interruptrequested)
  end
end
struct LibWin32::IDataModelScriptClient
  def query_interface(this : IDataModelScriptClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def report_error(this : IDataModelScriptClient*, errclass : ErrorClass, hrfail : HRESULT, message : LibC::LPWSTR, line : UInt32, position : UInt32) : HRESULT
    @lpVtbl.value.report_error.call(this, errclass, hrfail, message, line, position)
  end
end
struct LibWin32::IDataModelScriptTemplate
  def query_interface(this : IDataModelScriptTemplate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptTemplate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptTemplate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDataModelScriptTemplate*, templatename : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, templatename)
  end
  def get_description(this : IDataModelScriptTemplate*, templatedescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, templatedescription)
  end
  def get_content(this : IDataModelScriptTemplate*, contentstream : IStream*) : HRESULT
    @lpVtbl.value.get_content.call(this, contentstream)
  end
end
struct LibWin32::IDataModelScript
  def query_interface(this : IDataModelScript*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScript*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScript*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDataModelScript*, scriptname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, scriptname)
  end
  def rename(this : IDataModelScript*, scriptname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.rename.call(this, scriptname)
  end
  def populate(this : IDataModelScript*, contentstream : IStream) : HRESULT
    @lpVtbl.value.populate.call(this, contentstream)
  end
  def execute(this : IDataModelScript*, client : IDataModelScriptClient) : HRESULT
    @lpVtbl.value.execute.call(this, client)
  end
  def unlink(this : IDataModelScript*) : HRESULT
    @lpVtbl.value.unlink.call(this)
  end
  def is_invocable(this : IDataModelScript*, isinvocable : Bool*) : HRESULT
    @lpVtbl.value.is_invocable.call(this, isinvocable)
  end
  def invoke_main(this : IDataModelScript*, client : IDataModelScriptClient) : HRESULT
    @lpVtbl.value.invoke_main.call(this, client)
  end
end
struct LibWin32::IDataModelScriptTemplateEnumerator
  def query_interface(this : IDataModelScriptTemplateEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptTemplateEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptTemplateEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IDataModelScriptTemplateEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IDataModelScriptTemplateEnumerator*, templatecontent : IDataModelScriptTemplate*) : HRESULT
    @lpVtbl.value.get_next.call(this, templatecontent)
  end
end
struct LibWin32::IDataModelScriptProvider
  def query_interface(this : IDataModelScriptProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDataModelScriptProvider*, name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def get_extension(this : IDataModelScriptProvider*, extension : UInt8**) : HRESULT
    @lpVtbl.value.get_extension.call(this, extension)
  end
  def create_script(this : IDataModelScriptProvider*, script : IDataModelScript*) : HRESULT
    @lpVtbl.value.create_script.call(this, script)
  end
  def get_default_template_content(this : IDataModelScriptProvider*, templatecontent : IDataModelScriptTemplate*) : HRESULT
    @lpVtbl.value.get_default_template_content.call(this, templatecontent)
  end
  def enumerate_templates(this : IDataModelScriptProvider*, enumerator : IDataModelScriptTemplateEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_templates.call(this, enumerator)
  end
end
struct LibWin32::IDataModelScriptProviderEnumerator
  def query_interface(this : IDataModelScriptProviderEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptProviderEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptProviderEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IDataModelScriptProviderEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IDataModelScriptProviderEnumerator*, provider : IDataModelScriptProvider*) : HRESULT
    @lpVtbl.value.get_next.call(this, provider)
  end
end
struct LibWin32::IDataModelScriptManager
  def query_interface(this : IDataModelScriptManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_default_name_binder(this : IDataModelScriptManager*, ppnamebinder : IDataModelNameBinder*) : HRESULT
    @lpVtbl.value.get_default_name_binder.call(this, ppnamebinder)
  end
  def register_script_provider(this : IDataModelScriptManager*, provider : IDataModelScriptProvider) : HRESULT
    @lpVtbl.value.register_script_provider.call(this, provider)
  end
  def unregister_script_provider(this : IDataModelScriptManager*, provider : IDataModelScriptProvider) : HRESULT
    @lpVtbl.value.unregister_script_provider.call(this, provider)
  end
  def find_provider_for_script_type(this : IDataModelScriptManager*, scripttype : LibC::LPWSTR, provider : IDataModelScriptProvider*) : HRESULT
    @lpVtbl.value.find_provider_for_script_type.call(this, scripttype, provider)
  end
  def find_provider_for_script_extension(this : IDataModelScriptManager*, scriptextension : LibC::LPWSTR, provider : IDataModelScriptProvider*) : HRESULT
    @lpVtbl.value.find_provider_for_script_extension.call(this, scriptextension, provider)
  end
  def enumerate_script_providers(this : IDataModelScriptManager*, enumerator : IDataModelScriptProviderEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_script_providers.call(this, enumerator)
  end
end
struct LibWin32::IDynamicKeyProviderConcept
  def query_interface(this : IDynamicKeyProviderConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDynamicKeyProviderConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDynamicKeyProviderConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_key(this : IDynamicKeyProviderConcept*, contextobject : IModelObject, key : LibC::LPWSTR, keyvalue : IModelObject*, metadata : IKeyStore*, haskey : Bool*) : HRESULT
    @lpVtbl.value.get_key.call(this, contextobject, key, keyvalue, metadata, haskey)
  end
  def set_key(this : IDynamicKeyProviderConcept*, contextobject : IModelObject, key : LibC::LPWSTR, keyvalue : IModelObject, metadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_key.call(this, contextobject, key, keyvalue, metadata)
  end
  def enumerate_keys(this : IDynamicKeyProviderConcept*, contextobject : IModelObject, ppenumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_keys.call(this, contextobject, ppenumerator)
  end
end
struct LibWin32::IDynamicConceptProviderConcept
  def query_interface(this : IDynamicConceptProviderConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDynamicConceptProviderConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDynamicConceptProviderConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_concept(this : IDynamicConceptProviderConcept*, contextobject : IModelObject, conceptid : Guid*, conceptinterface : IUnknown*, conceptmetadata : IKeyStore*, hasconcept : Bool*) : HRESULT
    @lpVtbl.value.get_concept.call(this, contextobject, conceptid, conceptinterface, conceptmetadata, hasconcept)
  end
  def set_concept(this : IDynamicConceptProviderConcept*, contextobject : IModelObject, conceptid : Guid*, conceptinterface : IUnknown, conceptmetadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_concept.call(this, contextobject, conceptid, conceptinterface, conceptmetadata)
  end
  def notify_parent(this : IDynamicConceptProviderConcept*, parentmodel : IModelObject) : HRESULT
    @lpVtbl.value.notify_parent.call(this, parentmodel)
  end
  def notify_parent_change(this : IDynamicConceptProviderConcept*, parentmodel : IModelObject) : HRESULT
    @lpVtbl.value.notify_parent_change.call(this, parentmodel)
  end
  def notify_destruct(this : IDynamicConceptProviderConcept*) : HRESULT
    @lpVtbl.value.notify_destruct.call(this)
  end
end
struct LibWin32::IDataModelScriptHostContext
  def query_interface(this : IDataModelScriptHostContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptHostContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptHostContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_script_change(this : IDataModelScriptHostContext*, script : IDataModelScript, changekind : ScriptChangeKind) : HRESULT
    @lpVtbl.value.notify_script_change.call(this, script, changekind)
  end
  def get_namespace_object(this : IDataModelScriptHostContext*, namespaceobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_namespace_object.call(this, namespaceobject)
  end
end
struct LibWin32::IDebugHostScriptHost
  def query_interface(this : IDebugHostScriptHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostScriptHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostScriptHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_context(this : IDebugHostScriptHost*, script : IDataModelScript, scriptcontext : IDataModelScriptHostContext*) : HRESULT
    @lpVtbl.value.create_context.call(this, script, scriptcontext)
  end
end
struct LibWin32::IDataModelNameBinder
  def query_interface(this : IDataModelNameBinder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelNameBinder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelNameBinder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def bind_value(this : IDataModelNameBinder*, contextobject : IModelObject, name : LibC::LPWSTR, value : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.bind_value.call(this, contextobject, name, value, metadata)
  end
  def bind_reference(this : IDataModelNameBinder*, contextobject : IModelObject, name : LibC::LPWSTR, reference : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.bind_reference.call(this, contextobject, name, reference, metadata)
  end
  def enumerate_values(this : IDataModelNameBinder*, contextobject : IModelObject, enumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_values.call(this, contextobject, enumerator)
  end
  def enumerate_references(this : IDataModelNameBinder*, contextobject : IModelObject, enumerator : IKeyEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_references.call(this, contextobject, enumerator)
  end
end
struct LibWin32::IModelKeyReference2
  def query_interface(this : IModelKeyReference2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IModelKeyReference2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IModelKeyReference2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_key_name(this : IModelKeyReference2*, keyname : UInt8**) : HRESULT
    @lpVtbl.value.get_key_name.call(this, keyname)
  end
  def get_original_object(this : IModelKeyReference2*, originalobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_original_object.call(this, originalobject)
  end
  def get_context_object(this : IModelKeyReference2*, containingobject : IModelObject*) : HRESULT
    @lpVtbl.value.get_context_object.call(this, containingobject)
  end
  def get_key(this : IModelKeyReference2*, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key.call(this, object, metadata)
  end
  def get_key_value(this : IModelKeyReference2*, object : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_key_value.call(this, object, metadata)
  end
  def set_key(this : IModelKeyReference2*, object : IModelObject, metadata : IKeyStore) : HRESULT
    @lpVtbl.value.set_key.call(this, object, metadata)
  end
  def set_key_value(this : IModelKeyReference2*, object : IModelObject) : HRESULT
    @lpVtbl.value.set_key_value.call(this, object)
  end
  def override_context_object(this : IModelKeyReference2*, newcontextobject : IModelObject) : HRESULT
    @lpVtbl.value.override_context_object.call(this, newcontextobject)
  end
end
struct LibWin32::IDebugHostEvaluator2
  def query_interface(this : IDebugHostEvaluator2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostEvaluator2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostEvaluator2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def evaluate_expression(this : IDebugHostEvaluator2*, context : IDebugHostContext, expression : LibC::LPWSTR, bindingcontext : IModelObject, result : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.evaluate_expression.call(this, context, expression, bindingcontext, result, metadata)
  end
  def evaluate_extended_expression(this : IDebugHostEvaluator2*, context : IDebugHostContext, expression : LibC::LPWSTR, bindingcontext : IModelObject, result : IModelObject*, metadata : IKeyStore*) : HRESULT
    @lpVtbl.value.evaluate_extended_expression.call(this, context, expression, bindingcontext, result, metadata)
  end
  def assign_to(this : IDebugHostEvaluator2*, assignmentreference : IModelObject, assignmentvalue : IModelObject, assignmentresult : IModelObject*, assignmentmetadata : IKeyStore*) : HRESULT
    @lpVtbl.value.assign_to.call(this, assignmentreference, assignmentvalue, assignmentresult, assignmentmetadata)
  end
end
struct LibWin32::IDataModelManager2
  def query_interface(this : IDataModelManager2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelManager2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelManager2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def close(this : IDataModelManager2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def create_no_value(this : IDataModelManager2*, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_no_value.call(this, object)
  end
  def create_error_object(this : IDataModelManager2*, hrerror : HRESULT, pwszmessage : LibC::LPWSTR, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_error_object.call(this, hrerror, pwszmessage, object)
  end
  def create_typed_object(this : IDataModelManager2*, context : IDebugHostContext, objectlocation : Location, objecttype : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_object.call(this, context, objectlocation, objecttype, object)
  end
  def create_typed_object_reference(this : IDataModelManager2*, context : IDebugHostContext, objectlocation : Location, objecttype : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_object_reference.call(this, context, objectlocation, objecttype, object)
  end
  def create_synthetic_object(this : IDataModelManager2*, context : IDebugHostContext, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_synthetic_object.call(this, context, object)
  end
  def create_data_model_object(this : IDataModelManager2*, datamodel : IDataModelConcept, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_data_model_object.call(this, datamodel, object)
  end
  def create_intrinsic_object(this : IDataModelManager2*, objectkind : ModelObjectKind, intrinsicdata : VARIANT*, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_intrinsic_object.call(this, objectkind, intrinsicdata, object)
  end
  def create_typed_intrinsic_object(this : IDataModelManager2*, intrinsicdata : VARIANT*, type : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_intrinsic_object.call(this, intrinsicdata, type, object)
  end
  def get_model_for_type_signature(this : IDataModelManager2*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject*) : HRESULT
    @lpVtbl.value.get_model_for_type_signature.call(this, typesignature, datamodel)
  end
  def get_model_for_type(this : IDataModelManager2*, type : IDebugHostType, datamodel : IModelObject*, typesignature : IDebugHostTypeSignature*, wildcardmatches : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.get_model_for_type.call(this, type, datamodel, typesignature, wildcardmatches)
  end
  def register_model_for_type_signature(this : IDataModelManager2*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject) : HRESULT
    @lpVtbl.value.register_model_for_type_signature.call(this, typesignature, datamodel)
  end
  def unregister_model_for_type_signature(this : IDataModelManager2*, datamodel : IModelObject, typesignature : IDebugHostTypeSignature) : HRESULT
    @lpVtbl.value.unregister_model_for_type_signature.call(this, datamodel, typesignature)
  end
  def register_extension_for_type_signature(this : IDataModelManager2*, typesignature : IDebugHostTypeSignature, datamodel : IModelObject) : HRESULT
    @lpVtbl.value.register_extension_for_type_signature.call(this, typesignature, datamodel)
  end
  def unregister_extension_for_type_signature(this : IDataModelManager2*, datamodel : IModelObject, typesignature : IDebugHostTypeSignature) : HRESULT
    @lpVtbl.value.unregister_extension_for_type_signature.call(this, datamodel, typesignature)
  end
  def create_metadata_store(this : IDataModelManager2*, parentstore : IKeyStore, metadatastore : IKeyStore*) : HRESULT
    @lpVtbl.value.create_metadata_store.call(this, parentstore, metadatastore)
  end
  def get_root_namespace(this : IDataModelManager2*, rootnamespace : IModelObject*) : HRESULT
    @lpVtbl.value.get_root_namespace.call(this, rootnamespace)
  end
  def register_named_model(this : IDataModelManager2*, modelname : LibC::LPWSTR, modeobject : IModelObject) : HRESULT
    @lpVtbl.value.register_named_model.call(this, modelname, modeobject)
  end
  def unregister_named_model(this : IDataModelManager2*, modelname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.unregister_named_model.call(this, modelname)
  end
  def acquire_named_model(this : IDataModelManager2*, modelname : LibC::LPWSTR, modelobject : IModelObject*) : HRESULT
    @lpVtbl.value.acquire_named_model.call(this, modelname, modelobject)
  end
  def acquire_sub_namespace(this : IDataModelManager2*, modelname : LibC::LPWSTR, subnamespacemodelname : LibC::LPWSTR, accessname : LibC::LPWSTR, metadata : IKeyStore, namespacemodelobject : IModelObject*) : HRESULT
    @lpVtbl.value.acquire_sub_namespace.call(this, modelname, subnamespacemodelname, accessname, metadata, namespacemodelobject)
  end
  def create_typed_intrinsic_object_ex(this : IDataModelManager2*, context : IDebugHostContext, intrinsicdata : VARIANT*, type : IDebugHostType, object : IModelObject*) : HRESULT
    @lpVtbl.value.create_typed_intrinsic_object_ex.call(this, context, intrinsicdata, type, object)
  end
end
struct LibWin32::IDebugHostMemory2
  def query_interface(this : IDebugHostMemory2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostMemory2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostMemory2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_bytes(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, buffer : Void*, buffersize : UInt64, bytesread : UInt64*) : HRESULT
    @lpVtbl.value.read_bytes.call(this, context, location, buffer, buffersize, bytesread)
  end
  def write_bytes(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, buffer : Void*, buffersize : UInt64, byteswritten : UInt64*) : HRESULT
    @lpVtbl.value.write_bytes.call(this, context, location, buffer, buffersize, byteswritten)
  end
  def read_pointers(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, count : UInt64, pointers : UInt64*) : HRESULT
    @lpVtbl.value.read_pointers.call(this, context, location, count, pointers)
  end
  def write_pointers(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, count : UInt64, pointers : UInt64*) : HRESULT
    @lpVtbl.value.write_pointers.call(this, context, location, count, pointers)
  end
  def get_display_string_for_location(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, verbose : UInt8, locationname : UInt8**) : HRESULT
    @lpVtbl.value.get_display_string_for_location.call(this, context, location, verbose, locationname)
  end
  def linearize_location(this : IDebugHostMemory2*, context : IDebugHostContext, location : Location, plinearizedlocation : Location*) : HRESULT
    @lpVtbl.value.linearize_location.call(this, context, location, plinearizedlocation)
  end
end
struct LibWin32::IDebugHostExtensibility
  def query_interface(this : IDebugHostExtensibility*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostExtensibility*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostExtensibility*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_function_alias(this : IDebugHostExtensibility*, aliasname : LibC::LPWSTR, functionobject : IModelObject) : HRESULT
    @lpVtbl.value.create_function_alias.call(this, aliasname, functionobject)
  end
  def destroy_function_alias(this : IDebugHostExtensibility*, aliasname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.destroy_function_alias.call(this, aliasname)
  end
end
struct LibWin32::IDataModelScriptDebugClient
  def query_interface(this : IDataModelScriptDebugClient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugClient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugClient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_debug_event(this : IDataModelScriptDebugClient*, peventinfo : ScriptDebugEventInformation*, pscript : IDataModelScript, peventdataobject : IModelObject, resumeeventkind : ScriptExecutionKind*) : HRESULT
    @lpVtbl.value.notify_debug_event.call(this, peventinfo, pscript, peventdataobject, resumeeventkind)
  end
end
struct LibWin32::IDataModelScriptDebugVariableSetEnumerator
  def query_interface(this : IDataModelScriptDebugVariableSetEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugVariableSetEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugVariableSetEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IDataModelScriptDebugVariableSetEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IDataModelScriptDebugVariableSetEnumerator*, variablename : UInt8**, variablevalue : IModelObject*, variablemetadata : IKeyStore*) : HRESULT
    @lpVtbl.value.get_next.call(this, variablename, variablevalue, variablemetadata)
  end
end
struct LibWin32::IDataModelScriptDebugStackFrame
  def query_interface(this : IDataModelScriptDebugStackFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugStackFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugStackFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDataModelScriptDebugStackFrame*, name : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, name)
  end
  def get_position(this : IDataModelScriptDebugStackFrame*, position : ScriptDebugPosition*, positionspanend : ScriptDebugPosition*, linetext : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, position, positionspanend, linetext)
  end
  def is_transition_point(this : IDataModelScriptDebugStackFrame*, istransitionpoint : Bool*) : HRESULT
    @lpVtbl.value.is_transition_point.call(this, istransitionpoint)
  end
  def get_transition(this : IDataModelScriptDebugStackFrame*, transitionscript : IDataModelScript*, istransitioncontiguous : Bool*) : HRESULT
    @lpVtbl.value.get_transition.call(this, transitionscript, istransitioncontiguous)
  end
  def evaluate(this : IDataModelScriptDebugStackFrame*, pwszexpression : LibC::LPWSTR, ppresult : IModelObject*) : HRESULT
    @lpVtbl.value.evaluate.call(this, pwszexpression, ppresult)
  end
  def enumerate_locals(this : IDataModelScriptDebugStackFrame*, variablesenum : IDataModelScriptDebugVariableSetEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_locals.call(this, variablesenum)
  end
  def enumerate_arguments(this : IDataModelScriptDebugStackFrame*, variablesenum : IDataModelScriptDebugVariableSetEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_arguments.call(this, variablesenum)
  end
end
struct LibWin32::IDataModelScriptDebugStack
  def query_interface(this : IDataModelScriptDebugStack*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugStack*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugStack*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_frame_count(this : IDataModelScriptDebugStack*) : UInt64
    @lpVtbl.value.get_frame_count.call(this)
  end
  def get_stack_frame(this : IDataModelScriptDebugStack*, framenumber : UInt64, stackframe : IDataModelScriptDebugStackFrame*) : HRESULT
    @lpVtbl.value.get_stack_frame.call(this, framenumber, stackframe)
  end
end
struct LibWin32::IDataModelScriptDebugBreakpoint
  def query_interface(this : IDataModelScriptDebugBreakpoint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugBreakpoint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugBreakpoint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_id(this : IDataModelScriptDebugBreakpoint*) : UInt64
    @lpVtbl.value.get_id.call(this)
  end
  def is_enabled(this : IDataModelScriptDebugBreakpoint*) : Bool
    @lpVtbl.value.is_enabled.call(this)
  end
  def enable(this : IDataModelScriptDebugBreakpoint*) : Void
    @lpVtbl.value.enable.call(this)
  end
  def disable(this : IDataModelScriptDebugBreakpoint*) : Void
    @lpVtbl.value.disable.call(this)
  end
  def remove(this : IDataModelScriptDebugBreakpoint*) : Void
    @lpVtbl.value.remove.call(this)
  end
  def get_position(this : IDataModelScriptDebugBreakpoint*, position : ScriptDebugPosition*, positionspanend : ScriptDebugPosition*, linetext : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, position, positionspanend, linetext)
  end
end
struct LibWin32::IDataModelScriptDebugBreakpointEnumerator
  def query_interface(this : IDataModelScriptDebugBreakpointEnumerator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebugBreakpointEnumerator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebugBreakpointEnumerator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IDataModelScriptDebugBreakpointEnumerator*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_next(this : IDataModelScriptDebugBreakpointEnumerator*, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.get_next.call(this, breakpoint)
  end
end
struct LibWin32::IDataModelScriptDebug
  def query_interface(this : IDataModelScriptDebug*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebug*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebug*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_debug_state(this : IDataModelScriptDebug*) : ScriptDebugState
    @lpVtbl.value.get_debug_state.call(this)
  end
  def get_current_position(this : IDataModelScriptDebug*, currentposition : ScriptDebugPosition*, positionspanend : ScriptDebugPosition*, linetext : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position.call(this, currentposition, positionspanend, linetext)
  end
  def get_stack(this : IDataModelScriptDebug*, stack : IDataModelScriptDebugStack*) : HRESULT
    @lpVtbl.value.get_stack.call(this, stack)
  end
  def set_breakpoint(this : IDataModelScriptDebug*, lineposition : UInt32, columnposition : UInt32, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.set_breakpoint.call(this, lineposition, columnposition, breakpoint)
  end
  def find_breakpoint_by_id(this : IDataModelScriptDebug*, breakpointid : UInt64, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.find_breakpoint_by_id.call(this, breakpointid, breakpoint)
  end
  def enumerate_breakpoints(this : IDataModelScriptDebug*, breakpointenum : IDataModelScriptDebugBreakpointEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_breakpoints.call(this, breakpointenum)
  end
  def get_event_filter(this : IDataModelScriptDebug*, eventfilter : ScriptDebugEventFilter, isbreakenabled : Bool*) : HRESULT
    @lpVtbl.value.get_event_filter.call(this, eventfilter, isbreakenabled)
  end
  def set_event_filter(this : IDataModelScriptDebug*, eventfilter : ScriptDebugEventFilter, isbreakenabled : UInt8) : HRESULT
    @lpVtbl.value.set_event_filter.call(this, eventfilter, isbreakenabled)
  end
  def start_debugging(this : IDataModelScriptDebug*, debugclient : IDataModelScriptDebugClient) : HRESULT
    @lpVtbl.value.start_debugging.call(this, debugclient)
  end
  def stop_debugging(this : IDataModelScriptDebug*, debugclient : IDataModelScriptDebugClient) : HRESULT
    @lpVtbl.value.stop_debugging.call(this, debugclient)
  end
end
struct LibWin32::IDataModelScriptDebug2
  def query_interface(this : IDataModelScriptDebug2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDataModelScriptDebug2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDataModelScriptDebug2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_debug_state(this : IDataModelScriptDebug2*) : ScriptDebugState
    @lpVtbl.value.get_debug_state.call(this)
  end
  def get_current_position(this : IDataModelScriptDebug2*, currentposition : ScriptDebugPosition*, positionspanend : ScriptDebugPosition*, linetext : UInt8**) : HRESULT
    @lpVtbl.value.get_current_position.call(this, currentposition, positionspanend, linetext)
  end
  def get_stack(this : IDataModelScriptDebug2*, stack : IDataModelScriptDebugStack*) : HRESULT
    @lpVtbl.value.get_stack.call(this, stack)
  end
  def set_breakpoint(this : IDataModelScriptDebug2*, lineposition : UInt32, columnposition : UInt32, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.set_breakpoint.call(this, lineposition, columnposition, breakpoint)
  end
  def find_breakpoint_by_id(this : IDataModelScriptDebug2*, breakpointid : UInt64, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.find_breakpoint_by_id.call(this, breakpointid, breakpoint)
  end
  def enumerate_breakpoints(this : IDataModelScriptDebug2*, breakpointenum : IDataModelScriptDebugBreakpointEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_breakpoints.call(this, breakpointenum)
  end
  def get_event_filter(this : IDataModelScriptDebug2*, eventfilter : ScriptDebugEventFilter, isbreakenabled : Bool*) : HRESULT
    @lpVtbl.value.get_event_filter.call(this, eventfilter, isbreakenabled)
  end
  def set_event_filter(this : IDataModelScriptDebug2*, eventfilter : ScriptDebugEventFilter, isbreakenabled : UInt8) : HRESULT
    @lpVtbl.value.set_event_filter.call(this, eventfilter, isbreakenabled)
  end
  def start_debugging(this : IDataModelScriptDebug2*, debugclient : IDataModelScriptDebugClient) : HRESULT
    @lpVtbl.value.start_debugging.call(this, debugclient)
  end
  def stop_debugging(this : IDataModelScriptDebug2*, debugclient : IDataModelScriptDebugClient) : HRESULT
    @lpVtbl.value.stop_debugging.call(this, debugclient)
  end
  def set_breakpoint_at_function(this : IDataModelScriptDebug2*, functionname : LibC::LPWSTR, breakpoint : IDataModelScriptDebugBreakpoint*) : HRESULT
    @lpVtbl.value.set_breakpoint_at_function.call(this, functionname, breakpoint)
  end
end
struct LibWin32::IDebugHostModule2
  def query_interface(this : IDebugHostModule2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHostModule2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHostModule2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context(this : IDebugHostModule2*, context : IDebugHostContext*) : HRESULT
    @lpVtbl.value.get_context.call(this, context)
  end
  def enumerate_children(this : IDebugHostModule2*, kind : SymbolKind, name : LibC::LPWSTR, ppenum : IDebugHostSymbolEnumerator*) : HRESULT
    @lpVtbl.value.enumerate_children.call(this, kind, name, ppenum)
  end
  def get_symbol_kind(this : IDebugHostModule2*, kind : SymbolKind*) : HRESULT
    @lpVtbl.value.get_symbol_kind.call(this, kind)
  end
  def get_name(this : IDebugHostModule2*, symbolname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, symbolname)
  end
  def get_type(this : IDebugHostModule2*, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.get_type.call(this, type)
  end
  def get_containing_module(this : IDebugHostModule2*, containingmodule : IDebugHostModule*) : HRESULT
    @lpVtbl.value.get_containing_module.call(this, containingmodule)
  end
  def compare_against(this : IDebugHostModule2*, pcomparisonsymbol : IDebugHostSymbol, comparisonflags : UInt32, pmatches : Bool*) : HRESULT
    @lpVtbl.value.compare_against.call(this, pcomparisonsymbol, comparisonflags, pmatches)
  end
  def get_image_name(this : IDebugHostModule2*, allowpath : UInt8, imagename : UInt8**) : HRESULT
    @lpVtbl.value.get_image_name.call(this, allowpath, imagename)
  end
  def get_base_location(this : IDebugHostModule2*, modulebaselocation : Location*) : HRESULT
    @lpVtbl.value.get_base_location.call(this, modulebaselocation)
  end
  def get_version(this : IDebugHostModule2*, fileversion : UInt64*, productversion : UInt64*) : HRESULT
    @lpVtbl.value.get_version.call(this, fileversion, productversion)
  end
  def find_type_by_name(this : IDebugHostModule2*, typename : LibC::LPWSTR, type : IDebugHostType*) : HRESULT
    @lpVtbl.value.find_type_by_name.call(this, typename, type)
  end
  def find_symbol_by_rva(this : IDebugHostModule2*, rva : UInt64, symbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.find_symbol_by_rva.call(this, rva, symbol)
  end
  def find_symbol_by_name(this : IDebugHostModule2*, symbolname : LibC::LPWSTR, symbol : IDebugHostSymbol*) : HRESULT
    @lpVtbl.value.find_symbol_by_name.call(this, symbolname, symbol)
  end
  def find_containing_symbol_by_rva(this : IDebugHostModule2*, rva : UInt64, symbol : IDebugHostSymbol*, offset : UInt64*) : HRESULT
    @lpVtbl.value.find_containing_symbol_by_rva.call(this, rva, symbol, offset)
  end
end
struct LibWin32::IComparableConcept
  def query_interface(this : IComparableConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IComparableConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IComparableConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def compare_objects(this : IComparableConcept*, contextobject : IModelObject, otherobject : IModelObject, comparisonresult : Int32*) : HRESULT
    @lpVtbl.value.compare_objects.call(this, contextobject, otherobject, comparisonresult)
  end
end
struct LibWin32::IEquatableConcept
  def query_interface(this : IEquatableConcept*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEquatableConcept*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEquatableConcept*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def are_objects_equal(this : IEquatableConcept*, contextobject : IModelObject, otherobject : IModelObject, isequal : Bool*) : HRESULT
    @lpVtbl.value.are_objects_equal.call(this, contextobject, otherobject, isequal)
  end
end
struct LibWin32::IActiveScriptSite
  def query_interface(this : IActiveScriptSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_lcid(this : IActiveScriptSite*, plcid : UInt32*) : HRESULT
    @lpVtbl.value.get_lcid.call(this, plcid)
  end
  def get_item_info(this : IActiveScriptSite*, pstrname : LibC::LPWSTR, dwreturnmask : UInt32, ppiunkitem : IUnknown*, ppti : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_item_info.call(this, pstrname, dwreturnmask, ppiunkitem, ppti)
  end
  def get_doc_version_string(this : IActiveScriptSite*, pbstrversion : UInt8**) : HRESULT
    @lpVtbl.value.get_doc_version_string.call(this, pbstrversion)
  end
  def on_script_terminate(this : IActiveScriptSite*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.on_script_terminate.call(this, pvarresult, pexcepinfo)
  end
  def on_state_change(this : IActiveScriptSite*, ssscriptstate : SCRIPTSTATE) : HRESULT
    @lpVtbl.value.on_state_change.call(this, ssscriptstate)
  end
  def on_script_error(this : IActiveScriptSite*, pscripterror : IActiveScriptError) : HRESULT
    @lpVtbl.value.on_script_error.call(this, pscripterror)
  end
  def on_enter_script(this : IActiveScriptSite*) : HRESULT
    @lpVtbl.value.on_enter_script.call(this)
  end
  def on_leave_script(this : IActiveScriptSite*) : HRESULT
    @lpVtbl.value.on_leave_script.call(this)
  end
end
struct LibWin32::IActiveScriptError
  def query_interface(this : IActiveScriptError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_exception_info(this : IActiveScriptError*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.get_exception_info.call(this, pexcepinfo)
  end
  def get_source_position(this : IActiveScriptError*, pdwsourcecontext : UInt32*, pullinenumber : UInt32*, plcharacterposition : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.call(this, pdwsourcecontext, pullinenumber, plcharacterposition)
  end
  def get_source_line_text(this : IActiveScriptError*, pbstrsourceline : UInt8**) : HRESULT
    @lpVtbl.value.get_source_line_text.call(this, pbstrsourceline)
  end
end
struct LibWin32::IActiveScriptError64
  def query_interface(this : IActiveScriptError64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptError64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptError64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_exception_info(this : IActiveScriptError64*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.get_exception_info.call(this, pexcepinfo)
  end
  def get_source_position(this : IActiveScriptError64*, pdwsourcecontext : UInt32*, pullinenumber : UInt32*, plcharacterposition : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.call(this, pdwsourcecontext, pullinenumber, plcharacterposition)
  end
  def get_source_line_text(this : IActiveScriptError64*, pbstrsourceline : UInt8**) : HRESULT
    @lpVtbl.value.get_source_line_text.call(this, pbstrsourceline)
  end
  def get_source_position64(this : IActiveScriptError64*, pdwsourcecontext : UInt64*, pullinenumber : UInt32*, plcharacterposition : Int32*) : HRESULT
    @lpVtbl.value.get_source_position64.call(this, pdwsourcecontext, pullinenumber, plcharacterposition)
  end
end
struct LibWin32::IActiveScriptSiteWindow
  def query_interface(this : IActiveScriptSiteWindow*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteWindow*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteWindow*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_window(this : IActiveScriptSiteWindow*, phwnd : HANDLE*) : HRESULT
    @lpVtbl.value.get_window.call(this, phwnd)
  end
  def enable_modeless(this : IActiveScriptSiteWindow*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_modeless.call(this, fenable)
  end
end
struct LibWin32::IActiveScriptSiteUIControl
  def query_interface(this : IActiveScriptSiteUIControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteUIControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteUIControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_ui_behavior(this : IActiveScriptSiteUIControl*, uicitem : SCRIPTUICITEM, puichandling : SCRIPTUICHANDLING*) : HRESULT
    @lpVtbl.value.get_ui_behavior.call(this, uicitem, puichandling)
  end
end
struct LibWin32::IActiveScriptSiteInterruptPoll
  def query_interface(this : IActiveScriptSiteInterruptPoll*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteInterruptPoll*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteInterruptPoll*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def query_continue(this : IActiveScriptSiteInterruptPoll*) : HRESULT
    @lpVtbl.value.query_continue.call(this)
  end
end
struct LibWin32::IActiveScript
  def query_interface(this : IActiveScript*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScript*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScript*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_script_site(this : IActiveScript*, pass : IActiveScriptSite) : HRESULT
    @lpVtbl.value.set_script_site.call(this, pass)
  end
  def get_script_site(this : IActiveScript*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.get_script_site.call(this, riid, ppvobject)
  end
  def set_script_state(this : IActiveScript*, ss : SCRIPTSTATE) : HRESULT
    @lpVtbl.value.set_script_state.call(this, ss)
  end
  def get_script_state(this : IActiveScript*, pssstate : SCRIPTSTATE*) : HRESULT
    @lpVtbl.value.get_script_state.call(this, pssstate)
  end
  def close(this : IActiveScript*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def add_named_item(this : IActiveScript*, pstrname : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_named_item.call(this, pstrname, dwflags)
  end
  def add_type_lib(this : IActiveScript*, rguidtypelib : Guid*, dwmajor : UInt32, dwminor : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_type_lib.call(this, rguidtypelib, dwmajor, dwminor, dwflags)
  end
  def get_script_dispatch(this : IActiveScript*, pstritemname : LibC::LPWSTR, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.get_script_dispatch.call(this, pstritemname, ppdisp)
  end
  def get_current_script_thread_id(this : IActiveScript*, pstidthread : UInt32*) : HRESULT
    @lpVtbl.value.get_current_script_thread_id.call(this, pstidthread)
  end
  def get_script_thread_id(this : IActiveScript*, dwwin32threadid : UInt32, pstidthread : UInt32*) : HRESULT
    @lpVtbl.value.get_script_thread_id.call(this, dwwin32threadid, pstidthread)
  end
  def get_script_thread_state(this : IActiveScript*, stidthread : UInt32, pstsstate : SCRIPTTHREADSTATE*) : HRESULT
    @lpVtbl.value.get_script_thread_state.call(this, stidthread, pstsstate)
  end
  def interrupt_script_thread(this : IActiveScript*, stidthread : UInt32, pexcepinfo : EXCEPINFO*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.interrupt_script_thread.call(this, stidthread, pexcepinfo, dwflags)
  end
  def clone(this : IActiveScript*, ppscript : IActiveScript*) : HRESULT
    @lpVtbl.value.clone.call(this, ppscript)
  end
end
struct LibWin32::IActiveScriptParse32
  def query_interface(this : IActiveScriptParse32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParse32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParse32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init_new(this : IActiveScriptParse32*) : HRESULT
    @lpVtbl.value.init_new.call(this)
  end
  def add_scriptlet(this : IActiveScriptParse32*, pstrdefaultname : LibC::LPWSTR, pstrcode : LibC::LPWSTR, pstritemname : LibC::LPWSTR, pstrsubitemname : LibC::LPWSTR, pstreventname : LibC::LPWSTR, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt32, ulstartinglinenumber : UInt32, dwflags : UInt32, pbstrname : UInt8**, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.add_scriptlet.call(this, pstrdefaultname, pstrcode, pstritemname, pstrsubitemname, pstreventname, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, pbstrname, pexcepinfo)
  end
  def parse_script_text(this : IActiveScriptParse32*, pstrcode : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt32, ulstartinglinenumber : UInt32, dwflags : UInt32, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.parse_script_text.call(this, pstrcode, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, pvarresult, pexcepinfo)
  end
end
struct LibWin32::IActiveScriptParse64
  def query_interface(this : IActiveScriptParse64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParse64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParse64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init_new(this : IActiveScriptParse64*) : HRESULT
    @lpVtbl.value.init_new.call(this)
  end
  def add_scriptlet(this : IActiveScriptParse64*, pstrdefaultname : LibC::LPWSTR, pstrcode : LibC::LPWSTR, pstritemname : LibC::LPWSTR, pstrsubitemname : LibC::LPWSTR, pstreventname : LibC::LPWSTR, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt64, ulstartinglinenumber : UInt32, dwflags : UInt32, pbstrname : UInt8**, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.add_scriptlet.call(this, pstrdefaultname, pstrcode, pstritemname, pstrsubitemname, pstreventname, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, pbstrname, pexcepinfo)
  end
  def parse_script_text(this : IActiveScriptParse64*, pstrcode : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt64, ulstartinglinenumber : UInt32, dwflags : UInt32, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.parse_script_text.call(this, pstrcode, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, pvarresult, pexcepinfo)
  end
end
struct LibWin32::IActiveScriptParseProcedureOld32
  def query_interface(this : IActiveScriptParseProcedureOld32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedureOld32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedureOld32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedureOld32*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt32, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptParseProcedureOld64
  def query_interface(this : IActiveScriptParseProcedureOld64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedureOld64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedureOld64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedureOld64*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt64, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptParseProcedure32
  def query_interface(this : IActiveScriptParseProcedure32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedure32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedure32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedure32*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstrprocedurename : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt32, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstrprocedurename, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptParseProcedure64
  def query_interface(this : IActiveScriptParseProcedure64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedure64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedure64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedure64*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstrprocedurename : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt64, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstrprocedurename, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptParseProcedure2_32
  def query_interface(this : IActiveScriptParseProcedure2_32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedure2_32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedure2_32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedure2_32*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstrprocedurename : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt32, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstrprocedurename, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptParseProcedure2_64
  def query_interface(this : IActiveScriptParseProcedure2_64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptParseProcedure2_64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptParseProcedure2_64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptParseProcedure2_64*, pstrcode : LibC::LPWSTR, pstrformalparams : LibC::LPWSTR, pstrprocedurename : LibC::LPWSTR, pstritemname : LibC::LPWSTR, punkcontext : IUnknown, pstrdelimiter : LibC::LPWSTR, dwsourcecontextcookie : UInt64, ulstartinglinenumber : UInt32, dwflags : UInt32, ppdisp : IDispatch*) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pstrcode, pstrformalparams, pstrprocedurename, pstritemname, punkcontext, pstrdelimiter, dwsourcecontextcookie, ulstartinglinenumber, dwflags, ppdisp)
  end
end
struct LibWin32::IActiveScriptEncode
  def query_interface(this : IActiveScriptEncode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptEncode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptEncode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def encode_section(this : IActiveScriptEncode*, pchin : LibC::LPWSTR, cchin : UInt32, pchout : LibC::LPWSTR, cchout : UInt32, pcchret : UInt32*) : HRESULT
    @lpVtbl.value.encode_section.call(this, pchin, cchin, pchout, cchout, pcchret)
  end
  def decode_script(this : IActiveScriptEncode*, pchin : LibC::LPWSTR, cchin : UInt32, pchout : LibC::LPWSTR, cchout : UInt32, pcchret : UInt32*) : HRESULT
    @lpVtbl.value.decode_script.call(this, pchin, cchin, pchout, cchout, pcchret)
  end
  def get_encode_prog_id(this : IActiveScriptEncode*, pbstrout : UInt8**) : HRESULT
    @lpVtbl.value.get_encode_prog_id.call(this, pbstrout)
  end
end
struct LibWin32::IActiveScriptHostEncode
  def query_interface(this : IActiveScriptHostEncode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptHostEncode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptHostEncode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def encode_script_host_file(this : IActiveScriptHostEncode*, bstrinfile : UInt8*, pbstroutfile : UInt8**, cflags : UInt32, bstrdefaultlang : UInt8*) : HRESULT
    @lpVtbl.value.encode_script_host_file.call(this, bstrinfile, pbstroutfile, cflags, bstrdefaultlang)
  end
end
struct LibWin32::IBindEventHandler
  def query_interface(this : IBindEventHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBindEventHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBindEventHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def bind_handler(this : IBindEventHandler*, pstrevent : LibC::LPWSTR, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.bind_handler.call(this, pstrevent, pdisp)
  end
end
struct LibWin32::IActiveScriptStats
  def query_interface(this : IActiveScriptStats*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptStats*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptStats*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stat(this : IActiveScriptStats*, stid : UInt32, pluhi : UInt32*, plulo : UInt32*) : HRESULT
    @lpVtbl.value.get_stat.call(this, stid, pluhi, plulo)
  end
  def get_stat_ex(this : IActiveScriptStats*, guid : Guid*, pluhi : UInt32*, plulo : UInt32*) : HRESULT
    @lpVtbl.value.get_stat_ex.call(this, guid, pluhi, plulo)
  end
  def reset_stats(this : IActiveScriptStats*) : HRESULT
    @lpVtbl.value.reset_stats.call(this)
  end
end
struct LibWin32::IActiveScriptProperty
  def query_interface(this : IActiveScriptProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_property(this : IActiveScriptProperty*, dwproperty : UInt32, pvarindex : VARIANT*, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_property.call(this, dwproperty, pvarindex, pvarvalue)
  end
  def set_property(this : IActiveScriptProperty*, dwproperty : UInt32, pvarindex : VARIANT*, pvarvalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_property.call(this, dwproperty, pvarindex, pvarvalue)
  end
end
struct LibWin32::ITridentEventSink
  def query_interface(this : ITridentEventSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITridentEventSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITridentEventSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def fire_event(this : ITridentEventSink*, pstrevent : LibC::LPWSTR, pdp : DISPPARAMS*, pvarres : VARIANT*, pei : EXCEPINFO*) : HRESULT
    @lpVtbl.value.fire_event.call(this, pstrevent, pdp, pvarres, pei)
  end
end
struct LibWin32::IActiveScriptGarbageCollector
  def query_interface(this : IActiveScriptGarbageCollector*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptGarbageCollector*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptGarbageCollector*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def collect_garbage(this : IActiveScriptGarbageCollector*, scriptgctype : SCRIPTGCTYPE) : HRESULT
    @lpVtbl.value.collect_garbage.call(this, scriptgctype)
  end
end
struct LibWin32::IActiveScriptSIPInfo
  def query_interface(this : IActiveScriptSIPInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSIPInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSIPInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_sipoid(this : IActiveScriptSIPInfo*, poid_sip : Guid*) : HRESULT
    @lpVtbl.value.get_sipoid.call(this, poid_sip)
  end
end
struct LibWin32::IActiveScriptSiteTraceInfo
  def query_interface(this : IActiveScriptSiteTraceInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteTraceInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteTraceInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def send_script_trace_info(this : IActiveScriptSiteTraceInfo*, stieventtype : SCRIPTTRACEINFO, guidcontextid : Guid, dwscriptcontextcookie : UInt32, lscriptstatementstart : Int32, lscriptstatementend : Int32, dwreserved : UInt64) : HRESULT
    @lpVtbl.value.send_script_trace_info.call(this, stieventtype, guidcontextid, dwscriptcontextcookie, lscriptstatementstart, lscriptstatementend, dwreserved)
  end
end
struct LibWin32::IActiveScriptTraceInfo
  def query_interface(this : IActiveScriptTraceInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptTraceInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptTraceInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_script_tracing(this : IActiveScriptTraceInfo*, psitetraceinfo : IActiveScriptSiteTraceInfo, guidcontextid : Guid) : HRESULT
    @lpVtbl.value.start_script_tracing.call(this, psitetraceinfo, guidcontextid)
  end
  def stop_script_tracing(this : IActiveScriptTraceInfo*) : HRESULT
    @lpVtbl.value.stop_script_tracing.call(this)
  end
end
struct LibWin32::IActiveScriptStringCompare
  def query_interface(this : IActiveScriptStringCompare*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptStringCompare*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptStringCompare*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def str_comp(this : IActiveScriptStringCompare*, bszstr1 : UInt8*, bszstr2 : UInt8*, iret : Int32*) : HRESULT
    @lpVtbl.value.str_comp.call(this, bszstr1, bszstr2, iret)
  end
end
struct LibWin32::IDebugProperty
  def query_interface(this : IDebugProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_property_info(this : IDebugProperty*, dwfieldspec : UInt32, nradix : UInt32, ppropertyinfo : DebugPropertyInfo*) : HRESULT
    @lpVtbl.value.get_property_info.call(this, dwfieldspec, nradix, ppropertyinfo)
  end
  def get_extended_info(this : IDebugProperty*, cinfos : UInt32, rgguidextendedinfo : Guid*, rgvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_extended_info.call(this, cinfos, rgguidextendedinfo, rgvar)
  end
  def set_value_as_string(this : IDebugProperty*, pszvalue : LibC::LPWSTR, nradix : UInt32) : HRESULT
    @lpVtbl.value.set_value_as_string.call(this, pszvalue, nradix)
  end
  def enum_members(this : IDebugProperty*, dwfieldspec : UInt32, nradix : UInt32, refiid : Guid*, ppepi : IEnumDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.enum_members.call(this, dwfieldspec, nradix, refiid, ppepi)
  end
  def get_parent(this : IDebugProperty*, ppdebugprop : IDebugProperty*) : HRESULT
    @lpVtbl.value.get_parent.call(this, ppdebugprop)
  end
end
struct LibWin32::IEnumDebugPropertyInfo
  def query_interface(this : IEnumDebugPropertyInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugPropertyInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugPropertyInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugPropertyInfo*, celt : UInt32, pi : DebugPropertyInfo*, pceltsfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, pi, pceltsfetched)
  end
  def skip(this : IEnumDebugPropertyInfo*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugPropertyInfo*, ppepi : IEnumDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.clone.call(this, ppepi)
  end
  def get_count(this : IEnumDebugPropertyInfo*, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcelt)
  end
end
struct LibWin32::IDebugExtendedProperty
  def query_interface(this : IDebugExtendedProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugExtendedProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugExtendedProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_property_info(this : IDebugExtendedProperty*, dwfieldspec : UInt32, nradix : UInt32, ppropertyinfo : DebugPropertyInfo*) : HRESULT
    @lpVtbl.value.get_property_info.call(this, dwfieldspec, nradix, ppropertyinfo)
  end
  def get_extended_info(this : IDebugExtendedProperty*, cinfos : UInt32, rgguidextendedinfo : Guid*, rgvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_extended_info.call(this, cinfos, rgguidextendedinfo, rgvar)
  end
  def set_value_as_string(this : IDebugExtendedProperty*, pszvalue : LibC::LPWSTR, nradix : UInt32) : HRESULT
    @lpVtbl.value.set_value_as_string.call(this, pszvalue, nradix)
  end
  def enum_members(this : IDebugExtendedProperty*, dwfieldspec : UInt32, nradix : UInt32, refiid : Guid*, ppepi : IEnumDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.enum_members.call(this, dwfieldspec, nradix, refiid, ppepi)
  end
  def get_parent(this : IDebugExtendedProperty*, ppdebugprop : IDebugProperty*) : HRESULT
    @lpVtbl.value.get_parent.call(this, ppdebugprop)
  end
  def get_extended_property_info(this : IDebugExtendedProperty*, dwfieldspec : UInt32, nradix : UInt32, pextendedpropertyinfo : ExtendedDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.get_extended_property_info.call(this, dwfieldspec, nradix, pextendedpropertyinfo)
  end
  def enum_extended_members(this : IDebugExtendedProperty*, dwfieldspec : UInt32, nradix : UInt32, ppeepi : IEnumDebugExtendedPropertyInfo*) : HRESULT
    @lpVtbl.value.enum_extended_members.call(this, dwfieldspec, nradix, ppeepi)
  end
end
struct LibWin32::IEnumDebugExtendedPropertyInfo
  def query_interface(this : IEnumDebugExtendedPropertyInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugExtendedPropertyInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugExtendedPropertyInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugExtendedPropertyInfo*, celt : UInt32, rgextendedpropertyinfo : ExtendedDebugPropertyInfo*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgextendedpropertyinfo, pceltfetched)
  end
  def skip(this : IEnumDebugExtendedPropertyInfo*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugExtendedPropertyInfo*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugExtendedPropertyInfo*, pedpe : IEnumDebugExtendedPropertyInfo*) : HRESULT
    @lpVtbl.value.clone.call(this, pedpe)
  end
  def get_count(this : IEnumDebugExtendedPropertyInfo*, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcelt)
  end
end
struct LibWin32::IPerPropertyBrowsing2
  def query_interface(this : IPerPropertyBrowsing2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPerPropertyBrowsing2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPerPropertyBrowsing2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_display_string(this : IPerPropertyBrowsing2*, dispid : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_display_string.call(this, dispid, pbstr)
  end
  def map_property_to_page(this : IPerPropertyBrowsing2*, dispid : Int32, pclsidproppage : Guid*) : HRESULT
    @lpVtbl.value.map_property_to_page.call(this, dispid, pclsidproppage)
  end
  def get_predefined_strings(this : IPerPropertyBrowsing2*, dispid : Int32, pcastrings : CALPOLESTR*, pcacookies : CADWORD*) : HRESULT
    @lpVtbl.value.get_predefined_strings.call(this, dispid, pcastrings, pcacookies)
  end
  def set_predefined_value(this : IPerPropertyBrowsing2*, dispid : Int32, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.set_predefined_value.call(this, dispid, dwcookie)
  end
end
struct LibWin32::IDebugPropertyEnumType_All
  def query_interface(this : IDebugPropertyEnumType_All*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPropertyEnumType_All*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPropertyEnumType_All*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugPropertyEnumType_All*, midl__idebugpropertyenumtype_all0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, midl__idebugpropertyenumtype_all0000)
  end
end
struct LibWin32::IDebugPropertyEnumType_Locals
  def query_interface(this : IDebugPropertyEnumType_Locals*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPropertyEnumType_Locals*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPropertyEnumType_Locals*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugPropertyEnumType_Locals*, midl__idebugpropertyenumtype_all0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, midl__idebugpropertyenumtype_all0000)
  end
end
struct LibWin32::IDebugPropertyEnumType_Arguments
  def query_interface(this : IDebugPropertyEnumType_Arguments*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPropertyEnumType_Arguments*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPropertyEnumType_Arguments*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugPropertyEnumType_Arguments*, midl__idebugpropertyenumtype_all0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, midl__idebugpropertyenumtype_all0000)
  end
end
struct LibWin32::IDebugPropertyEnumType_LocalsPlusArgs
  def query_interface(this : IDebugPropertyEnumType_LocalsPlusArgs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPropertyEnumType_LocalsPlusArgs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPropertyEnumType_LocalsPlusArgs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugPropertyEnumType_LocalsPlusArgs*, midl__idebugpropertyenumtype_all0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, midl__idebugpropertyenumtype_all0000)
  end
end
struct LibWin32::IDebugPropertyEnumType_Registers
  def query_interface(this : IDebugPropertyEnumType_Registers*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugPropertyEnumType_Registers*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugPropertyEnumType_Registers*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugPropertyEnumType_Registers*, midl__idebugpropertyenumtype_all0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, midl__idebugpropertyenumtype_all0000)
  end
end
struct LibWin32::IActiveScriptDebug32
  def query_interface(this : IActiveScriptDebug32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptDebug32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptDebug32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_script_text_attributes(this : IActiveScriptDebug32*, pstrcode : Char*, unumcodechars : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_script_text_attributes.call(this, pstrcode, unumcodechars, pstrdelimiter, dwflags, pattr)
  end
  def get_scriptlet_text_attributes(this : IActiveScriptDebug32*, pstrcode : Char*, unumcodechars : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_scriptlet_text_attributes.call(this, pstrcode, unumcodechars, pstrdelimiter, dwflags, pattr)
  end
  def enum_code_contexts_of_position(this : IActiveScriptDebug32*, dwsourcecontext : UInt32, ucharacteroffset : UInt32, unumchars : UInt32, ppescc : IEnumDebugCodeContexts*) : HRESULT
    @lpVtbl.value.enum_code_contexts_of_position.call(this, dwsourcecontext, ucharacteroffset, unumchars, ppescc)
  end
end
struct LibWin32::IActiveScriptDebug64
  def query_interface(this : IActiveScriptDebug64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptDebug64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptDebug64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_script_text_attributes(this : IActiveScriptDebug64*, pstrcode : Char*, unumcodechars : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_script_text_attributes.call(this, pstrcode, unumcodechars, pstrdelimiter, dwflags, pattr)
  end
  def get_scriptlet_text_attributes(this : IActiveScriptDebug64*, pstrcode : Char*, unumcodechars : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_scriptlet_text_attributes.call(this, pstrcode, unumcodechars, pstrdelimiter, dwflags, pattr)
  end
  def enum_code_contexts_of_position(this : IActiveScriptDebug64*, dwsourcecontext : UInt64, ucharacteroffset : UInt32, unumchars : UInt32, ppescc : IEnumDebugCodeContexts*) : HRESULT
    @lpVtbl.value.enum_code_contexts_of_position.call(this, dwsourcecontext, ucharacteroffset, unumchars, ppescc)
  end
end
struct LibWin32::IActiveScriptSiteDebug32
  def query_interface(this : IActiveScriptSiteDebug32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteDebug32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteDebug32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_document_context_from_position(this : IActiveScriptSiteDebug32*, dwsourcecontext : UInt32, ucharacteroffset : UInt32, unumchars : UInt32, ppsc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_document_context_from_position.call(this, dwsourcecontext, ucharacteroffset, unumchars, ppsc)
  end
  def get_application(this : IActiveScriptSiteDebug32*, ppda : IDebugApplication32*) : HRESULT
    @lpVtbl.value.get_application.call(this, ppda)
  end
  def get_root_application_node(this : IActiveScriptSiteDebug32*, ppdanroot : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_root_application_node.call(this, ppdanroot)
  end
  def on_script_error_debug(this : IActiveScriptSiteDebug32*, perrordebug : IActiveScriptErrorDebug, pfenterdebugger : LibC::BOOL*, pfcallonscripterrorwhencontinuing : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_script_error_debug.call(this, perrordebug, pfenterdebugger, pfcallonscripterrorwhencontinuing)
  end
end
struct LibWin32::IActiveScriptSiteDebug64
  def query_interface(this : IActiveScriptSiteDebug64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteDebug64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteDebug64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_document_context_from_position(this : IActiveScriptSiteDebug64*, dwsourcecontext : UInt64, ucharacteroffset : UInt32, unumchars : UInt32, ppsc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_document_context_from_position.call(this, dwsourcecontext, ucharacteroffset, unumchars, ppsc)
  end
  def get_application(this : IActiveScriptSiteDebug64*, ppda : IDebugApplication64*) : HRESULT
    @lpVtbl.value.get_application.call(this, ppda)
  end
  def get_root_application_node(this : IActiveScriptSiteDebug64*, ppdanroot : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_root_application_node.call(this, ppdanroot)
  end
  def on_script_error_debug(this : IActiveScriptSiteDebug64*, perrordebug : IActiveScriptErrorDebug, pfenterdebugger : LibC::BOOL*, pfcallonscripterrorwhencontinuing : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_script_error_debug.call(this, perrordebug, pfenterdebugger, pfcallonscripterrorwhencontinuing)
  end
end
struct LibWin32::IActiveScriptSiteDebugEx
  def query_interface(this : IActiveScriptSiteDebugEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptSiteDebugEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptSiteDebugEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_can_not_jit_script_error_debug(this : IActiveScriptSiteDebugEx*, perrordebug : IActiveScriptErrorDebug, pfcallonscripterrorwhencontinuing : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_can_not_jit_script_error_debug.call(this, perrordebug, pfcallonscripterrorwhencontinuing)
  end
end
struct LibWin32::IActiveScriptErrorDebug
  def query_interface(this : IActiveScriptErrorDebug*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptErrorDebug*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptErrorDebug*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_exception_info(this : IActiveScriptErrorDebug*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.get_exception_info.call(this, pexcepinfo)
  end
  def get_source_position(this : IActiveScriptErrorDebug*, pdwsourcecontext : UInt32*, pullinenumber : UInt32*, plcharacterposition : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.call(this, pdwsourcecontext, pullinenumber, plcharacterposition)
  end
  def get_source_line_text(this : IActiveScriptErrorDebug*, pbstrsourceline : UInt8**) : HRESULT
    @lpVtbl.value.get_source_line_text.call(this, pbstrsourceline)
  end
  def get_document_context(this : IActiveScriptErrorDebug*, ppssc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_document_context.call(this, ppssc)
  end
  def get_stack_frame(this : IActiveScriptErrorDebug*, ppdsf : IDebugStackFrame*) : HRESULT
    @lpVtbl.value.get_stack_frame.call(this, ppdsf)
  end
end
struct LibWin32::IDebugCodeContext
  def query_interface(this : IDebugCodeContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugCodeContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugCodeContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_document_context(this : IDebugCodeContext*, ppsc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_document_context.call(this, ppsc)
  end
  def set_break_point(this : IDebugCodeContext*, bps : BREAKPOINT_STATE) : HRESULT
    @lpVtbl.value.set_break_point.call(this, bps)
  end
end
struct LibWin32::IDebugExpression
  def query_interface(this : IDebugExpression*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugExpression*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugExpression*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start(this : IDebugExpression*, pdecb : IDebugExpressionCallBack) : HRESULT
    @lpVtbl.value.start.call(this, pdecb)
  end
  def abort(this : IDebugExpression*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
  def query_is_complete(this : IDebugExpression*) : HRESULT
    @lpVtbl.value.query_is_complete.call(this)
  end
  def get_result_as_string(this : IDebugExpression*, phrresult : HRESULT*, pbstrresult : UInt8**) : HRESULT
    @lpVtbl.value.get_result_as_string.call(this, phrresult, pbstrresult)
  end
  def get_result_as_debug_property(this : IDebugExpression*, phrresult : HRESULT*, ppdp : IDebugProperty*) : HRESULT
    @lpVtbl.value.get_result_as_debug_property.call(this, phrresult, ppdp)
  end
end
struct LibWin32::IDebugExpressionContext
  def query_interface(this : IDebugExpressionContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugExpressionContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugExpressionContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_language_text(this : IDebugExpressionContext*, pstrcode : LibC::LPWSTR, nradix : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, ppe : IDebugExpression*) : HRESULT
    @lpVtbl.value.parse_language_text.call(this, pstrcode, nradix, pstrdelimiter, dwflags, ppe)
  end
  def get_language_info(this : IDebugExpressionContext*, pbstrlanguagename : UInt8**, planguageid : Guid*) : HRESULT
    @lpVtbl.value.get_language_info.call(this, pbstrlanguagename, planguageid)
  end
end
struct LibWin32::IDebugExpressionCallBack
  def query_interface(this : IDebugExpressionCallBack*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugExpressionCallBack*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugExpressionCallBack*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_complete(this : IDebugExpressionCallBack*) : HRESULT
    @lpVtbl.value.on_complete.call(this)
  end
end
struct LibWin32::IDebugStackFrame
  def query_interface(this : IDebugStackFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugStackFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugStackFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_code_context(this : IDebugStackFrame*, ppcc : IDebugCodeContext*) : HRESULT
    @lpVtbl.value.get_code_context.call(this, ppcc)
  end
  def get_description_string(this : IDebugStackFrame*, flong : LibC::BOOL, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description_string.call(this, flong, pbstrdescription)
  end
  def get_language_string(this : IDebugStackFrame*, flong : LibC::BOOL, pbstrlanguage : UInt8**) : HRESULT
    @lpVtbl.value.get_language_string.call(this, flong, pbstrlanguage)
  end
  def get_thread(this : IDebugStackFrame*, ppat : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_thread.call(this, ppat)
  end
  def get_debug_property(this : IDebugStackFrame*, ppdebugprop : IDebugProperty*) : HRESULT
    @lpVtbl.value.get_debug_property.call(this, ppdebugprop)
  end
end
struct LibWin32::IDebugStackFrameSniffer
  def query_interface(this : IDebugStackFrameSniffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugStackFrameSniffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugStackFrameSniffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_stack_frames(this : IDebugStackFrameSniffer*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
end
struct LibWin32::IDebugStackFrameSnifferEx32
  def query_interface(this : IDebugStackFrameSnifferEx32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugStackFrameSnifferEx32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugStackFrameSnifferEx32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_stack_frames(this : IDebugStackFrameSnifferEx32*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
  def enum_stack_frames_ex32(this : IDebugStackFrameSnifferEx32*, dwspmin : UInt32, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames_ex32.call(this, dwspmin, ppedsf)
  end
end
struct LibWin32::IDebugStackFrameSnifferEx64
  def query_interface(this : IDebugStackFrameSnifferEx64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugStackFrameSnifferEx64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugStackFrameSnifferEx64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_stack_frames(this : IDebugStackFrameSnifferEx64*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
  def enum_stack_frames_ex64(this : IDebugStackFrameSnifferEx64*, dwspmin : UInt64, ppedsf : IEnumDebugStackFrames64*) : HRESULT
    @lpVtbl.value.enum_stack_frames_ex64.call(this, dwspmin, ppedsf)
  end
end
struct LibWin32::IDebugSyncOperation
  def query_interface(this : IDebugSyncOperation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSyncOperation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSyncOperation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_target_thread(this : IDebugSyncOperation*, ppattarget : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_target_thread.call(this, ppattarget)
  end
  def execute(this : IDebugSyncOperation*, ppunkresult : IUnknown*) : HRESULT
    @lpVtbl.value.execute.call(this, ppunkresult)
  end
  def in_progress_abort(this : IDebugSyncOperation*) : HRESULT
    @lpVtbl.value.in_progress_abort.call(this)
  end
end
struct LibWin32::IDebugAsyncOperation
  def query_interface(this : IDebugAsyncOperation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAsyncOperation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAsyncOperation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_sync_debug_operation(this : IDebugAsyncOperation*, ppsdo : IDebugSyncOperation*) : HRESULT
    @lpVtbl.value.get_sync_debug_operation.call(this, ppsdo)
  end
  def start(this : IDebugAsyncOperation*, padocb : IDebugAsyncOperationCallBack) : HRESULT
    @lpVtbl.value.start.call(this, padocb)
  end
  def abort(this : IDebugAsyncOperation*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
  def query_is_complete(this : IDebugAsyncOperation*) : HRESULT
    @lpVtbl.value.query_is_complete.call(this)
  end
  def get_result(this : IDebugAsyncOperation*, phrresult : HRESULT*, ppunkresult : IUnknown*) : HRESULT
    @lpVtbl.value.get_result.call(this, phrresult, ppunkresult)
  end
end
struct LibWin32::IDebugAsyncOperationCallBack
  def query_interface(this : IDebugAsyncOperationCallBack*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugAsyncOperationCallBack*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugAsyncOperationCallBack*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_complete(this : IDebugAsyncOperationCallBack*) : HRESULT
    @lpVtbl.value.on_complete.call(this)
  end
end
struct LibWin32::IEnumDebugCodeContexts
  def query_interface(this : IEnumDebugCodeContexts*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugCodeContexts*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugCodeContexts*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugCodeContexts*, celt : UInt32, pscc : IDebugCodeContext*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, pscc, pceltfetched)
  end
  def skip(this : IEnumDebugCodeContexts*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugCodeContexts*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugCodeContexts*, ppescc : IEnumDebugCodeContexts*) : HRESULT
    @lpVtbl.value.clone.call(this, ppescc)
  end
end
struct LibWin32::IEnumDebugStackFrames
  def query_interface(this : IEnumDebugStackFrames*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugStackFrames*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugStackFrames*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugStackFrames*, celt : UInt32, prgdsfd : DebugStackFrameDescriptor*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, prgdsfd, pceltfetched)
  end
  def skip(this : IEnumDebugStackFrames*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugStackFrames*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.clone.call(this, ppedsf)
  end
end
struct LibWin32::IEnumDebugStackFrames64
  def query_interface(this : IEnumDebugStackFrames64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugStackFrames64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugStackFrames64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugStackFrames64*, celt : UInt32, prgdsfd : DebugStackFrameDescriptor*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, prgdsfd, pceltfetched)
  end
  def skip(this : IEnumDebugStackFrames64*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugStackFrames64*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugStackFrames64*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.clone.call(this, ppedsf)
  end
  def next64(this : IEnumDebugStackFrames64*, celt : UInt32, prgdsfd : DebugStackFrameDescriptor64*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next64.call(this, celt, prgdsfd, pceltfetched)
  end
end
struct LibWin32::IDebugDocumentInfo
  def query_interface(this : IDebugDocumentInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugDocumentInfo*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugDocumentInfo*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
end
struct LibWin32::IDebugDocumentProvider
  def query_interface(this : IDebugDocumentProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugDocumentProvider*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugDocumentProvider*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
  def get_document(this : IDebugDocumentProvider*, ppssd : IDebugDocument*) : HRESULT
    @lpVtbl.value.get_document.call(this, ppssd)
  end
end
struct LibWin32::IDebugDocument
  def query_interface(this : IDebugDocument*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocument*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocument*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugDocument*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugDocument*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
end
struct LibWin32::IDebugDocumentText
  def query_interface(this : IDebugDocumentText*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentText*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentText*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugDocumentText*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugDocumentText*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
  def get_document_attributes(this : IDebugDocumentText*, ptextdocattr : UInt32*) : HRESULT
    @lpVtbl.value.get_document_attributes.call(this, ptextdocattr)
  end
  def get_size(this : IDebugDocumentText*, pcnumlines : UInt32*, pcnumchars : UInt32*) : HRESULT
    @lpVtbl.value.get_size.call(this, pcnumlines, pcnumchars)
  end
  def get_position_of_line(this : IDebugDocumentText*, clinenumber : UInt32, pccharacterposition : UInt32*) : HRESULT
    @lpVtbl.value.get_position_of_line.call(this, clinenumber, pccharacterposition)
  end
  def get_line_of_position(this : IDebugDocumentText*, ccharacterposition : UInt32, pclinenumber : UInt32*, pccharacteroffsetinline : UInt32*) : HRESULT
    @lpVtbl.value.get_line_of_position.call(this, ccharacterposition, pclinenumber, pccharacteroffsetinline)
  end
  def get_text(this : IDebugDocumentText*, ccharacterposition : UInt32, pchartext : Char*, pstatextattr : UInt16*, pcnumchars : UInt32*, cmaxchars : UInt32) : HRESULT
    @lpVtbl.value.get_text.call(this, ccharacterposition, pchartext, pstatextattr, pcnumchars, cmaxchars)
  end
  def get_position_of_context(this : IDebugDocumentText*, psc : IDebugDocumentContext, pccharacterposition : UInt32*, cnumchars : UInt32*) : HRESULT
    @lpVtbl.value.get_position_of_context.call(this, psc, pccharacterposition, cnumchars)
  end
  def get_context_of_position(this : IDebugDocumentText*, ccharacterposition : UInt32, cnumchars : UInt32, ppsc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_context_of_position.call(this, ccharacterposition, cnumchars, ppsc)
  end
end
struct LibWin32::IDebugDocumentTextEvents
  def query_interface(this : IDebugDocumentTextEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentTextEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentTextEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_destroy(this : IDebugDocumentTextEvents*) : HRESULT
    @lpVtbl.value.on_destroy.call(this)
  end
  def on_insert_text(this : IDebugDocumentTextEvents*, ccharacterposition : UInt32, cnumtoinsert : UInt32) : HRESULT
    @lpVtbl.value.on_insert_text.call(this, ccharacterposition, cnumtoinsert)
  end
  def on_remove_text(this : IDebugDocumentTextEvents*, ccharacterposition : UInt32, cnumtoremove : UInt32) : HRESULT
    @lpVtbl.value.on_remove_text.call(this, ccharacterposition, cnumtoremove)
  end
  def on_replace_text(this : IDebugDocumentTextEvents*, ccharacterposition : UInt32, cnumtoreplace : UInt32) : HRESULT
    @lpVtbl.value.on_replace_text.call(this, ccharacterposition, cnumtoreplace)
  end
  def on_update_text_attributes(this : IDebugDocumentTextEvents*, ccharacterposition : UInt32, cnumtoupdate : UInt32) : HRESULT
    @lpVtbl.value.on_update_text_attributes.call(this, ccharacterposition, cnumtoupdate)
  end
  def on_update_document_attributes(this : IDebugDocumentTextEvents*, textdocattr : UInt32) : HRESULT
    @lpVtbl.value.on_update_document_attributes.call(this, textdocattr)
  end
end
struct LibWin32::IDebugDocumentTextAuthor
  def query_interface(this : IDebugDocumentTextAuthor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentTextAuthor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentTextAuthor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugDocumentTextAuthor*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugDocumentTextAuthor*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
  def get_document_attributes(this : IDebugDocumentTextAuthor*, ptextdocattr : UInt32*) : HRESULT
    @lpVtbl.value.get_document_attributes.call(this, ptextdocattr)
  end
  def get_size(this : IDebugDocumentTextAuthor*, pcnumlines : UInt32*, pcnumchars : UInt32*) : HRESULT
    @lpVtbl.value.get_size.call(this, pcnumlines, pcnumchars)
  end
  def get_position_of_line(this : IDebugDocumentTextAuthor*, clinenumber : UInt32, pccharacterposition : UInt32*) : HRESULT
    @lpVtbl.value.get_position_of_line.call(this, clinenumber, pccharacterposition)
  end
  def get_line_of_position(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, pclinenumber : UInt32*, pccharacteroffsetinline : UInt32*) : HRESULT
    @lpVtbl.value.get_line_of_position.call(this, ccharacterposition, pclinenumber, pccharacteroffsetinline)
  end
  def get_text(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, pchartext : Char*, pstatextattr : UInt16*, pcnumchars : UInt32*, cmaxchars : UInt32) : HRESULT
    @lpVtbl.value.get_text.call(this, ccharacterposition, pchartext, pstatextattr, pcnumchars, cmaxchars)
  end
  def get_position_of_context(this : IDebugDocumentTextAuthor*, psc : IDebugDocumentContext, pccharacterposition : UInt32*, cnumchars : UInt32*) : HRESULT
    @lpVtbl.value.get_position_of_context.call(this, psc, pccharacterposition, cnumchars)
  end
  def get_context_of_position(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, cnumchars : UInt32, ppsc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_context_of_position.call(this, ccharacterposition, cnumchars, ppsc)
  end
  def insert_text(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, cnumtoinsert : UInt32, pchartext : Char*) : HRESULT
    @lpVtbl.value.insert_text.call(this, ccharacterposition, cnumtoinsert, pchartext)
  end
  def remove_text(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, cnumtoremove : UInt32) : HRESULT
    @lpVtbl.value.remove_text.call(this, ccharacterposition, cnumtoremove)
  end
  def replace_text(this : IDebugDocumentTextAuthor*, ccharacterposition : UInt32, cnumtoreplace : UInt32, pchartext : Char*) : HRESULT
    @lpVtbl.value.replace_text.call(this, ccharacterposition, cnumtoreplace, pchartext)
  end
end
struct LibWin32::IDebugDocumentTextExternalAuthor
  def query_interface(this : IDebugDocumentTextExternalAuthor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentTextExternalAuthor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentTextExternalAuthor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_path_name(this : IDebugDocumentTextExternalAuthor*, pbstrlongname : UInt8**, pfisoriginalfile : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_path_name.call(this, pbstrlongname, pfisoriginalfile)
  end
  def get_file_name(this : IDebugDocumentTextExternalAuthor*, pbstrshortname : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.call(this, pbstrshortname)
  end
  def notify_changed(this : IDebugDocumentTextExternalAuthor*) : HRESULT
    @lpVtbl.value.notify_changed.call(this)
  end
end
struct LibWin32::IDebugDocumentHelper32
  def query_interface(this : IDebugDocumentHelper32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentHelper32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentHelper32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : IDebugDocumentHelper32*, pda : IDebugApplication32, pszshortname : LibC::LPWSTR, pszlongname : LibC::LPWSTR, docattr : UInt32) : HRESULT
    @lpVtbl.value.init.call(this, pda, pszshortname, pszlongname, docattr)
  end
  def attach(this : IDebugDocumentHelper32*, pddhparent : IDebugDocumentHelper32) : HRESULT
    @lpVtbl.value.attach.call(this, pddhparent)
  end
  def detach(this : IDebugDocumentHelper32*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
  def add_unicode_text(this : IDebugDocumentHelper32*, psztext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_unicode_text.call(this, psztext)
  end
  def add_dbcs_text(this : IDebugDocumentHelper32*, psztext : PSTR) : HRESULT
    @lpVtbl.value.add_dbcs_text.call(this, psztext)
  end
  def set_debug_document_host(this : IDebugDocumentHelper32*, pddh : IDebugDocumentHost) : HRESULT
    @lpVtbl.value.set_debug_document_host.call(this, pddh)
  end
  def add_deferred_text(this : IDebugDocumentHelper32*, cchars : UInt32, dwtextstartcookie : UInt32) : HRESULT
    @lpVtbl.value.add_deferred_text.call(this, cchars, dwtextstartcookie)
  end
  def define_script_block(this : IDebugDocumentHelper32*, ulcharoffset : UInt32, cchars : UInt32, pas : IActiveScript, fscriptlet : LibC::BOOL, pdwsourcecontext : UInt32*) : HRESULT
    @lpVtbl.value.define_script_block.call(this, ulcharoffset, cchars, pas, fscriptlet, pdwsourcecontext)
  end
  def set_default_text_attr(this : IDebugDocumentHelper32*, statextattr : UInt16) : HRESULT
    @lpVtbl.value.set_default_text_attr.call(this, statextattr)
  end
  def set_text_attributes(this : IDebugDocumentHelper32*, ulcharoffset : UInt32, cchars : UInt32, pstatextattr : UInt16*) : HRESULT
    @lpVtbl.value.set_text_attributes.call(this, ulcharoffset, cchars, pstatextattr)
  end
  def set_long_name(this : IDebugDocumentHelper32*, pszlongname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_long_name.call(this, pszlongname)
  end
  def set_short_name(this : IDebugDocumentHelper32*, pszshortname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_short_name.call(this, pszshortname)
  end
  def set_document_attr(this : IDebugDocumentHelper32*, pszattributes : UInt32) : HRESULT
    @lpVtbl.value.set_document_attr.call(this, pszattributes)
  end
  def get_debug_application_node(this : IDebugDocumentHelper32*, ppdan : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_debug_application_node.call(this, ppdan)
  end
  def get_script_block_info(this : IDebugDocumentHelper32*, dwsourcecontext : UInt32, ppasd : IActiveScript*, picharpos : UInt32*, pcchars : UInt32*) : HRESULT
    @lpVtbl.value.get_script_block_info.call(this, dwsourcecontext, ppasd, picharpos, pcchars)
  end
  def create_debug_document_context(this : IDebugDocumentHelper32*, icharpos : UInt32, cchars : UInt32, ppddc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.create_debug_document_context.call(this, icharpos, cchars, ppddc)
  end
  def bring_document_to_top(this : IDebugDocumentHelper32*) : HRESULT
    @lpVtbl.value.bring_document_to_top.call(this)
  end
  def bring_document_context_to_top(this : IDebugDocumentHelper32*, pddc : IDebugDocumentContext) : HRESULT
    @lpVtbl.value.bring_document_context_to_top.call(this, pddc)
  end
end
struct LibWin32::IDebugDocumentHelper64
  def query_interface(this : IDebugDocumentHelper64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentHelper64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentHelper64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : IDebugDocumentHelper64*, pda : IDebugApplication64, pszshortname : LibC::LPWSTR, pszlongname : LibC::LPWSTR, docattr : UInt32) : HRESULT
    @lpVtbl.value.init.call(this, pda, pszshortname, pszlongname, docattr)
  end
  def attach(this : IDebugDocumentHelper64*, pddhparent : IDebugDocumentHelper64) : HRESULT
    @lpVtbl.value.attach.call(this, pddhparent)
  end
  def detach(this : IDebugDocumentHelper64*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
  def add_unicode_text(this : IDebugDocumentHelper64*, psztext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.add_unicode_text.call(this, psztext)
  end
  def add_dbcs_text(this : IDebugDocumentHelper64*, psztext : PSTR) : HRESULT
    @lpVtbl.value.add_dbcs_text.call(this, psztext)
  end
  def set_debug_document_host(this : IDebugDocumentHelper64*, pddh : IDebugDocumentHost) : HRESULT
    @lpVtbl.value.set_debug_document_host.call(this, pddh)
  end
  def add_deferred_text(this : IDebugDocumentHelper64*, cchars : UInt32, dwtextstartcookie : UInt32) : HRESULT
    @lpVtbl.value.add_deferred_text.call(this, cchars, dwtextstartcookie)
  end
  def define_script_block(this : IDebugDocumentHelper64*, ulcharoffset : UInt32, cchars : UInt32, pas : IActiveScript, fscriptlet : LibC::BOOL, pdwsourcecontext : UInt64*) : HRESULT
    @lpVtbl.value.define_script_block.call(this, ulcharoffset, cchars, pas, fscriptlet, pdwsourcecontext)
  end
  def set_default_text_attr(this : IDebugDocumentHelper64*, statextattr : UInt16) : HRESULT
    @lpVtbl.value.set_default_text_attr.call(this, statextattr)
  end
  def set_text_attributes(this : IDebugDocumentHelper64*, ulcharoffset : UInt32, cchars : UInt32, pstatextattr : UInt16*) : HRESULT
    @lpVtbl.value.set_text_attributes.call(this, ulcharoffset, cchars, pstatextattr)
  end
  def set_long_name(this : IDebugDocumentHelper64*, pszlongname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_long_name.call(this, pszlongname)
  end
  def set_short_name(this : IDebugDocumentHelper64*, pszshortname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_short_name.call(this, pszshortname)
  end
  def set_document_attr(this : IDebugDocumentHelper64*, pszattributes : UInt32) : HRESULT
    @lpVtbl.value.set_document_attr.call(this, pszattributes)
  end
  def get_debug_application_node(this : IDebugDocumentHelper64*, ppdan : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_debug_application_node.call(this, ppdan)
  end
  def get_script_block_info(this : IDebugDocumentHelper64*, dwsourcecontext : UInt64, ppasd : IActiveScript*, picharpos : UInt32*, pcchars : UInt32*) : HRESULT
    @lpVtbl.value.get_script_block_info.call(this, dwsourcecontext, ppasd, picharpos, pcchars)
  end
  def create_debug_document_context(this : IDebugDocumentHelper64*, icharpos : UInt32, cchars : UInt32, ppddc : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.create_debug_document_context.call(this, icharpos, cchars, ppddc)
  end
  def bring_document_to_top(this : IDebugDocumentHelper64*) : HRESULT
    @lpVtbl.value.bring_document_to_top.call(this)
  end
  def bring_document_context_to_top(this : IDebugDocumentHelper64*, pddc : IDebugDocumentContext) : HRESULT
    @lpVtbl.value.bring_document_context_to_top.call(this, pddc)
  end
end
struct LibWin32::IDebugDocumentHost
  def query_interface(this : IDebugDocumentHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_deferred_text(this : IDebugDocumentHost*, dwtextstartcookie : UInt32, pchartext : Char*, pstatextattr : UInt16*, pcnumchars : UInt32*, cmaxchars : UInt32) : HRESULT
    @lpVtbl.value.get_deferred_text.call(this, dwtextstartcookie, pchartext, pstatextattr, pcnumchars, cmaxchars)
  end
  def get_script_text_attributes(this : IDebugDocumentHost*, pstrcode : Char*, unumcodechars : UInt32, pstrdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_script_text_attributes.call(this, pstrcode, unumcodechars, pstrdelimiter, dwflags, pattr)
  end
  def on_create_document_context(this : IDebugDocumentHost*, ppunkouter : IUnknown*) : HRESULT
    @lpVtbl.value.on_create_document_context.call(this, ppunkouter)
  end
  def get_path_name(this : IDebugDocumentHost*, pbstrlongname : UInt8**, pfisoriginalfile : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_path_name.call(this, pbstrlongname, pfisoriginalfile)
  end
  def get_file_name(this : IDebugDocumentHost*, pbstrshortname : UInt8**) : HRESULT
    @lpVtbl.value.get_file_name.call(this, pbstrshortname)
  end
  def notify_changed(this : IDebugDocumentHost*) : HRESULT
    @lpVtbl.value.notify_changed.call(this)
  end
end
struct LibWin32::IDebugDocumentContext
  def query_interface(this : IDebugDocumentContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugDocumentContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugDocumentContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_document(this : IDebugDocumentContext*, ppsd : IDebugDocument*) : HRESULT
    @lpVtbl.value.get_document.call(this, ppsd)
  end
  def enum_code_contexts(this : IDebugDocumentContext*, ppescc : IEnumDebugCodeContexts*) : HRESULT
    @lpVtbl.value.enum_code_contexts.call(this, ppescc)
  end
end
struct LibWin32::IDebugSessionProvider
  def query_interface(this : IDebugSessionProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugSessionProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugSessionProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_debug_session(this : IDebugSessionProvider*, pda : IRemoteDebugApplication) : HRESULT
    @lpVtbl.value.start_debug_session.call(this, pda)
  end
end
struct LibWin32::IApplicationDebugger
  def query_interface(this : IApplicationDebugger*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IApplicationDebugger*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IApplicationDebugger*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def query_alive(this : IApplicationDebugger*) : HRESULT
    @lpVtbl.value.query_alive.call(this)
  end
  def create_instance_at_debugger(this : IApplicationDebugger*, rclsid : Guid*, punkouter : IUnknown, dwclscontext : UInt32, riid : Guid*, ppvobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_instance_at_debugger.call(this, rclsid, punkouter, dwclscontext, riid, ppvobject)
  end
  def on_debug_output(this : IApplicationDebugger*, pstr : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_debug_output.call(this, pstr)
  end
  def on_handle_break_point(this : IApplicationDebugger*, prpt : IRemoteDebugApplicationThread, br : BREAKREASON, perror : IActiveScriptErrorDebug) : HRESULT
    @lpVtbl.value.on_handle_break_point.call(this, prpt, br, perror)
  end
  def on_close(this : IApplicationDebugger*) : HRESULT
    @lpVtbl.value.on_close.call(this)
  end
  def on_debugger_event(this : IApplicationDebugger*, riid : Guid*, punk : IUnknown) : HRESULT
    @lpVtbl.value.on_debugger_event.call(this, riid, punk)
  end
end
struct LibWin32::IApplicationDebuggerUI
  def query_interface(this : IApplicationDebuggerUI*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IApplicationDebuggerUI*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IApplicationDebuggerUI*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def bring_document_to_top(this : IApplicationDebuggerUI*, pddt : IDebugDocumentText) : HRESULT
    @lpVtbl.value.bring_document_to_top.call(this, pddt)
  end
  def bring_document_context_to_top(this : IApplicationDebuggerUI*, pddc : IDebugDocumentContext) : HRESULT
    @lpVtbl.value.bring_document_context_to_top.call(this, pddc)
  end
end
struct LibWin32::IMachineDebugManager
  def query_interface(this : IMachineDebugManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMachineDebugManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMachineDebugManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_application(this : IMachineDebugManager*, pda : IRemoteDebugApplication, pdwappcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_application.call(this, pda, pdwappcookie)
  end
  def remove_application(this : IMachineDebugManager*, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_application.call(this, dwappcookie)
  end
  def enum_applications(this : IMachineDebugManager*, ppeda : IEnumRemoteDebugApplications*) : HRESULT
    @lpVtbl.value.enum_applications.call(this, ppeda)
  end
end
struct LibWin32::IMachineDebugManagerCookie
  def query_interface(this : IMachineDebugManagerCookie*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMachineDebugManagerCookie*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMachineDebugManagerCookie*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_application(this : IMachineDebugManagerCookie*, pda : IRemoteDebugApplication, dwdebugappcookie : UInt32, pdwappcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_application.call(this, pda, dwdebugappcookie, pdwappcookie)
  end
  def remove_application(this : IMachineDebugManagerCookie*, dwdebugappcookie : UInt32, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_application.call(this, dwdebugappcookie, dwappcookie)
  end
  def enum_applications(this : IMachineDebugManagerCookie*, ppeda : IEnumRemoteDebugApplications*) : HRESULT
    @lpVtbl.value.enum_applications.call(this, ppeda)
  end
end
struct LibWin32::IMachineDebugManagerEvents
  def query_interface(this : IMachineDebugManagerEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMachineDebugManagerEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMachineDebugManagerEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_add_application(this : IMachineDebugManagerEvents*, pda : IRemoteDebugApplication, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.on_add_application.call(this, pda, dwappcookie)
  end
  def on_remove_application(this : IMachineDebugManagerEvents*, pda : IRemoteDebugApplication, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.on_remove_application.call(this, pda, dwappcookie)
  end
end
struct LibWin32::IProcessDebugManager32
  def query_interface(this : IProcessDebugManager32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IProcessDebugManager32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IProcessDebugManager32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_application(this : IProcessDebugManager32*, ppda : IDebugApplication32*) : HRESULT
    @lpVtbl.value.create_application.call(this, ppda)
  end
  def get_default_application(this : IProcessDebugManager32*, ppda : IDebugApplication32*) : HRESULT
    @lpVtbl.value.get_default_application.call(this, ppda)
  end
  def add_application(this : IProcessDebugManager32*, pda : IDebugApplication32, pdwappcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_application.call(this, pda, pdwappcookie)
  end
  def remove_application(this : IProcessDebugManager32*, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_application.call(this, dwappcookie)
  end
  def create_debug_document_helper(this : IProcessDebugManager32*, punkouter : IUnknown, pddh : IDebugDocumentHelper32*) : HRESULT
    @lpVtbl.value.create_debug_document_helper.call(this, punkouter, pddh)
  end
end
struct LibWin32::IProcessDebugManager64
  def query_interface(this : IProcessDebugManager64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IProcessDebugManager64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IProcessDebugManager64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_application(this : IProcessDebugManager64*, ppda : IDebugApplication64*) : HRESULT
    @lpVtbl.value.create_application.call(this, ppda)
  end
  def get_default_application(this : IProcessDebugManager64*, ppda : IDebugApplication64*) : HRESULT
    @lpVtbl.value.get_default_application.call(this, ppda)
  end
  def add_application(this : IProcessDebugManager64*, pda : IDebugApplication64, pdwappcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_application.call(this, pda, pdwappcookie)
  end
  def remove_application(this : IProcessDebugManager64*, dwappcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_application.call(this, dwappcookie)
  end
  def create_debug_document_helper(this : IProcessDebugManager64*, punkouter : IUnknown, pddh : IDebugDocumentHelper64*) : HRESULT
    @lpVtbl.value.create_debug_document_helper.call(this, punkouter, pddh)
  end
end
struct LibWin32::IRemoteDebugApplication
  def query_interface(this : IRemoteDebugApplication*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugApplication*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugApplication*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def resume_from_break_point(this : IRemoteDebugApplication*, prptfocus : IRemoteDebugApplicationThread, bra : BREAKRESUME_ACTION, era : ERRORRESUMEACTION) : HRESULT
    @lpVtbl.value.resume_from_break_point.call(this, prptfocus, bra, era)
  end
  def cause_break(this : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.cause_break.call(this)
  end
  def connect_debugger(this : IRemoteDebugApplication*, pad : IApplicationDebugger) : HRESULT
    @lpVtbl.value.connect_debugger.call(this, pad)
  end
  def disconnect_debugger(this : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.disconnect_debugger.call(this)
  end
  def get_debugger(this : IRemoteDebugApplication*, pad : IApplicationDebugger*) : HRESULT
    @lpVtbl.value.get_debugger.call(this, pad)
  end
  def create_instance_at_application(this : IRemoteDebugApplication*, rclsid : Guid*, punkouter : IUnknown, dwclscontext : UInt32, riid : Guid*, ppvobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_instance_at_application.call(this, rclsid, punkouter, dwclscontext, riid, ppvobject)
  end
  def query_alive(this : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.query_alive.call(this)
  end
  def enum_threads(this : IRemoteDebugApplication*, pperdat : IEnumRemoteDebugApplicationThreads*) : HRESULT
    @lpVtbl.value.enum_threads.call(this, pperdat)
  end
  def get_name(this : IRemoteDebugApplication*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_root_node(this : IRemoteDebugApplication*, ppdanroot : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_root_node.call(this, ppdanroot)
  end
  def enum_global_expression_contexts(this : IRemoteDebugApplication*, ppedec : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.enum_global_expression_contexts.call(this, ppedec)
  end
end
struct LibWin32::IDebugApplication32
  def query_interface(this : IDebugApplication32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplication32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplication32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def resume_from_break_point(this : IDebugApplication32*, prptfocus : IRemoteDebugApplicationThread, bra : BREAKRESUME_ACTION, era : ERRORRESUMEACTION) : HRESULT
    @lpVtbl.value.resume_from_break_point.call(this, prptfocus, bra, era)
  end
  def cause_break(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.cause_break.call(this)
  end
  def connect_debugger(this : IDebugApplication32*, pad : IApplicationDebugger) : HRESULT
    @lpVtbl.value.connect_debugger.call(this, pad)
  end
  def disconnect_debugger(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.disconnect_debugger.call(this)
  end
  def get_debugger(this : IDebugApplication32*, pad : IApplicationDebugger*) : HRESULT
    @lpVtbl.value.get_debugger.call(this, pad)
  end
  def create_instance_at_application(this : IDebugApplication32*, rclsid : Guid*, punkouter : IUnknown, dwclscontext : UInt32, riid : Guid*, ppvobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_instance_at_application.call(this, rclsid, punkouter, dwclscontext, riid, ppvobject)
  end
  def query_alive(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.query_alive.call(this)
  end
  def enum_threads(this : IDebugApplication32*, pperdat : IEnumRemoteDebugApplicationThreads*) : HRESULT
    @lpVtbl.value.enum_threads.call(this, pperdat)
  end
  def get_name(this : IDebugApplication32*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_root_node(this : IDebugApplication32*, ppdanroot : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_root_node.call(this, ppdanroot)
  end
  def enum_global_expression_contexts(this : IDebugApplication32*, ppedec : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.enum_global_expression_contexts.call(this, ppedec)
  end
  def set_name(this : IDebugApplication32*, pstrname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, pstrname)
  end
  def step_out_complete(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.step_out_complete.call(this)
  end
  def debug_output(this : IDebugApplication32*, pstr : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.debug_output.call(this, pstr)
  end
  def start_debug_session(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.start_debug_session.call(this)
  end
  def handle_break_point(this : IDebugApplication32*, br : BREAKREASON, pbra : BREAKRESUME_ACTION*) : HRESULT
    @lpVtbl.value.handle_break_point.call(this, br, pbra)
  end
  def close(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_break_flags(this : IDebugApplication32*, pabf : UInt32*, pprdatsteppingthread : IRemoteDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_break_flags.call(this, pabf, pprdatsteppingthread)
  end
  def get_current_thread(this : IDebugApplication32*, pat : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_current_thread.call(this, pat)
  end
  def create_async_debug_operation(this : IDebugApplication32*, psdo : IDebugSyncOperation, ppado : IDebugAsyncOperation*) : HRESULT
    @lpVtbl.value.create_async_debug_operation.call(this, psdo, ppado)
  end
  def add_stack_frame_sniffer(this : IDebugApplication32*, pdsfs : IDebugStackFrameSniffer, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_stack_frame_sniffer.call(this, pdsfs, pdwcookie)
  end
  def remove_stack_frame_sniffer(this : IDebugApplication32*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_stack_frame_sniffer.call(this, dwcookie)
  end
  def query_current_thread_is_debugger_thread(this : IDebugApplication32*) : HRESULT
    @lpVtbl.value.query_current_thread_is_debugger_thread.call(this)
  end
  def synchronous_call_in_debugger_thread(this : IDebugApplication32*, pptc : IDebugThreadCall32, dwparam1 : UInt32, dwparam2 : UInt32, dwparam3 : UInt32) : HRESULT
    @lpVtbl.value.synchronous_call_in_debugger_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def create_application_node(this : IDebugApplication32*, ppdannew : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.create_application_node.call(this, ppdannew)
  end
  def fire_debugger_event(this : IDebugApplication32*, riid : Guid*, punk : IUnknown) : HRESULT
    @lpVtbl.value.fire_debugger_event.call(this, riid, punk)
  end
  def handle_runtime_error(this : IDebugApplication32*, perrordebug : IActiveScriptErrorDebug, pscriptsite : IActiveScriptSite, pbra : BREAKRESUME_ACTION*, perra : ERRORRESUMEACTION*, pfcallonscripterror : LibC::BOOL*) : HRESULT
    @lpVtbl.value.handle_runtime_error.call(this, perrordebug, pscriptsite, pbra, perra, pfcallonscripterror)
  end
  def f_can_jit_debug(this : IDebugApplication32*) : LibC::BOOL
    @lpVtbl.value.f_can_jit_debug.call(this)
  end
  def f_is_auto_jit_debug_enabled(this : IDebugApplication32*) : LibC::BOOL
    @lpVtbl.value.f_is_auto_jit_debug_enabled.call(this)
  end
  def add_global_expression_context_provider(this : IDebugApplication32*, pdsfs : IProvideExpressionContexts, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_global_expression_context_provider.call(this, pdsfs, pdwcookie)
  end
  def remove_global_expression_context_provider(this : IDebugApplication32*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_global_expression_context_provider.call(this, dwcookie)
  end
end
struct LibWin32::IDebugApplication64
  def query_interface(this : IDebugApplication64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplication64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplication64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def resume_from_break_point(this : IDebugApplication64*, prptfocus : IRemoteDebugApplicationThread, bra : BREAKRESUME_ACTION, era : ERRORRESUMEACTION) : HRESULT
    @lpVtbl.value.resume_from_break_point.call(this, prptfocus, bra, era)
  end
  def cause_break(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.cause_break.call(this)
  end
  def connect_debugger(this : IDebugApplication64*, pad : IApplicationDebugger) : HRESULT
    @lpVtbl.value.connect_debugger.call(this, pad)
  end
  def disconnect_debugger(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.disconnect_debugger.call(this)
  end
  def get_debugger(this : IDebugApplication64*, pad : IApplicationDebugger*) : HRESULT
    @lpVtbl.value.get_debugger.call(this, pad)
  end
  def create_instance_at_application(this : IDebugApplication64*, rclsid : Guid*, punkouter : IUnknown, dwclscontext : UInt32, riid : Guid*, ppvobject : IUnknown*) : HRESULT
    @lpVtbl.value.create_instance_at_application.call(this, rclsid, punkouter, dwclscontext, riid, ppvobject)
  end
  def query_alive(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.query_alive.call(this)
  end
  def enum_threads(this : IDebugApplication64*, pperdat : IEnumRemoteDebugApplicationThreads*) : HRESULT
    @lpVtbl.value.enum_threads.call(this, pperdat)
  end
  def get_name(this : IDebugApplication64*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_root_node(this : IDebugApplication64*, ppdanroot : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_root_node.call(this, ppdanroot)
  end
  def enum_global_expression_contexts(this : IDebugApplication64*, ppedec : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.enum_global_expression_contexts.call(this, ppedec)
  end
  def set_name(this : IDebugApplication64*, pstrname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, pstrname)
  end
  def step_out_complete(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.step_out_complete.call(this)
  end
  def debug_output(this : IDebugApplication64*, pstr : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.debug_output.call(this, pstr)
  end
  def start_debug_session(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.start_debug_session.call(this)
  end
  def handle_break_point(this : IDebugApplication64*, br : BREAKREASON, pbra : BREAKRESUME_ACTION*) : HRESULT
    @lpVtbl.value.handle_break_point.call(this, br, pbra)
  end
  def close(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def get_break_flags(this : IDebugApplication64*, pabf : UInt32*, pprdatsteppingthread : IRemoteDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_break_flags.call(this, pabf, pprdatsteppingthread)
  end
  def get_current_thread(this : IDebugApplication64*, pat : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_current_thread.call(this, pat)
  end
  def create_async_debug_operation(this : IDebugApplication64*, psdo : IDebugSyncOperation, ppado : IDebugAsyncOperation*) : HRESULT
    @lpVtbl.value.create_async_debug_operation.call(this, psdo, ppado)
  end
  def add_stack_frame_sniffer(this : IDebugApplication64*, pdsfs : IDebugStackFrameSniffer, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.add_stack_frame_sniffer.call(this, pdsfs, pdwcookie)
  end
  def remove_stack_frame_sniffer(this : IDebugApplication64*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.remove_stack_frame_sniffer.call(this, dwcookie)
  end
  def query_current_thread_is_debugger_thread(this : IDebugApplication64*) : HRESULT
    @lpVtbl.value.query_current_thread_is_debugger_thread.call(this)
  end
  def synchronous_call_in_debugger_thread(this : IDebugApplication64*, pptc : IDebugThreadCall64, dwparam1 : UInt64, dwparam2 : UInt64, dwparam3 : UInt64) : HRESULT
    @lpVtbl.value.synchronous_call_in_debugger_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def create_application_node(this : IDebugApplication64*, ppdannew : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.create_application_node.call(this, ppdannew)
  end
  def fire_debugger_event(this : IDebugApplication64*, riid : Guid*, punk : IUnknown) : HRESULT
    @lpVtbl.value.fire_debugger_event.call(this, riid, punk)
  end
  def handle_runtime_error(this : IDebugApplication64*, perrordebug : IActiveScriptErrorDebug, pscriptsite : IActiveScriptSite, pbra : BREAKRESUME_ACTION*, perra : ERRORRESUMEACTION*, pfcallonscripterror : LibC::BOOL*) : HRESULT
    @lpVtbl.value.handle_runtime_error.call(this, perrordebug, pscriptsite, pbra, perra, pfcallonscripterror)
  end
  def f_can_jit_debug(this : IDebugApplication64*) : LibC::BOOL
    @lpVtbl.value.f_can_jit_debug.call(this)
  end
  def f_is_auto_jit_debug_enabled(this : IDebugApplication64*) : LibC::BOOL
    @lpVtbl.value.f_is_auto_jit_debug_enabled.call(this)
  end
  def add_global_expression_context_provider(this : IDebugApplication64*, pdsfs : IProvideExpressionContexts, pdwcookie : UInt64*) : HRESULT
    @lpVtbl.value.add_global_expression_context_provider.call(this, pdsfs, pdwcookie)
  end
  def remove_global_expression_context_provider(this : IDebugApplication64*, dwcookie : UInt64) : HRESULT
    @lpVtbl.value.remove_global_expression_context_provider.call(this, dwcookie)
  end
end
struct LibWin32::IRemoteDebugApplicationEvents
  def query_interface(this : IRemoteDebugApplicationEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugApplicationEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugApplicationEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_connect_debugger(this : IRemoteDebugApplicationEvents*, pad : IApplicationDebugger) : HRESULT
    @lpVtbl.value.on_connect_debugger.call(this, pad)
  end
  def on_disconnect_debugger(this : IRemoteDebugApplicationEvents*) : HRESULT
    @lpVtbl.value.on_disconnect_debugger.call(this)
  end
  def on_set_name(this : IRemoteDebugApplicationEvents*, pstrname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_set_name.call(this, pstrname)
  end
  def on_debug_output(this : IRemoteDebugApplicationEvents*, pstr : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_debug_output.call(this, pstr)
  end
  def on_close(this : IRemoteDebugApplicationEvents*) : HRESULT
    @lpVtbl.value.on_close.call(this)
  end
  def on_enter_break_point(this : IRemoteDebugApplicationEvents*, prdat : IRemoteDebugApplicationThread) : HRESULT
    @lpVtbl.value.on_enter_break_point.call(this, prdat)
  end
  def on_leave_break_point(this : IRemoteDebugApplicationEvents*, prdat : IRemoteDebugApplicationThread) : HRESULT
    @lpVtbl.value.on_leave_break_point.call(this, prdat)
  end
  def on_create_thread(this : IRemoteDebugApplicationEvents*, prdat : IRemoteDebugApplicationThread) : HRESULT
    @lpVtbl.value.on_create_thread.call(this, prdat)
  end
  def on_destroy_thread(this : IRemoteDebugApplicationEvents*, prdat : IRemoteDebugApplicationThread) : HRESULT
    @lpVtbl.value.on_destroy_thread.call(this, prdat)
  end
  def on_break_flag_change(this : IRemoteDebugApplicationEvents*, abf : UInt32, prdatsteppingthread : IRemoteDebugApplicationThread) : HRESULT
    @lpVtbl.value.on_break_flag_change.call(this, abf, prdatsteppingthread)
  end
end
struct LibWin32::IDebugApplicationNode
  def query_interface(this : IDebugApplicationNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_name(this : IDebugApplicationNode*, dnt : DOCUMENTNAMETYPE, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, dnt, pbstrname)
  end
  def get_document_class_id(this : IDebugApplicationNode*, pclsiddocument : Guid*) : HRESULT
    @lpVtbl.value.get_document_class_id.call(this, pclsiddocument)
  end
  def get_document(this : IDebugApplicationNode*, ppssd : IDebugDocument*) : HRESULT
    @lpVtbl.value.get_document.call(this, ppssd)
  end
  def enum_children(this : IDebugApplicationNode*, pperddp : IEnumDebugApplicationNodes*) : HRESULT
    @lpVtbl.value.enum_children.call(this, pperddp)
  end
  def get_parent(this : IDebugApplicationNode*, pprddp : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.get_parent.call(this, pprddp)
  end
  def set_document_provider(this : IDebugApplicationNode*, pddp : IDebugDocumentProvider) : HRESULT
    @lpVtbl.value.set_document_provider.call(this, pddp)
  end
  def close(this : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def attach(this : IDebugApplicationNode*, pdanparent : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.attach.call(this, pdanparent)
  end
  def detach(this : IDebugApplicationNode*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
end
struct LibWin32::IDebugApplicationNodeEvents
  def query_interface(this : IDebugApplicationNodeEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationNodeEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationNodeEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_add_child(this : IDebugApplicationNodeEvents*, prddpchild : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.on_add_child.call(this, prddpchild)
  end
  def on_remove_child(this : IDebugApplicationNodeEvents*, prddpchild : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.on_remove_child.call(this, prddpchild)
  end
  def on_detach(this : IDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.on_detach.call(this)
  end
  def on_attach(this : IDebugApplicationNodeEvents*, prddpparent : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.on_attach.call(this, prddpparent)
  end
end
struct LibWin32::AsyncIDebugApplicationNodeEvents
  def query_interface(this : AsyncIDebugApplicationNodeEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : AsyncIDebugApplicationNodeEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : AsyncIDebugApplicationNodeEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_on_add_child(this : AsyncIDebugApplicationNodeEvents*, prddpchild : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.begin_on_add_child.call(this, prddpchild)
  end
  def finish_on_add_child(this : AsyncIDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.finish_on_add_child.call(this)
  end
  def begin_on_remove_child(this : AsyncIDebugApplicationNodeEvents*, prddpchild : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.begin_on_remove_child.call(this, prddpchild)
  end
  def finish_on_remove_child(this : AsyncIDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.finish_on_remove_child.call(this)
  end
  def begin_on_detach(this : AsyncIDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.begin_on_detach.call(this)
  end
  def finish_on_detach(this : AsyncIDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.finish_on_detach.call(this)
  end
  def begin_on_attach(this : AsyncIDebugApplicationNodeEvents*, prddpparent : IDebugApplicationNode) : HRESULT
    @lpVtbl.value.begin_on_attach.call(this, prddpparent)
  end
  def finish_on_attach(this : AsyncIDebugApplicationNodeEvents*) : HRESULT
    @lpVtbl.value.finish_on_attach.call(this)
  end
end
struct LibWin32::IDebugThreadCall32
  def query_interface(this : IDebugThreadCall32*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugThreadCall32*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugThreadCall32*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def thread_call_handler(this : IDebugThreadCall32*, dwparam1 : UInt32, dwparam2 : UInt32, dwparam3 : UInt32) : HRESULT
    @lpVtbl.value.thread_call_handler.call(this, dwparam1, dwparam2, dwparam3)
  end
end
struct LibWin32::IDebugThreadCall64
  def query_interface(this : IDebugThreadCall64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugThreadCall64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugThreadCall64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def thread_call_handler(this : IDebugThreadCall64*, dwparam1 : UInt64, dwparam2 : UInt64, dwparam3 : UInt64) : HRESULT
    @lpVtbl.value.thread_call_handler.call(this, dwparam1, dwparam2, dwparam3)
  end
end
struct LibWin32::IRemoteDebugApplicationThread
  def query_interface(this : IRemoteDebugApplicationThread*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugApplicationThread*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugApplicationThread*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_system_thread_id(this : IRemoteDebugApplicationThread*, dwthreadid : UInt32*) : HRESULT
    @lpVtbl.value.get_system_thread_id.call(this, dwthreadid)
  end
  def get_application(this : IRemoteDebugApplicationThread*, pprda : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.get_application.call(this, pprda)
  end
  def enum_stack_frames(this : IRemoteDebugApplicationThread*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
  def get_description(this : IRemoteDebugApplicationThread*, pbstrdescription : UInt8**, pbstrstate : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription, pbstrstate)
  end
  def set_next_statement(this : IRemoteDebugApplicationThread*, pstackframe : IDebugStackFrame, pcodecontext : IDebugCodeContext) : HRESULT
    @lpVtbl.value.set_next_statement.call(this, pstackframe, pcodecontext)
  end
  def get_state(this : IRemoteDebugApplicationThread*, pstate : UInt32*) : HRESULT
    @lpVtbl.value.get_state.call(this, pstate)
  end
  def suspend(this : IRemoteDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.suspend.call(this, pdwcount)
  end
  def resume(this : IRemoteDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.resume.call(this, pdwcount)
  end
  def get_suspend_count(this : IRemoteDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_suspend_count.call(this, pdwcount)
  end
end
struct LibWin32::IDebugApplicationThread
  def query_interface(this : IDebugApplicationThread*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationThread*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationThread*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_system_thread_id(this : IDebugApplicationThread*, dwthreadid : UInt32*) : HRESULT
    @lpVtbl.value.get_system_thread_id.call(this, dwthreadid)
  end
  def get_application(this : IDebugApplicationThread*, pprda : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.get_application.call(this, pprda)
  end
  def enum_stack_frames(this : IDebugApplicationThread*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
  def get_description(this : IDebugApplicationThread*, pbstrdescription : UInt8**, pbstrstate : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription, pbstrstate)
  end
  def set_next_statement(this : IDebugApplicationThread*, pstackframe : IDebugStackFrame, pcodecontext : IDebugCodeContext) : HRESULT
    @lpVtbl.value.set_next_statement.call(this, pstackframe, pcodecontext)
  end
  def get_state(this : IDebugApplicationThread*, pstate : UInt32*) : HRESULT
    @lpVtbl.value.get_state.call(this, pstate)
  end
  def suspend(this : IDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.suspend.call(this, pdwcount)
  end
  def resume(this : IDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.resume.call(this, pdwcount)
  end
  def get_suspend_count(this : IDebugApplicationThread*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_suspend_count.call(this, pdwcount)
  end
  def synchronous_call_into_thread32(this : IDebugApplicationThread*, pstcb : IDebugThreadCall32, dwparam1 : UInt32, dwparam2 : UInt32, dwparam3 : UInt32) : HRESULT
    @lpVtbl.value.synchronous_call_into_thread32.call(this, pstcb, dwparam1, dwparam2, dwparam3)
  end
  def query_is_current_thread(this : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.query_is_current_thread.call(this)
  end
  def query_is_debugger_thread(this : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.query_is_debugger_thread.call(this)
  end
  def set_description(this : IDebugApplicationThread*, pstrdescription : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_description.call(this, pstrdescription)
  end
  def set_state_string(this : IDebugApplicationThread*, pstrstate : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_state_string.call(this, pstrstate)
  end
end
struct LibWin32::IDebugApplicationThread64
  def query_interface(this : IDebugApplicationThread64*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationThread64*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationThread64*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_system_thread_id(this : IDebugApplicationThread64*, dwthreadid : UInt32*) : HRESULT
    @lpVtbl.value.get_system_thread_id.call(this, dwthreadid)
  end
  def get_application(this : IDebugApplicationThread64*, pprda : IRemoteDebugApplication*) : HRESULT
    @lpVtbl.value.get_application.call(this, pprda)
  end
  def enum_stack_frames(this : IDebugApplicationThread64*, ppedsf : IEnumDebugStackFrames*) : HRESULT
    @lpVtbl.value.enum_stack_frames.call(this, ppedsf)
  end
  def get_description(this : IDebugApplicationThread64*, pbstrdescription : UInt8**, pbstrstate : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription, pbstrstate)
  end
  def set_next_statement(this : IDebugApplicationThread64*, pstackframe : IDebugStackFrame, pcodecontext : IDebugCodeContext) : HRESULT
    @lpVtbl.value.set_next_statement.call(this, pstackframe, pcodecontext)
  end
  def get_state(this : IDebugApplicationThread64*, pstate : UInt32*) : HRESULT
    @lpVtbl.value.get_state.call(this, pstate)
  end
  def suspend(this : IDebugApplicationThread64*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.suspend.call(this, pdwcount)
  end
  def resume(this : IDebugApplicationThread64*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.resume.call(this, pdwcount)
  end
  def get_suspend_count(this : IDebugApplicationThread64*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_suspend_count.call(this, pdwcount)
  end
  def synchronous_call_into_thread32(this : IDebugApplicationThread64*, pstcb : IDebugThreadCall32, dwparam1 : UInt32, dwparam2 : UInt32, dwparam3 : UInt32) : HRESULT
    @lpVtbl.value.synchronous_call_into_thread32.call(this, pstcb, dwparam1, dwparam2, dwparam3)
  end
  def query_is_current_thread(this : IDebugApplicationThread64*) : HRESULT
    @lpVtbl.value.query_is_current_thread.call(this)
  end
  def query_is_debugger_thread(this : IDebugApplicationThread64*) : HRESULT
    @lpVtbl.value.query_is_debugger_thread.call(this)
  end
  def set_description(this : IDebugApplicationThread64*, pstrdescription : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_description.call(this, pstrdescription)
  end
  def set_state_string(this : IDebugApplicationThread64*, pstrstate : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_state_string.call(this, pstrstate)
  end
  def synchronous_call_into_thread64(this : IDebugApplicationThread64*, pstcb : IDebugThreadCall64, dwparam1 : UInt64, dwparam2 : UInt64, dwparam3 : UInt64) : HRESULT
    @lpVtbl.value.synchronous_call_into_thread64.call(this, pstcb, dwparam1, dwparam2, dwparam3)
  end
end
struct LibWin32::IDebugCookie
  def query_interface(this : IDebugCookie*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugCookie*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugCookie*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_debug_cookie(this : IDebugCookie*, dwdebugappcookie : UInt32) : HRESULT
    @lpVtbl.value.set_debug_cookie.call(this, dwdebugappcookie)
  end
end
struct LibWin32::IEnumDebugApplicationNodes
  def query_interface(this : IEnumDebugApplicationNodes*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugApplicationNodes*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugApplicationNodes*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugApplicationNodes*, celt : UInt32, pprddp : IDebugApplicationNode*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, pprddp, pceltfetched)
  end
  def skip(this : IEnumDebugApplicationNodes*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugApplicationNodes*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugApplicationNodes*, pperddp : IEnumDebugApplicationNodes*) : HRESULT
    @lpVtbl.value.clone.call(this, pperddp)
  end
end
struct LibWin32::IEnumRemoteDebugApplications
  def query_interface(this : IEnumRemoteDebugApplications*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumRemoteDebugApplications*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumRemoteDebugApplications*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumRemoteDebugApplications*, celt : UInt32, ppda : IRemoteDebugApplication*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, ppda, pceltfetched)
  end
  def skip(this : IEnumRemoteDebugApplications*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumRemoteDebugApplications*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumRemoteDebugApplications*, ppessd : IEnumRemoteDebugApplications*) : HRESULT
    @lpVtbl.value.clone.call(this, ppessd)
  end
end
struct LibWin32::IEnumRemoteDebugApplicationThreads
  def query_interface(this : IEnumRemoteDebugApplicationThreads*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumRemoteDebugApplicationThreads*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumRemoteDebugApplicationThreads*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumRemoteDebugApplicationThreads*, celt : UInt32, pprdat : IRemoteDebugApplicationThread*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, pprdat, pceltfetched)
  end
  def skip(this : IEnumRemoteDebugApplicationThreads*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumRemoteDebugApplicationThreads*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumRemoteDebugApplicationThreads*, pperdat : IEnumRemoteDebugApplicationThreads*) : HRESULT
    @lpVtbl.value.clone.call(this, pperdat)
  end
end
struct LibWin32::IDebugFormatter
  def query_interface(this : IDebugFormatter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugFormatter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugFormatter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_string_for_variant(this : IDebugFormatter*, pvar : VARIANT*, nradix : UInt32, pbstrvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_string_for_variant.call(this, pvar, nradix, pbstrvalue)
  end
  def get_variant_for_string(this : IDebugFormatter*, pwstrvalue : LibC::LPWSTR, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.get_variant_for_string.call(this, pwstrvalue, pvar)
  end
  def get_string_for_var_type(this : IDebugFormatter*, vt : UInt16, ptdescarraytype : TYPEDESC*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_string_for_var_type.call(this, vt, ptdescarraytype, pbstr)
  end
end
struct LibWin32::ISimpleConnectionPoint
  def query_interface(this : ISimpleConnectionPoint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISimpleConnectionPoint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISimpleConnectionPoint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_count(this : ISimpleConnectionPoint*, pulcount : UInt32*) : HRESULT
    @lpVtbl.value.get_event_count.call(this, pulcount)
  end
  def describe_events(this : ISimpleConnectionPoint*, ievent : UInt32, cevents : UInt32, prgid : Int32*, prgbstr : UInt8**, pceventsfetched : UInt32*) : HRESULT
    @lpVtbl.value.describe_events.call(this, ievent, cevents, prgid, prgbstr, pceventsfetched)
  end
  def advise(this : ISimpleConnectionPoint*, pdisp : IDispatch, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.advise.call(this, pdisp, pdwcookie)
  end
  def unadvise(this : ISimpleConnectionPoint*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.unadvise.call(this, dwcookie)
  end
end
struct LibWin32::IDebugHelper
  def query_interface(this : IDebugHelper*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugHelper*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugHelper*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_property_browser(this : IDebugHelper*, pvar : VARIANT*, bstrname : LibC::LPWSTR, pdat : IDebugApplicationThread, ppdob : IDebugProperty*) : HRESULT
    @lpVtbl.value.create_property_browser.call(this, pvar, bstrname, pdat, ppdob)
  end
  def create_property_browser_ex(this : IDebugHelper*, pvar : VARIANT*, bstrname : LibC::LPWSTR, pdat : IDebugApplicationThread, pdf : IDebugFormatter, ppdob : IDebugProperty*) : HRESULT
    @lpVtbl.value.create_property_browser_ex.call(this, pvar, bstrname, pdat, pdf, ppdob)
  end
  def create_simple_connection_point(this : IDebugHelper*, pdisp : IDispatch, ppscp : ISimpleConnectionPoint*) : HRESULT
    @lpVtbl.value.create_simple_connection_point.call(this, pdisp, ppscp)
  end
end
struct LibWin32::IEnumDebugExpressionContexts
  def query_interface(this : IEnumDebugExpressionContexts*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDebugExpressionContexts*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDebugExpressionContexts*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDebugExpressionContexts*, celt : UInt32, ppdec : IDebugExpressionContext*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, ppdec, pceltfetched)
  end
  def skip(this : IEnumDebugExpressionContexts*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDebugExpressionContexts*, ppedec : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.clone.call(this, ppedec)
  end
end
struct LibWin32::IProvideExpressionContexts
  def query_interface(this : IProvideExpressionContexts*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IProvideExpressionContexts*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IProvideExpressionContexts*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_expression_contexts(this : IProvideExpressionContexts*, ppedec : IEnumDebugExpressionContexts*) : HRESULT
    @lpVtbl.value.enum_expression_contexts.call(this, ppedec)
  end
end
struct LibWin32::IActiveScriptProfilerControl
  def query_interface(this : IActiveScriptProfilerControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_profiling(this : IActiveScriptProfilerControl*, clsidprofilerobject : Guid*, dweventmask : UInt32, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.start_profiling.call(this, clsidprofilerobject, dweventmask, dwcontext)
  end
  def set_profiler_event_mask(this : IActiveScriptProfilerControl*, dweventmask : UInt32) : HRESULT
    @lpVtbl.value.set_profiler_event_mask.call(this, dweventmask)
  end
  def stop_profiling(this : IActiveScriptProfilerControl*, hrshutdownreason : HRESULT) : HRESULT
    @lpVtbl.value.stop_profiling.call(this, hrshutdownreason)
  end
end
struct LibWin32::IActiveScriptProfilerControl2
  def query_interface(this : IActiveScriptProfilerControl2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerControl2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerControl2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_profiling(this : IActiveScriptProfilerControl2*, clsidprofilerobject : Guid*, dweventmask : UInt32, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.start_profiling.call(this, clsidprofilerobject, dweventmask, dwcontext)
  end
  def set_profiler_event_mask(this : IActiveScriptProfilerControl2*, dweventmask : UInt32) : HRESULT
    @lpVtbl.value.set_profiler_event_mask.call(this, dweventmask)
  end
  def stop_profiling(this : IActiveScriptProfilerControl2*, hrshutdownreason : HRESULT) : HRESULT
    @lpVtbl.value.stop_profiling.call(this, hrshutdownreason)
  end
  def complete_profiler_start(this : IActiveScriptProfilerControl2*) : HRESULT
    @lpVtbl.value.complete_profiler_start.call(this)
  end
  def prepare_profiler_stop(this : IActiveScriptProfilerControl2*) : HRESULT
    @lpVtbl.value.prepare_profiler_stop.call(this)
  end
end
struct LibWin32::IActiveScriptProfilerHeapEnum
  def query_interface(this : IActiveScriptProfilerHeapEnum*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerHeapEnum*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerHeapEnum*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IActiveScriptProfilerHeapEnum*, celt : UInt32, heapobjects : PROFILER_HEAP_OBJECT**, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, heapobjects, pceltfetched)
  end
  def get_optional_info(this : IActiveScriptProfilerHeapEnum*, heapobject : PROFILER_HEAP_OBJECT*, celt : UInt32, optionalinfo : PROFILER_HEAP_OBJECT_OPTIONAL_INFO*) : HRESULT
    @lpVtbl.value.get_optional_info.call(this, heapobject, celt, optionalinfo)
  end
  def free_object_and_optional_info(this : IActiveScriptProfilerHeapEnum*, celt : UInt32, heapobjects : PROFILER_HEAP_OBJECT**) : HRESULT
    @lpVtbl.value.free_object_and_optional_info.call(this, celt, heapobjects)
  end
  def get_name_id_map(this : IActiveScriptProfilerHeapEnum*, pnamelist : LibC::LPWSTR***, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.get_name_id_map.call(this, pnamelist, pcelt)
  end
end
struct LibWin32::IActiveScriptProfilerControl3
  def query_interface(this : IActiveScriptProfilerControl3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerControl3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerControl3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_profiling(this : IActiveScriptProfilerControl3*, clsidprofilerobject : Guid*, dweventmask : UInt32, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.start_profiling.call(this, clsidprofilerobject, dweventmask, dwcontext)
  end
  def set_profiler_event_mask(this : IActiveScriptProfilerControl3*, dweventmask : UInt32) : HRESULT
    @lpVtbl.value.set_profiler_event_mask.call(this, dweventmask)
  end
  def stop_profiling(this : IActiveScriptProfilerControl3*, hrshutdownreason : HRESULT) : HRESULT
    @lpVtbl.value.stop_profiling.call(this, hrshutdownreason)
  end
  def complete_profiler_start(this : IActiveScriptProfilerControl3*) : HRESULT
    @lpVtbl.value.complete_profiler_start.call(this)
  end
  def prepare_profiler_stop(this : IActiveScriptProfilerControl3*) : HRESULT
    @lpVtbl.value.prepare_profiler_stop.call(this)
  end
  def enum_heap(this : IActiveScriptProfilerControl3*, ppenum : IActiveScriptProfilerHeapEnum*) : HRESULT
    @lpVtbl.value.enum_heap.call(this, ppenum)
  end
end
struct LibWin32::IActiveScriptProfilerControl4
  def query_interface(this : IActiveScriptProfilerControl4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerControl4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerControl4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_profiling(this : IActiveScriptProfilerControl4*, clsidprofilerobject : Guid*, dweventmask : UInt32, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.start_profiling.call(this, clsidprofilerobject, dweventmask, dwcontext)
  end
  def set_profiler_event_mask(this : IActiveScriptProfilerControl4*, dweventmask : UInt32) : HRESULT
    @lpVtbl.value.set_profiler_event_mask.call(this, dweventmask)
  end
  def stop_profiling(this : IActiveScriptProfilerControl4*, hrshutdownreason : HRESULT) : HRESULT
    @lpVtbl.value.stop_profiling.call(this, hrshutdownreason)
  end
  def complete_profiler_start(this : IActiveScriptProfilerControl4*) : HRESULT
    @lpVtbl.value.complete_profiler_start.call(this)
  end
  def prepare_profiler_stop(this : IActiveScriptProfilerControl4*) : HRESULT
    @lpVtbl.value.prepare_profiler_stop.call(this)
  end
  def enum_heap(this : IActiveScriptProfilerControl4*, ppenum : IActiveScriptProfilerHeapEnum*) : HRESULT
    @lpVtbl.value.enum_heap.call(this, ppenum)
  end
  def summarize_heap(this : IActiveScriptProfilerControl4*, heapsummary : PROFILER_HEAP_SUMMARY*) : HRESULT
    @lpVtbl.value.summarize_heap.call(this, heapsummary)
  end
end
struct LibWin32::IActiveScriptProfilerControl5
  def query_interface(this : IActiveScriptProfilerControl5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerControl5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerControl5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def start_profiling(this : IActiveScriptProfilerControl5*, clsidprofilerobject : Guid*, dweventmask : UInt32, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.start_profiling.call(this, clsidprofilerobject, dweventmask, dwcontext)
  end
  def set_profiler_event_mask(this : IActiveScriptProfilerControl5*, dweventmask : UInt32) : HRESULT
    @lpVtbl.value.set_profiler_event_mask.call(this, dweventmask)
  end
  def stop_profiling(this : IActiveScriptProfilerControl5*, hrshutdownreason : HRESULT) : HRESULT
    @lpVtbl.value.stop_profiling.call(this, hrshutdownreason)
  end
  def complete_profiler_start(this : IActiveScriptProfilerControl5*) : HRESULT
    @lpVtbl.value.complete_profiler_start.call(this)
  end
  def prepare_profiler_stop(this : IActiveScriptProfilerControl5*) : HRESULT
    @lpVtbl.value.prepare_profiler_stop.call(this)
  end
  def enum_heap(this : IActiveScriptProfilerControl5*, ppenum : IActiveScriptProfilerHeapEnum*) : HRESULT
    @lpVtbl.value.enum_heap.call(this, ppenum)
  end
  def summarize_heap(this : IActiveScriptProfilerControl5*, heapsummary : PROFILER_HEAP_SUMMARY*) : HRESULT
    @lpVtbl.value.summarize_heap.call(this, heapsummary)
  end
  def enum_heap2(this : IActiveScriptProfilerControl5*, enumflags : PROFILER_HEAP_ENUM_FLAGS, ppenum : IActiveScriptProfilerHeapEnum*) : HRESULT
    @lpVtbl.value.enum_heap2.call(this, enumflags, ppenum)
  end
end
struct LibWin32::IActiveScriptProfilerCallback
  def query_interface(this : IActiveScriptProfilerCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IActiveScriptProfilerCallback*, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.initialize.call(this, dwcontext)
  end
  def shutdown(this : IActiveScriptProfilerCallback*, hrreason : HRESULT) : HRESULT
    @lpVtbl.value.shutdown.call(this, hrreason)
  end
  def script_compiled(this : IActiveScriptProfilerCallback*, scriptid : Int32, type : PROFILER_SCRIPT_TYPE, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.script_compiled.call(this, scriptid, type, pidebugdocumentcontext)
  end
  def function_compiled(this : IActiveScriptProfilerCallback*, functionid : Int32, scriptid : Int32, pwszfunctionname : LibC::LPWSTR, pwszfunctionnamehint : LibC::LPWSTR, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.function_compiled.call(this, functionid, scriptid, pwszfunctionname, pwszfunctionnamehint, pidebugdocumentcontext)
  end
  def on_function_enter(this : IActiveScriptProfilerCallback*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_enter.call(this, scriptid, functionid)
  end
  def on_function_exit(this : IActiveScriptProfilerCallback*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_exit.call(this, scriptid, functionid)
  end
end
struct LibWin32::IActiveScriptProfilerCallback2
  def query_interface(this : IActiveScriptProfilerCallback2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerCallback2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerCallback2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IActiveScriptProfilerCallback2*, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.initialize.call(this, dwcontext)
  end
  def shutdown(this : IActiveScriptProfilerCallback2*, hrreason : HRESULT) : HRESULT
    @lpVtbl.value.shutdown.call(this, hrreason)
  end
  def script_compiled(this : IActiveScriptProfilerCallback2*, scriptid : Int32, type : PROFILER_SCRIPT_TYPE, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.script_compiled.call(this, scriptid, type, pidebugdocumentcontext)
  end
  def function_compiled(this : IActiveScriptProfilerCallback2*, functionid : Int32, scriptid : Int32, pwszfunctionname : LibC::LPWSTR, pwszfunctionnamehint : LibC::LPWSTR, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.function_compiled.call(this, functionid, scriptid, pwszfunctionname, pwszfunctionnamehint, pidebugdocumentcontext)
  end
  def on_function_enter(this : IActiveScriptProfilerCallback2*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_enter.call(this, scriptid, functionid)
  end
  def on_function_exit(this : IActiveScriptProfilerCallback2*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_exit.call(this, scriptid, functionid)
  end
  def on_function_enter_by_name(this : IActiveScriptProfilerCallback2*, pwszfunctionname : LibC::LPWSTR, type : PROFILER_SCRIPT_TYPE) : HRESULT
    @lpVtbl.value.on_function_enter_by_name.call(this, pwszfunctionname, type)
  end
  def on_function_exit_by_name(this : IActiveScriptProfilerCallback2*, pwszfunctionname : LibC::LPWSTR, type : PROFILER_SCRIPT_TYPE) : HRESULT
    @lpVtbl.value.on_function_exit_by_name.call(this, pwszfunctionname, type)
  end
end
struct LibWin32::IActiveScriptProfilerCallback3
  def query_interface(this : IActiveScriptProfilerCallback3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptProfilerCallback3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptProfilerCallback3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IActiveScriptProfilerCallback3*, dwcontext : UInt32) : HRESULT
    @lpVtbl.value.initialize.call(this, dwcontext)
  end
  def shutdown(this : IActiveScriptProfilerCallback3*, hrreason : HRESULT) : HRESULT
    @lpVtbl.value.shutdown.call(this, hrreason)
  end
  def script_compiled(this : IActiveScriptProfilerCallback3*, scriptid : Int32, type : PROFILER_SCRIPT_TYPE, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.script_compiled.call(this, scriptid, type, pidebugdocumentcontext)
  end
  def function_compiled(this : IActiveScriptProfilerCallback3*, functionid : Int32, scriptid : Int32, pwszfunctionname : LibC::LPWSTR, pwszfunctionnamehint : LibC::LPWSTR, pidebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.function_compiled.call(this, functionid, scriptid, pwszfunctionname, pwszfunctionnamehint, pidebugdocumentcontext)
  end
  def on_function_enter(this : IActiveScriptProfilerCallback3*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_enter.call(this, scriptid, functionid)
  end
  def on_function_exit(this : IActiveScriptProfilerCallback3*, scriptid : Int32, functionid : Int32) : HRESULT
    @lpVtbl.value.on_function_exit.call(this, scriptid, functionid)
  end
  def on_function_enter_by_name(this : IActiveScriptProfilerCallback3*, pwszfunctionname : LibC::LPWSTR, type : PROFILER_SCRIPT_TYPE) : HRESULT
    @lpVtbl.value.on_function_enter_by_name.call(this, pwszfunctionname, type)
  end
  def on_function_exit_by_name(this : IActiveScriptProfilerCallback3*, pwszfunctionname : LibC::LPWSTR, type : PROFILER_SCRIPT_TYPE) : HRESULT
    @lpVtbl.value.on_function_exit_by_name.call(this, pwszfunctionname, type)
  end
  def set_web_worker_id(this : IActiveScriptProfilerCallback3*, webworkerid : UInt32) : HRESULT
    @lpVtbl.value.set_web_worker_id.call(this, webworkerid)
  end
end
struct LibWin32::IScriptNode
  def query_interface(this : IScriptNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def alive(this : IScriptNode*) : HRESULT
    @lpVtbl.value.alive.call(this)
  end
  def delete(this : IScriptNode*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_parent(this : IScriptNode*, ppsnparent : IScriptNode*) : HRESULT
    @lpVtbl.value.get_parent.call(this, ppsnparent)
  end
  def get_index_in_parent(this : IScriptNode*, pisn : UInt32*) : HRESULT
    @lpVtbl.value.get_index_in_parent.call(this, pisn)
  end
  def get_cookie(this : IScriptNode*, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.get_cookie.call(this, pdwcookie)
  end
  def get_number_of_children(this : IScriptNode*, pcsn : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_children.call(this, pcsn)
  end
  def get_child(this : IScriptNode*, isn : UInt32, ppsn : IScriptNode*) : HRESULT
    @lpVtbl.value.get_child.call(this, isn, ppsn)
  end
  def get_language(this : IScriptNode*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, pbstr)
  end
  def create_child_entry(this : IScriptNode*, isn : UInt32, dwcookie : UInt32, pszdelimiter : LibC::LPWSTR, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_entry.call(this, isn, dwcookie, pszdelimiter, ppse)
  end
  def create_child_handler(this : IScriptNode*, pszdefaultname : LibC::LPWSTR, prgpsznames : LibC::LPWSTR*, cpsznames : UInt32, pszevent : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, ptisignature : ITypeInfo, imethodsignature : UInt32, isn : UInt32, dwcookie : UInt32, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_handler.call(this, pszdefaultname, prgpsznames, cpsznames, pszevent, pszdelimiter, ptisignature, imethodsignature, isn, dwcookie, ppse)
  end
end
struct LibWin32::IScriptEntry
  def query_interface(this : IScriptEntry*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptEntry*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptEntry*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def alive(this : IScriptEntry*) : HRESULT
    @lpVtbl.value.alive.call(this)
  end
  def delete(this : IScriptEntry*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_parent(this : IScriptEntry*, ppsnparent : IScriptNode*) : HRESULT
    @lpVtbl.value.get_parent.call(this, ppsnparent)
  end
  def get_index_in_parent(this : IScriptEntry*, pisn : UInt32*) : HRESULT
    @lpVtbl.value.get_index_in_parent.call(this, pisn)
  end
  def get_cookie(this : IScriptEntry*, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.get_cookie.call(this, pdwcookie)
  end
  def get_number_of_children(this : IScriptEntry*, pcsn : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_children.call(this, pcsn)
  end
  def get_child(this : IScriptEntry*, isn : UInt32, ppsn : IScriptNode*) : HRESULT
    @lpVtbl.value.get_child.call(this, isn, ppsn)
  end
  def get_language(this : IScriptEntry*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, pbstr)
  end
  def create_child_entry(this : IScriptEntry*, isn : UInt32, dwcookie : UInt32, pszdelimiter : LibC::LPWSTR, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_entry.call(this, isn, dwcookie, pszdelimiter, ppse)
  end
  def create_child_handler(this : IScriptEntry*, pszdefaultname : LibC::LPWSTR, prgpsznames : LibC::LPWSTR*, cpsznames : UInt32, pszevent : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, ptisignature : ITypeInfo, imethodsignature : UInt32, isn : UInt32, dwcookie : UInt32, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_handler.call(this, pszdefaultname, prgpsznames, cpsznames, pszevent, pszdelimiter, ptisignature, imethodsignature, isn, dwcookie, ppse)
  end
  def get_text(this : IScriptEntry*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, pbstr)
  end
  def set_text(this : IScriptEntry*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text.call(this, psz)
  end
  def get_body(this : IScriptEntry*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_body.call(this, pbstr)
  end
  def set_body(this : IScriptEntry*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_body.call(this, psz)
  end
  def get_name(this : IScriptEntry*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstr)
  end
  def set_name(this : IScriptEntry*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, psz)
  end
  def get_item_name(this : IScriptEntry*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_item_name.call(this, pbstr)
  end
  def set_item_name(this : IScriptEntry*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_item_name.call(this, psz)
  end
  def get_signature(this : IScriptEntry*, ppti : ITypeInfo*, pimethod : UInt32*) : HRESULT
    @lpVtbl.value.get_signature.call(this, ppti, pimethod)
  end
  def set_signature(this : IScriptEntry*, pti : ITypeInfo, imethod : UInt32) : HRESULT
    @lpVtbl.value.set_signature.call(this, pti, imethod)
  end
  def get_range(this : IScriptEntry*, pichmin : UInt32*, pcch : UInt32*) : HRESULT
    @lpVtbl.value.get_range.call(this, pichmin, pcch)
  end
end
struct LibWin32::IScriptScriptlet
  def query_interface(this : IScriptScriptlet*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptScriptlet*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptScriptlet*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def alive(this : IScriptScriptlet*) : HRESULT
    @lpVtbl.value.alive.call(this)
  end
  def delete(this : IScriptScriptlet*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_parent(this : IScriptScriptlet*, ppsnparent : IScriptNode*) : HRESULT
    @lpVtbl.value.get_parent.call(this, ppsnparent)
  end
  def get_index_in_parent(this : IScriptScriptlet*, pisn : UInt32*) : HRESULT
    @lpVtbl.value.get_index_in_parent.call(this, pisn)
  end
  def get_cookie(this : IScriptScriptlet*, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.get_cookie.call(this, pdwcookie)
  end
  def get_number_of_children(this : IScriptScriptlet*, pcsn : UInt32*) : HRESULT
    @lpVtbl.value.get_number_of_children.call(this, pcsn)
  end
  def get_child(this : IScriptScriptlet*, isn : UInt32, ppsn : IScriptNode*) : HRESULT
    @lpVtbl.value.get_child.call(this, isn, ppsn)
  end
  def get_language(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, pbstr)
  end
  def create_child_entry(this : IScriptScriptlet*, isn : UInt32, dwcookie : UInt32, pszdelimiter : LibC::LPWSTR, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_entry.call(this, isn, dwcookie, pszdelimiter, ppse)
  end
  def create_child_handler(this : IScriptScriptlet*, pszdefaultname : LibC::LPWSTR, prgpsznames : LibC::LPWSTR*, cpsznames : UInt32, pszevent : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, ptisignature : ITypeInfo, imethodsignature : UInt32, isn : UInt32, dwcookie : UInt32, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.create_child_handler.call(this, pszdefaultname, prgpsznames, cpsznames, pszevent, pszdelimiter, ptisignature, imethodsignature, isn, dwcookie, ppse)
  end
  def get_text(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, pbstr)
  end
  def set_text(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_text.call(this, psz)
  end
  def get_body(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_body.call(this, pbstr)
  end
  def set_body(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_body.call(this, psz)
  end
  def get_name(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstr)
  end
  def set_name(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_name.call(this, psz)
  end
  def get_item_name(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_item_name.call(this, pbstr)
  end
  def set_item_name(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_item_name.call(this, psz)
  end
  def get_signature(this : IScriptScriptlet*, ppti : ITypeInfo*, pimethod : UInt32*) : HRESULT
    @lpVtbl.value.get_signature.call(this, ppti, pimethod)
  end
  def set_signature(this : IScriptScriptlet*, pti : ITypeInfo, imethod : UInt32) : HRESULT
    @lpVtbl.value.set_signature.call(this, pti, imethod)
  end
  def get_range(this : IScriptScriptlet*, pichmin : UInt32*, pcch : UInt32*) : HRESULT
    @lpVtbl.value.get_range.call(this, pichmin, pcch)
  end
  def get_sub_item_name(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_sub_item_name.call(this, pbstr)
  end
  def set_sub_item_name(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_sub_item_name.call(this, psz)
  end
  def get_event_name(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_event_name.call(this, pbstr)
  end
  def set_event_name(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_event_name.call(this, psz)
  end
  def get_simple_event_name(this : IScriptScriptlet*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_simple_event_name.call(this, pbstr)
  end
  def set_simple_event_name(this : IScriptScriptlet*, psz : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_simple_event_name.call(this, psz)
  end
end
struct LibWin32::IActiveScriptAuthor
  def query_interface(this : IActiveScriptAuthor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptAuthor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptAuthor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_named_item(this : IActiveScriptAuthor*, pszname : LibC::LPWSTR, dwflags : UInt32, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.add_named_item.call(this, pszname, dwflags, pdisp)
  end
  def add_scriptlet(this : IActiveScriptAuthor*, pszdefaultname : LibC::LPWSTR, pszcode : LibC::LPWSTR, pszitemname : LibC::LPWSTR, pszsubitemname : LibC::LPWSTR, pszeventname : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, dwcookie : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_scriptlet.call(this, pszdefaultname, pszcode, pszitemname, pszsubitemname, pszeventname, pszdelimiter, dwcookie, dwflags)
  end
  def parse_script_text(this : IActiveScriptAuthor*, pszcode : LibC::LPWSTR, pszitemname : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, dwcookie : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.parse_script_text.call(this, pszcode, pszitemname, pszdelimiter, dwcookie, dwflags)
  end
  def get_script_text_attributes(this : IActiveScriptAuthor*, pszcode : Char*, cch : UInt32, pszdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_script_text_attributes.call(this, pszcode, cch, pszdelimiter, dwflags, pattr)
  end
  def get_scriptlet_text_attributes(this : IActiveScriptAuthor*, pszcode : Char*, cch : UInt32, pszdelimiter : LibC::LPWSTR, dwflags : UInt32, pattr : UInt16*) : HRESULT
    @lpVtbl.value.get_scriptlet_text_attributes.call(this, pszcode, cch, pszdelimiter, dwflags, pattr)
  end
  def get_root(this : IActiveScriptAuthor*, ppsp : IScriptNode*) : HRESULT
    @lpVtbl.value.get_root.call(this, ppsp)
  end
  def get_language_flags(this : IActiveScriptAuthor*, pgrfasa : UInt32*) : HRESULT
    @lpVtbl.value.get_language_flags.call(this, pgrfasa)
  end
  def get_event_handler(this : IActiveScriptAuthor*, pdisp : IDispatch, pszitem : LibC::LPWSTR, pszsubitem : LibC::LPWSTR, pszevent : LibC::LPWSTR, ppse : IScriptEntry*) : HRESULT
    @lpVtbl.value.get_event_handler.call(this, pdisp, pszitem, pszsubitem, pszevent, ppse)
  end
  def remove_named_item(this : IActiveScriptAuthor*, pszname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.remove_named_item.call(this, pszname)
  end
  def add_type_lib(this : IActiveScriptAuthor*, rguidtypelib : Guid*, dwmajor : UInt32, dwminor : UInt32, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_type_lib.call(this, rguidtypelib, dwmajor, dwminor, dwflags)
  end
  def remove_type_lib(this : IActiveScriptAuthor*, rguidtypelib : Guid*, dwmajor : UInt32, dwminor : UInt32) : HRESULT
    @lpVtbl.value.remove_type_lib.call(this, rguidtypelib, dwmajor, dwminor)
  end
  def get_chars(this : IActiveScriptAuthor*, frequestedlist : UInt32, pbstrchars : UInt8**) : HRESULT
    @lpVtbl.value.get_chars.call(this, frequestedlist, pbstrchars)
  end
  def get_info_from_context(this : IActiveScriptAuthor*, pszcode : LibC::LPWSTR, cchcode : UInt32, ichcurrentposition : UInt32, dwlisttypesrequested : UInt32, pdwlisttypesprovided : UInt32*, pichlistanchorposition : UInt32*, pichfuncanchorposition : UInt32*, pmemid : Int32*, picurrentparameter : Int32*, ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_info_from_context.call(this, pszcode, cchcode, ichcurrentposition, dwlisttypesrequested, pdwlisttypesprovided, pichlistanchorposition, pichfuncanchorposition, pmemid, picurrentparameter, ppunk)
  end
  def is_commit_char(this : IActiveScriptAuthor*, ch : Char, pfcommit : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_commit_char.call(this, ch, pfcommit)
  end
end
struct LibWin32::IActiveScriptAuthorProcedure
  def query_interface(this : IActiveScriptAuthorProcedure*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptAuthorProcedure*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptAuthorProcedure*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def parse_procedure_text(this : IActiveScriptAuthorProcedure*, pszcode : LibC::LPWSTR, pszformalparams : LibC::LPWSTR, pszprocedurename : LibC::LPWSTR, pszitemname : LibC::LPWSTR, pszdelimiter : LibC::LPWSTR, dwcookie : UInt32, dwflags : UInt32, pdispfor : IDispatch) : HRESULT
    @lpVtbl.value.parse_procedure_text.call(this, pszcode, pszformalparams, pszprocedurename, pszitemname, pszdelimiter, dwcookie, dwflags, pdispfor)
  end
end
struct LibWin32::IDebugApplicationNode100
  def query_interface(this : IDebugApplicationNode100*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationNode100*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationNode100*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_filter_for_event_sink(this : IDebugApplicationNode100*, dwcookie : UInt32, filter : APPLICATION_NODE_EVENT_FILTER) : HRESULT
    @lpVtbl.value.set_filter_for_event_sink.call(this, dwcookie, filter)
  end
  def get_excluded_documents(this : IDebugApplicationNode100*, filter : APPLICATION_NODE_EVENT_FILTER, pdocuments : TEXT_DOCUMENT_ARRAY*) : HRESULT
    @lpVtbl.value.get_excluded_documents.call(this, filter, pdocuments)
  end
  def query_is_child_node(this : IDebugApplicationNode100*, psearchkey : IDebugDocument) : HRESULT
    @lpVtbl.value.query_is_child_node.call(this, psearchkey)
  end
end
struct LibWin32::IWebAppDiagnosticsSetup
  def query_interface(this : IWebAppDiagnosticsSetup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebAppDiagnosticsSetup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebAppDiagnosticsSetup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def diagnostics_supported(this : IWebAppDiagnosticsSetup*, pretval : Int16*) : HRESULT
    @lpVtbl.value.diagnostics_supported.call(this, pretval)
  end
  def create_object_with_site_at_web_app(this : IWebAppDiagnosticsSetup*, rclsid : Guid*, dwclscontext : UInt32, riid : Guid*, hpasstoobject : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.create_object_with_site_at_web_app.call(this, rclsid, dwclscontext, riid, hpasstoobject)
  end
end
struct LibWin32::IRemoteDebugApplication110
  def query_interface(this : IRemoteDebugApplication110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugApplication110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugApplication110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_debugger_options(this : IRemoteDebugApplication110*, mask : SCRIPT_DEBUGGER_OPTIONS, value : SCRIPT_DEBUGGER_OPTIONS) : HRESULT
    @lpVtbl.value.set_debugger_options.call(this, mask, value)
  end
  def get_current_debugger_options(this : IRemoteDebugApplication110*, pcurrentoptions : SCRIPT_DEBUGGER_OPTIONS*) : HRESULT
    @lpVtbl.value.get_current_debugger_options.call(this, pcurrentoptions)
  end
  def get_main_thread(this : IRemoteDebugApplication110*, ppthread : IRemoteDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_main_thread.call(this, ppthread)
  end
end
struct LibWin32::IDebugApplication11032
  def query_interface(this : IDebugApplication11032*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplication11032*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplication11032*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_debugger_options(this : IDebugApplication11032*, mask : SCRIPT_DEBUGGER_OPTIONS, value : SCRIPT_DEBUGGER_OPTIONS) : HRESULT
    @lpVtbl.value.set_debugger_options.call(this, mask, value)
  end
  def get_current_debugger_options(this : IDebugApplication11032*, pcurrentoptions : SCRIPT_DEBUGGER_OPTIONS*) : HRESULT
    @lpVtbl.value.get_current_debugger_options.call(this, pcurrentoptions)
  end
  def get_main_thread(this : IDebugApplication11032*, ppthread : IRemoteDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_main_thread.call(this, ppthread)
  end
  def synchronous_call_in_main_thread(this : IDebugApplication11032*, pptc : IDebugThreadCall32, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.synchronous_call_in_main_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def asynchronous_call_in_main_thread(this : IDebugApplication11032*, pptc : IDebugThreadCall32, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.asynchronous_call_in_main_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def callable_wait_for_handles(this : IDebugApplication11032*, handlecount : UInt32, phandles : LibC::HANDLE*, pindex : UInt32*) : HRESULT
    @lpVtbl.value.callable_wait_for_handles.call(this, handlecount, phandles, pindex)
  end
end
struct LibWin32::IDebugApplication11064
  def query_interface(this : IDebugApplication11064*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplication11064*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplication11064*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_debugger_options(this : IDebugApplication11064*, mask : SCRIPT_DEBUGGER_OPTIONS, value : SCRIPT_DEBUGGER_OPTIONS) : HRESULT
    @lpVtbl.value.set_debugger_options.call(this, mask, value)
  end
  def get_current_debugger_options(this : IDebugApplication11064*, pcurrentoptions : SCRIPT_DEBUGGER_OPTIONS*) : HRESULT
    @lpVtbl.value.get_current_debugger_options.call(this, pcurrentoptions)
  end
  def get_main_thread(this : IDebugApplication11064*, ppthread : IRemoteDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_main_thread.call(this, ppthread)
  end
  def synchronous_call_in_main_thread(this : IDebugApplication11064*, pptc : IDebugThreadCall64, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.synchronous_call_in_main_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def asynchronous_call_in_main_thread(this : IDebugApplication11064*, pptc : IDebugThreadCall64, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.asynchronous_call_in_main_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
  def callable_wait_for_handles(this : IDebugApplication11064*, handlecount : UInt32, phandles : LibC::HANDLE*, pindex : UInt32*) : HRESULT
    @lpVtbl.value.callable_wait_for_handles.call(this, handlecount, phandles, pindex)
  end
end
struct LibWin32::IWebAppDiagnosticsObjectInitialization
  def query_interface(this : IWebAppDiagnosticsObjectInitialization*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebAppDiagnosticsObjectInitialization*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebAppDiagnosticsObjectInitialization*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IWebAppDiagnosticsObjectInitialization*, hpassedhandle : HANDLE_PTR, pdebugapplication : IUnknown) : HRESULT
    @lpVtbl.value.initialize.call(this, hpassedhandle, pdebugapplication)
  end
end
struct LibWin32::IActiveScriptWinRTErrorDebug
  def query_interface(this : IActiveScriptWinRTErrorDebug*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptWinRTErrorDebug*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptWinRTErrorDebug*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_exception_info(this : IActiveScriptWinRTErrorDebug*, pexcepinfo : EXCEPINFO*) : HRESULT
    @lpVtbl.value.get_exception_info.call(this, pexcepinfo)
  end
  def get_source_position(this : IActiveScriptWinRTErrorDebug*, pdwsourcecontext : UInt32*, pullinenumber : UInt32*, plcharacterposition : Int32*) : HRESULT
    @lpVtbl.value.get_source_position.call(this, pdwsourcecontext, pullinenumber, plcharacterposition)
  end
  def get_source_line_text(this : IActiveScriptWinRTErrorDebug*, pbstrsourceline : UInt8**) : HRESULT
    @lpVtbl.value.get_source_line_text.call(this, pbstrsourceline)
  end
  def get_restricted_error_string(this : IActiveScriptWinRTErrorDebug*, errorstring : UInt8**) : HRESULT
    @lpVtbl.value.get_restricted_error_string.call(this, errorstring)
  end
  def get_restricted_error_reference(this : IActiveScriptWinRTErrorDebug*, referencestring : UInt8**) : HRESULT
    @lpVtbl.value.get_restricted_error_reference.call(this, referencestring)
  end
  def get_capability_sid(this : IActiveScriptWinRTErrorDebug*, capabilitysid : UInt8**) : HRESULT
    @lpVtbl.value.get_capability_sid.call(this, capabilitysid)
  end
end
struct LibWin32::IActiveScriptErrorDebug110
  def query_interface(this : IActiveScriptErrorDebug110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveScriptErrorDebug110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveScriptErrorDebug110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_exception_thrown_kind(this : IActiveScriptErrorDebug110*, pexceptionkind : SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND*) : HRESULT
    @lpVtbl.value.get_exception_thrown_kind.call(this, pexceptionkind)
  end
end
struct LibWin32::IDebugApplicationThreadEvents110
  def query_interface(this : IDebugApplicationThreadEvents110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationThreadEvents110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationThreadEvents110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_suspend_for_break_point(this : IDebugApplicationThreadEvents110*) : HRESULT
    @lpVtbl.value.on_suspend_for_break_point.call(this)
  end
  def on_resume_from_break_point(this : IDebugApplicationThreadEvents110*) : HRESULT
    @lpVtbl.value.on_resume_from_break_point.call(this)
  end
  def on_thread_request_complete(this : IDebugApplicationThreadEvents110*) : HRESULT
    @lpVtbl.value.on_thread_request_complete.call(this)
  end
  def on_begin_thread_request(this : IDebugApplicationThreadEvents110*) : HRESULT
    @lpVtbl.value.on_begin_thread_request.call(this)
  end
end
struct LibWin32::IDebugApplicationThread11032
  def query_interface(this : IDebugApplicationThread11032*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationThread11032*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationThread11032*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_active_thread_request_count(this : IDebugApplicationThread11032*, puithreadrequests : UInt32*) : HRESULT
    @lpVtbl.value.get_active_thread_request_count.call(this, puithreadrequests)
  end
  def is_suspended_for_break_point(this : IDebugApplicationThread11032*, pfissuspended : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_suspended_for_break_point.call(this, pfissuspended)
  end
  def is_thread_callable(this : IDebugApplicationThread11032*, pfiscallable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_thread_callable.call(this, pfiscallable)
  end
  def asynchronous_call_into_thread(this : IDebugApplicationThread11032*, pptc : IDebugThreadCall32, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.asynchronous_call_into_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
end
struct LibWin32::IDebugApplicationThread11064
  def query_interface(this : IDebugApplicationThread11064*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugApplicationThread11064*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugApplicationThread11064*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_active_thread_request_count(this : IDebugApplicationThread11064*, puithreadrequests : UInt32*) : HRESULT
    @lpVtbl.value.get_active_thread_request_count.call(this, puithreadrequests)
  end
  def is_suspended_for_break_point(this : IDebugApplicationThread11064*, pfissuspended : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_suspended_for_break_point.call(this, pfissuspended)
  end
  def is_thread_callable(this : IDebugApplicationThread11064*, pfiscallable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_thread_callable.call(this, pfiscallable)
  end
  def asynchronous_call_into_thread(this : IDebugApplicationThread11064*, pptc : IDebugThreadCall64, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR, dwparam3 : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.asynchronous_call_into_thread.call(this, pptc, dwparam1, dwparam2, dwparam3)
  end
end
struct LibWin32::IRemoteDebugCriticalErrorEvent110
  def query_interface(this : IRemoteDebugCriticalErrorEvent110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugCriticalErrorEvent110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugCriticalErrorEvent110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_error_info(this : IRemoteDebugCriticalErrorEvent110*, pbstrsource : UInt8**, pmessageid : Int32*, pbstrmessage : UInt8**, pplocation : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_error_info.call(this, pbstrsource, pmessageid, pbstrmessage, pplocation)
  end
end
struct LibWin32::IScriptInvocationContext
  def query_interface(this : IScriptInvocationContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptInvocationContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptInvocationContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_context_type(this : IScriptInvocationContext*, pinvocationcontexttype : SCRIPT_INVOCATION_CONTEXT_TYPE*) : HRESULT
    @lpVtbl.value.get_context_type.call(this, pinvocationcontexttype)
  end
  def get_context_description(this : IScriptInvocationContext*, pdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_context_description.call(this, pdescription)
  end
  def get_context_object(this : IScriptInvocationContext*, ppcontextobject : IUnknown*) : HRESULT
    @lpVtbl.value.get_context_object.call(this, ppcontextobject)
  end
end
struct LibWin32::IDebugStackFrame110
  def query_interface(this : IDebugStackFrame110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugStackFrame110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugStackFrame110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_code_context(this : IDebugStackFrame110*, ppcc : IDebugCodeContext*) : HRESULT
    @lpVtbl.value.get_code_context.call(this, ppcc)
  end
  def get_description_string(this : IDebugStackFrame110*, flong : LibC::BOOL, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description_string.call(this, flong, pbstrdescription)
  end
  def get_language_string(this : IDebugStackFrame110*, flong : LibC::BOOL, pbstrlanguage : UInt8**) : HRESULT
    @lpVtbl.value.get_language_string.call(this, flong, pbstrlanguage)
  end
  def get_thread(this : IDebugStackFrame110*, ppat : IDebugApplicationThread*) : HRESULT
    @lpVtbl.value.get_thread.call(this, ppat)
  end
  def get_debug_property(this : IDebugStackFrame110*, ppdebugprop : IDebugProperty*) : HRESULT
    @lpVtbl.value.get_debug_property.call(this, ppdebugprop)
  end
  def get_stack_frame_type(this : IDebugStackFrame110*, pstackframekind : DEBUG_STACKFRAME_TYPE*) : HRESULT
    @lpVtbl.value.get_stack_frame_type.call(this, pstackframekind)
  end
  def get_script_invocation_context(this : IDebugStackFrame110*, ppinvocationcontext : IScriptInvocationContext*) : HRESULT
    @lpVtbl.value.get_script_invocation_context.call(this, ppinvocationcontext)
  end
end
struct LibWin32::IRemoteDebugInfoEvent110
  def query_interface(this : IRemoteDebugInfoEvent110*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRemoteDebugInfoEvent110*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRemoteDebugInfoEvent110*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_info(this : IRemoteDebugInfoEvent110*, pmessagetype : DEBUG_EVENT_INFO_TYPE*, pbstrmessage : UInt8**, pbstrurl : UInt8**, pplocation : IDebugDocumentContext*) : HRESULT
    @lpVtbl.value.get_event_info.call(this, pmessagetype, pbstrmessage, pbstrurl, pplocation)
  end
end
struct LibWin32::IJsDebug
  def query_interface(this : IJsDebug*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebug*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebug*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open_virtual_process(this : IJsDebug*, processid : UInt32, runtimejsbaseaddress : UInt64, pdatatarget : IJsDebugDataTarget, ppprocess : IJsDebugProcess*) : HRESULT
    @lpVtbl.value.open_virtual_process.call(this, processid, runtimejsbaseaddress, pdatatarget, ppprocess)
  end
end
struct LibWin32::IJsDebugProcess
  def query_interface(this : IJsDebugProcess*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugProcess*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugProcess*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_stack_walker(this : IJsDebugProcess*, threadid : UInt32, ppstackwalker : IJsDebugStackWalker*) : HRESULT
    @lpVtbl.value.create_stack_walker.call(this, threadid, ppstackwalker)
  end
  def create_break_point(this : IJsDebugProcess*, documentid : UInt64, characteroffset : UInt32, charactercount : UInt32, isenabled : LibC::BOOL, ppdebugbreakpoint : IJsDebugBreakPoint*) : HRESULT
    @lpVtbl.value.create_break_point.call(this, documentid, characteroffset, charactercount, isenabled, ppdebugbreakpoint)
  end
  def perform_async_break(this : IJsDebugProcess*, threadid : UInt32) : HRESULT
    @lpVtbl.value.perform_async_break.call(this, threadid)
  end
  def get_external_step_address(this : IJsDebugProcess*, pcodeaddress : UInt64*) : HRESULT
    @lpVtbl.value.get_external_step_address.call(this, pcodeaddress)
  end
end
struct LibWin32::IJsDebugStackWalker
  def query_interface(this : IJsDebugStackWalker*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugStackWalker*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugStackWalker*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_next(this : IJsDebugStackWalker*, ppframe : IJsDebugFrame*) : HRESULT
    @lpVtbl.value.get_next.call(this, ppframe)
  end
end
struct LibWin32::IJsDebugFrame
  def query_interface(this : IJsDebugFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_stack_range(this : IJsDebugFrame*, pstart : UInt64*, pend : UInt64*) : HRESULT
    @lpVtbl.value.get_stack_range.call(this, pstart, pend)
  end
  def get_name(this : IJsDebugFrame*, pname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pname)
  end
  def get_document_position_with_id(this : IJsDebugFrame*, pdocumentid : UInt64*, pcharacteroffset : UInt32*, pstatementcharcount : UInt32*) : HRESULT
    @lpVtbl.value.get_document_position_with_id.call(this, pdocumentid, pcharacteroffset, pstatementcharcount)
  end
  def get_document_position_with_name(this : IJsDebugFrame*, pdocumentname : UInt8**, pline : UInt32*, pcolumn : UInt32*) : HRESULT
    @lpVtbl.value.get_document_position_with_name.call(this, pdocumentname, pline, pcolumn)
  end
  def get_debug_property(this : IJsDebugFrame*, ppdebugproperty : IJsDebugProperty*) : HRESULT
    @lpVtbl.value.get_debug_property.call(this, ppdebugproperty)
  end
  def get_return_address(this : IJsDebugFrame*, preturnaddress : UInt64*) : HRESULT
    @lpVtbl.value.get_return_address.call(this, preturnaddress)
  end
  def evaluate(this : IJsDebugFrame*, pexpressiontext : LibC::LPWSTR, ppdebugproperty : IJsDebugProperty*, perror : UInt8**) : HRESULT
    @lpVtbl.value.evaluate.call(this, pexpressiontext, ppdebugproperty, perror)
  end
end
struct LibWin32::IJsDebugProperty
  def query_interface(this : IJsDebugProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_property_info(this : IJsDebugProperty*, nradix : UInt32, ppropertyinfo : JsDebugPropertyInfo*) : HRESULT
    @lpVtbl.value.get_property_info.call(this, nradix, ppropertyinfo)
  end
  def get_members(this : IJsDebugProperty*, members : JS_PROPERTY_MEMBERS, ppenum : IJsEnumDebugProperty*) : HRESULT
    @lpVtbl.value.get_members.call(this, members, ppenum)
  end
end
struct LibWin32::IJsEnumDebugProperty
  def query_interface(this : IJsEnumDebugProperty*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsEnumDebugProperty*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsEnumDebugProperty*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IJsEnumDebugProperty*, count : UInt32, ppdebugproperty : IJsDebugProperty*, pactualcount : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, count, ppdebugproperty, pactualcount)
  end
  def get_count(this : IJsEnumDebugProperty*, pcount : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pcount)
  end
end
struct LibWin32::IJsDebugBreakPoint
  def query_interface(this : IJsDebugBreakPoint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugBreakPoint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugBreakPoint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_enabled(this : IJsDebugBreakPoint*, pisenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_enabled.call(this, pisenabled)
  end
  def enable(this : IJsDebugBreakPoint*) : HRESULT
    @lpVtbl.value.enable.call(this)
  end
  def disable(this : IJsDebugBreakPoint*) : HRESULT
    @lpVtbl.value.disable.call(this)
  end
  def delete(this : IJsDebugBreakPoint*) : HRESULT
    @lpVtbl.value.delete.call(this)
  end
  def get_document_position(this : IJsDebugBreakPoint*, pdocumentid : UInt64*, pcharacteroffset : UInt32*, pstatementcharcount : UInt32*) : HRESULT
    @lpVtbl.value.get_document_position.call(this, pdocumentid, pcharacteroffset, pstatementcharcount)
  end
end
struct LibWin32::IEnumJsStackFrames
  def query_interface(this : IEnumJsStackFrames*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumJsStackFrames*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumJsStackFrames*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumJsStackFrames*, cframecount : UInt32, pframes : MIDL___MIDL_itf_jscript9diag_0000_0007_0001*, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, cframecount, pframes, pcfetched)
  end
  def reset(this : IEnumJsStackFrames*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
end
struct LibWin32::IJsDebugDataTarget
  def query_interface(this : IJsDebugDataTarget*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJsDebugDataTarget*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJsDebugDataTarget*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read_memory(this : IJsDebugDataTarget*, address : UInt64, flags : JsDebugReadMemoryFlags, pbuffer : UInt8*, size : UInt32, pbytesread : UInt32*) : HRESULT
    @lpVtbl.value.read_memory.call(this, address, flags, pbuffer, size, pbytesread)
  end
  def write_memory(this : IJsDebugDataTarget*, address : UInt64, pmemory : UInt8*, size : UInt32) : HRESULT
    @lpVtbl.value.write_memory.call(this, address, pmemory, size)
  end
  def allocate_virtual_memory(this : IJsDebugDataTarget*, address : UInt64, size : UInt32, allocationtype : UInt32, pageprotection : UInt32, pallocatedaddress : UInt64*) : HRESULT
    @lpVtbl.value.allocate_virtual_memory.call(this, address, size, allocationtype, pageprotection, pallocatedaddress)
  end
  def free_virtual_memory(this : IJsDebugDataTarget*, address : UInt64, size : UInt32, freetype : UInt32) : HRESULT
    @lpVtbl.value.free_virtual_memory.call(this, address, size, freetype)
  end
  def get_tls_value(this : IJsDebugDataTarget*, threadid : UInt32, tlsindex : UInt32, pvalue : UInt64*) : HRESULT
    @lpVtbl.value.get_tls_value.call(this, threadid, tlsindex, pvalue)
  end
  def read_bstr(this : IJsDebugDataTarget*, address : UInt64, pstring : UInt8**) : HRESULT
    @lpVtbl.value.read_bstr.call(this, address, pstring)
  end
  def read_null_terminated_string(this : IJsDebugDataTarget*, address : UInt64, charactersize : UInt16, maxcharacters : UInt32, pstring : UInt8**) : HRESULT
    @lpVtbl.value.read_null_terminated_string.call(this, address, charactersize, maxcharacters, pstring)
  end
  def create_stack_frame_enumerator(this : IJsDebugDataTarget*, threadid : UInt32, ppenumerator : IEnumJsStackFrames*) : HRESULT
    @lpVtbl.value.create_stack_frame_enumerator.call(this, threadid, ppenumerator)
  end
  def get_thread_context(this : IJsDebugDataTarget*, threadid : UInt32, contextflags : UInt32, contextsize : UInt32, pcontext : Void*) : HRESULT
    @lpVtbl.value.get_thread_context.call(this, threadid, contextflags, contextsize, pcontext)
  end
end
struct LibWin32::IObjectSafety
  def query_interface(this : IObjectSafety*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IObjectSafety*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IObjectSafety*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_interface_safety_options(this : IObjectSafety*, riid : Guid*, pdwsupportedoptions : UInt32*, pdwenabledoptions : UInt32*) : HRESULT
    @lpVtbl.value.get_interface_safety_options.call(this, riid, pdwsupportedoptions, pdwenabledoptions)
  end
  def set_interface_safety_options(this : IObjectSafety*, riid : Guid*, dwoptionsetmask : UInt32, dwenabledoptions : UInt32) : HRESULT
    @lpVtbl.value.set_interface_safety_options.call(this, riid, dwoptionsetmask, dwenabledoptions)
  end
end
