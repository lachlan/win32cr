require "../system/com.cr"
require "../foundation.cr"
require "../system/ole.cr"
require "../graphics/gdi.cr"
require "../ui/input/ime.cr"
require "../graphics/dxgi/common.cr"
require "../system/winrt.cr"
require "../ui/windowsandmessaging.cr"
require "../system/diagnostics/debug.cr"
require "../graphics/directdraw.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:msrating.dll")]
@[Link(ldflags: "/DELAYLOAD:imgutil.dll")]
@[Link(ldflags: "/DELAYLOAD:shdocvw.dll")]
{% else %}
@[Link("msrating")]
@[Link("imgutil")]
@[Link("shdocvw")]
{% end %}
lib LibWin32
  DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = 1999999_u32
  DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = -5501_i32
  DISPID_AMBIENT_SILENT = -5502_i32
  SID_SEditCommandTarget = "3050f4b5-98b5-11cf-bb82-00aa00bdce0b"
  CGID_EditStateCommands = "3050f4b6-98b5-11cf-bb82-00aa00bdce0b"
  SID_SHTMLEditHost = "3050f6a0-98b5-11cf-bb82-00aa00bdce0b"
  SID_SHTMLEditServices = "3050f7f9-98b5-11cf-bb82-00aa00bdce0b"
  COOKIEACTION_NONE = 0_u32
  COOKIEACTION_ACCEPT = 1_u32
  COOKIEACTION_REJECT = 2_u32
  COOKIEACTION_DOWNGRADE = 4_u32
  COOKIEACTION_LEASH = 8_u32
  COOKIEACTION_SUPPRESS = 16_u32
  COOKIEACTION_READ = 32_u32
  PRIVACY_URLISTOPLEVEL = 65536_u32
  PRIVACY_URLHASCOMPACTPOLICY = 131072_u32
  PRIVACY_URLHASPOSTDATA = 524288_u32
  PRIVACY_URLHASPOLICYREFLINK = 1048576_u32
  PRIVACY_URLHASPOLICYREFHEADER = 2097152_u32
  PRIVACY_URLHASP3PHEADER = 4194304_u32
  DEBUGCALLBACKNOTIFICATION_TIMEOUT = 1_u32
  DEBUGCALLBACKNOTIFICATION_INTERVAL = 2_u32
  DEBUGCALLBACKNOTIFICATION_IMMEDIATE = 4_u32
  DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME = 8_u32
  DEBUGCALLBACKNOTIFICATION_DOMEVENT = 16_u32
  DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED = 1_u32
  DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION = 2_u32
  DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION = 4_u32
  DISPID_BEFORENAVIGATE = 100_u32
  DISPID_NAVIGATECOMPLETE = 101_u32
  DISPID_STATUSTEXTCHANGE = 102_u32
  DISPID_QUIT = 103_u32
  DISPID_DOWNLOADCOMPLETE = 104_u32
  DISPID_COMMANDSTATECHANGE = 105_u32
  DISPID_DOWNLOADBEGIN = 106_u32
  DISPID_NEWWINDOW = 107_u32
  DISPID_PROGRESSCHANGE = 108_u32
  DISPID_WINDOWMOVE = 109_u32
  DISPID_WINDOWRESIZE = 110_u32
  DISPID_WINDOWACTIVATE = 111_u32
  DISPID_PROPERTYCHANGE = 112_u32
  DISPID_TITLECHANGE = 113_u32
  DISPID_TITLEICONCHANGE = 114_u32
  DISPID_FRAMEBEFORENAVIGATE = 200_u32
  DISPID_FRAMENAVIGATECOMPLETE = 201_u32
  DISPID_FRAMENEWWINDOW = 204_u32
  DISPID_BEFORENAVIGATE2 = 250_u32
  DISPID_NEWWINDOW2 = 251_u32
  DISPID_NAVIGATECOMPLETE2 = 252_u32
  DISPID_ONQUIT = 253_u32
  DISPID_ONVISIBLE = 254_u32
  DISPID_ONTOOLBAR = 255_u32
  DISPID_ONMENUBAR = 256_u32
  DISPID_ONSTATUSBAR = 257_u32
  DISPID_ONFULLSCREEN = 258_u32
  DISPID_DOCUMENTCOMPLETE = 259_u32
  DISPID_ONTHEATERMODE = 260_u32
  DISPID_ONADDRESSBAR = 261_u32
  DISPID_WINDOWSETRESIZABLE = 262_u32
  DISPID_WINDOWCLOSING = 263_u32
  DISPID_WINDOWSETLEFT = 264_u32
  DISPID_WINDOWSETTOP = 265_u32
  DISPID_WINDOWSETWIDTH = 266_u32
  DISPID_WINDOWSETHEIGHT = 267_u32
  DISPID_CLIENTTOHOSTWINDOW = 268_u32
  DISPID_SETSECURELOCKICON = 269_u32
  DISPID_FILEDOWNLOAD = 270_u32
  DISPID_NAVIGATEERROR = 271_u32
  DISPID_PRIVACYIMPACTEDSTATECHANGE = 272_u32
  DISPID_NEWWINDOW3 = 273_u32
  DISPID_VIEWUPDATE = 281_u32
  DISPID_SETPHISHINGFILTERSTATUS = 282_u32
  DISPID_WINDOWSTATECHANGED = 283_u32
  DISPID_NEWPROCESS = 284_u32
  DISPID_THIRDPARTYURLBLOCKED = 285_u32
  DISPID_REDIRECTXDOMAINBLOCKED = 286_u32
  DISPID_WEBWORKERSTARTED = 288_u32
  DISPID_WEBWORKERFINISHED = 289_u32
  DISPID_BEFORESCRIPTEXECUTE = 290_u32
  DISPID_PRINTTEMPLATEINSTANTIATION = 225_u32
  DISPID_PRINTTEMPLATETEARDOWN = 226_u32
  DISPID_UPDATEPAGESTATUS = 227_u32
  DISPID_WINDOWREGISTERED = 200_u32
  DISPID_WINDOWREVOKED = 201_u32
  DISPID_RESETFIRSTBOOTMODE = 1_u32
  DISPID_RESETSAFEMODE = 2_u32
  DISPID_REFRESHOFFLINEDESKTOP = 3_u32
  DISPID_ADDFAVORITE = 4_u32
  DISPID_ADDCHANNEL = 5_u32
  DISPID_ADDDESKTOPCOMPONENT = 6_u32
  DISPID_ISSUBSCRIBED = 7_u32
  DISPID_NAVIGATEANDFIND = 8_u32
  DISPID_IMPORTEXPORTFAVORITES = 9_u32
  DISPID_AUTOCOMPLETESAVEFORM = 10_u32
  DISPID_AUTOSCAN = 11_u32
  DISPID_AUTOCOMPLETEATTACH = 12_u32
  DISPID_SHOWBROWSERUI = 13_u32
  DISPID_ADDSEARCHPROVIDER = 14_u32
  DISPID_RUNONCESHOWN = 15_u32
  DISPID_SKIPRUNONCE = 16_u32
  DISPID_CUSTOMIZESETTINGS = 17_u32
  DISPID_SQMENABLED = 18_u32
  DISPID_PHISHINGENABLED = 19_u32
  DISPID_BRANDIMAGEURI = 20_u32
  DISPID_SKIPTABSWELCOME = 21_u32
  DISPID_DIAGNOSECONNECTION = 22_u32
  DISPID_CUSTOMIZECLEARTYPE = 23_u32
  DISPID_ISSEARCHPROVIDERINSTALLED = 24_u32
  DISPID_ISSEARCHMIGRATED = 25_u32
  DISPID_DEFAULTSEARCHPROVIDER = 26_u32
  DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE = 27_u32
  DISPID_RUNONCEHASSHOWN = 28_u32
  DISPID_SEARCHGUIDEURL = 29_u32
  DISPID_ADDSERVICE = 30_u32
  DISPID_ISSERVICEINSTALLED = 31_u32
  DISPID_ADDTOFAVORITESBAR = 32_u32
  DISPID_BUILDNEWTABPAGE = 33_u32
  DISPID_SETRECENTLYCLOSEDVISIBLE = 34_u32
  DISPID_SETACTIVITIESVISIBLE = 35_u32
  DISPID_CONTENTDISCOVERYRESET = 36_u32
  DISPID_INPRIVATEFILTERINGENABLED = 37_u32
  DISPID_SUGGESTEDSITESENABLED = 38_u32
  DISPID_ENABLESUGGESTEDSITES = 39_u32
  DISPID_NAVIGATETOSUGGESTEDSITES = 40_u32
  DISPID_SHOWTABSHELP = 41_u32
  DISPID_SHOWINPRIVATEHELP = 42_u32
  DISPID_ISSITEMODE = 43_u32
  DISPID_SETSITEMODEICONOVERLAY = 44_u32
  DISPID_CLEARSITEMODEICONOVERLAY = 45_u32
  DISPID_UPDATETHUMBNAILBUTTON = 46_u32
  DISPID_SETTHUMBNAILBUTTONS = 47_u32
  DISPID_ADDTHUMBNAILBUTTONS = 48_u32
  DISPID_ADDSITEMODE = 49_u32
  DISPID_SETSITEMODEPROPERTIES = 50_u32
  DISPID_SITEMODECREATEJUMPLIST = 51_u32
  DISPID_SITEMODEADDJUMPLISTITEM = 52_u32
  DISPID_SITEMODECLEARJUMPLIST = 53_u32
  DISPID_SITEMODEADDBUTTONSTYLE = 54_u32
  DISPID_SITEMODESHOWBUTTONSTYLE = 55_u32
  DISPID_SITEMODESHOWJUMPLIST = 56_u32
  DISPID_ADDTRACKINGPROTECTIONLIST = 57_u32
  DISPID_SITEMODEACTIVATE = 58_u32
  DISPID_ISSITEMODEFIRSTRUN = 59_u32
  DISPID_TRACKINGPROTECTIONENABLED = 60_u32
  DISPID_ACTIVEXFILTERINGENABLED = 61_u32
  DISPID_PROVISIONNETWORKS = 62_u32
  DISPID_REPORTSAFEURL = 63_u32
  DISPID_SITEMODEREFRESHBADGE = 64_u32
  DISPID_SITEMODECLEARBADGE = 65_u32
  DISPID_DIAGNOSECONNECTIONUILESS = 66_u32
  DISPID_LAUNCHNETWORKCLIENTHELP = 67_u32
  DISPID_CHANGEDEFAULTBROWSER = 68_u32
  DISPID_STOPPERIODICUPDATE = 69_u32
  DISPID_STARTPERIODICUPDATE = 70_u32
  DISPID_CLEARNOTIFICATION = 71_u32
  DISPID_ENABLENOTIFICATIONQUEUE = 72_u32
  DISPID_PINNEDSITESTATE = 73_u32
  DISPID_LAUNCHINTERNETOPTIONS = 74_u32
  DISPID_STARTPERIODICUPDATEBATCH = 75_u32
  DISPID_ENABLENOTIFICATIONQUEUESQUARE = 76_u32
  DISPID_ENABLENOTIFICATIONQUEUEWIDE = 77_u32
  DISPID_ENABLENOTIFICATIONQUEUELARGE = 78_u32
  DISPID_SCHEDULEDTILENOTIFICATION = 79_u32
  DISPID_REMOVESCHEDULEDTILENOTIFICATION = 80_u32
  DISPID_STARTBADGEUPDATE = 81_u32
  DISPID_STOPBADGEUPDATE = 82_u32
  DISPID_ISMETAREFERRERAVAILABLE = 83_u32
  DISPID_SETEXPERIMENTALFLAG = 84_u32
  DISPID_GETEXPERIMENTALFLAG = 85_u32
  DISPID_SETEXPERIMENTALVALUE = 86_u32
  DISPID_GETEXPERIMENTALVALUE = 87_u32
  DISPID_HASNEEDIEAUTOLAUNCHFLAG = 88_u32
  DISPID_GETNEEDIEAUTOLAUNCHFLAG = 89_u32
  DISPID_SETNEEDIEAUTOLAUNCHFLAG = 90_u32
  DISPID_LAUNCHIE = 91_u32
  DISPID_RESETEXPERIMENTALFLAGS = 92_u32
  DISPID_GETCVLISTDATA = 93_u32
  DISPID_GETCVLISTLOCALDATA = 94_u32
  DISPID_GETEMIELISTDATA = 95_u32
  DISPID_GETEMIELISTLOCALDATA = 96_u32
  DISPID_OPENFAVORITESPANE = 97_u32
  DISPID_OPENFAVORITESSETTINGS = 98_u32
  DISPID_LAUNCHINHVSI = 99_u32
  DISPID_GETNEEDHVSIAUTOLAUNCHFLAG = 100_u32
  DISPID_SETNEEDHVSIAUTOLAUNCHFLAG = 101_u32
  DISPID_HASNEEDHVSIAUTOLAUNCHFLAG = 102_u32
  DISPID_GETOSSKU = 103_u32
  DISPID_SETMSDEFAULTS = 104_u32
  DISPID_SHELLUIHELPERLAST = 105_u32
  DISPID_ADVANCEERROR = 10_u32
  DISPID_RETREATERROR = 11_u32
  DISPID_CANADVANCEERROR = 12_u32
  DISPID_CANRETREATERROR = 13_u32
  DISPID_GETERRORLINE = 14_u32
  DISPID_GETERRORCHAR = 15_u32
  DISPID_GETERRORCODE = 16_u32
  DISPID_GETERRORMSG = 17_u32
  DISPID_GETERRORURL = 18_u32
  DISPID_GETDETAILSSTATE = 19_u32
  DISPID_SETDETAILSSTATE = 20_u32
  DISPID_GETPERERRSTATE = 21_u32
  DISPID_SETPERERRSTATE = 22_u32
  DISPID_GETALWAYSSHOWLOCKSTATE = 23_u32
  DISPID_FAVSELECTIONCHANGE = 1_u32
  DISPID_SELECTIONCHANGE = 2_u32
  DISPID_DOUBLECLICK = 3_u32
  DISPID_INITIALIZED = 4_u32
  DISPID_MOVESELECTIONUP = 1_u32
  DISPID_MOVESELECTIONDOWN = 2_u32
  DISPID_RESETSORT = 3_u32
  DISPID_NEWFOLDER = 4_u32
  DISPID_SYNCHRONIZE = 5_u32
  DISPID_IMPORT = 6_u32
  DISPID_EXPORT = 7_u32
  DISPID_INVOKECONTEXTMENU = 8_u32
  DISPID_MOVESELECTIONTO = 9_u32
  DISPID_SUBSCRIPTIONSENABLED = 10_u32
  DISPID_CREATESUBSCRIPTION = 11_u32
  DISPID_DELETESUBSCRIPTION = 12_u32
  DISPID_SETROOT = 13_u32
  DISPID_ENUMOPTIONS = 14_u32
  DISPID_SELECTEDITEM = 15_u32
  DISPID_ROOT = 16_u32
  DISPID_DEPTH = 17_u32
  DISPID_MODE = 18_u32
  DISPID_FLAGS = 19_u32
  DISPID_TVFLAGS = 20_u32
  DISPID_NSCOLUMNS = 21_u32
  DISPID_COUNTVIEWTYPES = 22_u32
  DISPID_SETVIEWTYPE = 23_u32
  DISPID_SELECTEDITEMS = 24_u32
  DISPID_EXPAND = 25_u32
  DISPID_UNSELECTALL = 26_u32
  TF_NAVIGATE = 2142153644_u32
  REGSTR_VAL_SMOOTHSCROLL_DEF = 1_u32
  REGSTR_VAL_USEICM_DEF = 0_u32
  MAX_SEARCH_FORMAT_STRING = 255_u32
  REGSTR_VAL_SECURITYWARNONSEND_DEF = 1_u32
  REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 1_u32
  REGSTR_VAL_SECURITYWARNONVIEW_DEF = 1_u32
  REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 1_u32
  REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 1_u32
  REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 1_u32
  REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 1_u32
  REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0_u32
  REGSTR_VAL_SECURITYACTIVEX_DEF = 1_u32
  REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 1_u32
  REGSTR_VAL_SECURITYJAVA_DEF = 1_u32
  REGSTR_VAL_JAVAJIT_DEF = 0_u32
  REGSTR_VAL_JAVALOGGING_DEF = 0_u32
  REGSTR_VAL_VISIBLEBANDS_DEF = 7_u32
  TOOLSBAND = 1_u32
  ADDRESSBAND = 2_u32
  LINKSBAND = 4_u32
  REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 1_u32
  IE_USE_OE_PRESENT_HKEY = -2147483646_i32
  IE_USE_OE_MAIL_HKEY = -2147483647_i32
  IE_USE_OE_NEWS_HKEY = -2147483647_i32
  REGSTR_VAL_FONT_SIZE_DEF = 2_u32
  IDM_UNKNOWN = 0_u32
  IDM_ALIGNBOTTOM = 1_u32
  IDM_ALIGNHORIZONTALCENTERS = 2_u32
  IDM_ALIGNLEFT = 3_u32
  IDM_ALIGNRIGHT = 4_u32
  IDM_ALIGNTOGRID = 5_u32
  IDM_ALIGNTOP = 6_u32
  IDM_ALIGNVERTICALCENTERS = 7_u32
  IDM_ARRANGEBOTTOM = 8_u32
  IDM_ARRANGERIGHT = 9_u32
  IDM_BRINGFORWARD = 10_u32
  IDM_BRINGTOFRONT = 11_u32
  IDM_CENTERHORIZONTALLY = 12_u32
  IDM_CENTERVERTICALLY = 13_u32
  IDM_CODE = 14_u32
  IDM_DELETE = 17_u32
  IDM_FONTNAME = 18_u32
  IDM_FONTSIZE = 19_u32
  IDM_GROUP = 20_u32
  IDM_HORIZSPACECONCATENATE = 21_u32
  IDM_HORIZSPACEDECREASE = 22_u32
  IDM_HORIZSPACEINCREASE = 23_u32
  IDM_HORIZSPACEMAKEEQUAL = 24_u32
  IDM_INSERTOBJECT = 25_u32
  IDM_MULTILEVELREDO = 30_u32
  IDM_SENDBACKWARD = 32_u32
  IDM_SENDTOBACK = 33_u32
  IDM_SHOWTABLE = 34_u32
  IDM_SIZETOCONTROL = 35_u32
  IDM_SIZETOCONTROLHEIGHT = 36_u32
  IDM_SIZETOCONTROLWIDTH = 37_u32
  IDM_SIZETOFIT = 38_u32
  IDM_SIZETOGRID = 39_u32
  IDM_SNAPTOGRID = 40_u32
  IDM_TABORDER = 41_u32
  IDM_TOOLBOX = 42_u32
  IDM_MULTILEVELUNDO = 44_u32
  IDM_UNGROUP = 45_u32
  IDM_VERTSPACECONCATENATE = 46_u32
  IDM_VERTSPACEDECREASE = 47_u32
  IDM_VERTSPACEINCREASE = 48_u32
  IDM_VERTSPACEMAKEEQUAL = 49_u32
  IDM_JUSTIFYFULL = 50_u32
  IDM_BACKCOLOR = 51_u32
  IDM_BOLD = 52_u32
  IDM_BORDERCOLOR = 53_u32
  IDM_FLAT = 54_u32
  IDM_FORECOLOR = 55_u32
  IDM_ITALIC = 56_u32
  IDM_JUSTIFYCENTER = 57_u32
  IDM_JUSTIFYGENERAL = 58_u32
  IDM_JUSTIFYLEFT = 59_u32
  IDM_JUSTIFYRIGHT = 60_u32
  IDM_RAISED = 61_u32
  IDM_SUNKEN = 62_u32
  IDM_UNDERLINE = 63_u32
  IDM_CHISELED = 64_u32
  IDM_ETCHED = 65_u32
  IDM_SHADOWED = 66_u32
  IDM_FIND = 67_u32
  IDM_SHOWGRID = 69_u32
  IDM_OBJECTVERBLIST0 = 72_u32
  IDM_OBJECTVERBLIST1 = 73_u32
  IDM_OBJECTVERBLIST2 = 74_u32
  IDM_OBJECTVERBLIST3 = 75_u32
  IDM_OBJECTVERBLIST4 = 76_u32
  IDM_OBJECTVERBLIST5 = 77_u32
  IDM_OBJECTVERBLIST6 = 78_u32
  IDM_OBJECTVERBLIST7 = 79_u32
  IDM_OBJECTVERBLIST8 = 80_u32
  IDM_OBJECTVERBLIST9 = 81_u32
  IDM_OBJECTVERBLISTLAST = 81_u32
  IDM_CONVERTOBJECT = 82_u32
  IDM_CUSTOMCONTROL = 83_u32
  IDM_CUSTOMIZEITEM = 84_u32
  IDM_RENAME = 85_u32
  IDM_IMPORT = 86_u32
  IDM_NEWPAGE = 87_u32
  IDM_MOVE = 88_u32
  IDM_CANCEL = 89_u32
  IDM_FONT = 90_u32
  IDM_STRIKETHROUGH = 91_u32
  IDM_DELETEWORD = 92_u32
  IDM_EXECPRINT = 93_u32
  IDM_JUSTIFYNONE = 94_u32
  IDM_TRISTATEBOLD = 95_u32
  IDM_TRISTATEITALIC = 96_u32
  IDM_TRISTATEUNDERLINE = 97_u32
  IDM_FORWARDDELETE = 98_u32
  IDM_FOLLOW_ANCHOR = 2008_u32
  IDM_INSINPUTIMAGE = 2114_u32
  IDM_INSINPUTBUTTON = 2115_u32
  IDM_INSINPUTRESET = 2116_u32
  IDM_INSINPUTSUBMIT = 2117_u32
  IDM_INSINPUTUPLOAD = 2118_u32
  IDM_INSFIELDSET = 2119_u32
  IDM_PASTEINSERT = 2120_u32
  IDM_REPLACE = 2121_u32
  IDM_EDITSOURCE = 2122_u32
  IDM_BOOKMARK = 2123_u32
  IDM_HYPERLINK = 2124_u32
  IDM_UNLINK = 2125_u32
  IDM_BROWSEMODE = 2126_u32
  IDM_EDITMODE = 2127_u32
  IDM_UNBOOKMARK = 2128_u32
  IDM_TOOLBARS = 2130_u32
  IDM_STATUSBAR = 2131_u32
  IDM_FORMATMARK = 2132_u32
  IDM_TEXTONLY = 2133_u32
  IDM_OPTIONS = 2135_u32
  IDM_FOLLOWLINKC = 2136_u32
  IDM_FOLLOWLINKN = 2137_u32
  IDM_VIEWSOURCE = 2139_u32
  IDM_ZOOMPOPUP = 2140_u32
  IDM_BASELINEFONT1 = 2141_u32
  IDM_BASELINEFONT2 = 2142_u32
  IDM_BASELINEFONT3 = 2143_u32
  IDM_BASELINEFONT4 = 2144_u32
  IDM_BASELINEFONT5 = 2145_u32
  IDM_HORIZONTALLINE = 2150_u32
  IDM_LINEBREAKNORMAL = 2151_u32
  IDM_LINEBREAKLEFT = 2152_u32
  IDM_LINEBREAKRIGHT = 2153_u32
  IDM_LINEBREAKBOTH = 2154_u32
  IDM_NONBREAK = 2155_u32
  IDM_SPECIALCHAR = 2156_u32
  IDM_HTMLSOURCE = 2157_u32
  IDM_IFRAME = 2158_u32
  IDM_HTMLCONTAIN = 2159_u32
  IDM_TEXTBOX = 2161_u32
  IDM_TEXTAREA = 2162_u32
  IDM_CHECKBOX = 2163_u32
  IDM_RADIOBUTTON = 2164_u32
  IDM_DROPDOWNBOX = 2165_u32
  IDM_LISTBOX = 2166_u32
  IDM_BUTTON = 2167_u32
  IDM_IMAGE = 2168_u32
  IDM_OBJECT = 2169_u32
  IDM_1D = 2170_u32
  IDM_IMAGEMAP = 2171_u32
  IDM_FILE = 2172_u32
  IDM_COMMENT = 2173_u32
  IDM_SCRIPT = 2174_u32
  IDM_JAVAAPPLET = 2175_u32
  IDM_PLUGIN = 2176_u32
  IDM_PAGEBREAK = 2177_u32
  IDM_HTMLAREA = 2178_u32
  IDM_PARAGRAPH = 2180_u32
  IDM_FORM = 2181_u32
  IDM_MARQUEE = 2182_u32
  IDM_LIST = 2183_u32
  IDM_ORDERLIST = 2184_u32
  IDM_UNORDERLIST = 2185_u32
  IDM_INDENT = 2186_u32
  IDM_OUTDENT = 2187_u32
  IDM_PREFORMATTED = 2188_u32
  IDM_ADDRESS = 2189_u32
  IDM_BLINK = 2190_u32
  IDM_DIV = 2191_u32
  IDM_TABLEINSERT = 2200_u32
  IDM_RCINSERT = 2201_u32
  IDM_CELLINSERT = 2202_u32
  IDM_CAPTIONINSERT = 2203_u32
  IDM_CELLMERGE = 2204_u32
  IDM_CELLSPLIT = 2205_u32
  IDM_CELLSELECT = 2206_u32
  IDM_ROWSELECT = 2207_u32
  IDM_COLUMNSELECT = 2208_u32
  IDM_TABLESELECT = 2209_u32
  IDM_TABLEPROPERTIES = 2210_u32
  IDM_CELLPROPERTIES = 2211_u32
  IDM_ROWINSERT = 2212_u32
  IDM_COLUMNINSERT = 2213_u32
  IDM_HELP_CONTENT = 2220_u32
  IDM_HELP_ABOUT = 2221_u32
  IDM_HELP_README = 2222_u32
  IDM_REMOVEFORMAT = 2230_u32
  IDM_PAGEINFO = 2231_u32
  IDM_TELETYPE = 2232_u32
  IDM_GETBLOCKFMTS = 2233_u32
  IDM_BLOCKFMT = 2234_u32
  IDM_SHOWHIDE_CODE = 2235_u32
  IDM_TABLE = 2236_u32
  IDM_COPYFORMAT = 2237_u32
  IDM_PASTEFORMAT = 2238_u32
  IDM_GOTO = 2239_u32
  IDM_CHANGEFONT = 2240_u32
  IDM_CHANGEFONTSIZE = 2241_u32
  IDM_CHANGECASE = 2246_u32
  IDM_SHOWSPECIALCHAR = 2249_u32
  IDM_SUBSCRIPT = 2247_u32
  IDM_SUPERSCRIPT = 2248_u32
  IDM_CENTERALIGNPARA = 2250_u32
  IDM_LEFTALIGNPARA = 2251_u32
  IDM_RIGHTALIGNPARA = 2252_u32
  IDM_REMOVEPARAFORMAT = 2253_u32
  IDM_APPLYNORMAL = 2254_u32
  IDM_APPLYHEADING1 = 2255_u32
  IDM_APPLYHEADING2 = 2256_u32
  IDM_APPLYHEADING3 = 2257_u32
  IDM_DOCPROPERTIES = 2260_u32
  IDM_ADDFAVORITES = 2261_u32
  IDM_COPYSHORTCUT = 2262_u32
  IDM_SAVEBACKGROUND = 2263_u32
  IDM_SETWALLPAPER = 2264_u32
  IDM_COPYBACKGROUND = 2265_u32
  IDM_CREATESHORTCUT = 2266_u32
  IDM_PAGE = 2267_u32
  IDM_SAVETARGET = 2268_u32
  IDM_SHOWPICTURE = 2269_u32
  IDM_SAVEPICTURE = 2270_u32
  IDM_DYNSRCPLAY = 2271_u32
  IDM_DYNSRCSTOP = 2272_u32
  IDM_PRINTTARGET = 2273_u32
  IDM_IMGARTPLAY = 2274_u32
  IDM_IMGARTSTOP = 2275_u32
  IDM_IMGARTREWIND = 2276_u32
  IDM_PRINTQUERYJOBSPENDING = 2277_u32
  IDM_SETDESKTOPITEM = 2278_u32
  IDM_CONTEXTMENU = 2280_u32
  IDM_GOBACKWARD = 2282_u32
  IDM_GOFORWARD = 2283_u32
  IDM_PRESTOP = 2284_u32
  IDM_GOTOCLIPBOARDADDRESS = 2285_u32
  IDM_GOTOCLIPBOARDTEXT = 2286_u32
  IDM_MP_MYPICS = 2287_u32
  IDM_MP_EMAILPICTURE = 2288_u32
  IDM_MP_PRINTPICTURE = 2289_u32
  IDM_CREATELINK = 2290_u32
  IDM_COPYCONTENT = 2291_u32
  IDM_LANGUAGE = 2292_u32
  IDM_GETPRINTTEMPLATE = 2295_u32
  IDM_SETPRINTTEMPLATE = 2296_u32
  IDM_TEMPLATE_PAGESETUP = 2298_u32
  IDM_REFRESH = 2300_u32
  IDM_STOPDOWNLOAD = 2301_u32
  IDM_ENABLE_INTERACTION = 2302_u32
  IDM_LAUNCHDEBUGGER = 2310_u32
  IDM_BREAKATNEXT = 2311_u32
  IDM_INSINPUTHIDDEN = 2312_u32
  IDM_INSINPUTPASSWORD = 2313_u32
  IDM_OVERWRITE = 2314_u32
  IDM_PARSECOMPLETE = 2315_u32
  IDM_HTMLEDITMODE = 2316_u32
  IDM_REGISTRYREFRESH = 2317_u32
  IDM_COMPOSESETTINGS = 2318_u32
  IDM_SHOWALLTAGS = 2327_u32
  IDM_SHOWALIGNEDSITETAGS = 2321_u32
  IDM_SHOWSCRIPTTAGS = 2322_u32
  IDM_SHOWSTYLETAGS = 2323_u32
  IDM_SHOWCOMMENTTAGS = 2324_u32
  IDM_SHOWAREATAGS = 2325_u32
  IDM_SHOWUNKNOWNTAGS = 2326_u32
  IDM_SHOWMISCTAGS = 2320_u32
  IDM_SHOWZEROBORDERATDESIGNTIME = 2328_u32
  IDM_AUTODETECT = 2329_u32
  IDM_SCRIPTDEBUGGER = 2330_u32
  IDM_GETBYTESDOWNLOADED = 2331_u32
  IDM_NOACTIVATENORMALOLECONTROLS = 2332_u32
  IDM_NOACTIVATEDESIGNTIMECONTROLS = 2333_u32
  IDM_NOACTIVATEJAVAAPPLETS = 2334_u32
  IDM_NOFIXUPURLSONPASTE = 2335_u32
  IDM_EMPTYGLYPHTABLE = 2336_u32
  IDM_ADDTOGLYPHTABLE = 2337_u32
  IDM_REMOVEFROMGLYPHTABLE = 2338_u32
  IDM_REPLACEGLYPHCONTENTS = 2339_u32
  IDM_SHOWWBRTAGS = 2340_u32
  IDM_PERSISTSTREAMSYNC = 2341_u32
  IDM_SETDIRTY = 2342_u32
  IDM_RUNURLSCRIPT = 2343_u32
  IDM_ZOOMRATIO = 2344_u32
  IDM_GETZOOMNUMERATOR = 2345_u32
  IDM_GETZOOMDENOMINATOR = 2346_u32
  IDM_DIRLTR = 2350_u32
  IDM_DIRRTL = 2351_u32
  IDM_BLOCKDIRLTR = 2352_u32
  IDM_BLOCKDIRRTL = 2353_u32
  IDM_INLINEDIRLTR = 2354_u32
  IDM_INLINEDIRRTL = 2355_u32
  IDM_ISTRUSTEDDLG = 2356_u32
  IDM_INSERTSPAN = 2357_u32
  IDM_LOCALIZEEDITOR = 2358_u32
  IDM_SAVEPRETRANSFORMSOURCE = 2370_u32
  IDM_VIEWPRETRANSFORMSOURCE = 2371_u32
  IDM_SCROLL_HERE = 2380_u32
  IDM_SCROLL_TOP = 2381_u32
  IDM_SCROLL_BOTTOM = 2382_u32
  IDM_SCROLL_PAGEUP = 2383_u32
  IDM_SCROLL_PAGEDOWN = 2384_u32
  IDM_SCROLL_UP = 2385_u32
  IDM_SCROLL_DOWN = 2386_u32
  IDM_SCROLL_LEFTEDGE = 2387_u32
  IDM_SCROLL_RIGHTEDGE = 2388_u32
  IDM_SCROLL_PAGELEFT = 2389_u32
  IDM_SCROLL_PAGERIGHT = 2390_u32
  IDM_SCROLL_LEFT = 2391_u32
  IDM_SCROLL_RIGHT = 2392_u32
  IDM_MULTIPLESELECTION = 2393_u32
  IDM_2D_POSITION = 2394_u32
  IDM_2D_ELEMENT = 2395_u32
  IDM_1D_ELEMENT = 2396_u32
  IDM_ABSOLUTE_POSITION = 2397_u32
  IDM_LIVERESIZE = 2398_u32
  IDM_ATOMICSELECTION = 2399_u32
  IDM_AUTOURLDETECT_MODE = 2400_u32
  IDM_IE50_PASTE = 2401_u32
  IDM_IE50_PASTE_MODE = 2402_u32
  IDM_GETIPRINT = 2403_u32
  IDM_DISABLE_EDITFOCUS_UI = 2404_u32
  IDM_RESPECTVISIBILITY_INDESIGN = 2405_u32
  IDM_CSSEDITING_LEVEL = 2406_u32
  IDM_UI_OUTDENT = 2407_u32
  IDM_UPDATEPAGESTATUS = 2408_u32
  IDM_IME_ENABLE_RECONVERSION = 2409_u32
  IDM_KEEPSELECTION = 2410_u32
  IDM_UNLOADDOCUMENT = 2411_u32
  IDM_OVERRIDE_CURSOR = 2420_u32
  IDM_PEERHITTESTSAMEINEDIT = 2423_u32
  IDM_TRUSTAPPCACHE = 2425_u32
  IDM_BACKGROUNDIMAGECACHE = 2430_u32
  IDM_GETUSERACTIONTIME = 2431_u32
  IDM_BEGINUSERACTION = 2432_u32
  IDM_ENDUSERACTION = 2433_u32
  IDM_SETCUSTOMCURSOR = 2434_u32
  IDM_FOLLOWLINKT = 2435_u32
  IDM_CARETBROWSINGMODE = 2436_u32
  IDM_STYLEMENU_SETNOSTYLE = 2437_u32
  IDM_STYLEMENU_GETNOSTYLE = 2438_u32
  IDM_STYLEMENU_GETPREFSTYLE = 2439_u32
  IDM_STYLEMENU_CHANGESELECTEDSTYLE = 2440_u32
  IDM_MEDIA_PLAYPAUSE = 2441_u32
  IDM_MEDIA_MUTEUNMUTE = 2442_u32
  IDM_MEDIA_PLAY = 2443_u32
  IDM_MEDIA_PAUSE = 2444_u32
  IDM_MEDIA_STOP = 2445_u32
  IDM_MEDIA_FULLSCREEN_TOGGLE = 2446_u32
  IDM_MEDIA_FULLSCREEN_EXIT = 2447_u32
  IDM_MEDIA_VOLUME_UP = 2448_u32
  IDM_MEDIA_VOLUME_DOWN = 2449_u32
  IDM_MEDIA_SEEK_TO_START = 2450_u32
  IDM_MEDIA_SEEK_TO_END = 2451_u32
  IDM_MEDIA_SEEK_FWD_SMALL = 2452_u32
  IDM_MEDIA_SEEK_BACK_SMALL = 2453_u32
  IDM_MEDIA_SEEK_FWD_LARGE = 2454_u32
  IDM_MEDIA_SEEK_BACK_LARGE = 2455_u32
  IDM_MEDIA_RATE_FASTER = 2456_u32
  IDM_MEDIA_RATE_SLOWER = 2457_u32
  IDM_MEDIA_SHOWCONTROLS_TOGGLE = 2458_u32
  IDM_MEDIA_ZOOMMODE_TOGGLE = 2459_u32
  IDM_MEDIA_FRAMESTEP_FWD = 2460_u32
  IDM_MEDIA_FRAMESTEP_BACK = 2461_u32
  IDM_MEDIA_MUTE = 2462_u32
  IDM_MEDIA_UNMUTE = 2463_u32
  IDM_MEDIA_SHOW_AUDIO_ACCESS = 2464_u32
  IDM_MEDIA_SHOW_SUBTITLE_ACCESS = 2465_u32
  IDM_MEDIA_PLAYRATE0 = 2480_u32
  IDM_MEDIA_PLAYRATE1 = 2481_u32
  IDM_MEDIA_PLAYRATE2 = 2482_u32
  IDM_MEDIA_PLAYRATE3 = 2483_u32
  IDM_MEDIA_PLAYRATE4 = 2484_u32
  IDM_MEDIA_PLAYRATE5 = 2485_u32
  IDM_MEDIA_PLAYRATE6 = 2486_u32
  IDM_MEDIA_PLAYRATE7 = 2487_u32
  IDM_MEDIA_PLAYRATE8 = 2488_u32
  IDM_MEDIA_PLAYRATE9 = 2489_u32
  IDM_PASTECONTENTONLY = 2500_u32
  IDM_PASTETEXTONLY = 2501_u32
  IDM_INSERTHTML = 2502_u32
  IDM_DEFAULTBLOCK = 6046_u32
  IDM_MIMECSET__FIRST__ = 3609_u32
  IDM_MIMECSET__LAST__ = 3699_u32
  IDM_MENUEXT_FIRST__ = 3700_u32
  IDM_MENUEXT_LAST__ = 3732_u32
  IDM_MENUEXT_COUNT = 3733_u32
  IDM_ADDCONSOLEMESSAGERECEIVER = 3800_u32
  IDM_REMOVECONSOLEMESSAGERECEIVER = 3801_u32
  IDM_STARTDIAGNOSTICSMODE = 3802_u32
  IDM_GETSCRIPTENGINE = 3803_u32
  IDM_ADDDEBUGCALLBACKRECEIVER = 3804_u32
  IDM_REMOVEDEBUGCALLBACKRECEIVER = 3805_u32
  IDM_DEFAULTPARAGRAPHSEPARATOR = 3900_u32
  IDM_BEGINUNDOUNIT = 3901_u32
  IDM_ENDUNDOUNIT = 3902_u32
  IDM_CLEARUNDO = 3903_u32
  IDM_INSPECTELEMENT = 3904_u32
  IDM_SHAREPICTURE = 3905_u32
  IDM_ENABLE_OBJECT_RESIZING = 3906_u32
  IDM_INSERTTEXT = 3907_u32
  IDM_LAUNCHURICALLBACK = 3908_u32
  IDM_FOLLOWLINKN_INPRIVATE = 3909_u32
  IDM_FOLLOWLINKT_INPRIVATE = 3910_u32
  IDM_FOLLOWLINKEDGE = 3911_u32
  IDM_OPEN = 2000_u32
  IDM_NEW = 2001_u32
  IDM_SAVE = 70_u32
  IDM_SAVEAS = 71_u32
  IDM_SAVECOPYAS = 2002_u32
  IDM_PRINTPREVIEW = 2003_u32
  IDM_SHOWPRINT = 2010_u32
  IDM_SHOWPAGESETUP = 2011_u32
  IDM_PRINT = 27_u32
  IDM_PAGESETUP = 2004_u32
  IDM_SPELL = 2005_u32
  IDM_PASTESPECIAL = 2006_u32
  IDM_CLEARSELECTION = 2007_u32
  IDM_PROPERTIES = 28_u32
  IDM_REDO = 29_u32
  IDM_UNDO = 43_u32
  IDM_SELECTALL = 31_u32
  IDM_ZOOMPERCENT = 50_u32
  IDM_GETZOOM = 68_u32
  IDM_STOP = 2138_u32
  IDM_COPY = 15_u32
  IDM_CUT = 16_u32
  IDM_PASTE = 26_u32
  IDM_SAVEPDF = 99_u32
  IDM_TOGGLEREADINGBAR = 15209_u32
  IDM_ADDPDFHIGHLIGHT = 15210_u32
  IDM_DELETEPDFHIGHLIGHT = 15211_u32
  IDM_ADDPDFNOTE = 15212_u32
  IDM_OPENPDFNOTE = 15213_u32
  IDM_EDITPDFHIGHLIGHT = 15214_u32
  IDM_PINKHIGHLIGHT = 15215_u32
  IDM_BLUEHIGHLIGHT = 15216_u32
  IDM_GREENHIGHLIGHT = 15217_u32
  IDM_YELLOWHIGHLIGHT = 15218_u32
  IDM_NONEHIGHLIGHT = 15219_u32
  IDM_PDFREADALOUD = 15220_u32
  IDM_SHAREPDF = 15221_u32
  IDM_PDFDEFINE = 15222_u32
  CMD_ZOOM_PAGEWIDTH = -1_i32
  CMD_ZOOM_ONEPAGE = -2_i32
  CMD_ZOOM_TWOPAGES = -3_i32
  CMD_ZOOM_SELECTION = -4_i32
  CMD_ZOOM_FIT = -5_i32
  IDM_CONTEXT = 1_u32
  IDM_HWND = 2_u32
  IDM_NEW_TOPLEVELWINDOW = 7050_u32
  IDM_PRESERVEUNDOALWAYS = 6049_u32
  IDM_PERSISTDEFAULTVALUES = 7100_u32
  IDM_PROTECTMETATAGS = 7101_u32
  IDM_GETFRAMEZONE = 6037_u32
  IDM_REFRESH_THIS = 6042_u32
  IDM_MENUEXT_PLACEHOLDER = 6047_u32
  IDM_FIRE_PRINTTEMPLATEUP = 15000_u32
  IDM_FIRE_PRINTTEMPLATEDOWN = 15001_u32
  IDM_SETPRINTHANDLES = 15002_u32
  IDM_CLEARAUTHENTICATIONCACHE = 15003_u32
  IDM_GETUSERINITFLAGS = 15004_u32
  IDM_GETDOCDLGFLAGS = 15005_u32
  IDM_OLEWINDOWSTATECHANGED = 15006_u32
  IDM_ACTIVEXINSTALLSCOPE = 15007_u32
  IDM_SETSESSIONDOCUMENTMODE = 15008_u32
  IDM_GETSESSIONDOCUMENTMODE = 15009_u32
  IDM_SETPROFILINGONSTART = 15010_u32
  IDM_GETPROFILINGONSTART = 15011_u32
  IDM_SETSCRIPTCONSOLE = 15012_u32
  IDM_SETNAVIGATEEVENTSINK = 15013_u32
  IDM_SETDEVTOOLBARCONSOLE = 15016_u32
  IDM_POPSTATEEVENT = 15017_u32
  IDM_SETPARTIALLAYOUTSTATUS = 15021_u32
  IDM_GETPARTIALLAYOUTSTATUS = 15022_u32
  IDM_ADDPARTIALTESTSTEPCOUNT = 15023_u32
  IDM_SETL9QUIRKSEMULATIONENABLED = 15024_u32
  IDM_GETL9QUIRKSEMULATIONENABLED = 15025_u32
  IDM_SETPOINTERLOCKCONSENT = 15026_u32
  IDM_GETDEFAULTZOOMLEVEL = 15027_u32
  IDM_GETELEMENTBOUNDINGBOX = 15028_u32
  IDM_SETGEOLOCATIONCONSENT = 15029_u32
  IDM_ACTIVEXFILTERINGENABLED = 15030_u32
  IDM_SHARE = 15031_u32
  IDM_SHAREAPPCACHEEVENT = 15033_u32
  IDM_GETPRINTMANAGERDOCSOURCE = 15038_u32
  IDM_SETEXTRAHEADERS = 15039_u32
  IDM_SETACCESSIBILITYNAME = 15040_u32
  IDM_UPDATESETTINGSFROMREGISTRY = 15041_u32
  IDM_PERFORMEDITACTIVATION = 15042_u32
  IDM_SETDEFAULTBACKGROUNDCOLOR = 15043_u32
  IDM_GETDEFAULTBACKGROUNDCOLOR = 15044_u32
  IDM_NOTIFYZOOMANDSCROLLANIMATIONEND = 15045_u32
  IDM_NOTIFYCONTEXTMENUDISMISSED = 15046_u32
  IDM_GETPRINTMANAGERDOCSOURCEASYNC = 15047_u32
  IDM_SETPAGEACTIONALLOWEDFLAGS = 15100_u32
  IDM_INVOKEFLIPAHEADTARGET = 15200_u32
  IDM_ENABLEFLIPAHEADTARGET = 15201_u32
  IDM_DEBUGGERDYNAMICATTACH = 15202_u32
  IDM_DEBUGGERDYNAMICDETACH = 15203_u32
  IDM_DEBUGGERDYNAMICATTACHSOURCERUNDOWN = 15204_u32
  IDM_GETDEBUGGERSTATE = 15205_u32
  IDM_SELECTIONSEARCH = 15206_u32
  IDM_SHOWSHAREUI = 15207_u32
  IDM_RUNFLASH = 15208_u32
  DISPID_INTERNAL_CELEMENTCLASSCACHE = 2147483648_u32
  DISPID_HTMLOBJECT = 66036_u32
  DISPID_ELEMENT = 66536_u32
  DISPID_SITE = 67536_u32
  DISPID_OBJECT = 68536_u32
  DISPID_STYLE = 69536_u32
  DISPID_BASE_STYLE = 70036_u32
  DISPID_ATTRS = 70536_u32
  DISPID_EVENTS = 71536_u32
  DISPID_XOBJ_EXPANDO = 72536_u32
  DISPID_XOBJ_ORDINAL = 73536_u32
  DISPID_ACTIVEX_EXPANDO_BASE = 72536_u32
  DISPID_ACTIVEX_EXPANDO_MAX = 73535_u32
  DISPID_OBJECT_ORDINAL_BASE = 73536_u32
  DISPID_OBJECT_ORDINAL_MAX = 74535_u32
  DISPID_COLLECTION_MIN = 1000000_u32
  DISPID_COLLECTION_MAX = 2999999_u32
  DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = 1000000_u32
  DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = 2000000_u32
  DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = 2999999_u32
  DISPID_EXPANDO_BASE = 3000000_u32
  DISPID_EXPANDO_MAX = 3999999_u32
  DISPID_EVENTHOOK_SENSITIVE_BASE = 4000000_u32
  DISPID_EVENTHOOK_SENSITIVE_MAX = 4499999_u32
  DISPID_EVENTHOOK_INSENSITIVE_BASE = 4500000_u32
  DISPID_EVENTHOOK_INSENSITIVE_MAX = 4999999_u32
  DISPID_PEER_HOLDER_BASE = 5000000_u32
  DISPID_CANVASPIXELARRAY_BASE = 5000000_u32
  DISPID_CANVASPIXELARRAY_MAX = 2000000000_u32
  DISPID_CommonCtrl_FONTNAME = 1_u32
  DISPID_CommonCtrl_FONTSIZE = 2_u32
  DISPID_CommonCtrl_FONTBOLD = 3_u32
  DISPID_CommonCtrl_FONTITAL = 4_u32
  DISPID_CommonCtrl_FONTUNDER = 5_u32
  DISPID_CommonCtrl_FONTSTRIKE = 6_u32
  DISPID_CommonCtrl_FONTWEIGHT = 7_u32
  DISPID_CommonCtrl_FONTCHARSET = 8_u32
  DISPID_CommonCtrl_FONTSUPERSCRIPT = 9_u32
  DISPID_CommonCtrl_FONTSUBSCRIPT = 10_u32
  DISPID_MSDATASRCINTERFACE = -3900_i32
  DISPID_ADVISEDATASRCCHANGEEVENT = -3901_i32
  DISPID_HTMLDLG = 25000_u32
  DISPID_HTMLDLGMODEL = 26000_u32
  DISPID_HTMLPOPUP = 27000_u32
  DISPID_HTMLAPP = 5000_u32
  STDPROPID_XOBJ_NAME = 65536_u32
  STDPROPID_XOBJ_INDEX = 65537_u32
  STDPROPID_IE3XOBJ_OBJECTALIGN = 65537_u32
  STDPROPID_XOBJ_BASEHREF = 65538_u32
  STDPROPID_XOBJ_LEFT = 65539_u32
  STDPROPID_XOBJ_TOP = 65540_u32
  STDPROPID_XOBJ_WIDTH = 65541_u32
  STDPROPID_XOBJ_HEIGHT = 65542_u32
  STDPROPID_XOBJ_VISIBLE = 65543_u32
  STDPROPID_XOBJ_PARENT = 65544_u32
  STDPROPID_XOBJ_DRAGMODE = 65545_u32
  STDPROPID_XOBJ_DRAGICON = 65546_u32
  STDPROPID_XOBJ_TAG = 65547_u32
  STDPROPID_XOBJ_TABSTOP = 65550_u32
  STDPROPID_XOBJ_TABINDEX = 65551_u32
  STDPROPID_XOBJ_HELPCONTEXTID = 65586_u32
  STDPROPID_XOBJ_DEFAULT = 65591_u32
  STDPROPID_XOBJ_CANCEL = 65592_u32
  STDPROPID_XOBJ_LEFTNORUN = 65593_u32
  STDPROPID_XOBJ_TOPNORUN = 65594_u32
  STDPROPID_XOBJ_ALIGNPERSIST = 65596_u32
  STDPROPID_XOBJ_LINKTIMEOUT = 65597_u32
  STDPROPID_XOBJ_LINKTOPIC = 65598_u32
  STDPROPID_XOBJ_LINKITEM = 65599_u32
  STDPROPID_XOBJ_LINKMODE = 65600_u32
  STDPROPID_XOBJ_DATACHANGED = 65601_u32
  STDPROPID_XOBJ_DATAFIELD = 65602_u32
  STDPROPID_XOBJ_DATASOURCE = 65603_u32
  STDPROPID_XOBJ_WHATSTHISHELPID = 65604_u32
  STDPROPID_XOBJ_CONTROLTIPTEXT = 65605_u32
  STDPROPID_XOBJ_STATUSBARTEXT = 65606_u32
  STDPROPID_XOBJ_APPLICATION = 65607_u32
  STDPROPID_XOBJ_BLOCKALIGN = 65608_u32
  STDPROPID_XOBJ_CONTROLALIGN = 65609_u32
  STDPROPID_XOBJ_STYLE = 65610_u32
  STDPROPID_XOBJ_COUNT = 65611_u32
  STDPROPID_XOBJ_DISABLED = 65612_u32
  STDPROPID_XOBJ_RIGHT = 65613_u32
  STDPROPID_XOBJ_BOTTOM = 65614_u32
  STDPROPID_XOBJ_GETSVGDOCUMENT = 65615_u32
  STDDISPID_XOBJ_ONFOCUS = 65537_u32
  STDDISPID_XOBJ_BEFOREUPDATE = 65540_u32
  STDDISPID_XOBJ_AFTERUPDATE = 65541_u32
  STDDISPID_XOBJ_ONROWEXIT = 65542_u32
  STDDISPID_XOBJ_ONROWENTER = 65543_u32
  STDDISPID_XOBJ_ONMOUSEOVER = 65544_u32
  STDDISPID_XOBJ_ONMOUSEOUT = 65545_u32
  STDDISPID_XOBJ_ONHELP = 65546_u32
  STDDISPID_XOBJ_ONDRAGSTART = 65547_u32
  STDDISPID_XOBJ_ONSELECTSTART = 65548_u32
  STDDISPID_XOBJ_ERRORUPDATE = 65549_u32
  STDDISPID_XOBJ_ONDATASETCHANGED = 65550_u32
  STDDISPID_XOBJ_ONDATAAVAILABLE = 65551_u32
  STDDISPID_XOBJ_ONDATASETCOMPLETE = 65552_u32
  STDDISPID_XOBJ_ONFILTER = 65553_u32
  STDDISPID_XOBJ_ONLOSECAPTURE = 65554_u32
  STDDISPID_XOBJ_ONPROPERTYCHANGE = 65555_u32
  STDDISPID_XOBJ_ONDRAG = 65556_u32
  STDDISPID_XOBJ_ONDRAGEND = 65557_u32
  STDDISPID_XOBJ_ONDRAGENTER = 65558_u32
  STDDISPID_XOBJ_ONDRAGOVER = 65559_u32
  STDDISPID_XOBJ_ONDRAGLEAVE = 65560_u32
  STDDISPID_XOBJ_ONDROP = 65561_u32
  STDDISPID_XOBJ_ONCUT = 65562_u32
  STDDISPID_XOBJ_ONCOPY = 65563_u32
  STDDISPID_XOBJ_ONPASTE = 65564_u32
  STDDISPID_XOBJ_ONBEFORECUT = 65565_u32
  STDDISPID_XOBJ_ONBEFORECOPY = 65566_u32
  STDDISPID_XOBJ_ONBEFOREPASTE = 65567_u32
  STDDISPID_XOBJ_ONROWSDELETE = 65568_u32
  STDDISPID_XOBJ_ONROWSINSERTED = 65569_u32
  STDDISPID_XOBJ_ONCELLCHANGE = 65570_u32
  DISPID_NORMAL_FIRST = 1000_u32
  DISPID_IE8_NORMAL_FIRST = 1150_u32
  DISPID_ANCHOR = 1000_u32
  DISPID_BLOCK = 1000_u32
  DISPID_BODY = 2000_u32
  DISPID_BR = 1000_u32
  DISPID_BGSOUND = 1000_u32
  DISPID_DD = 1000_u32
  DISPID_DIR = 1000_u32
  DISPID_DIV = 1000_u32
  DISPID_DL = 1000_u32
  DISPID_DT = 1000_u32
  DISPID_EFONT = 1000_u32
  DISPID_FORM = 1000_u32
  DISPID_HEADER = 1000_u32
  DISPID_HEDELEMS = 1000_u32
  DISPID_HR = 1000_u32
  DISPID_LABEL = 1000_u32
  DISPID_LI = 1000_u32
  DISPID_IMGBASE = 1000_u32
  DISPID_IMG = 2000_u32
  DISPID_INPUTIMAGE = 2000_u32
  DISPID_INPUT = 2000_u32
  DISPID_INPUTTEXTBASE = 3000_u32
  DISPID_INPUTTEXT = 4000_u32
  DISPID_MENU = 1000_u32
  DISPID_OL = 1000_u32
  DISPID_PARA = 1000_u32
  DISPID_SELECT = 1000_u32
  DISPID_SELECTOBJ = 1000_u32
  DISPID_TABLE = 1000_u32
  DISPID_TEXTSITE = 1000_u32
  DISPID_TEXTAREA = 5000_u32
  DISPID_MARQUEE = 6000_u32
  DISPID_RICHTEXT = 7000_u32
  DISPID_BUTTON = 8000_u32
  DISPID_UL = 1000_u32
  DISPID_PHRASE = 1000_u32
  DISPID_UNKNOWNPDL = 1000_u32
  DISPID_COMMENTPDL = 1000_u32
  DISPID_TABLECELL = 2000_u32
  DISPID_RANGE = 1000_u32
  DISPID_SELECTION = 1000_u32
  DISPID_OPTION = 1000_u32
  DISPID_1D = 2000_u32
  DISPID_MAP = 1000_u32
  DISPID_AREA = 1000_u32
  DISPID_PARAM = 1000_u32
  DISPID_TABLESECTION = 1000_u32
  DISPID_TABLEROW = 1000_u32
  DISPID_TABLECOL = 1000_u32
  DISPID_SCRIPT = 1000_u32
  DISPID_STYLESHEET = 1000_u32
  DISPID_STYLERULE = 1000_u32
  DISPID_BASE_STYLERULE = 1100_u32
  DISPID_STYLEPAGE = 1000_u32
  DISPID_STYLESHEETS_COL = 1000_u32
  DISPID_STYLERULES_COL = 1000_u32
  DISPID_STYLEPAGES_COL = 1000_u32
  DISPID_MEDIALIST = 1000_u32
  DISPID_MIMETYPES_COL = 1000_u32
  DISPID_PLUGINS_COL = 1000_u32
  DISPID_2D = 1000_u32
  DISPID_OMWINDOW = 1000_u32
  DISPID_EVENTOBJ = 1000_u32
  DISPID_PERSISTDATA = 1000_u32
  DISPID_OLESITE = 1000_u32
  DISPID_FRAMESET = 1000_u32
  DISPID_LINK = 1000_u32
  DISPID_STYLEELEMENT = 1000_u32
  DISPID_FILTERS = 1000_u32
  DISPID_OMRECT = 1000_u32
  DISPID_DOMATTRIBUTE = 1000_u32
  DISPID_DOMTEXTNODE = 1000_u32
  DISPID_GENERIC = 1000_u32
  DISPID_URN_COLL = 1000_u32
  DISPID_NAMESPACE_COLLECTION = 1000_u32
  DISPID_NAMESPACE = 1000_u32
  DISPID_TAGNAMES_COLLECTION = 1000_u32
  DISPID_XMLHTTPREQUEST = 1000_u32
  DISPID_XMLSERIALIZER = 1000_u32
  DISPID_DOMPARSER = 1000_u32
  DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION = 1000_u32
  DISPID_DOCUMENTCOMPATIBLEINFO = 1000_u32
  DISPID_XDOMAINREQUEST = 1000_u32
  DISPID_DOMSTORAGEITEM = 1000_u32
  DISPID_DOMSTORAGE = 1000_u32
  DISPID_DOMSTORAGELIST = 1000_u32
  DISPID_RULESAPPLIED = 1000_u32
  DISPID_RULESAPPLIED_COLLECTION = 1000_u32
  DISPID_STYLESHEETRULESAPPLIED_COLLECTION = 1000_u32
  DISPID_PROCESSINGINSTRUCTION = 1000_u32
  DISPID_MSPOINTERPOINT = 1000_u32
  DISPID_WEBSOCKET = 1000_u32
  DISPID_APPLICATIONCACHE = 1000_u32
  DISPID_DOMEVENT = 1000_u32
  DISPID_DOMUIEVENT = 1025_u32
  DISPID_DOMMOUSEEVENT = 1050_u32
  DISPID_DOMMOUSEWHEELEVENT = 1075_u32
  DISPID_DOMWHEELEVENT = 1100_u32
  DISPID_DOMTEXTEVENT = 1125_u32
  DISPID_DOMKEYBOARDEVENT = 1150_u32
  DISPID_DOMCOMPOSITIONEVENT = 1175_u32
  DISPID_DOMCUSTOMEVENT = 1200_u32
  DISPID_DOMMUTATIONEVENT = 1225_u32
  DISPID_DOMFOCUSEVENT = 1250_u32
  DISPID_SVGZOOMEVENT = 1275_u32
  DISPID_DOMSITEMODEEVENT = 1300_u32
  DISPID_DOMMESSAGEEVENT = 1325_u32
  DISPID_DOMSTORAGEEVENT = 1350_u32
  DISPID_DOMBEFOREUNLOADEVENT = 1375_u32
  DISPID_DOMDRAGEVENT = 1400_u32
  DISPID_DOMMSPOINTEREVENT = 1425_u32
  DISPID_DOMMSGESTUREEVENT = 1450_u32
  DISPID_DOMMSTRANSITIONEVENT = 1475_u32
  DISPID_DOMMSANIMATIONEVENT = 1500_u32
  DISPID_DOMMSMANIPULATIONEVENT = 1525_u32
  DISPID_DOMPROGRESSEVENT = 1550_u32
  DISPID_DOMCLOSEEVENT = 1525_u32
  DISPID_HTMLDOCUMENT = 1000_u32
  DISPID_OMDOCUMENT = 1000_u32
  DISPID_DATATRANSFER = 1000_u32
  DISPID_XMLDECL = 1000_u32
  DISPID_DOCFRAG = 1000_u32
  DISPID_ILINEINFO = 1000_u32
  DISPID_IHTMLCOMPUTEDSTYLE = 1000_u32
  DISPID_DOMRANGE = 1000_u32
  DISPID_HTMLSELECTION = 1000_u32
  DISPID_DOMTRAVERSAL = 1000_u32
  DISPID_DOMEXCEPTION = 1000_u32
  DISPID_SVGEXCEPTION = 1000_u32
  DISPID_RANGEEXCEPTION = 1000_u32
  DISPID_EVENTEXCEPTION = 1000_u32
  DISPID_DOCUMENTTYPE = 1000_u32
  DISPID_MEDIA = 1000_u32
  DISPID_MEDIAERROR = 1000_u32
  DISPID_TIMERANGES = 1000_u32
  DISPID_SOURCE = 1000_u32
  DISPID_TRACK = 1000_u32
  DISPID_AUDIO = 1050_u32
  DISPID_VIDEO = 1050_u32
  DISPID_STYLEMEDIA = 1000_u32
  DISPID_PROGRESS = 1000_u32
  DISPID_PLAYTO = 1000_u32
  DISPID_PLAYTODEVICE = 1000_u32
  DISPID_WINDOW = 1_u32
  DISPID_SCREEN = 1000_u32
  DISPID_FRAMESCOLLECTION = 1000_u32
  DISPID_HISTORY = 1_u32
  DISPID_LOCATION = 1_u32
  DISPID_NAVIGATOR = 1_u32
  DISPID_CLIENTCAPS = 1_u32
  DISPID_TEMPLATE_PRINTER = 1_u32
  DISPID_PRINTMANAGER_TEMPLATE_PRINTER = 501_u32
  DISPID_COLLECTION = 1500_u32
  DISPID_OPTIONS_COL = 1500_u32
  DISPID_CHECKBOX = 1000_u32
  DISPID_RADIO = 2000_u32
  DISPID_FRAMESITE = 68536_u32
  DISPID_FRAME = 69536_u32
  DISPID_IFRAME = 69536_u32
  WEBOC_DISPIDBASE = 70536_u32
  WEBOC_DISPIDMAX = 70636_u32
  DISPID_PROTECTEDELEMENT = 1000_u32
  DISPID_DEFAULTS = 1000_u32
  DISPID_MARKUP = 1000_u32
  DISPID_DOMIMPLEMENTATION = 1000_u32
  DISPID_MEDIAQUERY = 1000_u32
  DISPID_HTML5ATTRIBUTESELECTORCI = 1000_u32
  DISPID_SVGMIXINS = 1000_u32
  DISPID_SVGELEMENT = 1030_u32
  DISPID_SVGELEMENT_BASE = 1050_u32
  DISPID_SVGAELEMENT = 1050_u32
  DISPID_SVGALTGLYPHDEFELEMENT = 1050_u32
  DISPID_SVGALTGLYPHELEMENT = 1050_u32
  DISPID_SVGALTGLYPHITEMELEMENT = 1050_u32
  DISPID_SVGANGLE = 1000_u32
  DISPID_SVGANIMATECOLORELEMENT = 1050_u32
  DISPID_SVGANIMATEDANGLE = 1000_u32
  DISPID_SVGANIMATEDBOOLEAN = 1000_u32
  DISPID_SVGANIMATEDENUMERATION = 1000_u32
  DISPID_SVGANIMATEDINTEGER = 1000_u32
  DISPID_SVGANIMATEDLENGTH = 1000_u32
  DISPID_SVGANIMATEDLENGTHLIST = 1000_u32
  DISPID_SVGANIMATEDNUMBER = 1000_u32
  DISPID_SVGANIMATEDNUMBERLIST = 1000_u32
  DISPID_SVGANIMATEDPOINTS = 1000_u32
  DISPID_SVGANIMATEDRECT = 1000_u32
  DISPID_SVGANIMATEDSTRING = 1000_u32
  DISPID_SVGANIMATEELEMENT = 1050_u32
  DISPID_SVGANIMATEMOTIONELEMENT = 1050_u32
  DISPID_SVGANIMATETRANSFORMELEMENT = 1050_u32
  DISPID_SVGCIRCLEELEMENT = 1050_u32
  DISPID_SVGCLIPPATHELEMENT = 1050_u32
  DISPID_SVGCOLOR_PROFILEELEMENT = 1050_u32
  DISPID_SVGCURSORELEMENT = 1050_u32
  DISPID_SVGDEFINITION_SRCELEMENT = 1050_u32
  DISPID_SVGDEFSELEMENT = 1050_u32
  DISPID_SVGDESCELEMENT = 1050_u32
  DISPID_SVGELEMENTINSTANCE = 1000_u32
  DISPID_SVGELEMENTINSTANCELIST = 1000_u32
  DISPID_SVGELLIPSEELEMENT = 1050_u32
  DISPID_SVGFEBLENDELEMENT = 1050_u32
  DISPID_SVGFECOLORMATRIXELEMENT = 1050_u32
  DISPID_SVGFECOMPONENTTRANSFERELEMENT = 1050_u32
  DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT = 1050_u32
  DISPID_SVGFECOMPOSITEELEMENT = 1050_u32
  DISPID_SVGFECONVOLVEMATRIXELEMENT = 1050_u32
  DISPID_SVGFEDIFFUSELIGHTINGELEMENT = 1050_u32
  DISPID_SVGFEDISPLACEMENTMAPELEMENT = 1050_u32
  DISPID_SVGFEDISTANTLIGHTELEMENT = 1050_u32
  DISPID_SVGFEFLOODELEMENT = 1050_u32
  DISPID_SVGFEFUNCAELEMENT = 1050_u32
  DISPID_SVGFEFUNCBELEMENT = 1050_u32
  DISPID_SVGFEFUNCGELEMENT = 1050_u32
  DISPID_SVGFEFUNCRELEMENT = 1050_u32
  DISPID_SVGFEGAUSSIANBLURELEMENT = 1050_u32
  DISPID_SVGFEIMAGEELEMENT = 1050_u32
  DISPID_SVGFEMERGEELEMENT = 1050_u32
  DISPID_SVGFEMERGENODEELEMENT = 1050_u32
  DISPID_SVGFEMORPHOLOGYELEMENT = 1050_u32
  DISPID_SVGFEOFFSETELEMENT = 1050_u32
  DISPID_SVGFEPOINTLIGHTELEMENT = 1050_u32
  DISPID_SVGFESPECULARLIGHTINGELEMENT = 1050_u32
  DISPID_SVGFESPOTLIGHTELEMENT = 1050_u32
  DISPID_SVGFETILEELEMENT = 1050_u32
  DISPID_SVGFETURBULENCEELEMENT = 1050_u32
  DISPID_SVGFILTERELEMENT = 1050_u32
  DISPID_SVGFONT_FACE_FORMATELEMENT = 1050_u32
  DISPID_SVGFONT_FACE_NAMEELEMENT = 1050_u32
  DISPID_SVGFONT_FACE_SRCELEMENT = 1050_u32
  DISPID_SVGFONT_FACE_URIELEMENT = 1050_u32
  DISPID_SVGFONT_FACEELEMENT = 1050_u32
  DISPID_SVGFONTELEMENT = 1050_u32
  DISPID_SVGFOREIGNOBJECTELEMENT = 1050_u32
  DISPID_SVGGELEMENT = 1050_u32
  DISPID_SVGGLYPHELEMENT = 1050_u32
  DISPID_SVGGLYPHREFELEMENT = 1050_u32
  DISPID_SVGGRADIENTELEMENT = 1050_u32
  DISPID_SVGHKERNELEMENT = 1050_u32
  DISPID_SVGIMAGEELEMENT = 1050_u32
  DISPID_SVGLENGTH = 1000_u32
  DISPID_SVGLENGTHLIST = 1000_u32
  DISPID_SVGPRESERVEASPECTRATIO = 1000_u32
  DISPID_SVGANIMATEDPRESERVEASPECTRATIO = 1000_u32
  DISPID_SVGPOINT = 1000_u32
  DISPID_SVGPOINTLIST = 1000_u32
  DISPID_SVGLINEARGRADIENTELEMENT = 1070_u32
  DISPID_SVGLINEELEMENT = 1050_u32
  DISPID_SVGMARKERELEMENT = 1050_u32
  DISPID_SVGMASKELEMENT = 1050_u32
  DISPID_SVGMETADATAELEMENT = 1050_u32
  DISPID_SVGMISSING_GLYPHELEMENT = 1050_u32
  DISPID_SVGMPATHELEMENT = 1050_u32
  DISPID_SVGNUMBER = 1000_u32
  DISPID_SVGNUMBERLIST = 1000_u32
  DISPID_SVGPATHELEMENT = 1050_u32
  DISPID_SVGPATTERNELEMENT = 1050_u32
  DISPID_SVGPOLYGONELEMENT = 1050_u32
  DISPID_SVGPOLYLINEELEMENT = 1050_u32
  DISPID_SVGRADIALGRADIENTELEMENT = 1070_u32
  DISPID_SVGRECT = 1000_u32
  DISPID_SVGRECTELEMENT = 1050_u32
  DISPID_SVGSCRIPTELEMENT = 1050_u32
  DISPID_SVGSETELEMENT = 1050_u32
  DISPID_SVGSTOPELEMENT = 1050_u32
  DISPID_SVGSTRINGLIST = 1000_u32
  DISPID_SVGSTYLEELEMENT = 1050_u32
  DISPID_SVGSVGELEMENT = 1050_u32
  DISPID_SVGSWITCHELEMENT = 1050_u32
  DISPID_SVGSYMBOLELEMENT = 1050_u32
  DISPID_SVGTITLEELEMENT = 1050_u32
  DISPID_SVGTREFELEMENT = 1050_u32
  DISPID_SVGTEXTCONTENTELEMENT = 1050_u32
  DISPID_SVGTEXTCONTENTELEMENT_BASE = 1070_u32
  DISPID_SVGTEXTPOSITIONINGELEMENT = 1070_u32
  DISPID_SVGTEXTPOSITIONINGELEMENT_BASE = 1090_u32
  DISPID_SVGTEXTELEMENT = 1090_u32
  DISPID_SVGTSPANELEMENT = 1090_u32
  DISPID_SVGTEXTPATHELEMENT = 1070_u32
  DISPID_SVGUSEELEMENT = 1050_u32
  DISPID_SVGVIEWELEMENT = 1050_u32
  DISPID_SVGVKERNELEMENT = 1050_u32
  DISPID_SVGMATRIX = 1000_u32
  DISPID_SVGTRANSFORM = 1000_u32
  DISPID_SVGTRANSFORMLIST = 1000_u32
  DISPID_SVGANIMATEDTRANSFORMLIST = 1000_u32
  DISPID_SVGPATHSEG = 1000_u32
  DISPID_SVGPATHSEG_BASE = 1020_u32
  DISPID_SVGPATHSEGLIST = 1000_u32
  DISPID_SVGPATHSEGARCABS = 1020_u32
  DISPID_SVGPATHSEGARCREL = 1020_u32
  DISPID_SVGPATHSEGCLOSEPATH = 1020_u32
  DISPID_SVGPATHSEGMOVETOABS = 1020_u32
  DISPID_SVGPATHSEGMOVETOREL = 1020_u32
  DISPID_SVGPATHSEGLINETOABS = 1020_u32
  DISPID_SVGPATHSEGLINETOREL = 1020_u32
  DISPID_SVGPATHSEGCURVETOCUBICABS = 1020_u32
  DISPID_SVGPATHSEGCURVETOCUBICREL = 1020_u32
  DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS = 1020_u32
  DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL = 1020_u32
  DISPID_SVGPATHSEGCURVETOQUADRATICABS = 1020_u32
  DISPID_SVGPATHSEGCURVETOQUADRATICREL = 1020_u32
  DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1020_u32
  DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1020_u32
  DISPID_SVGPATHSEGLINETOHORIZONTALABS = 1020_u32
  DISPID_SVGPATHSEGLINETOHORIZONTALREL = 1020_u32
  DISPID_SVGPATHSEGLINETOVERTICALABS = 1020_u32
  DISPID_SVGPATHSEGLINETOVERTICALREL = 1020_u32
  DISPID_CANVASELEMENT = 1000_u32
  DISPID_CANVASRENDERCONTEXT2D = 1000_u32
  DISPID_CANVASGRADIENT = 1000_u32
  DISPID_CANVASTEXTMETRICS = 1000_u32
  DISPID_CANVASIMAGEDATA = 1000_u32
  DISPID_CANVASPIXELARRAY = 1000_u32
  DISPID_PERFORMANCE = 1000_u32
  DISPID_PERFORMANCENAVIGATION = 1000_u32
  DISPID_PERFORMANCETIMING = 1000_u32
  DISPID_MSHTMLWEBVIEWELEMENT = 1000_u32
  DISPID_WEBGEOLOCATION = 1000_u32
  DISPID_WEBGEOPOSITION = 1000_u32
  DISPID_WEBGEOCOORDINATES = 1000_u32
  DISPID_WEBGEOPOSITION_ERROR = 1000_u32
  DISPID_DATALIST = 1000_u32
  DISPID_IE8_ANCHOR = 1150_u32
  DISPID_IE8_AREA = 1150_u32
  DISPID_IE8_BASE = 1150_u32
  DISPID_IE8_BODY = 1150_u32
  DISPID_IE8_FORM = 1150_u32
  DISPID_IE8_HEAD = 1150_u32
  DISPID_IE8_IMG = 1150_u32
  DISPID_IE8_INPUT = 1150_u32
  DISPID_IE8_LINK = 1150_u32
  DISPID_IE8_MOD = 1150_u32
  DISPID_IE8_SCRIPT = 1150_u32
  DISPID_IE8_ATTR = 1150_u32
  DISPID_IE8_NAMEDNODEMAP = 1150_u32
  DISPID_IE8_COLLECTION = 1150_u32
  DISPID_IE8_PARAM = 1150_u32
  DISPID_IE8_EMBED = 1150_u32
  DISPID_IE8_BLOCK = 1150_u32
  DISPID_IE8_META = 1150_u32
  DISPID_IE8_STYLE = 1150_u32
  DISPID_IE8_SELECT = 1150_u32
  DISPID_IE8_ELEMENTBASE = 66736_u32
  DISPID_IE8_ELEMENTMAX = 66776_u32
  DISPID_IE8_ELEMENT = 66736_u32
  DISPID_IE8_FRAMESITEBASE = 69656_u32
  DISPID_IE8_FRAME = 69656_u32
  DISPID_IE8_IFRAME = 69656_u32
  DISPID_IE8_OBJECTBASE = 68566_u32
  DISPID_IE8_OBJECT = 68566_u32
  DISPID_IE9_ELEMENTBASE = 66786_u32
  DISPID_IE9_ELEMENTMAX = 66821_u32
  DISPID_IE9_ELEMENT = 66786_u32
  DISPID_IE10_ELEMENTBASE = 66822_u32
  DISPID_IE10_ELEMENT = 66822_u32
  DISP10_IE10_XMSARIAFLOWFROM = 66835_u32
  DISPID_WINDOWOBJECT = -5500_i32
  DISPID_PERFORMANCEOBJECT = -5505_i32
  DISPID_LOCATIONOBJECT = -5506_i32
  DISPID_HISTORYOBJECT = -5507_i32
  DISPID_NAVIGATOROBJECT = -5508_i32
  DISPID_SECURITYCTX = -5511_i32
  DISPID_AMBIENT_DLCONTROL = -5512_i32
  DISPID_AMBIENT_USERAGENT = -5513_i32
  DISPID_SECURITYDOMAIN = -5514_i32
  DISPID_DEBUG_ISSECUREPROXY = -5515_i32
  DISPID_DEBUG_TRUSTEDPROXY = -5516_i32
  DISPID_DEBUG_INTERNALWINDOW = -5517_i32
  DISPID_DEBUG_ENABLESECUREPROXYASSERTS = -5518_i32
  DLCTL_DLIMAGES = 16_u32
  DLCTL_VIDEOS = 32_u32
  DLCTL_BGSOUNDS = 64_u32
  DLCTL_NO_SCRIPTS = 128_u32
  DLCTL_NO_JAVA = 256_u32
  DLCTL_NO_RUNACTIVEXCTLS = 512_u32
  DLCTL_NO_DLACTIVEXCTLS = 1024_u32
  DLCTL_DOWNLOADONLY = 2048_u32
  DLCTL_NO_FRAMEDOWNLOAD = 4096_u32
  DLCTL_RESYNCHRONIZE = 8192_u32
  DLCTL_PRAGMA_NO_CACHE = 16384_u32
  DLCTL_NO_BEHAVIORS = 32768_u32
  DLCTL_NO_METACHARSET = 65536_u32
  DLCTL_URL_ENCODING_DISABLE_UTF8 = 131072_u32
  DLCTL_URL_ENCODING_ENABLE_UTF8 = 262144_u32
  DLCTL_NOFRAMES = 524288_u32
  DLCTL_FORCEOFFLINE = 268435456_u32
  DLCTL_NO_CLIENTPULL = 536870912_u32
  DLCTL_SILENT = 1073741824_u32
  DLCTL_OFFLINEIFNOTCONNECTED = 2147483648_u32
  DLCTL_OFFLINE = 2147483648_u32
  DISPID_ONABORT = 1000_u32
  DISPID_ONCHANGE = 1001_u32
  DISPID_ONERROR = 1002_u32
  DISPID_ONLOAD = 1003_u32
  DISPID_ONSELECT = 1006_u32
  DISPID_ONSUBMIT = 1007_u32
  DISPID_ONUNLOAD = 1008_u32
  DISPID_ONBOUNCE = 1009_u32
  DISPID_ONFINISH = 1010_u32
  DISPID_ONSTART = 1011_u32
  DISPID_ONLAYOUT = 1013_u32
  DISPID_ONSCROLL = 1014_u32
  DISPID_ONRESET = 1015_u32
  DISPID_ONRESIZE = 1016_u32
  DISPID_ONBEFOREUNLOAD = 1017_u32
  DISPID_ONCHANGEFOCUS = 1018_u32
  DISPID_ONCHANGEBLUR = 1019_u32
  DISPID_ONPERSIST = 1020_u32
  DISPID_ONPERSISTSAVE = 1021_u32
  DISPID_ONPERSISTLOAD = 1022_u32
  DISPID_ONCONTEXTMENU = 1023_u32
  DISPID_ONBEFOREPRINT = 1024_u32
  DISPID_ONAFTERPRINT = 1025_u32
  DISPID_ONSTOP = 1026_u32
  DISPID_ONBEFOREEDITFOCUS = 1027_u32
  DISPID_ONMOUSEHOVER = 1028_u32
  DISPID_ONCONTENTREADY = 1029_u32
  DISPID_ONLAYOUTCOMPLETE = 1030_u32
  DISPID_ONPAGE = 1031_u32
  DISPID_ONLINKEDOVERFLOW = 1032_u32
  DISPID_ONMOUSEWHEEL = 1033_u32
  DISPID_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_ONMOVE = 1035_u32
  DISPID_ONCONTROLSELECT = 1036_u32
  DISPID_ONSELECTIONCHANGE = 1037_u32
  DISPID_ONMOVESTART = 1038_u32
  DISPID_ONMOVEEND = 1039_u32
  DISPID_ONRESIZESTART = 1040_u32
  DISPID_ONRESIZEEND = 1041_u32
  DISPID_ONMOUSEENTER = 1042_u32
  DISPID_ONMOUSELEAVE = 1043_u32
  DISPID_ONACTIVATE = 1044_u32
  DISPID_ONDEACTIVATE = 1045_u32
  DISPID_ONMULTILAYOUTCLEANUP = 1046_u32
  DISPID_ONBEFOREACTIVATE = 1047_u32
  DISPID_ONFOCUSIN = 1048_u32
  DISPID_ONFOCUSOUT = 1049_u32
  DISPID_ONVALUECHANGE = 1050_u32
  DISPID_ONSELECTADD = 1051_u32
  DISPID_ONSELECTREMOVE = 1052_u32
  DISPID_ONSELECTWITHIN = 1053_u32
  DISPID_ONSYSTEMSCROLLINGSTART = 1054_u32
  DISPID_ONSYSTEMSCROLLINGEND = 1055_u32
  DISPID_ONOBJECTCONTENTSCROLLED = 1056_u32
  DISPID_ONSTORAGE = 1057_u32
  DISPID_ONSTORAGECOMMIT = 1058_u32
  DISPID_ONSHOW = 1059_u32
  DISPID_ONHIDE = 1060_u32
  DISPID_ONALERT = 1061_u32
  DISPID_ONPOPUPMENUSTART = 1062_u32
  DISPID_ONPOPUPMENUEND = 1063_u32
  DISPID_ONONLINE = 1064_u32
  DISPID_ONOFFLINE = 1065_u32
  DISPID_ONHASHCHANGE = 1066_u32
  DISPID_ONMESSAGE = 1067_u32
  DISPID_ONDOMMUTATION = 1068_u32
  DISPID_SVGLOAD = 1069_u32
  DISPID_SVGUNLOAD = 1070_u32
  DISPID_SVGABORT = 1071_u32
  DISPID_SVGERROR = 1072_u32
  DISPID_SVGRESIZE = 1073_u32
  DISPID_SVGSCROLL = 1074_u32
  DISPID_SVGZOOM = 1075_u32
  DISPID_MSPOINTERDOWN = 1076_u32
  DISPID_MSPOINTERMOVE = 1077_u32
  DISPID_MSPOINTERUP = 1078_u32
  DISPID_MSPOINTEROVER = 1079_u32
  DISPID_MSPOINTEROUT = 1080_u32
  DISPID_MSPOINTERCANCEL = 1081_u32
  DISPID_MSPOINTERHOVER = 1082_u32
  DISPID_MSGESTURESTART = 1083_u32
  DISPID_MSGESTURECHANGE = 1084_u32
  DISPID_MSGESTUREEND = 1085_u32
  DISPID_MSGESTUREHOLD = 1086_u32
  DISPID_MSGESTURETAP = 1087_u32
  DISPID_MSGESTUREDOUBLETAP = 1088_u32
  DISPID_MSINERTIASTART = 1089_u32
  DISPID_MSLOSTPOINTERCAPTURE = 1090_u32
  DISPID_MSGOTPOINTERCAPTURE = 1091_u32
  DISPID_MSTRANSITIONSTART = 1092_u32
  DISPID_MSTRANSITIONEND = 1093_u32
  DISPID_MSANIMATIONSTART = 1094_u32
  DISPID_MSANIMATIONEND = 1095_u32
  DISPID_MSANIMATIONITERATION = 1096_u32
  DISPID_MSGESTUREINIT = 1097_u32
  DISPID_MSMANIPULATIONSTATECHANGED = 1098_u32
  DISPID_ONOPEN = 1099_u32
  DISPID_ONCLOSE = 1100_u32
  DISPID_MSPOINTERENTER = 1101_u32
  DISPID_MSPOINTERLEAVE = 1102_u32
  DISPID_MSORIENTATIONCHANGE = 1103_u32
  DISPID_ONDEVICEORIENTATION = 1104_u32
  DISPID_ONDEVICEMOTION = 1105_u32
  DISPID_ONPAGESHOW = 1106_u32
  DISPID_ONPAGEHIDE = 1107_u32
  DISPID_ONCOMPASSNEEDSCALIBRATION = 1108_u32
  DISPID_A_FIRST = 70536_u32
  DISPID_A_MIN = 70536_u32
  DISPID_A_MAX = 71535_u32
  DISPID_A_BACKGROUNDIMAGE = 70537_u32
  DISPID_A_COLOR = 70538_u32
  DISPID_A_TEXTTRANSFORM = 70540_u32
  DISPID_A_NOWRAP = 70541_u32
  DISPID_A_LINEHEIGHT = 70542_u32
  DISPID_A_TEXTINDENT = 70543_u32
  DISPID_A_LETTERSPACING = 70544_u32
  DISPID_A_LANG = 70545_u32
  DISPID_A_OVERFLOW = 70546_u32
  DISPID_A_PADDING = 70547_u32
  DISPID_A_PADDINGTOP = 70548_u32
  DISPID_A_PADDINGRIGHT = 70549_u32
  DISPID_A_PADDINGBOTTOM = 70550_u32
  DISPID_A_PADDINGLEFT = 70551_u32
  DISPID_A_CLEAR = 70552_u32
  DISPID_A_LISTTYPE = 70553_u32
  DISPID_A_FONTFACE = 70554_u32
  DISPID_A_FONTSIZE = 70555_u32
  DISPID_A_TEXTDECORATIONLINETHROUGH = 70556_u32
  DISPID_A_TEXTDECORATIONUNDERLINE = 70557_u32
  DISPID_A_TEXTDECORATIONBLINK = 70558_u32
  DISPID_A_TEXTDECORATIONNONE = 70559_u32
  DISPID_A_FONTSTYLE = 70560_u32
  DISPID_A_FONTVARIANT = 70561_u32
  DISPID_A_BASEFONT = 70562_u32
  DISPID_A_FONTWEIGHT = 70563_u32
  DISPID_A_TABLEBORDERCOLOR = 70564_u32
  DISPID_A_TABLEBORDERCOLORLIGHT = 70565_u32
  DISPID_A_TABLEBORDERCOLORDARK = 70566_u32
  DISPID_A_TABLEVALIGN = 70567_u32
  DISPID_A_BACKGROUND = 70568_u32
  DISPID_A_BACKGROUNDPOSX = 70569_u32
  DISPID_A_BACKGROUNDPOSY = 70570_u32
  DISPID_A_TEXTDECORATION = 70571_u32
  DISPID_A_MARGIN = 70572_u32
  DISPID_A_MARGINTOP = 70573_u32
  DISPID_A_MARGINRIGHT = 70574_u32
  DISPID_A_MARGINBOTTOM = 70575_u32
  DISPID_A_MARGINLEFT = 70576_u32
  DISPID_A_FONT = 70577_u32
  DISPID_A_FONTSIZEKEYWORD = 70578_u32
  DISPID_A_FONTSIZECOMBINE = 70579_u32
  DISPID_A_BACKGROUNDREPEAT = 70580_u32
  DISPID_A_BACKGROUNDATTACHMENT = 70581_u32
  DISPID_A_BACKGROUNDPOSITION = 70582_u32
  DISPID_A_WORDSPACING = 70583_u32
  DISPID_A_VERTICALALIGN = 70584_u32
  DISPID_A_BORDER = 70585_u32
  DISPID_A_BORDERTOP = 70586_u32
  DISPID_A_BORDERRIGHT = 70587_u32
  DISPID_A_BORDERBOTTOM = 70588_u32
  DISPID_A_BORDERLEFT = 70589_u32
  DISPID_A_BORDERCOLOR = 70590_u32
  DISPID_A_BORDERTOPCOLOR = 70591_u32
  DISPID_A_BORDERRIGHTCOLOR = 70592_u32
  DISPID_A_BORDERBOTTOMCOLOR = 70593_u32
  DISPID_A_BORDERLEFTCOLOR = 70594_u32
  DISPID_A_BORDERWIDTH = 70595_u32
  DISPID_A_BORDERTOPWIDTH = 70596_u32
  DISPID_A_BORDERRIGHTWIDTH = 70597_u32
  DISPID_A_BORDERBOTTOMWIDTH = 70598_u32
  DISPID_A_BORDERLEFTWIDTH = 70599_u32
  DISPID_A_BORDERSTYLE = 70600_u32
  DISPID_A_BORDERTOPSTYLE = 70601_u32
  DISPID_A_BORDERRIGHTSTYLE = 70602_u32
  DISPID_A_BORDERBOTTOMSTYLE = 70603_u32
  DISPID_A_BORDERLEFTSTYLE = 70604_u32
  DISPID_A_TEXTDECORATIONOVERLINE = 70605_u32
  DISPID_A_FLOAT = 70606_u32
  DISPID_A_DISPLAY = 70607_u32
  DISPID_A_LISTSTYLETYPE = 70608_u32
  DISPID_A_LISTSTYLEPOSITION = 70609_u32
  DISPID_A_LISTSTYLEIMAGE = 70610_u32
  DISPID_A_LISTSTYLE = 70611_u32
  DISPID_A_WHITESPACE = 70612_u32
  DISPID_A_PAGEBREAKBEFORE = 70613_u32
  DISPID_A_PAGEBREAKAFTER = 70614_u32
  DISPID_A_SCROLL = 70615_u32
  DISPID_A_VISIBILITY = 70616_u32
  DISPID_A_HIDDEN = 70617_u32
  DISPID_A_FILTER = 70618_u32
  DISPID_DEFAULTVALUE = 70619_u32
  DISPID_A_BORDERCOLLAPSE = 70620_u32
  DISPID_A_POSITION = 70626_u32
  DISPID_A_ZINDEX = 70627_u32
  DISPID_A_CLIP = 70628_u32
  DISPID_A_CLIPRECTTOP = 70629_u32
  DISPID_A_CLIPRECTRIGHT = 70630_u32
  DISPID_A_CLIPRECTBOTTOM = 70631_u32
  DISPID_A_CLIPRECTLEFT = 70632_u32
  DISPID_A_FONTFACESRC = 70633_u32
  DISPID_A_TABLELAYOUT = 70634_u32
  DISPID_A_STYLETEXT = 70635_u32
  DISPID_A_LANGUAGE = 70636_u32
  DISPID_A_VALUE = 70637_u32
  DISPID_A_CURSOR = 70638_u32
  DISPID_A_EVENTSINK = 70639_u32
  DISPID_A_PROPNOTIFYSINK = 70640_u32
  DISPID_A_ROWSETNOTIFYSINK = 70641_u32
  DISPID_INTERNAL_INLINESTYLEAA = 70642_u32
  DISPID_INTERNAL_CSTYLEPTRCACHE = 70643_u32
  DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = 70644_u32
  DISPID_INTERNAL_INVOKECONTEXT = 70645_u32
  DISPID_A_BGURLIMGCTXCACHEINDEX = 70646_u32
  DISPID_A_LIURLIMGCTXCACHEINDEX = 70647_u32
  DISPID_A_ROWSETASYNCHNOTIFYSINK = 70648_u32
  DISPID_INTERNAL_FILTERPTRCACHE = 70649_u32
  DISPID_A_ROWPOSITIONCHANGESINK = 70650_u32
  DISPID_A_BEHAVIOR = 70651_u32
  DISPID_A_READYSTATE = 70652_u32
  DISPID_A_DIR = 70653_u32
  DISPID_A_UNICODEBIDI = 70654_u32
  DISPID_A_DIRECTION = 70655_u32
  DISPID_A_IMEMODE = 70656_u32
  DISPID_A_RUBYALIGN = 70657_u32
  DISPID_A_RUBYPOSITION = 70658_u32
  DISPID_A_RUBYOVERHANG = 70659_u32
  DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = 70660_u32
  DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = 70661_u32
  DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = 70662_u32
  DISPID_A_LAYOUTGRIDCHAR = 70663_u32
  DISPID_A_LAYOUTGRIDLINE = 70664_u32
  DISPID_A_LAYOUTGRIDMODE = 70665_u32
  DISPID_A_LAYOUTGRIDTYPE = 70666_u32
  DISPID_A_LAYOUTGRID = 70667_u32
  DISPID_A_TEXTAUTOSPACE = 70668_u32
  DISPID_A_LINEBREAK = 70669_u32
  DISPID_A_WORDBREAK = 70670_u32
  DISPID_A_TEXTJUSTIFY = 70671_u32
  DISPID_A_TEXTJUSTIFYTRIM = 70672_u32
  DISPID_A_TEXTKASHIDA = 70673_u32
  DISPID_A_OVERFLOWX = 70675_u32
  DISPID_A_OVERFLOWY = 70676_u32
  DISPID_A_HTCDISPATCHITEM_VALUE = 70677_u32
  DISPID_A_DOCFRAGMENT = 70678_u32
  DISPID_A_HTCDD_ELEMENT = 70679_u32
  DISPID_A_HTCDD_CREATEEVENTOBJECT = 70680_u32
  DISPID_A_URNATOM = 70681_u32
  DISPID_A_UNIQUEPEERNUMBER = 70682_u32
  DISPID_A_ACCELERATOR = 70683_u32
  DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = 70684_u32
  DISPID_INTERNAL_RUNTIMESTYLEAA = 70685_u32
  DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = 70686_u32
  DISPID_A_EXTENDEDTAGDESC = 70687_u32
  DISPID_A_ROTATE = 70688_u32
  DISPID_A_ZOOM = 70689_u32
  DISPID_A_HTCDD_PROTECTEDELEMENT = 70690_u32
  DISPID_A_LAYOUTFLOW = 70691_u32
  DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE = 70692_u32
  DISPID_A_HTCDD_ISMARKUPSHARED = 70693_u32
  DISPID_A_WORDWRAP = 70694_u32
  DISPID_A_TEXTUNDERLINEPOSITION = 70695_u32
  DISPID_A_HASLAYOUT = 70696_u32
  DISPID_A_MEDIA = 70697_u32
  DISPID_A_EDITABLE = 70698_u32
  DISPID_A_HIDEFOCUS = 70699_u32
  DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = 70700_u32
  DISPID_A_HTCDD_DEFAULTS = 70701_u32
  DISPID_A_TEXTLINETHROUGHSTYLE = 70702_u32
  DISPID_A_TEXTUNDERLINESTYLE = 70703_u32
  DISPID_A_TEXTEFFECT = 70704_u32
  DISPID_A_TEXTBACKGROUNDCOLOR = 70705_u32
  DISPID_A_RENDERINGPRIORITY = 70706_u32
  DISPID_INTERNAL_DWNPOSTPTRCACHE = 70707_u32
  DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = 70708_u32
  DISPID_INTERNAL_DWNDOCPTRCACHE = 70709_u32
  DISPID_INTERNAL_DATABINDTASKPTRCACHE = 70710_u32
  DISPID_INTERNAL_URLLOCATIONCACHE = 70711_u32
  DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = 70712_u32
  DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = 70713_u32
  DISPID_INTERNAL_STMDIRTYPTRCACHE = 70714_u32
  DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = 70715_u32
  DISPID_A_SCROLLBARBASECOLOR = 70716_u32
  DISPID_A_SCROLLBARFACECOLOR = 70717_u32
  DISPID_A_SCROLLBAR3DLIGHTCOLOR = 70718_u32
  DISPID_A_SCROLLBARSHADOWCOLOR = 70719_u32
  DISPID_A_SCROLLBARHIGHLIGHTCOLOR = 70720_u32
  DISPID_A_SCROLLBARDARKSHADOWCOLOR = 70721_u32
  DISPID_A_SCROLLBARARROWCOLOR = 70722_u32
  DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = 70723_u32
  DISPID_A_DEFAULTTEXTSELECTION = 70724_u32
  DISPID_A_TEXTDECORATIONCOLOR = 70725_u32
  DISPID_A_TEXTCOLOR = 70726_u32
  DISPID_A_STYLETEXTDECORATION = 70727_u32
  DISPID_A_WRITINGMODE = 70728_u32
  DISPID_INTERNAL_MEDIA_REFERENCE = 70729_u32
  DISPID_INTERNAL_GENERICCOMPLUSREF = 70730_u32
  DISPID_INTERNAL_FOCUSITEMS = 70731_u32
  DISPID_A_SCROLLBARTRACKCOLOR = 70732_u32
  DISPID_INTERNAL_DWNHEADERCACHE = 70733_u32
  DISPID_A_FROZEN = 70734_u32
  DISPID_A_VIEWINHERITSTYLE = 70735_u32
  DISPID_INTERNAL_FRAMESCOLLECTION = 70736_u32
  DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = 70737_u32
  DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = 70738_u32
  DISPID_A_TEXTALIGNLAST = 70739_u32
  DISPID_A_TEXTKASHIDASPACE = 70740_u32
  DISPID_INTERNAL_FONTHISTORYINDEX = 70741_u32
  DISPID_A_ALLOWTRANSPARENCY = 70742_u32
  DISPID_INTERNAL_URLSEARCHCACHE = 70743_u32
  DISPID_A_ISBLOCK = 70744_u32
  DISPID_A_TEXTOVERFLOW = 70745_u32
  DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = 70746_u32
  DISPID_A_MINHEIGHT = 70747_u32
  DISPID_INTERNAL_INVOKECONTEXTDOCUMENT = 70748_u32
  DISPID_A_INTERPOLATION = 70749_u32
  DISPID_A_MAXHEIGHT = 70750_u32
  DISPID_A_MINWIDTH = 70751_u32
  DISPID_A_MAXWIDTH = 70752_u32
  DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE = 70753_u32
  DISPID_A_CONTENT = 70754_u32
  DISPID_A_CAPTIONSIDE = 70755_u32
  DISPID_A_COUNTERINCREMENT = 70756_u32
  DISPID_A_COUNTERRESET = 70757_u32
  DISPID_A_OUTLINE = 70758_u32
  DISPID_A_OUTLINEWIDTH = 70759_u32
  DISPID_A_OUTLINESTYLE = 70760_u32
  DISPID_A_OUTLINECOLOR = 70761_u32
  DISPID_A_BOXSIZING = 70762_u32
  DISPID_A_BORDERSPACING = 70763_u32
  DISPID_A_ORPHANS = 70764_u32
  DISPID_A_WIDOWS = 70765_u32
  DISPID_A_PAGEBREAKINSIDE = 70766_u32
  DISPID_A_MS_BEHAVIOR = 70767_u32
  DISPID_A_MS_SCROLLBARBASECOLOR = 70768_u32
  DISPID_A_MS_SCROLLBARFACECOLOR = 70769_u32
  DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR = 70770_u32
  DISPID_A_MS_SCROLLBARSHADOWCOLOR = 70771_u32
  DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR = 70772_u32
  DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR = 70773_u32
  DISPID_A_MS_SCROLLBARARROWCOLOR = 70774_u32
  DISPID_A_MS_SCROLLBARTRACKCOLOR = 70775_u32
  DISPID_A_MS_TEXTALIGNLAST = 70776_u32
  DISPID_A_MS_TEXTOVERFLOW = 70777_u32
  DISPID_A_MS_TEXTUNDERLINEPOSITION = 70778_u32
  DISPID_A_MS_WRITINGMODE = 70779_u32
  DISPID_A_MS_IMEMODE = 70780_u32
  DISPID_A_MS_BACKGROUNDPOSX = 70781_u32
  DISPID_A_MS_BACKGROUNDPOSY = 70782_u32
  DISPID_A_MS_ACCELERATOR = 70783_u32
  DISPID_A_MS_LAYOUTFLOW = 70784_u32
  DISPID_A_MS_ZOOM = 70785_u32
  DISPID_A_EMPTYCELLS = 70786_u32
  DISPID_A_MS_BLOCKPROGRESSION = 70787_u32
  DISPID_A_QUOTES = 70788_u32
  DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE = 70789_u32
  DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER = 70790_u32
  DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE = 70791_u32
  DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER = 70792_u32
  DISPID_AAHEADER = 70793_u32
  DISPID_INTERNAL_GETTERSETTERCOLLECTION = 70794_u32
  DISPID_A_MS_LAYOUTGRIDCHAR = 70795_u32
  DISPID_A_MS_LAYOUTGRIDLINE = 70796_u32
  DISPID_A_MS_LAYOUTGRIDMODE = 70797_u32
  DISPID_A_MS_LAYOUTGRIDTYPE = 70798_u32
  DISPID_A_MS_LAYOUTGRID = 70799_u32
  DISPID_A_MS_LINEBREAK = 70800_u32
  DISPID_A_MS_FILTER = 70801_u32
  DISPID_A_MS_OVERFLOWX = 70802_u32
  DISPID_A_MS_OVERFLOWY = 70803_u32
  DISPID_A_MS_TEXTAUTOSPACE = 70804_u32
  DISPID_A_MS_TEXTJUSTIFY = 70805_u32
  DISPID_A_MS_TEXTKASHIDASPACE = 70806_u32
  DISPID_A_MS_WORDBREAK = 70807_u32
  DISPID_A_MS_WORDWRAP = 70808_u32
  DISPID_INTERNAL_URIBEFOREREDIRECT = 70809_u32
  DISPID_A_ALIGNMENTBASELINE = 70814_u32
  DISPID_A_BASELINESHIFT = 70815_u32
  DISPID_A_DOMINANTBASELINE = 70816_u32
  DISPID_A_FONTSIZEADJUST = 70817_u32
  DISPID_A_FONTSTRETCH = 70818_u32
  DISPID_A_OPACITY = 70819_u32
  DISPID_A_CLIPPATH = 70820_u32
  DISPID_A_CLIPRULE = 70821_u32
  DISPID_A_FILL = 70822_u32
  DISPID_A_FILLOPACITY = 70823_u32
  DISPID_A_FILLRULE = 70824_u32
  DISPID_A_KERNING = 70825_u32
  DISPID_A_MARKER = 70826_u32
  DISPID_A_MARKEREND = 70827_u32
  DISPID_A_MARKERMID = 70828_u32
  DISPID_A_MARKERSTART = 70829_u32
  DISPID_A_MASK = 70830_u32
  DISPID_A_POINTEREVENTS = 70831_u32
  DISPID_A_STOPCOLOR = 70832_u32
  DISPID_A_STOPOPACITY = 70833_u32
  DISPID_A_STROKE = 70834_u32
  DISPID_A_STROKEDASHARRAY = 70835_u32
  DISPID_A_STROKEDASHOFFSET = 70836_u32
  DISPID_A_STROKELINECAP = 70837_u32
  DISPID_A_STROKELINEJOIN = 70838_u32
  DISPID_A_STROKEMITERLIMIT = 70839_u32
  DISPID_A_STROKEOPACITY = 70840_u32
  DISPID_A_STROKEWIDTH = 70841_u32
  DISPID_A_TEXTANCHOR = 70842_u32
  DISPID_A_GLYPHORIENTATIONHORIZONTAL = 70843_u32
  DISPID_A_GLYPHORIENTATIONVERTICAL = 70844_u32
  DISPID_A_CSSFLOAT = 70845_u32
  DISPID_A_BORDERRADIUS = 70846_u32
  DISPID_A_BORDERTOPLEFTRADIUS = 70847_u32
  DISPID_A_BORDERTOPRIGHTRADIUS = 70848_u32
  DISPID_A_BORDERBOTTOMRIGHTRADIUS = 70849_u32
  DISPID_A_BORDERBOTTOMLEFTRADIUS = 70850_u32
  DISPID_A_MS_TRANSFORM = 70851_u32
  DISPID_A_IE9_BACKGROUNDCLIP = 70852_u32
  DISPID_A_IE9_BACKGROUNDORIGIN = 70853_u32
  DISPID_A_IE9_BACKGROUNDSIZE = 70854_u32
  DISPID_A_IE9_BOXSHADOW = 70855_u32
  DISPID_A_MS_TRANSFORMORIGIN = 70861_u32
  DISPID_A_MS_TRANSFORMORIGINX = 70862_u32
  DISPID_A_MS_TRANSFORMORIGINY = 70863_u32
  DISPID_A_MS_TEXTSIZEADJUST = 70864_u32
  DISPID_A_MS_TRANSITIONPROPERTY = 70866_u32
  DISPID_A_MS_TRANSITIONDURATION = 70867_u32
  DISPID_A_MS_TRANSITIONTIMINGFUNCTION = 70868_u32
  DISPID_A_MS_TRANSITIONDELAY = 70869_u32
  DISPID_A_MS_TRANSITION = 70870_u32
  DISPID_A_COLUMNS = 70871_u32
  DISPID_A_COLUMNCOUNT = 70872_u32
  DISPID_A_COLUMNWIDTH = 70873_u32
  DISPID_A_COLUMNGAP = 70874_u32
  DISPID_A_COLUMNFILL = 70875_u32
  DISPID_A_COLUMNSPAN = 70876_u32
  DISPID_A_COLUMNRULE = 70877_u32
  DISPID_A_COLUMNRULESTYLE = 70878_u32
  DISPID_A_COLUMNRULEWIDTH = 70879_u32
  DISPID_A_COLUMNRULECOLOR = 70880_u32
  DISPID_A_BREAKBEFORE = 70881_u32
  DISPID_A_BREAKAFTER = 70882_u32
  DISPID_A_BREAKINSIDE = 70883_u32
  DISPID_A_MS_TRANSFORMORIGINZ = 70884_u32
  DISPID_A_MS_PERSPECTIVE = 70885_u32
  DISPID_A_MS_PERSPECTIVEORIGIN = 70886_u32
  DISPID_A_MS_PERSPECTIVEORIGINX = 70887_u32
  DISPID_A_MS_PERSPECTIVEORIGINY = 70888_u32
  DISPID_A_MS_TRANSFORMSTYLE = 70889_u32
  DISPID_A_MS_BACKFACEVISIBILITY = 70890_u32
  DISPID_A_MS_SCROLLCHAINING = 70891_u32
  DISPID_A_MS_CONTENTZOOMING = 70892_u32
  DISPID_A_MS_CONTENTZOOMSNAPTYPE = 70893_u32
  DISPID_A_MS_SCROLLRAILS = 70894_u32
  DISPID_A_MS_CONTENTZOOMCHAINING = 70895_u32
  DISPID_A_MS_SCROLLSNAPTYPE = 70896_u32
  DISPID_A_MS_CONTENTZOOMLIMIT = 70897_u32
  DISPID_A_MS_CONTENTZOOMSNAP = 70898_u32
  DISPID_A_MS_CONTENTZOOMSNAPPOINTS = 70899_u32
  DISPID_A_MS_CONTENTZOOMFACTOR = 70900_u32
  DISPID_A_MS_CONTENTZOOMLIMITMIN = 70901_u32
  DISPID_A_MS_CONTENTZOOMLIMITMAX = 70902_u32
  DISPID_A_MS_SCROLLSNAPX = 70903_u32
  DISPID_A_MS_SCROLLSNAPY = 70904_u32
  DISPID_A_MS_SCROLLSNAPPOINTSX = 70905_u32
  DISPID_A_MS_SCROLLSNAPPOINTSY = 70906_u32
  DISPID_A_SPELLCHECK = 70907_u32
  DISPID_A_MS_GRIDCOLUMN = 70908_u32
  DISPID_A_MS_GRIDCOLUMNALIGN = 70909_u32
  DISPID_A_MS_GRIDCOLUMNS = 70910_u32
  DISPID_A_MS_GRIDCOLUMNSPAN = 70911_u32
  DISPID_A_MS_GRIDROW = 70913_u32
  DISPID_A_MS_GRIDROWALIGN = 70914_u32
  DISPID_A_MS_GRIDROWS = 70915_u32
  DISPID_A_MS_GRIDROWSPAN = 70916_u32
  DISPID_A_MS_ANIMATIONNAME = 70917_u32
  DISPID_A_MS_ANIMATIONDURATION = 70918_u32
  DISPID_A_MS_ANIMATIONTIMINGFUNCTION = 70919_u32
  DISPID_A_MS_ANIMATIONDELAY = 70920_u32
  DISPID_A_MS_ANIMATIONDIRECTION = 70921_u32
  DISPID_A_MS_ANIMATIONPLAYSTATE = 70922_u32
  DISPID_A_MS_ANIMATIONITERATIONCOUNT = 70923_u32
  DISPID_A_MS_ANIMATION = 70924_u32
  DISPID_A_MS_ANIMATIONFILLMODE = 70925_u32
  DISPID_A_FLOODCOLOR = 70926_u32
  DISPID_A_FLOODOPACITY = 70927_u32
  DISPID_A_COLORINTERPOLATIONFILTERS = 70928_u32
  DISPID_A_LIGHTINGCOLOR = 70929_u32
  DISPID_A_MS_SCROLLLIMITXMIN = 70930_u32
  DISPID_A_MS_SCROLLLIMITYMIN = 70931_u32
  DISPID_A_MS_SCROLLLIMITXMAX = 70932_u32
  DISPID_A_MS_SCROLLLIMITYMAX = 70933_u32
  DISPID_A_MS_SCROLLLIMIT = 70934_u32
  DISPID_A_MS_OVERFLOWSTYLE = 70935_u32
  DISPID_A_TEXTSHADOW = 70936_u32
  DISPID_A_MS_WRAPTHROUGH = 70937_u32
  DISPID_A_MS_FLOWFROM = 70938_u32
  DISPID_A_MS_FLOWINTO = 70939_u32
  DISPID_A_MS_HYPHENS = 70940_u32
  DISPID_A_MS_HYPHENATE_LIMIT_ZONE = 70941_u32
  DISPID_A_MS_HYPHENATE_LIMIT_CHARS = 70942_u32
  DISPID_A_MS_HYPHENATE_LIMIT_LINES = 70943_u32
  DISPID_A_DRAGGABLE = 70944_u32
  DISPID_A_MS_HIGHCONTRASTADJUST = 70945_u32
  DISPID_A_ENABLEBACKGROUND = 70946_u32
  DISPID_A_MS_WRAPMARGIN = 70947_u32
  DISPID_A_MS_WRAPFLOW = 70949_u32
  DISPID_A_MS_FONTFEATURESETTINGS = 70950_u32
  DISPID_A_MS_USERSELECT = 70951_u32
  DISPID_A_MS_TOUCHACTION = 70952_u32
  DISPID_A_CLASSLIST = 70953_u32
  DISPID_A_MS_SCROLLTRANSLATION = 70954_u32
  DISPID_A_MS_FLEX = 70955_u32
  DISPID_A_MS_FLEXPOSITIVE = 70956_u32
  DISPID_A_MS_FLEXNEGATIVE = 70957_u32
  DISPID_A_MS_FLEXPREFERREDSIZE = 70958_u32
  DISPID_A_MS_FLEXFLOW = 70959_u32
  DISPID_A_MS_FLEXDIRECTION = 70960_u32
  DISPID_A_MS_FLEXWRAP = 70961_u32
  DISPID_A_MS_FLEXALIGN = 70962_u32
  DISPID_A_MS_FLEXITEMALIGN = 70963_u32
  DISPID_A_MS_FLEXPACK = 70964_u32
  DISPID_A_MS_FLEXLINEPACK = 70965_u32
  DISPID_A_MS_FLEXORDER = 70966_u32
  DISPID_A_TRANSFORM = 70967_u32
  DISPID_A_TRANSFORMORIGIN = 70968_u32
  DISPID_A_TRANSITIONPROPERTY = 70969_u32
  DISPID_A_TRANSITIONDURATION = 70970_u32
  DISPID_A_TRANSITIONTIMINGFUNCTION = 70971_u32
  DISPID_A_TRANSITIONDELAY = 70972_u32
  DISPID_A_TRANSITION = 70973_u32
  DISPID_A_PERSPECTIVE = 70974_u32
  DISPID_A_PERSPECTIVEORIGIN = 70975_u32
  DISPID_A_TRANSFORMSTYLE = 70976_u32
  DISPID_A_BACKFACEVISIBILITY = 70977_u32
  DISPID_A_ANIMATIONNAME = 70978_u32
  DISPID_A_ANIMATIONDURATION = 70979_u32
  DISPID_A_ANIMATIONTIMINGFUNCTION = 70980_u32
  DISPID_A_ANIMATIONDELAY = 70981_u32
  DISPID_A_ANIMATIONDIRECTION = 70982_u32
  DISPID_A_ANIMATIONPLAYSTATE = 70983_u32
  DISPID_A_ANIMATIONITERATIONCOUNT = 70984_u32
  DISPID_A_ANIMATION = 70985_u32
  DISPID_A_ANIMATIONFILLMODE = 70986_u32
  DISPID_A_FONTFEATURESETTINGS = 70987_u32
  DISPID_A_TRANSFORMORIGINX = 70988_u32
  DISPID_A_TRANSFORMORIGINY = 70989_u32
  DISPID_A_TRANSFORMORIGINZ = 70990_u32
  DISPID_A_PERSPECTIVEORIGINX = 70992_u32
  DISPID_A_PERSPECTIVEORIGINY = 70993_u32
  DISPID_A_MS_TOUCHSELECT = 70994_u32
  DISPID_INTERNAL_ERRORPAGEREFRESHURL = 70995_u32
  DISPID_INTERNAL_ERRORPAGEREASON = 70996_u32
  DISPID_INTERNAL_ERRORPAGEDWNPOST = 70997_u32
  DISPID_A_FLEXDIRECTION = 70998_u32
  DISPID_A_FLEXWRAP = 70999_u32
  DISPID_A_FLEXFLOW = 71000_u32
  DISPID_A_ORDER = 71001_u32
  DISPID_A_FLEX = 71002_u32
  DISPID_A_FLEXGROW = 71003_u32
  DISPID_A_FLEXSHRINK = 71004_u32
  DISPID_A_FLEXBASIS = 71005_u32
  DISPID_A_JUSTIFYCONTENT = 71006_u32
  DISPID_A_ALIGNITEMS = 71007_u32
  DISPID_A_ALIGNSELF = 71008_u32
  DISPID_A_ALIGNCONTENT = 71009_u32
  DISPID_A_BORDERIMAGE = 71010_u32
  DISPID_A_BORDERIMAGESOURCE = 71011_u32
  DISPID_A_BORDERIMAGESLICE = 71012_u32
  DISPID_A_BORDERIMAGEWIDTH = 71013_u32
  DISPID_A_BORDERIMAGEOUTSET = 71014_u32
  DISPID_A_BORDERIMAGEREPEAT = 71015_u32
  DISPID_A_DATASET = 71016_u32
  DISPID_A_MS_IMEALIGN = 71017_u32
  DISPID_A_MS_TEXTCOMBINEHORIZONTAL = 71018_u32
  DISPID_A_TOUCHACTION = 71019_u32
  DISPID_A_WEBKIT_APPEARANCE = 71020_u32
  DISPID_A_WEBKIT_BOXALIGN = 71021_u32
  DISPID_A_WEBKIT_BOXORDINALGROUP = 71022_u32
  DISPID_A_WEBKIT_BOXPACK = 71023_u32
  DISPID_A_WEBKIT_BOXFLEX = 71024_u32
  DISPID_A_WEBKIT_BOXORIENT = 71025_u32
  DISPID_A_WEBKIT_BOXDIRECTION = 71026_u32
  DISPID_A_WEBKIT_ANIMATIONFILLMODE = 71027_u32
  DISPID_A_WEBKIT_TRANSFORM = 71028_u32
  DISPID_A_WEBKIT_BACKGROUNDSIZE = 71029_u32
  DISPID_A_WEBKIT_BACKFACEVISIBILITY = 71030_u32
  DISPID_A_WEBKIT_BOXSIZING = 71031_u32
  DISPID_A_WEBKIT_USERSELECT = 71032_u32
  DISPID_A_WEBKIT_ANIMATION = 71033_u32
  DISPID_A_WEBKIT_TRANSITION = 71034_u32
  DISPID_A_WEBKIT_ANIMATIONNAME = 71035_u32
  DISPID_A_WEBKIT_ANIMATIONDURATION = 71036_u32
  DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION = 71037_u32
  DISPID_A_WEBKIT_ANIMATIONDELAY = 71038_u32
  DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT = 71039_u32
  DISPID_A_WEBKIT_ANIMATIONDIRECTION = 71040_u32
  DISPID_A_WEBKIT_ANIMATIONPLAYSTATE = 71041_u32
  DISPID_A_WEBKIT_TRANSITIONPROPERTY = 71042_u32
  DISPID_A_WEBKIT_TRANSITIONDURATION = 71043_u32
  DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION = 71044_u32
  DISPID_A_WEBKIT_TRANSITIONDELAY = 71045_u32
  DISPID_A_WEBKIT_BACKGROUNDATTACHMENT = 71046_u32
  DISPID_A_WEBKIT_BACKGROUNDCOLOR = 71047_u32
  DISPID_A_WEBKIT_BACKGROUNDCLIP = 71048_u32
  DISPID_A_WEBKIT_BACKGROUNDIMAGE = 71049_u32
  DISPID_A_WEBKIT_BACKGROUNDREPEAT = 71050_u32
  DISPID_A_WEBKIT_BACKGROUNDORIGIN = 71051_u32
  DISPID_A_WEBKIT_BACKGROUNDPOSITION = 71052_u32
  DISPID_A_WEBKIT_BACKGROUNDPOSITIONX = 71053_u32
  DISPID_A_WEBKIT_BACKGROUNDPOSITIONY = 71054_u32
  DISPID_A_WEBKIT_BACKGROUND = 71055_u32
  DISPID_A_WEBKIT_TRANSFORMORIGIN = 71056_u32
  DISPID_A_WEBKIT_TRANSFORMORIGINX = 71057_u32
  DISPID_A_WEBKIT_TRANSFORMORIGINY = 71058_u32
  DISPID_A_WEBKIT_TRANSFORMORIGINZ = 71059_u32
  DISPID_A_WEBKIT_TEXTSIZEADJUST = 71060_u32
  DISPID_A_WEBKIT_BORDERIMAGE = 71061_u32
  DISPID_A_WEBKIT_BORDERIMAGESOURCE = 71062_u32
  DISPID_A_WEBKIT_BORDERIMAGESLICE = 71063_u32
  DISPID_A_WEBKIT_BORDERIMAGEWIDTH = 71064_u32
  DISPID_A_WEBKIT_BORDERIMAGEOUTSET = 71065_u32
  DISPID_A_WEBKIT_BORDERIMAGEREPEAT = 71066_u32
  DISPID_INTERNAL_FIRST = 71136_u32
  DISPID_INTERNAL_BACKGROUNDDEFINITION = 71137_u32
  DISPID_A_MEDIAORIENTATION = 71138_u32
  DISPID_A_MEDIAMAXWIDTH = 71139_u32
  DISPID_A_MEDIAMINWIDTH = 71140_u32
  DISPID_A_MEDIAWIDTH = 71141_u32
  DISPID_A_MEDIAMAXHEIGHT = 71142_u32
  DISPID_A_MEDIAMINHEIGHT = 71143_u32
  DISPID_A_MEDIAHEIGHT = 71144_u32
  DISPID_A_MEDIAMAXDEVICEWIDTH = 71145_u32
  DISPID_A_MEDIAMINDEVICEWIDTH = 71146_u32
  DISPID_A_MEDIADEVICEWIDTH = 71147_u32
  DISPID_A_MEDIAMAXDEVICEHEIGHT = 71148_u32
  DISPID_A_MEDIAMINDEVICEHEIGHT = 71149_u32
  DISPID_A_MEDIADEVICEHEIGHT = 71150_u32
  DISPID_A_MEDIAMAXASPECTRATIO = 71151_u32
  DISPID_A_MEDIAMINASPECTRATIO = 71152_u32
  DISPID_A_MEDIAASPECTRATIO = 71153_u32
  DISPID_A_MEDIAMAXDEVICEASPECTRATIO = 71154_u32
  DISPID_A_MEDIAMINDEVICEASPECTRATIO = 71155_u32
  DISPID_A_MEDIADEVICEASPECTRATIO = 71156_u32
  DISPID_A_MEDIAMAXCOLOR = 71157_u32
  DISPID_A_MEDIAMINCOLOR = 71158_u32
  DISPID_A_MEDIACOLOR = 71159_u32
  DISPID_A_MEDIAMAXCOLORINDEX = 71160_u32
  DISPID_A_MEDIAMINCOLORINDEX = 71161_u32
  DISPID_A_MEDIACOLORINDEX = 71162_u32
  DISPID_A_MEDIAMAXMONOCHROME = 71163_u32
  DISPID_A_MEDIAMINMONOCHROME = 71164_u32
  DISPID_A_MEDIAMONOCHROME = 71165_u32
  DISPID_A_MEDIAMAXRESOLUTION = 71166_u32
  DISPID_A_MEDIAMINRESOLUTION = 71167_u32
  DISPID_A_MEDIARESOLUTION = 71168_u32
  DISPID_INTERNAL_CATTRIBUTEPTRCACHE = 71169_u32
  DISPID_INTERNAL_FONTFACEUNICODERANGE = 71170_u32
  DISPID_INTERNAL_TOUCHTARGETHANDLER = 71171_u32
  DISPID_INTERNAL_PAGEFLOWCOLLECTION = 71172_u32
  DISPID_INTERNAL_NAMEDFLOWCOLLECTION = 71173_u32
  DISPID_A_MEDIAMSHIGHCONTRAST = 71174_u32
  DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS = 71175_u32
  DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE = 71176_u32
  DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER = 71177_u32
  DISPID_A_MEDIAMSVIEWSTATE = 71178_u32
  DISPID_INTERNAL_ARIAATOMIC = 71179_u32
  DISPID_INTERNAL_ARIAAUTOCOMPLETE = 71180_u32
  DISPID_INTERNAL_ARIADROPEFFECT = 71181_u32
  DISPID_INTERNAL_ARIAGRABBED = 71182_u32
  DISPID_INTERNAL_ARIALABEL = 71183_u32
  DISPID_INTERNAL_ARIAMULTILINE = 71184_u32
  DISPID_INTERNAL_ARIAORIENTATION = 71185_u32
  DISPID_INTERNAL_ARIASORT = 71186_u32
  DISPID_INTERNAL_ARIAVALUETEXT = 71187_u32
  DISPID_A_MEDIAGRID = 71188_u32
  DISPID_A_MEDIASCAN = 71189_u32
  DISPID_A_ACCEVENTRECORDID_START = 71190_u32
  DISPID_A_ACCEVENTRECORDID_END = 71209_u32
  DISPID_INTERNAL_REQUIRED = 71210_u32
  DISPID_INTERNAL_CSS_PARSEDARY = 71211_u32
  DISPID_INTERNAL_SOURCELOCATION = 71212_u32
  DISPID_INTERNAL_CSS_TRACEDSTYLES = 71213_u32
  DISPID_A_BDURLIMGCTXCACHEINDEX = 71214_u32
  DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO = 71215_u32
  DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO = 71216_u32
  DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO = 71217_u32
  DISPID_SVGSTYLABLE_CLASSNAME_PROP = 1001_u32
  DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002_u32
  DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003_u32
  DISPID_SVGLOCATABLE_GETBBOX = 1004_u32
  DISPID_SVGLOCATABLE_GETCTM = 1005_u32
  DISPID_SVGLOCATABLE_GETSCREENCTM = 1006_u32
  DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007_u32
  DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR = 1008_u32
  DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP = 1009_u32
  DISPID_SVGTESTS_REQUIREDFEATURES_ATTR = 1010_u32
  DISPID_SVGTESTS_REQUIREDFEATURES_PROP = 1011_u32
  DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR = 1012_u32
  DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP = 1013_u32
  DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR = 1014_u32
  DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP = 1015_u32
  DISPID_SVGTESTS_HASEXTENSION = 1016_u32
  DISPID_SVGLANGSPACE_XMLLANG = 1017_u32
  DISPID_SVGLANGSPACE_XMLSPACE = 1018_u32
  DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR = 1019_u32
  DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP = 1020_u32
  DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR = 1021_u32
  DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP = 1022_u32
  DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR = 1023_u32
  DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP = 1024_u32
  DISPID_SVGZOOMANDPAN_ZOOMANDPAN = 1025_u32
  DISPID_SVGURIREFERENCE_HREF = 1026_u32
  DISPID_EVPROP_ONMOUSEOVER = 71536_u32
  DISPID_EVMETH_ONMOUSEOVER = 65544_u32
  DISPID_EVPROP_ONMOUSEOUT = 71537_u32
  DISPID_EVMETH_ONMOUSEOUT = 65545_u32
  DISPID_EVPROP_ONMOUSEDOWN = 71538_u32
  DISPID_EVMETH_ONMOUSEDOWN = -605_i32
  DISPID_EVPROP_ONMOUSEUP = 71539_u32
  DISPID_EVMETH_ONMOUSEUP = -607_i32
  DISPID_EVPROP_ONMOUSEMOVE = 71540_u32
  DISPID_EVMETH_ONMOUSEMOVE = -606_i32
  DISPID_EVPROP_ONKEYDOWN = 71541_u32
  DISPID_EVMETH_ONKEYDOWN = -602_i32
  DISPID_EVPROP_ONKEYUP = 71542_u32
  DISPID_EVMETH_ONKEYUP = -604_i32
  DISPID_EVPROP_ONKEYPRESS = 71543_u32
  DISPID_EVMETH_ONKEYPRESS = -603_i32
  DISPID_EVPROP_ONCLICK = 71544_u32
  DISPID_EVMETH_ONCLICK = -600_i32
  DISPID_EVPROP_ONDBLCLICK = 71545_u32
  DISPID_EVMETH_ONDBLCLICK = -601_i32
  DISPID_EVPROP_ONSELECT = 71546_u32
  DISPID_EVMETH_ONSELECT = 1006_u32
  DISPID_EVPROP_ONSUBMIT = 71547_u32
  DISPID_EVMETH_ONSUBMIT = 1007_u32
  DISPID_EVPROP_ONRESET = 71548_u32
  DISPID_EVMETH_ONRESET = 1015_u32
  DISPID_EVPROP_ONHELP = 71549_u32
  DISPID_EVMETH_ONHELP = 65546_u32
  DISPID_EVPROP_ONFOCUS = 71550_u32
  DISPID_EVMETH_ONFOCUS = 65537_u32
  DISPID_EVPROP_ONBLUR = 71551_u32
  DISPID_EVPROP_ONROWEXIT = 71554_u32
  DISPID_EVMETH_ONROWEXIT = 65542_u32
  DISPID_EVPROP_ONROWENTER = 71555_u32
  DISPID_EVMETH_ONROWENTER = 65543_u32
  DISPID_EVPROP_ONBOUNCE = 71556_u32
  DISPID_EVMETH_ONBOUNCE = 1009_u32
  DISPID_EVPROP_ONBEFOREUPDATE = 71557_u32
  DISPID_EVMETH_ONBEFOREUPDATE = 65540_u32
  DISPID_EVPROP_ONAFTERUPDATE = 71558_u32
  DISPID_EVMETH_ONAFTERUPDATE = 65541_u32
  DISPID_EVPROP_ONBEFOREDRAGOVER = 71559_u32
  DISPID_EVPROP_ONBEFOREDROPORPASTE = 71560_u32
  DISPID_EVPROP_ONREADYSTATECHANGE = 71561_u32
  DISPID_EVMETH_ONREADYSTATECHANGE = -609_i32
  DISPID_EVPROP_ONFINISH = 71562_u32
  DISPID_EVMETH_ONFINISH = 1010_u32
  DISPID_EVPROP_ONSTART = 71563_u32
  DISPID_EVMETH_ONSTART = 1011_u32
  DISPID_EVPROP_ONABORT = 71564_u32
  DISPID_EVMETH_ONABORT = 1000_u32
  DISPID_EVPROP_ONERROR = 71565_u32
  DISPID_EVMETH_ONERROR = 1002_u32
  DISPID_EVPROP_ONCHANGE = 71566_u32
  DISPID_EVMETH_ONCHANGE = 1001_u32
  DISPID_EVPROP_ONSCROLL = 71567_u32
  DISPID_EVMETH_ONSCROLL = 1014_u32
  DISPID_EVPROP_ONLOAD = 71568_u32
  DISPID_EVMETH_ONLOAD = 1003_u32
  DISPID_EVPROP_ONUNLOAD = 71569_u32
  DISPID_EVMETH_ONUNLOAD = 1008_u32
  DISPID_EVPROP_ONLAYOUT = 71570_u32
  DISPID_EVMETH_ONLAYOUT = 1013_u32
  DISPID_EVPROP_ONDRAGSTART = 71571_u32
  DISPID_EVMETH_ONDRAGSTART = 65547_u32
  DISPID_EVPROP_ONRESIZE = 71572_u32
  DISPID_EVMETH_ONRESIZE = 1016_u32
  DISPID_EVPROP_ONSELECTSTART = 71573_u32
  DISPID_EVMETH_ONSELECTSTART = 65548_u32
  DISPID_EVPROP_ONERRORUPDATE = 71574_u32
  DISPID_EVMETH_ONERRORUPDATE = 65549_u32
  DISPID_EVPROP_ONBEFOREUNLOAD = 71575_u32
  DISPID_EVMETH_ONBEFOREUNLOAD = 1017_u32
  DISPID_EVPROP_ONDATASETCHANGED = 71576_u32
  DISPID_EVMETH_ONDATASETCHANGED = 65550_u32
  DISPID_EVPROP_ONDATAAVAILABLE = 71577_u32
  DISPID_EVMETH_ONDATAAVAILABLE = 65551_u32
  DISPID_EVPROP_ONDATASETCOMPLETE = 71578_u32
  DISPID_EVMETH_ONDATASETCOMPLETE = 65552_u32
  DISPID_EVPROP_ONFILTER = 71579_u32
  DISPID_EVMETH_ONFILTER = 65553_u32
  DISPID_EVPROP_ONCHANGEFOCUS = 71580_u32
  DISPID_EVMETH_ONCHANGEFOCUS = 1018_u32
  DISPID_EVPROP_ONCHANGEBLUR = 71581_u32
  DISPID_EVMETH_ONCHANGEBLUR = 1019_u32
  DISPID_EVPROP_ONLOSECAPTURE = 71582_u32
  DISPID_EVMETH_ONLOSECAPTURE = 65554_u32
  DISPID_EVPROP_ONPROPERTYCHANGE = 71583_u32
  DISPID_EVMETH_ONPROPERTYCHANGE = 65555_u32
  DISPID_EVPROP_ONPERSISTSAVE = 71584_u32
  DISPID_EVMETH_ONPERSISTSAVE = 1021_u32
  DISPID_EVPROP_ONDRAG = 71585_u32
  DISPID_EVMETH_ONDRAG = 65556_u32
  DISPID_EVPROP_ONDRAGEND = 71586_u32
  DISPID_EVMETH_ONDRAGEND = 65557_u32
  DISPID_EVPROP_ONDRAGENTER = 71587_u32
  DISPID_EVMETH_ONDRAGENTER = 65558_u32
  DISPID_EVPROP_ONDRAGOVER = 71588_u32
  DISPID_EVMETH_ONDRAGOVER = 65559_u32
  DISPID_EVPROP_ONDRAGLEAVE = 71589_u32
  DISPID_EVMETH_ONDRAGLEAVE = 65560_u32
  DISPID_EVPROP_ONDROP = 71590_u32
  DISPID_EVMETH_ONDROP = 65561_u32
  DISPID_EVPROP_ONCUT = 71591_u32
  DISPID_EVMETH_ONCUT = 65562_u32
  DISPID_EVPROP_ONCOPY = 71592_u32
  DISPID_EVMETH_ONCOPY = 65563_u32
  DISPID_EVPROP_ONPASTE = 71593_u32
  DISPID_EVMETH_ONPASTE = 65564_u32
  DISPID_EVPROP_ONBEFORECUT = 71594_u32
  DISPID_EVMETH_ONBEFORECUT = 65565_u32
  DISPID_EVPROP_ONBEFORECOPY = 71595_u32
  DISPID_EVMETH_ONBEFORECOPY = 65566_u32
  DISPID_EVPROP_ONBEFOREPASTE = 71596_u32
  DISPID_EVMETH_ONBEFOREPASTE = 65567_u32
  DISPID_EVPROP_ONPERSISTLOAD = 71597_u32
  DISPID_EVMETH_ONPERSISTLOAD = 1022_u32
  DISPID_EVPROP_ONROWSDELETE = 71598_u32
  DISPID_EVMETH_ONROWSDELETE = 65568_u32
  DISPID_EVPROP_ONROWSINSERTED = 71599_u32
  DISPID_EVMETH_ONROWSINSERTED = 65569_u32
  DISPID_EVPROP_ONCELLCHANGE = 71600_u32
  DISPID_EVMETH_ONCELLCHANGE = 65570_u32
  DISPID_EVPROP_ONCONTEXTMENU = 71601_u32
  DISPID_EVMETH_ONCONTEXTMENU = 1023_u32
  DISPID_EVPROP_ONBEFOREPRINT = 71602_u32
  DISPID_EVMETH_ONBEFOREPRINT = 1024_u32
  DISPID_EVPROP_ONAFTERPRINT = 71603_u32
  DISPID_EVMETH_ONAFTERPRINT = 1025_u32
  DISPID_EVPROP_ONSTOP = 71604_u32
  DISPID_EVMETH_ONSTOP = 1026_u32
  DISPID_EVPROP_ONBEFOREEDITFOCUS = 71605_u32
  DISPID_EVMETH_ONBEFOREEDITFOCUS = 1027_u32
  DISPID_EVPROP_ONATTACHEVENT = 71606_u32
  DISPID_EVPROP_ONMOUSEHOVER = 71607_u32
  DISPID_EVMETH_ONMOUSEHOVER = 1028_u32
  DISPID_EVPROP_ONCONTENTREADY = 71608_u32
  DISPID_EVMETH_ONCONTENTREADY = 1029_u32
  DISPID_EVPROP_ONLAYOUTCOMPLETE = 71609_u32
  DISPID_EVMETH_ONLAYOUTCOMPLETE = 1030_u32
  DISPID_EVPROP_ONPAGE = 71610_u32
  DISPID_EVMETH_ONPAGE = 1031_u32
  DISPID_EVPROP_ONLINKEDOVERFLOW = 71611_u32
  DISPID_EVMETH_ONLINKEDOVERFLOW = 1032_u32
  DISPID_EVPROP_ONMOUSEWHEEL = 71612_u32
  DISPID_EVMETH_ONMOUSEWHEEL = 1033_u32
  DISPID_EVPROP_ONBEFOREDEACTIVATE = 71613_u32
  DISPID_EVMETH_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_EVPROP_ONMOVE = 71614_u32
  DISPID_EVMETH_ONMOVE = 1035_u32
  DISPID_EVPROP_ONCONTROLSELECT = 71615_u32
  DISPID_EVMETH_ONCONTROLSELECT = 1036_u32
  DISPID_EVPROP_ONSELECTIONCHANGE = 71616_u32
  DISPID_EVMETH_ONSELECTIONCHANGE = 1037_u32
  DISPID_EVPROP_ONMOVESTART = 71617_u32
  DISPID_EVMETH_ONMOVESTART = 1038_u32
  DISPID_EVPROP_ONMOVEEND = 71618_u32
  DISPID_EVMETH_ONMOVEEND = 1039_u32
  DISPID_EVPROP_ONRESIZESTART = 71619_u32
  DISPID_EVMETH_ONRESIZESTART = 1040_u32
  DISPID_EVPROP_ONRESIZEEND = 71620_u32
  DISPID_EVMETH_ONRESIZEEND = 1041_u32
  DISPID_EVPROP_ONMOUSEENTER = 71621_u32
  DISPID_EVMETH_ONMOUSEENTER = 1042_u32
  DISPID_EVPROP_ONMOUSELEAVE = 71622_u32
  DISPID_EVMETH_ONMOUSELEAVE = 1043_u32
  DISPID_EVPROP_ONACTIVATE = 71623_u32
  DISPID_EVMETH_ONACTIVATE = 1044_u32
  DISPID_EVPROP_ONDEACTIVATE = 71624_u32
  DISPID_EVMETH_ONDEACTIVATE = 1045_u32
  DISPID_EVPROP_ONMULTILAYOUTCLEANUP = 71625_u32
  DISPID_EVMETH_ONMULTILAYOUTCLEANUP = 1046_u32
  DISPID_EVPROP_ONBEFOREACTIVATE = 71626_u32
  DISPID_EVMETH_ONBEFOREACTIVATE = 1047_u32
  DISPID_EVPROP_ONFOCUSIN = 71627_u32
  DISPID_EVMETH_ONFOCUSIN = 1048_u32
  DISPID_EVPROP_ONFOCUSOUT = 71628_u32
  DISPID_EVMETH_ONFOCUSOUT = 1049_u32
  DISPID_EVPROP_ONVALUECHANGE = 71629_u32
  DISPID_EVMETH_ONVALUECHANGE = 1050_u32
  DISPID_EVPROP_ONSELECTADD = 71630_u32
  DISPID_EVMETH_ONSELECTADD = 1051_u32
  DISPID_EVPROP_ONSELECTREMOVE = 71631_u32
  DISPID_EVMETH_ONSELECTREMOVE = 1052_u32
  DISPID_EVPROP_ONSELECTWITHIN = 71632_u32
  DISPID_EVMETH_ONSELECTWITHIN = 1053_u32
  DISPID_EVPROP_ONSYSTEMSCROLLINGSTART = 71633_u32
  DISPID_EVMETH_ONSYSTEMSCROLLINGSTART = 1054_u32
  DISPID_EVPROP_ONSYSTEMSCROLLINGEND = 71634_u32
  DISPID_EVMETH_ONSYSTEMSCROLLINGEND = 1055_u32
  DISPID_EVPROP_ONOBJECTCONTENTSCROLLED = 71635_u32
  DISPID_EVMETH_ONOBJECTCONTENTSCROLLED = 1056_u32
  DISPID_EVPROP_ONSTORAGE = 71636_u32
  DISPID_EVMETH_ONSTORAGE = 1057_u32
  DISPID_EVPROP_ONSTORAGECOMMIT = 71637_u32
  DISPID_EVMETH_ONSTORAGECOMMIT = 1058_u32
  DISPID_EVPROP_ONSHOW = 71638_u32
  DISPID_EVMETH_ONSHOW = 1059_u32
  DISPID_EVPROP_ONHIDE = 71639_u32
  DISPID_EVMETH_ONHIDE = 1060_u32
  DISPID_EVPROP_ONALERT = 71640_u32
  DISPID_EVMETH_ONALERT = 1061_u32
  DISPID_EVPROP_ONPOPUPMENUSTART = 71641_u32
  DISPID_EVMETH_ONPOPUPMENUSTART = 1062_u32
  DISPID_EVPROP_ONPOPUPMENUEND = 71642_u32
  DISPID_EVMETH_ONPOPUPMENUEND = 1063_u32
  DISPID_EVPROP_ONONLINE = 71643_u32
  DISPID_EVMETH_ONONLINE = 1064_u32
  DISPID_EVPROP_ONOFFLINE = 71644_u32
  DISPID_EVMETH_ONOFFLINE = 1065_u32
  DISPID_EVPROP_ONHASHCHANGE = 71645_u32
  DISPID_EVMETH_ONHASHCHANGE = 1066_u32
  DISPID_EVPROP_ONMESSAGE = 71646_u32
  DISPID_EVMETH_ONMESSAGE = 1067_u32
  DISPID_EVPROP_ONDOMMUTATION = 71647_u32
  DISPID_EVMETH_ONDOMMUTATION = 1068_u32
  DISPID_EVPROP_SINKLIMIT = 71647_u32
  DISPID_EVPROP_TIMEOUT = 71648_u32
  DISPID_EVPROP_WHEEL = 71649_u32
  DISPID_EVPROP_SVGLOAD = 71650_u32
  DISPID_EVPROP_SVGUNLOAD = 71651_u32
  DISPID_EVPROP_SVGABORT = 71652_u32
  DISPID_EVPROP_SVGERROR = 71653_u32
  DISPID_EVPROP_SVGRESIZE = 71654_u32
  DISPID_EVPROP_SVGSCROLL = 71655_u32
  DISPID_EVPROP_SVGZOOM = 71656_u32
  DISPID_EVPROP_ONMSTHUMBNAILCLICK = 71657_u32
  DISPID_EVPROP_COMPOSITIONSTART = 71658_u32
  DISPID_EVPROP_COMPOSITIONUPDATE = 71659_u32
  DISPID_EVPROP_COMPOSITIONEND = 71660_u32
  DISPID_EVPROP_DOMATTRMODIFIED = 71661_u32
  DISPID_EVPROP_DOMCONTENTLOADED = 71662_u32
  DISPID_EVPROP_INPUT = 71663_u32
  DISPID_EVPROP_DOMCHARDATAMODIFIED = 71664_u32
  DISPID_EVPROP_TEXTINPUT = 71665_u32
  DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666_u32
  DISPID_EVPROP_DOMNODEINSERTED = 71667_u32
  DISPID_EVPROP_DOMNODEREMOVED = 71668_u32
  DISPID_EVPROP_DOMSUBTREEMODIFIED = 71669_u32
  DISPID_EVPROP_CANPLAY = 71670_u32
  DISPID_EVPROP_CANPLAYTHROUGH = 71671_u32
  DISPID_EVPROP_DURATIONCHANGE = 71672_u32
  DISPID_EVPROP_EMPTIED = 71673_u32
  DISPID_EVPROP_ENDED = 71674_u32
  DISPID_EVPROP_LOADEDDATA = 71675_u32
  DISPID_EVPROP_LOADEDMETADATA = 71676_u32
  DISPID_EVPROP_LOADSTART = 71677_u32
  DISPID_EVPROP_PAUSE = 71678_u32
  DISPID_EVPROP_PLAY = 71679_u32
  DISPID_EVPROP_PLAYING = 71680_u32
  DISPID_EVPROP_PROGRESS = 71681_u32
  DISPID_EVPROP_RATECHANGE = 71682_u32
  DISPID_EVPROP_SEEKED = 71683_u32
  DISPID_EVPROP_SEEKING = 71684_u32
  DISPID_EVPROP_STALLED = 71685_u32
  DISPID_EVPROP_SUSPEND = 71686_u32
  DISPID_EVPROP_TIMEUPDATE = 71687_u32
  DISPID_EVPROP_VOLUMECHANGE = 71688_u32
  DISPID_EVPROP_WAITING = 71689_u32
  DISPID_EVPROP_ONMSPOINTERDOWN = 71690_u32
  DISPID_EVPROP_ONMSPOINTERMOVE = 71691_u32
  DISPID_EVPROP_ONMSPOINTERUP = 71692_u32
  DISPID_EVPROP_ONMSPOINTEROVER = 71693_u32
  DISPID_EVPROP_ONMSPOINTEROUT = 71694_u32
  DISPID_EVPROP_ONMSPOINTERCANCEL = 71695_u32
  DISPID_EVPROP_ONMSPOINTERHOVER = 71696_u32
  DISPID_EVPROP_MSCONNECT = 71697_u32
  DISPID_EVPROP_MSDISCONNECT = 71698_u32
  DISPID_EVPROP_ONMSGESTURESTART = 71699_u32
  DISPID_EVPROP_ONMSGESTURECHANGE = 71700_u32
  DISPID_EVPROP_ONMSGESTUREEND = 71701_u32
  DISPID_EVPROP_ONMSGESTUREHOLD = 71702_u32
  DISPID_EVPROP_ONMSGESTURETAP = 71703_u32
  DISPID_EVPROP_ONMSGESTUREDOUBLETAP = 71704_u32
  DISPID_EVPROP_ONMSINERTIASTART = 71705_u32
  DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE = 71706_u32
  DISPID_EVPROP_ONMSGOTPOINTERCAPTURE = 71707_u32
  DISPID_EVPROP_ONMSCONTENTZOOM = 71708_u32
  DISPID_EVPROP_ONTRANSITIONSTART = 71709_u32
  DISPID_EVPROP_ONTRANSITIONEND = 71710_u32
  DISPID_EVPROP_ONANIMATIONSTART = 71711_u32
  DISPID_EVPROP_ONANIMATIONEND = 71712_u32
  DISPID_EVPROP_ONANIMATIONITERATION = 71713_u32
  DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED = 71714_u32
  DISPID_EVPROP_ONOPEN = 71715_u32
  DISPID_EVPROP_ONCLOSE = 71716_u32
  DISPID_EVPROP_CHECKING = 71717_u32
  DISPID_EVPROP_NOUPDATE = 71718_u32
  DISPID_EVPROP_DOWNLOADING = 71719_u32
  DISPID_EVPROP_UPDATEREADY = 71720_u32
  DISPID_EVPROP_CACHED = 71721_u32
  DISPID_EVPROP_OBSOLETE = 71722_u32
  DISPID_EVPROP_LOADEND = 71723_u32
  DISPID_EVPROP_INVALID = 71724_u32
  DISPID_EVPROP_ONSUCCESS = 71725_u32
  DISPID_EVPROP_ONBLOCKED = 71726_u32
  DISPID_EVPROP_ONCOMPLETE = 71727_u32
  DISPID_EVPROP_ONPOPSTATE = 71728_u32
  DISPID_EVPROP_ONCUECHANGE = 71729_u32
  DISPID_EVPROP_ONENTER = 71730_u32
  DISPID_EVPROP_ONEXIT = 71731_u32
  DISPID_EVPROP_VISIBILITYCHANGE = 71732_u32
  DISPID_EVPROP_ONMSREGIONUPDATE = 71733_u32
  DISPID_EVPROP_ONUPGRADENEEDED = 71734_u32
  DISPID_EVPROP_ONMSVIDEOFORMATCHANGED = 71735_u32
  DISPID_EVPROP_ADDTRACK = 71736_u32
  DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED = 71737_u32
  DISPID_EVPROP_ONMSHOLDVISUAL = 71738_u32
  DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED = 71739_u32
  DISPID_EVPROP_ONMSFULLSCREENCHANGE = 71740_u32
  DISPID_EVPROP_ONMSFULLSCREENERROR = 71741_u32
  DISPID_EVPROP_MSELEMENTRESIZE = 71742_u32
  DISPID_EVPROP_ONSOURCEOPEN = 71743_u32
  DISPID_EVPROP_ONSOURCECLOSE = 71744_u32
  DISPID_EVPROP_ONSOURCEENDED = 71745_u32
  DISPID_EVPROP_ONADDSOURCEBUFFER = 71746_u32
  DISPID_EVPROP_ONREMOVESOURCEBUFFER = 71747_u32
  DISPID_EVPROP_ONMSNEEDKEY = 71748_u32
  DISPID_EVPROP_ONMSKEYMESSAGE = 71749_u32
  DISPID_EVPROP_ONMSKEYERROR = 71750_u32
  DISPID_EVPROP_ONMSKEYADDED = 71751_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED = 71752_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING = 71753_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING = 71754_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED = 71755_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED = 71756_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING = 71757_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING = 71758_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED = 71759_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY = 71760_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT = 71761_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING = 71762_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED = 71763_u32
  DISPID_EVPROP_WEBGLCONTEXTLOST = 71764_u32
  DISPID_EVPROP_WEBGLCONTEXTRESTORED = 71765_u32
  DISPID_EVPROP_ONUPDATESTART = 71766_u32
  DISPID_EVPROP_ONUPDATE = 71767_u32
  DISPID_EVPROP_ONUPDATEEND = 71768_u32
  DISPID_EVPROP_ONMSPOINTERENTER = 71769_u32
  DISPID_EVPROP_ONMSPOINTERLEAVE = 71770_u32
  DISPID_EVPROP_ONMSSITEPINNED = 71771_u32
  DISPID_EVPROP_MSORIENTATIONCHANGE = 71772_u32
  DISPID_EVPROP_ONDEVICEORIENTATION = 71773_u32
  DISPID_EVPROP_ONDEVICEMOTION = 71774_u32
  DISPID_EVPROP_ONPAGESHOW = 71775_u32
  DISPID_EVPROP_ONPAGEHIDE = 71776_u32
  DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW = 71777_u32
  DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE = 71778_u32
  DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE = 71779_u32
  DISPID_EVPROP_HTML5ONREADYSTATECHANGE = 71780_u32
  DISPID_EVPROP_REMOVETRACK = 71781_u32
  DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION = 71782_u32
  DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED = 71783_u32
  DISPID_EVPROP_ONTOUCHSTART = 71784_u32
  DISPID_EVPROP_ONTOUCHEND = 71785_u32
  DISPID_EVPROP_ONTOUCHMOVE = 71786_u32
  DISPID_EVPROP_ONTOUCHCANCEL = 71787_u32
  DISPID_EVPROP_ONWEBKITTRANSITIONEND = 71788_u32
  DISPID_EVPROP_ONWEBKITANIMATIONSTART = 71789_u32
  DISPID_EVPROP_ONWEBKITANIMATIONEND = 71790_u32
  DISPID_EVPROP_ONWEBKITANIMATIONITERATION = 71791_u32
  DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR = 71792_u32
  DISPID_EVPROP_ONDOMFOCUSIN = 71793_u32
  DISPID_EVPROP_ONDOMFOCUSOUT = 71794_u32
  DISPID_EVPROP_ORIENTATIONCHANGE = 71795_u32
  DISPID_EVPROPS_COUNT = 260_u32
  DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR = 66045_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH = 70037_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE = 70038_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE = 70039_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY = 70040_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY = 70041_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY = 70042_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ITEM = 0_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY = 70554_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE = 70560_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT = 70561_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT = 70563_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE = 70555_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONT = 70577_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_COLOR = 70538_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND = 70568_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR = -501_i32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE = 70537_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT = 70580_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT = 70581_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION = 70582_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX = 70569_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY = 70570_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING = 70583_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING = 70544_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION = 70571_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN = 70584_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM = 70540_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN = 65608_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT = 70543_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT = 70542_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP = 70573_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT = 70574_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM = 70575_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT = 70576_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN = 70572_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP = 70548_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT = 70549_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM = 70550_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT = 70551_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PADDING = 70547_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDER = 70585_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP = 70586_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT = 70587_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM = 70588_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT = 70589_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR = 70590_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR = 70591_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR = 70592_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR = 70593_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR = 70594_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH = 70595_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH = 70596_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH = 70597_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH = 70598_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH = 70599_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE = 70600_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE = 70601_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE = 70602_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE = 70603_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE = 70604_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH = 65541_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT = 65542_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT = 70606_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR = 70552_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY = 70607_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY = 70616_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE = 70608_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION = 70609_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE = 70610_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE = 70611_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE = 70612_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TOP = 65540_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LEFT = 65539_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX = 70627_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW = 70546_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE = 70613_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER = 70614_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT = 70635_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR = 70638_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIP = 70628_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FILTER = 70618_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT = 70634_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE = 70620_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION = 70655_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR = 70651_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_POSITION = 70626_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI = 70654_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM = 65614_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT = 65613_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE = 70656_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN = 70657_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION = 70658_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG = 70659_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR = 70663_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE = 70664_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE = 70665_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE = 70666_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID = 70667_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE = 70668_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK = 70670_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK = 70669_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY = 70671_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM = 70672_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA = 70673_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX = 70675_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY = 70676_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR = 70683_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW = 70691_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM = 70689_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP = 70694_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION = 70695_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR = 70716_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR = 70717_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR = 70718_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR = 70719_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR = 70720_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR = 70721_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR = 70722_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR = 70732_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE = 70728_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST = 70739_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE = 70740_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW = 70745_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT = 70747_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE = 70749_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT = 70750_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH = 70751_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH = 70752_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT = 70754_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE = 70755_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT = 70756_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET = 70757_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE = 70758_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH = 70759_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE = 70760_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR = 70761_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING = 70762_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING = 70763_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS = 70764_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS = 70765_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE = 70766_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS = 70786_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION = 70787_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES = 70788_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE = 70814_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT = 70815_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE = 70816_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST = 70817_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH = 70818_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY = 70819_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH = 70820_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE = 70821_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FILL = 70822_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY = 70823_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE = 70824_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_KERNING = 70825_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARKER = 70826_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND = 70827_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID = 70828_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART = 70829_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MASK = 70830_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS = 70831_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR = 70832_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY = 70833_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKE = 70834_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY = 70835_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET = 70836_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP = 70837_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN = 70838_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT = 70839_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY = 70840_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH = 70841_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR = 70842_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL = 70843_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL = 70844_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS = 70846_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS = 70847_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS = 70848_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS = 70849_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS = 70850_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP = 70629_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT = 70630_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM = 70631_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT = 70632_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT = 70845_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP = 70852_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN = 70853_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE = 70854_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW = 70855_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM = 70851_u32
  DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN = 70861_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING = 70891_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING = 70892_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE = 70893_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS = 70894_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING = 70895_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE = 70896_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT = 70897_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP = 70898_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS = 70899_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN = 70901_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX = 70902_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX = 70903_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY = 70904_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX = 70905_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY = 70906_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN = 70908_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN = 70909_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS = 70910_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN = 70911_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW = 70913_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN = 70914_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS = 70915_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN = 70916_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH = 70937_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN = 70947_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW = 70949_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME = 70917_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION = 70918_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION = 70919_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY = 70920_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION = 70921_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE = 70922_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT = 70923_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION = 70924_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE = 70925_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS = 70928_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT = 70872_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH = 70873_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP = 70874_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL = 70875_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN = 70876_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS = 70871_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE = 70877_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR = 70880_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE = 70878_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH = 70879_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE = 70881_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER = 70882_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE = 70883_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR = 70926_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY = 70927_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR = 70929_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN = 70930_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN = 70931_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX = 70932_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX = 70933_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT = 70934_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW = 70936_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM = 70938_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO = 70939_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS = 70940_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE = 70941_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS = 70942_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES = 70943_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST = 70945_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND = 70946_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS = 70950_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT = 70951_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE = 70935_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE = 70889_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY = 70890_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE = 70885_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN = 70886_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY = 70866_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION = 70867_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION = 70868_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY = 70869_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION = 70870_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION = 70952_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION = 70954_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX = 70955_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE = 70956_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE = 70957_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE = 70958_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW = 70959_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION = 70960_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP = 70961_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN = 70962_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN = 70963_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK = 70964_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK = 70965_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER = 70966_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT = 70994_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM = 70967_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN = 70968_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE = 70976_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY = 70977_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE = 70974_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN = 70975_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY = 70969_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION = 70970_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION = 70971_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY = 70972_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION = 70973_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS = 70987_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME = 70978_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION = 70979_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION = 70980_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY = 70981_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION = 70982_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE = 70983_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT = 70984_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION = 70985_u32
  DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE = 70986_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX = 71002_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION = 70998_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP = 70999_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW = 71000_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW = 71003_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK = 71004_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS = 71005_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT = 71006_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS = 71007_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF = 71008_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT = 71009_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE = 71010_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE = 71011_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE = 71012_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH = 71013_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET = 71014_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT = 71015_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN = 71017_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL = 71018_u32
  DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION = 71019_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE = 71020_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT = 71032_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN = 71021_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP = 71022_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK = 71023_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX = 71024_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT = 71025_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION = 71026_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM = 71028_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE = 71029_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY = 71030_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION = 71033_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION = 71034_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME = 71035_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION = 71036_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION = 71037_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY = 71038_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT = 71039_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION = 71040_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE = 71041_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY = 71042_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION = 71043_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION = 71044_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY = 71045_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT = 71046_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR = 71047_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP = 71048_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE = 71049_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT = 71050_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN = 71051_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION = 71052_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX = 71053_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY = 71054_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND = 71055_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN = 71056_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST = 70864_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST = 71060_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE = 71061_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE = 71062_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE = 71063_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH = 71064_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET = 71065_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT = 71066_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING = 71031_u32
  DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE = 71027_u32
  DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED = 70043_u32
  DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED = 70044_u32
  DISPID_IHTMLSTYLE_FONTFAMILY = 70554_u32
  DISPID_IHTMLSTYLE_FONTSTYLE = 70560_u32
  DISPID_IHTMLSTYLE_FONTVARIANT = 70561_u32
  DISPID_IHTMLSTYLE_FONTWEIGHT = 70563_u32
  DISPID_IHTMLSTYLE_FONTSIZE = 70555_u32
  DISPID_IHTMLSTYLE_FONT = 70577_u32
  DISPID_IHTMLSTYLE_COLOR = 70538_u32
  DISPID_IHTMLSTYLE_BACKGROUND = 70568_u32
  DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = -501_i32
  DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = 70537_u32
  DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = 70580_u32
  DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = 70581_u32
  DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = 70582_u32
  DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = 70569_u32
  DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = 70570_u32
  DISPID_IHTMLSTYLE_WORDSPACING = 70583_u32
  DISPID_IHTMLSTYLE_LETTERSPACING = 70544_u32
  DISPID_IHTMLSTYLE_TEXTDECORATION = 70571_u32
  DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = 70559_u32
  DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = 70557_u32
  DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = 70605_u32
  DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = 70556_u32
  DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = 70558_u32
  DISPID_IHTMLSTYLE_VERTICALALIGN = 70584_u32
  DISPID_IHTMLSTYLE_TEXTTRANSFORM = 70540_u32
  DISPID_IHTMLSTYLE_TEXTALIGN = 65608_u32
  DISPID_IHTMLSTYLE_TEXTINDENT = 70543_u32
  DISPID_IHTMLSTYLE_LINEHEIGHT = 70542_u32
  DISPID_IHTMLSTYLE_MARGINTOP = 70573_u32
  DISPID_IHTMLSTYLE_MARGINRIGHT = 70574_u32
  DISPID_IHTMLSTYLE_MARGINBOTTOM = 70575_u32
  DISPID_IHTMLSTYLE_MARGINLEFT = 70576_u32
  DISPID_IHTMLSTYLE_MARGIN = 70572_u32
  DISPID_IHTMLSTYLE_PADDINGTOP = 70548_u32
  DISPID_IHTMLSTYLE_PADDINGRIGHT = 70549_u32
  DISPID_IHTMLSTYLE_PADDINGBOTTOM = 70550_u32
  DISPID_IHTMLSTYLE_PADDINGLEFT = 70551_u32
  DISPID_IHTMLSTYLE_PADDING = 70547_u32
  DISPID_IHTMLSTYLE_BORDER = 70585_u32
  DISPID_IHTMLSTYLE_BORDERTOP = 70586_u32
  DISPID_IHTMLSTYLE_BORDERRIGHT = 70587_u32
  DISPID_IHTMLSTYLE_BORDERBOTTOM = 70588_u32
  DISPID_IHTMLSTYLE_BORDERLEFT = 70589_u32
  DISPID_IHTMLSTYLE_BORDERCOLOR = 70590_u32
  DISPID_IHTMLSTYLE_BORDERTOPCOLOR = 70591_u32
  DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = 70592_u32
  DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = 70593_u32
  DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = 70594_u32
  DISPID_IHTMLSTYLE_BORDERWIDTH = 70595_u32
  DISPID_IHTMLSTYLE_BORDERTOPWIDTH = 70596_u32
  DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = 70597_u32
  DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = 70598_u32
  DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = 70599_u32
  DISPID_IHTMLSTYLE_BORDERSTYLE = 70600_u32
  DISPID_IHTMLSTYLE_BORDERTOPSTYLE = 70601_u32
  DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = 70602_u32
  DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = 70603_u32
  DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = 70604_u32
  DISPID_IHTMLSTYLE_WIDTH = 65541_u32
  DISPID_IHTMLSTYLE_HEIGHT = 65542_u32
  DISPID_IHTMLSTYLE_STYLEFLOAT = 70606_u32
  DISPID_IHTMLSTYLE_CLEAR = 70552_u32
  DISPID_IHTMLSTYLE_DISPLAY = 70607_u32
  DISPID_IHTMLSTYLE_VISIBILITY = 70616_u32
  DISPID_IHTMLSTYLE_LISTSTYLETYPE = 70608_u32
  DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = 70609_u32
  DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = 70610_u32
  DISPID_IHTMLSTYLE_LISTSTYLE = 70611_u32
  DISPID_IHTMLSTYLE_WHITESPACE = 70612_u32
  DISPID_IHTMLSTYLE_TOP = 65540_u32
  DISPID_IHTMLSTYLE_LEFT = 65539_u32
  DISPID_IHTMLSTYLE_POSITION = 70626_u32
  DISPID_IHTMLSTYLE_ZINDEX = 70627_u32
  DISPID_IHTMLSTYLE_OVERFLOW = 70546_u32
  DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = 70613_u32
  DISPID_IHTMLSTYLE_PAGEBREAKAFTER = 70614_u32
  DISPID_IHTMLSTYLE_CSSTEXT = 70635_u32
  DISPID_IHTMLSTYLE_PIXELTOP = 69536_u32
  DISPID_IHTMLSTYLE_PIXELLEFT = 69537_u32
  DISPID_IHTMLSTYLE_PIXELWIDTH = 69538_u32
  DISPID_IHTMLSTYLE_PIXELHEIGHT = 69539_u32
  DISPID_IHTMLSTYLE_POSTOP = 69540_u32
  DISPID_IHTMLSTYLE_POSLEFT = 69541_u32
  DISPID_IHTMLSTYLE_POSWIDTH = 69542_u32
  DISPID_IHTMLSTYLE_POSHEIGHT = 69543_u32
  DISPID_IHTMLSTYLE_CURSOR = 70638_u32
  DISPID_IHTMLSTYLE_CLIP = 70628_u32
  DISPID_IHTMLSTYLE_FILTER = 70618_u32
  DISPID_IHTMLSTYLE_SETATTRIBUTE = 66037_u32
  DISPID_IHTMLSTYLE_GETATTRIBUTE = 66038_u32
  DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = 66039_u32
  DISPID_IHTMLSTYLE_TOSTRING = 69544_u32
  DISPID_IHTMLSTYLE2_TABLELAYOUT = 70634_u32
  DISPID_IHTMLSTYLE2_BORDERCOLLAPSE = 70620_u32
  DISPID_IHTMLSTYLE2_DIRECTION = 70655_u32
  DISPID_IHTMLSTYLE2_BEHAVIOR = 70651_u32
  DISPID_IHTMLSTYLE2_SETEXPRESSION = 66040_u32
  DISPID_IHTMLSTYLE2_GETEXPRESSION = 66041_u32
  DISPID_IHTMLSTYLE2_REMOVEEXPRESSION = 66042_u32
  DISPID_IHTMLSTYLE2_POSITION = 70626_u32
  DISPID_IHTMLSTYLE2_UNICODEBIDI = 70654_u32
  DISPID_IHTMLSTYLE2_BOTTOM = 65614_u32
  DISPID_IHTMLSTYLE2_RIGHT = 65613_u32
  DISPID_IHTMLSTYLE2_PIXELBOTTOM = 69545_u32
  DISPID_IHTMLSTYLE2_PIXELRIGHT = 69546_u32
  DISPID_IHTMLSTYLE2_POSBOTTOM = 69547_u32
  DISPID_IHTMLSTYLE2_POSRIGHT = 69548_u32
  DISPID_IHTMLSTYLE2_IMEMODE = 70656_u32
  DISPID_IHTMLSTYLE2_RUBYALIGN = 70657_u32
  DISPID_IHTMLSTYLE2_RUBYPOSITION = 70658_u32
  DISPID_IHTMLSTYLE2_RUBYOVERHANG = 70659_u32
  DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR = 70663_u32
  DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE = 70664_u32
  DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE = 70665_u32
  DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE = 70666_u32
  DISPID_IHTMLSTYLE2_LAYOUTGRID = 70667_u32
  DISPID_IHTMLSTYLE2_WORDBREAK = 70670_u32
  DISPID_IHTMLSTYLE2_LINEBREAK = 70669_u32
  DISPID_IHTMLSTYLE2_TEXTJUSTIFY = 70671_u32
  DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM = 70672_u32
  DISPID_IHTMLSTYLE2_TEXTKASHIDA = 70673_u32
  DISPID_IHTMLSTYLE2_TEXTAUTOSPACE = 70668_u32
  DISPID_IHTMLSTYLE2_OVERFLOWX = 70675_u32
  DISPID_IHTMLSTYLE2_OVERFLOWY = 70676_u32
  DISPID_IHTMLSTYLE2_ACCELERATOR = 70683_u32
  DISPID_IHTMLSTYLE3_LAYOUTFLOW = 70691_u32
  DISPID_IHTMLSTYLE3_ZOOM = 70689_u32
  DISPID_IHTMLSTYLE3_WORDWRAP = 70694_u32
  DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = 70695_u32
  DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = 70716_u32
  DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = 70717_u32
  DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718_u32
  DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = 70719_u32
  DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720_u32
  DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721_u32
  DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = 70722_u32
  DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = 70732_u32
  DISPID_IHTMLSTYLE3_WRITINGMODE = 70728_u32
  DISPID_IHTMLSTYLE3_TEXTALIGNLAST = 70739_u32
  DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = 70740_u32
  DISPID_IHTMLSTYLE4_TEXTOVERFLOW = 70745_u32
  DISPID_IHTMLSTYLE4_MINHEIGHT = 70747_u32
  DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE = 70749_u32
  DISPID_IHTMLSTYLE5_MAXHEIGHT = 70750_u32
  DISPID_IHTMLSTYLE5_MINWIDTH = 70751_u32
  DISPID_IHTMLSTYLE5_MAXWIDTH = 70752_u32
  DISPID_IHTMLSTYLE6_CONTENT = 70754_u32
  DISPID_IHTMLSTYLE6_CAPTIONSIDE = 70755_u32
  DISPID_IHTMLSTYLE6_COUNTERINCREMENT = 70756_u32
  DISPID_IHTMLSTYLE6_COUNTERRESET = 70757_u32
  DISPID_IHTMLSTYLE6_OUTLINE = 70758_u32
  DISPID_IHTMLSTYLE6_OUTLINEWIDTH = 70759_u32
  DISPID_IHTMLSTYLE6_OUTLINESTYLE = 70760_u32
  DISPID_IHTMLSTYLE6_OUTLINECOLOR = 70761_u32
  DISPID_IHTMLSTYLE6_BOXSIZING = 70762_u32
  DISPID_IHTMLSTYLE6_BORDERSPACING = 70763_u32
  DISPID_IHTMLSTYLE6_ORPHANS = 70764_u32
  DISPID_IHTMLSTYLE6_WIDOWS = 70765_u32
  DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE = 70766_u32
  DISPID_IHTMLSTYLE6_EMPTYCELLS = 70786_u32
  DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION = 70787_u32
  DISPID_IHTMLSTYLE6_QUOTES = 70788_u32
  DISPID_IHTMLRULESTYLE_FONTFAMILY = 70554_u32
  DISPID_IHTMLRULESTYLE_FONTSTYLE = 70560_u32
  DISPID_IHTMLRULESTYLE_FONTVARIANT = 70561_u32
  DISPID_IHTMLRULESTYLE_FONTWEIGHT = 70563_u32
  DISPID_IHTMLRULESTYLE_FONTSIZE = 70555_u32
  DISPID_IHTMLRULESTYLE_FONT = 70577_u32
  DISPID_IHTMLRULESTYLE_COLOR = 70538_u32
  DISPID_IHTMLRULESTYLE_BACKGROUND = 70568_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = -501_i32
  DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = 70537_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = 70580_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = 70581_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = 70582_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = 70569_u32
  DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = 70570_u32
  DISPID_IHTMLRULESTYLE_WORDSPACING = 70583_u32
  DISPID_IHTMLRULESTYLE_LETTERSPACING = 70544_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATION = 70571_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = 70559_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = 70557_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = 70605_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = 70556_u32
  DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = 70558_u32
  DISPID_IHTMLRULESTYLE_VERTICALALIGN = 70584_u32
  DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = 70540_u32
  DISPID_IHTMLRULESTYLE_TEXTALIGN = 65608_u32
  DISPID_IHTMLRULESTYLE_TEXTINDENT = 70543_u32
  DISPID_IHTMLRULESTYLE_LINEHEIGHT = 70542_u32
  DISPID_IHTMLRULESTYLE_MARGINTOP = 70573_u32
  DISPID_IHTMLRULESTYLE_MARGINRIGHT = 70574_u32
  DISPID_IHTMLRULESTYLE_MARGINBOTTOM = 70575_u32
  DISPID_IHTMLRULESTYLE_MARGINLEFT = 70576_u32
  DISPID_IHTMLRULESTYLE_MARGIN = 70572_u32
  DISPID_IHTMLRULESTYLE_PADDINGTOP = 70548_u32
  DISPID_IHTMLRULESTYLE_PADDINGRIGHT = 70549_u32
  DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = 70550_u32
  DISPID_IHTMLRULESTYLE_PADDINGLEFT = 70551_u32
  DISPID_IHTMLRULESTYLE_PADDING = 70547_u32
  DISPID_IHTMLRULESTYLE_BORDER = 70585_u32
  DISPID_IHTMLRULESTYLE_BORDERTOP = 70586_u32
  DISPID_IHTMLRULESTYLE_BORDERRIGHT = 70587_u32
  DISPID_IHTMLRULESTYLE_BORDERBOTTOM = 70588_u32
  DISPID_IHTMLRULESTYLE_BORDERLEFT = 70589_u32
  DISPID_IHTMLRULESTYLE_BORDERCOLOR = 70590_u32
  DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = 70591_u32
  DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = 70592_u32
  DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = 70593_u32
  DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = 70594_u32
  DISPID_IHTMLRULESTYLE_BORDERWIDTH = 70595_u32
  DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = 70596_u32
  DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = 70597_u32
  DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = 70598_u32
  DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = 70599_u32
  DISPID_IHTMLRULESTYLE_BORDERSTYLE = 70600_u32
  DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = 70601_u32
  DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = 70602_u32
  DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = 70603_u32
  DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = 70604_u32
  DISPID_IHTMLRULESTYLE_WIDTH = 65541_u32
  DISPID_IHTMLRULESTYLE_HEIGHT = 65542_u32
  DISPID_IHTMLRULESTYLE_STYLEFLOAT = 70606_u32
  DISPID_IHTMLRULESTYLE_CLEAR = 70552_u32
  DISPID_IHTMLRULESTYLE_DISPLAY = 70607_u32
  DISPID_IHTMLRULESTYLE_VISIBILITY = 70616_u32
  DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = 70608_u32
  DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = 70609_u32
  DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = 70610_u32
  DISPID_IHTMLRULESTYLE_LISTSTYLE = 70611_u32
  DISPID_IHTMLRULESTYLE_WHITESPACE = 70612_u32
  DISPID_IHTMLRULESTYLE_TOP = 65540_u32
  DISPID_IHTMLRULESTYLE_LEFT = 65539_u32
  DISPID_IHTMLRULESTYLE_POSITION = 70626_u32
  DISPID_IHTMLRULESTYLE_ZINDEX = 70627_u32
  DISPID_IHTMLRULESTYLE_OVERFLOW = 70546_u32
  DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = 70613_u32
  DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = 70614_u32
  DISPID_IHTMLRULESTYLE_CSSTEXT = 70635_u32
  DISPID_IHTMLRULESTYLE_CURSOR = 70638_u32
  DISPID_IHTMLRULESTYLE_CLIP = 70628_u32
  DISPID_IHTMLRULESTYLE_FILTER = 70618_u32
  DISPID_IHTMLRULESTYLE_SETATTRIBUTE = 66037_u32
  DISPID_IHTMLRULESTYLE_GETATTRIBUTE = 66038_u32
  DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = 66039_u32
  DISPID_IHTMLRULESTYLE2_TABLELAYOUT = 70634_u32
  DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE = 70620_u32
  DISPID_IHTMLRULESTYLE2_DIRECTION = 70655_u32
  DISPID_IHTMLRULESTYLE2_BEHAVIOR = 70651_u32
  DISPID_IHTMLRULESTYLE2_POSITION = 70626_u32
  DISPID_IHTMLRULESTYLE2_UNICODEBIDI = 70654_u32
  DISPID_IHTMLRULESTYLE2_BOTTOM = 65614_u32
  DISPID_IHTMLRULESTYLE2_RIGHT = 65613_u32
  DISPID_IHTMLRULESTYLE2_PIXELBOTTOM = 69545_u32
  DISPID_IHTMLRULESTYLE2_PIXELRIGHT = 69546_u32
  DISPID_IHTMLRULESTYLE2_POSBOTTOM = 69547_u32
  DISPID_IHTMLRULESTYLE2_POSRIGHT = 69548_u32
  DISPID_IHTMLRULESTYLE2_IMEMODE = 70656_u32
  DISPID_IHTMLRULESTYLE2_RUBYALIGN = 70657_u32
  DISPID_IHTMLRULESTYLE2_RUBYPOSITION = 70658_u32
  DISPID_IHTMLRULESTYLE2_RUBYOVERHANG = 70659_u32
  DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR = 70663_u32
  DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE = 70664_u32
  DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE = 70665_u32
  DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE = 70666_u32
  DISPID_IHTMLRULESTYLE2_LAYOUTGRID = 70667_u32
  DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE = 70668_u32
  DISPID_IHTMLRULESTYLE2_WORDBREAK = 70670_u32
  DISPID_IHTMLRULESTYLE2_LINEBREAK = 70669_u32
  DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY = 70671_u32
  DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM = 70672_u32
  DISPID_IHTMLRULESTYLE2_TEXTKASHIDA = 70673_u32
  DISPID_IHTMLRULESTYLE2_OVERFLOWX = 70675_u32
  DISPID_IHTMLRULESTYLE2_OVERFLOWY = 70676_u32
  DISPID_IHTMLRULESTYLE2_ACCELERATOR = 70683_u32
  DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = 70691_u32
  DISPID_IHTMLRULESTYLE3_ZOOM = 70689_u32
  DISPID_IHTMLRULESTYLE3_WORDWRAP = 70694_u32
  DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = 70695_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = 70716_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = 70717_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = 70719_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = 70722_u32
  DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = 70732_u32
  DISPID_IHTMLRULESTYLE3_WRITINGMODE = 70728_u32
  DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = 70739_u32
  DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = 70740_u32
  DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = 70745_u32
  DISPID_IHTMLRULESTYLE4_MINHEIGHT = 70747_u32
  DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE = 70749_u32
  DISPID_IHTMLRULESTYLE5_MAXHEIGHT = 70750_u32
  DISPID_IHTMLRULESTYLE5_MINWIDTH = 70751_u32
  DISPID_IHTMLRULESTYLE5_MAXWIDTH = 70752_u32
  DISPID_IHTMLRULESTYLE6_CONTENT = 70754_u32
  DISPID_IHTMLRULESTYLE6_CAPTIONSIDE = 70755_u32
  DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT = 70756_u32
  DISPID_IHTMLRULESTYLE6_COUNTERRESET = 70757_u32
  DISPID_IHTMLRULESTYLE6_OUTLINE = 70758_u32
  DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH = 70759_u32
  DISPID_IHTMLRULESTYLE6_OUTLINESTYLE = 70760_u32
  DISPID_IHTMLRULESTYLE6_OUTLINECOLOR = 70761_u32
  DISPID_IHTMLRULESTYLE6_BOXSIZING = 70762_u32
  DISPID_IHTMLRULESTYLE6_BORDERSPACING = 70763_u32
  DISPID_IHTMLRULESTYLE6_ORPHANS = 70764_u32
  DISPID_IHTMLRULESTYLE6_WIDOWS = 70765_u32
  DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE = 70766_u32
  DISPID_IHTMLRULESTYLE6_EMPTYCELLS = 70786_u32
  DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION = 70787_u32
  DISPID_IHTMLRULESTYLE6_QUOTES = 70788_u32
  DISPID_IHTMLCSSRULE_TYPE = 1101_u32
  DISPID_IHTMLCSSRULE_CSSTEXT = 1102_u32
  DISPID_IHTMLCSSRULE_PARENTRULE = 1103_u32
  DISPID_IHTMLCSSRULE_PARENTSTYLESHEET = 1104_u32
  DISPID_IHTMLCSSIMPORTRULE_HREF = 1001_u32
  DISPID_IHTMLCSSIMPORTRULE_MEDIA = 1002_u32
  DISPID_IHTMLCSSIMPORTRULE_STYLESHEET = 1003_u32
  DISPID_IHTMLCSSMEDIARULE_MEDIA = 1001_u32
  DISPID_IHTMLCSSMEDIARULE_CSSRULES = 1002_u32
  DISPID_IHTMLCSSMEDIARULE_INSERTRULE = 1003_u32
  DISPID_IHTMLCSSMEDIARULE_DELETERULE = 1004_u32
  DISPID_IHTMLCSSMEDIALIST_MEDIATEXT = 1001_u32
  DISPID_IHTMLCSSMEDIALIST_LENGTH = 1002_u32
  DISPID_IHTMLCSSMEDIALIST_ITEM = 1003_u32
  DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM = 1004_u32
  DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM = 1005_u32
  DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI = 1001_u32
  DISPID_IHTMLCSSNAMESPACERULE_PREFIX = 1002_u32
  DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT = 1001_u32
  DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE = 1002_u32
  DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME = 1001_u32
  DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES = 1002_u32
  DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE = 1003_u32
  DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE = 1004_u32
  DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE = 1005_u32
  DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = 70702_u32
  DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = 70703_u32
  DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = 70704_u32
  DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = 70726_u32
  DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = 70705_u32
  DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = 70725_u32
  DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = 70706_u32
  DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = 70724_u32
  DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = 70727_u32
  DISPID_IHTMLCURRENTSTYLE_POSITION = 70626_u32
  DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT = 70606_u32
  DISPID_IHTMLCURRENTSTYLE_COLOR = 70538_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = -501_i32
  DISPID_IHTMLCURRENTSTYLE_FONTFAMILY = 70554_u32
  DISPID_IHTMLCURRENTSTYLE_FONTSTYLE = 70560_u32
  DISPID_IHTMLCURRENTSTYLE_FONTVARIANT = 70561_u32
  DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT = 70563_u32
  DISPID_IHTMLCURRENTSTYLE_FONTSIZE = 70555_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE = 70537_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX = 70569_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY = 70570_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT = 70580_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR = 70594_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR = 70591_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR = 70592_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR = 70593_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE = 70601_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE = 70602_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE = 70603_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE = 70604_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH = 70596_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH = 70597_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH = 70598_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH = 70599_u32
  DISPID_IHTMLCURRENTSTYLE_LEFT = 65539_u32
  DISPID_IHTMLCURRENTSTYLE_TOP = 65540_u32
  DISPID_IHTMLCURRENTSTYLE_WIDTH = 65541_u32
  DISPID_IHTMLCURRENTSTYLE_HEIGHT = 65542_u32
  DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT = 70551_u32
  DISPID_IHTMLCURRENTSTYLE_PADDINGTOP = 70548_u32
  DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT = 70549_u32
  DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM = 70550_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTALIGN = 65608_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION = 70571_u32
  DISPID_IHTMLCURRENTSTYLE_DISPLAY = 70607_u32
  DISPID_IHTMLCURRENTSTYLE_VISIBILITY = 70616_u32
  DISPID_IHTMLCURRENTSTYLE_ZINDEX = 70627_u32
  DISPID_IHTMLCURRENTSTYLE_LETTERSPACING = 70544_u32
  DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT = 70542_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTINDENT = 70543_u32
  DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN = 70584_u32
  DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT = 70581_u32
  DISPID_IHTMLCURRENTSTYLE_MARGINTOP = 70573_u32
  DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT = 70574_u32
  DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM = 70575_u32
  DISPID_IHTMLCURRENTSTYLE_MARGINLEFT = 70576_u32
  DISPID_IHTMLCURRENTSTYLE_CLEAR = 70552_u32
  DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE = 70608_u32
  DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION = 70609_u32
  DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE = 70610_u32
  DISPID_IHTMLCURRENTSTYLE_CLIPTOP = 70629_u32
  DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT = 70630_u32
  DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM = 70631_u32
  DISPID_IHTMLCURRENTSTYLE_CLIPLEFT = 70632_u32
  DISPID_IHTMLCURRENTSTYLE_OVERFLOW = 70546_u32
  DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE = 70613_u32
  DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER = 70614_u32
  DISPID_IHTMLCURRENTSTYLE_CURSOR = 70638_u32
  DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT = 70634_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE = 70620_u32
  DISPID_IHTMLCURRENTSTYLE_DIRECTION = 70655_u32
  DISPID_IHTMLCURRENTSTYLE_BEHAVIOR = 70651_u32
  DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE = 66038_u32
  DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI = 70654_u32
  DISPID_IHTMLCURRENTSTYLE_RIGHT = 65613_u32
  DISPID_IHTMLCURRENTSTYLE_BOTTOM = 65614_u32
  DISPID_IHTMLCURRENTSTYLE_IMEMODE = 70656_u32
  DISPID_IHTMLCURRENTSTYLE_RUBYALIGN = 70657_u32
  DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION = 70658_u32
  DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG = 70659_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE = 70668_u32
  DISPID_IHTMLCURRENTSTYLE_LINEBREAK = 70669_u32
  DISPID_IHTMLCURRENTSTYLE_WORDBREAK = 70670_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY = 70671_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM = 70672_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA = 70673_u32
  DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION = 70653_u32
  DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR = 70663_u32
  DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE = 70664_u32
  DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE = 70665_u32
  DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE = 70666_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE = 70600_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR = 70590_u32
  DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH = 70595_u32
  DISPID_IHTMLCURRENTSTYLE_PADDING = 70547_u32
  DISPID_IHTMLCURRENTSTYLE_MARGIN = 70572_u32
  DISPID_IHTMLCURRENTSTYLE_ACCELERATOR = 70683_u32
  DISPID_IHTMLCURRENTSTYLE_OVERFLOWX = 70675_u32
  DISPID_IHTMLCURRENTSTYLE_OVERFLOWY = 70676_u32
  DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM = 70540_u32
  DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = 70691_u32
  DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = 70694_u32
  DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = 70695_u32
  DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = 70696_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = 70716_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = 70717_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = 70718_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = 70719_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = 70720_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = 70721_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = 70722_u32
  DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = 70732_u32
  DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = 70728_u32
  DISPID_IHTMLCURRENTSTYLE2_ZOOM = 70689_u32
  DISPID_IHTMLCURRENTSTYLE2_FILTER = 70618_u32
  DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = 70739_u32
  DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = 70740_u32
  DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = 70744_u32
  DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = 70745_u32
  DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = 70747_u32
  DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = 70583_u32
  DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = 70612_u32
  DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE = 70749_u32
  DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT = 70750_u32
  DISPID_IHTMLCURRENTSTYLE4_MINWIDTH = 70751_u32
  DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH = 70752_u32
  DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE = 70755_u32
  DISPID_IHTMLCURRENTSTYLE5_OUTLINE = 70758_u32
  DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH = 70759_u32
  DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE = 70760_u32
  DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR = 70761_u32
  DISPID_IHTMLCURRENTSTYLE5_BOXSIZING = 70762_u32
  DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING = 70763_u32
  DISPID_IHTMLCURRENTSTYLE5_ORPHANS = 70764_u32
  DISPID_IHTMLCURRENTSTYLE5_WIDOWS = 70765_u32
  DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE = 70766_u32
  DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS = 70786_u32
  DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION = 70787_u32
  DISPID_IHTMLCURRENTSTYLE5_QUOTES = 70788_u32
  DISPID_IHTMLRECT_LEFT = 1001_u32
  DISPID_IHTMLRECT_TOP = 1002_u32
  DISPID_IHTMLRECT_RIGHT = 1003_u32
  DISPID_IHTMLRECT_BOTTOM = 1004_u32
  DISPID_IHTMLRECT2_WIDTH = 1005_u32
  DISPID_IHTMLRECT2_HEIGHT = 1006_u32
  DISPID_IHTMLRECTCOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLRECTCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLRECTCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDOMNODE_NODETYPE = 66582_u32
  DISPID_IHTMLDOMNODE_PARENTNODE = 66583_u32
  DISPID_IHTMLDOMNODE_HASCHILDNODES = 66584_u32
  DISPID_IHTMLDOMNODE_CHILDNODES = 66585_u32
  DISPID_IHTMLDOMNODE_ATTRIBUTES = 66586_u32
  DISPID_IHTMLDOMNODE_INSERTBEFORE = 66587_u32
  DISPID_IHTMLDOMNODE_REMOVECHILD = 66588_u32
  DISPID_IHTMLDOMNODE_REPLACECHILD = 66589_u32
  DISPID_IHTMLDOMNODE_CLONENODE = 66597_u32
  DISPID_IHTMLDOMNODE_REMOVENODE = 66602_u32
  DISPID_IHTMLDOMNODE_SWAPNODE = 66604_u32
  DISPID_IHTMLDOMNODE_REPLACENODE = 66603_u32
  DISPID_IHTMLDOMNODE_APPENDCHILD = 66609_u32
  DISPID_IHTMLDOMNODE_NODENAME = 66610_u32
  DISPID_IHTMLDOMNODE_NODEVALUE = 66611_u32
  DISPID_IHTMLDOMNODE_FIRSTCHILD = 66612_u32
  DISPID_IHTMLDOMNODE_LASTCHILD = 66613_u32
  DISPID_IHTMLDOMNODE_PREVIOUSSIBLING = 66614_u32
  DISPID_IHTMLDOMNODE_NEXTSIBLING = 66615_u32
  DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = 66649_u32
  DISPID_IHTMLDOMNODE3_PREFIX = 66656_u32
  DISPID_IHTMLDOMNODE3_LOCALNAME = 66654_u32
  DISPID_IHTMLDOMNODE3_NAMESPACEURI = 66655_u32
  DISPID_IHTMLDOMNODE3_TEXTCONTENT = 66663_u32
  DISPID_IHTMLDOMNODE3_ISEQUALNODE = 66657_u32
  DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI = 66658_u32
  DISPID_IHTMLDOMNODE3_LOOKUPPREFIX = 66659_u32
  DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE = 66660_u32
  DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD = 66804_u32
  DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE = 66805_u32
  DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD = 66806_u32
  DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD = 66807_u32
  DISPID_IHTMLDOMNODE3_ISSAMENODE = 66661_u32
  DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION = 66662_u32
  DISPID_IHTMLDOMNODE3_ISSUPPORTED = 66813_u32
  DISPID_IHTMLDOMATTRIBUTE_NODENAME = 1000_u32
  DISPID_IHTMLDOMATTRIBUTE_NODEVALUE = 1002_u32
  DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = 1001_u32
  DISPID_IHTMLDOMATTRIBUTE2_NAME = 1003_u32
  DISPID_IHTMLDOMATTRIBUTE2_VALUE = 1004_u32
  DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = 1005_u32
  DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = 1006_u32
  DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = 1007_u32
  DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = 1008_u32
  DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = 1009_u32
  DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = 1010_u32
  DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = 1011_u32
  DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = 1012_u32
  DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = 1013_u32
  DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = 1014_u32
  DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = 1015_u32
  DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = 1016_u32
  DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = 1017_u32
  DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = 1018_u32
  DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = 1019_u32
  DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = 1020_u32
  DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE = 1153_u32
  DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE = 1154_u32
  DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED = 1150_u32
  DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT = 1151_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE = 1159_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME = 1160_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME = 1161_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE = 1162_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD = 1163_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD = 1164_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES = 1165_u32
  DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES = 1166_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES = 1167_u32
  DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE = 1170_u32
  DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED = 1171_u32
  DISPID_IHTMLDOMTEXTNODE_DATA = 1000_u32
  DISPID_IHTMLDOMTEXTNODE_TOSTRING = 1001_u32
  DISPID_IHTMLDOMTEXTNODE_LENGTH = 1002_u32
  DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = 1003_u32
  DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = 1004_u32
  DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = 1005_u32
  DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = 1006_u32
  DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = 1007_u32
  DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = 1008_u32
  DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA = 1010_u32
  DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA = 1011_u32
  DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA = 1012_u32
  DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA = 1013_u32
  DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT = 1009_u32
  DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT = 1014_u32
  DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT = 1015_u32
  DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES = 1017_u32
  DISPID_IHTMLDOMTEXTNODE3_NORMALIZE = 1019_u32
  DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = 1000_u32
  DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE = 1001_u32
  DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT = 1002_u32
  DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT = 1003_u32
  DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE = 1004_u32
  DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = 0_u32
  DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = 1501_u32
  DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = 1502_u32
  DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = 1503_u32
  DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM = 1150_u32
  DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM = 1151_u32
  DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM = 1152_u32
  DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM = 1154_u32
  DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH = 1153_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS = 1155_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS = 1156_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS = 1157_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM = 1158_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM = 1159_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM = 1160_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM = 1161_u32
  DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH = 1162_u32
  DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM = 1_u32
  DISPID_IHTMLELEMENT_SETATTRIBUTE = 66037_u32
  DISPID_IHTMLELEMENT_GETATTRIBUTE = 66038_u32
  DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = 66039_u32
  DISPID_IHTMLELEMENT_CLASSNAME = 66537_u32
  DISPID_IHTMLELEMENT_ID = 66538_u32
  DISPID_IHTMLELEMENT_TAGNAME = 66540_u32
  DISPID_IHTMLELEMENT_PARENTELEMENT = 65544_u32
  DISPID_IHTMLELEMENT_STYLE = 65610_u32
  DISPID_IHTMLELEMENT_ONHELP = 71549_u32
  DISPID_IHTMLELEMENT_ONCLICK = 71544_u32
  DISPID_IHTMLELEMENT_ONDBLCLICK = 71545_u32
  DISPID_IHTMLELEMENT_ONKEYDOWN = 71541_u32
  DISPID_IHTMLELEMENT_ONKEYUP = 71542_u32
  DISPID_IHTMLELEMENT_ONKEYPRESS = 71543_u32
  DISPID_IHTMLELEMENT_ONMOUSEOUT = 71537_u32
  DISPID_IHTMLELEMENT_ONMOUSEOVER = 71536_u32
  DISPID_IHTMLELEMENT_ONMOUSEMOVE = 71540_u32
  DISPID_IHTMLELEMENT_ONMOUSEDOWN = 71538_u32
  DISPID_IHTMLELEMENT_ONMOUSEUP = 71539_u32
  DISPID_IHTMLELEMENT_DOCUMENT = 66554_u32
  DISPID_IHTMLELEMENT_TITLE = 65605_u32
  DISPID_IHTMLELEMENT_LANGUAGE = 70636_u32
  DISPID_IHTMLELEMENT_ONSELECTSTART = 71573_u32
  DISPID_IHTMLELEMENT_SCROLLINTOVIEW = 66555_u32
  DISPID_IHTMLELEMENT_CONTAINS = 66556_u32
  DISPID_IHTMLELEMENT_SOURCEINDEX = 66560_u32
  DISPID_IHTMLELEMENT_RECORDNUMBER = 66561_u32
  DISPID_IHTMLELEMENT_LANG = 70545_u32
  DISPID_IHTMLELEMENT_OFFSETLEFT = 66544_u32
  DISPID_IHTMLELEMENT_OFFSETTOP = 66545_u32
  DISPID_IHTMLELEMENT_OFFSETWIDTH = 66546_u32
  DISPID_IHTMLELEMENT_OFFSETHEIGHT = 66547_u32
  DISPID_IHTMLELEMENT_OFFSETPARENT = 66548_u32
  DISPID_IHTMLELEMENT_INNERHTML = 66562_u32
  DISPID_IHTMLELEMENT_INNERTEXT = 66563_u32
  DISPID_IHTMLELEMENT_OUTERHTML = 66564_u32
  DISPID_IHTMLELEMENT_OUTERTEXT = 66565_u32
  DISPID_IHTMLELEMENT_INSERTADJACENTHTML = 66566_u32
  DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = 66567_u32
  DISPID_IHTMLELEMENT_PARENTTEXTEDIT = 66568_u32
  DISPID_IHTMLELEMENT_ISTEXTEDIT = 66570_u32
  DISPID_IHTMLELEMENT_CLICK = 66569_u32
  DISPID_IHTMLELEMENT_FILTERS = 66571_u32
  DISPID_IHTMLELEMENT_ONDRAGSTART = 71571_u32
  DISPID_IHTMLELEMENT_TOSTRING = 66572_u32
  DISPID_IHTMLELEMENT_ONBEFOREUPDATE = 71557_u32
  DISPID_IHTMLELEMENT_ONAFTERUPDATE = 71558_u32
  DISPID_IHTMLELEMENT_ONERRORUPDATE = 71574_u32
  DISPID_IHTMLELEMENT_ONROWEXIT = 71554_u32
  DISPID_IHTMLELEMENT_ONROWENTER = 71555_u32
  DISPID_IHTMLELEMENT_ONDATASETCHANGED = 71576_u32
  DISPID_IHTMLELEMENT_ONDATAAVAILABLE = 71577_u32
  DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = 71578_u32
  DISPID_IHTMLELEMENT_ONFILTERCHANGE = 71579_u32
  DISPID_IHTMLELEMENT_CHILDREN = 66573_u32
  DISPID_IHTMLELEMENT_ALL = 66574_u32
  DISPID_IHTMLELEMENT2_SCOPENAME = 66575_u32
  DISPID_IHTMLELEMENT2_SETCAPTURE = 66576_u32
  DISPID_IHTMLELEMENT2_RELEASECAPTURE = 66577_u32
  DISPID_IHTMLELEMENT2_ONLOSECAPTURE = 71582_u32
  DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT = 66578_u32
  DISPID_IHTMLELEMENT2_DOSCROLL = 66579_u32
  DISPID_IHTMLELEMENT2_ONSCROLL = 71567_u32
  DISPID_IHTMLELEMENT2_ONDRAG = 71585_u32
  DISPID_IHTMLELEMENT2_ONDRAGEND = 71586_u32
  DISPID_IHTMLELEMENT2_ONDRAGENTER = 71587_u32
  DISPID_IHTMLELEMENT2_ONDRAGOVER = 71588_u32
  DISPID_IHTMLELEMENT2_ONDRAGLEAVE = 71589_u32
  DISPID_IHTMLELEMENT2_ONDROP = 71590_u32
  DISPID_IHTMLELEMENT2_ONBEFORECUT = 71594_u32
  DISPID_IHTMLELEMENT2_ONCUT = 71591_u32
  DISPID_IHTMLELEMENT2_ONBEFORECOPY = 71595_u32
  DISPID_IHTMLELEMENT2_ONCOPY = 71592_u32
  DISPID_IHTMLELEMENT2_ONBEFOREPASTE = 71596_u32
  DISPID_IHTMLELEMENT2_ONPASTE = 71593_u32
  DISPID_IHTMLELEMENT2_CURRENTSTYLE = 66543_u32
  DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE = 71583_u32
  DISPID_IHTMLELEMENT2_GETCLIENTRECTS = 66580_u32
  DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT = 66581_u32
  DISPID_IHTMLELEMENT2_SETEXPRESSION = 66040_u32
  DISPID_IHTMLELEMENT2_GETEXPRESSION = 66041_u32
  DISPID_IHTMLELEMENT2_REMOVEEXPRESSION = 66042_u32
  DISPID_IHTMLELEMENT2_TABINDEX = 65551_u32
  DISPID_IHTMLELEMENT2_FOCUS = 67536_u32
  DISPID_IHTMLELEMENT2_ACCESSKEY = 67541_u32
  DISPID_IHTMLELEMENT2_ONBLUR = 71551_u32
  DISPID_IHTMLELEMENT2_ONFOCUS = 71550_u32
  DISPID_IHTMLELEMENT2_ONRESIZE = 71572_u32
  DISPID_IHTMLELEMENT2_BLUR = 67538_u32
  DISPID_IHTMLELEMENT2_ADDFILTER = 67553_u32
  DISPID_IHTMLELEMENT2_REMOVEFILTER = 67554_u32
  DISPID_IHTMLELEMENT2_CLIENTHEIGHT = 67555_u32
  DISPID_IHTMLELEMENT2_CLIENTWIDTH = 67556_u32
  DISPID_IHTMLELEMENT2_CLIENTTOP = 67557_u32
  DISPID_IHTMLELEMENT2_CLIENTLEFT = 67558_u32
  DISPID_IHTMLELEMENT2_ATTACHEVENT = 66043_u32
  DISPID_IHTMLELEMENT2_DETACHEVENT = 66044_u32
  DISPID_IHTMLELEMENT2_READYSTATE = 70652_u32
  DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLELEMENT2_ONROWSDELETE = 71598_u32
  DISPID_IHTMLELEMENT2_ONROWSINSERTED = 71599_u32
  DISPID_IHTMLELEMENT2_ONCELLCHANGE = 71600_u32
  DISPID_IHTMLELEMENT2_DIR = 70653_u32
  DISPID_IHTMLELEMENT2_CREATECONTROLRANGE = 66592_u32
  DISPID_IHTMLELEMENT2_SCROLLHEIGHT = 66593_u32
  DISPID_IHTMLELEMENT2_SCROLLWIDTH = 66594_u32
  DISPID_IHTMLELEMENT2_SCROLLTOP = 66595_u32
  DISPID_IHTMLELEMENT2_SCROLLLEFT = 66596_u32
  DISPID_IHTMLELEMENT2_CLEARATTRIBUTES = 66598_u32
  DISPID_IHTMLELEMENT2_MERGEATTRIBUTES = 66599_u32
  DISPID_IHTMLELEMENT2_ONCONTEXTMENU = 71601_u32
  DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT = 66605_u32
  DISPID_IHTMLELEMENT2_APPLYELEMENT = 66601_u32
  DISPID_IHTMLELEMENT2_GETADJACENTTEXT = 66606_u32
  DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT = 66607_u32
  DISPID_IHTMLELEMENT2_CANHAVECHILDREN = 66608_u32
  DISPID_IHTMLELEMENT2_ADDBEHAVIOR = 66616_u32
  DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR = 66617_u32
  DISPID_IHTMLELEMENT2_RUNTIMESTYLE = 66600_u32
  DISPID_IHTMLELEMENT2_BEHAVIORURNS = 66618_u32
  DISPID_IHTMLELEMENT2_TAGURN = 66619_u32
  DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS = 71605_u32
  DISPID_IHTMLELEMENT2_READYSTATEVALUE = 66620_u32
  DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME = 66621_u32
  DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = 66632_u32
  DISPID_IHTMLELEMENT3_ISMULTILINE = 66633_u32
  DISPID_IHTMLELEMENT3_CANHAVEHTML = 66634_u32
  DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = 71609_u32
  DISPID_IHTMLELEMENT3_ONPAGE = 71610_u32
  DISPID_IHTMLELEMENT3_INFLATEBLOCK = 66636_u32
  DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = 71613_u32
  DISPID_IHTMLELEMENT3_SETACTIVE = 66637_u32
  DISPID_IHTMLELEMENT3_CONTENTEDITABLE = 70698_u32
  DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = 66638_u32
  DISPID_IHTMLELEMENT3_HIDEFOCUS = 70699_u32
  DISPID_IHTMLELEMENT3_DISABLED = 65612_u32
  DISPID_IHTMLELEMENT3_ISDISABLED = 66641_u32
  DISPID_IHTMLELEMENT3_ONMOVE = 71614_u32
  DISPID_IHTMLELEMENT3_ONCONTROLSELECT = 71615_u32
  DISPID_IHTMLELEMENT3_FIREEVENT = 66642_u32
  DISPID_IHTMLELEMENT3_ONRESIZESTART = 71619_u32
  DISPID_IHTMLELEMENT3_ONRESIZEEND = 71620_u32
  DISPID_IHTMLELEMENT3_ONMOVESTART = 71617_u32
  DISPID_IHTMLELEMENT3_ONMOVEEND = 71618_u32
  DISPID_IHTMLELEMENT3_ONMOUSEENTER = 71621_u32
  DISPID_IHTMLELEMENT3_ONMOUSELEAVE = 71622_u32
  DISPID_IHTMLELEMENT3_ONACTIVATE = 71623_u32
  DISPID_IHTMLELEMENT3_ONDEACTIVATE = 71624_u32
  DISPID_IHTMLELEMENT3_DRAGDROP = 66643_u32
  DISPID_IHTMLELEMENT3_GLYPHMODE = 66644_u32
  DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = 71612_u32
  DISPID_IHTMLELEMENT4_NORMALIZE = 66648_u32
  DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = 66645_u32
  DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = 66646_u32
  DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = 66647_u32
  DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = 71626_u32
  DISPID_IHTMLELEMENT4_ONFOCUSIN = 71627_u32
  DISPID_IHTMLELEMENT4_ONFOCUSOUT = 71628_u32
  DISPID_IELEMENTSELECTOR_QUERYSELECTOR = 66650_u32
  DISPID_IELEMENTSELECTOR_QUERYSELECTORALL = 66651_u32
  DISPID_IHTMLUNIQUENAME_UNIQUENUMBER = 66590_u32
  DISPID_IHTMLUNIQUENAME_UNIQUEID = 66591_u32
  DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE = 66736_u32
  DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE = 66737_u32
  DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE = 66738_u32
  DISPID_IHTMLELEMENT5_HASATTRIBUTE = 66739_u32
  DISPID_IHTMLELEMENT5_ROLE = 66740_u32
  DISPID_IHTMLELEMENT5_ARIABUSY = 66741_u32
  DISPID_IHTMLELEMENT5_ARIACHECKED = 66742_u32
  DISPID_IHTMLELEMENT5_ARIADISABLED = 66743_u32
  DISPID_IHTMLELEMENT5_ARIAEXPANDED = 66744_u32
  DISPID_IHTMLELEMENT5_ARIAHASPOPUP = 66745_u32
  DISPID_IHTMLELEMENT5_ARIAHIDDEN = 66746_u32
  DISPID_IHTMLELEMENT5_ARIAINVALID = 66747_u32
  DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE = 66748_u32
  DISPID_IHTMLELEMENT5_ARIAPRESSED = 66749_u32
  DISPID_IHTMLELEMENT5_ARIAREADONLY = 66750_u32
  DISPID_IHTMLELEMENT5_ARIAREQUIRED = 66751_u32
  DISPID_IHTMLELEMENT5_ARIASECRET = 66752_u32
  DISPID_IHTMLELEMENT5_ARIASELECTED = 66753_u32
  DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE = 66754_u32
  DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE = 66755_u32
  DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE = 66756_u32
  DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES = 66757_u32
  DISPID_IHTMLELEMENT5_ARIAVALUENOW = 66758_u32
  DISPID_IHTMLELEMENT5_ARIAPOSINSET = 66759_u32
  DISPID_IHTMLELEMENT5_ARIASETSIZE = 66760_u32
  DISPID_IHTMLELEMENT5_ARIALEVEL = 66761_u32
  DISPID_IHTMLELEMENT5_ARIAVALUEMIN = 66762_u32
  DISPID_IHTMLELEMENT5_ARIAVALUEMAX = 66763_u32
  DISPID_IHTMLELEMENT5_ARIACONTROLS = 66764_u32
  DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY = 66765_u32
  DISPID_IHTMLELEMENT5_ARIAFLOWTO = 66766_u32
  DISPID_IHTMLELEMENT5_ARIALABELLEDBY = 66767_u32
  DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT = 66768_u32
  DISPID_IHTMLELEMENT5_ARIAOWNS = 66769_u32
  DISPID_IHTMLELEMENT5_HASATTRIBUTES = 66770_u32
  DISPID_IHTMLELEMENT5_ARIALIVE = 66771_u32
  DISPID_IHTMLELEMENT5_ARIARELEVANT = 66772_u32
  DISPID_IHTMLELEMENT6_GETATTRIBUTENS = 66789_u32
  DISPID_IHTMLELEMENT6_SETATTRIBUTENS = 66790_u32
  DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS = 66791_u32
  DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS = 66786_u32
  DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS = 66787_u32
  DISPID_IHTMLELEMENT6_HASATTRIBUTENS = 66788_u32
  DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE = 66796_u32
  DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE = 66797_u32
  DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE = 66798_u32
  DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE = 66792_u32
  DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE = 66793_u32
  DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE = 66794_u32
  DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE = 66795_u32
  DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS = 66799_u32
  DISPID_IHTMLELEMENT6_IE9_TAGNAME = 66801_u32
  DISPID_IHTMLELEMENT6_IE9_NODENAME = 66802_u32
  DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME = 66803_u32
  DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR = 66814_u32
  DISPID_IHTMLELEMENT6_ONABORT = 71564_u32
  DISPID_IHTMLELEMENT6_ONCANPLAY = 71670_u32
  DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH = 71671_u32
  DISPID_IHTMLELEMENT6_ONCHANGE = 71566_u32
  DISPID_IHTMLELEMENT6_ONDURATIONCHANGE = 71672_u32
  DISPID_IHTMLELEMENT6_ONEMPTIED = 71673_u32
  DISPID_IHTMLELEMENT6_ONENDED = 71674_u32
  DISPID_IHTMLELEMENT6_ONERROR = 71565_u32
  DISPID_IHTMLELEMENT6_ONINPUT = 71663_u32
  DISPID_IHTMLELEMENT6_ONLOAD = 71568_u32
  DISPID_IHTMLELEMENT6_ONLOADEDDATA = 71675_u32
  DISPID_IHTMLELEMENT6_ONLOADEDMETADATA = 71676_u32
  DISPID_IHTMLELEMENT6_ONLOADSTART = 71677_u32
  DISPID_IHTMLELEMENT6_ONPAUSE = 71678_u32
  DISPID_IHTMLELEMENT6_ONPLAY = 71679_u32
  DISPID_IHTMLELEMENT6_ONPLAYING = 71680_u32
  DISPID_IHTMLELEMENT6_ONPROGRESS = 71681_u32
  DISPID_IHTMLELEMENT6_ONRATECHANGE = 71682_u32
  DISPID_IHTMLELEMENT6_ONRESET = 71548_u32
  DISPID_IHTMLELEMENT6_ONSEEKED = 71683_u32
  DISPID_IHTMLELEMENT6_ONSEEKING = 71684_u32
  DISPID_IHTMLELEMENT6_ONSELECT = 71546_u32
  DISPID_IHTMLELEMENT6_ONSTALLED = 71685_u32
  DISPID_IHTMLELEMENT6_ONSUBMIT = 71547_u32
  DISPID_IHTMLELEMENT6_ONSUSPEND = 71686_u32
  DISPID_IHTMLELEMENT6_ONTIMEUPDATE = 71687_u32
  DISPID_IHTMLELEMENT6_ONVOLUMECHANGE = 71688_u32
  DISPID_IHTMLELEMENT6_ONWAITING = 71689_u32
  DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES = 66815_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN = 71690_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE = 71691_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTERUP = 71692_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTEROVER = 71693_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTEROUT = 71694_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL = 71695_u32
  DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER = 71696_u32
  DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE = 71706_u32
  DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE = 71707_u32
  DISPID_IHTMLELEMENT7_ONMSGESTURESTART = 71699_u32
  DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE = 71700_u32
  DISPID_IHTMLELEMENT7_ONMSGESTUREEND = 71701_u32
  DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD = 71702_u32
  DISPID_IHTMLELEMENT7_ONMSGESTURETAP = 71703_u32
  DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP = 71704_u32
  DISPID_IHTMLELEMENT7_ONMSINERTIASTART = 71705_u32
  DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE = 66822_u32
  DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE = 66823_u32
  DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART = 71709_u32
  DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND = 71710_u32
  DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART = 71711_u32
  DISPID_IHTMLELEMENT7_ONMSANIMATIONEND = 71712_u32
  DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION = 71713_u32
  DISPID_IHTMLELEMENT7_ONINVALID = 71724_u32
  DISPID_IHTMLELEMENT7_XMSACCELERATORKEY = 66834_u32
  DISPID_IHTMLELEMENT7_SPELLCHECK = 70907_u32
  DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED = 71714_u32
  DISPID_IHTMLELEMENT7_ONCUECHANGE = 71729_u32
  DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED = 66652_u32
  DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR = 66653_u32
  DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD = 66808_u32
  DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD = 66809_u32
  DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING = 66810_u32
  DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING = 66811_u32
  DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT = 66812_u32
  DISPID_IHTMLDATABINDING_DATAFLD = 66557_u32
  DISPID_IHTMLDATABINDING_DATASRC = 66558_u32
  DISPID_IHTMLDATABINDING_DATAFORMATAS = 66559_u32
  DISPID_HTMLELEMENTEVENTS4_ONABORT = 1000_u32
  DISPID_HTMLELEMENTEVENTS4_ONCHANGE = 1001_u32
  DISPID_HTMLELEMENTEVENTS4_ONERROR = 1002_u32
  DISPID_HTMLELEMENTEVENTS4_ONLOAD = 1003_u32
  DISPID_HTMLELEMENTEVENTS4_ONRESET = 1015_u32
  DISPID_HTMLELEMENTEVENTS4_ONSELECT = 1006_u32
  DISPID_HTMLELEMENTEVENTS4_ONSUBMIT = 1007_u32
  DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM = 71708_u32
  DISPID_HTMLELEMENTEVENTS3_ONONLINE = 1064_u32
  DISPID_HTMLELEMENTEVENTS3_ONOFFLINE = 1065_u32
  DISPID_HTMLELEMENTEVENTS2_ONHELP = 65546_u32
  DISPID_HTMLELEMENTEVENTS2_ONCLICK = -600_i32
  DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = -601_i32
  DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = -603_i32
  DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = -602_i32
  DISPID_HTMLELEMENTEVENTS2_ONKEYUP = -604_i32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT = 65545_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER = 65544_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = -606_i32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = -605_i32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = -607_i32
  DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART = 65548_u32
  DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE = 65553_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART = 65547_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE = 65549_u32
  DISPID_HTMLELEMENTEVENTS2_ONROWEXIT = 65542_u32
  DISPID_HTMLELEMENTEVENTS2_ONROWENTER = 65543_u32
  DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE = 65554_u32
  DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE = 65555_u32
  DISPID_HTMLELEMENTEVENTS2_ONSCROLL = 1014_u32
  DISPID_HTMLELEMENTEVENTS2_ONFOCUS = 65537_u32
  DISPID_HTMLELEMENTEVENTS2_ONRESIZE = 1016_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAG = 65556_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAGEND = 65557_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER = 65558_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER = 65559_u32
  DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE = 65560_u32
  DISPID_HTMLELEMENTEVENTS2_ONDROP = 65561_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT = 65565_u32
  DISPID_HTMLELEMENTEVENTS2_ONCUT = 65562_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY = 65566_u32
  DISPID_HTMLELEMENTEVENTS2_ONCOPY = 65563_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE = 65567_u32
  DISPID_HTMLELEMENTEVENTS2_ONPASTE = 65564_u32
  DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = 1023_u32
  DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE = 65568_u32
  DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED = 65569_u32
  DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE = 65570_u32
  DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = -609_i32
  DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = 1030_u32
  DISPID_HTMLELEMENTEVENTS2_ONPAGE = 1031_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = 1042_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = 1043_u32
  DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = 1044_u32
  DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = 1045_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = 1047_u32
  DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = 1048_u32
  DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = 1049_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOVE = 1035_u32
  DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = 1036_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = 1038_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = 1039_u32
  DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = 1040_u32
  DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = 1041_u32
  DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = 1033_u32
  DISPID_HTMLELEMENTEVENTS_ONHELP = 65546_u32
  DISPID_HTMLELEMENTEVENTS_ONCLICK = -600_i32
  DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = -601_i32
  DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = -603_i32
  DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = -602_i32
  DISPID_HTMLELEMENTEVENTS_ONKEYUP = -604_i32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = 65545_u32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = 65544_u32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = -606_i32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = -605_i32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = -607_i32
  DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = 65548_u32
  DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = 65553_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = 65547_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = 65549_u32
  DISPID_HTMLELEMENTEVENTS_ONROWEXIT = 65542_u32
  DISPID_HTMLELEMENTEVENTS_ONROWENTER = 65543_u32
  DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE = 65554_u32
  DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE = 65555_u32
  DISPID_HTMLELEMENTEVENTS_ONSCROLL = 1014_u32
  DISPID_HTMLELEMENTEVENTS_ONFOCUS = 65537_u32
  DISPID_HTMLELEMENTEVENTS_ONRESIZE = 1016_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAG = 65556_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAGEND = 65557_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAGENTER = 65558_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAGOVER = 65559_u32
  DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE = 65560_u32
  DISPID_HTMLELEMENTEVENTS_ONDROP = 65561_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFORECUT = 65565_u32
  DISPID_HTMLELEMENTEVENTS_ONCUT = 65562_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY = 65566_u32
  DISPID_HTMLELEMENTEVENTS_ONCOPY = 65563_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE = 65567_u32
  DISPID_HTMLELEMENTEVENTS_ONPASTE = 65564_u32
  DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = 1023_u32
  DISPID_HTMLELEMENTEVENTS_ONROWSDELETE = 65568_u32
  DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED = 65569_u32
  DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE = 65570_u32
  DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = -609_i32
  DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = 1027_u32
  DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = 1030_u32
  DISPID_HTMLELEMENTEVENTS_ONPAGE = 1031_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = 1047_u32
  DISPID_HTMLELEMENTEVENTS_ONMOVE = 1035_u32
  DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = 1036_u32
  DISPID_HTMLELEMENTEVENTS_ONMOVESTART = 1038_u32
  DISPID_HTMLELEMENTEVENTS_ONMOVEEND = 1039_u32
  DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = 1040_u32
  DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = 1041_u32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = 1042_u32
  DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = 1043_u32
  DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = 1033_u32
  DISPID_HTMLELEMENTEVENTS_ONACTIVATE = 1044_u32
  DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = 1045_u32
  DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = 1048_u32
  DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = 1049_u32
  DISPID_IHTMLELEMENTDEFAULTS_STYLE = 1001_u32
  DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = 1002_u32
  DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = 70735_u32
  DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = 1006_u32
  DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = 1003_u32
  DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = 1004_u32
  DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = 1008_u32
  DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = 70698_u32
  DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = 1009_u32
  DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = 1011_u32
  DISPID_IHTMLELEMENTDEFAULTS_FROZEN = 70734_u32
  DISPID_IHTCDEFAULTDISPATCH_ELEMENT = 70679_u32
  DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT = 70680_u32
  DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = 70701_u32
  DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = 70678_u32
  DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE = 66036_u32
  DISPID_IHTCPROPERTYBEHAVIOR_VALUE = 70677_u32
  DISPID_IHTCEVENTBEHAVIOR_FIRE = 66036_u32
  DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = 0_u32
  DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT = 66036_u32
  DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = 0_u32
  DISPID_IHTCDESCBEHAVIOR_URN = 66036_u32
  DISPID_IHTCDESCBEHAVIOR_NAME = 66037_u32
  DISPID_IHTMLURNCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLURNCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLGENERICELEMENT_RECORDSET = 1001_u32
  DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = 1002_u32
  DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 1001_u32
  DISPID_IHTMLSTYLESHEETRULE_STYLE = 65610_u32
  DISPID_IHTMLSTYLESHEETRULE_READONLY = 1002_u32
  DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY = 1003_u32
  DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY = 1004_u32
  DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT = 1005_u32
  DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH = 1003_u32
  DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM = 1002_u32
  DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = 1001_u32
  DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = 1002_u32
  DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT = 1003_u32
  DISPID_IHTMLSTYLESHEETPAGE2_STYLE = 65610_u32
  DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLSTYLESHEET_TITLE = 1001_u32
  DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 1002_u32
  DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 1003_u32
  DISPID_IHTMLSTYLESHEET_DISABLED = 65612_u32
  DISPID_IHTMLSTYLESHEET_READONLY = 1004_u32
  DISPID_IHTMLSTYLESHEET_IMPORTS = 1005_u32
  DISPID_IHTMLSTYLESHEET_HREF = 1006_u32
  DISPID_IHTMLSTYLESHEET_TYPE = 1007_u32
  DISPID_IHTMLSTYLESHEET_ID = 1008_u32
  DISPID_IHTMLSTYLESHEET_ADDIMPORT = 1009_u32
  DISPID_IHTMLSTYLESHEET_ADDRULE = 1010_u32
  DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 1011_u32
  DISPID_IHTMLSTYLESHEET_REMOVERULE = 1012_u32
  DISPID_IHTMLSTYLESHEET_MEDIA = 1013_u32
  DISPID_IHTMLSTYLESHEET_CSSTEXT = 1014_u32
  DISPID_IHTMLSTYLESHEET_RULES = 1015_u32
  DISPID_IHTMLSTYLESHEET2_PAGES = 1016_u32
  DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = 1017_u32
  DISPID_IHTMLSTYLESHEET3_IE8_HREF = 1150_u32
  DISPID_IHTMLSTYLESHEET3_ISALTERNATE = 1151_u32
  DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE = 1152_u32
  DISPID_IHTMLSTYLESHEET4_IE9_TYPE = 1153_u32
  DISPID_IHTMLSTYLESHEET4_IE9_HREF = 1154_u32
  DISPID_IHTMLSTYLESHEET4_IE9_TITLE = 1155_u32
  DISPID_IHTMLSTYLESHEET4_OWNERNODE = 1156_u32
  DISPID_IHTMLSTYLESHEET4_OWNERRULE = 1157_u32
  DISPID_IHTMLSTYLESHEET4_CSSRULES = 1158_u32
  DISPID_IHTMLSTYLESHEET4_IE9_MEDIA = 1159_u32
  DISPID_IHTMLSTYLESHEET4_INSERTRULE = 1160_u32
  DISPID_IHTMLSTYLESHEET4_DELETERULE = 1161_u32
  DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM = 1002_u32
  DISPID_IHTMLLINKELEMENT_HREF = 1005_u32
  DISPID_IHTMLLINKELEMENT_REL = 1006_u32
  DISPID_IHTMLLINKELEMENT_REV = 1007_u32
  DISPID_IHTMLLINKELEMENT_TYPE = 1008_u32
  DISPID_IHTMLLINKELEMENT_READYSTATE = 70652_u32
  DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLLINKELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLLINKELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLLINKELEMENT_STYLESHEET = 1014_u32
  DISPID_IHTMLLINKELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLLINKELEMENT_MEDIA = 1016_u32
  DISPID_IHTMLLINKELEMENT2_TARGET = 1017_u32
  DISPID_IHTMLLINKELEMENT3_CHARSET = 1018_u32
  DISPID_IHTMLLINKELEMENT3_HREFLANG = 1019_u32
  DISPID_IHTMLLINKELEMENT4_IE8_HREF = 1150_u32
  DISPID_IHTMLLINKELEMENT5_SHEET = 1020_u32
  DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 1002_u32
  DISPID_IHTMLTXTRANGE_HTMLTEXT = 1003_u32
  DISPID_IHTMLTXTRANGE_TEXT = 1004_u32
  DISPID_IHTMLTXTRANGE_PARENTELEMENT = 1006_u32
  DISPID_IHTMLTXTRANGE_DUPLICATE = 1008_u32
  DISPID_IHTMLTXTRANGE_INRANGE = 1010_u32
  DISPID_IHTMLTXTRANGE_ISEQUAL = 1011_u32
  DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 1012_u32
  DISPID_IHTMLTXTRANGE_COLLAPSE = 1013_u32
  DISPID_IHTMLTXTRANGE_EXPAND = 1014_u32
  DISPID_IHTMLTXTRANGE_MOVE = 1015_u32
  DISPID_IHTMLTXTRANGE_MOVESTART = 1016_u32
  DISPID_IHTMLTXTRANGE_MOVEEND = 1017_u32
  DISPID_IHTMLTXTRANGE_SELECT = 1024_u32
  DISPID_IHTMLTXTRANGE_PASTEHTML = 1026_u32
  DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 1001_u32
  DISPID_IHTMLTXTRANGE_SETENDPOINT = 1025_u32
  DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 1018_u32
  DISPID_IHTMLTXTRANGE_FINDTEXT = 1019_u32
  DISPID_IHTMLTXTRANGE_MOVETOPOINT = 1020_u32
  DISPID_IHTMLTXTRANGE_GETBOOKMARK = 1021_u32
  DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 1009_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 1027_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 1028_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 1029_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 1030_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 1031_u32
  DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 1032_u32
  DISPID_IHTMLTXTRANGE_EXECCOMMAND = 1033_u32
  DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 1034_u32
  DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 1035_u32
  DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 1036_u32
  DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 1037_u32
  DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 1038_u32
  DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 1039_u32
  DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 1040_u32
  DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = 1041_u32
  DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = 1042_u32
  DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLTXTRANGECOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDOMRANGE_STARTCONTAINER = 1001_u32
  DISPID_IHTMLDOMRANGE_STARTOFFSET = 1002_u32
  DISPID_IHTMLDOMRANGE_ENDCONTAINER = 1003_u32
  DISPID_IHTMLDOMRANGE_ENDOFFSET = 1004_u32
  DISPID_IHTMLDOMRANGE_COLLAPSED = 1005_u32
  DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER = 1006_u32
  DISPID_IHTMLDOMRANGE_SETSTART = 1007_u32
  DISPID_IHTMLDOMRANGE_SETEND = 1008_u32
  DISPID_IHTMLDOMRANGE_SETSTARTBEFORE = 1009_u32
  DISPID_IHTMLDOMRANGE_SETSTARTAFTER = 1010_u32
  DISPID_IHTMLDOMRANGE_SETENDBEFORE = 1011_u32
  DISPID_IHTMLDOMRANGE_SETENDAFTER = 1012_u32
  DISPID_IHTMLDOMRANGE_COLLAPSE = 1013_u32
  DISPID_IHTMLDOMRANGE_SELECTNODE = 1014_u32
  DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS = 1015_u32
  DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS = 1016_u32
  DISPID_IHTMLDOMRANGE_DELETECONTENTS = 1017_u32
  DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS = 1018_u32
  DISPID_IHTMLDOMRANGE_CLONECONTENTS = 1019_u32
  DISPID_IHTMLDOMRANGE_INSERTNODE = 1020_u32
  DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS = 1021_u32
  DISPID_IHTMLDOMRANGE_CLONERANGE = 1022_u32
  DISPID_IHTMLDOMRANGE_TOSTRING = 1023_u32
  DISPID_IHTMLDOMRANGE_DETACH = 1024_u32
  DISPID_IHTMLDOMRANGE_GETCLIENTRECTS = 1025_u32
  DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT = 1026_u32
  DISPID_IHTMLFORMELEMENT_ACTION = 1001_u32
  DISPID_IHTMLFORMELEMENT_DIR = 70653_u32
  DISPID_IHTMLFORMELEMENT_ENCODING = 1003_u32
  DISPID_IHTMLFORMELEMENT_METHOD = 1004_u32
  DISPID_IHTMLFORMELEMENT_ELEMENTS = 1005_u32
  DISPID_IHTMLFORMELEMENT_TARGET = 1006_u32
  DISPID_IHTMLFORMELEMENT_NAME = 65536_u32
  DISPID_IHTMLFORMELEMENT_ONSUBMIT = 71547_u32
  DISPID_IHTMLFORMELEMENT_ONRESET = 71548_u32
  DISPID_IHTMLFORMELEMENT_SUBMIT = 1009_u32
  DISPID_IHTMLFORMELEMENT_RESET = 1010_u32
  DISPID_IHTMLFORMELEMENT_LENGTH = 1500_u32
  DISPID_IHTMLFORMELEMENT__NEWENUM = -4_i32
  DISPID_IHTMLFORMELEMENT_ITEM = 0_u32
  DISPID_IHTMLFORMELEMENT_TAGS = 1502_u32
  DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = 1011_u32
  DISPID_IHTMLFORMELEMENT2_URNS = 1505_u32
  DISPID_IHTMLFORMELEMENT3_NAMEDITEM = 1506_u32
  DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = 1012_u32
  DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = 1013_u32
  DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = 1014_u32
  DISPID_IHTMLFORMELEMENT4_IE8_ACTION = 1150_u32
  DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = 1007_u32
  DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = 1015_u32
  DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 1007_u32
  DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 1015_u32
  DISPID_IHTMLCONTROLELEMENT_TABINDEX = 65551_u32
  DISPID_IHTMLCONTROLELEMENT_FOCUS = 67536_u32
  DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = 67541_u32
  DISPID_IHTMLCONTROLELEMENT_ONBLUR = 71551_u32
  DISPID_IHTMLCONTROLELEMENT_ONFOCUS = 71550_u32
  DISPID_IHTMLCONTROLELEMENT_ONRESIZE = 71572_u32
  DISPID_IHTMLCONTROLELEMENT_BLUR = 67538_u32
  DISPID_IHTMLCONTROLELEMENT_ADDFILTER = 67553_u32
  DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = 67554_u32
  DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = 67555_u32
  DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = 67556_u32
  DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = 67557_u32
  DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = 67558_u32
  DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 1001_u32
  DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 1002_u32
  DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 1003_u32
  DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 1004_u32
  DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 1005_u32
  DISPID_IHTMLTEXTCONTAINER_ONSCROLL = 71567_u32
  DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = 1001_u32
  DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = 1006_u32
  DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 1001_u32
  DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 1006_u32
  DISPID_IHTMLCONTROLRANGE_SELECT = 1002_u32
  DISPID_IHTMLCONTROLRANGE_ADD = 1003_u32
  DISPID_IHTMLCONTROLRANGE_REMOVE = 1004_u32
  DISPID_IHTMLCONTROLRANGE_ITEM = 0_u32
  DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 1006_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 1007_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 1008_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 1009_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 1010_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 1011_u32
  DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 1012_u32
  DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 1013_u32
  DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 1014_u32
  DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 1015_u32
  DISPID_IHTMLCONTROLRANGE_LENGTH = 1005_u32
  DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = 1016_u32
  DISPID_IHTMLIMGELEMENT_ISMAP = 2002_u32
  DISPID_IHTMLIMGELEMENT_USEMAP = 2008_u32
  DISPID_IHTMLIMGELEMENT_MIMETYPE = 2010_u32
  DISPID_IHTMLIMGELEMENT_FILESIZE = 2011_u32
  DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 2012_u32
  DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 2013_u32
  DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 2014_u32
  DISPID_IHTMLIMGELEMENT_PROTOCOL = 2015_u32
  DISPID_IHTMLIMGELEMENT_HREF = 2016_u32
  DISPID_IHTMLIMGELEMENT_NAMEPROP = 2017_u32
  DISPID_IHTMLIMGELEMENT_BORDER = 1004_u32
  DISPID_IHTMLIMGELEMENT_VSPACE = 1005_u32
  DISPID_IHTMLIMGELEMENT_HSPACE = 1006_u32
  DISPID_IHTMLIMGELEMENT_ALT = 1002_u32
  DISPID_IHTMLIMGELEMENT_SRC = 1003_u32
  DISPID_IHTMLIMGELEMENT_LOWSRC = 1007_u32
  DISPID_IHTMLIMGELEMENT_VRML = 1008_u32
  DISPID_IHTMLIMGELEMENT_DYNSRC = 1009_u32
  DISPID_IHTMLIMGELEMENT_READYSTATE = 70652_u32
  DISPID_IHTMLIMGELEMENT_COMPLETE = 1010_u32
  DISPID_IHTMLIMGELEMENT_LOOP = 1011_u32
  DISPID_IHTMLIMGELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLIMGELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLIMGELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLIMGELEMENT_ONABORT = 71564_u32
  DISPID_IHTMLIMGELEMENT_NAME = 65536_u32
  DISPID_IHTMLIMGELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLIMGELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLIMGELEMENT_START = 1013_u32
  DISPID_IHTMLIMGELEMENT2_LONGDESC = 2019_u32
  DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC = 1151_u32
  DISPID_IHTMLIMGELEMENT3_IE8_VRML = 1152_u32
  DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC = 1153_u32
  DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC = 1154_u32
  DISPID_IHTMLIMGELEMENT4_NATURALWIDTH = 1155_u32
  DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT = 1156_u32
  DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED = 1157_u32
  DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY = 1158_u32
  DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0_u32
  DISPID_HTMLIMGEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLIMGEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLIMGEVENTS2_ONABORT = 1000_u32
  DISPID_HTMLIMGEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLIMGEVENTS_ONERROR = 1002_u32
  DISPID_HTMLIMGEVENTS_ONABORT = 1000_u32
  DISPID_IHTMLBODYELEMENT_BACKGROUND = 70537_u32
  DISPID_IHTMLBODYELEMENT_BGPROPERTIES = 70581_u32
  DISPID_IHTMLBODYELEMENT_LEFTMARGIN = 70576_u32
  DISPID_IHTMLBODYELEMENT_TOPMARGIN = 70573_u32
  DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = 70574_u32
  DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = 70575_u32
  DISPID_IHTMLBODYELEMENT_NOWRAP = 70541_u32
  DISPID_IHTMLBODYELEMENT_BGCOLOR = -501_i32
  DISPID_IHTMLBODYELEMENT_TEXT = 70538_u32
  DISPID_IHTMLBODYELEMENT_LINK = 2010_u32
  DISPID_IHTMLBODYELEMENT_VLINK = 2012_u32
  DISPID_IHTMLBODYELEMENT_ALINK = 2011_u32
  DISPID_IHTMLBODYELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLBODYELEMENT_ONUNLOAD = 71569_u32
  DISPID_IHTMLBODYELEMENT_SCROLL = 70615_u32
  DISPID_IHTMLBODYELEMENT_ONSELECT = 71546_u32
  DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = 71575_u32
  DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 2013_u32
  DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT = 71602_u32
  DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT = 71603_u32
  DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND = 1150_u32
  DISPID_IHTMLBODYELEMENT3_ONONLINE = 71643_u32
  DISPID_IHTMLBODYELEMENT3_ONOFFLINE = 71644_u32
  DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE = 71645_u32
  DISPID_IHTMLBODYELEMENT4_ONMESSAGE = 71646_u32
  DISPID_IHTMLBODYELEMENT4_ONSTORAGE = 71636_u32
  DISPID_IHTMLBODYELEMENT5_ONPOPSTATE = 71728_u32
  DISPID_IHTMLFONTELEMENT_COLOR = 70538_u32
  DISPID_IHTMLFONTELEMENT_FACE = 70554_u32
  DISPID_IHTMLFONTELEMENT_SIZE = 70555_u32
  DISPID_IHTMLANCHORELEMENT_HREF = 0_u32
  DISPID_IHTMLANCHORELEMENT_TARGET = 1003_u32
  DISPID_IHTMLANCHORELEMENT_REL = 1005_u32
  DISPID_IHTMLANCHORELEMENT_REV = 1006_u32
  DISPID_IHTMLANCHORELEMENT_URN = 1007_u32
  DISPID_IHTMLANCHORELEMENT_METHODS = 1008_u32
  DISPID_IHTMLANCHORELEMENT_NAME = 65536_u32
  DISPID_IHTMLANCHORELEMENT_HOST = 1012_u32
  DISPID_IHTMLANCHORELEMENT_HOSTNAME = 1013_u32
  DISPID_IHTMLANCHORELEMENT_PATHNAME = 1014_u32
  DISPID_IHTMLANCHORELEMENT_PORT = 1015_u32
  DISPID_IHTMLANCHORELEMENT_PROTOCOL = 1016_u32
  DISPID_IHTMLANCHORELEMENT_SEARCH = 1017_u32
  DISPID_IHTMLANCHORELEMENT_HASH = 1018_u32
  DISPID_IHTMLANCHORELEMENT_ONBLUR = 71551_u32
  DISPID_IHTMLANCHORELEMENT_ONFOCUS = 71550_u32
  DISPID_IHTMLANCHORELEMENT_ACCESSKEY = 67541_u32
  DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 1031_u32
  DISPID_IHTMLANCHORELEMENT_MIMETYPE = 1030_u32
  DISPID_IHTMLANCHORELEMENT_NAMEPROP = 1032_u32
  DISPID_IHTMLANCHORELEMENT_TABINDEX = 65551_u32
  DISPID_IHTMLANCHORELEMENT_FOCUS = 67536_u32
  DISPID_IHTMLANCHORELEMENT_BLUR = 67538_u32
  DISPID_IHTMLANCHORELEMENT2_CHARSET = 1023_u32
  DISPID_IHTMLANCHORELEMENT2_COORDS = 1024_u32
  DISPID_IHTMLANCHORELEMENT2_HREFLANG = 1025_u32
  DISPID_IHTMLANCHORELEMENT2_SHAPE = 1026_u32
  DISPID_IHTMLANCHORELEMENT2_TYPE = 1027_u32
  DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE = 1151_u32
  DISPID_IHTMLANCHORELEMENT3_IE8_COORDS = 1152_u32
  DISPID_IHTMLANCHORELEMENT3_IE8_HREF = 1153_u32
  DISPID_IHTMLLABELELEMENT_HTMLFOR = 1000_u32
  DISPID_IHTMLLABELELEMENT_ACCESSKEY = 67541_u32
  DISPID_IHTMLLABELELEMENT2_FORM = 1002_u32
  DISPID_IHTMLLISTELEMENT2_COMPACT = 1001_u32
  DISPID_IHTMLULISTELEMENT_COMPACT = 1001_u32
  DISPID_IHTMLULISTELEMENT_TYPE = 70553_u32
  DISPID_IHTMLOLISTELEMENT_COMPACT = 1001_u32
  DISPID_IHTMLOLISTELEMENT_START = 1003_u32
  DISPID_IHTMLOLISTELEMENT_TYPE = 70553_u32
  DISPID_IHTMLLIELEMENT_TYPE = 70553_u32
  DISPID_IHTMLLIELEMENT_VALUE = 1001_u32
  DISPID_IHTMLBLOCKELEMENT_CLEAR = 70552_u32
  DISPID_IHTMLBLOCKELEMENT2_CITE = 1001_u32
  DISPID_IHTMLBLOCKELEMENT2_WIDTH = 1002_u32
  DISPID_IHTMLBLOCKELEMENT3_IE8_CITE = 1150_u32
  DISPID_IHTMLDIVELEMENT_ALIGN = 65608_u32
  DISPID_IHTMLDIVELEMENT_NOWRAP = 70541_u32
  DISPID_IHTMLDDELEMENT_NOWRAP = 70541_u32
  DISPID_IHTMLDTELEMENT_NOWRAP = 70541_u32
  DISPID_IHTMLBRELEMENT_CLEAR = 70552_u32
  DISPID_IHTMLDLISTELEMENT_COMPACT = 1001_u32
  DISPID_IHTMLHRELEMENT_ALIGN = 65608_u32
  DISPID_IHTMLHRELEMENT_COLOR = 70538_u32
  DISPID_IHTMLHRELEMENT_NOSHADE = 1001_u32
  DISPID_IHTMLHRELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLHRELEMENT_SIZE = 65542_u32
  DISPID_IHTMLPARAELEMENT_ALIGN = 65608_u32
  DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 1501_u32
  DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLELEMENTCOLLECTION_TAGS = 1502_u32
  DISPID_IHTMLELEMENTCOLLECTION2_URNS = 1505_u32
  DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = 1506_u32
  DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH = 1150_u32
  DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM = 1152_u32
  DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM = 1153_u32
  DISPID_IHTMLHEADERELEMENT_ALIGN = 65608_u32
  DISPID_IHTMLSELECTELEMENT_SIZE = 1002_u32
  DISPID_IHTMLSELECTELEMENT_MULTIPLE = 1003_u32
  DISPID_IHTMLSELECTELEMENT_NAME = 65536_u32
  DISPID_IHTMLSELECTELEMENT_OPTIONS = 1005_u32
  DISPID_IHTMLSELECTELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 1010_u32
  DISPID_IHTMLSELECTELEMENT_TYPE = 1012_u32
  DISPID_IHTMLSELECTELEMENT_VALUE = 1011_u32
  DISPID_IHTMLSELECTELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLSELECTELEMENT_FORM = 67540_u32
  DISPID_IHTMLSELECTELEMENT_ADD = 1503_u32
  DISPID_IHTMLSELECTELEMENT_REMOVE = 1504_u32
  DISPID_IHTMLSELECTELEMENT_LENGTH = 1500_u32
  DISPID_IHTMLSELECTELEMENT__NEWENUM = -4_i32
  DISPID_IHTMLSELECTELEMENT_ITEM = 0_u32
  DISPID_IHTMLSELECTELEMENT_TAGS = 1502_u32
  DISPID_IHTMLSELECTELEMENT2_URNS = 1505_u32
  DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = 1506_u32
  DISPID_IHTMLSELECTELEMENT5_IE8_ADD = 1150_u32
  DISPID_IHTMLSELECTELEMENT6_IE9_ADD = 1151_u32
  DISPID_IHTMLSELECTELEMENT6_IE9_VALUE = 1152_u32
  DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = 1001_u32
  DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 1001_u32
  DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 1001_u32
  DISPID_IHTMLSELECTIONOBJECT_EMPTY = 1002_u32
  DISPID_IHTMLSELECTIONOBJECT_CLEAR = 1003_u32
  DISPID_IHTMLSELECTIONOBJECT_TYPE = 1004_u32
  DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = 1005_u32
  DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = 1006_u32
  DISPID_IHTMLSELECTION_ANCHORNODE = 1001_u32
  DISPID_IHTMLSELECTION_ANCHOROFFSET = 1002_u32
  DISPID_IHTMLSELECTION_FOCUSNODE = 1003_u32
  DISPID_IHTMLSELECTION_FOCUSOFFSET = 1004_u32
  DISPID_IHTMLSELECTION_ISCOLLAPSED = 1005_u32
  DISPID_IHTMLSELECTION_COLLAPSE = 1006_u32
  DISPID_IHTMLSELECTION_COLLAPSETOSTART = 1007_u32
  DISPID_IHTMLSELECTION_COLLAPSETOEND = 1008_u32
  DISPID_IHTMLSELECTION_SELECTALLCHILDREN = 1009_u32
  DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT = 1010_u32
  DISPID_IHTMLSELECTION_RANGECOUNT = 1011_u32
  DISPID_IHTMLSELECTION_GETRANGEAT = 1012_u32
  DISPID_IHTMLSELECTION_ADDRANGE = 1013_u32
  DISPID_IHTMLSELECTION_REMOVERANGE = 1014_u32
  DISPID_IHTMLSELECTION_REMOVEALLRANGES = 1015_u32
  DISPID_IHTMLSELECTION_TOSTRING = 1016_u32
  DISPID_IHTMLOPTIONELEMENT_SELECTED = 1001_u32
  DISPID_IHTMLOPTIONELEMENT_VALUE = 1002_u32
  DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 1003_u32
  DISPID_IHTMLOPTIONELEMENT_INDEX = 1005_u32
  DISPID_IHTMLOPTIONELEMENT_TEXT = 1004_u32
  DISPID_IHTMLOPTIONELEMENT_FORM = 1006_u32
  DISPID_IHTMLOPTIONELEMENT3_LABEL = 1007_u32
  DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE = 1008_u32
  DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0_u32
  DISPID_IHTMLINPUTELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTELEMENT_VALUE = 70637_u32
  DISPID_IHTMLINPUTELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTELEMENT_STATUS = 2001_u32
  DISPID_IHTMLINPUTELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTELEMENT_SIZE = 2002_u32
  DISPID_IHTMLINPUTELEMENT_MAXLENGTH = 2003_u32
  DISPID_IHTMLINPUTELEMENT_SELECT = 2004_u32
  DISPID_IHTMLINPUTELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLINPUTELEMENT_ONSELECT = 71546_u32
  DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE = 70619_u32
  DISPID_IHTMLINPUTELEMENT_READONLY = 2005_u32
  DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = 2006_u32
  DISPID_IHTMLINPUTELEMENT_INDETERMINATE = 2007_u32
  DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = 2008_u32
  DISPID_IHTMLINPUTELEMENT_CHECKED = 2009_u32
  DISPID_IHTMLINPUTELEMENT_BORDER = 2012_u32
  DISPID_IHTMLINPUTELEMENT_VSPACE = 2013_u32
  DISPID_IHTMLINPUTELEMENT_HSPACE = 2014_u32
  DISPID_IHTMLINPUTELEMENT_ALT = 2010_u32
  DISPID_IHTMLINPUTELEMENT_SRC = 2011_u32
  DISPID_IHTMLINPUTELEMENT_LOWSRC = 2015_u32
  DISPID_IHTMLINPUTELEMENT_VRML = 2016_u32
  DISPID_IHTMLINPUTELEMENT_DYNSRC = 2017_u32
  DISPID_IHTMLINPUTELEMENT_READYSTATE = 70652_u32
  DISPID_IHTMLINPUTELEMENT_COMPLETE = 2018_u32
  DISPID_IHTMLINPUTELEMENT_LOOP = 2019_u32
  DISPID_IHTMLINPUTELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLINPUTELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLINPUTELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLINPUTELEMENT_ONABORT = 71564_u32
  DISPID_IHTMLINPUTELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLINPUTELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLINPUTELEMENT_START = 2020_u32
  DISPID_IHTMLINPUTELEMENT2_ACCEPT = 2022_u32
  DISPID_IHTMLINPUTELEMENT2_USEMAP = 2023_u32
  DISPID_IHTMLINPUTELEMENT3_IE8_SRC = 1150_u32
  DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC = 1151_u32
  DISPID_IHTMLINPUTELEMENT3_IE8_VRML = 1152_u32
  DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC = 1153_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = 70637_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 2021_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 2006_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = 70637_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 2021_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 2006_u32
  DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTTEXTELEMENT_VALUE = 70637_u32
  DISPID_IHTMLINPUTTEXTELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 2021_u32
  DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTTEXTELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = 70619_u32
  DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 2002_u32
  DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 2003_u32
  DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 2004_u32
  DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = 71546_u32
  DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 2005_u32
  DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 2006_u32
  DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART = 2025_u32
  DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND = 2026_u32
  DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE = 2027_u32
  DISPID_IHTMLINPUTFILEELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTFILEELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTFILEELEMENT_STATUS = 2021_u32
  DISPID_IHTMLINPUTFILEELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTFILEELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTFILEELEMENT_SIZE = 2002_u32
  DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 2003_u32
  DISPID_IHTMLINPUTFILEELEMENT_SELECT = 2004_u32
  DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = 71546_u32
  DISPID_IHTMLINPUTFILEELEMENT_VALUE = 70637_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = 70637_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 2000_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = 65536_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 2009_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 2008_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 2001_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 2007_u32
  DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = 67540_u32
  DISPID_IHTMLINPUTIMAGE_TYPE = 2000_u32
  DISPID_IHTMLINPUTIMAGE_DISABLED = 65612_u32
  DISPID_IHTMLINPUTIMAGE_BORDER = 2012_u32
  DISPID_IHTMLINPUTIMAGE_VSPACE = 2013_u32
  DISPID_IHTMLINPUTIMAGE_HSPACE = 2014_u32
  DISPID_IHTMLINPUTIMAGE_ALT = 2010_u32
  DISPID_IHTMLINPUTIMAGE_SRC = 2011_u32
  DISPID_IHTMLINPUTIMAGE_LOWSRC = 2015_u32
  DISPID_IHTMLINPUTIMAGE_VRML = 2016_u32
  DISPID_IHTMLINPUTIMAGE_DYNSRC = 2017_u32
  DISPID_IHTMLINPUTIMAGE_READYSTATE = 70652_u32
  DISPID_IHTMLINPUTIMAGE_COMPLETE = 2018_u32
  DISPID_IHTMLINPUTIMAGE_LOOP = 2019_u32
  DISPID_IHTMLINPUTIMAGE_ALIGN = 65609_u32
  DISPID_IHTMLINPUTIMAGE_ONLOAD = 71568_u32
  DISPID_IHTMLINPUTIMAGE_ONERROR = 71565_u32
  DISPID_IHTMLINPUTIMAGE_ONABORT = 71564_u32
  DISPID_IHTMLINPUTIMAGE_NAME = 65536_u32
  DISPID_IHTMLINPUTIMAGE_WIDTH = 65541_u32
  DISPID_IHTMLINPUTIMAGE_HEIGHT = 65542_u32
  DISPID_IHTMLINPUTIMAGE_START = 2020_u32
  DISPID_IHTMLINPUTRANGEELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLINPUTRANGEELEMENT_TYPE = 2000_u32
  DISPID_IHTMLINPUTRANGEELEMENT_ALT = 2010_u32
  DISPID_IHTMLINPUTRANGEELEMENT_NAME = 65536_u32
  DISPID_IHTMLINPUTRANGEELEMENT_VALUE = 70637_u32
  DISPID_IHTMLINPUTRANGEELEMENT_MIN = 2028_u32
  DISPID_IHTMLINPUTRANGEELEMENT_MAX = 2029_u32
  DISPID_IHTMLINPUTRANGEELEMENT_STEP = 2030_u32
  DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER = 2031_u32
  DISPID_IHTMLINPUTRANGEELEMENT_STEPUP = 2033_u32
  DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN = 2032_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = 1001_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = 1006_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = 1000_u32
  DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = 1000_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 1001_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 1006_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = 1002_u32
  DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = 1000_u32
  DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = 1002_u32
  DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = 1000_u32
  DISPID_IHTMLTEXTAREAELEMENT_TYPE = 2000_u32
  DISPID_IHTMLTEXTAREAELEMENT_VALUE = 70637_u32
  DISPID_IHTMLTEXTAREAELEMENT_NAME = 65536_u32
  DISPID_IHTMLTEXTAREAELEMENT_STATUS = 2001_u32
  DISPID_IHTMLTEXTAREAELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLTEXTAREAELEMENT_FORM = 67540_u32
  DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = 70619_u32
  DISPID_IHTMLTEXTAREAELEMENT_SELECT = 7005_u32
  DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = 71566_u32
  DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = 71546_u32
  DISPID_IHTMLTEXTAREAELEMENT_READONLY = 7004_u32
  DISPID_IHTMLTEXTAREAELEMENT_ROWS = 7001_u32
  DISPID_IHTMLTEXTAREAELEMENT_COLS = 7002_u32
  DISPID_IHTMLTEXTAREAELEMENT_WRAP = 7003_u32
  DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 7006_u32
  DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART = 7007_u32
  DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND = 7008_u32
  DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE = 7009_u32
  DISPID_IHTMLBUTTONELEMENT_TYPE = 2000_u32
  DISPID_IHTMLBUTTONELEMENT_VALUE = 70637_u32
  DISPID_IHTMLBUTTONELEMENT_NAME = 65536_u32
  DISPID_IHTMLBUTTONELEMENT_STATUS = 8001_u32
  DISPID_IHTMLBUTTONELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLBUTTONELEMENT_FORM = 67540_u32
  DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 8002_u32
  DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE = 8003_u32
  DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = -501_i32
  DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 6000_u32
  DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 6001_u32
  DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 6002_u32
  DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 6003_u32
  DISPID_IHTMLMARQUEEELEMENT_LOOP = 6004_u32
  DISPID_IHTMLMARQUEEELEMENT_VSPACE = 6005_u32
  DISPID_IHTMLMARQUEEELEMENT_HSPACE = 6006_u32
  DISPID_IHTMLMARQUEEELEMENT_ONFINISH = 71562_u32
  DISPID_IHTMLMARQUEEELEMENT_ONSTART = 71563_u32
  DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = 71556_u32
  DISPID_IHTMLMARQUEEELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLMARQUEEELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 6007_u32
  DISPID_IHTMLMARQUEEELEMENT_START = 6010_u32
  DISPID_IHTMLMARQUEEELEMENT_STOP = 6011_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = 1009_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = 1010_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = 1011_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 1009_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 1010_u32
  DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 1011_u32
  DISPID_IHTMLHTMLELEMENT_VERSION = 1001_u32
  DISPID_IHTMLHEADELEMENT_PROFILE = 1001_u32
  DISPID_IHTMLHEADELEMENT2_IE8_PROFILE = 1150_u32
  DISPID_IHTMLTITLEELEMENT_TEXT = 70637_u32
  DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 1001_u32
  DISPID_IHTMLMETAELEMENT_CONTENT = 1002_u32
  DISPID_IHTMLMETAELEMENT_NAME = 65536_u32
  DISPID_IHTMLMETAELEMENT_URL = 1003_u32
  DISPID_IHTMLMETAELEMENT_CHARSET = 1013_u32
  DISPID_IHTMLMETAELEMENT2_SCHEME = 1020_u32
  DISPID_IHTMLMETAELEMENT3_IE8_URL = 1150_u32
  DISPID_IHTMLBASEELEMENT_HREF = 1003_u32
  DISPID_IHTMLBASEELEMENT_TARGET = 1004_u32
  DISPID_IHTMLBASEELEMENT2_IE8_HREF = 1150_u32
  DISPID_IHTMLISINDEXELEMENT_PROMPT = 1010_u32
  DISPID_IHTMLISINDEXELEMENT_ACTION = 1011_u32
  DISPID_IHTMLISINDEXELEMENT2_FORM = 1012_u32
  DISPID_IHTMLNEXTIDELEMENT_N = 1012_u32
  DISPID_IHTMLBASEFONTELEMENT_COLOR = 70538_u32
  DISPID_IHTMLBASEFONTELEMENT_FACE = 70554_u32
  DISPID_IHTMLBASEFONTELEMENT_SIZE = 70562_u32
  DISPID_IOMHISTORY_LENGTH = 1_u32
  DISPID_IOMHISTORY_BACK = 2_u32
  DISPID_IOMHISTORY_FORWARD = 3_u32
  DISPID_IOMHISTORY_GO = 4_u32
  DISPID_IHTMLOPSPROFILE_ADDREQUEST = 1_u32
  DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 2_u32
  DISPID_IHTMLOPSPROFILE_DOREQUEST = 3_u32
  DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 4_u32
  DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 5_u32
  DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 6_u32
  DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 7_u32
  DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 8_u32
  DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 9_u32
  DISPID_IOMNAVIGATOR_APPCODENAME = 1_u32
  DISPID_IOMNAVIGATOR_APPNAME = 2_u32
  DISPID_IOMNAVIGATOR_APPVERSION = 3_u32
  DISPID_IOMNAVIGATOR_USERAGENT = 4_u32
  DISPID_IOMNAVIGATOR_JAVAENABLED = 5_u32
  DISPID_IOMNAVIGATOR_TAINTENABLED = 6_u32
  DISPID_IOMNAVIGATOR_MIMETYPES = 7_u32
  DISPID_IOMNAVIGATOR_PLUGINS = 8_u32
  DISPID_IOMNAVIGATOR_COOKIEENABLED = 9_u32
  DISPID_IOMNAVIGATOR_OPSPROFILE = 10_u32
  DISPID_IOMNAVIGATOR_TOSTRING = 11_u32
  DISPID_IOMNAVIGATOR_CPUCLASS = 12_u32
  DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 13_u32
  DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 14_u32
  DISPID_IOMNAVIGATOR_USERLANGUAGE = 15_u32
  DISPID_IOMNAVIGATOR_PLATFORM = 16_u32
  DISPID_IOMNAVIGATOR_APPMINORVERSION = 17_u32
  DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 18_u32
  DISPID_IOMNAVIGATOR_ONLINE = 19_u32
  DISPID_IOMNAVIGATOR_USERPROFILE = 20_u32
  DISPID_INAVIGATORGEOLOCATION_GEOLOCATION = 21_u32
  DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK = 22_u32
  DISPID_IHTMLLOCATION_HREF = 0_u32
  DISPID_IHTMLLOCATION_PROTOCOL = 1_u32
  DISPID_IHTMLLOCATION_HOST = 2_u32
  DISPID_IHTMLLOCATION_HOSTNAME = 3_u32
  DISPID_IHTMLLOCATION_PORT = 4_u32
  DISPID_IHTMLLOCATION_PATHNAME = 5_u32
  DISPID_IHTMLLOCATION_SEARCH = 6_u32
  DISPID_IHTMLLOCATION_HASH = 7_u32
  DISPID_IHTMLLOCATION_RELOAD = 8_u32
  DISPID_IHTMLLOCATION_REPLACE = 9_u32
  DISPID_IHTMLLOCATION_ASSIGN = 10_u32
  DISPID_IHTMLLOCATION_TOSTRING = 11_u32
  DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 1_u32
  DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 1_u32
  DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 2_u32
  DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = 1501_u32
  DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDATATRANSFER_SETDATA = 1001_u32
  DISPID_IHTMLDATATRANSFER_GETDATA = 1002_u32
  DISPID_IHTMLDATATRANSFER_CLEARDATA = 1003_u32
  DISPID_IHTMLDATATRANSFER_DROPEFFECT = 1004_u32
  DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = 1005_u32
  DISPID_IHTMLEVENTOBJ_SRCELEMENT = 1001_u32
  DISPID_IHTMLEVENTOBJ_ALTKEY = 1002_u32
  DISPID_IHTMLEVENTOBJ_CTRLKEY = 1003_u32
  DISPID_IHTMLEVENTOBJ_SHIFTKEY = 1004_u32
  DISPID_IHTMLEVENTOBJ_RETURNVALUE = 1007_u32
  DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 1008_u32
  DISPID_IHTMLEVENTOBJ_FROMELEMENT = 1009_u32
  DISPID_IHTMLEVENTOBJ_TOELEMENT = 1010_u32
  DISPID_IHTMLEVENTOBJ_KEYCODE = 1011_u32
  DISPID_IHTMLEVENTOBJ_BUTTON = 1012_u32
  DISPID_IHTMLEVENTOBJ_TYPE = 1013_u32
  DISPID_IHTMLEVENTOBJ_QUALIFIER = 1014_u32
  DISPID_IHTMLEVENTOBJ_REASON = 1015_u32
  DISPID_IHTMLEVENTOBJ_X = 1005_u32
  DISPID_IHTMLEVENTOBJ_Y = 1006_u32
  DISPID_IHTMLEVENTOBJ_CLIENTX = 1020_u32
  DISPID_IHTMLEVENTOBJ_CLIENTY = 1021_u32
  DISPID_IHTMLEVENTOBJ_OFFSETX = 1022_u32
  DISPID_IHTMLEVENTOBJ_OFFSETY = 1023_u32
  DISPID_IHTMLEVENTOBJ_SCREENX = 1024_u32
  DISPID_IHTMLEVENTOBJ_SCREENY = 1025_u32
  DISPID_IHTMLEVENTOBJ_SRCFILTER = 1026_u32
  DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE = 66037_u32
  DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE = 66038_u32
  DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE = 66039_u32
  DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = 1027_u32
  DISPID_IHTMLEVENTOBJ2_BOOKMARKS = 1031_u32
  DISPID_IHTMLEVENTOBJ2_RECORDSET = 1032_u32
  DISPID_IHTMLEVENTOBJ2_DATAFLD = 1033_u32
  DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = 1034_u32
  DISPID_IHTMLEVENTOBJ2_REPEAT = 1035_u32
  DISPID_IHTMLEVENTOBJ2_SRCURN = 1036_u32
  DISPID_IHTMLEVENTOBJ2_SRCELEMENT = 1001_u32
  DISPID_IHTMLEVENTOBJ2_ALTKEY = 1002_u32
  DISPID_IHTMLEVENTOBJ2_CTRLKEY = 1003_u32
  DISPID_IHTMLEVENTOBJ2_SHIFTKEY = 1004_u32
  DISPID_IHTMLEVENTOBJ2_FROMELEMENT = 1009_u32
  DISPID_IHTMLEVENTOBJ2_TOELEMENT = 1010_u32
  DISPID_IHTMLEVENTOBJ2_BUTTON = 1012_u32
  DISPID_IHTMLEVENTOBJ2_TYPE = 1013_u32
  DISPID_IHTMLEVENTOBJ2_QUALIFIER = 1014_u32
  DISPID_IHTMLEVENTOBJ2_REASON = 1015_u32
  DISPID_IHTMLEVENTOBJ2_X = 1005_u32
  DISPID_IHTMLEVENTOBJ2_Y = 1006_u32
  DISPID_IHTMLEVENTOBJ2_CLIENTX = 1020_u32
  DISPID_IHTMLEVENTOBJ2_CLIENTY = 1021_u32
  DISPID_IHTMLEVENTOBJ2_OFFSETX = 1022_u32
  DISPID_IHTMLEVENTOBJ2_OFFSETY = 1023_u32
  DISPID_IHTMLEVENTOBJ2_SCREENX = 1024_u32
  DISPID_IHTMLEVENTOBJ2_SCREENY = 1025_u32
  DISPID_IHTMLEVENTOBJ2_SRCFILTER = 1026_u32
  DISPID_IHTMLEVENTOBJ2_DATATRANSFER = 1037_u32
  DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = 1038_u32
  DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = 1039_u32
  DISPID_IHTMLEVENTOBJ3_ALTLEFT = 1040_u32
  DISPID_IHTMLEVENTOBJ3_CTRLLEFT = 1041_u32
  DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = 1042_u32
  DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = 1043_u32
  DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = 1044_u32
  DISPID_IHTMLEVENTOBJ3_IMEREQUEST = 1046_u32
  DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = 1047_u32
  DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = 1045_u32
  DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = 1048_u32
  DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = 1049_u32
  DISPID_IHTMLEVENTOBJ3_NEXTPAGE = 1050_u32
  DISPID_IHTMLEVENTOBJ4_WHEELDELTA = 1051_u32
  DISPID_IHTMLEVENTOBJ5_URL = 1052_u32
  DISPID_IHTMLEVENTOBJ5_DATA = 1054_u32
  DISPID_IHTMLEVENTOBJ5_SOURCE = 1055_u32
  DISPID_IHTMLEVENTOBJ5_ORIGIN = 1053_u32
  DISPID_IHTMLEVENTOBJ5_ISSESSION = 1056_u32
  DISPID_IHTMLEVENTOBJ6_ACTIONURL = 1058_u32
  DISPID_IHTMLEVENTOBJ6_BUTTONID = 1057_u32
  DISPID_IHTMLSTYLEMEDIA_TYPE = 1001_u32
  DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM = 1002_u32
  DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0_u32
  DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 1001_u32
  DISPID_IHTMLSCREEN_COLORDEPTH = 1001_u32
  DISPID_IHTMLSCREEN_BUFFERDEPTH = 1002_u32
  DISPID_IHTMLSCREEN_WIDTH = 1003_u32
  DISPID_IHTMLSCREEN_HEIGHT = 1004_u32
  DISPID_IHTMLSCREEN_UPDATEINTERVAL = 1005_u32
  DISPID_IHTMLSCREEN_AVAILHEIGHT = 1006_u32
  DISPID_IHTMLSCREEN_AVAILWIDTH = 1007_u32
  DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 1008_u32
  DISPID_IHTMLSCREEN2_LOGICALXDPI = 1009_u32
  DISPID_IHTMLSCREEN2_LOGICALYDPI = 1010_u32
  DISPID_IHTMLSCREEN2_DEVICEXDPI = 1011_u32
  DISPID_IHTMLSCREEN2_DEVICEYDPI = 1012_u32
  DISPID_IHTMLSCREEN3_SYSTEMXDPI = 1013_u32
  DISPID_IHTMLSCREEN3_SYSTEMYDPI = 1014_u32
  DISPID_IHTMLSCREEN4_PIXELDEPTH = 1015_u32
  DISPID_IHTMLWINDOW2_FRAMES = 1100_u32
  DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 1101_u32
  DISPID_IHTMLWINDOW2_STATUS = 1102_u32
  DISPID_IHTMLWINDOW2_SETTIMEOUT = 1172_u32
  DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 1104_u32
  DISPID_IHTMLWINDOW2_ALERT = 1105_u32
  DISPID_IHTMLWINDOW2_CONFIRM = 1110_u32
  DISPID_IHTMLWINDOW2_PROMPT = 1111_u32
  DISPID_IHTMLWINDOW2_IMAGE = 1125_u32
  DISPID_IHTMLWINDOW2_LOCATION = 14_u32
  DISPID_IHTMLWINDOW2_HISTORY = 2_u32
  DISPID_IHTMLWINDOW2_CLOSE = 3_u32
  DISPID_IHTMLWINDOW2_OPENER = 4_u32
  DISPID_IHTMLWINDOW2_NAVIGATOR = 5_u32
  DISPID_IHTMLWINDOW2_NAME = 11_u32
  DISPID_IHTMLWINDOW2_PARENT = 12_u32
  DISPID_IHTMLWINDOW2_OPEN = 13_u32
  DISPID_IHTMLWINDOW2_SELF = 20_u32
  DISPID_IHTMLWINDOW2_TOP = 21_u32
  DISPID_IHTMLWINDOW2_WINDOW = 22_u32
  DISPID_IHTMLWINDOW2_NAVIGATE = 25_u32
  DISPID_IHTMLWINDOW2_ONFOCUS = 71550_u32
  DISPID_IHTMLWINDOW2_ONBLUR = 71551_u32
  DISPID_IHTMLWINDOW2_ONLOAD = 71568_u32
  DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = 71575_u32
  DISPID_IHTMLWINDOW2_ONUNLOAD = 71569_u32
  DISPID_IHTMLWINDOW2_ONHELP = 71549_u32
  DISPID_IHTMLWINDOW2_ONERROR = 71565_u32
  DISPID_IHTMLWINDOW2_ONRESIZE = 71572_u32
  DISPID_IHTMLWINDOW2_ONSCROLL = 71567_u32
  DISPID_IHTMLWINDOW2_DOCUMENT = 1151_u32
  DISPID_IHTMLWINDOW2_EVENT = 1152_u32
  DISPID_IHTMLWINDOW2__NEWENUM = 1153_u32
  DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 1154_u32
  DISPID_IHTMLWINDOW2_SHOWHELP = 1155_u32
  DISPID_IHTMLWINDOW2_SCREEN = 1156_u32
  DISPID_IHTMLWINDOW2_OPTION = 1157_u32
  DISPID_IHTMLWINDOW2_FOCUS = 1158_u32
  DISPID_IHTMLWINDOW2_CLOSED = 23_u32
  DISPID_IHTMLWINDOW2_BLUR = 1159_u32
  DISPID_IHTMLWINDOW2_SCROLL = 1160_u32
  DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 1161_u32
  DISPID_IHTMLWINDOW2_SETINTERVAL = 1173_u32
  DISPID_IHTMLWINDOW2_CLEARINTERVAL = 1163_u32
  DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 1164_u32
  DISPID_IHTMLWINDOW2_EXECSCRIPT = 1165_u32
  DISPID_IHTMLWINDOW2_TOSTRING = 1166_u32
  DISPID_IHTMLWINDOW2_SCROLLBY = 1167_u32
  DISPID_IHTMLWINDOW2_SCROLLTO = 1168_u32
  DISPID_IHTMLWINDOW2_MOVETO = 6_u32
  DISPID_IHTMLWINDOW2_MOVEBY = 7_u32
  DISPID_IHTMLWINDOW2_RESIZETO = 9_u32
  DISPID_IHTMLWINDOW2_RESIZEBY = 8_u32
  DISPID_IHTMLWINDOW2_EXTERNAL = 1169_u32
  DISPID_IHTMLWINDOW3_SCREENLEFT = 1170_u32
  DISPID_IHTMLWINDOW3_SCREENTOP = 1171_u32
  DISPID_IHTMLWINDOW3_ATTACHEVENT = 66043_u32
  DISPID_IHTMLWINDOW3_DETACHEVENT = 66044_u32
  DISPID_IHTMLWINDOW3_SETTIMEOUT = 1103_u32
  DISPID_IHTMLWINDOW3_SETINTERVAL = 1162_u32
  DISPID_IHTMLWINDOW3_PRINT = 1174_u32
  DISPID_IHTMLWINDOW3_ONBEFOREPRINT = 71602_u32
  DISPID_IHTMLWINDOW3_ONAFTERPRINT = 71603_u32
  DISPID_IHTMLWINDOW3_CLIPBOARDDATA = 1175_u32
  DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = 1176_u32
  DISPID_IHTMLWINDOW4_CREATEPOPUP = 1180_u32
  DISPID_IHTMLWINDOW4_FRAMEELEMENT = 1181_u32
  DISPID_IHTMLWINDOW5_XMLHTTPREQUEST = 1190_u32
  DISPID_IHTMLWINDOW6_XDOMAINREQUEST = 1191_u32
  DISPID_IHTMLWINDOW6_SESSIONSTORAGE = 1192_u32
  DISPID_IHTMLWINDOW6_LOCALSTORAGE = 1193_u32
  DISPID_IHTMLWINDOW6_ONHASHCHANGE = 71645_u32
  DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER = 1194_u32
  DISPID_IHTMLWINDOW6_POSTMESSAGE = 1196_u32
  DISPID_IHTMLWINDOW6_TOSTATICHTML = 1197_u32
  DISPID_IHTMLWINDOW6_ONMESSAGE = 71646_u32
  DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK = 1198_u32
  DISPID_IHTMLWINDOW7_GETSELECTION = 1199_u32
  DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE = 1200_u32
  DISPID_IHTMLWINDOW7_STYLEMEDIA = 1202_u32
  DISPID_IHTMLWINDOW7_PERFORMANCE = 1203_u32
  DISPID_IHTMLWINDOW7_INNERWIDTH = 1204_u32
  DISPID_IHTMLWINDOW7_INNERHEIGHT = 1205_u32
  DISPID_IHTMLWINDOW7_PAGEXOFFSET = 1206_u32
  DISPID_IHTMLWINDOW7_PAGEYOFFSET = 1207_u32
  DISPID_IHTMLWINDOW7_SCREENX = 1208_u32
  DISPID_IHTMLWINDOW7_SCREENY = 1209_u32
  DISPID_IHTMLWINDOW7_OUTERWIDTH = 1210_u32
  DISPID_IHTMLWINDOW7_OUTERHEIGHT = 1211_u32
  DISPID_IHTMLWINDOW7_ONABORT = 71564_u32
  DISPID_IHTMLWINDOW7_ONCANPLAY = 71670_u32
  DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH = 71671_u32
  DISPID_IHTMLWINDOW7_ONCHANGE = 71566_u32
  DISPID_IHTMLWINDOW7_ONCLICK = 71544_u32
  DISPID_IHTMLWINDOW7_ONCONTEXTMENU = 71601_u32
  DISPID_IHTMLWINDOW7_ONDBLCLICK = 71545_u32
  DISPID_IHTMLWINDOW7_ONDRAG = 71585_u32
  DISPID_IHTMLWINDOW7_ONDRAGEND = 71586_u32
  DISPID_IHTMLWINDOW7_ONDRAGENTER = 71587_u32
  DISPID_IHTMLWINDOW7_ONDRAGLEAVE = 71589_u32
  DISPID_IHTMLWINDOW7_ONDRAGOVER = 71588_u32
  DISPID_IHTMLWINDOW7_ONDRAGSTART = 71571_u32
  DISPID_IHTMLWINDOW7_ONDROP = 71590_u32
  DISPID_IHTMLWINDOW7_ONDURATIONCHANGE = 71672_u32
  DISPID_IHTMLWINDOW7_ONFOCUSIN = 71627_u32
  DISPID_IHTMLWINDOW7_ONFOCUSOUT = 71628_u32
  DISPID_IHTMLWINDOW7_ONINPUT = 71663_u32
  DISPID_IHTMLWINDOW7_ONEMPTIED = 71673_u32
  DISPID_IHTMLWINDOW7_ONENDED = 71674_u32
  DISPID_IHTMLWINDOW7_ONKEYDOWN = 71541_u32
  DISPID_IHTMLWINDOW7_ONKEYPRESS = 71543_u32
  DISPID_IHTMLWINDOW7_ONKEYUP = 71542_u32
  DISPID_IHTMLWINDOW7_ONLOADEDDATA = 71675_u32
  DISPID_IHTMLWINDOW7_ONLOADEDMETADATA = 71676_u32
  DISPID_IHTMLWINDOW7_ONLOADSTART = 71677_u32
  DISPID_IHTMLWINDOW7_ONMOUSEDOWN = 71538_u32
  DISPID_IHTMLWINDOW7_ONMOUSEENTER = 71621_u32
  DISPID_IHTMLWINDOW7_ONMOUSELEAVE = 71622_u32
  DISPID_IHTMLWINDOW7_ONMOUSEMOVE = 71540_u32
  DISPID_IHTMLWINDOW7_ONMOUSEOUT = 71537_u32
  DISPID_IHTMLWINDOW7_ONMOUSEOVER = 71536_u32
  DISPID_IHTMLWINDOW7_ONMOUSEUP = 71539_u32
  DISPID_IHTMLWINDOW7_ONMOUSEWHEEL = 71612_u32
  DISPID_IHTMLWINDOW7_ONOFFLINE = 71644_u32
  DISPID_IHTMLWINDOW7_ONONLINE = 71643_u32
  DISPID_IHTMLWINDOW7_ONPROGRESS = 71681_u32
  DISPID_IHTMLWINDOW7_ONRATECHANGE = 71682_u32
  DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLWINDOW7_ONRESET = 71548_u32
  DISPID_IHTMLWINDOW7_ONSEEKED = 71683_u32
  DISPID_IHTMLWINDOW7_ONSEEKING = 71684_u32
  DISPID_IHTMLWINDOW7_ONSELECT = 71546_u32
  DISPID_IHTMLWINDOW7_ONSTALLED = 71685_u32
  DISPID_IHTMLWINDOW7_ONSTORAGE = 71636_u32
  DISPID_IHTMLWINDOW7_ONSUBMIT = 71547_u32
  DISPID_IHTMLWINDOW7_ONSUSPEND = 71686_u32
  DISPID_IHTMLWINDOW7_ONTIMEUPDATE = 71687_u32
  DISPID_IHTMLWINDOW7_ONPAUSE = 71678_u32
  DISPID_IHTMLWINDOW7_ONPLAY = 71679_u32
  DISPID_IHTMLWINDOW7_ONPLAYING = 71680_u32
  DISPID_IHTMLWINDOW7_ONVOLUMECHANGE = 71688_u32
  DISPID_IHTMLWINDOW7_ONWAITING = 71689_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN = 71690_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE = 71691_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTERUP = 71692_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTEROVER = 71693_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTEROUT = 71694_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL = 71695_u32
  DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER = 71696_u32
  DISPID_IHTMLWINDOW8_ONMSGESTURESTART = 71699_u32
  DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE = 71700_u32
  DISPID_IHTMLWINDOW8_ONMSGESTUREEND = 71701_u32
  DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD = 71702_u32
  DISPID_IHTMLWINDOW8_ONMSGESTURETAP = 71703_u32
  DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP = 71704_u32
  DISPID_IHTMLWINDOW8_ONMSINERTIASTART = 71705_u32
  DISPID_IHTMLWINDOW8_APPLICATIONCACHE = 1213_u32
  DISPID_IHTMLWINDOW8_ONPOPSTATE = 71728_u32
  DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE = 1066_u32
  DISPID_HTMLWINDOWEVENTS3_ONMESSAGE = 1067_u32
  DISPID_HTMLWINDOWEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = 1008_u32
  DISPID_HTMLWINDOWEVENTS2_ONHELP = 65546_u32
  DISPID_HTMLWINDOWEVENTS2_ONFOCUS = 65537_u32
  DISPID_HTMLWINDOWEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLWINDOWEVENTS2_ONRESIZE = 1016_u32
  DISPID_HTMLWINDOWEVENTS2_ONSCROLL = 1014_u32
  DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = 1017_u32
  DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = 1024_u32
  DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = 1025_u32
  DISPID_HTMLWINDOWEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 1008_u32
  DISPID_HTMLWINDOWEVENTS_ONHELP = 65546_u32
  DISPID_HTMLWINDOWEVENTS_ONFOCUS = 65537_u32
  DISPID_HTMLWINDOWEVENTS_ONERROR = 1002_u32
  DISPID_HTMLWINDOWEVENTS_ONRESIZE = 1016_u32
  DISPID_HTMLWINDOWEVENTS_ONSCROLL = 1014_u32
  DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 1017_u32
  DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = 1024_u32
  DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = 1025_u32
  DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT = 1001_u32
  DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION = 1002_u32
  DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDOCUMENT_SCRIPT = 1001_u32
  DISPID_IHTMLDOCUMENT2_ALL = 1003_u32
  DISPID_IHTMLDOCUMENT2_BODY = 1004_u32
  DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 1005_u32
  DISPID_IHTMLDOCUMENT2_IMAGES = 1011_u32
  DISPID_IHTMLDOCUMENT2_APPLETS = 1008_u32
  DISPID_IHTMLDOCUMENT2_LINKS = 1009_u32
  DISPID_IHTMLDOCUMENT2_FORMS = 1010_u32
  DISPID_IHTMLDOCUMENT2_ANCHORS = 1007_u32
  DISPID_IHTMLDOCUMENT2_TITLE = 1012_u32
  DISPID_IHTMLDOCUMENT2_SCRIPTS = 1013_u32
  DISPID_IHTMLDOCUMENT2_DESIGNMODE = 1014_u32
  DISPID_IHTMLDOCUMENT2_SELECTION = 1017_u32
  DISPID_IHTMLDOCUMENT2_READYSTATE = 1018_u32
  DISPID_IHTMLDOCUMENT2_FRAMES = 1019_u32
  DISPID_IHTMLDOCUMENT2_EMBEDS = 1015_u32
  DISPID_IHTMLDOCUMENT2_PLUGINS = 1021_u32
  DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 1022_u32
  DISPID_IHTMLDOCUMENT2_BGCOLOR = -501_i32
  DISPID_IHTMLDOCUMENT2_FGCOLOR = 70538_u32
  DISPID_IHTMLDOCUMENT2_LINKCOLOR = 1024_u32
  DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 1023_u32
  DISPID_IHTMLDOCUMENT2_REFERRER = 1027_u32
  DISPID_IHTMLDOCUMENT2_LOCATION = 1026_u32
  DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 1028_u32
  DISPID_IHTMLDOCUMENT2_URL = 1025_u32
  DISPID_IHTMLDOCUMENT2_DOMAIN = 1029_u32
  DISPID_IHTMLDOCUMENT2_COOKIE = 1030_u32
  DISPID_IHTMLDOCUMENT2_EXPANDO = 1031_u32
  DISPID_IHTMLDOCUMENT2_CHARSET = 1032_u32
  DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 1033_u32
  DISPID_IHTMLDOCUMENT2_MIMETYPE = 1041_u32
  DISPID_IHTMLDOCUMENT2_FILESIZE = 1042_u32
  DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 1043_u32
  DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 1044_u32
  DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 1045_u32
  DISPID_IHTMLDOCUMENT2_SECURITY = 1046_u32
  DISPID_IHTMLDOCUMENT2_PROTOCOL = 1047_u32
  DISPID_IHTMLDOCUMENT2_NAMEPROP = 1048_u32
  DISPID_IHTMLDOCUMENT2_WRITE = 1054_u32
  DISPID_IHTMLDOCUMENT2_WRITELN = 1055_u32
  DISPID_IHTMLDOCUMENT2_OPEN = 1056_u32
  DISPID_IHTMLDOCUMENT2_CLOSE = 1057_u32
  DISPID_IHTMLDOCUMENT2_CLEAR = 1058_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 1059_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 1060_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 1061_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 1062_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 1063_u32
  DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 1064_u32
  DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 1065_u32
  DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 1066_u32
  DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 1067_u32
  DISPID_IHTMLDOCUMENT2_ONHELP = 71549_u32
  DISPID_IHTMLDOCUMENT2_ONCLICK = 71544_u32
  DISPID_IHTMLDOCUMENT2_ONDBLCLICK = 71545_u32
  DISPID_IHTMLDOCUMENT2_ONKEYUP = 71542_u32
  DISPID_IHTMLDOCUMENT2_ONKEYDOWN = 71541_u32
  DISPID_IHTMLDOCUMENT2_ONKEYPRESS = 71543_u32
  DISPID_IHTMLDOCUMENT2_ONMOUSEUP = 71539_u32
  DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = 71538_u32
  DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = 71540_u32
  DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = 71537_u32
  DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = 71536_u32
  DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = 71558_u32
  DISPID_IHTMLDOCUMENT2_ONROWEXIT = 71554_u32
  DISPID_IHTMLDOCUMENT2_ONROWENTER = 71555_u32
  DISPID_IHTMLDOCUMENT2_ONDRAGSTART = 71571_u32
  DISPID_IHTMLDOCUMENT2_ONSELECTSTART = 71573_u32
  DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 1068_u32
  DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 1034_u32
  DISPID_IHTMLDOCUMENT2_STYLESHEETS = 1069_u32
  DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = 71557_u32
  DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = 71574_u32
  DISPID_IHTMLDOCUMENT2_TOSTRING = 1070_u32
  DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 1071_u32
  DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = 1072_u32
  DISPID_IHTMLDOCUMENT3_RECALC = 1073_u32
  DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = 1074_u32
  DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = 1075_u32
  DISPID_IHTMLDOCUMENT3_UNIQUEID = 1077_u32
  DISPID_IHTMLDOCUMENT3_ATTACHEVENT = 66043_u32
  DISPID_IHTMLDOCUMENT3_DETACHEVENT = 66044_u32
  DISPID_IHTMLDOCUMENT3_ONROWSDELETE = 71598_u32
  DISPID_IHTMLDOCUMENT3_ONROWSINSERTED = 71599_u32
  DISPID_IHTMLDOCUMENT3_ONCELLCHANGE = 71600_u32
  DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED = 71576_u32
  DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE = 71577_u32
  DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE = 71578_u32
  DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE = 71583_u32
  DISPID_IHTMLDOCUMENT3_DIR = 70653_u32
  DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU = 71601_u32
  DISPID_IHTMLDOCUMENT3_ONSTOP = 71604_u32
  DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = 1076_u32
  DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = 1078_u32
  DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = 1079_u32
  DISPID_IHTMLDOCUMENT3_BASEURL = 1080_u32
  DISPID_IHTMLDOCUMENT3_CHILDNODES = 66585_u32
  DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = 1082_u32
  DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS = 71605_u32
  DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = 1086_u32
  DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = 1088_u32
  DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = 1087_u32
  DISPID_IHTMLDOCUMENT4_FOCUS = 1089_u32
  DISPID_IHTMLDOCUMENT4_HASFOCUS = 1090_u32
  DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = 71616_u32
  DISPID_IHTMLDOCUMENT4_NAMESPACES = 1091_u32
  DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = 1092_u32
  DISPID_IHTMLDOCUMENT4_MEDIA = 1093_u32
  DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = 1094_u32
  DISPID_IHTMLDOCUMENT4_FIREEVENT = 1095_u32
  DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = 1096_u32
  DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = 71615_u32
  DISPID_IHTMLDOCUMENT4_URLUNENCODED = 1097_u32
  DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = 71612_u32
  DISPID_IHTMLDOCUMENT5_DOCTYPE = 1098_u32
  DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = 1099_u32
  DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = 1100_u32
  DISPID_IHTMLDOCUMENT5_CREATECOMMENT = 1101_u32
  DISPID_IHTMLDOCUMENT5_ONFOCUSIN = 71627_u32
  DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = 71628_u32
  DISPID_IHTMLDOCUMENT5_ONACTIVATE = 71623_u32
  DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = 71624_u32
  DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = 71626_u32
  DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = 71613_u32
  DISPID_IHTMLDOCUMENT5_COMPATMODE = 1102_u32
  DISPID_IHTMLDOCUMENT6_COMPATIBLE = 1103_u32
  DISPID_IHTMLDOCUMENT6_DOCUMENTMODE = 1104_u32
  DISPID_IHTMLDOCUMENT6_ONSTORAGE = 71636_u32
  DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT = 71637_u32
  DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID = 1107_u32
  DISPID_IHTMLDOCUMENT6_UPDATESETTINGS = 1109_u32
  DISPID_IHTMLDOCUMENT7_DEFAULTVIEW = 1110_u32
  DISPID_IHTMLDOCUMENT7_CREATECDATASECTION = 1123_u32
  DISPID_IHTMLDOCUMENT7_GETSELECTION = 1112_u32
  DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS = 1113_u32
  DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS = 1114_u32
  DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS = 1115_u32
  DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK = 71657_u32
  DISPID_IHTMLDOCUMENT7_CHARACTERSET = 1117_u32
  DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT = 1118_u32
  DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE = 1119_u32
  DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME = 1120_u32
  DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION = 1124_u32
  DISPID_IHTMLDOCUMENT7_ADOPTNODE = 1125_u32
  DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666_u32
  DISPID_IHTMLDOCUMENT7_IE9_ALL = 1126_u32
  DISPID_IHTMLDOCUMENT7_INPUTENCODING = 1127_u32
  DISPID_IHTMLDOCUMENT7_XMLENCODING = 1128_u32
  DISPID_IHTMLDOCUMENT7_XMLSTANDALONE = 1129_u32
  DISPID_IHTMLDOCUMENT7_XMLVERSION = 1130_u32
  DISPID_IHTMLDOCUMENT7_HASATTRIBUTES = 1132_u32
  DISPID_IHTMLDOCUMENT7_ONABORT = 71564_u32
  DISPID_IHTMLDOCUMENT7_ONBLUR = 71551_u32
  DISPID_IHTMLDOCUMENT7_ONCANPLAY = 71670_u32
  DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH = 71671_u32
  DISPID_IHTMLDOCUMENT7_ONCHANGE = 71566_u32
  DISPID_IHTMLDOCUMENT7_ONDRAG = 71585_u32
  DISPID_IHTMLDOCUMENT7_ONDRAGEND = 71586_u32
  DISPID_IHTMLDOCUMENT7_ONDRAGENTER = 71587_u32
  DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE = 71589_u32
  DISPID_IHTMLDOCUMENT7_ONDRAGOVER = 71588_u32
  DISPID_IHTMLDOCUMENT7_ONDROP = 71590_u32
  DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE = 71672_u32
  DISPID_IHTMLDOCUMENT7_ONEMPTIED = 71673_u32
  DISPID_IHTMLDOCUMENT7_ONENDED = 71674_u32
  DISPID_IHTMLDOCUMENT7_ONERROR = 71565_u32
  DISPID_IHTMLDOCUMENT7_ONFOCUS = 71550_u32
  DISPID_IHTMLDOCUMENT7_ONINPUT = 71663_u32
  DISPID_IHTMLDOCUMENT7_ONLOAD = 71568_u32
  DISPID_IHTMLDOCUMENT7_ONLOADEDDATA = 71675_u32
  DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA = 71676_u32
  DISPID_IHTMLDOCUMENT7_ONLOADSTART = 71677_u32
  DISPID_IHTMLDOCUMENT7_ONPAUSE = 71678_u32
  DISPID_IHTMLDOCUMENT7_ONPLAY = 71679_u32
  DISPID_IHTMLDOCUMENT7_ONPLAYING = 71680_u32
  DISPID_IHTMLDOCUMENT7_ONPROGRESS = 71681_u32
  DISPID_IHTMLDOCUMENT7_ONRATECHANGE = 71682_u32
  DISPID_IHTMLDOCUMENT7_ONRESET = 71548_u32
  DISPID_IHTMLDOCUMENT7_ONSCROLL = 71567_u32
  DISPID_IHTMLDOCUMENT7_ONSEEKED = 71683_u32
  DISPID_IHTMLDOCUMENT7_ONSEEKING = 71684_u32
  DISPID_IHTMLDOCUMENT7_ONSELECT = 71546_u32
  DISPID_IHTMLDOCUMENT7_ONSTALLED = 71685_u32
  DISPID_IHTMLDOCUMENT7_ONSUBMIT = 71547_u32
  DISPID_IHTMLDOCUMENT7_ONSUSPEND = 71686_u32
  DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE = 71687_u32
  DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE = 71688_u32
  DISPID_IHTMLDOCUMENT7_ONWAITING = 71689_u32
  DISPID_IHTMLDOCUMENT7_NORMALIZE = 1134_u32
  DISPID_IHTMLDOCUMENT7_IMPORTNODE = 1135_u32
  DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW = 1136_u32
  DISPID_IHTMLDOCUMENT7_IE9_BODY = 1137_u32
  DISPID_IHTMLDOCUMENT7_HEAD = 1138_u32
  DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM = 71708_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN = 71690_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE = 71691_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP = 71692_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER = 71693_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT = 71694_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL = 71695_u32
  DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER = 71696_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART = 71699_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE = 71700_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND = 71701_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD = 71702_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP = 71703_u32
  DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP = 71704_u32
  DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART = 71705_u32
  DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT = 1139_u32
  DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT = 1140_u32
  DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED = 71714_u32
  DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF = 1141_u32
  DISPID_IDOCUMENTEVENT_CREATEEVENT = 1108_u32
  DISPID_IDOCUMENTRANGE_CREATERANGE = 1111_u32
  DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR = 1105_u32
  DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL = 1106_u32
  DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR = 1121_u32
  DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER = 1122_u32
  DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK = 71657_u32
  DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666_u32
  DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE = 1057_u32
  DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT = 1058_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONHELP = 65546_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = -600_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = -601_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = -602_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = -604_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = -603_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = -605_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = -606_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = -607_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT = 65545_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER = 65544_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = -609_i32
  DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT = 65542_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER = 65543_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART = 65547_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART = 65548_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE = 65549_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = 1023_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = 1026_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE = 65568_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED = 65569_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE = 65570_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE = 65555_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = 1027_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = 1037_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = 1036_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = 1033_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = 1048_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = 1049_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = 1044_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = 1045_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = 1047_u32
  DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_HTMLDOCUMENTEVENTS_ONHELP = 65546_u32
  DISPID_HTMLDOCUMENTEVENTS_ONCLICK = -600_i32
  DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = -601_i32
  DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = -602_i32
  DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = -604_i32
  DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = -603_i32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = -605_i32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = -606_i32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = -607_i32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = 65545_u32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = 65544_u32
  DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = -609_i32
  DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = 65542_u32
  DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = 65543_u32
  DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = 65547_u32
  DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = 65548_u32
  DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = 65549_u32
  DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = 1023_u32
  DISPID_HTMLDOCUMENTEVENTS_ONSTOP = 1026_u32
  DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE = 65568_u32
  DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED = 65569_u32
  DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE = 65570_u32
  DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE = 65555_u32
  DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = 1027_u32
  DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = 1037_u32
  DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = 1036_u32
  DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = 1033_u32
  DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = 1048_u32
  DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = 1049_u32
  DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = 1044_u32
  DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = 1045_u32
  DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = 1047_u32
  DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = 1034_u32
  DISPID_IWEBBRIDGE_URL = 1_u32
  DISPID_IWEBBRIDGE_SCROLLBAR = 2_u32
  DISPID_IWEBBRIDGE_EMBED = 3_u32
  DISPID_IWEBBRIDGE_EVENT = 1152_u32
  DISPID_IWEBBRIDGE_READYSTATE = -525_i32
  DISPID_IWEBBRIDGE_ABOUTBOX = -552_i32
  DISPID_IWBSCRIPTCONTROL_RAISEEVENT = 1_u32
  DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = 2_u32
  DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = 3_u32
  DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = 4_u32
  DISPID_IWBSCRIPTCONTROL_FROZEN = 5_u32
  DISPID_IWBSCRIPTCONTROL_SCROLLBAR = 7_u32
  DISPID_IWBSCRIPTCONTROL_VERSION = 8_u32
  DISPID_IWBSCRIPTCONTROL_VISIBILITY = 9_u32
  DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = 10_u32
  DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = 1_u32
  DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = -609_i32
  DISPID_DWEBBRIDGEEVENTS_ONCLICK = -600_i32
  DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = -601_i32
  DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = -602_i32
  DISPID_DWEBBRIDGEEVENTS_ONKEYUP = -604_i32
  DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = -603_i32
  DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = -605_i32
  DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = -606_i32
  DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = -607_i32
  DISPID_IHTMLEMBEDELEMENT_HIDDEN = 68546_u32
  DISPID_IHTMLEMBEDELEMENT_PALETTE = 68540_u32
  DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = 68541_u32
  DISPID_IHTMLEMBEDELEMENT_SRC = 68542_u32
  DISPID_IHTMLEMBEDELEMENT_UNITS = 68544_u32
  DISPID_IHTMLEMBEDELEMENT_NAME = 65536_u32
  DISPID_IHTMLEMBEDELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLEMBEDELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLEMBEDELEMENT2_IE8_SRC = 1150_u32
  DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE = 1151_u32
  DISPID_IHTMLAREASCOLLECTION_LENGTH = 1500_u32
  DISPID_IHTMLAREASCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLAREASCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLAREASCOLLECTION_TAGS = 1502_u32
  DISPID_IHTMLAREASCOLLECTION_ADD = 1503_u32
  DISPID_IHTMLAREASCOLLECTION_REMOVE = 1504_u32
  DISPID_IHTMLAREASCOLLECTION2_URNS = 1505_u32
  DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = 1506_u32
  DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH = 1150_u32
  DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM = 1152_u32
  DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM = 1153_u32
  DISPID_IHTMLMAPELEMENT_AREAS = 1002_u32
  DISPID_IHTMLMAPELEMENT_NAME = 65536_u32
  DISPID_IHTMLAREAELEMENT_SHAPE = 1001_u32
  DISPID_IHTMLAREAELEMENT_COORDS = 1002_u32
  DISPID_IHTMLAREAELEMENT_HREF = 0_u32
  DISPID_IHTMLAREAELEMENT_TARGET = 1004_u32
  DISPID_IHTMLAREAELEMENT_ALT = 1005_u32
  DISPID_IHTMLAREAELEMENT_NOHREF = 1006_u32
  DISPID_IHTMLAREAELEMENT_HOST = 1007_u32
  DISPID_IHTMLAREAELEMENT_HOSTNAME = 1008_u32
  DISPID_IHTMLAREAELEMENT_PATHNAME = 1009_u32
  DISPID_IHTMLAREAELEMENT_PORT = 1010_u32
  DISPID_IHTMLAREAELEMENT_PROTOCOL = 1011_u32
  DISPID_IHTMLAREAELEMENT_SEARCH = 1012_u32
  DISPID_IHTMLAREAELEMENT_HASH = 1013_u32
  DISPID_IHTMLAREAELEMENT_ONBLUR = 71551_u32
  DISPID_IHTMLAREAELEMENT_ONFOCUS = 71550_u32
  DISPID_IHTMLAREAELEMENT_TABINDEX = 65551_u32
  DISPID_IHTMLAREAELEMENT_FOCUS = 67536_u32
  DISPID_IHTMLAREAELEMENT_BLUR = 67538_u32
  DISPID_IHTMLAREAELEMENT2_IE8_SHAPE = 1151_u32
  DISPID_IHTMLAREAELEMENT2_IE8_COORDS = 1152_u32
  DISPID_IHTMLAREAELEMENT2_IE8_HREF = 1153_u32
  DISPID_IHTMLTABLECAPTION_ALIGN = 65608_u32
  DISPID_IHTMLTABLECAPTION_VALIGN = 70567_u32
  DISPID_IHTMLCOMMENTELEMENT_TEXT = 1001_u32
  DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 1002_u32
  DISPID_IHTMLCOMMENTELEMENT2_DATA = 1003_u32
  DISPID_IHTMLCOMMENTELEMENT2_LENGTH = 1004_u32
  DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = 1005_u32
  DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = 1006_u32
  DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = 1007_u32
  DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = 1008_u32
  DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = 1009_u32
  DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA = 1010_u32
  DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA = 1011_u32
  DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA = 1012_u32
  DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA = 1013_u32
  DISPID_IHTMLPHRASEELEMENT2_CITE = 1001_u32
  DISPID_IHTMLPHRASEELEMENT2_DATETIME = 1002_u32
  DISPID_IHTMLPHRASEELEMENT3_IE8_CITE = 1150_u32
  DISPID_IHTMLTABLE_COLS = 1001_u32
  DISPID_IHTMLTABLE_BORDER = 1002_u32
  DISPID_IHTMLTABLE_FRAME = 1004_u32
  DISPID_IHTMLTABLE_RULES = 1003_u32
  DISPID_IHTMLTABLE_CELLSPACING = 1005_u32
  DISPID_IHTMLTABLE_CELLPADDING = 1006_u32
  DISPID_IHTMLTABLE_BACKGROUND = 70537_u32
  DISPID_IHTMLTABLE_BGCOLOR = -501_i32
  DISPID_IHTMLTABLE_BORDERCOLOR = 70564_u32
  DISPID_IHTMLTABLE_BORDERCOLORLIGHT = 70565_u32
  DISPID_IHTMLTABLE_BORDERCOLORDARK = 70566_u32
  DISPID_IHTMLTABLE_ALIGN = 65609_u32
  DISPID_IHTMLTABLE_REFRESH = 1015_u32
  DISPID_IHTMLTABLE_ROWS = 1016_u32
  DISPID_IHTMLTABLE_WIDTH = 65541_u32
  DISPID_IHTMLTABLE_HEIGHT = 65542_u32
  DISPID_IHTMLTABLE_DATAPAGESIZE = 1017_u32
  DISPID_IHTMLTABLE_NEXTPAGE = 1018_u32
  DISPID_IHTMLTABLE_PREVIOUSPAGE = 1019_u32
  DISPID_IHTMLTABLE_THEAD = 1020_u32
  DISPID_IHTMLTABLE_TFOOT = 1021_u32
  DISPID_IHTMLTABLE_TBODIES = 1024_u32
  DISPID_IHTMLTABLE_CAPTION = 1025_u32
  DISPID_IHTMLTABLE_CREATETHEAD = 1026_u32
  DISPID_IHTMLTABLE_DELETETHEAD = 1027_u32
  DISPID_IHTMLTABLE_CREATETFOOT = 1028_u32
  DISPID_IHTMLTABLE_DELETETFOOT = 1029_u32
  DISPID_IHTMLTABLE_CREATECAPTION = 1030_u32
  DISPID_IHTMLTABLE_DELETECAPTION = 1031_u32
  DISPID_IHTMLTABLE_INSERTROW = 1032_u32
  DISPID_IHTMLTABLE_DELETEROW = 1033_u32
  DISPID_IHTMLTABLE_READYSTATE = 70652_u32
  DISPID_IHTMLTABLE_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLTABLE2_FIRSTPAGE = 1035_u32
  DISPID_IHTMLTABLE2_LASTPAGE = 1036_u32
  DISPID_IHTMLTABLE2_CELLS = 1037_u32
  DISPID_IHTMLTABLE2_MOVEROW = 1038_u32
  DISPID_IHTMLTABLE3_SUMMARY = 1039_u32
  DISPID_IHTMLTABLE4_IE9_THEAD = 1040_u32
  DISPID_IHTMLTABLE4_IE9_TFOOT = 1041_u32
  DISPID_IHTMLTABLE4_IE9_CAPTION = 1042_u32
  DISPID_IHTMLTABLE4_IE9_INSERTROW = 1043_u32
  DISPID_IHTMLTABLE4_IE9_DELETEROW = 1044_u32
  DISPID_IHTMLTABLE4_CREATETBODY = 1045_u32
  DISPID_IHTMLTABLECOL_SPAN = 1001_u32
  DISPID_IHTMLTABLECOL_WIDTH = 65541_u32
  DISPID_IHTMLTABLECOL_ALIGN = 65608_u32
  DISPID_IHTMLTABLECOL_VALIGN = 70567_u32
  DISPID_IHTMLTABLECOL2_CH = 1002_u32
  DISPID_IHTMLTABLECOL2_CHOFF = 1003_u32
  DISPID_IHTMLTABLECOL3_IE9_CH = 1004_u32
  DISPID_IHTMLTABLECOL3_IE9_CHOFF = 1005_u32
  DISPID_IHTMLTABLESECTION_ALIGN = 65608_u32
  DISPID_IHTMLTABLESECTION_VALIGN = 70567_u32
  DISPID_IHTMLTABLESECTION_BGCOLOR = -501_i32
  DISPID_IHTMLTABLESECTION_ROWS = 1000_u32
  DISPID_IHTMLTABLESECTION_INSERTROW = 1001_u32
  DISPID_IHTMLTABLESECTION_DELETEROW = 1002_u32
  DISPID_IHTMLTABLESECTION2_MOVEROW = 1003_u32
  DISPID_IHTMLTABLESECTION3_CH = 1004_u32
  DISPID_IHTMLTABLESECTION3_CHOFF = 1005_u32
  DISPID_IHTMLTABLESECTION4_IE9_CH = 1006_u32
  DISPID_IHTMLTABLESECTION4_IE9_CHOFF = 1007_u32
  DISPID_IHTMLTABLESECTION4_IE9_INSERTROW = 1008_u32
  DISPID_IHTMLTABLESECTION4_IE9_DELETEROW = 1009_u32
  DISPID_IHTMLTABLEROW_ALIGN = 65608_u32
  DISPID_IHTMLTABLEROW_VALIGN = 70567_u32
  DISPID_IHTMLTABLEROW_BGCOLOR = -501_i32
  DISPID_IHTMLTABLEROW_BORDERCOLOR = 70564_u32
  DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = 70565_u32
  DISPID_IHTMLTABLEROW_BORDERCOLORDARK = 70566_u32
  DISPID_IHTMLTABLEROW_ROWINDEX = 1000_u32
  DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 1001_u32
  DISPID_IHTMLTABLEROW_CELLS = 1002_u32
  DISPID_IHTMLTABLEROW_INSERTCELL = 1003_u32
  DISPID_IHTMLTABLEROW_DELETECELL = 1004_u32
  DISPID_IHTMLTABLEROW2_HEIGHT = 65542_u32
  DISPID_IHTMLTABLEROW3_CH = 1009_u32
  DISPID_IHTMLTABLEROW3_CHOFF = 1010_u32
  DISPID_IHTMLTABLEROW4_IE9_CH = 1011_u32
  DISPID_IHTMLTABLEROW4_IE9_CHOFF = 1012_u32
  DISPID_IHTMLTABLEROW4_IE9_INSERTCELL = 1013_u32
  DISPID_IHTMLTABLEROW4_IE9_DELETECELL = 1014_u32
  DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = 67555_u32
  DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = 67556_u32
  DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = 67557_u32
  DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = 67558_u32
  DISPID_IHTMLTABLECELL_ROWSPAN = 2001_u32
  DISPID_IHTMLTABLECELL_COLSPAN = 2002_u32
  DISPID_IHTMLTABLECELL_ALIGN = 65608_u32
  DISPID_IHTMLTABLECELL_VALIGN = 70567_u32
  DISPID_IHTMLTABLECELL_BGCOLOR = -501_i32
  DISPID_IHTMLTABLECELL_NOWRAP = 70541_u32
  DISPID_IHTMLTABLECELL_BACKGROUND = 70537_u32
  DISPID_IHTMLTABLECELL_BORDERCOLOR = 70564_u32
  DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = 70565_u32
  DISPID_IHTMLTABLECELL_BORDERCOLORDARK = 70566_u32
  DISPID_IHTMLTABLECELL_WIDTH = 65541_u32
  DISPID_IHTMLTABLECELL_HEIGHT = 65542_u32
  DISPID_IHTMLTABLECELL_CELLINDEX = 2003_u32
  DISPID_IHTMLTABLECELL2_ABBR = 2004_u32
  DISPID_IHTMLTABLECELL2_AXIS = 2005_u32
  DISPID_IHTMLTABLECELL2_CH = 2006_u32
  DISPID_IHTMLTABLECELL2_CHOFF = 2007_u32
  DISPID_IHTMLTABLECELL2_HEADERS = 2008_u32
  DISPID_IHTMLTABLECELL2_SCOPE = 2009_u32
  DISPID_IHTMLTABLECELL3_IE9_CH = 2010_u32
  DISPID_IHTMLTABLECELL3_IE9_CHOFF = 2011_u32
  DISPID_IHTMLSCRIPTELEMENT_SRC = 1001_u32
  DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 1004_u32
  DISPID_IHTMLSCRIPTELEMENT_EVENT = 1005_u32
  DISPID_IHTMLSCRIPTELEMENT_TEXT = 1006_u32
  DISPID_IHTMLSCRIPTELEMENT_DEFER = 1007_u32
  DISPID_IHTMLSCRIPTELEMENT_READYSTATE = 70652_u32
  DISPID_IHTMLSCRIPTELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLSCRIPTELEMENT_TYPE = 1009_u32
  DISPID_IHTMLSCRIPTELEMENT2_CHARSET = 1010_u32
  DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC = 1150_u32
  DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET = 1011_u32
  DISPID_HTMLSCRIPTEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLSCRIPTEVENTS_ONERROR = 1002_u32
  DISPID_IHTMLOBJECTELEMENT_OBJECT = 68537_u32
  DISPID_IHTMLOBJECTELEMENT_CLASSID = 68538_u32
  DISPID_IHTMLOBJECTELEMENT_DATA = 68539_u32
  DISPID_IHTMLOBJECTELEMENT_RECORDSET = 68541_u32
  DISPID_IHTMLOBJECTELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLOBJECTELEMENT_NAME = 65536_u32
  DISPID_IHTMLOBJECTELEMENT_CODEBASE = 68542_u32
  DISPID_IHTMLOBJECTELEMENT_CODETYPE = 68543_u32
  DISPID_IHTMLOBJECTELEMENT_CODE = 68544_u32
  DISPID_IHTMLOBJECTELEMENT_BASEHREF = 65538_u32
  DISPID_IHTMLOBJECTELEMENT_TYPE = 68545_u32
  DISPID_IHTMLOBJECTELEMENT_FORM = 67540_u32
  DISPID_IHTMLOBJECTELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLOBJECTELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLOBJECTELEMENT_READYSTATE = 68546_u32
  DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLOBJECTELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLOBJECTELEMENT_ALTHTML = 68547_u32
  DISPID_IHTMLOBJECTELEMENT_VSPACE = 68548_u32
  DISPID_IHTMLOBJECTELEMENT_HSPACE = 68549_u32
  DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET = 68550_u32
  DISPID_IHTMLOBJECTELEMENT2_CLASSID = 68538_u32
  DISPID_IHTMLOBJECTELEMENT2_DATA = 68539_u32
  DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = 68551_u32
  DISPID_IHTMLOBJECTELEMENT3_ALT = 68552_u32
  DISPID_IHTMLOBJECTELEMENT3_DECLARE = 68553_u32
  DISPID_IHTMLOBJECTELEMENT3_STANDBY = 68554_u32
  DISPID_IHTMLOBJECTELEMENT3_BORDER = 68555_u32
  DISPID_IHTMLOBJECTELEMENT3_USEMAP = 68556_u32
  DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT = 68566_u32
  DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE = 68567_u32
  DISPID_IHTMLOBJECTELEMENT4_IE8_DATA = 68568_u32
  DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT = 68569_u32
  DISPID_IHTMLPARAMELEMENT_NAME = 1001_u32
  DISPID_IHTMLPARAMELEMENT_VALUE = 1002_u32
  DISPID_IHTMLPARAMELEMENT_TYPE = 1003_u32
  DISPID_IHTMLPARAMELEMENT_VALUETYPE = 1004_u32
  DISPID_IHTMLPARAMELEMENT2_NAME = 1001_u32
  DISPID_IHTMLPARAMELEMENT2_TYPE = 1003_u32
  DISPID_IHTMLPARAMELEMENT2_VALUE = 1002_u32
  DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE = 1150_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE = 65549_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT = 65542_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER = 65543_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR = 65555_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE = 65568_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED = 65569_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE = 65570_u32
  DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE = 65556_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = 65540_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = 65541_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = 65549_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = 65542_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = 65543_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = 65550_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = 65551_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = 65552_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = 65555_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE = 65568_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED = 65569_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE = 65570_u32
  DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = 65556_u32
  DISPID_IHTMLFRAMEBASE_SRC = 68536_u32
  DISPID_IHTMLFRAMEBASE_NAME = 65536_u32
  DISPID_IHTMLFRAMEBASE_BORDER = 68538_u32
  DISPID_IHTMLFRAMEBASE_FRAMEBORDER = 68539_u32
  DISPID_IHTMLFRAMEBASE_FRAMESPACING = 68540_u32
  DISPID_IHTMLFRAMEBASE_MARGINWIDTH = 68541_u32
  DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = 68542_u32
  DISPID_IHTMLFRAMEBASE_NORESIZE = 68543_u32
  DISPID_IHTMLFRAMEBASE_SCROLLING = 68544_u32
  DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = 68545_u32
  DISPID_IHTMLFRAMEBASE2_ONLOAD = 71568_u32
  DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLFRAMEBASE2_READYSTATE = 70652_u32
  DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = 70742_u32
  DISPID_IHTMLFRAMEBASE3_LONGDESC = 68546_u32
  DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLFRAMESITEEVENTS_ONLOAD = 1003_u32
  DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = 69537_u32
  DISPID_IHTMLFRAMEELEMENT2_HEIGHT = 65542_u32
  DISPID_IHTMLFRAMEELEMENT2_WIDTH = 65541_u32
  DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT = 69656_u32
  DISPID_IHTMLFRAMEELEMENT3_IE8_SRC = 69657_u32
  DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC = 69658_u32
  DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER = 69659_u32
  DISPID_IHTMLIFRAMEELEMENT_VSPACE = 69537_u32
  DISPID_IHTMLIFRAMEELEMENT_HSPACE = 69538_u32
  DISPID_IHTMLIFRAMEELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLIFRAMEELEMENT2_HEIGHT = 65542_u32
  DISPID_IHTMLIFRAMEELEMENT2_WIDTH = 65541_u32
  DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT = 69656_u32
  DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC = 69657_u32
  DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC = 69658_u32
  DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER = 69659_u32
  DISPID_IHTMLDIVPOSITION_ALIGN = 65609_u32
  DISPID_IHTMLFIELDSETELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLFIELDSETELEMENT2_FORM = 67540_u32
  DISPID_IHTMLLEGENDELEMENT_ALIGN = 65609_u32
  DISPID_IHTMLLEGENDELEMENT2_FORM = 67540_u32
  DISPID_IHTMLSPANFLOW_ALIGN = 65609_u32
  DISPID_IHTMLFRAMESETELEMENT_ROWS = 1000_u32
  DISPID_IHTMLFRAMESETELEMENT_COLS = 1001_u32
  DISPID_IHTMLFRAMESETELEMENT_BORDER = 1002_u32
  DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 1003_u32
  DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 1004_u32
  DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 1005_u32
  DISPID_IHTMLFRAMESETELEMENT_NAME = 65536_u32
  DISPID_IHTMLFRAMESETELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = 71569_u32
  DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = 71575_u32
  DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT = 71602_u32
  DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT = 71603_u32
  DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE = 71645_u32
  DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE = 71646_u32
  DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE = 71644_u32
  DISPID_IHTMLFRAMESETELEMENT3_ONONLINE = 71643_u32
  DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE = 71636_u32
  DISPID_IHTMLBGSOUND_SRC = 1001_u32
  DISPID_IHTMLBGSOUND_LOOP = 1002_u32
  DISPID_IHTMLBGSOUND_VOLUME = 1003_u32
  DISPID_IHTMLBGSOUND_BALANCE = 1004_u32
  DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 1501_u32
  DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 1502_u32
  DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 1503_u32
  DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 1503_u32
  DISPID_IHTMLOPTIONSHOLDER_FONTS = 1504_u32
  DISPID_IHTMLOPTIONSHOLDER_EXECARG = 1505_u32
  DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 1506_u32
  DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 1507_u32
  DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 1508_u32
  DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 1509_u32
  DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 1510_u32
  DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 1511_u32
  DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 1512_u32
  DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 1513_u32
  DISPID_IHTMLOPTIONSHOLDER_SIZES = 1514_u32
  DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 1515_u32
  DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 1516_u32
  DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 1517_u32
  DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 1518_u32
  DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 1519_u32
  DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 1520_u32
  DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = 1521_u32
  DISPID_IHTMLSTYLEELEMENT_TYPE = 1002_u32
  DISPID_IHTMLSTYLEELEMENT_READYSTATE = 70652_u32
  DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLSTYLEELEMENT_ONLOAD = 71568_u32
  DISPID_IHTMLSTYLEELEMENT_ONERROR = 71565_u32
  DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 1004_u32
  DISPID_IHTMLSTYLEELEMENT_DISABLED = 65612_u32
  DISPID_IHTMLSTYLEELEMENT_MEDIA = 1006_u32
  DISPID_IHTMLSTYLEELEMENT2_SHEET = 1007_u32
  DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = 1003_u32
  DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = 1002_u32
  DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 1003_u32
  DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 1002_u32
  DISPID_IHTMLSTYLEFONTFACE_FONTSRC = 70633_u32
  DISPID_IHTMLSTYLEFONTFACE2_STYLE = 65610_u32
  DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT = 1003_u32
  DISPID_IHTMLXDOMAINREQUEST_TIMEOUT = 1004_u32
  DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE = 1005_u32
  DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS = 1006_u32
  DISPID_IHTMLXDOMAINREQUEST_ONERROR = 71565_u32
  DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT = 71648_u32
  DISPID_IHTMLXDOMAINREQUEST_ONLOAD = 71568_u32
  DISPID_IHTMLXDOMAINREQUEST_ABORT = 1010_u32
  DISPID_IHTMLXDOMAINREQUEST_OPEN = 1011_u32
  DISPID_IHTMLXDOMAINREQUEST_SEND = 1012_u32
  DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE = 0_u32
  DISPID_IHTMLSTORAGE_LENGTH = 1001_u32
  DISPID_IHTMLSTORAGE_REMAININGSPACE = 1002_u32
  DISPID_IHTMLSTORAGE_KEY = 1006_u32
  DISPID_IHTMLSTORAGE_GETITEM = 1003_u32
  DISPID_IHTMLSTORAGE_SETITEM = 1004_u32
  DISPID_IHTMLSTORAGE_REMOVEITEM = 1005_u32
  DISPID_IHTMLSTORAGE_CLEAR = 1007_u32
  DISPID_IHTMLSTORAGE2_IE9_SETITEM = 1008_u32
  DISPID_IEVENTTARGET_ADDEVENTLISTENER = 66046_u32
  DISPID_IEVENTTARGET_REMOVEEVENTLISTENER = 66047_u32
  DISPID_IEVENTTARGET_DISPATCHEVENT = 66048_u32
  DISPID_IDOMEVENT_BUBBLES = 1001_u32
  DISPID_IDOMEVENT_CANCELABLE = 1002_u32
  DISPID_IDOMEVENT_CURRENTTARGET = 1003_u32
  DISPID_IDOMEVENT_DEFAULTPREVENTED = 1004_u32
  DISPID_IDOMEVENT_EVENTPHASE = 1005_u32
  DISPID_IDOMEVENT_TARGET = 1006_u32
  DISPID_IDOMEVENT_TIMESTAMP = 1007_u32
  DISPID_IDOMEVENT_TYPE = 1008_u32
  DISPID_IDOMEVENT_INITEVENT = 1009_u32
  DISPID_IDOMEVENT_PREVENTDEFAULT = 1010_u32
  DISPID_IDOMEVENT_STOPPROPAGATION = 1011_u32
  DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION = 1012_u32
  DISPID_IDOMEVENT_ISTRUSTED = 1013_u32
  DISPID_IDOMEVENT_CANCELBUBBLE = 1014_u32
  DISPID_IDOMEVENT_SRCELEMENT = 1015_u32
  DISPID_IDOMUIEVENT_VIEW = 1026_u32
  DISPID_IDOMUIEVENT_DETAIL = 1027_u32
  DISPID_IDOMUIEVENT_INITUIEVENT = 1028_u32
  DISPID_IDOMMOUSEEVENT_SCREENX = 1051_u32
  DISPID_IDOMMOUSEEVENT_SCREENY = 1052_u32
  DISPID_IDOMMOUSEEVENT_CLIENTX = 1053_u32
  DISPID_IDOMMOUSEEVENT_CLIENTY = 1054_u32
  DISPID_IDOMMOUSEEVENT_CTRLKEY = 1055_u32
  DISPID_IDOMMOUSEEVENT_SHIFTKEY = 1056_u32
  DISPID_IDOMMOUSEEVENT_ALTKEY = 1057_u32
  DISPID_IDOMMOUSEEVENT_METAKEY = 1058_u32
  DISPID_IDOMMOUSEEVENT_BUTTON = 1059_u32
  DISPID_IDOMMOUSEEVENT_RELATEDTARGET = 1060_u32
  DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT = 1061_u32
  DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE = 1062_u32
  DISPID_IDOMMOUSEEVENT_BUTTONS = 1063_u32
  DISPID_IDOMMOUSEEVENT_FROMELEMENT = 1064_u32
  DISPID_IDOMMOUSEEVENT_TOELEMENT = 1065_u32
  DISPID_IDOMMOUSEEVENT_X = 1066_u32
  DISPID_IDOMMOUSEEVENT_Y = 1067_u32
  DISPID_IDOMMOUSEEVENT_OFFSETX = 1068_u32
  DISPID_IDOMMOUSEEVENT_OFFSETY = 1069_u32
  DISPID_IDOMMOUSEEVENT_PAGEX = 1070_u32
  DISPID_IDOMMOUSEEVENT_PAGEY = 1071_u32
  DISPID_IDOMMOUSEEVENT_LAYERX = 1072_u32
  DISPID_IDOMMOUSEEVENT_LAYERY = 1073_u32
  DISPID_IDOMMOUSEEVENT_WHICH = 1074_u32
  DISPID_IDOMDRAGEVENT_DATATRANSFER = 1401_u32
  DISPID_IDOMDRAGEVENT_INITDRAGEVENT = 1402_u32
  DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA = 1076_u32
  DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT = 1077_u32
  DISPID_IDOMWHEELEVENT_DELTAX = 1101_u32
  DISPID_IDOMWHEELEVENT_DELTAY = 1102_u32
  DISPID_IDOMWHEELEVENT_DELTAZ = 1103_u32
  DISPID_IDOMWHEELEVENT_DELTAMODE = 1104_u32
  DISPID_IDOMWHEELEVENT_INITWHEELEVENT = 1105_u32
  DISPID_IDOMTEXTEVENT_DATA = 1126_u32
  DISPID_IDOMTEXTEVENT_INPUTMETHOD = 1127_u32
  DISPID_IDOMTEXTEVENT_INITTEXTEVENT = 1128_u32
  DISPID_IDOMTEXTEVENT_LOCALE = 1129_u32
  DISPID_IDOMKEYBOARDEVENT_KEY = 1151_u32
  DISPID_IDOMKEYBOARDEVENT_LOCATION = 1152_u32
  DISPID_IDOMKEYBOARDEVENT_CTRLKEY = 1153_u32
  DISPID_IDOMKEYBOARDEVENT_SHIFTKEY = 1154_u32
  DISPID_IDOMKEYBOARDEVENT_ALTKEY = 1155_u32
  DISPID_IDOMKEYBOARDEVENT_METAKEY = 1156_u32
  DISPID_IDOMKEYBOARDEVENT_REPEAT = 1157_u32
  DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE = 1158_u32
  DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT = 1159_u32
  DISPID_IDOMKEYBOARDEVENT_KEYCODE = 1160_u32
  DISPID_IDOMKEYBOARDEVENT_CHARCODE = 1161_u32
  DISPID_IDOMKEYBOARDEVENT_WHICH = 1162_u32
  DISPID_IDOMKEYBOARDEVENT_IE9_CHAR = 1163_u32
  DISPID_IDOMKEYBOARDEVENT_LOCALE = 1164_u32
  DISPID_IDOMCOMPOSITIONEVENT_DATA = 1176_u32
  DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT = 1177_u32
  DISPID_IDOMCOMPOSITIONEVENT_LOCALE = 1178_u32
  DISPID_IDOMMUTATIONEVENT_RELATEDNODE = 1226_u32
  DISPID_IDOMMUTATIONEVENT_PREVVALUE = 1227_u32
  DISPID_IDOMMUTATIONEVENT_NEWVALUE = 1228_u32
  DISPID_IDOMMUTATIONEVENT_ATTRNAME = 1229_u32
  DISPID_IDOMMUTATIONEVENT_ATTRCHANGE = 1230_u32
  DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT = 1231_u32
  DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE = 1376_u32
  DISPID_IDOMFOCUSEVENT_RELATEDTARGET = 1251_u32
  DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT = 1252_u32
  DISPID_IDOMCUSTOMEVENT_DETAIL = 1201_u32
  DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT = 1202_u32
  DISPID_ICANVASGRADIENT_ADDCOLORSTOP = 1000_u32
  DISPID_ICANVASTEXTMETRICS_WIDTH = 1000_u32
  DISPID_ICANVASIMAGEDATA_WIDTH = 1000_u32
  DISPID_ICANVASIMAGEDATA_HEIGHT = 1001_u32
  DISPID_ICANVASIMAGEDATA_DATA = 1002_u32
  DISPID_ICANVASPIXELARRAY_LENGTH = 1000_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS = 1000_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE = 1001_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SAVE = 1002_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE = 1003_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SCALE = 1004_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM = 1005_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM = 1006_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE = 1007_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA = 1008_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION = 1009_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE = 1010_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE = 1011_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT = 1012_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT = 1013_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN = 1014_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP = 1015_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN = 1016_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH = 1017_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT = 1018_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR = 1019_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR = 1020_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX = 1021_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY = 1022_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT = 1023_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT = 1024_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT = 1025_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_ARC = 1026_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO = 1027_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH = 1028_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO = 1029_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CLIP = 1030_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH = 1031_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_FILL = 1032_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_LINETO = 1033_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO = 1034_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO = 1035_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_RECT = 1036_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_STROKE = 1037_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH = 1038_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_FONT = 1039_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN = 1040_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE = 1041_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT = 1042_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT = 1043_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT = 1044_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE = 1045_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA = 1046_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA = 1047_u32
  DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA = 1048_u32
  DISPID_IHTMLCANVASELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLCANVASELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLCANVASELEMENT_GETCONTEXT = 1001_u32
  DISPID_IHTMLCANVASELEMENT_TODATAURL = 1002_u32
  DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE = 1551_u32
  DISPID_IDOMPROGRESSEVENT_LOADED = 1552_u32
  DISPID_IDOMPROGRESSEVENT_TOTAL = 1553_u32
  DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT = 1554_u32
  DISPID_IDOMMESSAGEEVENT_DATA = 1326_u32
  DISPID_IDOMMESSAGEEVENT_ORIGIN = 1327_u32
  DISPID_IDOMMESSAGEEVENT_SOURCE = 1328_u32
  DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT = 1329_u32
  DISPID_IDOMSITEMODEEVENT_BUTTONID = 1301_u32
  DISPID_IDOMSITEMODEEVENT_ACTIONURL = 1302_u32
  DISPID_IDOMSTORAGEEVENT_KEY = 1351_u32
  DISPID_IDOMSTORAGEEVENT_OLDVALUE = 1352_u32
  DISPID_IDOMSTORAGEEVENT_NEWVALUE = 1353_u32
  DISPID_IDOMSTORAGEEVENT_URL = 1354_u32
  DISPID_IDOMSTORAGEEVENT_STORAGEAREA = 1355_u32
  DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT = 1356_u32
  DISPID_IHTMLXMLHTTPREQUEST_READYSTATE = 1002_u32
  DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY = 1003_u32
  DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT = 1004_u32
  DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML = 1005_u32
  DISPID_IHTMLXMLHTTPREQUEST_STATUS = 1006_u32
  DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT = 1007_u32
  DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLXMLHTTPREQUEST_ABORT = 1009_u32
  DISPID_IHTMLXMLHTTPREQUEST_OPEN = 1010_u32
  DISPID_IHTMLXMLHTTPREQUEST_SEND = 1011_u32
  DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS = 1012_u32
  DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER = 1013_u32
  DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER = 1014_u32
  DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT = 1015_u32
  DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT = 71648_u32
  DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE = 0_u32
  DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT = 1016_u32
  DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE = 1008_u32
  DISPID_ISVGANGLE_UNITTYPE = 1000_u32
  DISPID_ISVGANGLE_VALUE = 1001_u32
  DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS = 1002_u32
  DISPID_ISVGANGLE_VALUEASSTRING = 1003_u32
  DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS = 1004_u32
  DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS = 1005_u32
  DISPID_ISVGSTYLABLE_CLASSNAME = 1001_u32
  DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002_u32
  DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003_u32
  DISPID_ISVGLOCATABLE_GETBBOX = 1004_u32
  DISPID_ISVGLOCATABLE_GETCTM = 1005_u32
  DISPID_ISVGLOCATABLE_GETSCREENCTM = 1006_u32
  DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007_u32
  DISPID_ISVGTRANSFORMABLE_TRANSFORM = 1009_u32
  DISPID_ISVGTESTS_REQUIREDFEATURES = 1011_u32
  DISPID_ISVGTESTS_REQUIREDEXTENSIONS = 1013_u32
  DISPID_ISVGTESTS_SYSTEMLANGUAGE = 1015_u32
  DISPID_ISVGTESTS_HASEXTENSION = 1016_u32
  DISPID_ISVGLANGSPACE_XMLLANG = 1017_u32
  DISPID_ISVGLANGSPACE_XMLSPACE = 1018_u32
  DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED = 1020_u32
  DISPID_ISVGFITTOVIEWBOX_VIEWBOX = 1022_u32
  DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO = 1024_u32
  DISPID_ISVGZOOMANDPAN_ZOOMANDPAN = 1025_u32
  DISPID_ISVGURIREFERENCE_HREF = 1026_u32
  DISPID_ISVGANIMATEDANGLE_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDANGLE_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDBOOLEAN_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDENUMERATION_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDENUMERATION_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDINTEGER_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDINTEGER_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDLENGTH_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDLENGTH_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDNUMBER_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDNUMBER_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDRECT_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDRECT_ANIMVAL = 1001_u32
  DISPID_ISVGANIMATEDSTRING_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDSTRING_ANIMVAL = 1001_u32
  DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS = 1051_u32
  DISPID_ISVGDOCUMENT_ROOTELEMENT = 1116_u32
  DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT = 65615_u32
  DISPID_ISVGELEMENT_XMLBASE = 1032_u32
  DISPID_ISVGELEMENT_OWNERSVGELEMENT = 1033_u32
  DISPID_ISVGELEMENT_VIEWPORTELEMENT = 1034_u32
  DISPID_ISVGELEMENT_FOCUSABLE = 1036_u32
  DISPID_ISVGLENGTH_UNITTYPE = 1000_u32
  DISPID_ISVGLENGTH_VALUE = 1001_u32
  DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS = 1002_u32
  DISPID_ISVGLENGTH_VALUEASSTRING = 1003_u32
  DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS = 1004_u32
  DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS = 1005_u32
  DISPID_ISVGLENGTHLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGLENGTHLIST_CLEAR = 1001_u32
  DISPID_ISVGLENGTHLIST_INITIALIZE = 1002_u32
  DISPID_ISVGLENGTHLIST_GETITEM = 1003_u32
  DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGLENGTHLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGLENGTHLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGLENGTHLIST_APPENDITEM = 1007_u32
  DISPID_ISVGMATRIX_A = 1000_u32
  DISPID_ISVGMATRIX_B = 1001_u32
  DISPID_ISVGMATRIX_C = 1002_u32
  DISPID_ISVGMATRIX_D = 1003_u32
  DISPID_ISVGMATRIX_E = 1004_u32
  DISPID_ISVGMATRIX_F = 1005_u32
  DISPID_ISVGMATRIX_MULTIPLY = 1006_u32
  DISPID_ISVGMATRIX_INVERSE = 1007_u32
  DISPID_ISVGMATRIX_TRANSLATE = 1008_u32
  DISPID_ISVGMATRIX_SCALE = 1009_u32
  DISPID_ISVGMATRIX_SCALENONUNIFORM = 1010_u32
  DISPID_ISVGMATRIX_ROTATE = 1011_u32
  DISPID_ISVGMATRIX_ROTATEFROMVECTOR = 1012_u32
  DISPID_ISVGMATRIX_FLIPX = 1013_u32
  DISPID_ISVGMATRIX_FLIPY = 1014_u32
  DISPID_ISVGMATRIX_SKEWX = 1015_u32
  DISPID_ISVGMATRIX_SKEWY = 1016_u32
  DISPID_ISVGNUMBER_VALUE = 1000_u32
  DISPID_ISVGNUMBERLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGNUMBERLIST_CLEAR = 1001_u32
  DISPID_ISVGNUMBERLIST_INITIALIZE = 1002_u32
  DISPID_ISVGNUMBERLIST_GETITEM = 1003_u32
  DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGNUMBERLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGNUMBERLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGNUMBERLIST_APPENDITEM = 1007_u32
  DISPID_ISVGPATTERNELEMENT_PATTERNUNITS = 1051_u32
  DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS = 1053_u32
  DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM = 1055_u32
  DISPID_ISVGPATTERNELEMENT_X = 1057_u32
  DISPID_ISVGPATTERNELEMENT_Y = 1059_u32
  DISPID_ISVGPATTERNELEMENT_WIDTH = 1061_u32
  DISPID_ISVGPATTERNELEMENT_HEIGHT = 1063_u32
  DISPID_ISVGPATHSEG_PATHSEGTYPE = 1000_u32
  DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER = 1001_u32
  DISPID_ISVGPATHSEGARCABS_X = 1020_u32
  DISPID_ISVGPATHSEGARCABS_Y = 1021_u32
  DISPID_ISVGPATHSEGARCABS_R1 = 1022_u32
  DISPID_ISVGPATHSEGARCABS_R2 = 1023_u32
  DISPID_ISVGPATHSEGARCABS_ANGLE = 1024_u32
  DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG = 1025_u32
  DISPID_ISVGPATHSEGARCABS_SWEEPFLAG = 1026_u32
  DISPID_ISVGPATHSEGARCREL_X = 1020_u32
  DISPID_ISVGPATHSEGARCREL_Y = 1021_u32
  DISPID_ISVGPATHSEGARCREL_R1 = 1022_u32
  DISPID_ISVGPATHSEGARCREL_R2 = 1023_u32
  DISPID_ISVGPATHSEGARCREL_ANGLE = 1024_u32
  DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG = 1025_u32
  DISPID_ISVGPATHSEGARCREL_SWEEPFLAG = 1026_u32
  DISPID_ISVGPATHSEGMOVETOABS_X = 1020_u32
  DISPID_ISVGPATHSEGMOVETOABS_Y = 1021_u32
  DISPID_ISVGPATHSEGMOVETOREL_X = 1020_u32
  DISPID_ISVGPATHSEGMOVETOREL_Y = 1021_u32
  DISPID_ISVGPATHSEGLINETOABS_X = 1020_u32
  DISPID_ISVGPATHSEGLINETOABS_Y = 1021_u32
  DISPID_ISVGPATHSEGLINETOREL_X = 1020_u32
  DISPID_ISVGPATHSEGLINETOREL_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_X1 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_X2 = 1024_u32
  DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2 = 1025_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_X1 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_X2 = 1024_u32
  DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2 = 1025_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1 = 1022_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1 = 1023_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y = 1021_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X = 1020_u32
  DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y = 1021_u32
  DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X = 1020_u32
  DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X = 1020_u32
  DISPID_ISVGPATHSEGLINETOVERTICALABS_Y = 1020_u32
  DISPID_ISVGPATHSEGLINETOVERTICALREL_Y = 1020_u32
  DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGPATHSEGLIST_CLEAR = 1001_u32
  DISPID_ISVGPATHSEGLIST_INITIALIZE = 1002_u32
  DISPID_ISVGPATHSEGLIST_GETITEM = 1003_u32
  DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGPATHSEGLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGPATHSEGLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGPATHSEGLIST_APPENDITEM = 1007_u32
  DISPID_ISVGPOINT_X = 1000_u32
  DISPID_ISVGPOINT_Y = 1001_u32
  DISPID_ISVGPOINT_MATRIXTRANSFORM = 1002_u32
  DISPID_ISVGPOINTLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGPOINTLIST_CLEAR = 1001_u32
  DISPID_ISVGPOINTLIST_INITIALIZE = 1002_u32
  DISPID_ISVGPOINTLIST_GETITEM = 1003_u32
  DISPID_ISVGPOINTLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGPOINTLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGPOINTLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGPOINTLIST_APPENDITEM = 1007_u32
  DISPID_ISVGRECT_X = 1000_u32
  DISPID_ISVGRECT_Y = 1001_u32
  DISPID_ISVGRECT_WIDTH = 1002_u32
  DISPID_ISVGRECT_HEIGHT = 1003_u32
  DISPID_ISVGSTRINGLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGSTRINGLIST_CLEAR = 1001_u32
  DISPID_ISVGSTRINGLIST_INITIALIZE = 1002_u32
  DISPID_ISVGSTRINGLIST_GETITEM = 1003_u32
  DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGSTRINGLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGSTRINGLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGSTRINGLIST_APPENDITEM = 1007_u32
  DISPID_ISVGTRANSFORM_TYPE = 1000_u32
  DISPID_ISVGTRANSFORM_MATRIX = 1001_u32
  DISPID_ISVGTRANSFORM_ANGLE = 1002_u32
  DISPID_ISVGTRANSFORM_SETMATRIX = 1003_u32
  DISPID_ISVGTRANSFORM_SETTRANSLATE = 1004_u32
  DISPID_ISVGTRANSFORM_SETSCALE = 1005_u32
  DISPID_ISVGTRANSFORM_SETROTATE = 1006_u32
  DISPID_ISVGTRANSFORM_SETSKEWX = 1007_u32
  DISPID_ISVGTRANSFORM_SETSKEWY = 1008_u32
  DISPID_ISVGSVGELEMENT_X = 1052_u32
  DISPID_ISVGSVGELEMENT_Y = 1054_u32
  DISPID_ISVGSVGELEMENT_WIDTH = 1056_u32
  DISPID_ISVGSVGELEMENT_HEIGHT = 1058_u32
  DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE = 1059_u32
  DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE = 1060_u32
  DISPID_ISVGSVGELEMENT_VIEWPORT = 1061_u32
  DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX = 1062_u32
  DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY = 1063_u32
  DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX = 1064_u32
  DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY = 1065_u32
  DISPID_ISVGSVGELEMENT_USECURRENTVIEW = 1066_u32
  DISPID_ISVGSVGELEMENT_CURRENTVIEW = 1067_u32
  DISPID_ISVGSVGELEMENT_CURRENTSCALE = 1068_u32
  DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE = 1069_u32
  DISPID_ISVGSVGELEMENT_SUSPENDREDRAW = 1070_u32
  DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW = 1071_u32
  DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL = 1072_u32
  DISPID_ISVGSVGELEMENT_FORCEREDRAW = 1073_u32
  DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS = 1074_u32
  DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS = 1075_u32
  DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED = 1076_u32
  DISPID_ISVGSVGELEMENT_GETCURRENTTIME = 1077_u32
  DISPID_ISVGSVGELEMENT_SETCURRENTTIME = 1078_u32
  DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST = 1079_u32
  DISPID_ISVGSVGELEMENT_GETENCLOSURELIST = 1080_u32
  DISPID_ISVGSVGELEMENT_CHECKINTERSECTION = 1081_u32
  DISPID_ISVGSVGELEMENT_CHECKENCLOSURE = 1082_u32
  DISPID_ISVGSVGELEMENT_DESELECTALL = 1083_u32
  DISPID_ISVGSVGELEMENT_CREATESVGNUMBER = 1084_u32
  DISPID_ISVGSVGELEMENT_CREATESVGLENGTH = 1085_u32
  DISPID_ISVGSVGELEMENT_CREATESVGANGLE = 1086_u32
  DISPID_ISVGSVGELEMENT_CREATESVGPOINT = 1087_u32
  DISPID_ISVGSVGELEMENT_CREATESVGMATRIX = 1088_u32
  DISPID_ISVGSVGELEMENT_CREATESVGRECT = 1089_u32
  DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM = 1090_u32
  DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX = 1091_u32
  DISPID_ISVGSVGELEMENT_GETELEMENTBYID = 1092_u32
  DISPID_ISVGUSEELEMENT_X = 1052_u32
  DISPID_ISVGUSEELEMENT_Y = 1054_u32
  DISPID_ISVGUSEELEMENT_WIDTH = 1056_u32
  DISPID_ISVGUSEELEMENT_HEIGHT = 1058_u32
  DISPID_ISVGUSEELEMENT_INSTANCEROOT = 1059_u32
  DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT = 1060_u32
  DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH = 1001_u32
  DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY = 1002_u32
  DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE = 1004_u32
  DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH = 1005_u32
  DISPID_IRULESAPPLIED_ELEMENT = 1001_u32
  DISPID_IRULESAPPLIED_INLINESTYLES = 1002_u32
  DISPID_IRULESAPPLIED_APPLIEDRULES = 1003_u32
  DISPID_IRULESAPPLIED_PROPERTYISINLINE = 1004_u32
  DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE = 1005_u32
  DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY = 1006_u32
  DISPID_IRULESAPPLIEDCOLLECTION_ITEM = 0_u32
  DISPID_IRULESAPPLIEDCOLLECTION_LENGTH = 1001_u32
  DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT = 1002_u32
  DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM = 1003_u32
  DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT = 1004_u32
  DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY = 1005_u32
  DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE = 1006_u32
  DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH = 1007_u32
  DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS = 1000_u32
  DISPID_ISVGTRANSFORMLIST_CLEAR = 1001_u32
  DISPID_ISVGTRANSFORMLIST_INITIALIZE = 1002_u32
  DISPID_ISVGTRANSFORMLIST_GETITEM = 1003_u32
  DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE = 1004_u32
  DISPID_ISVGTRANSFORMLIST_REPLACEITEM = 1005_u32
  DISPID_ISVGTRANSFORMLIST_REMOVEITEM = 1006_u32
  DISPID_ISVGTRANSFORMLIST_APPENDITEM = 1007_u32
  DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX = 1008_u32
  DISPID_ISVGTRANSFORMLIST_CONSOLIDATE = 1009_u32
  DISPID_ISVGANIMATEDPOINTS_POINTS = 1050_u32
  DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS = 1052_u32
  DISPID_ISVGCIRCLEELEMENT_CX = 1052_u32
  DISPID_ISVGCIRCLEELEMENT_CY = 1054_u32
  DISPID_ISVGCIRCLEELEMENT_R = 1056_u32
  DISPID_ISVGELLIPSEELEMENT_CX = 1052_u32
  DISPID_ISVGELLIPSEELEMENT_CY = 1054_u32
  DISPID_ISVGELLIPSEELEMENT_RX = 1056_u32
  DISPID_ISVGELLIPSEELEMENT_RY = 1058_u32
  DISPID_ISVGLINEELEMENT_X1 = 1052_u32
  DISPID_ISVGLINEELEMENT_Y1 = 1054_u32
  DISPID_ISVGLINEELEMENT_X2 = 1056_u32
  DISPID_ISVGLINEELEMENT_Y2 = 1058_u32
  DISPID_ISVGRECTELEMENT_X = 1052_u32
  DISPID_ISVGRECTELEMENT_Y = 1054_u32
  DISPID_ISVGRECTELEMENT_WIDTH = 1056_u32
  DISPID_ISVGRECTELEMENT_HEIGHT = 1058_u32
  DISPID_ISVGRECTELEMENT_RX = 1060_u32
  DISPID_ISVGRECTELEMENT_RY = 1062_u32
  DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST = 1052_u32
  DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST = 1076_u32
  DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST = 1077_u32
  DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST = 1078_u32
  DISPID_ISVGPATHELEMENT_PATHLENGTH = 1053_u32
  DISPID_ISVGPATHELEMENT_GETTOTALLENGTH = 1073_u32
  DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH = 1074_u32
  DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH = 1075_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH = 1054_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS = 1055_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL = 1056_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS = 1057_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL = 1058_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS = 1059_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL = 1060_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS = 1061_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL = 1062_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS = 1063_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL = 1064_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS = 1065_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL = 1066_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS = 1067_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL = 1068_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS = 1069_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL = 1070_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1071_u32
  DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1072_u32
  DISPID_ISVGPRESERVEASPECTRATIO_ALIGN = 1000_u32
  DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE = 1001_u32
  DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL = 1000_u32
  DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL = 1001_u32
  DISPID_ISVGIMAGEELEMENT_X = 1051_u32
  DISPID_ISVGIMAGEELEMENT_Y = 1053_u32
  DISPID_ISVGIMAGEELEMENT_WIDTH = 1055_u32
  DISPID_ISVGIMAGEELEMENT_HEIGHT = 1057_u32
  DISPID_ISVGSTOPELEMENT_OFFSET = 1051_u32
  DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS = 1051_u32
  DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM = 1053_u32
  DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD = 1055_u32
  DISPID_ISVGLINEARGRADIENTELEMENT_X1 = 1071_u32
  DISPID_ISVGLINEARGRADIENTELEMENT_Y1 = 1073_u32
  DISPID_ISVGLINEARGRADIENTELEMENT_X2 = 1075_u32
  DISPID_ISVGLINEARGRADIENTELEMENT_Y2 = 1077_u32
  DISPID_ISVGRADIALGRADIENTELEMENT_CX = 1071_u32
  DISPID_ISVGRADIALGRADIENTELEMENT_CY = 1073_u32
  DISPID_ISVGRADIALGRADIENTELEMENT_R = 1075_u32
  DISPID_ISVGRADIALGRADIENTELEMENT_FX = 1077_u32
  DISPID_ISVGRADIALGRADIENTELEMENT_FY = 1079_u32
  DISPID_ISVGMASKELEMENT_MASKUNITS = 1051_u32
  DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS = 1053_u32
  DISPID_ISVGMASKELEMENT_X = 1055_u32
  DISPID_ISVGMASKELEMENT_Y = 1057_u32
  DISPID_ISVGMASKELEMENT_WIDTH = 1059_u32
  DISPID_ISVGMASKELEMENT_HEIGHT = 1061_u32
  DISPID_ISVGMARKERELEMENT_REFX = 1051_u32
  DISPID_ISVGMARKERELEMENT_REFY = 1053_u32
  DISPID_ISVGMARKERELEMENT_MARKERUNITS = 1055_u32
  DISPID_ISVGMARKERELEMENT_MARKERWIDTH = 1057_u32
  DISPID_ISVGMARKERELEMENT_MARKERHEIGHT = 1059_u32
  DISPID_ISVGMARKERELEMENT_ORIENTTYPE = 1061_u32
  DISPID_ISVGMARKERELEMENT_ORIENTANGLE = 1062_u32
  DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO = 1063_u32
  DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE = 1064_u32
  DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN = 1276_u32
  DISPID_ISVGZOOMEVENT_PREVIOUSSCALE = 1277_u32
  DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE = 1278_u32
  DISPID_ISVGZOOMEVENT_NEWSCALE = 1279_u32
  DISPID_ISVGZOOMEVENT_NEWTRANSLATE = 1280_u32
  DISPID_ISVGAELEMENT_TARGET = 1052_u32
  DISPID_ISVGVIEWELEMENT_VIEWTARGET = 1052_u32
  DISPID_IHTMLMEDIAERROR_CODE = 1000_u32
  DISPID_IHTMLTIMERANGES_LENGTH = 1000_u32
  DISPID_IHTMLTIMERANGES_START = 1001_u32
  DISPID_IHTMLTIMERANGES_END = 1002_u32
  DISPID_IHTMLTIMERANGES2_STARTDOUBLE = 1003_u32
  DISPID_IHTMLTIMERANGES2_ENDDOUBLE = 1004_u32
  DISPID_IHTMLMEDIAELEMENT_ERROR = 1000_u32
  DISPID_IHTMLMEDIAELEMENT_SRC = 1001_u32
  DISPID_IHTMLMEDIAELEMENT_CURRENTSRC = 1002_u32
  DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE = 1003_u32
  DISPID_IHTMLMEDIAELEMENT_PRELOAD = 1004_u32
  DISPID_IHTMLMEDIAELEMENT_BUFFERED = 1005_u32
  DISPID_IHTMLMEDIAELEMENT_LOAD = 1006_u32
  DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE = 1007_u32
  DISPID_IHTMLMEDIAELEMENT_SEEKING = 1009_u32
  DISPID_IHTMLMEDIAELEMENT_CURRENTTIME = 1010_u32
  DISPID_IHTMLMEDIAELEMENT_INITIALTIME = 1011_u32
  DISPID_IHTMLMEDIAELEMENT_DURATION = 1012_u32
  DISPID_IHTMLMEDIAELEMENT_PAUSED = 1013_u32
  DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE = 1014_u32
  DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE = 1015_u32
  DISPID_IHTMLMEDIAELEMENT_PLAYED = 1016_u32
  DISPID_IHTMLMEDIAELEMENT_SEEKABLE = 1017_u32
  DISPID_IHTMLMEDIAELEMENT_ENDED = 1018_u32
  DISPID_IHTMLMEDIAELEMENT_AUTOPLAY = 1019_u32
  DISPID_IHTMLMEDIAELEMENT_LOOP = 1020_u32
  DISPID_IHTMLMEDIAELEMENT_PLAY = 1021_u32
  DISPID_IHTMLMEDIAELEMENT_PAUSE = 1022_u32
  DISPID_IHTMLMEDIAELEMENT_CONTROLS = 1023_u32
  DISPID_IHTMLMEDIAELEMENT_VOLUME = 1024_u32
  DISPID_IHTMLMEDIAELEMENT_MUTED = 1025_u32
  DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER = 1026_u32
  DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE = 1027_u32
  DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE = 1028_u32
  DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE = 1029_u32
  DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE = 1030_u32
  DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE = 1031_u32
  DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE = 1032_u32
  DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED = 1033_u32
  DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY = 1034_u32
  DISPID_IHTMLSOURCEELEMENT_SRC = 1000_u32
  DISPID_IHTMLSOURCEELEMENT_TYPE = 1001_u32
  DISPID_IHTMLSOURCEELEMENT_MEDIA = 1002_u32
  DISPID_IHTMLVIDEOELEMENT_WIDTH = 65541_u32
  DISPID_IHTMLVIDEOELEMENT_HEIGHT = 65542_u32
  DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH = 1050_u32
  DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT = 1051_u32
  DISPID_IHTMLVIDEOELEMENT_POSTER = 1052_u32
  DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE = 0_u32
  DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT = 1000_u32
  DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT = 1001_u32
  DISPID_ISVGELEMENTINSTANCE_PARENTNODE = 1002_u32
  DISPID_ISVGELEMENTINSTANCE_CHILDNODES = 1003_u32
  DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD = 1004_u32
  DISPID_ISVGELEMENTINSTANCE_LASTCHILD = 1005_u32
  DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING = 1006_u32
  DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING = 1007_u32
  DISPID_ISVGELEMENTINSTANCELIST_LENGTH = 1000_u32
  DISPID_ISVGELEMENTINSTANCELIST_ITEM = 1001_u32
  DISPID_IDOMEXCEPTION_CODE = 1000_u32
  DISPID_IDOMEXCEPTION_MESSAGE = 1001_u32
  DISPID_IRANGEEXCEPTION_CODE = 1000_u32
  DISPID_IRANGEEXCEPTION_MESSAGE = 1001_u32
  DISPID_ISVGEXCEPTION_CODE = 1000_u32
  DISPID_ISVGEXCEPTION_MESSAGE = 1001_u32
  DISPID_IEVENTEXCEPTION_CODE = 1000_u32
  DISPID_IEVENTEXCEPTION_MESSAGE = 1001_u32
  DISPID_ISVGSCRIPTELEMENT_TYPE = 1052_u32
  DISPID_ISVGSTYLEELEMENT_TYPE = 1051_u32
  DISPID_ISVGSTYLEELEMENT_MEDIA = 1052_u32
  DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH = 1053_u32
  DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST = 1051_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS = 1054_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH = 1055_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH = 1056_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR = 1057_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR = 1058_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR = 1059_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR = 1060_u32
  DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION = 1061_u32
  DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING = 1062_u32
  DISPID_ISVGTEXTPOSITIONINGELEMENT_X = 1071_u32
  DISPID_ISVGTEXTPOSITIONINGELEMENT_Y = 1073_u32
  DISPID_ISVGTEXTPOSITIONINGELEMENT_DX = 1075_u32
  DISPID_ISVGTEXTPOSITIONINGELEMENT_DY = 1077_u32
  DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE = 1079_u32
  DISPID_IDOMDOCUMENTTYPE_NAME = 1000_u32
  DISPID_IDOMDOCUMENTTYPE_ENTITIES = 1001_u32
  DISPID_IDOMDOCUMENTTYPE_NOTATIONS = 1002_u32
  DISPID_IDOMDOCUMENTTYPE_PUBLICID = 1003_u32
  DISPID_IDOMDOCUMENTTYPE_SYSTEMID = 1004_u32
  DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET = 1005_u32
  DISPID_IDOMNODEITERATOR_ROOT = 1000_u32
  DISPID_IDOMNODEITERATOR_WHATTOSHOW = 1001_u32
  DISPID_IDOMNODEITERATOR_FILTER = 1002_u32
  DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES = 1003_u32
  DISPID_IDOMNODEITERATOR_NEXTNODE = 1010_u32
  DISPID_IDOMNODEITERATOR_PREVIOUSNODE = 1011_u32
  DISPID_IDOMNODEITERATOR_DETACH = 1012_u32
  DISPID_IDOMTREEWALKER_ROOT = 1000_u32
  DISPID_IDOMTREEWALKER_WHATTOSHOW = 1001_u32
  DISPID_IDOMTREEWALKER_FILTER = 1002_u32
  DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES = 1003_u32
  DISPID_IDOMTREEWALKER_CURRENTNODE = 1020_u32
  DISPID_IDOMTREEWALKER_PARENTNODE = 1021_u32
  DISPID_IDOMTREEWALKER_FIRSTCHILD = 1022_u32
  DISPID_IDOMTREEWALKER_LASTCHILD = 1023_u32
  DISPID_IDOMTREEWALKER_PREVIOUSSIBLING = 1024_u32
  DISPID_IDOMTREEWALKER_NEXTSIBLING = 1025_u32
  DISPID_IDOMTREEWALKER_PREVIOUSNODE = 1026_u32
  DISPID_IDOMTREEWALKER_NEXTNODE = 1027_u32
  DISPID_IDOMPROCESSINGINSTRUCTION_TARGET = 1000_u32
  DISPID_IDOMPROCESSINGINSTRUCTION_DATA = 1001_u32
  DISPID_IHTMLPERFORMANCE_NAVIGATION = 1000_u32
  DISPID_IHTMLPERFORMANCE_TIMING = 1001_u32
  DISPID_IHTMLPERFORMANCE_TOSTRING = 1002_u32
  DISPID_IHTMLPERFORMANCE_TOJSON = 1003_u32
  DISPID_IHTMLPERFORMANCENAVIGATION_TYPE = 1000_u32
  DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT = 1001_u32
  DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING = 1002_u32
  DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON = 1003_u32
  DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART = 1000_u32
  DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART = 1001_u32
  DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND = 1002_u32
  DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART = 1003_u32
  DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND = 1004_u32
  DISPID_IHTMLPERFORMANCETIMING_FETCHSTART = 1005_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART = 1006_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND = 1007_u32
  DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART = 1008_u32
  DISPID_IHTMLPERFORMANCETIMING_CONNECTEND = 1009_u32
  DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART = 1010_u32
  DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART = 1011_u32
  DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND = 1012_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMLOADING = 1013_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE = 1014_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART = 1015_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND = 1016_u32
  DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE = 1017_u32
  DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART = 1018_u32
  DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND = 1019_u32
  DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT = 1020_u32
  DISPID_IHTMLPERFORMANCETIMING_TOSTRING = 1021_u32
  DISPID_IHTMLPERFORMANCETIMING_TOJSON = 1022_u32
  DISPID_ITEMPLATEPRINTER_STARTDOC = 1_u32
  DISPID_ITEMPLATEPRINTER_STOPDOC = 2_u32
  DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE = 3_u32
  DISPID_ITEMPLATEPRINTER_PRINTPAGE = 4_u32
  DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS = 5_u32
  DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG = 6_u32
  DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG = 7_u32
  DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE = 8_u32
  DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES = 9_u32
  DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT = 10_u32
  DISPID_ITEMPLATEPRINTER_FRAMEACTIVE = 11_u32
  DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN = 12_u32
  DISPID_ITEMPLATEPRINTER_SELECTION = 13_u32
  DISPID_ITEMPLATEPRINTER_SELECTEDPAGES = 14_u32
  DISPID_ITEMPLATEPRINTER_CURRENTPAGE = 15_u32
  DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL = 16_u32
  DISPID_ITEMPLATEPRINTER_COLLATE = 17_u32
  DISPID_ITEMPLATEPRINTER_DUPLEX = 18_u32
  DISPID_ITEMPLATEPRINTER_COPIES = 19_u32
  DISPID_ITEMPLATEPRINTER_PAGEFROM = 20_u32
  DISPID_ITEMPLATEPRINTER_PAGETO = 21_u32
  DISPID_ITEMPLATEPRINTER_TABLEOFLINKS = 22_u32
  DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS = 23_u32
  DISPID_ITEMPLATEPRINTER_HEADER = 24_u32
  DISPID_ITEMPLATEPRINTER_FOOTER = 25_u32
  DISPID_ITEMPLATEPRINTER_MARGINLEFT = 26_u32
  DISPID_ITEMPLATEPRINTER_MARGINRIGHT = 27_u32
  DISPID_ITEMPLATEPRINTER_MARGINTOP = 28_u32
  DISPID_ITEMPLATEPRINTER_MARGINBOTTOM = 29_u32
  DISPID_ITEMPLATEPRINTER_PAGEWIDTH = 30_u32
  DISPID_ITEMPLATEPRINTER_PAGEHEIGHT = 31_u32
  DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT = 32_u32
  DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP = 33_u32
  DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT = 34_u32
  DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM = 35_u32
  DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS = 36_u32
  DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED = 37_u32
  DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED = 38_u32
  DISPID_ITEMPLATEPRINTER2_ORIENTATION = 39_u32
  DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE = 40_u32
  DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS = 41_u32
  DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT = 42_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP = 43_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT = 44_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM = 45_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT = 46_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT = 47_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT = 48_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT = 49_u32
  DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT = 50_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT = 501_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE = 502_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT = 503_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW = 504_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE = 505_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT = 506_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER = 507_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT = 508_u32
  DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE = 509_u32
  DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET = 1071_u32
  DISPID_ISVGTEXTPATHELEMENT_METHOD = 1073_u32
  DISPID_ISVGTEXTPATHELEMENT_SPACING = 1075_u32
  DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING = 1000_u32
  DISPID_IDOMPARSER_PARSEFROMSTRING = 1000_u32
  DISPID_IDOMXMLSERIALIZERFACTORY_CREATE = 0_u32
  DISPID_IDOMPARSERFACTORY_CREATE = 0_u32
  DISPID_IHTMLPROGRESSELEMENT_VALUE = 0_u32
  DISPID_IHTMLPROGRESSELEMENT_MAX = 1000_u32
  DISPID_IHTMLPROGRESSELEMENT_POSITION = 1001_u32
  DISPID_IHTMLPROGRESSELEMENT_FORM = 67540_u32
  DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME = 1476_u32
  DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME = 1477_u32
  DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT = 1478_u32
  DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME = 1501_u32
  DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME = 1502_u32
  DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT = 1503_u32
  DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION = 1001_u32
  DISPID_IWEBGEOLOCATION_WATCHPOSITION = 1002_u32
  DISPID_IWEBGEOLOCATION_CLEARWATCH = 1003_u32
  DISPID_IWEBGEOCOORDINATES_LATITUDE = 1001_u32
  DISPID_IWEBGEOCOORDINATES_LONGITUDE = 1002_u32
  DISPID_IWEBGEOCOORDINATES_ALTITUDE = 1003_u32
  DISPID_IWEBGEOCOORDINATES_ACCURACY = 1004_u32
  DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY = 1005_u32
  DISPID_IWEBGEOCOORDINATES_HEADING = 1006_u32
  DISPID_IWEBGEOCOORDINATES_SPEED = 1007_u32
  DISPID_IWEBGEOPOSITIONERROR_CODE = 1001_u32
  DISPID_IWEBGEOPOSITIONERROR_MESSAGE = 1002_u32
  DISPID_IWEBGEOPOSITION_COORDS = 1001_u32
  DISPID_IWEBGEOPOSITION_TIMESTAMP = 1002_u32
  DISPID_ICLIENTCAPS_JAVAENABLED = 1_u32
  DISPID_ICLIENTCAPS_COOKIEENABLED = 2_u32
  DISPID_ICLIENTCAPS_CPUCLASS = 3_u32
  DISPID_ICLIENTCAPS_SYSTEMLANGUAGE = 4_u32
  DISPID_ICLIENTCAPS_USERLANGUAGE = 5_u32
  DISPID_ICLIENTCAPS_PLATFORM = 6_u32
  DISPID_ICLIENTCAPS_CONNECTIONSPEED = 7_u32
  DISPID_ICLIENTCAPS_ONLINE = 8_u32
  DISPID_ICLIENTCAPS_COLORDEPTH = 9_u32
  DISPID_ICLIENTCAPS_BUFFERDEPTH = 10_u32
  DISPID_ICLIENTCAPS_WIDTH = 11_u32
  DISPID_ICLIENTCAPS_HEIGHT = 12_u32
  DISPID_ICLIENTCAPS_AVAILHEIGHT = 13_u32
  DISPID_ICLIENTCAPS_AVAILWIDTH = 14_u32
  DISPID_ICLIENTCAPS_CONNECTIONTYPE = 15_u32
  DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED = 16_u32
  DISPID_ICLIENTCAPS_GETCOMPONENTVERSION = 17_u32
  DISPID_ICLIENTCAPS_COMPAREVERSIONS = 18_u32
  DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST = 19_u32
  DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST = 20_u32
  DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST = 21_u32
  DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE = 1526_u32
  DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE = 1527_u32
  DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT = 1528_u32
  DISPID_IDOMCLOSEEVENT_WASCLEAN = 1526_u32
  DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT = 1529_u32
  DISPID_IHTMLAPPLICATIONCACHE_STATUS = 1001_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING = 71717_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONERROR = 71565_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE = 71718_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING = 71719_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS = 71681_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY = 71720_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONCACHED = 71721_u32
  DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE = 71722_u32
  DISPID_IHTMLAPPLICATIONCACHE_UPDATE = 1002_u32
  DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE = 1003_u32
  DISPID_IHTMLAPPLICATIONCACHE_ABORT = 1004_u32
  DISPID_ILINEINFO_X = 1001_u32
  DISPID_ILINEINFO_BASELINE = 1002_u32
  DISPID_ILINEINFO_TEXTDESCENT = 1003_u32
  DISPID_ILINEINFO_TEXTHEIGHT = 1004_u32
  DISPID_ILINEINFO_LINEDIRECTION = 1005_u32
  DISPID_IHTMLCOMPUTEDSTYLE_BOLD = 1001_u32
  DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = 1002_u32
  DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = 1003_u32
  DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = 1004_u32
  DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = 1005_u32
  DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = 1006_u32
  DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = 1007_u32
  DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = 1008_u32
  DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = 1009_u32
  DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = 1010_u32
  DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = 1011_u32
  DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = 1012_u32
  DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = 1013_u32
  DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = 1014_u32
  DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = 1015_u32
  DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = 1016_u32
  DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = 1017_u32
  DISPID_IHTMLCOMPUTEDSTYLE_OL = 1018_u32
  DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = 1_u32
  DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = 2_u32
  DISPID_IHTMLDLGSAFEHELPER_FONTS = 3_u32
  DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = 4_u32
  DISPID_IBLOCKFORMATS__NEWENUM = -4_i32
  DISPID_IBLOCKFORMATS_COUNT = 1_u32
  DISPID_IBLOCKFORMATS_ITEM = 0_u32
  DISPID_IFONTNAMES__NEWENUM = -4_i32
  DISPID_IFONTNAMES_COUNT = 1_u32
  DISPID_IFONTNAMES_ITEM = 0_u32
  DISPID_IHTMLNAMESPACE_NAME = 1000_u32
  DISPID_IHTMLNAMESPACE_URN = 1001_u32
  DISPID_IHTMLNAMESPACE_TAGNAMES = 1002_u32
  DISPID_IHTMLNAMESPACE_READYSTATE = 70652_u32
  DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = 71561_u32
  DISPID_IHTMLNAMESPACE_DOIMPORT = 1003_u32
  DISPID_IHTMLNAMESPACE_ATTACHEVENT = 66043_u32
  DISPID_IHTMLNAMESPACE_DETACHEVENT = 66044_u32
  DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = 1000_u32
  DISPID_IHTMLNAMESPACECOLLECTION_ITEM = 0_u32
  DISPID_IHTMLNAMESPACECOLLECTION_ADD = 1001_u32
  DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = -609_i32
  DISPID_IHTMLIPRINTCOLLECTION_LENGTH = 1501_u32
  DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = -4_i32
  DISPID_IHTMLIPRINTCOLLECTION_ITEM = 0_u32
  DISPID_IHTMLDIALOG_DIALOGTOP = 65540_u32
  DISPID_IHTMLDIALOG_DIALOGLEFT = 65539_u32
  DISPID_IHTMLDIALOG_DIALOGWIDTH = 65541_u32
  DISPID_IHTMLDIALOG_DIALOGHEIGHT = 65542_u32
  DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 25000_u32
  DISPID_IHTMLDIALOG_MENUARGUMENTS = 25013_u32
  DISPID_IHTMLDIALOG_RETURNVALUE = 25001_u32
  DISPID_IHTMLDIALOG_CLOSE = 25011_u32
  DISPID_IHTMLDIALOG_TOSTRING = 25012_u32
  DISPID_IHTMLDIALOG2_STATUS = 25014_u32
  DISPID_IHTMLDIALOG2_RESIZABLE = 25015_u32
  DISPID_IHTMLDIALOG3_UNADORNED = 25016_u32
  DISPID_IHTMLDIALOG3_DIALOGHIDE = 25007_u32
  DISPID_IHTMLMODELESSINIT_PARAMETERS = 25000_u32
  DISPID_IHTMLMODELESSINIT_OPTIONSTRING = 25001_u32
  DISPID_IHTMLMODELESSINIT_MONIKER = 25006_u32
  DISPID_IHTMLMODELESSINIT_DOCUMENT = 25007_u32
  DISPID_IHTMLPOPUP_SHOW = 27001_u32
  DISPID_IHTMLPOPUP_HIDE = 27002_u32
  DISPID_IHTMLPOPUP_DOCUMENT = 27003_u32
  DISPID_IHTMLPOPUP_ISOPEN = 27004_u32
  DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = 5000_u32
  DISPID_IHTMLAPPBEHAVIOR_VERSION = 5001_u32
  DISPID_IHTMLAPPBEHAVIOR_ICON = 5002_u32
  DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = 5003_u32
  DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = 5005_u32
  DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = 5006_u32
  DISPID_IHTMLAPPBEHAVIOR_BORDER = 5007_u32
  DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = 5008_u32
  DISPID_IHTMLAPPBEHAVIOR_SYSMENU = 5009_u32
  DISPID_IHTMLAPPBEHAVIOR_CAPTION = 5010_u32
  DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = 5011_u32
  DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = 5012_u32
  DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = 5013_u32
  DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = 5014_u32
  DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = 5015_u32
  DISPID_IHTMLAPPBEHAVIOR2_SCROLL = 5016_u32
  DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = 5017_u32
  DISPID_IHTMLAPPBEHAVIOR2_SELECTION = 5018_u32
  DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = 5019_u32
  DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT = 1050_u32
  DISPID_IE9EVENTS_ABORT = 1000_u32
  DISPID_IE9EVENTS_ACTIVATE = 1044_u32
  DISPID_IE9EVENTS_AFTERPRINT = 1025_u32
  DISPID_IE9EVENTS_BEFOREACTIVATE = 1047_u32
  DISPID_IE9EVENTS_BEFOREDEACTIVATE = 1034_u32
  DISPID_IE9EVENTS_BEFOREUNLOAD = 1017_u32
  DISPID_IE9EVENTS_BEFOREPRINT = 1024_u32
  DISPID_IE9EVENTS_BOUNCE = 1009_u32
  DISPID_IE9EVENTS_CHANGE = 1001_u32
  DISPID_IE9EVENTS_CLICK = -600_i32
  DISPID_IE9EVENTS_COMPLETE = 71727_u32
  DISPID_IE9EVENTS_CONTEXTMENU = 1023_u32
  DISPID_IE9EVENTS_DEACTIVATE = 1045_u32
  DISPID_IE9EVENTS_DOMCONTENTLOADED = 71662_u32
  DISPID_IE9EVENTS_SUCCESS = 71725_u32
  DISPID_IE9EVENTS_ERROR = 1002_u32
  DISPID_IE9EVENTS_FINISH = 1010_u32
  DISPID_IE9EVENTS_FOCUS = 65537_u32
  DISPID_IE9EVENTS_FOCUSIN = 1048_u32
  DISPID_IE9EVENTS_FOCUSOUT = 1049_u32
  DISPID_IE9EVENTS_HASHCHANGE = 1066_u32
  DISPID_IE9EVENTS_HELP = 65546_u32
  DISPID_IE9EVENTS_INPUT = 71663_u32
  DISPID_IE9EVENTS_LOAD = 1003_u32
  DISPID_IE9EVENTS_KEYDOWN = -602_i32
  DISPID_IE9EVENTS_KEYPRESS = -603_i32
  DISPID_IE9EVENTS_KEYUP = -604_i32
  DISPID_IE9EVENTS_MESSAGE = 1067_u32
  DISPID_IE9EVENTS_ONLINE = 1064_u32
  DISPID_IE9EVENTS_OFFLINE = 1065_u32
  DISPID_IE9EVENTS_READYSTATECHANGE = -609_i32
  DISPID_IE9EVENTS_RESET = 1015_u32
  DISPID_IE9EVENTS_RESIZE = 1016_u32
  DISPID_IE9EVENTS_SCROLL = 1014_u32
  DISPID_IE9EVENTS_SELECT = 1006_u32
  DISPID_IE9EVENTS_SELECTIONCHANGE = 1037_u32
  DISPID_IE9EVENTS_SELECTSTART = 65548_u32
  DISPID_IE9EVENTS_START = 1011_u32
  DISPID_IE9EVENTS_STOP = 1026_u32
  DISPID_IE9EVENTS_STORAGE = 1057_u32
  DISPID_IE9EVENTS_STORAGECOMMIT = 1058_u32
  DISPID_IE9EVENTS_SUBMIT = 1007_u32
  DISPID_IE9EVENTS_TEXTINPUT = 71665_u32
  DISPID_IE9EVENTS_TIMEOUT = 0_u32
  DISPID_IE9EVENTS_UNLOAD = 1008_u32
  DISPID_IE9EVENTS_WHEEL = 71649_u32
  DISPID_IE9EVENTS_DBLCLICK = -601_i32
  DISPID_IE9EVENTS_MOUSEDOWN = -605_i32
  DISPID_IE9EVENTS_MOUSEENTER = 1042_u32
  DISPID_IE9EVENTS_MOUSELEAVE = 1043_u32
  DISPID_IE9EVENTS_MOUSEMOVE = -606_i32
  DISPID_IE9EVENTS_MOUSEOUT = 65545_u32
  DISPID_IE9EVENTS_MOUSEOVER = 65544_u32
  DISPID_IE9EVENTS_MOUSEUP = -607_i32
  DISPID_IE9EVENTS_MOUSEWHEEL = 1033_u32
  DISPID_IE9EVENTS_BEFORECOPY = 65566_u32
  DISPID_IE9EVENTS_BEFORECUT = 65565_u32
  DISPID_IE9EVENTS_BEFOREPASTE = 65567_u32
  DISPID_IE9EVENTS_COPY = 65563_u32
  DISPID_IE9EVENTS_CUT = 65562_u32
  DISPID_IE9EVENTS_DRAG = 65556_u32
  DISPID_IE9EVENTS_DRAGEND = 65557_u32
  DISPID_IE9EVENTS_DRAGENTER = 65558_u32
  DISPID_IE9EVENTS_DRAGLEAVE = 65560_u32
  DISPID_IE9EVENTS_DRAGOVER = 65559_u32
  DISPID_IE9EVENTS_DRAGSTART = 65547_u32
  DISPID_IE9EVENTS_DROP = 65561_u32
  DISPID_IE9EVENTS_PASTE = 65564_u32
  DISPID_IE9EVENTS_MSBEFOREEDITFOCUS = 1027_u32
  DISPID_IE9EVENTS_MSCONTROLSELECT = 1036_u32
  DISPID_IE9EVENTS_MSCONTROLRESIZESTART = 1040_u32
  DISPID_IE9EVENTS_MSCONTROLRESIZEEND = 1041_u32
  DISPID_IE9EVENTS_COMPOSITIONSTART = 71658_u32
  DISPID_IE9EVENTS_COMPOSITIONUPDATE = 71659_u32
  DISPID_IE9EVENTS_COMPOSITIONEND = 71660_u32
  DISPID_IE9EVENTS_DOMATTRMODIFIED = 71661_u32
  DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED = 71664_u32
  DISPID_IE9EVENTS_DOMNODEINSERTED = 71667_u32
  DISPID_IE9EVENTS_DOMNODEREMOVED = 71668_u32
  DISPID_IE9EVENTS_DOMSUBTREEMODIFIED = 71669_u32
  DISPID_IE9EVENTS_SVGLOAD = 71650_u32
  DISPID_IE9EVENTS_SVGUNLOAD = 71651_u32
  DISPID_IE9EVENTS_SVGABORT = 71652_u32
  DISPID_IE9EVENTS_SVGERROR = 71653_u32
  DISPID_IE9EVENTS_SVGRESIZE = 71654_u32
  DISPID_IE9EVENTS_SVGSCROLL = 71655_u32
  DISPID_IE9EVENTS_SVGZOOM = 71656_u32
  DISPID_IE9EVENTS_MSTHUMBNAILCLICK = 71657_u32
  DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED = 71666_u32
  DISPID_IE9EVENTS_CANPLAY = 71670_u32
  DISPID_IE9EVENTS_CANPLAYTHROUGH = 71671_u32
  DISPID_IE9EVENTS_DURATIONCHANGE = 71672_u32
  DISPID_IE9EVENTS_EMPTIED = 71673_u32
  DISPID_IE9EVENTS_ENDED = 71674_u32
  DISPID_IE9EVENTS_LOADEDDATA = 71675_u32
  DISPID_IE9EVENTS_LOADEDMETADATA = 71676_u32
  DISPID_IE9EVENTS_LOADSTART = 71677_u32
  DISPID_IE9EVENTS_PAUSE = 71678_u32
  DISPID_IE9EVENTS_PLAY = 71679_u32
  DISPID_IE9EVENTS_PLAYING = 71680_u32
  DISPID_IE9EVENTS_PROGRESS = 71681_u32
  DISPID_IE9EVENTS_RATECHANGE = 71682_u32
  DISPID_IE9EVENTS_SEEKED = 71683_u32
  DISPID_IE9EVENTS_SEEKING = 71684_u32
  DISPID_IE9EVENTS_STALLED = 71685_u32
  DISPID_IE9EVENTS_SUSPEND = 71686_u32
  DISPID_IE9EVENTS_TIMEUPDATE = 71687_u32
  DISPID_IE9EVENTS_VOLUMECHANGE = 71688_u32
  DISPID_IE9EVENTS_WAITING = 71689_u32
  DISPID_IE9EVENTS_BLOCKED = 71726_u32
  DISPID_IE9EVENTS_UPGRADENEEDED = 71734_u32
  DISPID_IE9EVENTS_CUECHANGE = 71729_u32
  DISPID_IE9EVENTS_ENTER = 71730_u32
  DISPID_IE9EVENTS_EXIT = 71731_u32
  DISPID_IE9EVENTS_ADDTRACK = 71736_u32
  DISPID_IE9EVENTS_REMOVETRACK = 71781_u32
  DISPID_IE9EVENTS_MSPOINTERDOWN = 71690_u32
  DISPID_IE9EVENTS_MSPOINTERMOVE = 71691_u32
  DISPID_IE9EVENTS_MSPOINTERUP = 71692_u32
  DISPID_IE9EVENTS_MSPOINTEROVER = 71693_u32
  DISPID_IE9EVENTS_MSPOINTEROUT = 71694_u32
  DISPID_IE9EVENTS_MSPOINTERCANCEL = 71695_u32
  DISPID_IE9EVENTS_MSPOINTERHOVER = 71696_u32
  DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE = 71706_u32
  DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE = 71707_u32
  DISPID_IE9EVENTS_MSPOINTERENTER = 71769_u32
  DISPID_IE9EVENTS_MSPOINTERLEAVE = 71770_u32
  DISPID_IE9EVENTS_TOUCHSTART = 71784_u32
  DISPID_IE9EVENTS_TOUCHEND = 71785_u32
  DISPID_IE9EVENTS_TOUCHMOVE = 71786_u32
  DISPID_IE9EVENTS_TOUCHCANCEL = 71787_u32
  DISPID_IE9EVENTS_MSGESTURESTART = 71699_u32
  DISPID_IE9EVENTS_MSGESTURECHANGE = 71700_u32
  DISPID_IE9EVENTS_MSGESTUREEND = 71701_u32
  DISPID_IE9EVENTS_MSGESTUREHOLD = 71702_u32
  DISPID_IE9EVENTS_MSGESTURETAP = 71703_u32
  DISPID_IE9EVENTS_MSGESTUREDOUBLETAP = 71704_u32
  DISPID_IE9EVENTS_MSINERTIASTART = 71705_u32
  DISPID_IE9EVENTS_MSCONTENTZOOM = 71708_u32
  DISPID_IE9EVENTS_MSHOLDVISUAL = 71738_u32
  DISPID_IE9EVENTS_TRANSITIONSTART = 71709_u32
  DISPID_IE9EVENTS_TRANSITIONEND = 71710_u32
  DISPID_IE9EVENTS_ANIMATIONSTART = 71711_u32
  DISPID_IE9EVENTS_ANIMATIONEND = 71712_u32
  DISPID_IE9EVENTS_ANIMATIONITERATION = 71713_u32
  DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED = 71714_u32
  DISPID_IE9EVENTS_CHECKING = 71717_u32
  DISPID_IE9EVENTS_NOUPDATE = 71718_u32
  DISPID_IE9EVENTS_DOWNLOADING = 71719_u32
  DISPID_IE9EVENTS_UPDATEREADY = 71720_u32
  DISPID_IE9EVENTS_CACHED = 71721_u32
  DISPID_IE9EVENTS_OBSOLETE = 71722_u32
  DISPID_IE9EVENTS_INVALID = 71724_u32
  DISPID_IE9EVENTS_OPEN = 71715_u32
  DISPID_IE9EVENTS_CLOSE = 71716_u32
  DISPID_IE9EVENTS_LOADEND = 71723_u32
  DISPID_IE9EVENTS_POPSTATE = 71728_u32
  DISPID_IE9EVENTS_VISIBILITYCHANGE = 71732_u32
  DISPID_IE9EVENTS_MSREGIONUPDATE = 71733_u32
  DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED = 71735_u32
  DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED = 71737_u32
  DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED = 71739_u32
  DISPID_IE9EVENTS_MSFULLSCREENCHANGE = 71740_u32
  DISPID_IE9EVENTS_MSFULLSCREENERROR = 71741_u32
  DISPID_IE9EVENTS_MSELEMENTRESIZE = 71742_u32
  DISPID_IE9EVENTS_SOURCEOPEN = 71743_u32
  DISPID_IE9EVENTS_SOURCEENDED = 71745_u32
  DISPID_IE9EVENTS_SOURCECLOSE = 71744_u32
  DISPID_IE9EVENTS_ADDSOURCEBUFFER = 71746_u32
  DISPID_IE9EVENTS_REMOVESOURCEBUFFER = 71747_u32
  DISPID_IE9EVENTS_UPDATESTART = 71766_u32
  DISPID_IE9EVENTS_UPDATE = 71767_u32
  DISPID_IE9EVENTS_UPDATEEND = 71768_u32
  DISPID_IE9EVENTS_MSNEEDKEY = 71748_u32
  DISPID_IE9EVENTS_MSKEYMESSAGE = 71749_u32
  DISPID_IE9EVENTS_MSKEYERROR = 71750_u32
  DISPID_IE9EVENTS_MSKEYADDED = 71751_u32
  DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED = 71752_u32
  DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING = 71753_u32
  DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING = 71754_u32
  DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED = 71755_u32
  DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED = 71756_u32
  DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING = 71757_u32
  DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING = 71758_u32
  DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED = 71759_u32
  DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY = 71760_u32
  DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED = 71763_u32
  DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED = 71761_u32
  DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING = 71762_u32
  DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED = 71783_u32
  DISPID_IE9EVENTS_WEBGLCONTEXTLOST = 71764_u32
  DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED = 71765_u32
  DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR = 71792_u32
  DISPID_IE9EVENTS_MSSITEPINNED = 71771_u32
  DISPID_IE9EVENTS_MSORIENTATIONCHANGE = 71772_u32
  DISPID_IE9EVENTS_ORIENTATIONCHANGE = 71795_u32
  DISPID_IE9EVENTS_DEVICEORIENTATION = 71773_u32
  DISPID_IE9EVENTS_DEVICEMOTION = 71774_u32
  DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION = 71782_u32
  DISPID_IE9EVENTS_PAGESHOW = 71775_u32
  DISPID_IE9EVENTS_PAGEHIDE = 71776_u32
  DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW = 71777_u32
  DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE = 71778_u32
  DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE = 71779_u32
  CONTEXT_MENU_DEFAULT = 0_u32
  CONTEXT_MENU_IMAGE = 1_u32
  CONTEXT_MENU_CONTROL = 2_u32
  CONTEXT_MENU_TABLE = 3_u32
  CONTEXT_MENU_TEXTSELECT = 4_u32
  CONTEXT_MENU_ANCHOR = 5_u32
  CONTEXT_MENU_UNKNOWN = 6_u32
  CONTEXT_MENU_IMGDYNSRC = 7_u32
  CONTEXT_MENU_DEBUG = 8_u32
  CONTEXT_MENU_VSCROLL = 9_u32
  CONTEXT_MENU_HSCROLL = 10_u32
  CONTEXT_MENU_MEDIA = 11_u32
  CONTEXT_MENU_ENTITY = 12_u32
  CONTEXT_MENU_PDF = 13_u32
  CONTEXT_MENU_DISABLEDFLASH = 14_u32
  MENUEXT_SHOWDIALOG = 1_u32
  HTMLDLG_NOUI = 16_u32
  HTMLDLG_MODAL = 32_u32
  HTMLDLG_MODELESS = 64_u32
  HTMLDLG_PRINT_TEMPLATE = 128_u32
  HTMLDLG_VERIFY = 256_u32
  HTMLDLG_ALLOW_UNKNOWN_THREAD = 512_u32
  PRINT_DONTBOTHERUSER = 1_u32
  PRINT_WAITFORCOMPLETION = 2_u32
  CMDID_SCRIPTSITE_URL = 0_u32
  CMDID_SCRIPTSITE_HTMLDLGTRUST = 1_u32
  CMDID_SCRIPTSITE_SECSTATE = 2_u32
  CMDID_SCRIPTSITE_SID = 3_u32
  CMDID_SCRIPTSITE_TRUSTEDDOC = 4_u32
  CMDID_SCRIPTSITE_SECURITY_WINDOW = 5_u32
  CMDID_SCRIPTSITE_NAMESPACE = 6_u32
  CMDID_SCRIPTSITE_IURI = 7_u32
  CMDID_HOSTCONTEXT_URL = 8_u32
  CMDID_SCRIPTSITE_ALLOWRECOVERY = 9_u32
  CMDID_SCRIPTSITE_BASEIURI = 10_u32
  CGID_DocHostCommandHandler = "f38bc242-b950-11d1-8918-00c04fc2c836"
  IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = 0_u32
  IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = 1_u32
  IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = 2_u32
  IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = 3_u32
  IECMDID_BEFORENAVIGATE_GETIDLIST = 4_u32
  IECMDID_SET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 5_u32
  IECMDID_GET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 6_u32
  IECMDID_ARG_CLEAR_FORMS_ALL = 0_u32
  IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = 1_u32
  IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = 2_u32
  CATID_MSOfficeAntiVirus = "56ffcc30-d398-11d0-b2ae-00a0c908fa49"
  STATURL_QUERYFLAG_ISCACHED = 65536_u32
  STATURL_QUERYFLAG_NOURL = 131072_u32
  STATURL_QUERYFLAG_NOTITLE = 262144_u32
  STATURL_QUERYFLAG_TOPLEVEL = 524288_u32
  STATURLFLAG_ISCACHED = 1_u32
  STATURLFLAG_ISTOPLEVEL = 2_u32
  SURFACE_LOCK_EXCLUSIVE = 1_u32
  SURFACE_LOCK_ALLOW_DISCARD = 2_u32
  SURFACE_LOCK_WAIT = 4_u32
  E_SURFACE_NOSURFACE = -2147434496_i32
  E_SURFACE_UNKNOWN_FORMAT = -2147434495_i32
  E_SURFACE_NOTMYPOINTER = -2147434494_i32
  E_SURFACE_DISCARDED = -2147434493_i32
  E_SURFACE_NODC = -2147434492_i32
  E_SURFACE_NOTMYDC = -2147434491_i32
  S_SURFACE_DISCARDED = 49155_i32
  COLOR_NO_TRANSPARENT = 4294967295_u32
  IMGDECODE_EVENT_PROGRESS = 1_u32
  IMGDECODE_EVENT_PALETTE = 2_u32
  IMGDECODE_EVENT_BEGINBITS = 4_u32
  IMGDECODE_EVENT_BITSCOMPLETE = 8_u32
  IMGDECODE_EVENT_USEDDRAW = 16_u32
  IMGDECODE_HINT_TOPDOWN = 1_u32
  IMGDECODE_HINT_BOTTOMUP = 2_u32
  IMGDECODE_HINT_FULLWIDTH = 4_u32
  MAPMIME_DEFAULT = 0_u32
  MAPMIME_CLSID = 1_u32
  MAPMIME_DISABLE = 2_u32
  MAPMIME_DEFAULT_ALWAYS = 3_u32
  TIMERMODE_NORMAL = 0_u32
  TIMERMODE_VISIBILITYAWARE = 1_u32
  CLSID_HTMLCSSStyleDeclaration = LibC::GUID.new(0x30510741_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyle = LibC::GUID.new(0x3050f285_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLRuleStyle = LibC::GUID.new(0x3050f3d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCSSRule = LibC::GUID.new(0x305106ef_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCSSImportRule = LibC::GUID.new(0x305106f0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCSSMediaRule = LibC::GUID.new(0x305106f1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCSSMediaList = LibC::GUID.new(0x30510732_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCSSNamespaceRule = LibC::GUID.new(0x305106f2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMSCSSKeyframeRule = LibC::GUID.new(0x3051080e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMSCSSKeyframesRule = LibC::GUID.new(0x3051080f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLRenderStyle = LibC::GUID.new(0x3050f6aa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCurrentStyle = LibC::GUID.new(0x3050f3dc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDOMAttribute = LibC::GUID.new(0x3050f4b2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDOMTextNode = LibC::GUID.new(0x3050f4ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDOMImplementation = LibC::GUID.new(0x3050f80e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAttributeCollection = LibC::GUID.new(0x3050f4cc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_StaticNodeList = LibC::GUID.new(0x30510467_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMChildrenCollection = LibC::GUID.new(0x3050f5aa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDefaults = LibC::GUID.new(0x3050f6c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCDefaultDispatch = LibC::GUID.new(0x3050f4fc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCPropertyBehavior = LibC::GUID.new(0x3050f5de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCMethodBehavior = LibC::GUID.new(0x3050f630_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCEventBehavior = LibC::GUID.new(0x3050f4fe_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCAttachBehavior = LibC::GUID.new(0x3050f5f5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTCDescBehavior = LibC::GUID.new(0x3050f5dd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLUrnCollection = LibC::GUID.new(0x3050f580_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLGenericElement = LibC::GUID.new(0x3050f4b8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetRule = LibC::GUID.new(0x3050f3ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetRulesCollection = LibC::GUID.new(0x3050f3cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetPage = LibC::GUID.new(0x3050f7ef_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetPagesCollection = LibC::GUID.new(0x3050f7f1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheet = LibC::GUID.new(0x3050f2e4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetsCollection = LibC::GUID.new(0x3050f37f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLLinkElement = LibC::GUID.new(0x3050f277_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDOMRange = LibC::GUID.new(0x305106c3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFormElement = LibC::GUID.new(0x3050f251_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTextElement = LibC::GUID.new(0x3050f26a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLImg = LibC::GUID.new(0x3050f241_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLImageElementFactory = LibC::GUID.new(0x3050f38f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBody = LibC::GUID.new(0x3050f24a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFontElement = LibC::GUID.new(0x3050f27b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAnchorElement = LibC::GUID.new(0x3050f248_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLLabelElement = LibC::GUID.new(0x3050f32b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLListElement = LibC::GUID.new(0x3050f272_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLUListElement = LibC::GUID.new(0x3050f269_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLOListElement = LibC::GUID.new(0x3050f270_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLLIElement = LibC::GUID.new(0x3050f273_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBlockElement = LibC::GUID.new(0x3050f281_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDivElement = LibC::GUID.new(0x3050f27e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDDElement = LibC::GUID.new(0x3050f27f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDTElement = LibC::GUID.new(0x3050f27c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBRElement = LibC::GUID.new(0x3050f280_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDListElement = LibC::GUID.new(0x3050f27d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLHRElement = LibC::GUID.new(0x3050f252_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLParaElement = LibC::GUID.new(0x3050f26f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLElementCollection = LibC::GUID.new(0x3050f4cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLHeaderElement = LibC::GUID.new(0x3050f27a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLSelectElement = LibC::GUID.new(0x3050f245_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLWndSelectElement = LibC::GUID.new(0x3050f2cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLOptionElement = LibC::GUID.new(0x3050f24d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLOptionElementFactory = LibC::GUID.new(0x3050f38d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLWndOptionElement = LibC::GUID.new(0x3050f2d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLInputElement = LibC::GUID.new(0x3050f5d8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTextAreaElement = LibC::GUID.new(0x3050f2ac_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLRichtextElement = LibC::GUID.new(0x3050f2df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLButtonElement = LibC::GUID.new(0x3050f2c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMarqueeElement = LibC::GUID.new(0x3050f2b9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLHtmlElement = LibC::GUID.new(0x3050f491_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLHeadElement = LibC::GUID.new(0x3050f493_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTitleElement = LibC::GUID.new(0x3050f284_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMetaElement = LibC::GUID.new(0x3050f275_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBaseElement = LibC::GUID.new(0x3050f276_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLIsIndexElement = LibC::GUID.new(0x3050f278_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLNextIdElement = LibC::GUID.new(0x3050f279_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBaseFontElement = LibC::GUID.new(0x3050f282_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLUnknownElement = LibC::GUID.new(0x3050f268_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLHistory = LibC::GUID.new(0xfeceaaa3_u32, 0x8405_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x6d_u8, 0xa6_u8])
  CLSID_COpsProfile = LibC::GUID.new(0x3050f402_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLNavigator = LibC::GUID.new(0xfeceaaa6_u32, 0x8405_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x6d_u8, 0xa6_u8])
  CLSID_HTMLLocation = LibC::GUID.new(0x163bb1e1_u32, 0x6e00_u16, 0x11cf_u16, StaticArray[0x83_u8, 0x7a_u8, 0x48_u8, 0xdc_u8, 0x4_u8, 0xc1_u8, 0x0_u8, 0x0_u8])
  CLSID_CMimeTypes = LibC::GUID.new(0x3050f3fe_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPlugins = LibC::GUID.new(0x3050f3ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CEventObj = LibC::GUID.new(0x3050f48a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleMedia = LibC::GUID.new(0x3051074c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_FramesCollection = LibC::GUID.new(0x3050f7f6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLScreen = LibC::GUID.new(0x3050f35d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLWindow2 = LibC::GUID.new(0xd48a6ec6_u32, 0x6a4a_u16, 0x11cf_u16, StaticArray[0x94_u8, 0xa7_u8, 0x44_u8, 0x45_u8, 0x53_u8, 0x54_u8, 0x0_u8, 0x0_u8])
  CLSID_HTMLWindowProxy = LibC::GUID.new(0x3050f391_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDocumentCompatibleInfo = LibC::GUID.new(0x3051041b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDocumentCompatibleInfoCollection = LibC::GUID.new(0x30510419_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDocument = LibC::GUID.new(0x25336920_u32, 0x3f9_u16, 0x11cf_u16, StaticArray[0x8f_u8, 0xd0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x68_u8, 0x6f_u8, 0x13_u8])
  CLSID_Scriptlet = LibC::GUID.new(0xae24fdae_u32, 0x3c6_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0x76_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x44_u8, 0xf3_u8, 0x89_u8])
  CLSID_HTMLEmbed = LibC::GUID.new(0x3050f25d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAreasCollection = LibC::GUID.new(0x3050f4ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMapElement = LibC::GUID.new(0x3050f271_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAreaElement = LibC::GUID.new(0x3050f283_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTableCaption = LibC::GUID.new(0x3050f2ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCommentElement = LibC::GUID.new(0x3050f317_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLPhraseElement = LibC::GUID.new(0x3050f26e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLSpanElement = LibC::GUID.new(0x3050f3f5_u32, 0x98b4_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTable = LibC::GUID.new(0x3050f26b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTableCol = LibC::GUID.new(0x3050f26c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTableSection = LibC::GUID.new(0x3050f2e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTableRow = LibC::GUID.new(0x3050f26d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTableCell = LibC::GUID.new(0x3050f246_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLScriptElement = LibC::GUID.new(0x3050f28c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLNoShowElement = LibC::GUID.new(0x3050f38b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLObjectElement = LibC::GUID.new(0x3050f24e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLParamElement = LibC::GUID.new(0x3050f83e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFrameBase = LibC::GUID.new(0x3050f312_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFrameElement = LibC::GUID.new(0x3050f314_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLIFrame = LibC::GUID.new(0x3050f316_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDivPosition = LibC::GUID.new(0x3050f249_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFieldSetElement = LibC::GUID.new(0x3050f3e8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLLegendElement = LibC::GUID.new(0x3050f3e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLSpanFlow = LibC::GUID.new(0x3050f3e6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLFrameSetSite = LibC::GUID.new(0x3050f31a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLBGsound = LibC::GUID.new(0x3050f370_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleElement = LibC::GUID.new(0x3050f37d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleFontFace = LibC::GUID.new(0x3050f3d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_XDomainRequest = LibC::GUID.new(0x30510455_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_XDomainRequestFactory = LibC::GUID.new(0x30510457_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStorage = LibC::GUID.new(0x30510475_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMEvent = LibC::GUID.new(0x305104bb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMUIEvent = LibC::GUID.new(0x305106cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMouseEvent = LibC::GUID.new(0x305106cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMDragEvent = LibC::GUID.new(0x30510762_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMouseWheelEvent = LibC::GUID.new(0x305106d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMWheelEvent = LibC::GUID.new(0x305106d3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMTextEvent = LibC::GUID.new(0x305106d5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMKeyboardEvent = LibC::GUID.new(0x305106d7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMCompositionEvent = LibC::GUID.new(0x305106d9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMutationEvent = LibC::GUID.new(0x305106db_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMBeforeUnloadEvent = LibC::GUID.new(0x30510764_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMFocusEvent = LibC::GUID.new(0x305106cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMCustomEvent = LibC::GUID.new(0x305106df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CanvasGradient = LibC::GUID.new(0x30510715_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CanvasPattern = LibC::GUID.new(0x30510717_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CanvasTextMetrics = LibC::GUID.new(0x30510719_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CanvasImageData = LibC::GUID.new(0x3051071b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CanvasRenderingContext2D = LibC::GUID.new(0x30510700_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLCanvasElement = LibC::GUID.new(0x305106e5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMProgressEvent = LibC::GUID.new(0x3051071f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMessageEvent = LibC::GUID.new(0x30510721_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMSiteModeEvent = LibC::GUID.new(0x30510766_u32, 0x98b6_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMStorageEvent = LibC::GUID.new(0x30510723_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_XMLHttpRequestEventTarget = LibC::GUID.new(0x30510831_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLXMLHttpRequest = LibC::GUID.new(0x3051040b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLXMLHttpRequestFactory = LibC::GUID.new(0x3051040d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAngle = LibC::GUID.new(0x30510584_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedAngle = LibC::GUID.new(0x305105e4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedTransformList = LibC::GUID.new(0x305105b1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedBoolean = LibC::GUID.new(0x3051058b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedEnumeration = LibC::GUID.new(0x3051058e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedInteger = LibC::GUID.new(0x3051058f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedLength = LibC::GUID.new(0x30510581_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedLengthList = LibC::GUID.new(0x30510582_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedNumber = LibC::GUID.new(0x30510588_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedNumberList = LibC::GUID.new(0x3051058a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedRect = LibC::GUID.new(0x30510586_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedString = LibC::GUID.new(0x3051058c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGClipPathElement = LibC::GUID.new(0x305105e6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGElement = LibC::GUID.new(0x30510564_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGLength = LibC::GUID.new(0x3051057e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGLengthList = LibC::GUID.new(0x30510580_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGMatrix = LibC::GUID.new(0x305105ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGNumber = LibC::GUID.new(0x30510587_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGNumberList = LibC::GUID.new(0x30510589_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPatternElement = LibC::GUID.new(0x305105d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSeg = LibC::GUID.new(0x305105b3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegArcAbs = LibC::GUID.new(0x305105bb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegArcRel = LibC::GUID.new(0x305105bc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegClosePath = LibC::GUID.new(0x305105bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegMovetoAbs = LibC::GUID.new(0x305105cc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegMovetoRel = LibC::GUID.new(0x305105cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoAbs = LibC::GUID.new(0x305105c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoRel = LibC::GUID.new(0x305105c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoCubicAbs = LibC::GUID.new(0x305105be_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoCubicRel = LibC::GUID.new(0x305105bf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoCubicSmoothAbs = LibC::GUID.new(0x305105c0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoCubicSmoothRel = LibC::GUID.new(0x305105c1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoQuadraticAbs = LibC::GUID.new(0x305105c2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoQuadraticRel = LibC::GUID.new(0x305105c3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoQuadraticSmoothAbs = LibC::GUID.new(0x305105c4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegCurvetoQuadraticSmoothRel = LibC::GUID.new(0x305105c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoHorizontalAbs = LibC::GUID.new(0x305105c7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoHorizontalRel = LibC::GUID.new(0x305105c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoVerticalAbs = LibC::GUID.new(0x305105ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegLinetoVerticalRel = LibC::GUID.new(0x305105cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathSegList = LibC::GUID.new(0x305105b4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPoint = LibC::GUID.new(0x305105ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPointList = LibC::GUID.new(0x305105b9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGRect = LibC::GUID.new(0x30510583_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGStringList = LibC::GUID.new(0x3051058d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTransform = LibC::GUID.new(0x305105af_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGSVGElement = LibC::GUID.new(0x30510574_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGUseElement = LibC::GUID.new(0x30510590_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLStyleSheetRulesAppliedCollection = LibC::GUID.new(0xeb36f845_u32, 0x2395_u16, 0x4719_u16, StaticArray[0xb8_u8, 0x5c_u8, 0xd0_u8, 0xd8_u8, 0xe_u8, 0x18_u8, 0x4b_u8, 0xd9_u8])
  CLSID_RulesApplied = LibC::GUID.new(0x7c803920_u32, 0x7a53_u16, 0x4d26_u16, StaticArray[0x98_u8, 0xac_u8, 0xfd_u8, 0xd2_u8, 0x3e_u8, 0x6b_u8, 0x9e_u8, 0x1_u8])
  CLSID_RulesAppliedCollection = LibC::GUID.new(0x671926ee_u32, 0xc3cf_u16, 0x40af_u16, StaticArray[0xbe_u8, 0x8f_u8, 0x1c_u8, 0xba_u8, 0xee_u8, 0x64_u8, 0x86_u8, 0xe8_u8])
  CLSID_HTMLW3CComputedStyle = LibC::GUID.new(0x305106c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTransformList = LibC::GUID.new(0x305105b0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGCircleElement = LibC::GUID.new(0x30510578_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGEllipseElement = LibC::GUID.new(0x30510579_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGLineElement = LibC::GUID.new(0x3051057a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGRectElement = LibC::GUID.new(0x30510577_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPolygonElement = LibC::GUID.new(0x3051057b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPolylineElement = LibC::GUID.new(0x3051057c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGGElement = LibC::GUID.new(0x3051056f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGSymbolElement = LibC::GUID.new(0x30510571_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGDefsElement = LibC::GUID.new(0x30510570_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPathElement = LibC::GUID.new(0x305105b2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGPreserveAspectRatio = LibC::GUID.new(0x305105d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTextElement = LibC::GUID.new(0x305105df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAnimatedPreserveAspectRatio = LibC::GUID.new(0x305105ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGImageElement = LibC::GUID.new(0x305105cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGStopElement = LibC::GUID.new(0x305105d5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGGradientElement = LibC::GUID.new(0x305105d6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGLinearGradientElement = LibC::GUID.new(0x305105d2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGRadialGradientElement = LibC::GUID.new(0x305105d3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGMaskElement = LibC::GUID.new(0x305105e7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGMarkerElement = LibC::GUID.new(0x305105de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGZoomEvent = LibC::GUID.new(0x305105d9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGAElement = LibC::GUID.new(0x305105db_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGViewElement = LibC::GUID.new(0x305105dc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMediaError = LibC::GUID.new(0x3051070a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLTimeRanges = LibC::GUID.new(0x3051070b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLMediaElement = LibC::GUID.new(0x3051070c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLSourceElement = LibC::GUID.new(0x3051070d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAudioElement = LibC::GUID.new(0x3051070e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAudioElementFactory = LibC::GUID.new(0x305107ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLVideoElement = LibC::GUID.new(0x3051070f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGSwitchElement = LibC::GUID.new(0x305105d8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGDescElement = LibC::GUID.new(0x30510572_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTitleElement = LibC::GUID.new(0x30510573_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGMetadataElement = LibC::GUID.new(0x305105d7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGElementInstance = LibC::GUID.new(0x30510575_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGElementInstanceList = LibC::GUID.new(0x30510576_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMException = LibC::GUID.new(0x3051072c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_RangeException = LibC::GUID.new(0x3051072e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGException = LibC::GUID.new(0x30510730_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_EventException = LibC::GUID.new(0x3051073b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGScriptElement = LibC::GUID.new(0x305105e1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGStyleElement = LibC::GUID.new(0x305105d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTextContentElement = LibC::GUID.new(0x305105dd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTextPositioningElement = LibC::GUID.new(0x305105e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMDocumentType = LibC::GUID.new(0x30510739_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_NodeIterator = LibC::GUID.new(0x30510745_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_TreeWalker = LibC::GUID.new(0x30510747_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMProcessingInstruction = LibC::GUID.new(0x30510743_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLPerformance = LibC::GUID.new(0x3051074f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLPerformanceNavigation = LibC::GUID.new(0x30510751_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLPerformanceTiming = LibC::GUID.new(0x30510753_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_SVGTSpanElement = LibC::GUID.new(0x305105e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CTemplatePrinter = LibC::GUID.new(0x3050f6b3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPrintManagerTemplatePrinter = LibC::GUID.new(0x63619f54_u32, 0x9d71_u16, 0x4c23_u16, StaticArray[0xa0_u8, 0x8d_u8, 0x50_u8, 0xd7_u8, 0xf1_u8, 0x8d_u8, 0xb2_u8, 0xe9_u8])
  CLSID_SVGTextPathElement = LibC::GUID.new(0x305105eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_XMLSerializer = LibC::GUID.new(0x3051077e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMParser = LibC::GUID.new(0x30510782_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDOMXmlSerializerFactory = LibC::GUID.new(0x30510780_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMParserFactory = LibC::GUID.new(0x30510784_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLSemanticElement = LibC::GUID.new(0x305107b0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLProgressElement = LibC::GUID.new(0x3050f2d5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMSTransitionEvent = LibC::GUID.new(0x305107b6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMMSAnimationEvent = LibC::GUID.new(0x305107b8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_WebGeolocation = LibC::GUID.new(0x305107c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_WebGeocoordinates = LibC::GUID.new(0x305107c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_WebGeopositionError = LibC::GUID.new(0x305107ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_WebGeoposition = LibC::GUID.new(0x305107ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CClientCaps = LibC::GUID.new(0x7e8bc44e_u32, 0xaeff_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xc2_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbf_u8, 0xc4_u8])
  CLSID_DOMMSManipulationEvent = LibC::GUID.new(0x30510817_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_DOMCloseEvent = LibC::GUID.new(0x30510800_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_ApplicationCache = LibC::GUID.new(0x30510829_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HtmlDlgSafeHelper = LibC::GUID.new(0x3050f819_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_BlockFormats = LibC::GUID.new(0x3050f831_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_FontNames = LibC::GUID.new(0x3050f83a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLNamespace = LibC::GUID.new(0x3050f6bc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLNamespaceCollection = LibC::GUID.new(0x3050f6b9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_ThreadDialogProcParam = LibC::GUID.new(0x3050f5eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLDialog = LibC::GUID.new(0x3050f28a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLPopup = LibC::GUID.new(0x3050f667_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLAppBehavior = LibC::GUID.new(0x3050f5cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_OldHTMLDocument = LibC::GUID.new(0xd48a6ec9_u32, 0x6a4a_u16, 0x11cf_u16, StaticArray[0x94_u8, 0xa7_u8, 0x44_u8, 0x45_u8, 0x53_u8, 0x54_u8, 0x0_u8, 0x0_u8])
  CLSID_OldHTMLFormElement = LibC::GUID.new(0xd04d285_u32, 0x6bec_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x97_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x6d_u8, 0xa6_u8])
  CLSID_HTMLInputButtonElement = LibC::GUID.new(0x3050f2b4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLInputTextElement = LibC::GUID.new(0x3050f2ab_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLInputFileElement = LibC::GUID.new(0x3050f2ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLOptionButtonElement = LibC::GUID.new(0x3050f2be_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HTMLInputImage = LibC::GUID.new(0x3050f2c4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_HomePageSetting = LibC::GUID.new(0x374cede0_u32, 0x873a_u16, 0x4c4f_u16, StaticArray[0xbc_u8, 0x86_u8, 0xbc_u8, 0xc8_u8, 0xcf_u8, 0x51_u8, 0x16_u8, 0xa3_u8])
  CLSID_InternetExplorerManager = LibC::GUID.new(0xdf4fcc34_u32, 0x67a_u16, 0x4e0a_u16, StaticArray[0x83_u8, 0x52_u8, 0x4a_u8, 0x1a_u8, 0x50_u8, 0x95_u8, 0x34_u8, 0x6e_u8])
  CLSID_IEWebDriverManager = LibC::GUID.new(0x90314af2_u32, 0x5250_u16, 0x47b3_u16, StaticArray[0x89_u8, 0xd8_u8, 0x62_u8, 0x95_u8, 0xfc_u8, 0x23_u8, 0xbc_u8, 0x22_u8])
  CLSID_PeerFactory = LibC::GUID.new(0x3050f4cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_IntelliForms = LibC::GUID.new(0x613ab92e_u32, 0x16bf_u16, 0x11d2_u16, StaticArray[0xbc_u8, 0xa5_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x29_u8, 0xdb_u8])
  CLSID_HomePage = LibC::GUID.new(0x766bf2ae_u32, 0xd650_u16, 0x11d1_u16, StaticArray[0x98_u8, 0x11_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1d_u8, 0x2e_u8])
  CLSID_CPersistUserData = LibC::GUID.new(0x3050f48e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPersistDataPeer = LibC::GUID.new(0x3050f487_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPersistShortcut = LibC::GUID.new(0x3050f4c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPersistHistory = LibC::GUID.new(0x3050f4c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CPersistSnapshot = LibC::GUID.new(0x3050f4c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CDownloadBehavior = LibC::GUID.new(0x3050f5be_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_wfolders = LibC::GUID.new(0xbae31f9a_u32, 0x1b81_u16, 0x11d2_u16, StaticArray[0xa9_u8, 0x7a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xcb_u8, 0x2_u8])
  CLSID_AnchorClick = LibC::GUID.new(0x13d5413c_u32, 0x33b9_u16, 0x11d2_u16, StaticArray[0x95_u8, 0xa7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xcb_u8, 0x2_u8])
  CLSID_CLayoutRect = LibC::GUID.new(0x3050f664_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CDeviceRect = LibC::GUID.new(0x3050f6d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_CHeaderFooter = LibC::GUID.new(0x3050f6cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  CLSID_OpenServiceManager = LibC::GUID.new(0x98870b6_u32, 0x39ea_u16, 0x480b_u16, StaticArray[0xb8_u8, 0xb5_u8, 0xdd_u8, 0x1_u8, 0x67_u8, 0xc4_u8, 0xdb_u8, 0x59_u8])
  CLSID_OpenServiceActivityManager = LibC::GUID.new(0xc5efd803_u32, 0x50f8_u16, 0x43cd_u16, StaticArray[0x9a_u8, 0xb8_u8, 0xaa_u8, 0xfc_u8, 0x13_u8, 0x94_u8, 0xc9_u8, 0xe0_u8])
  CLSID_CoDitherToRGB8 = LibC::GUID.new(0xa860ce50_u32, 0x3910_u16, 0x11d0_u16, StaticArray[0x86_u8, 0xfc_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x13_u8, 0xf7_u8, 0x50_u8])
  CLSID_CoSniffStream = LibC::GUID.new(0x6a01fda0_u32, 0x30df_u16, 0x11d0_u16, StaticArray[0xb7_u8, 0x24_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6c_u8, 0x1a_u8, 0x1_u8])
  CLSID_CoMapMIMEToCLSID = LibC::GUID.new(0x30c3b080_u32, 0x30fb_u16, 0x11d0_u16, StaticArray[0xb7_u8, 0x24_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6c_u8, 0x1a_u8, 0x1_u8])

  type HTMLPersistEvents = Void
  type LayoutRectEvents = Void
  type HostDialogHelper = Void

  alias SHOWHTMLDIALOGFN = Proc(LibC::HANDLE, IMoniker, VARIANT*, LibC::LPWSTR, VARIANT*, HRESULT)
  alias SHOWHTMLDIALOGEXFN = Proc(LibC::HANDLE, IMoniker, UInt32, VARIANT*, LibC::LPWSTR, VARIANT*, HRESULT)
  alias SHOWMODELESSHTMLDIALOGFN = Proc(LibC::HANDLE, IMoniker, VARIANT*, VARIANT*, IHTMLWindow2*, HRESULT)
  alias IEREGISTERXMLNSFN = Proc(LibC::LPWSTR, Guid, LibC::BOOL, HRESULT)
  alias IEISXMLNSREGISTEREDFN = Proc(LibC::LPWSTR, Guid*, HRESULT)


  enum Htmldesignmode : Int32
    Htmldesignmodeinherit = -2
    Htmldesignmodeon = -1
    Htmldesignmodeoff = 0
    Htmldesignmode_max = 2147483647
  end

  enum Htmlzorder : Int32
    Htmlzorderfront = 0
    Htmlzorderback = 1
    Htmlzorder_max = 2147483647
  end

  enum Htmlclear : Int32
    Htmlclearnotset = 0
    Htmlclearall = 1
    Htmlclearleft = 2
    Htmlclearright = 3
    Htmlclearboth = 4
    Htmlclearnone = 5
    Htmlclear_max = 2147483647
  end

  enum Htmlcontrolalign : Int32
    Htmlcontrolalignnotset = 0
    Htmlcontrolalignleft = 1
    Htmlcontrolaligncenter = 2
    Htmlcontrolalignright = 3
    Htmlcontrolaligntexttop = 4
    Htmlcontrolalignabsmiddle = 5
    Htmlcontrolalignbaseline = 6
    Htmlcontrolalignabsbottom = 7
    Htmlcontrolalignbottom = 8
    Htmlcontrolalignmiddle = 9
    Htmlcontrolaligntop = 10
    Htmlcontrolalign_max = 2147483647
  end

  enum Htmlblockalign : Int32
    Htmlblockalignnotset = 0
    Htmlblockalignleft = 1
    Htmlblockaligncenter = 2
    Htmlblockalignright = 3
    Htmlblockalignjustify = 4
    Htmlblockalign_max = 2147483647
  end

  enum Htmlreadystate : Int32
    Htmlreadystateuninitialized = 0
    Htmlreadystateloading = 1
    Htmlreadystateloaded = 2
    Htmlreadystateinteractive = 3
    Htmlreadystatecomplete = 4
    Htmlreadystate_max = 2147483647
  end

  enum Htmlloop : Int32
    Htmllooploopinfinite = -1
    Htmlloop_max = 2147483647
  end

  enum Mediatype : Int32
    Mediatypenotset = 0
    Mediatypeall = 511
    Mediatypeaural = 1
    Mediatypebraille = 2
    Mediatypeembossed = 4
    Mediatypehandheld = 8
    Mediatypeprint = 16
    Mediatypeprojection = 32
    Mediatypescreen = 64
    Mediatypetty = 128
    Mediatypetv = 256
    Mediatype_max = 2147483647
  end

  enum DomConstructor : Int32
    DomConstructorObject = 0
    DomConstructorAttr = 1
    DomConstructorBehaviorUrnsCollection = 2
    DomConstructorBookmarkCollection = 3
    DomConstructorCompatibleInfo = 4
    DomConstructorCompatibleInfoCollection = 5
    DomConstructorControlRangeCollection = 6
    DomConstructorCSSCurrentStyleDeclaration = 7
    DomConstructorCSSRuleList = 8
    DomConstructorCSSRuleStyleDeclaration = 9
    DomConstructorCSSStyleDeclaration = 10
    DomConstructorCSSStyleRule = 11
    DomConstructorCSSStyleSheet = 12
    DomConstructorDataTransfer = 13
    DomConstructorDOMImplementation = 14
    DomConstructorElement = 15
    DomConstructorEvent = 16
    DomConstructorHistory = 17
    DomConstructorHTCElementBehaviorDefaults = 18
    DomConstructorHTMLAnchorElement = 19
    DomConstructorHTMLAreaElement = 20
    DomConstructorHTMLAreasCollection = 21
    DomConstructorHTMLBaseElement = 22
    DomConstructorHTMLBaseFontElement = 23
    DomConstructorHTMLBGSoundElement = 24
    DomConstructorHTMLBlockElement = 25
    DomConstructorHTMLBodyElement = 26
    DomConstructorHTMLBRElement = 27
    DomConstructorHTMLButtonElement = 28
    DomConstructorHTMLCollection = 29
    DomConstructorHTMLCommentElement = 30
    DomConstructorHTMLDDElement = 31
    DomConstructorHTMLDivElement = 32
    DomConstructorHTMLDocument = 33
    DomConstructorHTMLDListElement = 34
    DomConstructorHTMLDTElement = 35
    DomConstructorHTMLEmbedElement = 36
    DomConstructorHTMLFieldSetElement = 37
    DomConstructorHTMLFontElement = 38
    DomConstructorHTMLFormElement = 39
    DomConstructorHTMLFrameElement = 40
    DomConstructorHTMLFrameSetElement = 41
    DomConstructorHTMLGenericElement = 42
    DomConstructorHTMLHeadElement = 43
    DomConstructorHTMLHeadingElement = 44
    DomConstructorHTMLHRElement = 45
    DomConstructorHTMLHtmlElement = 46
    DomConstructorHTMLIFrameElement = 47
    DomConstructorHTMLImageElement = 48
    DomConstructorHTMLInputElement = 49
    DomConstructorHTMLIsIndexElement = 50
    DomConstructorHTMLLabelElement = 51
    DomConstructorHTMLLegendElement = 52
    DomConstructorHTMLLIElement = 53
    DomConstructorHTMLLinkElement = 54
    DomConstructorHTMLMapElement = 55
    DomConstructorHTMLMarqueeElement = 56
    DomConstructorHTMLMetaElement = 57
    DomConstructorHTMLModelessDialog = 58
    DomConstructorHTMLNamespaceInfo = 59
    DomConstructorHTMLNamespaceInfoCollection = 60
    DomConstructorHTMLNextIdElement = 61
    DomConstructorHTMLNoShowElement = 62
    DomConstructorHTMLObjectElement = 63
    DomConstructorHTMLOListElement = 64
    DomConstructorHTMLOptionElement = 65
    DomConstructorHTMLParagraphElement = 66
    DomConstructorHTMLParamElement = 67
    DomConstructorHTMLPhraseElement = 68
    DomConstructorHTMLPluginsCollection = 69
    DomConstructorHTMLPopup = 70
    DomConstructorHTMLScriptElement = 71
    DomConstructorHTMLSelectElement = 72
    DomConstructorHTMLSpanElement = 73
    DomConstructorHTMLStyleElement = 74
    DomConstructorHTMLTableCaptionElement = 75
    DomConstructorHTMLTableCellElement = 76
    DomConstructorHTMLTableColElement = 77
    DomConstructorHTMLTableElement = 78
    DomConstructorHTMLTableRowElement = 79
    DomConstructorHTMLTableSectionElement = 80
    DomConstructorHTMLTextAreaElement = 81
    DomConstructorHTMLTextElement = 82
    DomConstructorHTMLTitleElement = 83
    DomConstructorHTMLUListElement = 84
    DomConstructorHTMLUnknownElement = 85
    DomConstructorImage = 86
    DomConstructorLocation = 87
    DomConstructorNamedNodeMap = 88
    DomConstructorNavigator = 89
    DomConstructorNodeList = 90
    DomConstructorOption = 91
    DomConstructorScreen = 92
    DomConstructorSelection = 93
    DomConstructorStaticNodeList = 94
    DomConstructorStorage = 95
    DomConstructorStyleSheetList = 96
    DomConstructorStyleSheetPage = 97
    DomConstructorStyleSheetPageList = 98
    DomConstructorText = 99
    DomConstructorTextRange = 100
    DomConstructorTextRangeCollection = 101
    DomConstructorTextRectangle = 102
    DomConstructorTextRectangleList = 103
    DomConstructorWindow = 104
    DomConstructorXDomainRequest = 105
    DomConstructorXMLHttpRequest = 106
    DomConstructorMax = 107
    DomConstructor_Max = 2147483647
  end

  enum Styletexttransform : Int32
    Styletexttransformnotset = 0
    Styletexttransformcapitalize = 1
    Styletexttransformlowercase = 2
    Styletexttransformuppercase = 3
    Styletexttransformnone = 4
    Styletexttransform_max = 2147483647
  end

  enum Styledatarepeat : Int32
    Styledatarepeatnone = 0
    Styledatarepeatinner = 1
    Styledatarepeat_max = 2147483647
  end

  enum Styleoverflow : Int32
    Styleoverflownotset = 0
    Styleoverflowauto = 1
    Styleoverflowhidden = 2
    Styleoverflowvisible = 3
    Styleoverflowscroll = 4
    Styleoverflow_max = 2147483647
  end

  enum Stylemsoverflowstyle : Int32
    Stylemsoverflowstylenotset = 0
    Stylemsoverflowstyleauto = 1
    Stylemsoverflowstylenone = 2
    Stylemsoverflowstylescrollbar = 3
    Stylemsoverflowstylemsautohidingscrollbar = 4
    Stylemsoverflowstyle_max = 2147483647
  end

  enum Styletablelayout : Int32
    Styletablelayoutnotset = 0
    Styletablelayoutauto = 1
    Styletablelayoutfixed = 2
    Styletablelayout_max = 2147483647
  end

  enum Stylebordercollapse : Int32
    Stylebordercollapsenotset = 0
    Stylebordercollapseseparate = 1
    Stylebordercollapsecollapse = 2
    Stylebordercollapse_max = 2147483647
  end

  enum Stylecaptionside : Int32
    Stylecaptionsidenotset = 0
    Stylecaptionsidetop = 1
    Stylecaptionsidebottom = 2
    Stylecaptionsideleft = 3
    Stylecaptionsideright = 4
    Stylecaptionside_max = 2147483647
  end

  enum Styleemptycells : Int32
    Styleemptycellsnotset = 0
    Styleemptycellsshow = 1
    Styleemptycellshide = 2
    Styleemptycells_max = 2147483647
  end

  enum Stylefontstyle : Int32
    Stylefontstylenotset = 0
    Stylefontstyleitalic = 1
    Stylefontstyleoblique = 2
    Stylefontstylenormal = 3
    Stylefontstyle_max = 2147483647
  end

  enum Stylefontvariant : Int32
    Stylefontvariantnotset = 0
    Stylefontvariantsmallcaps = 1
    Stylefontvariantnormal = 2
    Stylefontvariant_max = 2147483647
  end

  enum Stylebackgroundrepeat : Int32
    Stylebackgroundrepeatrepeat = 0
    Stylebackgroundrepeatrepeatx = 1
    Stylebackgroundrepeatrepeaty = 2
    Stylebackgroundrepeatnorepeat = 3
    Stylebackgroundrepeatnotset = 4
    Stylebackgroundrepeat_max = 2147483647
  end

  enum Stylebackgroundattachment : Int32
    Stylebackgroundattachmentfixed = 0
    Stylebackgroundattachmentscroll = 1
    Stylebackgroundattachmentnotset = 2
    Stylebackgroundattachment_max = 2147483647
  end

  enum Stylebackgroundattachment3 : Int32
    Stylebackgroundattachment3fixed = 0
    Stylebackgroundattachment3scroll = 1
    Stylebackgroundattachment3local = 2
    Stylebackgroundattachment3notset = 3
    Stylebackgroundattachment3_max = 2147483647
  end

  enum Stylebackgroundclip : Int32
    Stylebackgroundclipborderbox = 0
    Stylebackgroundclippaddingbox = 1
    Stylebackgroundclipcontentbox = 2
    Stylebackgroundclipnotset = 3
    Stylebackgroundclip_max = 2147483647
  end

  enum Stylebackgroundorigin : Int32
    Stylebackgroundoriginborderbox = 0
    Stylebackgroundoriginpaddingbox = 1
    Stylebackgroundorigincontentbox = 2
    Stylebackgroundoriginnotset = 3
    Stylebackgroundorigin_max = 2147483647
  end

  enum Styleverticalalign : Int32
    Styleverticalalignauto = 0
    Styleverticalalignbaseline = 1
    Styleverticalalignsub = 2
    Styleverticalalignsuper = 3
    Styleverticalaligntop = 4
    Styleverticalaligntexttop = 5
    Styleverticalalignmiddle = 6
    Styleverticalalignbottom = 7
    Styleverticalaligntextbottom = 8
    Styleverticalaligninherit = 9
    Styleverticalalignnotset = 10
    Styleverticalalign_max = 2147483647
  end

  enum Stylefontweight : Int32
    Stylefontweightnotset = 0
    Stylefontweight100 = 1
    Stylefontweight200 = 2
    Stylefontweight300 = 3
    Stylefontweight400 = 4
    Stylefontweight500 = 5
    Stylefontweight600 = 6
    Stylefontweight700 = 7
    Stylefontweight800 = 8
    Stylefontweight900 = 9
    Stylefontweightnormal = 10
    Stylefontweightbold = 11
    Stylefontweightbolder = 12
    Stylefontweightlighter = 13
    Stylefontweight_max = 2147483647
  end

  enum Stylefontsize : Int32
    Stylefontsizexxsmall = 0
    Stylefontsizexsmall = 1
    Stylefontsizesmall = 2
    Stylefontsizemedium = 3
    Stylefontsizelarge = 4
    Stylefontsizexlarge = 5
    Stylefontsizexxlarge = 6
    Stylefontsizesmaller = 7
    Stylefontsizelarger = 8
    Stylefontsize_max = 2147483647
  end

  enum Stylezindex : Int32
    Stylezindexauto = -2147483647
    Stylezindex_max = 2147483647
  end

  enum Stylewidowsorphans : Int32
    Stylewidowsorphansnotset = -2147483647
    Stylewidowsorphans_max = 2147483647
  end

  enum Styleauto : Int32
    Styleautoauto = 0
    Styleauto_max = 2147483647
  end

  enum Stylenone : Int32
    Stylenonenone = 0
    Stylenone_max = 2147483647
  end

  enum Stylenormal : Int32
    Stylenormalnormal = 0
    Stylenormal_max = 2147483647
  end

  enum Styleborderwidth : Int32
    Styleborderwidththin = 0
    Styleborderwidthmedium = 1
    Styleborderwidththick = 2
    Styleborderwidth_max = 2147483647
  end

  enum Styleposition : Int32
    Stylepositionnotset = 0
    Stylepositionstatic = 1
    Stylepositionrelative = 2
    Stylepositionabsolute = 3
    Stylepositionfixed = 4
    Stylepositionmspage = 5
    Stylepositionmsdevicefixed = 6
    Styleposition_max = 2147483647
  end

  enum Styleborderstyle : Int32
    Styleborderstylenotset = 0
    Styleborderstyledotted = 1
    Styleborderstyledashed = 2
    Styleborderstylesolid = 3
    Styleborderstyledouble = 4
    Styleborderstylegroove = 5
    Styleborderstyleridge = 6
    Styleborderstyleinset = 7
    Styleborderstyleoutset = 8
    Styleborderstylewindowinset = 9
    Styleborderstylenone = 10
    Styleborderstylehidden = 11
    Styleborderstyle_max = 2147483647
  end

  enum Styleoutlinestyle : Int32
    Styleoutlinestylenotset = 0
    Styleoutlinestyledotted = 1
    Styleoutlinestyledashed = 2
    Styleoutlinestylesolid = 3
    Styleoutlinestyledouble = 4
    Styleoutlinestylegroove = 5
    Styleoutlinestyleridge = 6
    Styleoutlinestyleinset = 7
    Styleoutlinestyleoutset = 8
    Styleoutlinestylewindowinset = 9
    Styleoutlinestylenone = 10
    Styleoutlinestyle_max = 2147483647
  end

  enum Stylestylefloat : Int32
    Stylestylefloatnotset = 0
    Stylestylefloatleft = 1
    Stylestylefloatright = 2
    Stylestylefloatnone = 3
    Stylestylefloat_max = 2147483647
  end

  enum Styledisplay : Int32
    Styledisplaynotset = 0
    Styledisplayblock = 1
    Styledisplayinline = 2
    Styledisplaylistitem = 3
    Styledisplaynone = 4
    Styledisplaytableheadergroup = 5
    Styledisplaytablefootergroup = 6
    Styledisplayinlineblock = 7
    Styledisplaytable = 8
    Styledisplayinlinetable = 9
    Styledisplaytablerow = 10
    Styledisplaytablerowgroup = 11
    Styledisplaytablecolumn = 12
    Styledisplaytablecolumngroup = 13
    Styledisplaytablecell = 14
    Styledisplaytablecaption = 15
    Styledisplayrunin = 16
    Styledisplayruby = 17
    Styledisplayrubybase = 18
    Styledisplayrubytext = 19
    Styledisplayrubybasecontainer = 20
    Styledisplayrubytextcontainer = 21
    Styledisplaymsflexbox = 22
    Styledisplaymsinlineflexbox = 23
    Styledisplaymsgrid = 24
    Styledisplaymsinlinegrid = 25
    Styledisplayflex = 26
    Styledisplayinlineflex = 27
    Styledisplaywebkitbox = 28
    Styledisplaywebkitinlinebox = 29
    Styledisplay_max = 2147483647
  end

  enum Stylevisibility : Int32
    Stylevisibilitynotset = 0
    Stylevisibilityinherit = 1
    Stylevisibilityvisible = 2
    Stylevisibilityhidden = 3
    Stylevisibilitycollapse = 4
    Stylevisibility_max = 2147483647
  end

  enum Styleliststyletype : Int32
    Styleliststyletypenotset = 0
    Styleliststyletypedisc = 1
    Styleliststyletypecircle = 2
    Styleliststyletypesquare = 3
    Styleliststyletypedecimal = 4
    Styleliststyletypelowerroman = 5
    Styleliststyletypeupperroman = 6
    Styleliststyletypeloweralpha = 7
    Styleliststyletypeupperalpha = 8
    Styleliststyletypenone = 9
    Styleliststyletypedecimalleadingzero = 10
    Styleliststyletypegeorgian = 11
    Styleliststyletypearmenian = 12
    Styleliststyletypeupperlatin = 13
    Styleliststyletypelowerlatin = 14
    Styleliststyletypeuppergreek = 15
    Styleliststyletypelowergreek = 16
    Styleliststyletype_max = 2147483647
  end

  enum Styleliststyleposition : Int32
    Styleliststylepositionnotset = 0
    Styleliststylepositioninside = 1
    Styleliststylepositionoutside = 2
    Styleliststyleposition_max = 2147483647
  end

  enum Stylewhitespace : Int32
    Stylewhitespacenotset = 0
    Stylewhitespacenormal = 1
    Stylewhitespacepre = 2
    Stylewhitespacenowrap = 3
    Stylewhitespacepreline = 4
    Stylewhitespaceprewrap = 5
    Stylewhitespace_max = 2147483647
  end

  enum Stylepagebreak : Int32
    Stylepagebreaknotset = 0
    Stylepagebreakauto = 1
    Stylepagebreakalways = 2
    Stylepagebreakleft = 3
    Stylepagebreakright = 4
    Stylepagebreakavoid = 5
    Stylepagebreak_max = 2147483647
  end

  enum Stylepagebreakinside : Int32
    Stylepagebreakinsidenotset = 0
    Stylepagebreakinsideauto = 1
    Stylepagebreakinsideavoid = 2
    Stylepagebreakinside_max = 2147483647
  end

  enum Stylecursor : Int32
    Stylecursorauto = 0
    Stylecursorcrosshair = 1
    Stylecursordefault = 2
    Stylecursorhand = 3
    Stylecursormove = 4
    Stylecursore_resize = 5
    Stylecursorne_resize = 6
    Stylecursornw_resize = 7
    Stylecursorn_resize = 8
    Stylecursorse_resize = 9
    Stylecursorsw_resize = 10
    Stylecursors_resize = 11
    Stylecursorw_resize = 12
    Stylecursortext = 13
    Stylecursorwait = 14
    Stylecursorhelp = 15
    Stylecursorpointer = 16
    Stylecursorprogress = 17
    Stylecursornot_allowed = 18
    Stylecursorno_drop = 19
    Stylecursorvertical_text = 20
    Stylecursorall_scroll = 21
    Stylecursorcol_resize = 22
    Stylecursorrow_resize = 23
    Stylecursornone = 24
    Stylecursorcontext_menu = 25
    Stylecursorew_resize = 26
    Stylecursorns_resize = 27
    Stylecursornesw_resize = 28
    Stylecursornwse_resize = 29
    Stylecursorcell = 30
    Stylecursorcopy = 31
    Stylecursoralias = 32
    Stylecursorcustom = 33
    Stylecursornotset = 34
    Stylecursor_max = 2147483647
  end

  enum Styledir : Int32
    Styledirnotset = 0
    Styledirlefttoright = 1
    Styledirrighttoleft = 2
    Styledirinherit = 3
    Styledir_max = 2147483647
  end

  enum Stylebidi : Int32
    Stylebidinotset = 0
    Stylebidinormal = 1
    Stylebidiembed = 2
    Stylebidioverride = 3
    Stylebidiinherit = 4
    Stylebidi_max = 2147483647
  end

  enum Styleimemode : Int32
    Styleimemodeauto = 0
    Styleimemodeactive = 1
    Styleimemodeinactive = 2
    Styleimemodedisabled = 3
    Styleimemodenotset = 4
    Styleimemode_max = 2147483647
  end

  enum Stylerubyalign : Int32
    Stylerubyalignnotset = 0
    Stylerubyalignauto = 1
    Stylerubyalignleft = 2
    Stylerubyaligncenter = 3
    Stylerubyalignright = 4
    Stylerubyaligndistributeletter = 5
    Stylerubyaligndistributespace = 6
    Stylerubyalignlineedge = 7
    Stylerubyalign_max = 2147483647
  end

  enum Stylerubyposition : Int32
    Stylerubypositionnotset = 0
    Stylerubypositionabove = 1
    Stylerubypositioninline = 2
    Stylerubyposition_max = 2147483647
  end

  enum Stylerubyoverhang : Int32
    Stylerubyoverhangnotset = 0
    Stylerubyoverhangauto = 1
    Stylerubyoverhangwhitespace = 2
    Stylerubyoverhangnone = 3
    Stylerubyoverhang_max = 2147483647
  end

  enum Stylelayoutgridchar : Int32
    Stylelayoutgridcharnotset = 0
    Stylelayoutgridcharauto = 1
    Stylelayoutgridcharnone = 2
    Stylelayoutgridchar_max = 2147483647
  end

  enum Stylelayoutgridline : Int32
    Stylelayoutgridlinenotset = 0
    Stylelayoutgridlineauto = 1
    Stylelayoutgridlinenone = 2
    Stylelayoutgridline_max = 2147483647
  end

  enum Stylelayoutgridmode : Int32
    Stylelayoutgridmodenotset = 0
    Stylelayoutgridmodechar = 1
    Stylelayoutgridmodeline = 2
    Stylelayoutgridmodeboth = 3
    Stylelayoutgridmodenone = 4
    Stylelayoutgridmode_max = 2147483647
  end

  enum Stylelayoutgridtype : Int32
    Stylelayoutgridtypenotset = 0
    Stylelayoutgridtypeloose = 1
    Stylelayoutgridtypestrict = 2
    Stylelayoutgridtypefixed = 3
    Stylelayoutgridtype_max = 2147483647
  end

  enum Stylelinebreak : Int32
    Stylelinebreaknotset = 0
    Stylelinebreaknormal = 1
    Stylelinebreakstrict = 2
    Stylelinebreak_max = 2147483647
  end

  enum Stylewordbreak : Int32
    Stylewordbreaknotset = 0
    Stylewordbreaknormal = 1
    Stylewordbreakbreakall = 2
    Stylewordbreakkeepall = 3
    Stylewordbreak_max = 2147483647
  end

  enum Stylewordwrap : Int32
    Stylewordwrapnotset = 0
    Stylewordwrapoff = 1
    Stylewordwrapon = 2
    Stylewordwrap_max = 2147483647
  end

  enum Styletextjustify : Int32
    Styletextjustifynotset = 0
    Styletextjustifyinterword = 1
    Styletextjustifynewspaper = 2
    Styletextjustifydistribute = 3
    Styletextjustifydistributealllines = 4
    Styletextjustifyinterideograph = 5
    Styletextjustifyintercluster = 6
    Styletextjustifykashida = 7
    Styletextjustifyauto = 8
    Styletextjustify_max = 2147483647
  end

  enum Styletextalignlast : Int32
    Styletextalignlastnotset = 0
    Styletextalignlastleft = 1
    Styletextalignlastcenter = 2
    Styletextalignlastright = 3
    Styletextalignlastjustify = 4
    Styletextalignlastauto = 5
    Styletextalignlast_max = 2147483647
  end

  enum Styletextjustifytrim : Int32
    Styletextjustifytrimnotset = 0
    Styletextjustifytrimnone = 1
    Styletextjustifytrimpunctuation = 2
    Styletextjustifytrimpunctandkana = 3
    Styletextjustifytrim_max = 2147483647
  end

  enum Styleaccelerator : Int32
    Styleacceleratorfalse = 0
    Styleacceleratortrue = 1
    Styleaccelerator_max = 2147483647
  end

  enum Stylelayoutflow : Int32
    Stylelayoutflowhorizontal = 0
    Stylelayoutflowverticalideographic = 1
    Stylelayoutflownotset = 2
    Stylelayoutflow_max = 2147483647
  end

  enum Styleblockprogression : Int32
    Styleblockprogressiontb = 0
    Styleblockprogressionrl = 1
    Styleblockprogressionbt = 2
    Styleblockprogressionlr = 3
    Styleblockprogressionnotset = 4
    Styleblockprogression_max = 2147483647
  end

  enum Stylewritingmode : Int32
    Stylewritingmodelrtb = 0
    Stylewritingmodetbrl = 1
    Stylewritingmoderltb = 2
    Stylewritingmodebtrl = 3
    Stylewritingmodenotset = 4
    Stylewritingmodetblr = 5
    Stylewritingmodebtlr = 6
    Stylewritingmodelrbt = 7
    Stylewritingmoderlbt = 8
    Stylewritingmodelr = 9
    Stylewritingmoderl = 10
    Stylewritingmodetb = 11
    Stylewritingmode_max = 2147483647
  end

  enum Stylebool : Int32
    Styleboolfalse = 0
    Stylebooltrue = 1
    Stylebool_max = 2147483647
  end

  enum Styletextunderlineposition : Int32
    Styletextunderlinepositionbelow = 0
    Styletextunderlinepositionabove = 1
    Styletextunderlinepositionauto = 2
    Styletextunderlinepositionnotset = 3
    Styletextunderlineposition_max = 2147483647
  end

  enum Styletextoverflow : Int32
    Styletextoverflowclip = 0
    Styletextoverflowellipsis = 1
    Styletextoverflownotset = 2
    Styletextoverflow_max = 2147483647
  end

  enum Styleinterpolation : Int32
    Styleinterpolationnotset = 0
    Styleinterpolationnn = 1
    Styleinterpolationbch = 2
    Styleinterpolation_max = 2147483647
  end

  enum Styleboxsizing : Int32
    Styleboxsizingnotset = 0
    Styleboxsizingcontentbox = 1
    Styleboxsizingborderbox = 2
    Styleboxsizing_max = 2147483647
  end

  enum Styleflex : Int32
    Styleflexnone = 0
    Styleflexnotset = 1
    Styleflex_max = 2147483647
  end

  enum Styleflexbasis : Int32
    Styleflexbasisauto = 0
    Styleflexbasisnotset = 1
    Styleflexbasis_max = 2147483647
  end

  enum Styleflexdirection : Int32
    Styleflexdirectionrow = 0
    Styleflexdirectionrowreverse = 1
    Styleflexdirectioncolumn = 2
    Styleflexdirectioncolumnreverse = 3
    Styleflexdirectionnotset = 4
    Styleflexdirection_max = 2147483647
  end

  enum Stylewebkitboxorient : Int32
    Stylewebkitboxorienthorizontal = 0
    Stylewebkitboxorientinlineaxis = 1
    Stylewebkitboxorientvertical = 2
    Stylewebkitboxorientblockaxis = 3
    Stylewebkitboxorientnotset = 4
    Stylewebkitboxorient_max = 2147483647
  end

  enum Stylewebkitboxdirection : Int32
    Stylewebkitboxdirectionnormal = 0
    Stylewebkitboxdirectionreverse = 1
    Stylewebkitboxdirectionnotset = 2
    Stylewebkitboxdirection_max = 2147483647
  end

  enum Styleflexwrap : Int32
    Styleflexwrapnowrap = 0
    Styleflexwrapwrap = 1
    Styleflexwrapwrapreverse = 2
    Styleflexwrapnotset = 3
    Styleflexwrap_max = 2147483647
  end

  enum Stylealignitems : Int32
    Stylealignitemsflexstart = 0
    Stylealignitemsflexend = 1
    Stylealignitemscenter = 2
    Stylealignitemsbaseline = 3
    Stylealignitemsstretch = 4
    Stylealignitemsnotset = 5
    Stylealignitems_max = 2147483647
  end

  enum Stylemsflexalign : Int32
    Stylemsflexalignstart = 0
    Stylemsflexalignend = 1
    Stylemsflexaligncenter = 2
    Stylemsflexalignbaseline = 3
    Stylemsflexalignstretch = 4
    Stylemsflexalignnotset = 5
    Stylemsflexalign_max = 2147483647
  end

  enum Stylemsflexitemalign : Int32
    Stylemsflexitemalignstart = 0
    Stylemsflexitemalignend = 1
    Stylemsflexitemaligncenter = 2
    Stylemsflexitemalignbaseline = 3
    Stylemsflexitemalignstretch = 4
    Stylemsflexitemalignauto = 5
    Stylemsflexitemalignnotset = 6
    Stylemsflexitemalign_max = 2147483647
  end

  enum Stylealignself : Int32
    Stylealignselfflexstart = 0
    Stylealignselfflexend = 1
    Stylealignselfcenter = 2
    Stylealignselfbaseline = 3
    Stylealignselfstretch = 4
    Stylealignselfauto = 5
    Stylealignselfnotset = 6
    Stylealignself_max = 2147483647
  end

  enum Stylejustifycontent : Int32
    Stylejustifycontentflexstart = 0
    Stylejustifycontentflexend = 1
    Stylejustifycontentcenter = 2
    Stylejustifycontentspacebetween = 3
    Stylejustifycontentspacearound = 4
    Stylejustifycontentnotset = 5
    Stylejustifycontent_max = 2147483647
  end

  enum Stylemsflexpack : Int32
    Stylemsflexpackstart = 0
    Stylemsflexpackend = 1
    Stylemsflexpackcenter = 2
    Stylemsflexpackjustify = 3
    Stylemsflexpackdistribute = 4
    Stylemsflexpacknotset = 5
    Stylemsflexpack_max = 2147483647
  end

  enum Stylewebkitboxpack : Int32
    Stylewebkitboxpackstart = 0
    Stylewebkitboxpackend = 1
    Stylewebkitboxpackcenter = 2
    Stylewebkitboxpackjustify = 3
    Stylewebkitboxpacknotset = 5
    Stylewebkitboxpack_max = 2147483647
  end

  enum Stylemsflexlinepack : Int32
    Stylemsflexlinepackstart = 0
    Stylemsflexlinepackend = 1
    Stylemsflexlinepackcenter = 2
    Stylemsflexlinepackjustify = 3
    Stylemsflexlinepackdistribute = 4
    Stylemsflexlinepackstretch = 5
    Stylemsflexlinepacknotset = 6
    Stylemsflexlinepack_max = 2147483647
  end

  enum Stylealigncontent : Int32
    Stylealigncontentflexstart = 0
    Stylealigncontentflexend = 1
    Stylealigncontentcenter = 2
    Stylealigncontentspacebetween = 3
    Stylealigncontentspacearound = 4
    Stylealigncontentstretch = 5
    Stylealigncontentnotset = 6
    Stylealigncontent_max = 2147483647
  end

  enum Stylecolumnfill : Int32
    Stylecolumnfillauto = 0
    Stylecolumnfillbalance = 1
    Stylecolumnfillnotset = 2
    Stylecolumnfill_max = 2147483647
  end

  enum Stylecolumnspan : Int32
    Stylecolumnspannone = 0
    Stylecolumnspanall = 1
    Stylecolumnspanone = 2
    Stylecolumnspannotset = 3
    Stylecolumnspan_max = 2147483647
  end

  enum Stylebreak : Int32
    Stylebreaknotset = 0
    Stylebreakauto = 1
    Stylebreakalways = 2
    Stylebreakavoid = 3
    Stylebreakleft = 4
    Stylebreakright = 5
    Stylebreakpage = 6
    Stylebreakcolumn = 7
    Stylebreakavoidpage = 8
    Stylebreakavoidcolumn = 9
    Stylebreak_max = 2147483647
  end

  enum Stylebreakinside : Int32
    Stylebreakinsidenotset = 0
    Stylebreakinsideauto = 1
    Stylebreakinsideavoid = 2
    Stylebreakinsideavoidpage = 3
    Stylebreakinsideavoidcolumn = 4
    Stylebreakinside_max = 2147483647
  end

  enum Stylemsscrollchaining : Int32
    Stylemsscrollchainingnotset = 0
    Stylemsscrollchainingnone = 1
    Stylemsscrollchainingchained = 2
    Stylemsscrollchaining_max = 2147483647
  end

  enum Stylemscontentzooming : Int32
    Stylemscontentzoomingnotset = 0
    Stylemscontentzoomingnone = 1
    Stylemscontentzoomingzoom = 2
    Stylemscontentzooming_max = 2147483647
  end

  enum Stylemscontentzoomsnaptype : Int32
    Stylemscontentzoomsnaptypenotset = 0
    Stylemscontentzoomsnaptypenone = 1
    Stylemscontentzoomsnaptypemandatory = 2
    Stylemscontentzoomsnaptypeproximity = 3
    Stylemscontentzoomsnaptype_max = 2147483647
  end

  enum Stylemsscrollrails : Int32
    Stylemsscrollrailsnotset = 0
    Stylemsscrollrailsnone = 1
    Stylemsscrollrailsrailed = 2
    Stylemsscrollrails_max = 2147483647
  end

  enum Stylemscontentzoomchaining : Int32
    Stylemscontentzoomchainingnotset = 0
    Stylemscontentzoomchainingnone = 1
    Stylemscontentzoomchainingchained = 2
    Stylemscontentzoomchaining_max = 2147483647
  end

  enum Stylemsscrollsnaptype : Int32
    Stylemsscrollsnaptypenotset = 0
    Stylemsscrollsnaptypenone = 1
    Stylemsscrollsnaptypemandatory = 2
    Stylemsscrollsnaptypeproximity = 3
    Stylemsscrollsnaptype_max = 2147483647
  end

  enum Stylegridcolumn : Int32
    Stylegridcolumnnotset = 0
    Stylegridcolumn_max = 2147483647
  end

  enum Stylegridcolumnalign : Int32
    Stylegridcolumnaligncenter = 0
    Stylegridcolumnalignend = 1
    Stylegridcolumnalignstart = 2
    Stylegridcolumnalignstretch = 3
    Stylegridcolumnalignnotset = 4
    Stylegridcolumnalign_max = 2147483647
  end

  enum Stylegridcolumnspan : Int32
    Stylegridcolumnspannotset = 0
    Stylegridcolumnspan_max = 2147483647
  end

  enum Stylegridrow : Int32
    Stylegridrownotset = 0
    Stylegridrow_max = 2147483647
  end

  enum Stylegridrowalign : Int32
    Stylegridrowaligncenter = 0
    Stylegridrowalignend = 1
    Stylegridrowalignstart = 2
    Stylegridrowalignstretch = 3
    Stylegridrowalignnotset = 4
    Stylegridrowalign_max = 2147483647
  end

  enum Stylegridrowspan : Int32
    Stylegridrowspannotset = 0
    Stylegridrowspan_max = 2147483647
  end

  enum Stylewrapthrough : Int32
    Stylewrapthroughnotset = 0
    Stylewrapthroughwrap = 1
    Stylewrapthroughnone = 2
    Stylewrapthrough_max = 2147483647
  end

  enum Stylewrapflow : Int32
    Stylewrapflownotset = 0
    Stylewrapflowauto = 1
    Stylewrapflowboth = 2
    Stylewrapflowstart = 3
    Stylewrapflowend = 4
    Stylewrapflowclear = 5
    Stylewrapflowminimum = 6
    Stylewrapflowmaximum = 7
    Stylewrapflow_max = 2147483647
  end

  enum Stylealignmentbaseline : Int32
    Stylealignmentbaselinenotset = 0
    Stylealignmentbaselineafteredge = 1
    Stylealignmentbaselinealphabetic = 2
    Stylealignmentbaselineauto = 3
    Stylealignmentbaselinebaseline = 4
    Stylealignmentbaselinebeforeedge = 5
    Stylealignmentbaselinecentral = 6
    Stylealignmentbaselinehanging = 7
    Stylealignmentbaselinemathematical = 8
    Stylealignmentbaselinemiddle = 9
    Stylealignmentbaselinetextafteredge = 10
    Stylealignmentbaselinetextbeforeedge = 11
    Stylealignmentbaselineideographic = 12
    Stylealignmentbaseline_max = 2147483647
  end

  enum Stylebaselineshift : Int32
    Stylebaselineshiftbaseline = 0
    Stylebaselineshiftsub = 1
    Stylebaselineshiftsuper = 2
    Stylebaselineshift_max = 2147483647
  end

  enum Stylecliprule : Int32
    Stylecliprulenotset = 0
    Stylecliprulenonzero = 1
    Styleclipruleevenodd = 2
    Stylecliprule_max = 2147483647
  end

  enum Styledominantbaseline : Int32
    Styledominantbaselinenotset = 0
    Styledominantbaselinealphabetic = 1
    Styledominantbaselineauto = 2
    Styledominantbaselinecentral = 3
    Styledominantbaselinehanging = 4
    Styledominantbaselineideographic = 5
    Styledominantbaselinemathematical = 6
    Styledominantbaselinemiddle = 7
    Styledominantbaselinenochange = 8
    Styledominantbaselineresetsize = 9
    Styledominantbaselinetextafteredge = 10
    Styledominantbaselinetextbeforeedge = 11
    Styledominantbaselineusescript = 12
    Styledominantbaseline_max = 2147483647
  end

  enum Stylefillrule : Int32
    Stylefillrulenotset = 0
    Stylefillrulenonzero = 1
    Stylefillruleevenodd = 2
    Stylefillrule_max = 2147483647
  end

  enum Stylefontstretch : Int32
    Stylefontstretchnotset = 0
    Stylefontstretchwider = 1
    Stylefontstretchnarrower = 2
    Stylefontstretchultracondensed = 3
    Stylefontstretchextracondensed = 4
    Stylefontstretchcondensed = 5
    Stylefontstretchsemicondensed = 6
    Stylefontstretchnormal = 7
    Stylefontstretchsemiexpanded = 8
    Stylefontstretchexpanded = 9
    Stylefontstretchextraexpanded = 10
    Stylefontstretchultraexpanded = 11
    Stylefontstretch_max = 2147483647
  end

  enum Stylepointerevents : Int32
    Stylepointereventsnotset = 0
    Stylepointereventsvisiblepainted = 1
    Stylepointereventsvisiblefill = 2
    Stylepointereventsvisiblestroke = 3
    Stylepointereventsvisible = 4
    Stylepointereventspainted = 5
    Stylepointereventsfill = 6
    Stylepointereventsstroke = 7
    Stylepointereventsall = 8
    Stylepointereventsnone = 9
    Stylepointereventsinitial = 10
    Stylepointereventsauto = 11
    Stylepointerevents_max = 2147483647
  end

  enum Styleenablebackground : Int32
    Styleenablebackgroundnotset = 0
    Styleenablebackgroundaccumulate = 1
    Styleenablebackgroundnew = 2
    Styleenablebackgroundinherit = 3
    Styleenablebackground_max = 2147483647
  end

  enum Stylestrokelinecap : Int32
    Stylestrokelinecapnotset = 0
    Stylestrokelinecapbutt = 1
    Stylestrokelinecapround = 2
    Stylestrokelinecapsquare = 3
    Stylestrokelinecap_max = 2147483647
  end

  enum Stylestrokelinejoin : Int32
    Stylestrokelinejoinnotset = 0
    Stylestrokelinejoinmiter = 1
    Stylestrokelinejoinround = 2
    Stylestrokelinejoinbevel = 3
    Stylestrokelinejoin_max = 2147483647
  end

  enum Styletextanchor : Int32
    Styletextanchornotset = 0
    Styletextanchorstart = 1
    Styletextanchormiddle = 2
    Styletextanchorend = 3
    Styletextanchor_max = 2147483647
  end

  enum Styleattrtype : Int32
    Styleattrtypestring = 0
    Styleattrtypecolor = 1
    Styleattrtypeurl = 2
    Styleattrtypeinteger = 3
    Styleattrtypenumber = 4
    Styleattrtypelength = 5
    Styleattrtypepx = 6
    Styleattrtypeem = 7
    Styleattrtypeex = 8
    Styleattrtypein = 9
    Styleattrtypecm = 10
    Styleattrtypemm = 11
    Styleattrtypept = 12
    Styleattrtypepc = 13
    Styleattrtyperem = 14
    Styleattrtypech = 15
    Styleattrtypevh = 16
    Styleattrtypevw = 17
    Styleattrtypevmin = 18
    Styleattrtypepercentage = 19
    Styleattrtypeangle = 20
    Styleattrtypedeg = 21
    Styleattrtyperad = 22
    Styleattrtypegrad = 23
    Styleattrtypetime = 24
    Styleattrtypes = 25
    Styleattrtypems = 26
    Styleattrtype_max = 2147483647
  end

  enum Styleinitialcolor : Int32
    Styleinitialcolornoinitial = 0
    Styleinitialcolorcolorproperty = 1
    Styleinitialcolortransparent = 2
    Styleinitialcolorinvert = 3
    Styleinitialcolor_max = 2147483647
  end

  enum Styleinitialstring : Int32
    Styleinitialstringnoinitial = 0
    Styleinitialstringnone = 1
    Styleinitialstringauto = 2
    Styleinitialstringnormal = 3
    Styleinitialstring_max = 2147483647
  end

  enum Styletransformoriginx : Int32
    Styletransformoriginxnotset = 0
    Styletransformoriginxleft = 1
    Styletransformoriginxcenter = 2
    Styletransformoriginxright = 3
    Styletransformoriginx_max = 2147483647
  end

  enum Styletransformoriginy : Int32
    Styletransformoriginynotset = 0
    Styletransformoriginytop = 1
    Styletransformoriginycenter = 2
    Styletransformoriginybottom = 3
    Styletransformoriginy_max = 2147483647
  end

  enum Styleperspectiveoriginx : Int32
    Styleperspectiveoriginxnotset = 0
    Styleperspectiveoriginxleft = 1
    Styleperspectiveoriginxcenter = 2
    Styleperspectiveoriginxright = 3
    Styleperspectiveoriginx_max = 2147483647
  end

  enum Styleperspectiveoriginy : Int32
    Styleperspectiveoriginynotset = 0
    Styleperspectiveoriginytop = 1
    Styleperspectiveoriginycenter = 2
    Styleperspectiveoriginybottom = 3
    Styleperspectiveoriginy_max = 2147483647
  end

  enum Styletransformstyle : Int32
    Styletransformstyleflat = 0
    Styletransformstylepreserve3d = 1
    Styletransformstylenotset = 2
    Styletransformstyle_max = 2147483647
  end

  enum Stylebackfacevisibility : Int32
    Stylebackfacevisibilityvisible = 0
    Stylebackfacevisibilityhidden = 1
    Stylebackfacevisibilitynotset = 2
    Stylebackfacevisibility_max = 2147483647
  end

  enum Styletextsizeadjust : Int32
    Styletextsizeadjustnone = 0
    Styletextsizeadjustauto = 1
    Styletextsizeadjust_max = 2147483647
  end

  enum Stylecolorinterpolationfilters : Int32
    Stylecolorinterpolationfiltersauto = 0
    Stylecolorinterpolationfilterssrgb = 1
    Stylecolorinterpolationfilterslinearrgb = 2
    Stylecolorinterpolationfiltersnotset = 3
    Stylecolorinterpolationfilters_max = 2147483647
  end

  enum Stylehyphens : Int32
    Stylehyphensnone = 0
    Stylehyphensmanual = 1
    Stylehyphensauto = 2
    Stylehyphensnotset = 3
    Stylehyphens_max = 2147483647
  end

  enum Stylehyphenatelimitlines : Int32
    Stylehyphenatelimitlinesnolimit = 0
    Stylehyphenatelimitlines_max = 2147483647
  end

  enum Stylemsanimationplaystate : Int32
    Stylemsanimationplaystaterunning = 0
    Stylemsanimationplaystatepaused = 1
    Stylemsanimationplaystatenotset = 2
    Stylemsanimationplaystate_max = 2147483647
  end

  enum Stylemsanimationdirection : Int32
    Stylemsanimationdirectionnormal = 0
    Stylemsanimationdirectionalternate = 1
    Stylemsanimationdirectionreverse = 2
    Stylemsanimationdirectionalternatereverse = 3
    Stylemsanimationdirectionnotset = 4
    Stylemsanimationdirection_max = 2147483647
  end

  enum Stylemsanimationfillmode : Int32
    Stylemsanimationfillmodenone = 0
    Stylemsanimationfillmodeforwards = 1
    Stylemsanimationfillmodebackwards = 2
    Stylemsanimationfillmodeboth = 3
    Stylemsanimationfillmodenotset = 4
    Stylemsanimationfillmode_max = 2147483647
  end

  enum Stylemshighcontrastadjust : Int32
    Stylemshighcontrastadjustnotset = 0
    Stylemshighcontrastadjustauto = 1
    Stylemshighcontrastadjustnone = 2
    Stylemshighcontrastadjust_max = 2147483647
  end

  enum Stylemsuserselect : Int32
    Stylemsuserselectauto = 0
    Stylemsuserselecttext = 1
    Stylemsuserselectelement = 2
    Stylemsuserselectnone = 3
    Stylemsuserselectnotset = 4
    Stylemsuserselect_max = 2147483647
  end

  enum Stylemstouchaction : Int32
    Stylemstouchactionnotset = -1
    Stylemstouchactionnone = 0
    Stylemstouchactionauto = 1
    Stylemstouchactionmanipulation = 2
    Stylemstouchactiondoubletapzoom = 4
    Stylemstouchactionpanx = 8
    Stylemstouchactionpany = 16
    Stylemstouchactionpinchzoom = 32
    Stylemstouchactioncrossslidex = 64
    Stylemstouchactioncrossslidey = 128
    Stylemstouchaction_max = 2147483647
  end

  enum Stylemstouchselect : Int32
    Stylemstouchselectgrippers = 0
    Stylemstouchselectnone = 1
    Stylemstouchselectnotset = 2
    Stylemstouchselect_max = 2147483647
  end

  enum Stylemsscrolltranslation : Int32
    Stylemsscrolltranslationnotset = 0
    Stylemsscrolltranslationnone = 1
    Stylemsscrolltranslationvtoh = 2
    Stylemsscrolltranslation_max = 2147483647
  end

  enum Styleborderimagerepeat : Int32
    Styleborderimagerepeatstretch = 0
    Styleborderimagerepeatrepeat = 1
    Styleborderimagerepeatround = 2
    Styleborderimagerepeatspace = 3
    Styleborderimagerepeatnotset = 4
    Styleborderimagerepeat_max = 2147483647
  end

  enum Styleborderimageslicefill : Int32
    Styleborderimageslicefillnotset = 0
    Styleborderimageslicefillfill = 1
    Styleborderimageslicefill_max = 2147483647
  end

  enum Stylemsimealign : Int32
    Stylemsimealignauto = 0
    Stylemsimealignafter = 1
    Stylemsimealignnotset = 2
    Stylemsimealign_max = 2147483647
  end

  enum Stylemstextcombinehorizontal : Int32
    Stylemstextcombinehorizontalnone = 0
    Stylemstextcombinehorizontalall = 1
    Stylemstextcombinehorizontaldigits = 2
    Stylemstextcombinehorizontalnotset = 3
    Stylemstextcombinehorizontal_max = 2147483647
  end

  enum Stylewebkitappearance : Int32
    Stylewebkitappearancenone = 0
    Stylewebkitappearancecapslockindicator = 1
    Stylewebkitappearancebutton = 2
    Stylewebkitappearancebuttonbevel = 3
    Stylewebkitappearancecaret = 4
    Stylewebkitappearancecheckbox = 5
    Stylewebkitappearancedefaultbutton = 6
    Stylewebkitappearancelistbox = 7
    Stylewebkitappearancelistitem = 8
    Stylewebkitappearancemediafullscreenbutton = 9
    Stylewebkitappearancemediamutebutton = 10
    Stylewebkitappearancemediaplaybutton = 11
    Stylewebkitappearancemediaseekbackbutton = 12
    Stylewebkitappearancemediaseekforwardbutton = 13
    Stylewebkitappearancemediaslider = 14
    Stylewebkitappearancemediasliderthumb = 15
    Stylewebkitappearancemenulist = 16
    Stylewebkitappearancemenulistbutton = 17
    Stylewebkitappearancemenulisttext = 18
    Stylewebkitappearancemenulisttextfield = 19
    Stylewebkitappearancepushbutton = 20
    Stylewebkitappearanceradio = 21
    Stylewebkitappearancesearchfield = 22
    Stylewebkitappearancesearchfieldcancelbutton = 23
    Stylewebkitappearancesearchfielddecoration = 24
    Stylewebkitappearancesearchfieldresultsbutton = 25
    Stylewebkitappearancesearchfieldresultsdecoration = 26
    Stylewebkitappearancesliderhorizontal = 27
    Stylewebkitappearanceslidervertical = 28
    Stylewebkitappearancesliderthumbhorizontal = 29
    Stylewebkitappearancesliderthumbvertical = 30
    Stylewebkitappearancesquarebutton = 31
    Stylewebkitappearancetextarea = 32
    Stylewebkitappearancetextfield = 33
    Stylewebkitappearancenotset = 34
    Stylewebkitappearance_max = 2147483647
  end

  enum Styleviewportsize : Int32
    Styleviewportsizeauto = 0
    Styleviewportsizedevicewidth = 1
    Styleviewportsizedeviceheight = 2
    Styleviewportsize_max = 2147483647
  end

  enum Styleuserzoom : Int32
    Styleuserzoomnotset = 0
    Styleuserzoomzoom = 1
    Styleuserzoomfixed = 2
    Styleuserzoom_max = 2147483647
  end

  enum Styletextlinethroughstyle : Int32
    Styletextlinethroughstyleundefined = 0
    Styletextlinethroughstylesingle = 1
    Styletextlinethroughstyledouble = 2
    Styletextlinethroughstyle_max = 2147483647
  end

  enum Styletextunderlinestyle : Int32
    Styletextunderlinestyleundefined = 0
    Styletextunderlinestylesingle = 1
    Styletextunderlinestyledouble = 2
    Styletextunderlinestylewords = 3
    Styletextunderlinestyledotted = 4
    Styletextunderlinestylethick = 5
    Styletextunderlinestyledash = 6
    Styletextunderlinestyledotdash = 7
    Styletextunderlinestyledotdotdash = 8
    Styletextunderlinestylewave = 9
    Styletextunderlinestylesingleaccounting = 10
    Styletextunderlinestyledoubleaccounting = 11
    Styletextunderlinestylethickdash = 12
    Styletextunderlinestyle_max = 2147483647
  end

  enum Styletexteffect : Int32
    Styletexteffectnone = 0
    Styletexteffectemboss = 1
    Styletexteffectengrave = 2
    Styletexteffectoutline = 3
    Styletexteffect_max = 2147483647
  end

  enum Styledefaulttextselection : Int32
    Styledefaulttextselectionfalse = 0
    Styledefaulttextselectiontrue = 1
    Styledefaulttextselection_max = 2147483647
  end

  enum Styletextdecoration : Int32
    Styletextdecorationnone = 0
    Styletextdecorationunderline = 1
    Styletextdecorationoverline = 2
    Styletextdecorationlinethrough = 3
    Styletextdecorationblink = 4
    Styletextdecoration_max = 2147483647
  end

  enum Textdecoration : Int32
    Textdecorationnone = 0
    Textdecorationunderline = 1
    Textdecorationoverline = 2
    Textdecorationlinethrough = 3
    Textdecorationblink = 4
    Textdecoration_max = 2147483647
  end

  enum Htmllisttype : Int32
    Htmllisttypenotset = 0
    Htmllisttypelargealpha = 1
    Htmllisttypesmallalpha = 2
    Htmllisttypelargeroman = 3
    Htmllisttypesmallroman = 4
    Htmllisttypenumbers = 5
    Htmllisttypedisc = 6
    Htmllisttypecircle = 7
    Htmllisttypesquare = 8
    Htmllisttype_max = 2147483647
  end

  enum Htmlmethod : Int32
    Htmlmethodnotset = 0
    Htmlmethodget = 1
    Htmlmethodpost = 2
    Htmlmethod_max = 2147483647
  end

  enum Htmlwrap : Int32
    Htmlwrapoff = 1
    Htmlwrapsoft = 2
    Htmlwraphard = 3
    Htmlwrap_max = 2147483647
  end

  enum Htmldir : Int32
    Htmldirnotset = 0
    Htmldirlefttoright = 1
    Htmldirrighttoleft = 2
    Htmldir_max = 2147483647
  end

  enum Htmleditable : Int32
    Htmleditableinherit = 0
    Htmleditabletrue = 1
    Htmleditablefalse = 2
    Htmleditable_max = 2147483647
  end

  enum Htmlinput : Int32
    Htmlinputnotset = 0
    Htmlinputbutton = 1
    Htmlinputcheckbox = 2
    Htmlinputfile = 3
    Htmlinputhidden = 4
    Htmlinputimage = 5
    Htmlinputpassword = 6
    Htmlinputradio = 7
    Htmlinputreset = 8
    Htmlinputselectone = 9
    Htmlinputselectmultiple = 10
    Htmlinputsubmit = 11
    Htmlinputtext = 12
    Htmlinputtextarea = 13
    Htmlinputrichtext = 14
    Htmlinputrange = 15
    Htmlinputurl = 16
    Htmlinputemail = 17
    Htmlinputnumber = 18
    Htmlinputtel = 19
    Htmlinputsearch = 20
    Htmlinput_max = 2147483647
  end

  enum Htmlspellcheck : Int32
    Htmlspellchecknotset = 0
    Htmlspellchecktrue = 1
    Htmlspellcheckfalse = 2
    Htmlspellcheckdefault = 3
    Htmlspellcheck_max = 2147483647
  end

  enum Htmlencoding : Int32
    Htmlencodingurl = 0
    Htmlencodingmultipart = 1
    Htmlencodingtext = 2
    Htmlencoding_max = 2147483647
  end

  enum Htmladjacency : Int32
    Htmladjacencybeforebegin = 1
    Htmladjacencyafterbegin = 2
    Htmladjacencybeforeend = 3
    Htmladjacencyafterend = 4
    Htmladjacency_max = 2147483647
  end

  enum Htmltabindex : Int32
    Htmltabindexnotset = -32768
    Htmltabindex_max = 2147483647
  end

  enum Htmlcomponent : Int32
    Htmlcomponentclient = 0
    Htmlcomponentsbleft = 1
    Htmlcomponentsbpageleft = 2
    Htmlcomponentsbhthumb = 3
    Htmlcomponentsbpageright = 4
    Htmlcomponentsbright = 5
    Htmlcomponentsbup = 6
    Htmlcomponentsbpageup = 7
    Htmlcomponentsbvthumb = 8
    Htmlcomponentsbpagedown = 9
    Htmlcomponentsbdown = 10
    Htmlcomponentsbleft2 = 11
    Htmlcomponentsbpageleft2 = 12
    Htmlcomponentsbright2 = 13
    Htmlcomponentsbpageright2 = 14
    Htmlcomponentsbup2 = 15
    Htmlcomponentsbpageup2 = 16
    Htmlcomponentsbdown2 = 17
    Htmlcomponentsbpagedown2 = 18
    Htmlcomponentsbtop = 19
    Htmlcomponentsbbottom = 20
    Htmlcomponentoutside = 21
    Htmlcomponentghtopleft = 22
    Htmlcomponentghleft = 23
    Htmlcomponentghtop = 24
    Htmlcomponentghbottomleft = 25
    Htmlcomponentghtopright = 26
    Htmlcomponentghbottom = 27
    Htmlcomponentghright = 28
    Htmlcomponentghbottomright = 29
    Htmlcomponent_max = 2147483647
  end

  enum Htmlapplylocation : Int32
    Htmlapplylocationinside = 0
    Htmlapplylocationoutside = 1
    Htmlapplylocation_max = 2147483647
  end

  enum Htmlglyphmode : Int32
    Htmlglyphmodenone = 0
    Htmlglyphmodebegin = 1
    Htmlglyphmodeend = 2
    Htmlglyphmodeboth = 3
    Htmlglyphmode_max = 2147483647
  end

  enum Htmldraggable : Int32
    Htmldraggableauto = 0
    Htmldraggabletrue = 1
    Htmldraggablefalse = 2
    Htmldraggable_max = 2147483647
  end

  enum Htmlunit : Int32
    Htmlunitcharacter = 1
    Htmlunitword = 2
    Htmlunitsentence = 3
    Htmlunittextedit = 6
    Htmlunit_max = 2147483647
  end

  enum Htmlendpoints : Int32
    Htmlendpointsstarttostart = 1
    Htmlendpointsstarttoend = 2
    Htmlendpointsendtostart = 3
    Htmlendpointsendtoend = 4
    Htmlendpoints_max = 2147483647
  end

  enum Htmldirection : Int32
    Htmldirectionforward = 99999
    Htmldirectionbackward = -99999
    Htmldirection_max = 2147483647
  end

  enum Htmlstart : Int32
    Htmlstartfileopen = 0
    Htmlstartmouseover = 1
    Htmlstart_max = 2147483647
  end

  enum Bodyscroll : Int32
    Bodyscrollyes = 1
    Bodyscrollno = 2
    Bodyscrollauto = 4
    Bodyscrolldefault = 3
    Bodyscroll_max = 2147483647
  end

  enum Htmlselecttype : Int32
    Htmlselecttypeselectone = 1
    Htmlselecttypeselectmultiple = 2
    Htmlselecttype_max = 2147483647
  end

  enum Htmlselectexflag : Int32
    Htmlselectexflagnone = 0
    Htmlselectexflaghideselectionindesign = 1
    Htmlselectexflag_max = 2147483647
  end

  enum Htmlselection : Int32
    Htmlselectionnone = 0
    Htmlselectiontext = 1
    Htmlselectioncontrol = 2
    Htmlselectiontable = 3
    Htmlselection_max = 2147483647
  end

  enum Htmlmarqueebehavior : Int32
    Htmlmarqueebehaviorscroll = 1
    Htmlmarqueebehaviorslide = 2
    Htmlmarqueebehavioralternate = 3
    Htmlmarqueebehavior_max = 2147483647
  end

  enum Htmlmarqueedirection : Int32
    Htmlmarqueedirectionleft = 1
    Htmlmarqueedirectionright = 3
    Htmlmarqueedirectionup = 5
    Htmlmarqueedirectiondown = 7
    Htmlmarqueedirection_max = 2147483647
  end

  enum Htmlpersiststate : Int32
    Htmlpersiststatenormal = 0
    Htmlpersiststatefavorite = 1
    Htmlpersiststatehistory = 2
    Htmlpersiststatesnapshot = 3
    Htmlpersiststateuserdata = 4
    Htmlpersiststate_max = 2147483647
  end

  enum Htmldropeffect : Int32
    Htmldropeffectcopy = 0
    Htmldropeffectlink = 1
    Htmldropeffectmove = 2
    Htmldropeffectnone = 3
    Htmldropeffect_max = 2147483647
  end

  enum Htmleffectallowed : Int32
    Htmleffectallowedcopy = 0
    Htmleffectallowedlink = 1
    Htmleffectallowedmove = 2
    Htmleffectallowedcopylink = 3
    Htmleffectallowedcopymove = 4
    Htmleffectallowedlinkmove = 5
    Htmleffectallowedall = 6
    Htmleffectallowednone = 7
    Htmleffectalloweduninitialized = 8
    Htmleffectallowed_max = 2147483647
  end

  enum Htmlcompatmode : Int32
    Htmlcompatmodebackcompat = 0
    Htmlcompatmodecss1compat = 1
    Htmlcompatmode_max = 2147483647
  end

  enum BoolValue : Int32
    True = 1
    False = 0
    BoolValue_Max = 2147483647
  end

  enum Htmlcaptionalign : Int32
    Htmlcaptionalignnotset = 0
    Htmlcaptionalignleft = 1
    Htmlcaptionaligncenter = 2
    Htmlcaptionalignright = 3
    Htmlcaptionalignjustify = 4
    Htmlcaptionaligntop = 5
    Htmlcaptionalignbottom = 6
    Htmlcaptionalign_max = 2147483647
  end

  enum Htmlcaptionvalign : Int32
    Htmlcaptionvalignnotset = 0
    Htmlcaptionvaligntop = 1
    Htmlcaptionvalignbottom = 2
    Htmlcaptionvalign_max = 2147483647
  end

  enum Htmlframe : Int32
    Htmlframenotset = 0
    Htmlframevoid = 1
    Htmlframeabove = 2
    Htmlframebelow = 3
    Htmlframehsides = 4
    Htmlframelhs = 5
    Htmlframerhs = 6
    Htmlframevsides = 7
    Htmlframebox = 8
    Htmlframeborder = 9
    Htmlframe_max = 2147483647
  end

  enum Htmlrules : Int32
    Htmlrulesnotset = 0
    Htmlrulesnone = 1
    Htmlrulesgroups = 2
    Htmlrulesrows = 3
    Htmlrulescols = 4
    Htmlrulesall = 5
    Htmlrules_max = 2147483647
  end

  enum Htmlcellalign : Int32
    Htmlcellalignnotset = 0
    Htmlcellalignleft = 1
    Htmlcellaligncenter = 2
    Htmlcellalignright = 3
    Htmlcellalignmiddle = 2
    Htmlcellalign_max = 2147483647
  end

  enum Htmlcellvalign : Int32
    Htmlcellvalignnotset = 0
    Htmlcellvaligntop = 1
    Htmlcellvalignmiddle = 2
    Htmlcellvalignbottom = 3
    Htmlcellvalignbaseline = 4
    Htmlcellvaligncenter = 2
    Htmlcellvalign_max = 2147483647
  end

  enum Framescrolling : Int32
    Framescrollingyes = 1
    Framescrollingno = 2
    Framescrollingauto = 4
    Framescrolling_max = 2147483647
  end

  enum Sandboxallow : Int32
    Sandboxallowscripts = 0
    Sandboxallowsameorigin = 1
    Sandboxallowtopnavigation = 2
    Sandboxallowforms = 3
    Sandboxallowpopups = 4
    Sandboxallow_max = 2147483647
  end

  enum Svgangletype : Int32
    SVG_ANGLETYPE_UNKNOWN = 0
    SVG_ANGLETYPE_UNSPECIFIED = 1
    SVG_ANGLETYPE_DEG = 2
    SVG_ANGLETYPE_RAD = 3
    SVG_ANGLETYPE_GRAD = 4
    Svgangletype_max = 2147483647
  end

  enum Svgexternalresourcesrequired : Int32
    Svgexternalresourcesrequiredfalse = 0
    Svgexternalresourcesrequiredtrue = 1
    Svgexternalresourcesrequired_max = 2147483647
  end

  enum Svgfocusable : Int32
    Svgfocusablenotset = 0
    Svgfocusableauto = 1
    Svgfocusabletrue = 2
    Svgfocusablefalse = 3
    Svgfocusable_max = 2147483647
  end

  enum Svglengthtype : Int32
    SVG_LENGTHTYPE_UNKNOWN = 0
    SVG_LENGTHTYPE_NUMBER = 1
    SVG_LENGTHTYPE_PERCENTAGE = 2
    SVG_LENGTHTYPE_EMS = 3
    SVG_LENGTHTYPE_EXS = 4
    SVG_LENGTHTYPE_PX = 5
    SVG_LENGTHTYPE_CM = 6
    SVG_LENGTHTYPE_MM = 7
    SVG_LENGTHTYPE_IN = 8
    SVG_LENGTHTYPE_PT = 9
    SVG_LENGTHTYPE_PC = 10
    Svglengthtype_max = 2147483647
  end

  enum Svgpathsegtype : Int32
    PATHSEG_UNKNOWN = 0
    PATHSEG_CLOSEPATH = 1
    PATHSEG_MOVETO_ABS = 2
    PATHSEG_MOVETO_REL = 3
    PATHSEG_LINETO_ABS = 4
    PATHSEG_LINETO_REL = 5
    PATHSEG_CURVETO_CUBIC_ABS = 6
    PATHSEG_CURVETO_CUBIC_REL = 7
    PATHSEG_CURVETO_QUADRATIC_ABS = 8
    PATHSEG_CURVETO_QUADRATIC_REL = 9
    PATHSEG_ARC_ABS = 10
    PATHSEG_ARC_REL = 11
    PATHSEG_LINETO_HORIZONTAL_ABS = 12
    PATHSEG_LINETO_HORIZONTAL_REL = 13
    PATHSEG_LINETO_VERTICAL_ABS = 14
    PATHSEG_LINETO_VERTICAL_REL = 15
    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16
    PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19
    Svgpathsegtype_max = 2147483647
  end

  enum Svgtransformtype : Int32
    SVG_TRANSFORM_UNKNOWN = 0
    SVG_TRANSFORM_MATRIX = 1
    SVG_TRANSFORM_TRANSLATE = 2
    SVG_TRANSFORM_SCALE = 3
    SVG_TRANSFORM_ROTATE = 4
    SVG_TRANSFORM_SKEWX = 5
    SVG_TRANSFORM_SKEWY = 6
    Svgtransformtype_max = 2147483647
  end

  enum Svgpreserveaspectratioaligntype : Int32
    SVG_PRESERVEASPECTRATIO_UNKNOWN = 0
    SVG_PRESERVEASPECTRATIO_NONE = 1
    SVG_PRESERVEASPECTRATIO_XMINYMIN = 2
    SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3
    SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4
    SVG_PRESERVEASPECTRATIO_XMINYMID = 5
    SVG_PRESERVEASPECTRATIO_XMIDYMID = 6
    SVG_PRESERVEASPECTRATIO_XMAXYMID = 7
    SVG_PRESERVEASPECTRATIO_XMINYMAX = 8
    SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9
    SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10
    Svgpreserveaspectratioaligntype_max = 2147483647
  end

  enum Svgpreserveaspectmeetorslicetype : Int32
    SVG_MEETORSLICE_UNKNOWN = 0
    SVG_MEETORSLICE_MEET = 1
    SVG_MEETORSLICE_SLICE = 2
    Svgpreserveaspectmeetorslicetype_max = 2147483647
  end

  enum Svgunittypes : Int32
    SVG_UNITTYPE_UNKNOWN = 0
    SVG_UNITTYPE_USERSPACEONUSE = 1
    SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2
    Svgunittypes_max = 2147483647
  end

  enum Svgspreadmethod : Int32
    SVG_SPREADMETHOD_UNKNOWN = 0
    SVG_SPREADMETHOD_PAD = 1
    SVG_SPREADMETHOD_REFLECT = 2
    SVG_SPREADMETHOD_REPEAT = 3
    Svgspreadmethod_max = 2147483647
  end

  enum Svgfeblendmode : Int32
    SVG_FEBLEND_MODE_UNKNOWN = 0
    SVG_FEBLEND_MODE_NORMAL = 1
    SVG_FEBLEND_MODE_MULTIPLY = 2
    SVG_FEBLEND_MODE_SCREEN = 3
    SVG_FEBLEND_MODE_DARKEN = 4
    SVG_FEBLEND_MODE_LIGHTEN = 5
    Svgfeblendmode_max = 2147483647
  end

  enum Svgfecolormatrixtype : Int32
    SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0
    SVG_FECOLORMATRIX_TYPE_MATRIX = 1
    SVG_FECOLORMATRIX_TYPE_SATURATE = 2
    SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3
    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4
    Svgfecolormatrixtype_max = 2147483647
  end

  enum Svgfecomponenttransfertype : Int32
    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0
    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1
    SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2
    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3
    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4
    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5
    Svgfecomponenttransfertype_max = 2147483647
  end

  enum Svgfecompositeoperator : Int32
    SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0
    SVG_FECOMPOSITE_OPERATOR_OVER = 1
    SVG_FECOMPOSITE_OPERATOR_IN = 2
    SVG_FECOMPOSITE_OPERATOR_OUT = 3
    SVG_FECOMPOSITE_OPERATOR_ATOP = 4
    SVG_FECOMPOSITE_OPERATOR_XOR = 5
    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6
    Svgfecompositeoperator_max = 2147483647
  end

  enum Svgedgemode : Int32
    SVG_EDGEMODE_UNKNOWN = 0
    SVG_EDGEMODE_DUPLICATE = 1
    SVG_EDGEMODE_WRAP = 2
    SVG_EDGEMODE_NONE = 3
    Svgedgemode_max = 2147483647
  end

  enum Svgpreservealpha : Int32
    SVG_PRESERVEALPHA_FALSE = 0
    SVG_PRESERVEALPHA_TRUE = 1
    Svgpreservealpha_max = 2147483647
  end

  enum Svgchannel : Int32
    SVG_CHANNEL_UNKNOWN = 0
    SVG_CHANNEL_R = 1
    SVG_CHANNEL_G = 2
    SVG_CHANNEL_B = 3
    SVG_CHANNEL_A = 4
    Svgchannel_max = 2147483647
  end

  enum Svgmorphologyoperator : Int32
    SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0
    SVG_MORPHOLOGY_OPERATOR_ERODE = 1
    SVG_MORPHOLOGY_OPERATOR_DILATE = 2
    Svgmorphologyoperator_max = 2147483647
  end

  enum Svgturbulencetype : Int32
    SVG_TURBULENCE_TYPE_UNKNOWN = 0
    SVG_TURBULENCE_TYPE_FACTALNOISE = 1
    SVG_TURBULENCE_TYPE_TURBULENCE = 2
    Svgturbulencetype_max = 2147483647
  end

  enum Svgstitchtype : Int32
    SVG_STITCHTYPE_UNKNOWN = 0
    SVG_STITCHTYPE_STITCH = 1
    SVG_STITCHTYPE_NOSTITCH = 2
    Svgstitchtype_max = 2147483647
  end

  enum Svgmarkerunits : Int32
    SVG_MARKERUNITS_UNKNOWN = 0
    SVG_MARKERUNITS_USERSPACEONUSE = 1
    SVG_MARKERUNITS_STROKEWIDTH = 2
    Svgmarkerunits_max = 2147483647
  end

  enum Svgmarkerorient : Int32
    SVG_MARKER_ORIENT_UNKNOWN = 0
    SVG_MARKER_ORIENT_AUTO = 1
    SVG_MARKER_ORIENT_ANGLE = 2
    Svgmarkerorient_max = 2147483647
  end

  enum Svgmarkerorientattribute : Int32
    Svgmarkerorientattributeauto = 0
    Svgmarkerorientattribute_max = 2147483647
  end

  enum Htmlmedianetworkstate : Int32
    Htmlmedianetworkstateempty = 0
    Htmlmedianetworkstateidle = 1
    Htmlmedianetworkstateloading = 2
    Htmlmedianetworkstatenosource = 3
    Htmlmedianetworkstate_max = 2147483647
  end

  enum Htmlmediareadystate : Int32
    Htmlmediareadystatehavenothing = 0
    Htmlmediareadystatehavemetadata = 1
    Htmlmediareadystatehavecurrentdata = 2
    Htmlmediareadystatehavefuturedata = 3
    Htmlmediareadystatehaveenoughdata = 4
    Htmlmediareadystate_max = 2147483647
  end

  enum Htmlmediaerr : Int32
    Htmlmediaerraborted = 0
    Htmlmediaerrnetwork = 1
    Htmlmediaerrdecode = 2
    Htmlmediaerrsrcnotsupported = 3
    Htmlmediaerr_max = 2147483647
  end

  enum Lengthadjust : Int32
    LENGTHADJUST_UNKNOWN = 0
    LENGTHADJUST_SPACING = 1
    LENGTHADJUST_SPACINGANDGLYPHS = 2
    Lengthadjust_max = 2147483647
  end

  enum Textpathmethodtype : Int32
    TEXTPATH_METHODTYPE_UNKNOWN = 0
    TEXTPATH_METHODTYPE_ALIGN = 1
    TEXTPATH_METHODTYPE_STRETCH = 2
    Textpathmethodtype_max = 2147483647
  end

  enum Textpathspacingtype : Int32
    TEXTPATH_SPACINGTYPE_UNKNOWN = 0
    TEXTPATH_SPACINGTYPE_AUTO = 1
    TEXTPATH_SPACINGTYPE_EXACT = 2
    Textpathspacingtype_max = 2147483647
  end

  enum ELEMENT_CORNER : Int32
    ELEMENT_CORNER_NONE = 0
    ELEMENT_CORNER_TOP = 1
    ELEMENT_CORNER_LEFT = 2
    ELEMENT_CORNER_BOTTOM = 3
    ELEMENT_CORNER_RIGHT = 4
    ELEMENT_CORNER_TOPLEFT = 5
    ELEMENT_CORNER_TOPRIGHT = 6
    ELEMENT_CORNER_BOTTOMLEFT = 7
    ELEMENT_CORNER_BOTTOMRIGHT = 8
    ELEMENT_CORNER_Max = 2147483647
  end

  enum SECUREURLHOSTVALIDATE_FLAGS : Int32
    SUHV_PROMPTBEFORENO = 1
    SUHV_SILENTYES = 2
    SUHV_UNSECURESOURCE = 4
    SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647
  end

  enum POINTER_GRAVITY : Int32
    POINTER_GRAVITY_Left = 0
    POINTER_GRAVITY_Right = 1
    POINTER_GRAVITY_Max = 2147483647
  end

  enum ELEMENT_ADJACENCY : Int32
    ELEM_ADJ_BeforeBegin = 0
    ELEM_ADJ_AfterBegin = 1
    ELEM_ADJ_BeforeEnd = 2
    ELEM_ADJ_AfterEnd = 3
    ELEMENT_ADJACENCY_Max = 2147483647
  end

  enum MARKUP_CONTEXT_TYPE : Int32
    CONTEXT_TYPE_None = 0
    CONTEXT_TYPE_Text = 1
    CONTEXT_TYPE_EnterScope = 2
    CONTEXT_TYPE_ExitScope = 3
    CONTEXT_TYPE_NoScope = 4
    MARKUP_CONTEXT_TYPE_Max = 2147483647
  end

  enum FINDTEXT_FLAGS : Int32
    FINDTEXT_BACKWARDS = 1
    FINDTEXT_WHOLEWORD = 2
    FINDTEXT_MATCHCASE = 4
    FINDTEXT_RAW = 131072
    FINDTEXT_MATCHREPEATEDWHITESPACE = 262144
    FINDTEXT_MATCHDIAC = 536870912
    FINDTEXT_MATCHKASHIDA = 1073741824
    FINDTEXT_MATCHALEFHAMZA = -2147483648
    FINDTEXT_FLAGS_Max = 2147483647
  end

  enum MOVEUNIT_ACTION : Int32
    MOVEUNIT_PREVCHAR = 0
    MOVEUNIT_NEXTCHAR = 1
    MOVEUNIT_PREVCLUSTERBEGIN = 2
    MOVEUNIT_NEXTCLUSTERBEGIN = 3
    MOVEUNIT_PREVCLUSTEREND = 4
    MOVEUNIT_NEXTCLUSTEREND = 5
    MOVEUNIT_PREVWORDBEGIN = 6
    MOVEUNIT_NEXTWORDBEGIN = 7
    MOVEUNIT_PREVWORDEND = 8
    MOVEUNIT_NEXTWORDEND = 9
    MOVEUNIT_PREVPROOFWORD = 10
    MOVEUNIT_NEXTPROOFWORD = 11
    MOVEUNIT_NEXTURLBEGIN = 12
    MOVEUNIT_PREVURLBEGIN = 13
    MOVEUNIT_NEXTURLEND = 14
    MOVEUNIT_PREVURLEND = 15
    MOVEUNIT_PREVSENTENCE = 16
    MOVEUNIT_NEXTSENTENCE = 17
    MOVEUNIT_PREVBLOCK = 18
    MOVEUNIT_NEXTBLOCK = 19
    MOVEUNIT_ACTION_Max = 2147483647
  end

  enum PARSE_FLAGS : Int32
    PARSE_ABSOLUTIFYIE40URLS = 1
    PARSE_DISABLEVML = 2
    PARSE_FLAGS_Max = 2147483647
  end

  enum ELEMENT_TAG_ID : Int32
    TAGID_NULL = 0
    TAGID_UNKNOWN = 1
    TAGID_A = 2
    TAGID_ACRONYM = 3
    TAGID_ADDRESS = 4
    TAGID_APPLET = 5
    TAGID_AREA = 6
    TAGID_B = 7
    TAGID_BASE = 8
    TAGID_BASEFONT = 9
    TAGID_BDO = 10
    TAGID_BGSOUND = 11
    TAGID_BIG = 12
    TAGID_BLINK = 13
    TAGID_BLOCKQUOTE = 14
    TAGID_BODY = 15
    TAGID_BR = 16
    TAGID_BUTTON = 17
    TAGID_CAPTION = 18
    TAGID_CENTER = 19
    TAGID_CITE = 20
    TAGID_CODE = 21
    TAGID_COL = 22
    TAGID_COLGROUP = 23
    TAGID_COMMENT = 24
    TAGID_COMMENT_RAW = 25
    TAGID_DD = 26
    TAGID_DEL = 27
    TAGID_DFN = 28
    TAGID_DIR = 29
    TAGID_DIV = 30
    TAGID_DL = 31
    TAGID_DT = 32
    TAGID_EM = 33
    TAGID_EMBED = 34
    TAGID_FIELDSET = 35
    TAGID_FONT = 36
    TAGID_FORM = 37
    TAGID_FRAME = 38
    TAGID_FRAMESET = 39
    TAGID_GENERIC = 40
    TAGID_H1 = 41
    TAGID_H2 = 42
    TAGID_H3 = 43
    TAGID_H4 = 44
    TAGID_H5 = 45
    TAGID_H6 = 46
    TAGID_HEAD = 47
    TAGID_HR = 48
    TAGID_HTML = 49
    TAGID_I = 50
    TAGID_IFRAME = 51
    TAGID_IMG = 52
    TAGID_INPUT = 53
    TAGID_INS = 54
    TAGID_KBD = 55
    TAGID_LABEL = 56
    TAGID_LEGEND = 57
    TAGID_LI = 58
    TAGID_LINK = 59
    TAGID_LISTING = 60
    TAGID_MAP = 61
    TAGID_MARQUEE = 62
    TAGID_MENU = 63
    TAGID_META = 64
    TAGID_NEXTID = 65
    TAGID_NOBR = 66
    TAGID_NOEMBED = 67
    TAGID_NOFRAMES = 68
    TAGID_NOSCRIPT = 69
    TAGID_OBJECT = 70
    TAGID_OL = 71
    TAGID_OPTION = 72
    TAGID_P = 73
    TAGID_PARAM = 74
    TAGID_PLAINTEXT = 75
    TAGID_PRE = 76
    TAGID_Q = 77
    TAGID_RP = 78
    TAGID_RT = 79
    TAGID_RUBY = 80
    TAGID_S = 81
    TAGID_SAMP = 82
    TAGID_SCRIPT = 83
    TAGID_SELECT = 84
    TAGID_SMALL = 85
    TAGID_SPAN = 86
    TAGID_STRIKE = 87
    TAGID_STRONG = 88
    TAGID_STYLE = 89
    TAGID_SUB = 90
    TAGID_SUP = 91
    TAGID_TABLE = 92
    TAGID_TBODY = 93
    TAGID_TC = 94
    TAGID_TD = 95
    TAGID_TEXTAREA = 96
    TAGID_TFOOT = 97
    TAGID_TH = 98
    TAGID_THEAD = 99
    TAGID_TITLE = 100
    TAGID_TR = 101
    TAGID_TT = 102
    TAGID_U = 103
    TAGID_UL = 104
    TAGID_VAR = 105
    TAGID_WBR = 106
    TAGID_XMP = 107
    TAGID_ROOT = 108
    TAGID_OPTGROUP = 109
    TAGID_ABBR = 110
    TAGID_SVG_A = 111
    TAGID_SVG_ALTGLYPH = 112
    TAGID_SVG_ALTGLYPHDEF = 113
    TAGID_SVG_ALTGLYPHITEM = 114
    TAGID_SVG_ANIMATE = 115
    TAGID_SVG_ANIMATECOLOR = 116
    TAGID_SVG_ANIMATEMOTION = 117
    TAGID_SVG_ANIMATETRANSFORM = 118
    TAGID_SVG_CIRCLE = 119
    TAGID_SVG_CLIPPATH = 120
    TAGID_SVG_COLOR_PROFILE = 121
    TAGID_SVG_CURSOR = 122
    TAGID_SVG_DEFINITION_SRC = 123
    TAGID_SVG_DEFS = 124
    TAGID_SVG_DESC = 125
    TAGID_SVG_ELLIPSE = 126
    TAGID_SVG_FEBLEND = 127
    TAGID_SVG_FECOLORMATRIX = 128
    TAGID_SVG_FECOMPONENTTRANSFER = 129
    TAGID_SVG_FECOMPOSITE = 130
    TAGID_SVG_FECONVOLVEMATRIX = 131
    TAGID_SVG_FEDIFFUSELIGHTING = 132
    TAGID_SVG_FEDISPLACEMENTMAP = 133
    TAGID_SVG_FEDISTANTLIGHT = 134
    TAGID_SVG_FEFLOOD = 135
    TAGID_SVG_FEFUNCA = 136
    TAGID_SVG_FEFUNCB = 137
    TAGID_SVG_FEFUNCG = 138
    TAGID_SVG_FEFUNCR = 139
    TAGID_SVG_FEGAUSSIANBLUR = 140
    TAGID_SVG_FEIMAGE = 141
    TAGID_SVG_FEMERGE = 142
    TAGID_SVG_FEMERGENODE = 143
    TAGID_SVG_FEMORPHOLOGY = 144
    TAGID_SVG_FEOFFSET = 145
    TAGID_SVG_FEPOINTLIGHT = 146
    TAGID_SVG_FESPECULARLIGHTING = 147
    TAGID_SVG_FESPOTLIGHT = 148
    TAGID_SVG_FETILE = 149
    TAGID_SVG_FETURBULENCE = 150
    TAGID_SVG_FILTER = 151
    TAGID_SVG_FONT = 152
    TAGID_SVG_FONT_FACE = 153
    TAGID_SVG_FONT_FACE_FORMAT = 154
    TAGID_SVG_FONT_FACE_NAME = 155
    TAGID_SVG_FONT_FACE_SRC = 156
    TAGID_SVG_FONT_FACE_URI = 157
    TAGID_SVG_FOREIGNOBJECT = 158
    TAGID_SVG_G = 159
    TAGID_SVG_GLYPH = 160
    TAGID_SVG_GLYPHREF = 161
    TAGID_SVG_HKERN = 162
    TAGID_SVG_IMAGE = 163
    TAGID_SVG_LINE = 164
    TAGID_SVG_LINEARGRADIENT = 165
    TAGID_SVG_MARKER = 166
    TAGID_SVG_MASK = 167
    TAGID_SVG_METADATA = 168
    TAGID_SVG_MISSING_GLYPH = 169
    TAGID_SVG_MPATH = 170
    TAGID_SVG_PATH = 171
    TAGID_SVG_PATTERN = 172
    TAGID_SVG_POLYGON = 173
    TAGID_SVG_POLYLINE = 174
    TAGID_SVG_RADIALGRADIENT = 175
    TAGID_SVG_RECT = 176
    TAGID_SVG_SCRIPT = 177
    TAGID_SVG_SET = 178
    TAGID_SVG_STOP = 179
    TAGID_SVG_STYLE = 180
    TAGID_SVG_SVG = 181
    TAGID_SVG_SWITCH = 182
    TAGID_SVG_SYMBOL = 183
    TAGID_SVG_TEXT = 184
    TAGID_SVG_TEXTPATH = 185
    TAGID_SVG_TITLE = 186
    TAGID_SVG_TREF = 187
    TAGID_SVG_TSPAN = 188
    TAGID_SVG_USE = 189
    TAGID_SVG_VIEW = 190
    TAGID_SVG_VKERN = 191
    TAGID_AUDIO = 192
    TAGID_SOURCE = 193
    TAGID_VIDEO = 194
    TAGID_CANVAS = 195
    TAGID_DOCTYPE = 196
    TAGID_KEYGEN = 197
    TAGID_PROCESSINGINSTRUCTION = 198
    TAGID_ARTICLE = 199
    TAGID_ASIDE = 200
    TAGID_FIGCAPTION = 201
    TAGID_FIGURE = 202
    TAGID_FOOTER = 203
    TAGID_HEADER = 204
    TAGID_HGROUP = 205
    TAGID_MARK = 206
    TAGID_NAV = 207
    TAGID_SECTION = 208
    TAGID_PROGRESS = 209
    TAGID_MATHML_ANNOTATION_XML = 210
    TAGID_MATHML_MATH = 211
    TAGID_MATHML_MI = 212
    TAGID_MATHML_MN = 213
    TAGID_MATHML_MO = 214
    TAGID_MATHML_MS = 215
    TAGID_MATHML_MTEXT = 216
    TAGID_DATALIST = 217
    TAGID_TRACK = 218
    TAGID_ISINDEX = 219
    TAGID_COMMAND = 220
    TAGID_DETAILS = 221
    TAGID_SUMMARY = 222
    TAGID_X_MS_WEBVIEW = 223
    TAGID_COUNT = 224
    TAGID_LAST_PREDEFINED = 10000
    ELEMENT_TAG_ID_Max = 2147483647
  end

  enum SELECTION_TYPE : Int32
    SELECTION_TYPE_None = 0
    SELECTION_TYPE_Caret = 1
    SELECTION_TYPE_Text = 2
    SELECTION_TYPE_Control = 3
    SELECTION_TYPE_Max = 2147483647
  end

  enum SAVE_SEGMENTS_FLAGS : Int32
    SAVE_SEGMENTS_NoIE4SelectionCompat = 1
    SAVE_SEGMENTS_FLAGS_Max = 2147483647
  end

  enum CARET_DIRECTION : Int32
    CARET_DIRECTION_INDETERMINATE = 0
    CARET_DIRECTION_SAME = 1
    CARET_DIRECTION_BACKWARD = 2
    CARET_DIRECTION_FORWARD = 3
    CARET_DIRECTION_Max = 2147483647
  end

  enum LINE_DIRECTION : Int32
    LINE_DIRECTION_RightToLeft = 1
    LINE_DIRECTION_LeftToRight = 2
    LINE_DIRECTION_Max = 2147483647
  end

  enum HT_OPTIONS : Int32
    HT_OPT_AllowAfterEOL = 1
    HT_OPTIONS_Max = 2147483647
  end

  enum HT_RESULTS : Int32
    HT_RESULTS_Glyph = 1
    HT_RESULTS_Max = 2147483647
  end

  enum DISPLAY_MOVEUNIT : Int32
    DISPLAY_MOVEUNIT_PreviousLine = 1
    DISPLAY_MOVEUNIT_NextLine = 2
    DISPLAY_MOVEUNIT_CurrentLineStart = 3
    DISPLAY_MOVEUNIT_CurrentLineEnd = 4
    DISPLAY_MOVEUNIT_TopOfWindow = 5
    DISPLAY_MOVEUNIT_BottomOfWindow = 6
    DISPLAY_MOVEUNIT_Max = 2147483647
  end

  enum DISPLAY_GRAVITY : Int32
    DISPLAY_GRAVITY_PreviousLine = 1
    DISPLAY_GRAVITY_NextLine = 2
    DISPLAY_GRAVITY_Max = 2147483647
  end

  enum DISPLAY_BREAK : Int32
    DISPLAY_BREAK_None = 0
    DISPLAY_BREAK_Block = 1
    DISPLAY_BREAK_Break = 2
    DISPLAY_BREAK_Max = 2147483647
  end

  enum COORD_SYSTEM : Int32
    COORD_SYSTEM_GLOBAL = 0
    COORD_SYSTEM_PARENT = 1
    COORD_SYSTEM_CONTAINER = 2
    COORD_SYSTEM_CONTENT = 3
    COORD_SYSTEM_FRAME = 4
    COORD_SYSTEM_CLIENT = 5
    COORD_SYSTEM_Max = 2147483647
  end

  enum DEV_CONSOLE_MESSAGE_LEVEL : Int32
    DCML_INFORMATIONAL = 0
    DCML_WARNING = 1
    DCML_ERROR = 2
    DEV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647
  end

  enum DOM_EVENT_PHASE : Int32
    DEP_CAPTURING_PHASE = 1
    DEP_AT_TARGET = 2
    DEP_BUBBLING_PHASE = 3
    DOM_EVENT_PHASE_Max = 2147483647
  end

  enum SCRIPT_TIMER_TYPE : Int32
    STT_TIMEOUT = 0
    STT_INTERVAL = 1
    STT_IMMEDIATE = 2
    STT_ANIMATION_FRAME = 3
    SCRIPT_TIMER_TYPE_Max = 2147483647
  end

  enum HTML_PAINTER : Int32
    HTMLPAINTER_OPAQUE = 1
    HTMLPAINTER_TRANSPARENT = 2
    HTMLPAINTER_ALPHA = 4
    HTMLPAINTER_COMPLEX = 8
    HTMLPAINTER_OVERLAY = 16
    HTMLPAINTER_HITTEST = 32
    HTMLPAINTER_SURFACE = 256
    HTMLPAINTER_3DSURFACE = 512
    HTMLPAINTER_NOBAND = 1024
    HTMLPAINTER_NODC = 4096
    HTMLPAINTER_NOPHYSICALCLIP = 8192
    HTMLPAINTER_NOSAVEDC = 16384
    HTMLPAINTER_SUPPORTS_XFORM = 32768
    HTMLPAINTER_EXPAND = 65536
    HTMLPAINTER_NOSCROLLBITS = 131072
    HTML_PAINTER_Max = 2147483647
  end

  enum HTML_PAINT_ZORDER : Int32
    HTMLPAINT_ZORDER_NONE = 0
    HTMLPAINT_ZORDER_REPLACE_ALL = 1
    HTMLPAINT_ZORDER_REPLACE_CONTENT = 2
    HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3
    HTMLPAINT_ZORDER_BELOW_CONTENT = 4
    HTMLPAINT_ZORDER_BELOW_FLOW = 5
    HTMLPAINT_ZORDER_ABOVE_FLOW = 6
    HTMLPAINT_ZORDER_ABOVE_CONTENT = 7
    HTMLPAINT_ZORDER_WINDOW_TOP = 8
    HTML_PAINT_ZORDER_Max = 2147483647
  end

  enum HTML_PAINT_DRAW_FLAGS : Int32
    HTMLPAINT_DRAW_UPDATEREGION = 1
    HTMLPAINT_DRAW_USE_XFORM = 2
    HTML_PAINT_DRAW_FLAGS_Max = 2147483647
  end

  enum HTML_PAINT_EVENT_FLAGS : Int32
    HTMLPAINT_EVENT_TARGET = 1
    HTMLPAINT_EVENT_SETCURSOR = 2
    HTML_PAINT_EVENT_FLAGS_Max = 2147483647
  end

  enum HTML_PAINT_DRAW_INFO_FLAGS : Int32
    HTMLPAINT_DRAWINFO_VIEWPORT = 1
    HTMLPAINT_DRAWINFO_UPDATEREGION = 2
    HTMLPAINT_DRAWINFO_XFORM = 4
    HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647
  end

  enum HTMLDlgFlag : Int32
    HTMLDlgFlagNo = 0
    HTMLDlgFlagOff = 0
    HTMLDlgFlag0 = 0
    HTMLDlgFlagYes = 1
    HTMLDlgFlagOn = 1
    HTMLDlgFlag1 = 1
    HTMLDlgFlagNotSet = -1
    HTMLDlgFlag_Max = 2147483647
  end

  enum HTMLDlgBorder : Int32
    HTMLDlgBorderThin = 0
    HTMLDlgBorderThick = 262144
    HTMLDlgBorder_Max = 2147483647
  end

  enum HTMLDlgEdge : Int32
    HTMLDlgEdgeSunken = 0
    HTMLDlgEdgeRaised = 16
    HTMLDlgEdge_Max = 2147483647
  end

  enum HTMLDlgCenter : Int32
    HTMLDlgCenterNo = 0
    HTMLDlgCenterOff = 0
    HTMLDlgCenter0 = 0
    HTMLDlgCenterYes = 1
    HTMLDlgCenterOn = 1
    HTMLDlgCenter1 = 1
    HTMLDlgCenterParent = 1
    HTMLDlgCenterDesktop = 2
    HTMLDlgCenter_Max = 2147483647
  end

  enum HTMLAppFlag : Int32
    HTMLAppFlagNo = 0
    HTMLAppFlagOff = 0
    HTMLAppFlag0 = 0
    HTMLAppFlagYes = 1
    HTMLAppFlagOn = 1
    HTMLAppFlag1 = 1
    HTMLAppFlag_Max = 2147483647
  end

  enum HTMLMinimizeFlag : Int32
    HTMLMinimizeFlagNo = 0
    HTMLMinimizeFlagYes = 131072
    HTMLMinimizeFlag_Max = 2147483647
  end

  enum HTMLMaximizeFlag : Int32
    HTMLMaximizeFlagNo = 0
    HTMLMaximizeFlagYes = 65536
    HTMLMaximizeFlag_Max = 2147483647
  end

  enum HTMLCaptionFlag : Int32
    HTMLCaptionFlagNo = 0
    HTMLCaptionFlagYes = 12582912
    HTMLCaptionFlag_Max = 2147483647
  end

  enum HTMLSysMenuFlag : Int32
    HTMLSysMenuFlagNo = 0
    HTMLSysMenuFlagYes = 524288
    HTMLSysMenuFlag_Max = 2147483647
  end

  enum HTMLBorder : Int32
    HTMLBorderNone = 0
    HTMLBorderThick = 262144
    HTMLBorderDialog = 4194304
    HTMLBorderThin = 8388608
    HTMLBorder_Max = 2147483647
  end

  enum HTMLBorderStyle : Int32
    HTMLBorderStyleNormal = 0
    HTMLBorderStyleRaised = 256
    HTMLBorderStyleSunken = 512
    HTMLBorderStylecombined = 768
    HTMLBorderStyleStatic = 131072
    HTMLBorderStyle_Max = 2147483647
  end

  enum HTMLWindowState : Int32
    HTMLWindowStateNormal = 1
    HTMLWindowStateMaximize = 3
    HTMLWindowStateMinimize = 6
    HTMLWindowState_Max = 2147483647
  end

  enum BEHAVIOR_EVENT : Int32
    BEHAVIOREVENT_FIRST = 0
    BEHAVIOREVENT_CONTENTREADY = 0
    BEHAVIOREVENT_DOCUMENTREADY = 1
    BEHAVIOREVENT_APPLYSTYLE = 2
    BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3
    BEHAVIOREVENT_CONTENTSAVE = 4
    BEHAVIOREVENT_LAST = 4
    BEHAVIOR_EVENT_Max = 2147483647
  end

  enum BEHAVIOR_EVENT_FLAGS : Int32
    BEHAVIOREVENTFLAGS_BUBBLE = 1
    BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2
    BEHAVIOR_EVENT_FLAGS_Max = 2147483647
  end

  enum BEHAVIOR_RENDER_INFO : Int32
    BEHAVIORRENDERINFO_BEFOREBACKGROUND = 1
    BEHAVIORRENDERINFO_AFTERBACKGROUND = 2
    BEHAVIORRENDERINFO_BEFORECONTENT = 4
    BEHAVIORRENDERINFO_AFTERCONTENT = 8
    BEHAVIORRENDERINFO_AFTERFOREGROUND = 32
    BEHAVIORRENDERINFO_ABOVECONTENT = 40
    BEHAVIORRENDERINFO_ALLLAYERS = 255
    BEHAVIORRENDERINFO_DISABLEBACKGROUND = 256
    BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 512
    BEHAVIORRENDERINFO_DISABLECONTENT = 1024
    BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 2048
    BEHAVIORRENDERINFO_DISABLEALLLAYERS = 3840
    BEHAVIORRENDERINFO_HITTESTING = 4096
    BEHAVIORRENDERINFO_SURFACE = 1048576
    BEHAVIORRENDERINFO_3DSURFACE = 2097152
    BEHAVIOR_RENDER_INFO_Max = 2147483647
  end

  enum BEHAVIOR_RELATION : Int32
    BEHAVIOR_FIRSTRELATION = 0
    BEHAVIOR_SAMEELEMENT = 0
    BEHAVIOR_PARENT = 1
    BEHAVIOR_CHILD = 2
    BEHAVIOR_SIBLING = 3
    BEHAVIOR_LASTRELATION = 3
    BEHAVIOR_RELATION_Max = 2147483647
  end

  enum BEHAVIOR_LAYOUT_INFO : Int32
    BEHAVIORLAYOUTINFO_FULLDELEGATION = 1
    BEHAVIORLAYOUTINFO_MODIFYNATURAL = 2
    BEHAVIORLAYOUTINFO_MAPSIZE = 4
    BEHAVIOR_LAYOUT_INFO_Max = 2147483647
  end

  enum BEHAVIOR_LAYOUT_MODE : Int32
    BEHAVIORLAYOUTMODE_NATURAL = 1
    BEHAVIORLAYOUTMODE_MINWIDTH = 2
    BEHAVIORLAYOUTMODE_MAXWIDTH = 4
    BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 16384
    BEHAVIORLAYOUTMODE_FINAL_PERCENT = 32768
    BEHAVIOR_LAYOUT_MODE_Max = 2147483647
  end

  enum ELEMENTDESCRIPTOR_FLAGS : Int32
    ELEMENTDESCRIPTORFLAGS_LITERAL = 1
    ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2
    ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647
  end

  enum ELEMENTNAMESPACE_FLAGS : Int32
    ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 1
    ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 2
    ELEMENTNAMESPACE_FLAGS_Max = 2147483647
  end

  enum VIEW_OBJECT_ALPHA_MODE : Int32
    VIEW_OBJECT_ALPHA_MODE_IGNORE = 0
    VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = 1
    VIEW_OBJECT_ALPHA_MODE_Max = 2147483647
  end

  enum VIEW_OBJECT_COMPOSITION_MODE : Int32
    VIEW_OBJECT_COMPOSITION_MODE_LEGACY = 0
    VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = 1
    VIEW_OBJECT_COMPOSITION_MODE_Max = 2147483647
  end

  enum ExtensionValidationContexts : Int32
    ExtensionValidationContextNone = 0
    ExtensionValidationContextDynamic = 1
    ExtensionValidationContextParsed = 2
  end

  enum ExtensionValidationResults : Int32
    ExtensionValidationResultNone = 0
    ExtensionValidationResultDoNotInstantiate = 1
    ExtensionValidationResultArrestPageLoad = 2
  end

  enum MIDL_ITargetFrame2_0001 : Int32
    FINDFRAME_NONE = 0
    FINDFRAME_JUSTTESTEXISTENCE = 1
    FINDFRAME_INTERNAL = -2147483648
  end

  enum MIDL_ITargetFrame2_0002 : Int32
    FRAMEOPTIONS_SCROLL_YES = 1
    FRAMEOPTIONS_SCROLL_NO = 2
    FRAMEOPTIONS_SCROLL_AUTO = 4
    FRAMEOPTIONS_NORESIZE = 8
    FRAMEOPTIONS_NO3DBORDER = 16
    FRAMEOPTIONS_DESKTOP = 32
    FRAMEOPTIONS_BROWSERBAND = 64
  end

  enum MIDL_ITargetFrame_0001 : Int32
    NAVIGATEFRAME_FL_RECORD = 1
    NAVIGATEFRAME_FL_POST = 2
    NAVIGATEFRAME_FL_NO_DOC_CACHE = 4
    NAVIGATEFRAME_FL_NO_IMAGE_CACHE = 8
    NAVIGATEFRAME_FL_AUTH_FAIL_CACHE_OK = 16
    NAVIGATEFRAME_FL_SENDING_FROM_FORM = 32
    NAVIGATEFRAME_FL_REALLY_SENDING_FROM_FORM = 64
  end

  enum MediaActivityNotifyType : Int32
    MediaPlayback = 0
    MediaRecording = 1
    MediaCasting = 2
  end

  enum SCROLLABLECONTEXTMENU_PLACEMENT : Int32
    SCMP_TOP = 0
    SCMP_BOTTOM = 1
    SCMP_LEFT = 2
    SCMP_RIGHT = 3
    SCMP_FULL = 4
  end

  enum INTERNETEXPLORERCONFIGURATION : Int32
    INTERNETEXPLORERCONFIGURATION_HOST = 1
    INTERNETEXPLORERCONFIGURATION_WEB_DRIVER = 2
    INTERNETEXPLORERCONFIGURATION_WEB_DRIVER_EDGE = 4
  end

  enum IELAUNCHOPTION_FLAGS : Int32
    IELAUNCHOPTION_SCRIPTDEBUG = 1
    IELAUNCHOPTION_FORCE_COMPAT = 2
    IELAUNCHOPTION_FORCE_EDGE = 4
    IELAUNCHOPTION_LOCK_ENGINE = 8
  end

  enum DOCHOSTUITYPE : Int32
    DOCHOSTUITYPE_BROWSE = 0
    DOCHOSTUITYPE_AUTHOR = 1
  end

  enum DOCHOSTUIDBLCLK : Int32
    DOCHOSTUIDBLCLK_DEFAULT = 0
    DOCHOSTUIDBLCLK_SHOWPROPERTIES = 1
    DOCHOSTUIDBLCLK_SHOWCODE = 2
  end

  enum DOCHOSTUIFLAG : Int32
    DOCHOSTUIFLAG_DIALOG = 1
    DOCHOSTUIFLAG_DISABLE_HELP_MENU = 2
    DOCHOSTUIFLAG_NO3DBORDER = 4
    DOCHOSTUIFLAG_SCROLL_NO = 8
    DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 16
    DOCHOSTUIFLAG_OPENNEWWIN = 32
    DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 64
    DOCHOSTUIFLAG_FLAT_SCROLLBAR = 128
    DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 256
    DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 512
    DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = 1024
    DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = 2048
    DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = 4096
    DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = 8192
    DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = 16384
    DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = 65536
    DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = 131072
    DOCHOSTUIFLAG_THEME = 262144
    DOCHOSTUIFLAG_NOTHEME = 524288
    DOCHOSTUIFLAG_NOPICS = 1048576
    DOCHOSTUIFLAG_NO3DOUTERBORDER = 2097152
    DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = 4194304
    DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = 8388608
    DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = 16777216
    DOCHOSTUIFLAG_HOST_NAVIGATES = 33554432
    DOCHOSTUIFLAG_ENABLE_REDIRECT_NOTIFICATION = 67108864
    DOCHOSTUIFLAG_USE_WINDOWLESS_SELECTCONTROL = 134217728
    DOCHOSTUIFLAG_USE_WINDOWED_SELECTCONTROL = 268435456
    DOCHOSTUIFLAG_ENABLE_ACTIVEX_INACTIVATE_MODE = 536870912
    DOCHOSTUIFLAG_DPI_AWARE = 1073741824
  end

  enum OpenServiceErrors : Int32
    OS_E_NOTFOUND = -2147287038
    OS_E_NOTSUPPORTED = -2147467231
    OS_E_CANCELLED = -2147471631
    OS_E_GPDISABLED = -1072886820
  end

  enum OpenServiceActivityContentType : Int32
    ActivityContentNone = -1
    ActivityContentDocument = 0
    ActivityContentSelection = 1
    ActivityContentLink = 2
    ActivityContentCount = 3
  end

  enum ADDURL_FLAG : Int32
    ADDURL_FIRST = 0
    ADDURL_ADDTOHISTORYANDCACHE = 0
    ADDURL_ADDTOCACHE = 1
    ADDURL_Max = 2147483647
  end

  struct HTML_PAINTER_INFO
    l_flags : Int32
    l_z_order : Int32
    iid_draw_object : Guid
    rc_expand : RECT
  end
  struct HTML_PAINT_XFORM
    e_m11 : Float32
    e_m12 : Float32
    e_m21 : Float32
    e_m22 : Float32
    e_dx : Float32
    e_dy : Float32
  end
  struct HTML_PAINT_DRAW_INFO
    rc_viewport : RECT
    hrgn_update : HRGN
    xform : HTML_PAINT_XFORM
  end
  struct Tagnavigatedata
    ul_target : UInt32
    ul_url : UInt32
    ul_ref_url : UInt32
    ul_post_data : UInt32
    dw_flags : UInt32
  end
  struct IELAUNCHURLINFO
    cb_size : UInt32
    dw_creation_flags : UInt32
    dw_launch_option_flags : UInt32
  end
  struct DOCHOSTUIINFO
    cb_size : UInt32
    dw_flags : UInt32
    dw_double_click : UInt32
    pch_host_css : LibC::LPWSTR
    pch_host_ns : LibC::LPWSTR
  end
  struct STATURL
    cb_size : UInt32
    pwcs_url : LibC::LPWSTR
    pwcs_title : LibC::LPWSTR
    ft_last_visited : FILETIME
    ft_last_updated : FILETIME
    ft_expires : FILETIME
    dw_flags : UInt32
  end


  struct IHTMLFiltersCollectionVTbl
    query_interface : Proc(IHTMLFiltersCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFiltersCollection*, UInt32)
    release : Proc(IHTMLFiltersCollection*, UInt32)
    get_type_info_count : Proc(IHTMLFiltersCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFiltersCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFiltersCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFiltersCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLFiltersCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLFiltersCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLFiltersCollection*, VARIANT*, VARIANT*, HRESULT)
  end

  IHTMLFiltersCollection_GUID = "3050f3ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFiltersCollection = LibC::GUID.new(0x3050f3ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFiltersCollection
    lpVtbl : IHTMLFiltersCollectionVTbl*
  end

  struct IIE70DispatchExVTbl
    query_interface : Proc(IIE70DispatchEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIE70DispatchEx*, UInt32)
    release : Proc(IIE70DispatchEx*, UInt32)
    get_type_info_count : Proc(IIE70DispatchEx*, UInt32*, HRESULT)
    get_type_info : Proc(IIE70DispatchEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIE70DispatchEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIE70DispatchEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_disp_id : Proc(IIE70DispatchEx*, UInt8*, UInt32, Int32*, HRESULT)
    invoke_ex : Proc(IIE70DispatchEx*, Int32, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, IServiceProvider, HRESULT)
    delete_member_by_name : Proc(IIE70DispatchEx*, UInt8*, UInt32, HRESULT)
    delete_member_by_disp_id : Proc(IIE70DispatchEx*, Int32, HRESULT)
    get_member_properties : Proc(IIE70DispatchEx*, Int32, UInt32, UInt32*, HRESULT)
    get_member_name : Proc(IIE70DispatchEx*, Int32, UInt8**, HRESULT)
    get_next_disp_id : Proc(IIE70DispatchEx*, UInt32, Int32, Int32*, HRESULT)
    get_name_space_parent : Proc(IIE70DispatchEx*, IUnknown*, HRESULT)
  end

  IIE70DispatchEx_GUID = "3051046b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IIE70DispatchEx = LibC::GUID.new(0x3051046b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IIE70DispatchEx
    lpVtbl : IIE70DispatchExVTbl*
  end

  struct IIE80DispatchExVTbl
    query_interface : Proc(IIE80DispatchEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIE80DispatchEx*, UInt32)
    release : Proc(IIE80DispatchEx*, UInt32)
    get_type_info_count : Proc(IIE80DispatchEx*, UInt32*, HRESULT)
    get_type_info : Proc(IIE80DispatchEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIE80DispatchEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIE80DispatchEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_disp_id : Proc(IIE80DispatchEx*, UInt8*, UInt32, Int32*, HRESULT)
    invoke_ex : Proc(IIE80DispatchEx*, Int32, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, IServiceProvider, HRESULT)
    delete_member_by_name : Proc(IIE80DispatchEx*, UInt8*, UInt32, HRESULT)
    delete_member_by_disp_id : Proc(IIE80DispatchEx*, Int32, HRESULT)
    get_member_properties : Proc(IIE80DispatchEx*, Int32, UInt32, UInt32*, HRESULT)
    get_member_name : Proc(IIE80DispatchEx*, Int32, UInt8**, HRESULT)
    get_next_disp_id : Proc(IIE80DispatchEx*, UInt32, Int32, Int32*, HRESULT)
    get_name_space_parent : Proc(IIE80DispatchEx*, IUnknown*, HRESULT)
  end

  IIE80DispatchEx_GUID = "3051046c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IIE80DispatchEx = LibC::GUID.new(0x3051046c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IIE80DispatchEx
    lpVtbl : IIE80DispatchExVTbl*
  end

  struct IHTMLEventObjVTbl
    query_interface : Proc(IHTMLEventObj*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj*, UInt32)
    release : Proc(IHTMLEventObj*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_src_element : Proc(IHTMLEventObj*, IHTMLElement*, HRESULT)
    get_alt_key : Proc(IHTMLEventObj*, Int16*, HRESULT)
    get_ctrl_key : Proc(IHTMLEventObj*, Int16*, HRESULT)
    get_shift_key : Proc(IHTMLEventObj*, Int16*, HRESULT)
    put_return_value : Proc(IHTMLEventObj*, VARIANT, HRESULT)
    get_return_value : Proc(IHTMLEventObj*, VARIANT*, HRESULT)
    put_cancel_bubble : Proc(IHTMLEventObj*, Int16, HRESULT)
    get_cancel_bubble : Proc(IHTMLEventObj*, Int16*, HRESULT)
    get_from_element : Proc(IHTMLEventObj*, IHTMLElement*, HRESULT)
    get_to_element : Proc(IHTMLEventObj*, IHTMLElement*, HRESULT)
    put_key_code : Proc(IHTMLEventObj*, Int32, HRESULT)
    get_key_code : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_button : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_type : Proc(IHTMLEventObj*, UInt8**, HRESULT)
    get_qualifier : Proc(IHTMLEventObj*, UInt8**, HRESULT)
    get_reason : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_x : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_y : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_client_x : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_client_y : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_offset_x : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_offset_y : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_screen_x : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_screen_y : Proc(IHTMLEventObj*, Int32*, HRESULT)
    get_src_filter : Proc(IHTMLEventObj*, IDispatch*, HRESULT)
  end

  IHTMLEventObj_GUID = "3050f32d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj = LibC::GUID.new(0x3050f32d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj
    lpVtbl : IHTMLEventObjVTbl*
  end

  struct IElementBehaviorSiteVTbl
    query_interface : Proc(IElementBehaviorSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSite*, UInt32)
    release : Proc(IElementBehaviorSite*, UInt32)
    get_element : Proc(IElementBehaviorSite*, IHTMLElement*, HRESULT)
    register_notification : Proc(IElementBehaviorSite*, Int32, HRESULT)
  end

  IElementBehaviorSite_GUID = "3050f427-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSite = LibC::GUID.new(0x3050f427_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSite
    lpVtbl : IElementBehaviorSiteVTbl*
  end

  struct IElementBehaviorVTbl
    query_interface : Proc(IElementBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehavior*, UInt32)
    release : Proc(IElementBehavior*, UInt32)
    init : Proc(IElementBehavior*, IElementBehaviorSite, HRESULT)
    notify : Proc(IElementBehavior*, Int32, VARIANT*, HRESULT)
    detach : Proc(IElementBehavior*, HRESULT)
  end

  IElementBehavior_GUID = "3050f425-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehavior = LibC::GUID.new(0x3050f425_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehavior
    lpVtbl : IElementBehaviorVTbl*
  end

  struct IElementBehaviorFactoryVTbl
    query_interface : Proc(IElementBehaviorFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorFactory*, UInt32)
    release : Proc(IElementBehaviorFactory*, UInt32)
    find_behavior : Proc(IElementBehaviorFactory*, UInt8*, UInt8*, IElementBehaviorSite, IElementBehavior*, HRESULT)
  end

  IElementBehaviorFactory_GUID = "3050f429-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorFactory = LibC::GUID.new(0x3050f429_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorFactory
    lpVtbl : IElementBehaviorFactoryVTbl*
  end

  struct IElementBehaviorSiteOMVTbl
    query_interface : Proc(IElementBehaviorSiteOM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteOM*, UInt32)
    release : Proc(IElementBehaviorSiteOM*, UInt32)
    register_event : Proc(IElementBehaviorSiteOM*, LibC::LPWSTR, Int32, Int32*, HRESULT)
    get_event_cookie : Proc(IElementBehaviorSiteOM*, LibC::LPWSTR, Int32*, HRESULT)
    fire_event : Proc(IElementBehaviorSiteOM*, Int32, IHTMLEventObj, HRESULT)
    create_event_object : Proc(IElementBehaviorSiteOM*, IHTMLEventObj*, HRESULT)
    register_name : Proc(IElementBehaviorSiteOM*, LibC::LPWSTR, HRESULT)
    register_urn : Proc(IElementBehaviorSiteOM*, LibC::LPWSTR, HRESULT)
  end

  IElementBehaviorSiteOM_GUID = "3050f489-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteOM = LibC::GUID.new(0x3050f489_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteOM
    lpVtbl : IElementBehaviorSiteOMVTbl*
  end

  struct IElementBehaviorRenderVTbl
    query_interface : Proc(IElementBehaviorRender*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorRender*, UInt32)
    release : Proc(IElementBehaviorRender*, UInt32)
    draw : Proc(IElementBehaviorRender*, HDC, Int32, RECT*, IUnknown, HRESULT)
    get_render_info : Proc(IElementBehaviorRender*, Int32*, HRESULT)
    hit_test_point : Proc(IElementBehaviorRender*, POINT*, IUnknown, LibC::BOOL*, HRESULT)
  end

  IElementBehaviorRender_GUID = "3050f4aa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorRender = LibC::GUID.new(0x3050f4aa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorRender
    lpVtbl : IElementBehaviorRenderVTbl*
  end

  struct IElementBehaviorSiteRenderVTbl
    query_interface : Proc(IElementBehaviorSiteRender*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteRender*, UInt32)
    release : Proc(IElementBehaviorSiteRender*, UInt32)
    invalidate : Proc(IElementBehaviorSiteRender*, RECT*, HRESULT)
    invalidate_render_info : Proc(IElementBehaviorSiteRender*, HRESULT)
    invalidate_style : Proc(IElementBehaviorSiteRender*, HRESULT)
  end

  IElementBehaviorSiteRender_GUID = "3050f4a7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteRender = LibC::GUID.new(0x3050f4a7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteRender
    lpVtbl : IElementBehaviorSiteRenderVTbl*
  end

  struct IDOMEventVTbl
    query_interface : Proc(IDOMEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMEvent*, UInt32)
    release : Proc(IDOMEvent*, UInt32)
    get_type_info_count : Proc(IDOMEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_bubbles : Proc(IDOMEvent*, Int16*, HRESULT)
    get_cancelable : Proc(IDOMEvent*, Int16*, HRESULT)
    get_current_target : Proc(IDOMEvent*, IEventTarget*, HRESULT)
    get_default_prevented : Proc(IDOMEvent*, Int16*, HRESULT)
    get_event_phase : Proc(IDOMEvent*, UInt16*, HRESULT)
    get_target : Proc(IDOMEvent*, IEventTarget*, HRESULT)
    get_time_stamp : Proc(IDOMEvent*, UInt64*, HRESULT)
    get_type : Proc(IDOMEvent*, UInt8**, HRESULT)
    init_event : Proc(IDOMEvent*, UInt8*, Int16, Int16, HRESULT)
    prevent_default : Proc(IDOMEvent*, HRESULT)
    stop_propagation : Proc(IDOMEvent*, HRESULT)
    stop_immediate_propagation : Proc(IDOMEvent*, HRESULT)
    get_is_trusted : Proc(IDOMEvent*, Int16*, HRESULT)
    put_cancel_bubble : Proc(IDOMEvent*, Int16, HRESULT)
    get_cancel_bubble : Proc(IDOMEvent*, Int16*, HRESULT)
    get_src_element : Proc(IDOMEvent*, IHTMLElement*, HRESULT)
  end

  IDOMEvent_GUID = "305104ba-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMEvent = LibC::GUID.new(0x305104ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMEvent
    lpVtbl : IDOMEventVTbl*
  end

  struct IHTMLDOMConstructorVTbl
    query_interface : Proc(IHTMLDOMConstructor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMConstructor*, UInt32)
    release : Proc(IHTMLDOMConstructor*, UInt32)
    get_type_info_count : Proc(IHTMLDOMConstructor*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMConstructor*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMConstructor*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMConstructor*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_constructor : Proc(IHTMLDOMConstructor*, IDispatch*, HRESULT)
    lookup_getter : Proc(IHTMLDOMConstructor*, UInt8*, VARIANT*, HRESULT)
    lookup_setter : Proc(IHTMLDOMConstructor*, UInt8*, VARIANT*, HRESULT)
    define_getter : Proc(IHTMLDOMConstructor*, UInt8*, VARIANT*, HRESULT)
    define_setter : Proc(IHTMLDOMConstructor*, UInt8*, VARIANT*, HRESULT)
  end

  IHTMLDOMConstructor_GUID = "3051049b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMConstructor = LibC::GUID.new(0x3051049b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMConstructor
    lpVtbl : IHTMLDOMConstructorVTbl*
  end

  struct IHTMLStyleSheetRuleVTbl
    query_interface : Proc(IHTMLStyleSheetRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRule*, UInt32)
    release : Proc(IHTMLStyleSheetRule*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selector_text : Proc(IHTMLStyleSheetRule*, UInt8*, HRESULT)
    get_selector_text : Proc(IHTMLStyleSheetRule*, UInt8**, HRESULT)
    get_style : Proc(IHTMLStyleSheetRule*, IHTMLRuleStyle*, HRESULT)
    get_read_only : Proc(IHTMLStyleSheetRule*, Int16*, HRESULT)
  end

  IHTMLStyleSheetRule_GUID = "3050f357-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRule = LibC::GUID.new(0x3050f357_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRule
    lpVtbl : IHTMLStyleSheetRuleVTbl*
  end

  struct IHTMLCSSStyleDeclarationVTbl
    query_interface : Proc(IHTMLCSSStyleDeclaration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSStyleDeclaration*, UInt32)
    release : Proc(IHTMLCSSStyleDeclaration*, UInt32)
    get_type_info_count : Proc(IHTMLCSSStyleDeclaration*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSStyleDeclaration*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSStyleDeclaration*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSStyleDeclaration*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLCSSStyleDeclaration*, Int32*, HRESULT)
    get_parent_rule : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    get_property_value : Proc(IHTMLCSSStyleDeclaration*, UInt8*, UInt8**, HRESULT)
    get_property_priority : Proc(IHTMLCSSStyleDeclaration*, UInt8*, UInt8**, HRESULT)
    remove_property : Proc(IHTMLCSSStyleDeclaration*, UInt8*, UInt8**, HRESULT)
    set_property : Proc(IHTMLCSSStyleDeclaration*, UInt8*, VARIANT*, VARIANT*, HRESULT)
    item : Proc(IHTMLCSSStyleDeclaration*, Int32, UInt8**, HRESULT)
    put_font_family : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font_family : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_font_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_font_variant : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font_variant : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_font_weight : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font_weight : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_font_size : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_font_size : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_font : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_background : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_background_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_background_image : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_image : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_repeat : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_repeat : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_attachment : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_attachment : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_position : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_position : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_position_x : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_background_position_x : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_background_position_y : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_background_position_y : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_word_spacing : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_word_spacing : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_letter_spacing : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_letter_spacing : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_text_decoration : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_decoration : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_vertical_align : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_vertical_align : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_text_transform : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_transform : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_align : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_align : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_indent : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_text_indent : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_line_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_line_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_margin_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_margin_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_margin_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_margin_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_margin_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_margin_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_margin_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_margin_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_margin : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_margin : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_padding_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_padding_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_padding_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_padding_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_padding_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_padding_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_padding_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_padding_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_padding : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_padding : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_top : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_right : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_right : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_bottom : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_bottom : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_left : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_left : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_color : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_color : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_top_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_right_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_right_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_bottom_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_bottom_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_left_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_left_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_width : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_width : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_top_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_right_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_right_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_bottom_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_bottom_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_left_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_border_left_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_top_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_right_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_right_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_bottom_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_bottom_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_left_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_left_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_style_float : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_style_float : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_clear : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_clear : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_display : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_display : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_visibility : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_visibility : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_list_style_type : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_list_style_type : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_list_style_position : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_list_style_position : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_list_style_image : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_list_style_image : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_list_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_list_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_white_space : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_white_space : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_z_index : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_z_index : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_overflow : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_overflow : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_page_break_before : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_page_break_before : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_page_break_after : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_page_break_after : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_css_text : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_css_text : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_cursor : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_cursor : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_clip : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_clip : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_filter : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_filter : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_table_layout : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_table_layout : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_collapse : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_collapse : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_direction : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_direction : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_behavior : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_behavior : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_position : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_position : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_unicode_bidi : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_unicode_bidi : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_ime_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ime_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ruby_align : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ruby_align : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ruby_position : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ruby_position : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ruby_overhang : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ruby_overhang : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_layout_grid_char : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_layout_grid_char : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_layout_grid_line : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_layout_grid_line : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_layout_grid_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_layout_grid_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_layout_grid_type : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_layout_grid_type : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_layout_grid : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_layout_grid : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_autospace : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_autospace : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_word_break : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_word_break : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_line_break : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_line_break : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_justify : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_justify : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_justify_trim : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_justify_trim : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_kashida : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_text_kashida : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_overflow_x : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_overflow_x : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_overflow_y : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_overflow_y : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_accelerator : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_accelerator : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_layout_flow : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_layout_flow : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_zoom : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_zoom : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_word_wrap : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_word_wrap : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_underline_position : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_underline_position : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_scrollbar_base_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_base_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_face_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_face_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar3d_light_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar3d_light_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_shadow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_shadow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_highlight_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_highlight_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_dark_shadow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_dark_shadow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_arrow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_arrow_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_scrollbar_track_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_scrollbar_track_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_writing_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_writing_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_align_last : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_align_last : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_text_kashida_space : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_text_kashida_space : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_text_overflow : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_overflow : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_min_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_min_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_ms_interpolation_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ms_interpolation_mode : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_max_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_max_height : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_min_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_min_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_max_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_max_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_content : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_content : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_caption_side : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_caption_side : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_counter_increment : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_counter_increment : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_counter_reset : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_counter_reset : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_outline : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_outline : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_outline_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_outline_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_outline_style : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_outline_style : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_outline_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_outline_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_box_sizing : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_box_sizing : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_spacing : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_spacing : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_orphans : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_orphans : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_widows : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_widows : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_page_break_inside : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_page_break_inside : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_empty_cells : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_empty_cells : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ms_block_progression : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ms_block_progression : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_quotes : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_quotes : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_alignment_baseline : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_alignment_baseline : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_baseline_shift : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_baseline_shift : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_dominant_baseline : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_dominant_baseline : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_font_size_adjust : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_font_size_adjust : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_font_stretch : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_font_stretch : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_clip_path : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_clip_path : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_clip_rule : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_clip_rule : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_fill : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_fill : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_fill_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_fill_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_fill_rule : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_fill_rule : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_kerning : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_kerning : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_marker : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_marker : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_marker_end : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_marker_end : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_marker_mid : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_marker_mid : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_marker_start : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_marker_start : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_mask : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_mask : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_pointer_events : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_pointer_events : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_stop_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stop_color : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_stop_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stop_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_stroke : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_stroke : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_stroke_dasharray : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_stroke_dasharray : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_stroke_dashoffset : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stroke_dashoffset : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_stroke_linecap : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_stroke_linecap : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_stroke_linejoin : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_stroke_linejoin : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_stroke_miterlimit : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stroke_miterlimit : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_stroke_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stroke_opacity : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_stroke_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_stroke_width : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_text_anchor : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_text_anchor : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_glyph_orientation_horizontal : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_glyph_orientation_horizontal : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_glyph_orientation_vertical : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_glyph_orientation_vertical : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_border_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top_left_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_top_left_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_top_right_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_top_right_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_bottom_right_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_bottom_right_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_border_bottom_left_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_border_bottom_left_radius : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_clip_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_clip_top : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_clip_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_clip_right : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    get_clip_bottom : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_clip_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT, HRESULT)
    get_clip_left : Proc(IHTMLCSSStyleDeclaration*, VARIANT*, HRESULT)
    put_css_float : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_css_float : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_clip : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_clip : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_origin : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_origin : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_background_size : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_background_size : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_box_shadow : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_box_shadow : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ms_transform : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ms_transform : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
    put_ms_transform_origin : Proc(IHTMLCSSStyleDeclaration*, UInt8*, HRESULT)
    get_ms_transform_origin : Proc(IHTMLCSSStyleDeclaration*, UInt8**, HRESULT)
  end

  IHTMLCSSStyleDeclaration_GUID = "30510740-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSStyleDeclaration = LibC::GUID.new(0x30510740_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSStyleDeclaration
    lpVtbl : IHTMLCSSStyleDeclarationVTbl*
  end

  struct IHTMLCSSStyleDeclaration2VTbl
    query_interface : Proc(IHTMLCSSStyleDeclaration2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSStyleDeclaration2*, UInt32)
    release : Proc(IHTMLCSSStyleDeclaration2*, UInt32)
    get_type_info_count : Proc(IHTMLCSSStyleDeclaration2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSStyleDeclaration2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSStyleDeclaration2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSStyleDeclaration2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ms_scroll_chaining : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_chaining : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zooming : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zooming : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_snap_type : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zoom_snap_type : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_rails : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_rails : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_chaining : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zoom_chaining : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_snap_type : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_snap_type : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_limit : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zoom_limit : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_snap : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zoom_snap : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_snap_points : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_content_zoom_snap_points : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_content_zoom_limit_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_content_zoom_limit_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_content_zoom_limit_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_content_zoom_limit_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_snap_x : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_snap_x : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_snap_y : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_snap_y : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_snap_points_x : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_snap_points_x : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_snap_points_y : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_snap_points_y : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_grid_column : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_grid_column : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_grid_column_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_grid_column_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_grid_columns : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_grid_columns : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_grid_column_span : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_grid_column_span : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_grid_row : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_grid_row : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_grid_row_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_grid_row_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_grid_rows : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_grid_rows : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_grid_row_span : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_grid_row_span : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_wrap_through : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_wrap_through : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_wrap_margin : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_wrap_margin : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_wrap_flow : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_wrap_flow : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_name : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_name : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_play_state : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_play_state : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_color_interpolation_filters : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_color_interpolation_filters : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_column_count : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_column_count : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_column_width : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_column_width : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_column_gap : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_column_gap : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_column_fill : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_column_fill : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_column_span : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_column_span : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_columns : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_columns : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_column_rule : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_column_rule : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_column_rule_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_column_rule_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_column_rule_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_column_rule_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_column_rule_width : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_column_rule_width : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_break_before : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_break_before : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_break_after : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_break_after : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_break_inside : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_break_inside : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_flood_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_flood_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_flood_opacity : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_flood_opacity : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_lighting_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_lighting_color : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_limit_x_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_scroll_limit_x_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_limit_y_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_scroll_limit_y_min : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_limit_x_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_scroll_limit_x_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_limit_y_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_scroll_limit_y_max : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_scroll_limit : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_limit : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_text_shadow : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_text_shadow : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flow_from : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flow_from : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flow_into : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flow_into : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_hyphens : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_hyphens : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_hyphenate_limit_zone : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_hyphenate_limit_zone : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_hyphenate_limit_chars : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_hyphenate_limit_chars : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_hyphenate_limit_lines : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_hyphenate_limit_lines : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_high_contrast_adjust : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_high_contrast_adjust : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_enable_background : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_enable_background : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_font_feature_settings : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_font_feature_settings : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_user_select : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_user_select : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_overflow_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_overflow_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transform_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transform_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_backface_visibility : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_backface_visibility : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_perspective : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_perspective : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_perspective_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_perspective_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transition_property : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transition_property : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transition_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transition_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transition_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transition_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transition_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transition_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_transition : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_transition : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_touch_action : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_touch_action : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_scroll_translation : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_scroll_translation : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_positive : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_flex_positive : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_flex_negative : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_flex_negative : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_flex_preferred_size : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_flex_preferred_size : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_flex_flow : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_flow : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_wrap : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_wrap : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_item_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_item_align : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_pack : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_pack : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_line_pack : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_flex_line_pack : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_ms_flex_order : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_ms_flex_order : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_ms_touch_select : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_ms_touch_select : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transform : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transform : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transform_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transform_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transform_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transform_style : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_backface_visibility : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_backface_visibility : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_perspective : Proc(IHTMLCSSStyleDeclaration2*, VARIANT, HRESULT)
    get_perspective : Proc(IHTMLCSSStyleDeclaration2*, VARIANT*, HRESULT)
    put_perspective_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_perspective_origin : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transition_property : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transition_property : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transition_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transition_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transition_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transition_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transition_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transition_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_transition : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_transition : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_font_feature_settings : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_font_feature_settings : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_name : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_name : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_duration : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_timing_function : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_delay : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_direction : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_play_state : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_play_state : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
    put_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration2*, UInt8*, HRESULT)
    get_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration2*, UInt8**, HRESULT)
  end

  IHTMLCSSStyleDeclaration2_GUID = "305107d1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSStyleDeclaration2 = LibC::GUID.new(0x305107d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSStyleDeclaration2
    lpVtbl : IHTMLCSSStyleDeclaration2VTbl*
  end

  struct IHTMLCSSStyleDeclaration3VTbl
    query_interface : Proc(IHTMLCSSStyleDeclaration3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSStyleDeclaration3*, UInt32)
    release : Proc(IHTMLCSSStyleDeclaration3*, UInt32)
    get_type_info_count : Proc(IHTMLCSSStyleDeclaration3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSStyleDeclaration3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSStyleDeclaration3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSStyleDeclaration3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_flex : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_flex : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_flex_direction : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_flex_direction : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_flex_wrap : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_flex_wrap : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_flex_flow : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_flex_flow : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_flex_grow : Proc(IHTMLCSSStyleDeclaration3*, VARIANT, HRESULT)
    get_flex_grow : Proc(IHTMLCSSStyleDeclaration3*, VARIANT*, HRESULT)
    put_flex_shrink : Proc(IHTMLCSSStyleDeclaration3*, VARIANT, HRESULT)
    get_flex_shrink : Proc(IHTMLCSSStyleDeclaration3*, VARIANT*, HRESULT)
    put_flex_basis : Proc(IHTMLCSSStyleDeclaration3*, VARIANT, HRESULT)
    get_flex_basis : Proc(IHTMLCSSStyleDeclaration3*, VARIANT*, HRESULT)
    put_justify_content : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_justify_content : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_align_items : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_align_items : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_align_self : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_align_self : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_align_content : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_align_content : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image_source : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image_source : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image_slice : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image_slice : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image_width : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image_width : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image_outset : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image_outset : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_border_image_repeat : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_border_image_repeat : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_ms_ime_align : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_ms_ime_align : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_ms_text_combine_horizontal : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_ms_text_combine_horizontal : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
    put_touch_action : Proc(IHTMLCSSStyleDeclaration3*, UInt8*, HRESULT)
    get_touch_action : Proc(IHTMLCSSStyleDeclaration3*, UInt8**, HRESULT)
  end

  IHTMLCSSStyleDeclaration3_GUID = "3051085c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSStyleDeclaration3 = LibC::GUID.new(0x3051085c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSStyleDeclaration3
    lpVtbl : IHTMLCSSStyleDeclaration3VTbl*
  end

  struct IHTMLCSSStyleDeclaration4VTbl
    query_interface : Proc(IHTMLCSSStyleDeclaration4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSStyleDeclaration4*, UInt32)
    release : Proc(IHTMLCSSStyleDeclaration4*, UInt32)
    get_type_info_count : Proc(IHTMLCSSStyleDeclaration4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSStyleDeclaration4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSStyleDeclaration4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSStyleDeclaration4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_webkit_appearance : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_appearance : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_user_select : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_user_select : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_box_align : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_box_align : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_box_ordinal_group : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_box_ordinal_group : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_box_pack : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_box_pack : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_box_flex : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_box_flex : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_box_orient : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_box_orient : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_box_direction : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_box_direction : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transform : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transform : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_size : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_size : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_backface_visibility : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_backface_visibility : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transition : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transition : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_name : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_name : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_duration : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_duration : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_timing_function : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_timing_function : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_delay : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_delay : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_iteration_count : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_direction : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_direction : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_play_state : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_play_state : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transition_property : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transition_property : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transition_duration : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transition_duration : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transition_timing_function : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transition_timing_function : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transition_delay : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transition_delay : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_attachment : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_attachment : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_color : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_background_color : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_background_clip : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_clip : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_image : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_image : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_repeat : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_repeat : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_origin : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_origin : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_position : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background_position : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_background_position_x : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_background_position_x : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_background_position_y : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_background_position_y : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_background : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_background : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_transform_origin : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_transform_origin : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_ms_text_size_adjust : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_ms_text_size_adjust : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_text_size_adjust : Proc(IHTMLCSSStyleDeclaration4*, VARIANT, HRESULT)
    get_webkit_text_size_adjust : Proc(IHTMLCSSStyleDeclaration4*, VARIANT*, HRESULT)
    put_webkit_border_image : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_border_image_source : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image_source : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_border_image_slice : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image_slice : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_border_image_width : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image_width : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_border_image_outset : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image_outset : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_border_image_repeat : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_border_image_repeat : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_box_sizing : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_box_sizing : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
    put_webkit_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration4*, UInt8*, HRESULT)
    get_webkit_animation_fill_mode : Proc(IHTMLCSSStyleDeclaration4*, UInt8**, HRESULT)
  end

  IHTMLCSSStyleDeclaration4_GUID = "d6100f3b-27c8-4132-afea-f0e4b1e00060"
  IID_IHTMLCSSStyleDeclaration4 = LibC::GUID.new(0xd6100f3b_u32, 0x27c8_u16, 0x4132_u16, StaticArray[0xaf_u8, 0xea_u8, 0xf0_u8, 0xe4_u8, 0xb1_u8, 0xe0_u8, 0x0_u8, 0x60_u8])
  struct IHTMLCSSStyleDeclaration4
    lpVtbl : IHTMLCSSStyleDeclaration4VTbl*
  end

  struct IHTMLStyleEnabledVTbl
    query_interface : Proc(IHTMLStyleEnabled*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleEnabled*, UInt32)
    release : Proc(IHTMLStyleEnabled*, UInt32)
    get_type_info_count : Proc(IHTMLStyleEnabled*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleEnabled*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleEnabled*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleEnabled*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    ms_get_property_enabled : Proc(IHTMLStyleEnabled*, UInt8*, Int16*, HRESULT)
    ms_put_property_enabled : Proc(IHTMLStyleEnabled*, UInt8*, Int16, HRESULT)
  end

  IHTMLStyleEnabled_GUID = "305104c2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleEnabled = LibC::GUID.new(0x305104c2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleEnabled
    lpVtbl : IHTMLStyleEnabledVTbl*
  end

  struct DispHTMLCSSStyleDeclarationVTbl
    query_interface : Proc(DispHTMLCSSStyleDeclaration*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSStyleDeclaration*, UInt32)
    release : Proc(DispHTMLCSSStyleDeclaration*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSStyleDeclaration*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSStyleDeclaration*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSStyleDeclaration*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSStyleDeclaration*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSStyleDeclaration_GUID = "3059009a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSStyleDeclaration = LibC::GUID.new(0x3059009a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSStyleDeclaration
    lpVtbl : DispHTMLCSSStyleDeclarationVTbl*
  end

  struct IHTMLStyleVTbl
    query_interface : Proc(IHTMLStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle*, UInt32)
    release : Proc(IHTMLStyle*, UInt32)
    get_type_info_count : Proc(IHTMLStyle*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_font_family : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_font_family : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_font_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_font_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_font_variant : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_font_variant : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_font_weight : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_font_weight : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_font_size : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_font_size : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_font : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_font : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_background : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_background : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_background_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_background_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_background_image : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_background_image : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_background_repeat : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_background_repeat : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_background_attachment : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_background_attachment : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_background_position : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_background_position : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_background_position_x : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_background_position_x : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_background_position_y : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_background_position_y : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_word_spacing : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_word_spacing : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_letter_spacing : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_letter_spacing : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_text_decoration : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_text_decoration : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_text_decoration_none : Proc(IHTMLStyle*, Int16, HRESULT)
    get_text_decoration_none : Proc(IHTMLStyle*, Int16*, HRESULT)
    put_text_decoration_underline : Proc(IHTMLStyle*, Int16, HRESULT)
    get_text_decoration_underline : Proc(IHTMLStyle*, Int16*, HRESULT)
    put_text_decoration_overline : Proc(IHTMLStyle*, Int16, HRESULT)
    get_text_decoration_overline : Proc(IHTMLStyle*, Int16*, HRESULT)
    put_text_decoration_line_through : Proc(IHTMLStyle*, Int16, HRESULT)
    get_text_decoration_line_through : Proc(IHTMLStyle*, Int16*, HRESULT)
    put_text_decoration_blink : Proc(IHTMLStyle*, Int16, HRESULT)
    get_text_decoration_blink : Proc(IHTMLStyle*, Int16*, HRESULT)
    put_vertical_align : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_vertical_align : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_text_transform : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_text_transform : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_text_align : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_text_align : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_text_indent : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_text_indent : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_line_height : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_line_height : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_margin_top : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_margin_top : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_margin_right : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_margin_right : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_margin_bottom : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_margin_bottom : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_margin_left : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_margin_left : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_margin : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_margin : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_padding_top : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_padding_top : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_padding_right : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_padding_right : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_padding_bottom : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_padding_bottom : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_padding_left : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_padding_left : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_padding : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_padding : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_top : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_top : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_right : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_right : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_bottom : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_bottom : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_left : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_left : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_color : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_color : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_top_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_top_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_right_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_right_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_bottom_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_bottom_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_left_color : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_left_color : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_width : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_width : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_top_width : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_top_width : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_right_width : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_right_width : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_bottom_width : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_bottom_width : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_left_width : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_border_left_width : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_border_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_top_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_top_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_right_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_right_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_bottom_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_bottom_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_border_left_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_border_left_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_width : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_width : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_height : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_style_float : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_style_float : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_clear : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_clear : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_display : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_display : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_visibility : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_visibility : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_list_style_type : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_list_style_type : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_list_style_position : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_list_style_position : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_list_style_image : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_list_style_image : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_list_style : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_list_style : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_white_space : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_white_space : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_top : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_top : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_left : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_left : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    get_position : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_z_index : Proc(IHTMLStyle*, VARIANT, HRESULT)
    get_z_index : Proc(IHTMLStyle*, VARIANT*, HRESULT)
    put_overflow : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_overflow : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_page_break_before : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_page_break_before : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_page_break_after : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_page_break_after : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_css_text : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_css_text : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_pixel_top : Proc(IHTMLStyle*, Int32, HRESULT)
    get_pixel_top : Proc(IHTMLStyle*, Int32*, HRESULT)
    put_pixel_left : Proc(IHTMLStyle*, Int32, HRESULT)
    get_pixel_left : Proc(IHTMLStyle*, Int32*, HRESULT)
    put_pixel_width : Proc(IHTMLStyle*, Int32, HRESULT)
    get_pixel_width : Proc(IHTMLStyle*, Int32*, HRESULT)
    put_pixel_height : Proc(IHTMLStyle*, Int32, HRESULT)
    get_pixel_height : Proc(IHTMLStyle*, Int32*, HRESULT)
    put_pos_top : Proc(IHTMLStyle*, Float32, HRESULT)
    get_pos_top : Proc(IHTMLStyle*, Float32*, HRESULT)
    put_pos_left : Proc(IHTMLStyle*, Float32, HRESULT)
    get_pos_left : Proc(IHTMLStyle*, Float32*, HRESULT)
    put_pos_width : Proc(IHTMLStyle*, Float32, HRESULT)
    get_pos_width : Proc(IHTMLStyle*, Float32*, HRESULT)
    put_pos_height : Proc(IHTMLStyle*, Float32, HRESULT)
    get_pos_height : Proc(IHTMLStyle*, Float32*, HRESULT)
    put_cursor : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_cursor : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_clip : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_clip : Proc(IHTMLStyle*, UInt8**, HRESULT)
    put_filter : Proc(IHTMLStyle*, UInt8*, HRESULT)
    get_filter : Proc(IHTMLStyle*, UInt8**, HRESULT)
    set_attribute : Proc(IHTMLStyle*, UInt8*, VARIANT, Int32, HRESULT)
    get_attribute : Proc(IHTMLStyle*, UInt8*, Int32, VARIANT*, HRESULT)
    remove_attribute : Proc(IHTMLStyle*, UInt8*, Int32, Int16*, HRESULT)
    to_string : Proc(IHTMLStyle*, UInt8**, HRESULT)
  end

  IHTMLStyle_GUID = "3050f25e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle = LibC::GUID.new(0x3050f25e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle
    lpVtbl : IHTMLStyleVTbl*
  end

  struct IHTMLStyle2VTbl
    query_interface : Proc(IHTMLStyle2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle2*, UInt32)
    release : Proc(IHTMLStyle2*, UInt32)
    get_type_info_count : Proc(IHTMLStyle2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_table_layout : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_table_layout : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_border_collapse : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_border_collapse : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_direction : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_direction : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_behavior : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_behavior : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    set_expression : Proc(IHTMLStyle2*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_expression : Proc(IHTMLStyle2*, UInt8*, VARIANT*, HRESULT)
    remove_expression : Proc(IHTMLStyle2*, UInt8*, Int16*, HRESULT)
    put_position : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_position : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_unicode_bidi : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_unicode_bidi : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_bottom : Proc(IHTMLStyle2*, VARIANT, HRESULT)
    get_bottom : Proc(IHTMLStyle2*, VARIANT*, HRESULT)
    put_right : Proc(IHTMLStyle2*, VARIANT, HRESULT)
    get_right : Proc(IHTMLStyle2*, VARIANT*, HRESULT)
    put_pixel_bottom : Proc(IHTMLStyle2*, Int32, HRESULT)
    get_pixel_bottom : Proc(IHTMLStyle2*, Int32*, HRESULT)
    put_pixel_right : Proc(IHTMLStyle2*, Int32, HRESULT)
    get_pixel_right : Proc(IHTMLStyle2*, Int32*, HRESULT)
    put_pos_bottom : Proc(IHTMLStyle2*, Float32, HRESULT)
    get_pos_bottom : Proc(IHTMLStyle2*, Float32*, HRESULT)
    put_pos_right : Proc(IHTMLStyle2*, Float32, HRESULT)
    get_pos_right : Proc(IHTMLStyle2*, Float32*, HRESULT)
    put_ime_mode : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_ime_mode : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_ruby_align : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_ruby_align : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_ruby_position : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_ruby_position : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_ruby_overhang : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_ruby_overhang : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_layout_grid_char : Proc(IHTMLStyle2*, VARIANT, HRESULT)
    get_layout_grid_char : Proc(IHTMLStyle2*, VARIANT*, HRESULT)
    put_layout_grid_line : Proc(IHTMLStyle2*, VARIANT, HRESULT)
    get_layout_grid_line : Proc(IHTMLStyle2*, VARIANT*, HRESULT)
    put_layout_grid_mode : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_layout_grid_mode : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_layout_grid_type : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_layout_grid_type : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_layout_grid : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_layout_grid : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_word_break : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_word_break : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_line_break : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_line_break : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_text_justify : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_text_justify : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_text_justify_trim : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_text_justify_trim : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_text_kashida : Proc(IHTMLStyle2*, VARIANT, HRESULT)
    get_text_kashida : Proc(IHTMLStyle2*, VARIANT*, HRESULT)
    put_text_autospace : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_text_autospace : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_overflow_x : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_overflow_x : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_overflow_y : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_overflow_y : Proc(IHTMLStyle2*, UInt8**, HRESULT)
    put_accelerator : Proc(IHTMLStyle2*, UInt8*, HRESULT)
    get_accelerator : Proc(IHTMLStyle2*, UInt8**, HRESULT)
  end

  IHTMLStyle2_GUID = "3050f4a2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle2 = LibC::GUID.new(0x3050f4a2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle2
    lpVtbl : IHTMLStyle2VTbl*
  end

  struct IHTMLStyle3VTbl
    query_interface : Proc(IHTMLStyle3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle3*, UInt32)
    release : Proc(IHTMLStyle3*, UInt32)
    get_type_info_count : Proc(IHTMLStyle3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_layout_flow : Proc(IHTMLStyle3*, UInt8*, HRESULT)
    get_layout_flow : Proc(IHTMLStyle3*, UInt8**, HRESULT)
    put_zoom : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_zoom : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_word_wrap : Proc(IHTMLStyle3*, UInt8*, HRESULT)
    get_word_wrap : Proc(IHTMLStyle3*, UInt8**, HRESULT)
    put_text_underline_position : Proc(IHTMLStyle3*, UInt8*, HRESULT)
    get_text_underline_position : Proc(IHTMLStyle3*, UInt8**, HRESULT)
    put_scrollbar_base_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_base_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_face_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_face_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar3d_light_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar3d_light_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_shadow_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_shadow_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_highlight_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_highlight_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_dark_shadow_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_dark_shadow_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_arrow_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_arrow_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_scrollbar_track_color : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_scrollbar_track_color : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
    put_writing_mode : Proc(IHTMLStyle3*, UInt8*, HRESULT)
    get_writing_mode : Proc(IHTMLStyle3*, UInt8**, HRESULT)
    put_text_align_last : Proc(IHTMLStyle3*, UInt8*, HRESULT)
    get_text_align_last : Proc(IHTMLStyle3*, UInt8**, HRESULT)
    put_text_kashida_space : Proc(IHTMLStyle3*, VARIANT, HRESULT)
    get_text_kashida_space : Proc(IHTMLStyle3*, VARIANT*, HRESULT)
  end

  IHTMLStyle3_GUID = "3050f656-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle3 = LibC::GUID.new(0x3050f656_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle3
    lpVtbl : IHTMLStyle3VTbl*
  end

  struct IHTMLStyle4VTbl
    query_interface : Proc(IHTMLStyle4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle4*, UInt32)
    release : Proc(IHTMLStyle4*, UInt32)
    get_type_info_count : Proc(IHTMLStyle4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_text_overflow : Proc(IHTMLStyle4*, UInt8*, HRESULT)
    get_text_overflow : Proc(IHTMLStyle4*, UInt8**, HRESULT)
    put_min_height : Proc(IHTMLStyle4*, VARIANT, HRESULT)
    get_min_height : Proc(IHTMLStyle4*, VARIANT*, HRESULT)
  end

  IHTMLStyle4_GUID = "3050f816-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle4 = LibC::GUID.new(0x3050f816_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle4
    lpVtbl : IHTMLStyle4VTbl*
  end

  struct IHTMLStyle5VTbl
    query_interface : Proc(IHTMLStyle5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle5*, UInt32)
    release : Proc(IHTMLStyle5*, UInt32)
    get_type_info_count : Proc(IHTMLStyle5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ms_interpolation_mode : Proc(IHTMLStyle5*, UInt8*, HRESULT)
    get_ms_interpolation_mode : Proc(IHTMLStyle5*, UInt8**, HRESULT)
    put_max_height : Proc(IHTMLStyle5*, VARIANT, HRESULT)
    get_max_height : Proc(IHTMLStyle5*, VARIANT*, HRESULT)
    put_min_width : Proc(IHTMLStyle5*, VARIANT, HRESULT)
    get_min_width : Proc(IHTMLStyle5*, VARIANT*, HRESULT)
    put_max_width : Proc(IHTMLStyle5*, VARIANT, HRESULT)
    get_max_width : Proc(IHTMLStyle5*, VARIANT*, HRESULT)
  end

  IHTMLStyle5_GUID = "3050f33a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle5 = LibC::GUID.new(0x3050f33a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle5
    lpVtbl : IHTMLStyle5VTbl*
  end

  struct IHTMLStyle6VTbl
    query_interface : Proc(IHTMLStyle6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyle6*, UInt32)
    release : Proc(IHTMLStyle6*, UInt32)
    get_type_info_count : Proc(IHTMLStyle6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyle6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyle6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyle6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_content : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_content : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_caption_side : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_caption_side : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_counter_increment : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_counter_increment : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_counter_reset : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_counter_reset : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_outline : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_outline : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_outline_width : Proc(IHTMLStyle6*, VARIANT, HRESULT)
    get_outline_width : Proc(IHTMLStyle6*, VARIANT*, HRESULT)
    put_outline_style : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_outline_style : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_outline_color : Proc(IHTMLStyle6*, VARIANT, HRESULT)
    get_outline_color : Proc(IHTMLStyle6*, VARIANT*, HRESULT)
    put_box_sizing : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_box_sizing : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_border_spacing : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_border_spacing : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_orphans : Proc(IHTMLStyle6*, VARIANT, HRESULT)
    get_orphans : Proc(IHTMLStyle6*, VARIANT*, HRESULT)
    put_widows : Proc(IHTMLStyle6*, VARIANT, HRESULT)
    get_widows : Proc(IHTMLStyle6*, VARIANT*, HRESULT)
    put_page_break_inside : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_page_break_inside : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_empty_cells : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_empty_cells : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_ms_block_progression : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_ms_block_progression : Proc(IHTMLStyle6*, UInt8**, HRESULT)
    put_quotes : Proc(IHTMLStyle6*, UInt8*, HRESULT)
    get_quotes : Proc(IHTMLStyle6*, UInt8**, HRESULT)
  end

  IHTMLStyle6_GUID = "30510480-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyle6 = LibC::GUID.new(0x30510480_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyle6
    lpVtbl : IHTMLStyle6VTbl*
  end

  struct IHTMLRuleStyleVTbl
    query_interface : Proc(IHTMLRuleStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle*, UInt32)
    release : Proc(IHTMLRuleStyle*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_font_family : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_font_family : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_font_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_font_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_font_variant : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_font_variant : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_font_weight : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_font_weight : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_font_size : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_font_size : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_font : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_font : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_background : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_background : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_background_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_background_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_background_image : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_background_image : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_background_repeat : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_background_repeat : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_background_attachment : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_background_attachment : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_background_position : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_background_position : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_background_position_x : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_background_position_x : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_background_position_y : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_background_position_y : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_word_spacing : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_word_spacing : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_letter_spacing : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_letter_spacing : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_text_decoration : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_text_decoration : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_text_decoration_none : Proc(IHTMLRuleStyle*, Int16, HRESULT)
    get_text_decoration_none : Proc(IHTMLRuleStyle*, Int16*, HRESULT)
    put_text_decoration_underline : Proc(IHTMLRuleStyle*, Int16, HRESULT)
    get_text_decoration_underline : Proc(IHTMLRuleStyle*, Int16*, HRESULT)
    put_text_decoration_overline : Proc(IHTMLRuleStyle*, Int16, HRESULT)
    get_text_decoration_overline : Proc(IHTMLRuleStyle*, Int16*, HRESULT)
    put_text_decoration_line_through : Proc(IHTMLRuleStyle*, Int16, HRESULT)
    get_text_decoration_line_through : Proc(IHTMLRuleStyle*, Int16*, HRESULT)
    put_text_decoration_blink : Proc(IHTMLRuleStyle*, Int16, HRESULT)
    get_text_decoration_blink : Proc(IHTMLRuleStyle*, Int16*, HRESULT)
    put_vertical_align : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_vertical_align : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_text_transform : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_text_transform : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_text_align : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_text_align : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_text_indent : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_text_indent : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_line_height : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_line_height : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_margin_top : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_margin_top : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_margin_right : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_margin_right : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_margin_bottom : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_margin_bottom : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_margin_left : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_margin_left : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_margin : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_margin : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_padding_top : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_padding_top : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_padding_right : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_padding_right : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_padding_bottom : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_padding_bottom : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_padding_left : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_padding_left : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_padding : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_padding : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_top : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_top : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_right : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_right : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_bottom : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_bottom : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_left : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_left : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_color : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_color : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_top_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_top_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_right_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_right_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_bottom_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_bottom_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_left_color : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_left_color : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_width : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_width : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_top_width : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_top_width : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_right_width : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_right_width : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_bottom_width : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_bottom_width : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_left_width : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_border_left_width : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_border_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_top_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_top_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_right_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_right_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_bottom_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_bottom_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_border_left_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_border_left_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_width : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_width : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_height : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_style_float : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_style_float : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_clear : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_clear : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_display : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_display : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_visibility : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_visibility : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_list_style_type : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_list_style_type : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_list_style_position : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_list_style_position : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_list_style_image : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_list_style_image : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_list_style : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_list_style : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_white_space : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_white_space : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_top : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_top : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_left : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_left : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    get_position : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_z_index : Proc(IHTMLRuleStyle*, VARIANT, HRESULT)
    get_z_index : Proc(IHTMLRuleStyle*, VARIANT*, HRESULT)
    put_overflow : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_overflow : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_page_break_before : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_page_break_before : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_page_break_after : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_page_break_after : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_css_text : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_css_text : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_cursor : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_cursor : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_clip : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_clip : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    put_filter : Proc(IHTMLRuleStyle*, UInt8*, HRESULT)
    get_filter : Proc(IHTMLRuleStyle*, UInt8**, HRESULT)
    set_attribute : Proc(IHTMLRuleStyle*, UInt8*, VARIANT, Int32, HRESULT)
    get_attribute : Proc(IHTMLRuleStyle*, UInt8*, Int32, VARIANT*, HRESULT)
    remove_attribute : Proc(IHTMLRuleStyle*, UInt8*, Int32, Int16*, HRESULT)
  end

  IHTMLRuleStyle_GUID = "3050f3cf-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle = LibC::GUID.new(0x3050f3cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle
    lpVtbl : IHTMLRuleStyleVTbl*
  end

  struct IHTMLRuleStyle2VTbl
    query_interface : Proc(IHTMLRuleStyle2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle2*, UInt32)
    release : Proc(IHTMLRuleStyle2*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_table_layout : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_table_layout : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_border_collapse : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_border_collapse : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_direction : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_direction : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_behavior : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_behavior : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_position : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_position : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_unicode_bidi : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_unicode_bidi : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_bottom : Proc(IHTMLRuleStyle2*, VARIANT, HRESULT)
    get_bottom : Proc(IHTMLRuleStyle2*, VARIANT*, HRESULT)
    put_right : Proc(IHTMLRuleStyle2*, VARIANT, HRESULT)
    get_right : Proc(IHTMLRuleStyle2*, VARIANT*, HRESULT)
    put_pixel_bottom : Proc(IHTMLRuleStyle2*, Int32, HRESULT)
    get_pixel_bottom : Proc(IHTMLRuleStyle2*, Int32*, HRESULT)
    put_pixel_right : Proc(IHTMLRuleStyle2*, Int32, HRESULT)
    get_pixel_right : Proc(IHTMLRuleStyle2*, Int32*, HRESULT)
    put_pos_bottom : Proc(IHTMLRuleStyle2*, Float32, HRESULT)
    get_pos_bottom : Proc(IHTMLRuleStyle2*, Float32*, HRESULT)
    put_pos_right : Proc(IHTMLRuleStyle2*, Float32, HRESULT)
    get_pos_right : Proc(IHTMLRuleStyle2*, Float32*, HRESULT)
    put_ime_mode : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_ime_mode : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_ruby_align : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_ruby_align : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_ruby_position : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_ruby_position : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_ruby_overhang : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_ruby_overhang : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_layout_grid_char : Proc(IHTMLRuleStyle2*, VARIANT, HRESULT)
    get_layout_grid_char : Proc(IHTMLRuleStyle2*, VARIANT*, HRESULT)
    put_layout_grid_line : Proc(IHTMLRuleStyle2*, VARIANT, HRESULT)
    get_layout_grid_line : Proc(IHTMLRuleStyle2*, VARIANT*, HRESULT)
    put_layout_grid_mode : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_layout_grid_mode : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_layout_grid_type : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_layout_grid_type : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_layout_grid : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_layout_grid : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_text_autospace : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_text_autospace : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_word_break : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_word_break : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_line_break : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_line_break : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_text_justify : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_text_justify : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_text_justify_trim : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_text_justify_trim : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_text_kashida : Proc(IHTMLRuleStyle2*, VARIANT, HRESULT)
    get_text_kashida : Proc(IHTMLRuleStyle2*, VARIANT*, HRESULT)
    put_overflow_x : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_overflow_x : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_overflow_y : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_overflow_y : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
    put_accelerator : Proc(IHTMLRuleStyle2*, UInt8*, HRESULT)
    get_accelerator : Proc(IHTMLRuleStyle2*, UInt8**, HRESULT)
  end

  IHTMLRuleStyle2_GUID = "3050f4ac-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle2 = LibC::GUID.new(0x3050f4ac_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle2
    lpVtbl : IHTMLRuleStyle2VTbl*
  end

  struct IHTMLRuleStyle3VTbl
    query_interface : Proc(IHTMLRuleStyle3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle3*, UInt32)
    release : Proc(IHTMLRuleStyle3*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_layout_flow : Proc(IHTMLRuleStyle3*, UInt8*, HRESULT)
    get_layout_flow : Proc(IHTMLRuleStyle3*, UInt8**, HRESULT)
    put_zoom : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_zoom : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_word_wrap : Proc(IHTMLRuleStyle3*, UInt8*, HRESULT)
    get_word_wrap : Proc(IHTMLRuleStyle3*, UInt8**, HRESULT)
    put_text_underline_position : Proc(IHTMLRuleStyle3*, UInt8*, HRESULT)
    get_text_underline_position : Proc(IHTMLRuleStyle3*, UInt8**, HRESULT)
    put_scrollbar_base_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_base_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_face_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_face_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar3d_light_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar3d_light_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_shadow_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_shadow_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_highlight_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_highlight_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_dark_shadow_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_dark_shadow_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_arrow_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_arrow_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_scrollbar_track_color : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_scrollbar_track_color : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
    put_writing_mode : Proc(IHTMLRuleStyle3*, UInt8*, HRESULT)
    get_writing_mode : Proc(IHTMLRuleStyle3*, UInt8**, HRESULT)
    put_text_align_last : Proc(IHTMLRuleStyle3*, UInt8*, HRESULT)
    get_text_align_last : Proc(IHTMLRuleStyle3*, UInt8**, HRESULT)
    put_text_kashida_space : Proc(IHTMLRuleStyle3*, VARIANT, HRESULT)
    get_text_kashida_space : Proc(IHTMLRuleStyle3*, VARIANT*, HRESULT)
  end

  IHTMLRuleStyle3_GUID = "3050f657-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle3 = LibC::GUID.new(0x3050f657_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle3
    lpVtbl : IHTMLRuleStyle3VTbl*
  end

  struct IHTMLRuleStyle4VTbl
    query_interface : Proc(IHTMLRuleStyle4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle4*, UInt32)
    release : Proc(IHTMLRuleStyle4*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_text_overflow : Proc(IHTMLRuleStyle4*, UInt8*, HRESULT)
    get_text_overflow : Proc(IHTMLRuleStyle4*, UInt8**, HRESULT)
    put_min_height : Proc(IHTMLRuleStyle4*, VARIANT, HRESULT)
    get_min_height : Proc(IHTMLRuleStyle4*, VARIANT*, HRESULT)
  end

  IHTMLRuleStyle4_GUID = "3050f817-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle4 = LibC::GUID.new(0x3050f817_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle4
    lpVtbl : IHTMLRuleStyle4VTbl*
  end

  struct IHTMLRuleStyle5VTbl
    query_interface : Proc(IHTMLRuleStyle5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle5*, UInt32)
    release : Proc(IHTMLRuleStyle5*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ms_interpolation_mode : Proc(IHTMLRuleStyle5*, UInt8*, HRESULT)
    get_ms_interpolation_mode : Proc(IHTMLRuleStyle5*, UInt8**, HRESULT)
    put_max_height : Proc(IHTMLRuleStyle5*, VARIANT, HRESULT)
    get_max_height : Proc(IHTMLRuleStyle5*, VARIANT*, HRESULT)
    put_min_width : Proc(IHTMLRuleStyle5*, VARIANT, HRESULT)
    get_min_width : Proc(IHTMLRuleStyle5*, VARIANT*, HRESULT)
    put_max_width : Proc(IHTMLRuleStyle5*, VARIANT, HRESULT)
    get_max_width : Proc(IHTMLRuleStyle5*, VARIANT*, HRESULT)
  end

  IHTMLRuleStyle5_GUID = "3050f335-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle5 = LibC::GUID.new(0x3050f335_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle5
    lpVtbl : IHTMLRuleStyle5VTbl*
  end

  struct IHTMLRuleStyle6VTbl
    query_interface : Proc(IHTMLRuleStyle6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRuleStyle6*, UInt32)
    release : Proc(IHTMLRuleStyle6*, UInt32)
    get_type_info_count : Proc(IHTMLRuleStyle6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRuleStyle6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRuleStyle6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRuleStyle6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_content : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_content : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_caption_side : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_caption_side : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_counter_increment : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_counter_increment : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_counter_reset : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_counter_reset : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_outline : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_outline : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_outline_width : Proc(IHTMLRuleStyle6*, VARIANT, HRESULT)
    get_outline_width : Proc(IHTMLRuleStyle6*, VARIANT*, HRESULT)
    put_outline_style : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_outline_style : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_outline_color : Proc(IHTMLRuleStyle6*, VARIANT, HRESULT)
    get_outline_color : Proc(IHTMLRuleStyle6*, VARIANT*, HRESULT)
    put_box_sizing : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_box_sizing : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_border_spacing : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_border_spacing : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_orphans : Proc(IHTMLRuleStyle6*, VARIANT, HRESULT)
    get_orphans : Proc(IHTMLRuleStyle6*, VARIANT*, HRESULT)
    put_widows : Proc(IHTMLRuleStyle6*, VARIANT, HRESULT)
    get_widows : Proc(IHTMLRuleStyle6*, VARIANT*, HRESULT)
    put_page_break_inside : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_page_break_inside : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_empty_cells : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_empty_cells : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_ms_block_progression : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_ms_block_progression : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
    put_quotes : Proc(IHTMLRuleStyle6*, UInt8*, HRESULT)
    get_quotes : Proc(IHTMLRuleStyle6*, UInt8**, HRESULT)
  end

  IHTMLRuleStyle6_GUID = "30510471-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRuleStyle6 = LibC::GUID.new(0x30510471_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRuleStyle6
    lpVtbl : IHTMLRuleStyle6VTbl*
  end

  struct DispHTMLStyleVTbl
    query_interface : Proc(DispHTMLStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyle*, UInt32)
    release : Proc(DispHTMLStyle*, UInt32)
    get_type_info_count : Proc(DispHTMLStyle*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyle_GUID = "3050f55a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyle = LibC::GUID.new(0x3050f55a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyle
    lpVtbl : DispHTMLStyleVTbl*
  end

  struct DispHTMLRuleStyleVTbl
    query_interface : Proc(DispHTMLRuleStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLRuleStyle*, UInt32)
    release : Proc(DispHTMLRuleStyle*, UInt32)
    get_type_info_count : Proc(DispHTMLRuleStyle*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLRuleStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLRuleStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLRuleStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLRuleStyle_GUID = "3050f55c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLRuleStyle = LibC::GUID.new(0x3050f55c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLRuleStyle
    lpVtbl : DispHTMLRuleStyleVTbl*
  end

  struct IHTMLStyleSheetRulesCollectionVTbl
    query_interface : Proc(IHTMLStyleSheetRulesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRulesCollection*, UInt32)
    release : Proc(IHTMLStyleSheetRulesCollection*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRulesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRulesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRulesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRulesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLStyleSheetRulesCollection*, Int32*, HRESULT)
    item : Proc(IHTMLStyleSheetRulesCollection*, Int32, IHTMLStyleSheetRule*, HRESULT)
  end

  IHTMLStyleSheetRulesCollection_GUID = "3050f2e5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRulesCollection = LibC::GUID.new(0x3050f2e5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRulesCollection
    lpVtbl : IHTMLStyleSheetRulesCollectionVTbl*
  end

  struct IHTMLStyleSheetVTbl
    query_interface : Proc(IHTMLStyleSheet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheet*, UInt32)
    release : Proc(IHTMLStyleSheet*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheet*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheet*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheet*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheet*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_title : Proc(IHTMLStyleSheet*, UInt8*, HRESULT)
    get_title : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    get_parent_style_sheet : Proc(IHTMLStyleSheet*, IHTMLStyleSheet*, HRESULT)
    get_owning_element : Proc(IHTMLStyleSheet*, IHTMLElement*, HRESULT)
    put_disabled : Proc(IHTMLStyleSheet*, Int16, HRESULT)
    get_disabled : Proc(IHTMLStyleSheet*, Int16*, HRESULT)
    get_read_only : Proc(IHTMLStyleSheet*, Int16*, HRESULT)
    get_imports : Proc(IHTMLStyleSheet*, IHTMLStyleSheetsCollection*, HRESULT)
    put_href : Proc(IHTMLStyleSheet*, UInt8*, HRESULT)
    get_href : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    get_type : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    get_id : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    add_import : Proc(IHTMLStyleSheet*, UInt8*, Int32, Int32*, HRESULT)
    add_rule : Proc(IHTMLStyleSheet*, UInt8*, UInt8*, Int32, Int32*, HRESULT)
    remove_import : Proc(IHTMLStyleSheet*, Int32, HRESULT)
    remove_rule : Proc(IHTMLStyleSheet*, Int32, HRESULT)
    put_media : Proc(IHTMLStyleSheet*, UInt8*, HRESULT)
    get_media : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    put_css_text : Proc(IHTMLStyleSheet*, UInt8*, HRESULT)
    get_css_text : Proc(IHTMLStyleSheet*, UInt8**, HRESULT)
    get_rules : Proc(IHTMLStyleSheet*, IHTMLStyleSheetRulesCollection*, HRESULT)
  end

  IHTMLStyleSheet_GUID = "3050f2e3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheet = LibC::GUID.new(0x3050f2e3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheet
    lpVtbl : IHTMLStyleSheetVTbl*
  end

  struct IHTMLCSSRuleVTbl
    query_interface : Proc(IHTMLCSSRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSRule*, UInt32)
    release : Proc(IHTMLCSSRule*, UInt32)
    get_type_info_count : Proc(IHTMLCSSRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLCSSRule*, UInt16*, HRESULT)
    put_css_text : Proc(IHTMLCSSRule*, UInt8*, HRESULT)
    get_css_text : Proc(IHTMLCSSRule*, UInt8**, HRESULT)
    get_parent_rule : Proc(IHTMLCSSRule*, IHTMLCSSRule*, HRESULT)
    get_parent_style_sheet : Proc(IHTMLCSSRule*, IHTMLStyleSheet*, HRESULT)
  end

  IHTMLCSSRule_GUID = "305106e9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSRule = LibC::GUID.new(0x305106e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSRule
    lpVtbl : IHTMLCSSRuleVTbl*
  end

  struct IHTMLCSSImportRuleVTbl
    query_interface : Proc(IHTMLCSSImportRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSImportRule*, UInt32)
    release : Proc(IHTMLCSSImportRule*, UInt32)
    get_type_info_count : Proc(IHTMLCSSImportRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSImportRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSImportRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSImportRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_href : Proc(IHTMLCSSImportRule*, UInt8**, HRESULT)
    put_media : Proc(IHTMLCSSImportRule*, VARIANT, HRESULT)
    get_media : Proc(IHTMLCSSImportRule*, VARIANT*, HRESULT)
    get_style_sheet : Proc(IHTMLCSSImportRule*, IHTMLStyleSheet*, HRESULT)
  end

  IHTMLCSSImportRule_GUID = "305106ea-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSImportRule = LibC::GUID.new(0x305106ea_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSImportRule
    lpVtbl : IHTMLCSSImportRuleVTbl*
  end

  struct IHTMLCSSMediaRuleVTbl
    query_interface : Proc(IHTMLCSSMediaRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSMediaRule*, UInt32)
    release : Proc(IHTMLCSSMediaRule*, UInt32)
    get_type_info_count : Proc(IHTMLCSSMediaRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSMediaRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSMediaRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSMediaRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_media : Proc(IHTMLCSSMediaRule*, VARIANT, HRESULT)
    get_media : Proc(IHTMLCSSMediaRule*, VARIANT*, HRESULT)
    get_css_rules : Proc(IHTMLCSSMediaRule*, IHTMLStyleSheetRulesCollection*, HRESULT)
    insert_rule : Proc(IHTMLCSSMediaRule*, UInt8*, Int32, Int32*, HRESULT)
    delete_rule : Proc(IHTMLCSSMediaRule*, Int32, HRESULT)
  end

  IHTMLCSSMediaRule_GUID = "305106eb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSMediaRule = LibC::GUID.new(0x305106eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSMediaRule
    lpVtbl : IHTMLCSSMediaRuleVTbl*
  end

  struct IHTMLCSSMediaListVTbl
    query_interface : Proc(IHTMLCSSMediaList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSMediaList*, UInt32)
    release : Proc(IHTMLCSSMediaList*, UInt32)
    get_type_info_count : Proc(IHTMLCSSMediaList*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSMediaList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSMediaList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSMediaList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_media_text : Proc(IHTMLCSSMediaList*, UInt8*, HRESULT)
    get_media_text : Proc(IHTMLCSSMediaList*, UInt8**, HRESULT)
    get_length : Proc(IHTMLCSSMediaList*, Int32*, HRESULT)
    item : Proc(IHTMLCSSMediaList*, Int32, UInt8**, HRESULT)
    append_medium : Proc(IHTMLCSSMediaList*, UInt8*, HRESULT)
    delete_medium : Proc(IHTMLCSSMediaList*, UInt8*, HRESULT)
  end

  IHTMLCSSMediaList_GUID = "30510731-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSMediaList = LibC::GUID.new(0x30510731_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSMediaList
    lpVtbl : IHTMLCSSMediaListVTbl*
  end

  struct IHTMLCSSNamespaceRuleVTbl
    query_interface : Proc(IHTMLCSSNamespaceRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCSSNamespaceRule*, UInt32)
    release : Proc(IHTMLCSSNamespaceRule*, UInt32)
    get_type_info_count : Proc(IHTMLCSSNamespaceRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCSSNamespaceRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCSSNamespaceRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCSSNamespaceRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_namespace_uri : Proc(IHTMLCSSNamespaceRule*, UInt8**, HRESULT)
    get_prefix : Proc(IHTMLCSSNamespaceRule*, UInt8**, HRESULT)
  end

  IHTMLCSSNamespaceRule_GUID = "305106ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCSSNamespaceRule = LibC::GUID.new(0x305106ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCSSNamespaceRule
    lpVtbl : IHTMLCSSNamespaceRuleVTbl*
  end

  struct IHTMLMSCSSKeyframeRuleVTbl
    query_interface : Proc(IHTMLMSCSSKeyframeRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMSCSSKeyframeRule*, UInt32)
    release : Proc(IHTMLMSCSSKeyframeRule*, UInt32)
    get_type_info_count : Proc(IHTMLMSCSSKeyframeRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMSCSSKeyframeRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMSCSSKeyframeRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMSCSSKeyframeRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_key_text : Proc(IHTMLMSCSSKeyframeRule*, UInt8*, HRESULT)
    get_key_text : Proc(IHTMLMSCSSKeyframeRule*, UInt8**, HRESULT)
    get_style : Proc(IHTMLMSCSSKeyframeRule*, IHTMLRuleStyle*, HRESULT)
  end

  IHTMLMSCSSKeyframeRule_GUID = "3051080c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMSCSSKeyframeRule = LibC::GUID.new(0x3051080c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMSCSSKeyframeRule
    lpVtbl : IHTMLMSCSSKeyframeRuleVTbl*
  end

  struct IHTMLMSCSSKeyframesRuleVTbl
    query_interface : Proc(IHTMLMSCSSKeyframesRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMSCSSKeyframesRule*, UInt32)
    release : Proc(IHTMLMSCSSKeyframesRule*, UInt32)
    get_type_info_count : Proc(IHTMLMSCSSKeyframesRule*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMSCSSKeyframesRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMSCSSKeyframesRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMSCSSKeyframesRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_name : Proc(IHTMLMSCSSKeyframesRule*, UInt8*, HRESULT)
    get_name : Proc(IHTMLMSCSSKeyframesRule*, UInt8**, HRESULT)
    get_css_rules : Proc(IHTMLMSCSSKeyframesRule*, IHTMLStyleSheetRulesCollection*, HRESULT)
    append_rule : Proc(IHTMLMSCSSKeyframesRule*, UInt8*, HRESULT)
    delete_rule : Proc(IHTMLMSCSSKeyframesRule*, UInt8*, HRESULT)
    find_rule : Proc(IHTMLMSCSSKeyframesRule*, UInt8*, IHTMLMSCSSKeyframeRule*, HRESULT)
  end

  IHTMLMSCSSKeyframesRule_GUID = "3051080d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMSCSSKeyframesRule = LibC::GUID.new(0x3051080d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMSCSSKeyframesRule
    lpVtbl : IHTMLMSCSSKeyframesRuleVTbl*
  end

  struct DispHTMLCSSRuleVTbl
    query_interface : Proc(DispHTMLCSSRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSRule*, UInt32)
    release : Proc(DispHTMLCSSRule*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSRule_GUID = "3059007d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSRule = LibC::GUID.new(0x3059007d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSRule
    lpVtbl : DispHTMLCSSRuleVTbl*
  end

  struct DispHTMLCSSImportRuleVTbl
    query_interface : Proc(DispHTMLCSSImportRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSImportRule*, UInt32)
    release : Proc(DispHTMLCSSImportRule*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSImportRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSImportRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSImportRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSImportRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSImportRule_GUID = "3059007e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSImportRule = LibC::GUID.new(0x3059007e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSImportRule
    lpVtbl : DispHTMLCSSImportRuleVTbl*
  end

  struct DispHTMLCSSMediaRuleVTbl
    query_interface : Proc(DispHTMLCSSMediaRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSMediaRule*, UInt32)
    release : Proc(DispHTMLCSSMediaRule*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSMediaRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSMediaRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSMediaRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSMediaRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSMediaRule_GUID = "3059007f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSMediaRule = LibC::GUID.new(0x3059007f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSMediaRule
    lpVtbl : DispHTMLCSSMediaRuleVTbl*
  end

  struct DispHTMLCSSMediaListVTbl
    query_interface : Proc(DispHTMLCSSMediaList*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSMediaList*, UInt32)
    release : Proc(DispHTMLCSSMediaList*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSMediaList*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSMediaList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSMediaList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSMediaList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSMediaList_GUID = "30590097-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSMediaList = LibC::GUID.new(0x30590097_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSMediaList
    lpVtbl : DispHTMLCSSMediaListVTbl*
  end

  struct DispHTMLCSSNamespaceRuleVTbl
    query_interface : Proc(DispHTMLCSSNamespaceRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCSSNamespaceRule*, UInt32)
    release : Proc(DispHTMLCSSNamespaceRule*, UInt32)
    get_type_info_count : Proc(DispHTMLCSSNamespaceRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCSSNamespaceRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCSSNamespaceRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCSSNamespaceRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCSSNamespaceRule_GUID = "30590080-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCSSNamespaceRule = LibC::GUID.new(0x30590080_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCSSNamespaceRule
    lpVtbl : DispHTMLCSSNamespaceRuleVTbl*
  end

  struct DispHTMLMSCSSKeyframeRuleVTbl
    query_interface : Proc(DispHTMLMSCSSKeyframeRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMSCSSKeyframeRule*, UInt32)
    release : Proc(DispHTMLMSCSSKeyframeRule*, UInt32)
    get_type_info_count : Proc(DispHTMLMSCSSKeyframeRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMSCSSKeyframeRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMSCSSKeyframeRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMSCSSKeyframeRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMSCSSKeyframeRule_GUID = "305900de-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMSCSSKeyframeRule = LibC::GUID.new(0x305900de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMSCSSKeyframeRule
    lpVtbl : DispHTMLMSCSSKeyframeRuleVTbl*
  end

  struct DispHTMLMSCSSKeyframesRuleVTbl
    query_interface : Proc(DispHTMLMSCSSKeyframesRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMSCSSKeyframesRule*, UInt32)
    release : Proc(DispHTMLMSCSSKeyframesRule*, UInt32)
    get_type_info_count : Proc(DispHTMLMSCSSKeyframesRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMSCSSKeyframesRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMSCSSKeyframesRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMSCSSKeyframesRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMSCSSKeyframesRule_GUID = "305900df-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMSCSSKeyframesRule = LibC::GUID.new(0x305900df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMSCSSKeyframesRule
    lpVtbl : DispHTMLMSCSSKeyframesRuleVTbl*
  end

  struct IHTMLRenderStyleVTbl
    query_interface : Proc(IHTMLRenderStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRenderStyle*, UInt32)
    release : Proc(IHTMLRenderStyle*, UInt32)
    get_type_info_count : Proc(IHTMLRenderStyle*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRenderStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRenderStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRenderStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_text_line_through_style : Proc(IHTMLRenderStyle*, UInt8*, HRESULT)
    get_text_line_through_style : Proc(IHTMLRenderStyle*, UInt8**, HRESULT)
    put_text_underline_style : Proc(IHTMLRenderStyle*, UInt8*, HRESULT)
    get_text_underline_style : Proc(IHTMLRenderStyle*, UInt8**, HRESULT)
    put_text_effect : Proc(IHTMLRenderStyle*, UInt8*, HRESULT)
    get_text_effect : Proc(IHTMLRenderStyle*, UInt8**, HRESULT)
    put_text_color : Proc(IHTMLRenderStyle*, VARIANT, HRESULT)
    get_text_color : Proc(IHTMLRenderStyle*, VARIANT*, HRESULT)
    put_text_background_color : Proc(IHTMLRenderStyle*, VARIANT, HRESULT)
    get_text_background_color : Proc(IHTMLRenderStyle*, VARIANT*, HRESULT)
    put_text_decoration_color : Proc(IHTMLRenderStyle*, VARIANT, HRESULT)
    get_text_decoration_color : Proc(IHTMLRenderStyle*, VARIANT*, HRESULT)
    put_rendering_priority : Proc(IHTMLRenderStyle*, Int32, HRESULT)
    get_rendering_priority : Proc(IHTMLRenderStyle*, Int32*, HRESULT)
    put_default_text_selection : Proc(IHTMLRenderStyle*, UInt8*, HRESULT)
    get_default_text_selection : Proc(IHTMLRenderStyle*, UInt8**, HRESULT)
    put_text_decoration : Proc(IHTMLRenderStyle*, UInt8*, HRESULT)
    get_text_decoration : Proc(IHTMLRenderStyle*, UInt8**, HRESULT)
  end

  IHTMLRenderStyle_GUID = "3050f6ae-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRenderStyle = LibC::GUID.new(0x3050f6ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRenderStyle
    lpVtbl : IHTMLRenderStyleVTbl*
  end

  struct DispHTMLRenderStyleVTbl
    query_interface : Proc(DispHTMLRenderStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLRenderStyle*, UInt32)
    release : Proc(DispHTMLRenderStyle*, UInt32)
    get_type_info_count : Proc(DispHTMLRenderStyle*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLRenderStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLRenderStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLRenderStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLRenderStyle_GUID = "3050f58b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLRenderStyle = LibC::GUID.new(0x3050f58b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLRenderStyle
    lpVtbl : DispHTMLRenderStyleVTbl*
  end

  struct IHTMLCurrentStyleVTbl
    query_interface : Proc(IHTMLCurrentStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCurrentStyle*, UInt32)
    release : Proc(IHTMLCurrentStyle*, UInt32)
    get_type_info_count : Proc(IHTMLCurrentStyle*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCurrentStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCurrentStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCurrentStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_position : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_style_float : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_background_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_font_family : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_font_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_font_variant : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_font_weight : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_font_size : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_background_image : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_background_position_x : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_background_position_y : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_background_repeat : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_left_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_top_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_right_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_bottom_color : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_top_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_right_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_bottom_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_left_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_top_width : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_right_width : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_bottom_width : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_border_left_width : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_left : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_top : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_width : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_height : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_padding_left : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_padding_top : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_padding_right : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_padding_bottom : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_text_align : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_decoration : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_display : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_visibility : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_z_index : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_letter_spacing : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_line_height : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_text_indent : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_vertical_align : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_background_attachment : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_margin_top : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_margin_right : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_margin_bottom : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_margin_left : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_clear : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_list_style_type : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_list_style_position : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_list_style_image : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_clip_top : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_clip_right : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_clip_bottom : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_clip_left : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_overflow : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_page_break_before : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_page_break_after : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_cursor : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_table_layout : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_collapse : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_direction : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_behavior : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_attribute : Proc(IHTMLCurrentStyle*, UInt8*, Int32, VARIANT*, HRESULT)
    get_unicode_bidi : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_right : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_bottom : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_ime_mode : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_ruby_align : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_ruby_position : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_ruby_overhang : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_autospace : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_line_break : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_word_break : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_justify : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_justify_trim : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_kashida : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_block_direction : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_layout_grid_char : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_layout_grid_line : Proc(IHTMLCurrentStyle*, VARIANT*, HRESULT)
    get_layout_grid_mode : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_layout_grid_type : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_style : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_color : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_border_width : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_padding : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_margin : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_accelerator : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_overflow_x : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_overflow_y : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
    get_text_transform : Proc(IHTMLCurrentStyle*, UInt8**, HRESULT)
  end

  IHTMLCurrentStyle_GUID = "3050f3db-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCurrentStyle = LibC::GUID.new(0x3050f3db_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCurrentStyle
    lpVtbl : IHTMLCurrentStyleVTbl*
  end

  struct IHTMLCurrentStyle2VTbl
    query_interface : Proc(IHTMLCurrentStyle2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCurrentStyle2*, UInt32)
    release : Proc(IHTMLCurrentStyle2*, UInt32)
    get_type_info_count : Proc(IHTMLCurrentStyle2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCurrentStyle2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCurrentStyle2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCurrentStyle2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_layout_flow : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_word_wrap : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_text_underline_position : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_has_layout : Proc(IHTMLCurrentStyle2*, Int16*, HRESULT)
    get_scrollbar_base_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_face_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar3d_light_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_shadow_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_highlight_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_dark_shadow_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_arrow_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_scrollbar_track_color : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_writing_mode : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_zoom : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_filter : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_text_align_last : Proc(IHTMLCurrentStyle2*, UInt8**, HRESULT)
    get_text_kashida_space : Proc(IHTMLCurrentStyle2*, VARIANT*, HRESULT)
    get_is_block : Proc(IHTMLCurrentStyle2*, Int16*, HRESULT)
  end

  IHTMLCurrentStyle2_GUID = "3050f658-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCurrentStyle2 = LibC::GUID.new(0x3050f658_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCurrentStyle2
    lpVtbl : IHTMLCurrentStyle2VTbl*
  end

  struct IHTMLCurrentStyle3VTbl
    query_interface : Proc(IHTMLCurrentStyle3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCurrentStyle3*, UInt32)
    release : Proc(IHTMLCurrentStyle3*, UInt32)
    get_type_info_count : Proc(IHTMLCurrentStyle3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCurrentStyle3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCurrentStyle3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCurrentStyle3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_text_overflow : Proc(IHTMLCurrentStyle3*, UInt8**, HRESULT)
    get_min_height : Proc(IHTMLCurrentStyle3*, VARIANT*, HRESULT)
    get_word_spacing : Proc(IHTMLCurrentStyle3*, VARIANT*, HRESULT)
    get_white_space : Proc(IHTMLCurrentStyle3*, UInt8**, HRESULT)
  end

  IHTMLCurrentStyle3_GUID = "3050f818-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCurrentStyle3 = LibC::GUID.new(0x3050f818_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCurrentStyle3
    lpVtbl : IHTMLCurrentStyle3VTbl*
  end

  struct IHTMLCurrentStyle4VTbl
    query_interface : Proc(IHTMLCurrentStyle4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCurrentStyle4*, UInt32)
    release : Proc(IHTMLCurrentStyle4*, UInt32)
    get_type_info_count : Proc(IHTMLCurrentStyle4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCurrentStyle4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCurrentStyle4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCurrentStyle4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ms_interpolation_mode : Proc(IHTMLCurrentStyle4*, UInt8**, HRESULT)
    get_max_height : Proc(IHTMLCurrentStyle4*, VARIANT*, HRESULT)
    get_min_width : Proc(IHTMLCurrentStyle4*, VARIANT*, HRESULT)
    get_max_width : Proc(IHTMLCurrentStyle4*, VARIANT*, HRESULT)
  end

  IHTMLCurrentStyle4_GUID = "3050f33b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCurrentStyle4 = LibC::GUID.new(0x3050f33b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCurrentStyle4
    lpVtbl : IHTMLCurrentStyle4VTbl*
  end

  struct IHTMLCurrentStyle5VTbl
    query_interface : Proc(IHTMLCurrentStyle5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCurrentStyle5*, UInt32)
    release : Proc(IHTMLCurrentStyle5*, UInt32)
    get_type_info_count : Proc(IHTMLCurrentStyle5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCurrentStyle5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCurrentStyle5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCurrentStyle5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_caption_side : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_outline : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_outline_width : Proc(IHTMLCurrentStyle5*, VARIANT*, HRESULT)
    get_outline_style : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_outline_color : Proc(IHTMLCurrentStyle5*, VARIANT*, HRESULT)
    get_box_sizing : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_border_spacing : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_orphans : Proc(IHTMLCurrentStyle5*, VARIANT*, HRESULT)
    get_widows : Proc(IHTMLCurrentStyle5*, VARIANT*, HRESULT)
    get_page_break_inside : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_empty_cells : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_ms_block_progression : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
    get_quotes : Proc(IHTMLCurrentStyle5*, UInt8**, HRESULT)
  end

  IHTMLCurrentStyle5_GUID = "30510481-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCurrentStyle5 = LibC::GUID.new(0x30510481_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCurrentStyle5
    lpVtbl : IHTMLCurrentStyle5VTbl*
  end

  struct DispHTMLCurrentStyleVTbl
    query_interface : Proc(DispHTMLCurrentStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCurrentStyle*, UInt32)
    release : Proc(DispHTMLCurrentStyle*, UInt32)
    get_type_info_count : Proc(DispHTMLCurrentStyle*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCurrentStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCurrentStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCurrentStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCurrentStyle_GUID = "3050f557-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCurrentStyle = LibC::GUID.new(0x3050f557_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCurrentStyle
    lpVtbl : DispHTMLCurrentStyleVTbl*
  end

  struct IHTMLElementVTbl
    query_interface : Proc(IHTMLElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement*, UInt32)
    release : Proc(IHTMLElement*, UInt32)
    get_type_info_count : Proc(IHTMLElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_attribute : Proc(IHTMLElement*, UInt8*, VARIANT, Int32, HRESULT)
    get_attribute : Proc(IHTMLElement*, UInt8*, Int32, VARIANT*, HRESULT)
    remove_attribute : Proc(IHTMLElement*, UInt8*, Int32, Int16*, HRESULT)
    put_class_name : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_class_name : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_id : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_id : Proc(IHTMLElement*, UInt8**, HRESULT)
    get_tag_name : Proc(IHTMLElement*, UInt8**, HRESULT)
    get_parent_element : Proc(IHTMLElement*, IHTMLElement*, HRESULT)
    get_style : Proc(IHTMLElement*, IHTMLStyle*, HRESULT)
    put_onhelp : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onhelp : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onclick : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onclick : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_ondblclick : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_ondblclick : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onkeydown : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onkeydown : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onkeyup : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onkeyup : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onkeypress : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onkeypress : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onmouseout : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onmouseout : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onmouseover : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onmouseover : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onmousemove : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onmousemove : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onmousedown : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onmousedown : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onmouseup : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onmouseup : Proc(IHTMLElement*, VARIANT*, HRESULT)
    get_document : Proc(IHTMLElement*, IDispatch*, HRESULT)
    put_title : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_title : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_language : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_language : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_onselectstart : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onselectstart : Proc(IHTMLElement*, VARIANT*, HRESULT)
    scroll_into_view : Proc(IHTMLElement*, VARIANT, HRESULT)
    contains : Proc(IHTMLElement*, IHTMLElement, Int16*, HRESULT)
    get_source_index : Proc(IHTMLElement*, Int32*, HRESULT)
    get_record_number : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_lang : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_lang : Proc(IHTMLElement*, UInt8**, HRESULT)
    get_offset_left : Proc(IHTMLElement*, Int32*, HRESULT)
    get_offset_top : Proc(IHTMLElement*, Int32*, HRESULT)
    get_offset_width : Proc(IHTMLElement*, Int32*, HRESULT)
    get_offset_height : Proc(IHTMLElement*, Int32*, HRESULT)
    get_offset_parent : Proc(IHTMLElement*, IHTMLElement*, HRESULT)
    put_inner_html : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_inner_html : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_inner_text : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_inner_text : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_outer_html : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_outer_html : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_outer_text : Proc(IHTMLElement*, UInt8*, HRESULT)
    get_outer_text : Proc(IHTMLElement*, UInt8**, HRESULT)
    insert_adjacent_html : Proc(IHTMLElement*, UInt8*, UInt8*, HRESULT)
    insert_adjacent_text : Proc(IHTMLElement*, UInt8*, UInt8*, HRESULT)
    get_parent_text_edit : Proc(IHTMLElement*, IHTMLElement*, HRESULT)
    get_is_text_edit : Proc(IHTMLElement*, Int16*, HRESULT)
    click : Proc(IHTMLElement*, HRESULT)
    get_filters : Proc(IHTMLElement*, IHTMLFiltersCollection*, HRESULT)
    put_ondragstart : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_ondragstart : Proc(IHTMLElement*, VARIANT*, HRESULT)
    to_string : Proc(IHTMLElement*, UInt8**, HRESULT)
    put_onbeforeupdate : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onbeforeupdate : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onafterupdate : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onafterupdate : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onerrorupdate : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onerrorupdate : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onrowexit : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onrowexit : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onrowenter : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onrowenter : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_ondatasetchanged : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_ondatasetchanged : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_ondataavailable : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_ondataavailable : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_ondatasetcomplete : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_ondatasetcomplete : Proc(IHTMLElement*, VARIANT*, HRESULT)
    put_onfilterchange : Proc(IHTMLElement*, VARIANT, HRESULT)
    get_onfilterchange : Proc(IHTMLElement*, VARIANT*, HRESULT)
    get_children : Proc(IHTMLElement*, IDispatch*, HRESULT)
    get_all : Proc(IHTMLElement*, IDispatch*, HRESULT)
  end

  IHTMLElement_GUID = "3050f1ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement = LibC::GUID.new(0x3050f1ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement
    lpVtbl : IHTMLElementVTbl*
  end

  struct IHTMLRectVTbl
    query_interface : Proc(IHTMLRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRect*, UInt32)
    release : Proc(IHTMLRect*, UInt32)
    get_type_info_count : Proc(IHTMLRect*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_left : Proc(IHTMLRect*, Int32, HRESULT)
    get_left : Proc(IHTMLRect*, Int32*, HRESULT)
    put_top : Proc(IHTMLRect*, Int32, HRESULT)
    get_top : Proc(IHTMLRect*, Int32*, HRESULT)
    put_right : Proc(IHTMLRect*, Int32, HRESULT)
    get_right : Proc(IHTMLRect*, Int32*, HRESULT)
    put_bottom : Proc(IHTMLRect*, Int32, HRESULT)
    get_bottom : Proc(IHTMLRect*, Int32*, HRESULT)
  end

  IHTMLRect_GUID = "3050f4a3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRect = LibC::GUID.new(0x3050f4a3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRect
    lpVtbl : IHTMLRectVTbl*
  end

  struct IHTMLRect2VTbl
    query_interface : Proc(IHTMLRect2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRect2*, UInt32)
    release : Proc(IHTMLRect2*, UInt32)
    get_type_info_count : Proc(IHTMLRect2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRect2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRect2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRect2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_width : Proc(IHTMLRect2*, Float32*, HRESULT)
    get_height : Proc(IHTMLRect2*, Float32*, HRESULT)
  end

  IHTMLRect2_GUID = "3051076c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRect2 = LibC::GUID.new(0x3051076c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRect2
    lpVtbl : IHTMLRect2VTbl*
  end

  struct IHTMLRectCollectionVTbl
    query_interface : Proc(IHTMLRectCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLRectCollection*, UInt32)
    release : Proc(IHTMLRectCollection*, UInt32)
    get_type_info_count : Proc(IHTMLRectCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLRectCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLRectCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLRectCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLRectCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLRectCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLRectCollection*, VARIANT*, VARIANT*, HRESULT)
  end

  IHTMLRectCollection_GUID = "3050f4a4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLRectCollection = LibC::GUID.new(0x3050f4a4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLRectCollection
    lpVtbl : IHTMLRectCollectionVTbl*
  end

  struct IHTMLElementCollectionVTbl
    query_interface : Proc(IHTMLElementCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementCollection*, UInt32)
    release : Proc(IHTMLElementCollection*, UInt32)
    get_type_info_count : Proc(IHTMLElementCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    to_string : Proc(IHTMLElementCollection*, UInt8**, HRESULT)
    put_length : Proc(IHTMLElementCollection*, Int32, HRESULT)
    get_length : Proc(IHTMLElementCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLElementCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLElementCollection*, VARIANT, VARIANT, IDispatch*, HRESULT)
    tags : Proc(IHTMLElementCollection*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLElementCollection_GUID = "3050f21f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementCollection = LibC::GUID.new(0x3050f21f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementCollection
    lpVtbl : IHTMLElementCollectionVTbl*
  end

  struct IHTMLElement2VTbl
    query_interface : Proc(IHTMLElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement2*, UInt32)
    release : Proc(IHTMLElement2*, UInt32)
    get_type_info_count : Proc(IHTMLElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_scope_name : Proc(IHTMLElement2*, UInt8**, HRESULT)
    set_capture : Proc(IHTMLElement2*, Int16, HRESULT)
    release_capture : Proc(IHTMLElement2*, HRESULT)
    put_onlosecapture : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onlosecapture : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    component_from_point : Proc(IHTMLElement2*, Int32, Int32, UInt8**, HRESULT)
    do_scroll : Proc(IHTMLElement2*, VARIANT, HRESULT)
    put_onscroll : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onscroll : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondrag : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondrag : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondragend : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondragend : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondragenter : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondragenter : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondragover : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondragover : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondragleave : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondragleave : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_ondrop : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_ondrop : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onbeforecut : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onbeforecut : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_oncut : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_oncut : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onbeforecopy : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onbeforecopy : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_oncopy : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_oncopy : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onbeforepaste : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onbeforepaste : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onpaste : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onpaste : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    get_current_style : Proc(IHTMLElement2*, IHTMLCurrentStyle*, HRESULT)
    put_onpropertychange : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onpropertychange : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    get_client_rects : Proc(IHTMLElement2*, IHTMLRectCollection*, HRESULT)
    get_bounding_client_rect : Proc(IHTMLElement2*, IHTMLRect*, HRESULT)
    set_expression : Proc(IHTMLElement2*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_expression : Proc(IHTMLElement2*, UInt8*, VARIANT*, HRESULT)
    remove_expression : Proc(IHTMLElement2*, UInt8*, Int16*, HRESULT)
    put_tab_index : Proc(IHTMLElement2*, Int16, HRESULT)
    get_tab_index : Proc(IHTMLElement2*, Int16*, HRESULT)
    focus : Proc(IHTMLElement2*, HRESULT)
    put_access_key : Proc(IHTMLElement2*, UInt8*, HRESULT)
    get_access_key : Proc(IHTMLElement2*, UInt8**, HRESULT)
    put_onblur : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onfocus : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onresize : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onresize : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    blur : Proc(IHTMLElement2*, HRESULT)
    add_filter : Proc(IHTMLElement2*, IUnknown, HRESULT)
    remove_filter : Proc(IHTMLElement2*, IUnknown, HRESULT)
    get_client_height : Proc(IHTMLElement2*, Int32*, HRESULT)
    get_client_width : Proc(IHTMLElement2*, Int32*, HRESULT)
    get_client_top : Proc(IHTMLElement2*, Int32*, HRESULT)
    get_client_left : Proc(IHTMLElement2*, Int32*, HRESULT)
    attach_event : Proc(IHTMLElement2*, UInt8*, IDispatch, Int16*, HRESULT)
    detach_event : Proc(IHTMLElement2*, UInt8*, IDispatch, HRESULT)
    get_ready_state : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onreadystatechange : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onrowsdelete : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onrowsdelete : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_onrowsinserted : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onrowsinserted : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_oncellchange : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_oncellchange : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    put_dir : Proc(IHTMLElement2*, UInt8*, HRESULT)
    get_dir : Proc(IHTMLElement2*, UInt8**, HRESULT)
    create_control_range : Proc(IHTMLElement2*, IDispatch*, HRESULT)
    get_scroll_height : Proc(IHTMLElement2*, Int32*, HRESULT)
    get_scroll_width : Proc(IHTMLElement2*, Int32*, HRESULT)
    put_scroll_top : Proc(IHTMLElement2*, Int32, HRESULT)
    get_scroll_top : Proc(IHTMLElement2*, Int32*, HRESULT)
    put_scroll_left : Proc(IHTMLElement2*, Int32, HRESULT)
    get_scroll_left : Proc(IHTMLElement2*, Int32*, HRESULT)
    clear_attributes : Proc(IHTMLElement2*, HRESULT)
    merge_attributes : Proc(IHTMLElement2*, IHTMLElement, HRESULT)
    put_oncontextmenu : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_oncontextmenu : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    insert_adjacent_element : Proc(IHTMLElement2*, UInt8*, IHTMLElement, IHTMLElement*, HRESULT)
    apply_element : Proc(IHTMLElement2*, IHTMLElement, UInt8*, IHTMLElement*, HRESULT)
    get_adjacent_text : Proc(IHTMLElement2*, UInt8*, UInt8**, HRESULT)
    replace_adjacent_text : Proc(IHTMLElement2*, UInt8*, UInt8*, UInt8**, HRESULT)
    get_can_have_children : Proc(IHTMLElement2*, Int16*, HRESULT)
    add_behavior : Proc(IHTMLElement2*, UInt8*, VARIANT*, Int32*, HRESULT)
    remove_behavior : Proc(IHTMLElement2*, Int32, Int16*, HRESULT)
    get_runtime_style : Proc(IHTMLElement2*, IHTMLStyle*, HRESULT)
    get_behavior_urns : Proc(IHTMLElement2*, IDispatch*, HRESULT)
    put_tag_urn : Proc(IHTMLElement2*, UInt8*, HRESULT)
    get_tag_urn : Proc(IHTMLElement2*, UInt8**, HRESULT)
    put_onbeforeeditfocus : Proc(IHTMLElement2*, VARIANT, HRESULT)
    get_onbeforeeditfocus : Proc(IHTMLElement2*, VARIANT*, HRESULT)
    get_ready_state_value : Proc(IHTMLElement2*, Int32*, HRESULT)
    get_elements_by_tag_name : Proc(IHTMLElement2*, UInt8*, IHTMLElementCollection*, HRESULT)
  end

  IHTMLElement2_GUID = "3050f434-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement2 = LibC::GUID.new(0x3050f434_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement2
    lpVtbl : IHTMLElement2VTbl*
  end

  struct IHTMLAttributeCollection3VTbl
    query_interface : Proc(IHTMLAttributeCollection3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAttributeCollection3*, UInt32)
    release : Proc(IHTMLAttributeCollection3*, UInt32)
    get_type_info_count : Proc(IHTMLAttributeCollection3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAttributeCollection3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAttributeCollection3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAttributeCollection3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_named_item : Proc(IHTMLAttributeCollection3*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    set_named_item : Proc(IHTMLAttributeCollection3*, IHTMLDOMAttribute, IHTMLDOMAttribute*, HRESULT)
    remove_named_item : Proc(IHTMLAttributeCollection3*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    item : Proc(IHTMLAttributeCollection3*, Int32, IHTMLDOMAttribute*, HRESULT)
    get_length : Proc(IHTMLAttributeCollection3*, Int32*, HRESULT)
  end

  IHTMLAttributeCollection3_GUID = "30510469-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAttributeCollection3 = LibC::GUID.new(0x30510469_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAttributeCollection3
    lpVtbl : IHTMLAttributeCollection3VTbl*
  end

  struct IDOMDocumentTypeVTbl
    query_interface : Proc(IDOMDocumentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMDocumentType*, UInt32)
    release : Proc(IDOMDocumentType*, UInt32)
    get_type_info_count : Proc(IDOMDocumentType*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMDocumentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMDocumentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMDocumentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IDOMDocumentType*, UInt8**, HRESULT)
    get_entities : Proc(IDOMDocumentType*, IDispatch*, HRESULT)
    get_notations : Proc(IDOMDocumentType*, IDispatch*, HRESULT)
    get_public_id : Proc(IDOMDocumentType*, VARIANT*, HRESULT)
    get_system_id : Proc(IDOMDocumentType*, VARIANT*, HRESULT)
    get_internal_subset : Proc(IDOMDocumentType*, VARIANT*, HRESULT)
  end

  IDOMDocumentType_GUID = "30510738-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMDocumentType = LibC::GUID.new(0x30510738_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMDocumentType
    lpVtbl : IDOMDocumentTypeVTbl*
  end

  struct IHTMLDocument7VTbl
    query_interface : Proc(IHTMLDocument7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument7*, UInt32)
    release : Proc(IHTMLDocument7*, UInt32)
    get_type_info_count : Proc(IHTMLDocument7*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument7*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument7*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument7*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_default_view : Proc(IHTMLDocument7*, IHTMLWindow2*, HRESULT)
    create_cdata_section : Proc(IHTMLDocument7*, UInt8*, IHTMLDOMNode*, HRESULT)
    get_selection : Proc(IHTMLDocument7*, IHTMLSelection*, HRESULT)
    get_elements_by_tag_name_ns : Proc(IHTMLDocument7*, VARIANT*, UInt8*, IHTMLElementCollection*, HRESULT)
    create_element_ns : Proc(IHTMLDocument7*, VARIANT*, UInt8*, IHTMLElement*, HRESULT)
    create_attribute_ns : Proc(IHTMLDocument7*, VARIANT*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    put_onmsthumbnailclick : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onmsthumbnailclick : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    get_character_set : Proc(IHTMLDocument7*, UInt8**, HRESULT)
    create_element : Proc(IHTMLDocument7*, UInt8*, IHTMLElement*, HRESULT)
    create_attribute : Proc(IHTMLDocument7*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    get_elements_by_class_name : Proc(IHTMLDocument7*, UInt8*, IHTMLElementCollection*, HRESULT)
    create_processing_instruction : Proc(IHTMLDocument7*, UInt8*, UInt8*, IDOMProcessingInstruction*, HRESULT)
    adopt_node : Proc(IHTMLDocument7*, IHTMLDOMNode, IHTMLDOMNode3*, HRESULT)
    put_onmssitemodejumplistitemremoved : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onmssitemodejumplistitemremoved : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    get_all : Proc(IHTMLDocument7*, IHTMLElementCollection*, HRESULT)
    get_input_encoding : Proc(IHTMLDocument7*, UInt8**, HRESULT)
    get_xml_encoding : Proc(IHTMLDocument7*, UInt8**, HRESULT)
    put_xml_standalone : Proc(IHTMLDocument7*, Int16, HRESULT)
    get_xml_standalone : Proc(IHTMLDocument7*, Int16*, HRESULT)
    put_xml_version : Proc(IHTMLDocument7*, UInt8*, HRESULT)
    get_xml_version : Proc(IHTMLDocument7*, UInt8**, HRESULT)
    has_attributes : Proc(IHTMLDocument7*, Int16*, HRESULT)
    put_onabort : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onblur : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_oncanplay : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_oncanplay : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_oncanplaythrough : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_oncanplaythrough : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onchange : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondrag : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondrag : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondragend : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondragend : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondragenter : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondragenter : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondragleave : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondragleave : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondragover : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondragover : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondrop : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondrop : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ondurationchange : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ondurationchange : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onemptied : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onemptied : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onended : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onended : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onfocus : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_oninput : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_oninput : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onloadeddata : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onloadeddata : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onloadedmetadata : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onloadedmetadata : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onloadstart : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onloadstart : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onpause : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onpause : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onplay : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onplay : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onplaying : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onplaying : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onprogress : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onprogress : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onratechange : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onratechange : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onreset : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onreset : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onscroll : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onscroll : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onseeked : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onseeked : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onseeking : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onseeking : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onstalled : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onstalled : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onsubmit : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onsubmit : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onsuspend : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onsuspend : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_ontimeupdate : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_ontimeupdate : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onvolumechange : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onvolumechange : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    put_onwaiting : Proc(IHTMLDocument7*, VARIANT, HRESULT)
    get_onwaiting : Proc(IHTMLDocument7*, VARIANT*, HRESULT)
    normalize : Proc(IHTMLDocument7*, HRESULT)
    import_node : Proc(IHTMLDocument7*, IHTMLDOMNode, Int16, IHTMLDOMNode3*, HRESULT)
    get_parent_window : Proc(IHTMLDocument7*, IHTMLWindow2*, HRESULT)
    putref_body : Proc(IHTMLDocument7*, IHTMLElement, HRESULT)
    get_body : Proc(IHTMLDocument7*, IHTMLElement*, HRESULT)
    get_head : Proc(IHTMLDocument7*, IHTMLElement*, HRESULT)
  end

  IHTMLDocument7_GUID = "305104b8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument7 = LibC::GUID.new(0x305104b8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument7
    lpVtbl : IHTMLDocument7VTbl*
  end

  struct IHTMLDOMNodeVTbl
    query_interface : Proc(IHTMLDOMNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMNode*, UInt32)
    release : Proc(IHTMLDOMNode*, UInt32)
    get_type_info_count : Proc(IHTMLDOMNode*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMNode*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMNode*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMNode*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_node_type : Proc(IHTMLDOMNode*, Int32*, HRESULT)
    get_parent_node : Proc(IHTMLDOMNode*, IHTMLDOMNode*, HRESULT)
    has_child_nodes : Proc(IHTMLDOMNode*, Int16*, HRESULT)
    get_child_nodes : Proc(IHTMLDOMNode*, IDispatch*, HRESULT)
    get_attributes : Proc(IHTMLDOMNode*, IDispatch*, HRESULT)
    insert_before : Proc(IHTMLDOMNode*, IHTMLDOMNode, VARIANT, IHTMLDOMNode*, HRESULT)
    remove_child : Proc(IHTMLDOMNode*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    replace_child : Proc(IHTMLDOMNode*, IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    clone_node : Proc(IHTMLDOMNode*, Int16, IHTMLDOMNode*, HRESULT)
    remove_node : Proc(IHTMLDOMNode*, Int16, IHTMLDOMNode*, HRESULT)
    swap_node : Proc(IHTMLDOMNode*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    replace_node : Proc(IHTMLDOMNode*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    append_child : Proc(IHTMLDOMNode*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    get_node_name : Proc(IHTMLDOMNode*, UInt8**, HRESULT)
    put_node_value : Proc(IHTMLDOMNode*, VARIANT, HRESULT)
    get_node_value : Proc(IHTMLDOMNode*, VARIANT*, HRESULT)
    get_first_child : Proc(IHTMLDOMNode*, IHTMLDOMNode*, HRESULT)
    get_last_child : Proc(IHTMLDOMNode*, IHTMLDOMNode*, HRESULT)
    get_previous_sibling : Proc(IHTMLDOMNode*, IHTMLDOMNode*, HRESULT)
    get_next_sibling : Proc(IHTMLDOMNode*, IHTMLDOMNode*, HRESULT)
  end

  IHTMLDOMNode_GUID = "3050f5da-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMNode = LibC::GUID.new(0x3050f5da_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMNode
    lpVtbl : IHTMLDOMNodeVTbl*
  end

  struct IHTMLDOMNode2VTbl
    query_interface : Proc(IHTMLDOMNode2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMNode2*, UInt32)
    release : Proc(IHTMLDOMNode2*, UInt32)
    get_type_info_count : Proc(IHTMLDOMNode2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMNode2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMNode2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMNode2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_owner_document : Proc(IHTMLDOMNode2*, IDispatch*, HRESULT)
  end

  IHTMLDOMNode2_GUID = "3050f80b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMNode2 = LibC::GUID.new(0x3050f80b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMNode2
    lpVtbl : IHTMLDOMNode2VTbl*
  end

  struct IHTMLDOMNode3VTbl
    query_interface : Proc(IHTMLDOMNode3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMNode3*, UInt32)
    release : Proc(IHTMLDOMNode3*, UInt32)
    get_type_info_count : Proc(IHTMLDOMNode3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMNode3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMNode3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMNode3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_prefix : Proc(IHTMLDOMNode3*, VARIANT, HRESULT)
    get_prefix : Proc(IHTMLDOMNode3*, VARIANT*, HRESULT)
    get_local_name : Proc(IHTMLDOMNode3*, VARIANT*, HRESULT)
    get_namespace_uri : Proc(IHTMLDOMNode3*, VARIANT*, HRESULT)
    put_text_content : Proc(IHTMLDOMNode3*, VARIANT, HRESULT)
    get_text_content : Proc(IHTMLDOMNode3*, VARIANT*, HRESULT)
    is_equal_node : Proc(IHTMLDOMNode3*, IHTMLDOMNode3, Int16*, HRESULT)
    lookup_namespace_uri : Proc(IHTMLDOMNode3*, VARIANT*, VARIANT*, HRESULT)
    lookup_prefix : Proc(IHTMLDOMNode3*, VARIANT*, VARIANT*, HRESULT)
    is_default_namespace : Proc(IHTMLDOMNode3*, VARIANT*, Int16*, HRESULT)
    append_child : Proc(IHTMLDOMNode3*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    insert_before : Proc(IHTMLDOMNode3*, IHTMLDOMNode, VARIANT, IHTMLDOMNode*, HRESULT)
    remove_child : Proc(IHTMLDOMNode3*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    replace_child : Proc(IHTMLDOMNode3*, IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    is_same_node : Proc(IHTMLDOMNode3*, IHTMLDOMNode3, Int16*, HRESULT)
    compare_document_position : Proc(IHTMLDOMNode3*, IHTMLDOMNode, UInt16*, HRESULT)
    is_supported : Proc(IHTMLDOMNode3*, UInt8*, VARIANT, Int16*, HRESULT)
  end

  IHTMLDOMNode3_GUID = "305106e0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMNode3 = LibC::GUID.new(0x305106e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMNode3
    lpVtbl : IHTMLDOMNode3VTbl*
  end

  struct IHTMLDOMAttributeVTbl
    query_interface : Proc(IHTMLDOMAttribute*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMAttribute*, UInt32)
    release : Proc(IHTMLDOMAttribute*, UInt32)
    get_type_info_count : Proc(IHTMLDOMAttribute*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMAttribute*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMAttribute*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMAttribute*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_node_name : Proc(IHTMLDOMAttribute*, UInt8**, HRESULT)
    put_node_value : Proc(IHTMLDOMAttribute*, VARIANT, HRESULT)
    get_node_value : Proc(IHTMLDOMAttribute*, VARIANT*, HRESULT)
    get_specified : Proc(IHTMLDOMAttribute*, Int16*, HRESULT)
  end

  IHTMLDOMAttribute_GUID = "3050f4b0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMAttribute = LibC::GUID.new(0x3050f4b0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMAttribute
    lpVtbl : IHTMLDOMAttributeVTbl*
  end

  struct IHTMLDOMAttribute2VTbl
    query_interface : Proc(IHTMLDOMAttribute2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMAttribute2*, UInt32)
    release : Proc(IHTMLDOMAttribute2*, UInt32)
    get_type_info_count : Proc(IHTMLDOMAttribute2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMAttribute2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMAttribute2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMAttribute2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IHTMLDOMAttribute2*, UInt8**, HRESULT)
    put_value : Proc(IHTMLDOMAttribute2*, UInt8*, HRESULT)
    get_value : Proc(IHTMLDOMAttribute2*, UInt8**, HRESULT)
    get_expando : Proc(IHTMLDOMAttribute2*, Int16*, HRESULT)
    get_node_type : Proc(IHTMLDOMAttribute2*, Int32*, HRESULT)
    get_parent_node : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode*, HRESULT)
    get_child_nodes : Proc(IHTMLDOMAttribute2*, IDispatch*, HRESULT)
    get_first_child : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode*, HRESULT)
    get_last_child : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode*, HRESULT)
    get_previous_sibling : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode*, HRESULT)
    get_next_sibling : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode*, HRESULT)
    get_attributes : Proc(IHTMLDOMAttribute2*, IDispatch*, HRESULT)
    get_owner_document : Proc(IHTMLDOMAttribute2*, IDispatch*, HRESULT)
    insert_before : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode, VARIANT, IHTMLDOMNode*, HRESULT)
    replace_child : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    remove_child : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    append_child : Proc(IHTMLDOMAttribute2*, IHTMLDOMNode, IHTMLDOMNode*, HRESULT)
    has_child_nodes : Proc(IHTMLDOMAttribute2*, Int16*, HRESULT)
    clone_node : Proc(IHTMLDOMAttribute2*, Int16, IHTMLDOMAttribute*, HRESULT)
  end

  IHTMLDOMAttribute2_GUID = "3050f810-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMAttribute2 = LibC::GUID.new(0x3050f810_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMAttribute2
    lpVtbl : IHTMLDOMAttribute2VTbl*
  end

  struct IHTMLDOMAttribute3VTbl
    query_interface : Proc(IHTMLDOMAttribute3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMAttribute3*, UInt32)
    release : Proc(IHTMLDOMAttribute3*, UInt32)
    get_type_info_count : Proc(IHTMLDOMAttribute3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMAttribute3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMAttribute3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMAttribute3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_node_value : Proc(IHTMLDOMAttribute3*, VARIANT, HRESULT)
    get_node_value : Proc(IHTMLDOMAttribute3*, VARIANT*, HRESULT)
    put_value : Proc(IHTMLDOMAttribute3*, UInt8*, HRESULT)
    get_value : Proc(IHTMLDOMAttribute3*, UInt8**, HRESULT)
    get_specified : Proc(IHTMLDOMAttribute3*, Int16*, HRESULT)
    get_owner_element : Proc(IHTMLDOMAttribute3*, IHTMLElement2*, HRESULT)
  end

  IHTMLDOMAttribute3_GUID = "30510468-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMAttribute3 = LibC::GUID.new(0x30510468_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMAttribute3
    lpVtbl : IHTMLDOMAttribute3VTbl*
  end

  struct IHTMLDOMAttribute4VTbl
    query_interface : Proc(IHTMLDOMAttribute4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMAttribute4*, UInt32)
    release : Proc(IHTMLDOMAttribute4*, UInt32)
    get_type_info_count : Proc(IHTMLDOMAttribute4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMAttribute4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMAttribute4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMAttribute4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_node_value : Proc(IHTMLDOMAttribute4*, VARIANT, HRESULT)
    get_node_value : Proc(IHTMLDOMAttribute4*, VARIANT*, HRESULT)
    get_node_name : Proc(IHTMLDOMAttribute4*, UInt8**, HRESULT)
    get_name : Proc(IHTMLDOMAttribute4*, UInt8**, HRESULT)
    put_value : Proc(IHTMLDOMAttribute4*, UInt8*, HRESULT)
    get_value : Proc(IHTMLDOMAttribute4*, UInt8**, HRESULT)
    get_first_child : Proc(IHTMLDOMAttribute4*, IHTMLDOMNode*, HRESULT)
    get_last_child : Proc(IHTMLDOMAttribute4*, IHTMLDOMNode*, HRESULT)
    get_child_nodes : Proc(IHTMLDOMAttribute4*, IDispatch*, HRESULT)
    has_attributes : Proc(IHTMLDOMAttribute4*, Int16*, HRESULT)
    has_child_nodes : Proc(IHTMLDOMAttribute4*, Int16*, HRESULT)
    normalize : Proc(IHTMLDOMAttribute4*, HRESULT)
    get_specified : Proc(IHTMLDOMAttribute4*, Int16*, HRESULT)
  end

  IHTMLDOMAttribute4_GUID = "305106f9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMAttribute4 = LibC::GUID.new(0x305106f9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMAttribute4
    lpVtbl : IHTMLDOMAttribute4VTbl*
  end

  struct IHTMLDOMTextNodeVTbl
    query_interface : Proc(IHTMLDOMTextNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMTextNode*, UInt32)
    release : Proc(IHTMLDOMTextNode*, UInt32)
    get_type_info_count : Proc(IHTMLDOMTextNode*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMTextNode*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMTextNode*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMTextNode*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_data : Proc(IHTMLDOMTextNode*, UInt8*, HRESULT)
    get_data : Proc(IHTMLDOMTextNode*, UInt8**, HRESULT)
    to_string : Proc(IHTMLDOMTextNode*, UInt8**, HRESULT)
    get_length : Proc(IHTMLDOMTextNode*, Int32*, HRESULT)
    split_text : Proc(IHTMLDOMTextNode*, Int32, IHTMLDOMNode*, HRESULT)
  end

  IHTMLDOMTextNode_GUID = "3050f4b1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMTextNode = LibC::GUID.new(0x3050f4b1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMTextNode
    lpVtbl : IHTMLDOMTextNodeVTbl*
  end

  struct IHTMLDOMTextNode2VTbl
    query_interface : Proc(IHTMLDOMTextNode2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMTextNode2*, UInt32)
    release : Proc(IHTMLDOMTextNode2*, UInt32)
    get_type_info_count : Proc(IHTMLDOMTextNode2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMTextNode2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMTextNode2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMTextNode2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    substring_data : Proc(IHTMLDOMTextNode2*, Int32, Int32, UInt8**, HRESULT)
    append_data : Proc(IHTMLDOMTextNode2*, UInt8*, HRESULT)
    insert_data : Proc(IHTMLDOMTextNode2*, Int32, UInt8*, HRESULT)
    delete_data : Proc(IHTMLDOMTextNode2*, Int32, Int32, HRESULT)
    replace_data : Proc(IHTMLDOMTextNode2*, Int32, Int32, UInt8*, HRESULT)
  end

  IHTMLDOMTextNode2_GUID = "3050f809-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMTextNode2 = LibC::GUID.new(0x3050f809_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMTextNode2
    lpVtbl : IHTMLDOMTextNode2VTbl*
  end

  struct IHTMLDOMTextNode3VTbl
    query_interface : Proc(IHTMLDOMTextNode3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMTextNode3*, UInt32)
    release : Proc(IHTMLDOMTextNode3*, UInt32)
    get_type_info_count : Proc(IHTMLDOMTextNode3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMTextNode3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMTextNode3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMTextNode3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    substring_data : Proc(IHTMLDOMTextNode3*, Int32, Int32, UInt8**, HRESULT)
    insert_data : Proc(IHTMLDOMTextNode3*, Int32, UInt8*, HRESULT)
    delete_data : Proc(IHTMLDOMTextNode3*, Int32, Int32, HRESULT)
    replace_data : Proc(IHTMLDOMTextNode3*, Int32, Int32, UInt8*, HRESULT)
    split_text : Proc(IHTMLDOMTextNode3*, Int32, IHTMLDOMNode*, HRESULT)
    get_whole_text : Proc(IHTMLDOMTextNode3*, UInt8**, HRESULT)
    replace_whole_text : Proc(IHTMLDOMTextNode3*, UInt8*, IHTMLDOMNode*, HRESULT)
    has_attributes : Proc(IHTMLDOMTextNode3*, Int16*, HRESULT)
    normalize : Proc(IHTMLDOMTextNode3*, HRESULT)
  end

  IHTMLDOMTextNode3_GUID = "3051073e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMTextNode3 = LibC::GUID.new(0x3051073e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMTextNode3
    lpVtbl : IHTMLDOMTextNode3VTbl*
  end

  struct IHTMLDOMImplementationVTbl
    query_interface : Proc(IHTMLDOMImplementation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMImplementation*, UInt32)
    release : Proc(IHTMLDOMImplementation*, UInt32)
    get_type_info_count : Proc(IHTMLDOMImplementation*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMImplementation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMImplementation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMImplementation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    has_feature : Proc(IHTMLDOMImplementation*, UInt8*, VARIANT, Int16*, HRESULT)
  end

  IHTMLDOMImplementation_GUID = "3050f80d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMImplementation = LibC::GUID.new(0x3050f80d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMImplementation
    lpVtbl : IHTMLDOMImplementationVTbl*
  end

  struct IHTMLDOMImplementation2VTbl
    query_interface : Proc(IHTMLDOMImplementation2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMImplementation2*, UInt32)
    release : Proc(IHTMLDOMImplementation2*, UInt32)
    get_type_info_count : Proc(IHTMLDOMImplementation2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMImplementation2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMImplementation2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMImplementation2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_document_type : Proc(IHTMLDOMImplementation2*, UInt8*, VARIANT*, VARIANT*, IDOMDocumentType*, HRESULT)
    create_document : Proc(IHTMLDOMImplementation2*, VARIANT*, VARIANT*, IDOMDocumentType, IHTMLDocument7*, HRESULT)
    create_html_document : Proc(IHTMLDOMImplementation2*, UInt8*, IHTMLDocument7*, HRESULT)
    has_feature : Proc(IHTMLDOMImplementation2*, UInt8*, VARIANT, Int16*, HRESULT)
  end

  IHTMLDOMImplementation2_GUID = "3051073c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMImplementation2 = LibC::GUID.new(0x3051073c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMImplementation2
    lpVtbl : IHTMLDOMImplementation2VTbl*
  end

  struct DispHTMLDOMAttributeVTbl
    query_interface : Proc(DispHTMLDOMAttribute*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDOMAttribute*, UInt32)
    release : Proc(DispHTMLDOMAttribute*, UInt32)
    get_type_info_count : Proc(DispHTMLDOMAttribute*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDOMAttribute*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDOMAttribute*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDOMAttribute*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDOMAttribute_GUID = "3050f564-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDOMAttribute = LibC::GUID.new(0x3050f564_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDOMAttribute
    lpVtbl : DispHTMLDOMAttributeVTbl*
  end

  struct DispHTMLDOMTextNodeVTbl
    query_interface : Proc(DispHTMLDOMTextNode*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDOMTextNode*, UInt32)
    release : Proc(DispHTMLDOMTextNode*, UInt32)
    get_type_info_count : Proc(DispHTMLDOMTextNode*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDOMTextNode*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDOMTextNode*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDOMTextNode*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDOMTextNode_GUID = "3050f565-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDOMTextNode = LibC::GUID.new(0x3050f565_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDOMTextNode
    lpVtbl : DispHTMLDOMTextNodeVTbl*
  end

  struct DispHTMLDOMImplementationVTbl
    query_interface : Proc(DispHTMLDOMImplementation*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDOMImplementation*, UInt32)
    release : Proc(DispHTMLDOMImplementation*, UInt32)
    get_type_info_count : Proc(DispHTMLDOMImplementation*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDOMImplementation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDOMImplementation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDOMImplementation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDOMImplementation_GUID = "3050f58f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDOMImplementation = LibC::GUID.new(0x3050f58f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDOMImplementation
    lpVtbl : DispHTMLDOMImplementationVTbl*
  end

  struct IHTMLAttributeCollectionVTbl
    query_interface : Proc(IHTMLAttributeCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAttributeCollection*, UInt32)
    release : Proc(IHTMLAttributeCollection*, UInt32)
    get_type_info_count : Proc(IHTMLAttributeCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAttributeCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAttributeCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAttributeCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLAttributeCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLAttributeCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLAttributeCollection*, VARIANT*, IDispatch*, HRESULT)
  end

  IHTMLAttributeCollection_GUID = "3050f4c3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAttributeCollection = LibC::GUID.new(0x3050f4c3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAttributeCollection
    lpVtbl : IHTMLAttributeCollectionVTbl*
  end

  struct IHTMLAttributeCollection2VTbl
    query_interface : Proc(IHTMLAttributeCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAttributeCollection2*, UInt32)
    release : Proc(IHTMLAttributeCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLAttributeCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAttributeCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAttributeCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAttributeCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_named_item : Proc(IHTMLAttributeCollection2*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    set_named_item : Proc(IHTMLAttributeCollection2*, IHTMLDOMAttribute, IHTMLDOMAttribute*, HRESULT)
    remove_named_item : Proc(IHTMLAttributeCollection2*, UInt8*, IHTMLDOMAttribute*, HRESULT)
  end

  IHTMLAttributeCollection2_GUID = "3050f80a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAttributeCollection2 = LibC::GUID.new(0x3050f80a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAttributeCollection2
    lpVtbl : IHTMLAttributeCollection2VTbl*
  end

  struct IHTMLAttributeCollection4VTbl
    query_interface : Proc(IHTMLAttributeCollection4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAttributeCollection4*, UInt32)
    release : Proc(IHTMLAttributeCollection4*, UInt32)
    get_type_info_count : Proc(IHTMLAttributeCollection4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAttributeCollection4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAttributeCollection4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAttributeCollection4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_named_item_ns : Proc(IHTMLAttributeCollection4*, VARIANT*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    set_named_item_ns : Proc(IHTMLAttributeCollection4*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    remove_named_item_ns : Proc(IHTMLAttributeCollection4*, VARIANT*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    get_named_item : Proc(IHTMLAttributeCollection4*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    set_named_item : Proc(IHTMLAttributeCollection4*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    remove_named_item : Proc(IHTMLAttributeCollection4*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    item : Proc(IHTMLAttributeCollection4*, Int32, IHTMLDOMAttribute2*, HRESULT)
    get_length : Proc(IHTMLAttributeCollection4*, Int32*, HRESULT)
  end

  IHTMLAttributeCollection4_GUID = "305106fa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAttributeCollection4 = LibC::GUID.new(0x305106fa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAttributeCollection4
    lpVtbl : IHTMLAttributeCollection4VTbl*
  end

  struct IHTMLDOMChildrenCollectionVTbl
    query_interface : Proc(IHTMLDOMChildrenCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMChildrenCollection*, UInt32)
    release : Proc(IHTMLDOMChildrenCollection*, UInt32)
    get_type_info_count : Proc(IHTMLDOMChildrenCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMChildrenCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMChildrenCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMChildrenCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLDOMChildrenCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLDOMChildrenCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLDOMChildrenCollection*, Int32, IDispatch*, HRESULT)
  end

  IHTMLDOMChildrenCollection_GUID = "3050f5ab-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMChildrenCollection = LibC::GUID.new(0x3050f5ab_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMChildrenCollection
    lpVtbl : IHTMLDOMChildrenCollectionVTbl*
  end

  struct IHTMLDOMChildrenCollection2VTbl
    query_interface : Proc(IHTMLDOMChildrenCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMChildrenCollection2*, UInt32)
    release : Proc(IHTMLDOMChildrenCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLDOMChildrenCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMChildrenCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMChildrenCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMChildrenCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IHTMLDOMChildrenCollection2*, Int32, IDispatch*, HRESULT)
  end

  IHTMLDOMChildrenCollection2_GUID = "30510791-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMChildrenCollection2 = LibC::GUID.new(0x30510791_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMChildrenCollection2
    lpVtbl : IHTMLDOMChildrenCollection2VTbl*
  end

  struct DispHTMLAttributeCollectionVTbl
    query_interface : Proc(DispHTMLAttributeCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAttributeCollection*, UInt32)
    release : Proc(DispHTMLAttributeCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLAttributeCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAttributeCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAttributeCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAttributeCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAttributeCollection_GUID = "3050f56c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAttributeCollection = LibC::GUID.new(0x3050f56c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAttributeCollection
    lpVtbl : DispHTMLAttributeCollectionVTbl*
  end

  struct DispStaticNodeListVTbl
    query_interface : Proc(DispStaticNodeList*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispStaticNodeList*, UInt32)
    release : Proc(DispStaticNodeList*, UInt32)
    get_type_info_count : Proc(DispStaticNodeList*, UInt32*, HRESULT)
    get_type_info : Proc(DispStaticNodeList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispStaticNodeList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispStaticNodeList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispStaticNodeList_GUID = "3050f59b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispStaticNodeList = LibC::GUID.new(0x3050f59b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispStaticNodeList
    lpVtbl : DispStaticNodeListVTbl*
  end

  struct DispDOMChildrenCollectionVTbl
    query_interface : Proc(DispDOMChildrenCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMChildrenCollection*, UInt32)
    release : Proc(DispDOMChildrenCollection*, UInt32)
    get_type_info_count : Proc(DispDOMChildrenCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMChildrenCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMChildrenCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMChildrenCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMChildrenCollection_GUID = "3050f577-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMChildrenCollection = LibC::GUID.new(0x3050f577_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMChildrenCollection
    lpVtbl : DispDOMChildrenCollectionVTbl*
  end

  struct HTMLElementEvents4VTbl
    query_interface : Proc(HTMLElementEvents4*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLElementEvents4*, UInt32)
    release : Proc(HTMLElementEvents4*, UInt32)
    get_type_info_count : Proc(HTMLElementEvents4*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLElementEvents4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLElementEvents4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLElementEvents4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLElementEvents4_GUID = "3051075e-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLElementEvents4 = LibC::GUID.new(0x3051075e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLElementEvents4
    lpVtbl : HTMLElementEvents4VTbl*
  end

  struct HTMLElementEvents3VTbl
    query_interface : Proc(HTMLElementEvents3*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLElementEvents3*, UInt32)
    release : Proc(HTMLElementEvents3*, UInt32)
    get_type_info_count : Proc(HTMLElementEvents3*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLElementEvents3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLElementEvents3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLElementEvents3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLElementEvents3_GUID = "3050f59f-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLElementEvents3 = LibC::GUID.new(0x3050f59f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLElementEvents3
    lpVtbl : HTMLElementEvents3VTbl*
  end

  struct HTMLElementEvents2VTbl
    query_interface : Proc(HTMLElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLElementEvents2*, UInt32)
    release : Proc(HTMLElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLElementEvents2_GUID = "3050f60f-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLElementEvents2 = LibC::GUID.new(0x3050f60f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLElementEvents2
    lpVtbl : HTMLElementEvents2VTbl*
  end

  struct HTMLElementEventsVTbl
    query_interface : Proc(HTMLElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLElementEvents*, UInt32)
    release : Proc(HTMLElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLElementEvents_GUID = "3050f33c-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLElementEvents = LibC::GUID.new(0x3050f33c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLElementEvents
    lpVtbl : HTMLElementEventsVTbl*
  end

  struct IRulesAppliedCollectionVTbl
    query_interface : Proc(IRulesAppliedCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRulesAppliedCollection*, UInt32)
    release : Proc(IRulesAppliedCollection*, UInt32)
    get_type_info_count : Proc(IRulesAppliedCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IRulesAppliedCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRulesAppliedCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRulesAppliedCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IRulesAppliedCollection*, Int32, IRulesApplied*, HRESULT)
    get_length : Proc(IRulesAppliedCollection*, Int32*, HRESULT)
    get_element : Proc(IRulesAppliedCollection*, IHTMLElement*, HRESULT)
    property_inherited_from : Proc(IRulesAppliedCollection*, UInt8*, IRulesApplied*, HRESULT)
    get_property_count : Proc(IRulesAppliedCollection*, Int32*, HRESULT)
    property : Proc(IRulesAppliedCollection*, Int32, UInt8**, HRESULT)
    property_inherited_trace : Proc(IRulesAppliedCollection*, UInt8*, Int32, IRulesApplied*, HRESULT)
    property_inherited_trace_length : Proc(IRulesAppliedCollection*, UInt8*, Int32*, HRESULT)
  end

  IRulesAppliedCollection_GUID = "305104be-98b5-11cf-bb82-00aa00bdce0b"
  IID_IRulesAppliedCollection = LibC::GUID.new(0x305104be_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IRulesAppliedCollection
    lpVtbl : IRulesAppliedCollectionVTbl*
  end

  struct IHTMLElement3VTbl
    query_interface : Proc(IHTMLElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement3*, UInt32)
    release : Proc(IHTMLElement3*, UInt32)
    get_type_info_count : Proc(IHTMLElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    merge_attributes : Proc(IHTMLElement3*, IHTMLElement, VARIANT*, HRESULT)
    get_is_multi_line : Proc(IHTMLElement3*, Int16*, HRESULT)
    get_can_have_html : Proc(IHTMLElement3*, Int16*, HRESULT)
    put_onlayoutcomplete : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onlayoutcomplete : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onpage : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onpage : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_inflate_block : Proc(IHTMLElement3*, Int16, HRESULT)
    get_inflate_block : Proc(IHTMLElement3*, Int16*, HRESULT)
    put_onbeforedeactivate : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onbeforedeactivate : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    set_active : Proc(IHTMLElement3*, HRESULT)
    put_content_editable : Proc(IHTMLElement3*, UInt8*, HRESULT)
    get_content_editable : Proc(IHTMLElement3*, UInt8**, HRESULT)
    get_is_content_editable : Proc(IHTMLElement3*, Int16*, HRESULT)
    put_hide_focus : Proc(IHTMLElement3*, Int16, HRESULT)
    get_hide_focus : Proc(IHTMLElement3*, Int16*, HRESULT)
    put_disabled : Proc(IHTMLElement3*, Int16, HRESULT)
    get_disabled : Proc(IHTMLElement3*, Int16*, HRESULT)
    get_is_disabled : Proc(IHTMLElement3*, Int16*, HRESULT)
    put_onmove : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onmove : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_oncontrolselect : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_oncontrolselect : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    fire_event : Proc(IHTMLElement3*, UInt8*, VARIANT*, Int16*, HRESULT)
    put_onresizestart : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onresizestart : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onresizeend : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onresizeend : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onmovestart : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onmovestart : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onmoveend : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onmoveend : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onmouseenter : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onmouseenter : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onmouseleave : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onmouseleave : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_onactivate : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_onactivate : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    put_ondeactivate : Proc(IHTMLElement3*, VARIANT, HRESULT)
    get_ondeactivate : Proc(IHTMLElement3*, VARIANT*, HRESULT)
    drag_drop : Proc(IHTMLElement3*, Int16*, HRESULT)
    get_glyph_mode : Proc(IHTMLElement3*, Int32*, HRESULT)
  end

  IHTMLElement3_GUID = "3050f673-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement3 = LibC::GUID.new(0x3050f673_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement3
    lpVtbl : IHTMLElement3VTbl*
  end

  struct IHTMLElement4VTbl
    query_interface : Proc(IHTMLElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement4*, UInt32)
    release : Proc(IHTMLElement4*, UInt32)
    get_type_info_count : Proc(IHTMLElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmousewheel : Proc(IHTMLElement4*, VARIANT, HRESULT)
    get_onmousewheel : Proc(IHTMLElement4*, VARIANT*, HRESULT)
    normalize : Proc(IHTMLElement4*, HRESULT)
    get_attribute_node : Proc(IHTMLElement4*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    set_attribute_node : Proc(IHTMLElement4*, IHTMLDOMAttribute, IHTMLDOMAttribute*, HRESULT)
    remove_attribute_node : Proc(IHTMLElement4*, IHTMLDOMAttribute, IHTMLDOMAttribute*, HRESULT)
    put_onbeforeactivate : Proc(IHTMLElement4*, VARIANT, HRESULT)
    get_onbeforeactivate : Proc(IHTMLElement4*, VARIANT*, HRESULT)
    put_onfocusin : Proc(IHTMLElement4*, VARIANT, HRESULT)
    get_onfocusin : Proc(IHTMLElement4*, VARIANT*, HRESULT)
    put_onfocusout : Proc(IHTMLElement4*, VARIANT, HRESULT)
    get_onfocusout : Proc(IHTMLElement4*, VARIANT*, HRESULT)
  end

  IHTMLElement4_GUID = "3050f80f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement4 = LibC::GUID.new(0x3050f80f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement4
    lpVtbl : IHTMLElement4VTbl*
  end

  struct IElementSelectorVTbl
    query_interface : Proc(IElementSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementSelector*, UInt32)
    release : Proc(IElementSelector*, UInt32)
    get_type_info_count : Proc(IElementSelector*, UInt32*, HRESULT)
    get_type_info : Proc(IElementSelector*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IElementSelector*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IElementSelector*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    query_selector : Proc(IElementSelector*, UInt8*, IHTMLElement*, HRESULT)
    query_selector_all : Proc(IElementSelector*, UInt8*, IHTMLDOMChildrenCollection*, HRESULT)
  end

  IElementSelector_GUID = "30510463-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementSelector = LibC::GUID.new(0x30510463_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementSelector
    lpVtbl : IElementSelectorVTbl*
  end

  struct IHTMLElementRenderVTbl
    query_interface : Proc(IHTMLElementRender*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementRender*, UInt32)
    release : Proc(IHTMLElementRender*, UInt32)
    draw_to_dc : Proc(IHTMLElementRender*, HDC, HRESULT)
    set_document_printer : Proc(IHTMLElementRender*, UInt8*, HDC, HRESULT)
  end

  IHTMLElementRender_GUID = "3050f669-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementRender = LibC::GUID.new(0x3050f669_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementRender
    lpVtbl : IHTMLElementRenderVTbl*
  end

  struct IHTMLUniqueNameVTbl
    query_interface : Proc(IHTMLUniqueName*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLUniqueName*, UInt32)
    release : Proc(IHTMLUniqueName*, UInt32)
    get_type_info_count : Proc(IHTMLUniqueName*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLUniqueName*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLUniqueName*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLUniqueName*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_number : Proc(IHTMLUniqueName*, Int32*, HRESULT)
    get_unique_id : Proc(IHTMLUniqueName*, UInt8**, HRESULT)
  end

  IHTMLUniqueName_GUID = "3050f4d0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLUniqueName = LibC::GUID.new(0x3050f4d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLUniqueName
    lpVtbl : IHTMLUniqueNameVTbl*
  end

  struct IHTMLElement5VTbl
    query_interface : Proc(IHTMLElement5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement5*, UInt32)
    release : Proc(IHTMLElement5*, UInt32)
    get_type_info_count : Proc(IHTMLElement5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_attribute_node : Proc(IHTMLElement5*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    set_attribute_node : Proc(IHTMLElement5*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    remove_attribute_node : Proc(IHTMLElement5*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    has_attribute : Proc(IHTMLElement5*, UInt8*, Int16*, HRESULT)
    put_role : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_role : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_busy : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_busy : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_checked : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_checked : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_disabled : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_disabled : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_expanded : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_expanded : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_haspopup : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_haspopup : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_hidden : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_hidden : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_invalid : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_invalid : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_multiselectable : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_multiselectable : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_pressed : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_pressed : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_readonly : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_readonly : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_required : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_required : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_secret : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_secret : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_selected : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_selected : Proc(IHTMLElement5*, UInt8**, HRESULT)
    get_attribute : Proc(IHTMLElement5*, UInt8*, VARIANT*, HRESULT)
    set_attribute : Proc(IHTMLElement5*, UInt8*, VARIANT, HRESULT)
    remove_attribute : Proc(IHTMLElement5*, UInt8*, Int16*, HRESULT)
    get_attributes : Proc(IHTMLElement5*, IHTMLAttributeCollection3*, HRESULT)
    put_aria_valuenow : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_valuenow : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_posinset : Proc(IHTMLElement5*, Int16, HRESULT)
    get_aria_posinset : Proc(IHTMLElement5*, Int16*, HRESULT)
    put_aria_setsize : Proc(IHTMLElement5*, Int16, HRESULT)
    get_aria_setsize : Proc(IHTMLElement5*, Int16*, HRESULT)
    put_aria_level : Proc(IHTMLElement5*, Int16, HRESULT)
    get_aria_level : Proc(IHTMLElement5*, Int16*, HRESULT)
    put_aria_valuemin : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_valuemin : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_valuemax : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_valuemax : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_controls : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_controls : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_describedby : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_describedby : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_flowto : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_flowto : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_labelledby : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_labelledby : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_activedescendant : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_activedescendant : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_owns : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_owns : Proc(IHTMLElement5*, UInt8**, HRESULT)
    has_attributes : Proc(IHTMLElement5*, Int16*, HRESULT)
    put_aria_live : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_live : Proc(IHTMLElement5*, UInt8**, HRESULT)
    put_aria_relevant : Proc(IHTMLElement5*, UInt8*, HRESULT)
    get_aria_relevant : Proc(IHTMLElement5*, UInt8**, HRESULT)
  end

  IHTMLElement5_GUID = "3051045d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement5 = LibC::GUID.new(0x3051045d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement5
    lpVtbl : IHTMLElement5VTbl*
  end

  struct IHTMLElement6VTbl
    query_interface : Proc(IHTMLElement6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement6*, UInt32)
    release : Proc(IHTMLElement6*, UInt32)
    get_type_info_count : Proc(IHTMLElement6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_attribute_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, VARIANT*, HRESULT)
    set_attribute_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, VARIANT*, HRESULT)
    remove_attribute_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, HRESULT)
    get_attribute_node_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    set_attribute_node_ns : Proc(IHTMLElement6*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    has_attribute_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, Int16*, HRESULT)
    get_attribute : Proc(IHTMLElement6*, UInt8*, VARIANT*, HRESULT)
    set_attribute : Proc(IHTMLElement6*, UInt8*, VARIANT*, HRESULT)
    remove_attribute : Proc(IHTMLElement6*, UInt8*, HRESULT)
    get_attribute_node : Proc(IHTMLElement6*, UInt8*, IHTMLDOMAttribute2*, HRESULT)
    set_attribute_node : Proc(IHTMLElement6*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    remove_attribute_node : Proc(IHTMLElement6*, IHTMLDOMAttribute2, IHTMLDOMAttribute2*, HRESULT)
    has_attribute : Proc(IHTMLElement6*, UInt8*, Int16*, HRESULT)
    get_elements_by_tag_name_ns : Proc(IHTMLElement6*, VARIANT*, UInt8*, IHTMLElementCollection*, HRESULT)
    get_tag_name : Proc(IHTMLElement6*, UInt8**, HRESULT)
    get_node_name : Proc(IHTMLElement6*, UInt8**, HRESULT)
    get_elements_by_class_name : Proc(IHTMLElement6*, UInt8*, IHTMLElementCollection*, HRESULT)
    ms_matches_selector : Proc(IHTMLElement6*, UInt8*, Int16*, HRESULT)
    put_onabort : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_oncanplay : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_oncanplay : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_oncanplaythrough : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_oncanplaythrough : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onchange : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_ondurationchange : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_ondurationchange : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onemptied : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onemptied : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onended : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onended : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_oninput : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_oninput : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onloadeddata : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onloadeddata : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onloadedmetadata : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onloadedmetadata : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onloadstart : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onloadstart : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onpause : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onpause : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onplay : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onplay : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onplaying : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onplaying : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onprogress : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onprogress : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onratechange : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onratechange : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onreset : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onreset : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onseeked : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onseeked : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onseeking : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onseeking : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onstalled : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onstalled : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onsubmit : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onsubmit : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onsuspend : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onsuspend : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_ontimeupdate : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_ontimeupdate : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onvolumechange : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onvolumechange : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    put_onwaiting : Proc(IHTMLElement6*, VARIANT, HRESULT)
    get_onwaiting : Proc(IHTMLElement6*, VARIANT*, HRESULT)
    has_attributes : Proc(IHTMLElement6*, Int16*, HRESULT)
  end

  IHTMLElement6_GUID = "305106f8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement6 = LibC::GUID.new(0x305106f8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement6
    lpVtbl : IHTMLElement6VTbl*
  end

  struct IHTMLElement7VTbl
    query_interface : Proc(IHTMLElement7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElement7*, UInt32)
    release : Proc(IHTMLElement7*, UInt32)
    get_type_info_count : Proc(IHTMLElement7*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElement7*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElement7*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElement7*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmspointerdown : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointerdown : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointermove : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointermove : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointerup : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointerup : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointerover : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointerover : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointerout : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointerout : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointercancel : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointercancel : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmspointerhover : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmspointerhover : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmslostpointercapture : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmslostpointercapture : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgotpointercapture : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgotpointercapture : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgesturestart : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgesturestart : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgesturechange : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgesturechange : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgestureend : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgestureend : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgesturehold : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgesturehold : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgesturetap : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgesturetap : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsgesturedoubletap : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsgesturedoubletap : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsinertiastart : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsinertiastart : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    ms_set_pointer_capture : Proc(IHTMLElement7*, Int32, HRESULT)
    ms_release_pointer_capture : Proc(IHTMLElement7*, Int32, HRESULT)
    put_onmstransitionstart : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmstransitionstart : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmstransitionend : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmstransitionend : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsanimationstart : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsanimationstart : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsanimationend : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsanimationend : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsanimationiteration : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsanimationiteration : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_oninvalid : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_oninvalid : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_xms_accelerator_key : Proc(IHTMLElement7*, UInt8*, HRESULT)
    get_xms_accelerator_key : Proc(IHTMLElement7*, UInt8**, HRESULT)
    put_spellcheck : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_spellcheck : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_onmsmanipulationstatechanged : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_onmsmanipulationstatechanged : Proc(IHTMLElement7*, VARIANT*, HRESULT)
    put_oncuechange : Proc(IHTMLElement7*, VARIANT, HRESULT)
    get_oncuechange : Proc(IHTMLElement7*, VARIANT*, HRESULT)
  end

  IHTMLElement7_GUID = "305107aa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElement7 = LibC::GUID.new(0x305107aa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElement7
    lpVtbl : IHTMLElement7VTbl*
  end

  struct IHTMLElementAppliedStylesVTbl
    query_interface : Proc(IHTMLElementAppliedStyles*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementAppliedStyles*, UInt32)
    release : Proc(IHTMLElementAppliedStyles*, UInt32)
    get_type_info_count : Proc(IHTMLElementAppliedStyles*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementAppliedStyles*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementAppliedStyles*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementAppliedStyles*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    ms_get_rules_applied : Proc(IHTMLElementAppliedStyles*, IRulesAppliedCollection*, HRESULT)
    ms_get_rules_applied_with_ancestor : Proc(IHTMLElementAppliedStyles*, VARIANT, IRulesAppliedCollection*, HRESULT)
  end

  IHTMLElementAppliedStyles_GUID = "305104bd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementAppliedStyles = LibC::GUID.new(0x305104bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementAppliedStyles
    lpVtbl : IHTMLElementAppliedStylesVTbl*
  end

  struct IElementTraversalVTbl
    query_interface : Proc(IElementTraversal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementTraversal*, UInt32)
    release : Proc(IElementTraversal*, UInt32)
    get_type_info_count : Proc(IElementTraversal*, UInt32*, HRESULT)
    get_type_info : Proc(IElementTraversal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IElementTraversal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IElementTraversal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_first_element_child : Proc(IElementTraversal*, IHTMLElement*, HRESULT)
    get_last_element_child : Proc(IElementTraversal*, IHTMLElement*, HRESULT)
    get_previous_element_sibling : Proc(IElementTraversal*, IHTMLElement*, HRESULT)
    get_next_element_sibling : Proc(IElementTraversal*, IHTMLElement*, HRESULT)
    get_child_element_count : Proc(IElementTraversal*, Int32*, HRESULT)
  end

  IElementTraversal_GUID = "30510736-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementTraversal = LibC::GUID.new(0x30510736_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementTraversal
    lpVtbl : IElementTraversalVTbl*
  end

  struct IHTMLDatabindingVTbl
    query_interface : Proc(IHTMLDatabinding*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDatabinding*, UInt32)
    release : Proc(IHTMLDatabinding*, UInt32)
    get_type_info_count : Proc(IHTMLDatabinding*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDatabinding*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDatabinding*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDatabinding*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_data_fld : Proc(IHTMLDatabinding*, UInt8*, HRESULT)
    get_data_fld : Proc(IHTMLDatabinding*, UInt8**, HRESULT)
    put_data_src : Proc(IHTMLDatabinding*, UInt8*, HRESULT)
    get_data_src : Proc(IHTMLDatabinding*, UInt8**, HRESULT)
    put_data_format_as : Proc(IHTMLDatabinding*, UInt8*, HRESULT)
    get_data_format_as : Proc(IHTMLDatabinding*, UInt8**, HRESULT)
  end

  IHTMLDatabinding_GUID = "3050f3f2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDatabinding = LibC::GUID.new(0x3050f3f2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDatabinding
    lpVtbl : IHTMLDatabindingVTbl*
  end

  struct IHTMLDocumentVTbl
    query_interface : Proc(IHTMLDocument*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument*, UInt32)
    release : Proc(IHTMLDocument*, UInt32)
    get_type_info_count : Proc(IHTMLDocument*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_script : Proc(IHTMLDocument*, IDispatch*, HRESULT)
  end

  IHTMLDocument_GUID = "626fc520-a41e-11cf-a731-00a0c9082637"
  IID_IHTMLDocument = LibC::GUID.new(0x626fc520_u32, 0xa41e_u16, 0x11cf_u16, StaticArray[0xa7_u8, 0x31_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x8_u8, 0x26_u8, 0x37_u8])
  struct IHTMLDocument
    lpVtbl : IHTMLDocumentVTbl*
  end

  struct IHTMLElementDefaultsVTbl
    query_interface : Proc(IHTMLElementDefaults*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementDefaults*, UInt32)
    release : Proc(IHTMLElementDefaults*, UInt32)
    get_type_info_count : Proc(IHTMLElementDefaults*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementDefaults*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementDefaults*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementDefaults*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_style : Proc(IHTMLElementDefaults*, IHTMLStyle*, HRESULT)
    put_tab_stop : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_tab_stop : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
    put_view_inherit_style : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_view_inherit_style : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
    put_view_master_tab : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_view_master_tab : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
    put_scroll_segment_x : Proc(IHTMLElementDefaults*, Int32, HRESULT)
    get_scroll_segment_x : Proc(IHTMLElementDefaults*, Int32*, HRESULT)
    put_scroll_segment_y : Proc(IHTMLElementDefaults*, Int32, HRESULT)
    get_scroll_segment_y : Proc(IHTMLElementDefaults*, Int32*, HRESULT)
    put_is_multi_line : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_is_multi_line : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
    put_content_editable : Proc(IHTMLElementDefaults*, UInt8*, HRESULT)
    get_content_editable : Proc(IHTMLElementDefaults*, UInt8**, HRESULT)
    put_can_have_html : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_can_have_html : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
    putref_view_link : Proc(IHTMLElementDefaults*, IHTMLDocument, HRESULT)
    get_view_link : Proc(IHTMLElementDefaults*, IHTMLDocument*, HRESULT)
    put_frozen : Proc(IHTMLElementDefaults*, Int16, HRESULT)
    get_frozen : Proc(IHTMLElementDefaults*, Int16*, HRESULT)
  end

  IHTMLElementDefaults_GUID = "3050f6c9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementDefaults = LibC::GUID.new(0x3050f6c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementDefaults
    lpVtbl : IHTMLElementDefaultsVTbl*
  end

  struct DispHTMLDefaultsVTbl
    query_interface : Proc(DispHTMLDefaults*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDefaults*, UInt32)
    release : Proc(DispHTMLDefaults*, UInt32)
    get_type_info_count : Proc(DispHTMLDefaults*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDefaults*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDefaults*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDefaults*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDefaults_GUID = "3050f58c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDefaults = LibC::GUID.new(0x3050f58c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDefaults
    lpVtbl : DispHTMLDefaultsVTbl*
  end

  struct IHTCDefaultDispatchVTbl
    query_interface : Proc(IHTCDefaultDispatch*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCDefaultDispatch*, UInt32)
    release : Proc(IHTCDefaultDispatch*, UInt32)
    get_type_info_count : Proc(IHTCDefaultDispatch*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCDefaultDispatch*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCDefaultDispatch*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCDefaultDispatch*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_element : Proc(IHTCDefaultDispatch*, IHTMLElement*, HRESULT)
    create_event_object : Proc(IHTCDefaultDispatch*, IHTMLEventObj*, HRESULT)
    get_defaults : Proc(IHTCDefaultDispatch*, IDispatch*, HRESULT)
    get_document : Proc(IHTCDefaultDispatch*, IDispatch*, HRESULT)
  end

  IHTCDefaultDispatch_GUID = "3050f4fd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCDefaultDispatch = LibC::GUID.new(0x3050f4fd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCDefaultDispatch
    lpVtbl : IHTCDefaultDispatchVTbl*
  end

  struct IHTCPropertyBehaviorVTbl
    query_interface : Proc(IHTCPropertyBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCPropertyBehavior*, UInt32)
    release : Proc(IHTCPropertyBehavior*, UInt32)
    get_type_info_count : Proc(IHTCPropertyBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCPropertyBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCPropertyBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCPropertyBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    fire_change : Proc(IHTCPropertyBehavior*, HRESULT)
    put_value : Proc(IHTCPropertyBehavior*, VARIANT, HRESULT)
    get_value : Proc(IHTCPropertyBehavior*, VARIANT*, HRESULT)
  end

  IHTCPropertyBehavior_GUID = "3050f5df-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCPropertyBehavior = LibC::GUID.new(0x3050f5df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCPropertyBehavior
    lpVtbl : IHTCPropertyBehaviorVTbl*
  end

  struct IHTCMethodBehaviorVTbl
    query_interface : Proc(IHTCMethodBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCMethodBehavior*, UInt32)
    release : Proc(IHTCMethodBehavior*, UInt32)
    get_type_info_count : Proc(IHTCMethodBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCMethodBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCMethodBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCMethodBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTCMethodBehavior_GUID = "3050f631-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCMethodBehavior = LibC::GUID.new(0x3050f631_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCMethodBehavior
    lpVtbl : IHTCMethodBehaviorVTbl*
  end

  struct IHTCEventBehaviorVTbl
    query_interface : Proc(IHTCEventBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCEventBehavior*, UInt32)
    release : Proc(IHTCEventBehavior*, UInt32)
    get_type_info_count : Proc(IHTCEventBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCEventBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCEventBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCEventBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    fire : Proc(IHTCEventBehavior*, IHTMLEventObj, HRESULT)
  end

  IHTCEventBehavior_GUID = "3050f4ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCEventBehavior = LibC::GUID.new(0x3050f4ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCEventBehavior
    lpVtbl : IHTCEventBehaviorVTbl*
  end

  struct IHTCAttachBehaviorVTbl
    query_interface : Proc(IHTCAttachBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCAttachBehavior*, UInt32)
    release : Proc(IHTCAttachBehavior*, UInt32)
    get_type_info_count : Proc(IHTCAttachBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCAttachBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCAttachBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCAttachBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    fire_event : Proc(IHTCAttachBehavior*, IDispatch, HRESULT)
    detach_event : Proc(IHTCAttachBehavior*, HRESULT)
  end

  IHTCAttachBehavior_GUID = "3050f5f4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCAttachBehavior = LibC::GUID.new(0x3050f5f4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCAttachBehavior
    lpVtbl : IHTCAttachBehaviorVTbl*
  end

  struct IHTCAttachBehavior2VTbl
    query_interface : Proc(IHTCAttachBehavior2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCAttachBehavior2*, UInt32)
    release : Proc(IHTCAttachBehavior2*, UInt32)
    get_type_info_count : Proc(IHTCAttachBehavior2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCAttachBehavior2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCAttachBehavior2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCAttachBehavior2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    fire_event : Proc(IHTCAttachBehavior2*, VARIANT, HRESULT)
  end

  IHTCAttachBehavior2_GUID = "3050f7eb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCAttachBehavior2 = LibC::GUID.new(0x3050f7eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCAttachBehavior2
    lpVtbl : IHTCAttachBehavior2VTbl*
  end

  struct IHTCDescBehaviorVTbl
    query_interface : Proc(IHTCDescBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTCDescBehavior*, UInt32)
    release : Proc(IHTCDescBehavior*, UInt32)
    get_type_info_count : Proc(IHTCDescBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTCDescBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTCDescBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTCDescBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_urn : Proc(IHTCDescBehavior*, UInt8**, HRESULT)
    get_name : Proc(IHTCDescBehavior*, UInt8**, HRESULT)
  end

  IHTCDescBehavior_GUID = "3050f5dc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTCDescBehavior = LibC::GUID.new(0x3050f5dc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTCDescBehavior
    lpVtbl : IHTCDescBehaviorVTbl*
  end

  struct DispHTCDefaultDispatchVTbl
    query_interface : Proc(DispHTCDefaultDispatch*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCDefaultDispatch*, UInt32)
    release : Proc(DispHTCDefaultDispatch*, UInt32)
    get_type_info_count : Proc(DispHTCDefaultDispatch*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCDefaultDispatch*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCDefaultDispatch*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCDefaultDispatch*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCDefaultDispatch_GUID = "3050f573-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCDefaultDispatch = LibC::GUID.new(0x3050f573_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCDefaultDispatch
    lpVtbl : DispHTCDefaultDispatchVTbl*
  end

  struct DispHTCPropertyBehaviorVTbl
    query_interface : Proc(DispHTCPropertyBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCPropertyBehavior*, UInt32)
    release : Proc(DispHTCPropertyBehavior*, UInt32)
    get_type_info_count : Proc(DispHTCPropertyBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCPropertyBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCPropertyBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCPropertyBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCPropertyBehavior_GUID = "3050f57f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCPropertyBehavior = LibC::GUID.new(0x3050f57f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCPropertyBehavior
    lpVtbl : DispHTCPropertyBehaviorVTbl*
  end

  struct DispHTCMethodBehaviorVTbl
    query_interface : Proc(DispHTCMethodBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCMethodBehavior*, UInt32)
    release : Proc(DispHTCMethodBehavior*, UInt32)
    get_type_info_count : Proc(DispHTCMethodBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCMethodBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCMethodBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCMethodBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCMethodBehavior_GUID = "3050f587-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCMethodBehavior = LibC::GUID.new(0x3050f587_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCMethodBehavior
    lpVtbl : DispHTCMethodBehaviorVTbl*
  end

  struct DispHTCEventBehaviorVTbl
    query_interface : Proc(DispHTCEventBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCEventBehavior*, UInt32)
    release : Proc(DispHTCEventBehavior*, UInt32)
    get_type_info_count : Proc(DispHTCEventBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCEventBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCEventBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCEventBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCEventBehavior_GUID = "3050f574-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCEventBehavior = LibC::GUID.new(0x3050f574_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCEventBehavior
    lpVtbl : DispHTCEventBehaviorVTbl*
  end

  struct DispHTCAttachBehaviorVTbl
    query_interface : Proc(DispHTCAttachBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCAttachBehavior*, UInt32)
    release : Proc(DispHTCAttachBehavior*, UInt32)
    get_type_info_count : Proc(DispHTCAttachBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCAttachBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCAttachBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCAttachBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCAttachBehavior_GUID = "3050f583-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCAttachBehavior = LibC::GUID.new(0x3050f583_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCAttachBehavior
    lpVtbl : DispHTCAttachBehaviorVTbl*
  end

  struct DispHTCDescBehaviorVTbl
    query_interface : Proc(DispHTCDescBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTCDescBehavior*, UInt32)
    release : Proc(DispHTCDescBehavior*, UInt32)
    get_type_info_count : Proc(DispHTCDescBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTCDescBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTCDescBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTCDescBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTCDescBehavior_GUID = "3050f57e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTCDescBehavior = LibC::GUID.new(0x3050f57e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTCDescBehavior
    lpVtbl : DispHTCDescBehaviorVTbl*
  end

  struct IHTMLUrnCollectionVTbl
    query_interface : Proc(IHTMLUrnCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLUrnCollection*, UInt32)
    release : Proc(IHTMLUrnCollection*, UInt32)
    get_type_info_count : Proc(IHTMLUrnCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLUrnCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLUrnCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLUrnCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLUrnCollection*, Int32*, HRESULT)
    item : Proc(IHTMLUrnCollection*, Int32, UInt8**, HRESULT)
  end

  IHTMLUrnCollection_GUID = "3050f5e2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLUrnCollection = LibC::GUID.new(0x3050f5e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLUrnCollection
    lpVtbl : IHTMLUrnCollectionVTbl*
  end

  struct DispHTMLUrnCollectionVTbl
    query_interface : Proc(DispHTMLUrnCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLUrnCollection*, UInt32)
    release : Proc(DispHTMLUrnCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLUrnCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLUrnCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLUrnCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLUrnCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLUrnCollection_GUID = "3050f551-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLUrnCollection = LibC::GUID.new(0x3050f551_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLUrnCollection
    lpVtbl : DispHTMLUrnCollectionVTbl*
  end

  struct IHTMLGenericElementVTbl
    query_interface : Proc(IHTMLGenericElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLGenericElement*, UInt32)
    release : Proc(IHTMLGenericElement*, UInt32)
    get_type_info_count : Proc(IHTMLGenericElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLGenericElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLGenericElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLGenericElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_recordset : Proc(IHTMLGenericElement*, IDispatch*, HRESULT)
    named_recordset : Proc(IHTMLGenericElement*, UInt8*, VARIANT*, IDispatch*, HRESULT)
  end

  IHTMLGenericElement_GUID = "3050f4b7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLGenericElement = LibC::GUID.new(0x3050f4b7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLGenericElement
    lpVtbl : IHTMLGenericElementVTbl*
  end

  struct DispHTMLGenericElementVTbl
    query_interface : Proc(DispHTMLGenericElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLGenericElement*, UInt32)
    release : Proc(DispHTMLGenericElement*, UInt32)
    get_type_info_count : Proc(DispHTMLGenericElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLGenericElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLGenericElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLGenericElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLGenericElement_GUID = "3050f563-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLGenericElement = LibC::GUID.new(0x3050f563_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLGenericElement
    lpVtbl : DispHTMLGenericElementVTbl*
  end

  struct IHTMLStyleSheetRuleAppliedVTbl
    query_interface : Proc(IHTMLStyleSheetRuleApplied*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRuleApplied*, UInt32)
    release : Proc(IHTMLStyleSheetRuleApplied*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRuleApplied*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRuleApplied*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRuleApplied*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRuleApplied*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ms_specificity : Proc(IHTMLStyleSheetRuleApplied*, Int32*, HRESULT)
    ms_get_specificity : Proc(IHTMLStyleSheetRuleApplied*, Int32, Int32*, HRESULT)
  end

  IHTMLStyleSheetRuleApplied_GUID = "305104c1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRuleApplied = LibC::GUID.new(0x305104c1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRuleApplied
    lpVtbl : IHTMLStyleSheetRuleAppliedVTbl*
  end

  struct IHTMLStyleSheetRule2VTbl
    query_interface : Proc(IHTMLStyleSheetRule2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRule2*, UInt32)
    release : Proc(IHTMLStyleSheetRule2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRule2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRule2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRule2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRule2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selector_text : Proc(IHTMLStyleSheetRule2*, UInt8*, HRESULT)
    get_selector_text : Proc(IHTMLStyleSheetRule2*, UInt8**, HRESULT)
  end

  IHTMLStyleSheetRule2_GUID = "305106fd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRule2 = LibC::GUID.new(0x305106fd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRule2
    lpVtbl : IHTMLStyleSheetRule2VTbl*
  end

  struct IHTMLStyleSheetRulesCollection2VTbl
    query_interface : Proc(IHTMLStyleSheetRulesCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRulesCollection2*, UInt32)
    release : Proc(IHTMLStyleSheetRulesCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRulesCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRulesCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRulesCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRulesCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLStyleSheetRulesCollection2*, Int32*, HRESULT)
    item : Proc(IHTMLStyleSheetRulesCollection2*, Int32, IHTMLCSSRule*, HRESULT)
  end

  IHTMLStyleSheetRulesCollection2_GUID = "305106e8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRulesCollection2 = LibC::GUID.new(0x305106e8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRulesCollection2
    lpVtbl : IHTMLStyleSheetRulesCollection2VTbl*
  end

  struct DispHTMLStyleSheetRuleVTbl
    query_interface : Proc(DispHTMLStyleSheetRule*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetRule*, UInt32)
    release : Proc(DispHTMLStyleSheetRule*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetRule*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetRule*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetRule*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetRule*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetRule_GUID = "3050f50e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetRule = LibC::GUID.new(0x3050f50e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetRule
    lpVtbl : DispHTMLStyleSheetRuleVTbl*
  end

  struct DispHTMLStyleSheetRulesCollectionVTbl
    query_interface : Proc(DispHTMLStyleSheetRulesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetRulesCollection*, UInt32)
    release : Proc(DispHTMLStyleSheetRulesCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetRulesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetRulesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetRulesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetRulesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetRulesCollection_GUID = "3050f52f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetRulesCollection = LibC::GUID.new(0x3050f52f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetRulesCollection
    lpVtbl : DispHTMLStyleSheetRulesCollectionVTbl*
  end

  struct IHTMLStyleSheetPageVTbl
    query_interface : Proc(IHTMLStyleSheetPage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetPage*, UInt32)
    release : Proc(IHTMLStyleSheetPage*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetPage*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetPage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetPage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetPage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_selector : Proc(IHTMLStyleSheetPage*, UInt8**, HRESULT)
    get_pseudo_class : Proc(IHTMLStyleSheetPage*, UInt8**, HRESULT)
  end

  IHTMLStyleSheetPage_GUID = "3050f7ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetPage = LibC::GUID.new(0x3050f7ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetPage
    lpVtbl : IHTMLStyleSheetPageVTbl*
  end

  struct IHTMLStyleSheetPage2VTbl
    query_interface : Proc(IHTMLStyleSheetPage2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetPage2*, UInt32)
    release : Proc(IHTMLStyleSheetPage2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetPage2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetPage2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetPage2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetPage2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selector_text : Proc(IHTMLStyleSheetPage2*, UInt8*, HRESULT)
    get_selector_text : Proc(IHTMLStyleSheetPage2*, UInt8**, HRESULT)
    get_style : Proc(IHTMLStyleSheetPage2*, IHTMLRuleStyle*, HRESULT)
  end

  IHTMLStyleSheetPage2_GUID = "305106ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetPage2 = LibC::GUID.new(0x305106ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetPage2
    lpVtbl : IHTMLStyleSheetPage2VTbl*
  end

  struct IHTMLStyleSheetPagesCollectionVTbl
    query_interface : Proc(IHTMLStyleSheetPagesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetPagesCollection*, UInt32)
    release : Proc(IHTMLStyleSheetPagesCollection*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetPagesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetPagesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetPagesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetPagesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLStyleSheetPagesCollection*, Int32*, HRESULT)
    item : Proc(IHTMLStyleSheetPagesCollection*, Int32, IHTMLStyleSheetPage*, HRESULT)
  end

  IHTMLStyleSheetPagesCollection_GUID = "3050f7f0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetPagesCollection = LibC::GUID.new(0x3050f7f0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetPagesCollection
    lpVtbl : IHTMLStyleSheetPagesCollectionVTbl*
  end

  struct DispHTMLStyleSheetPageVTbl
    query_interface : Proc(DispHTMLStyleSheetPage*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetPage*, UInt32)
    release : Proc(DispHTMLStyleSheetPage*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetPage*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetPage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetPage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetPage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetPage_GUID = "3050f540-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetPage = LibC::GUID.new(0x3050f540_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetPage
    lpVtbl : DispHTMLStyleSheetPageVTbl*
  end

  struct DispHTMLStyleSheetPagesCollectionVTbl
    query_interface : Proc(DispHTMLStyleSheetPagesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetPagesCollection*, UInt32)
    release : Proc(DispHTMLStyleSheetPagesCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetPagesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetPagesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetPagesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetPagesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetPagesCollection_GUID = "3050f543-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetPagesCollection = LibC::GUID.new(0x3050f543_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetPagesCollection
    lpVtbl : DispHTMLStyleSheetPagesCollectionVTbl*
  end

  struct IHTMLStyleSheetsCollectionVTbl
    query_interface : Proc(IHTMLStyleSheetsCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetsCollection*, UInt32)
    release : Proc(IHTMLStyleSheetsCollection*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetsCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetsCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetsCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetsCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLStyleSheetsCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLStyleSheetsCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLStyleSheetsCollection*, VARIANT*, VARIANT*, HRESULT)
  end

  IHTMLStyleSheetsCollection_GUID = "3050f37e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetsCollection = LibC::GUID.new(0x3050f37e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetsCollection
    lpVtbl : IHTMLStyleSheetsCollectionVTbl*
  end

  struct IHTMLStyleSheet2VTbl
    query_interface : Proc(IHTMLStyleSheet2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheet2*, UInt32)
    release : Proc(IHTMLStyleSheet2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheet2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheet2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheet2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheet2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_pages : Proc(IHTMLStyleSheet2*, IHTMLStyleSheetPagesCollection*, HRESULT)
    add_page_rule : Proc(IHTMLStyleSheet2*, UInt8*, UInt8*, Int32, Int32*, HRESULT)
  end

  IHTMLStyleSheet2_GUID = "3050f3d1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheet2 = LibC::GUID.new(0x3050f3d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheet2
    lpVtbl : IHTMLStyleSheet2VTbl*
  end

  struct IHTMLStyleSheet3VTbl
    query_interface : Proc(IHTMLStyleSheet3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheet3*, UInt32)
    release : Proc(IHTMLStyleSheet3*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheet3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheet3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheet3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheet3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLStyleSheet3*, UInt8*, HRESULT)
    get_href : Proc(IHTMLStyleSheet3*, UInt8**, HRESULT)
    get_is_alternate : Proc(IHTMLStyleSheet3*, Int16*, HRESULT)
    get_is_pref_alternate : Proc(IHTMLStyleSheet3*, Int16*, HRESULT)
  end

  IHTMLStyleSheet3_GUID = "30510496-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheet3 = LibC::GUID.new(0x30510496_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheet3
    lpVtbl : IHTMLStyleSheet3VTbl*
  end

  struct IHTMLStyleSheet4VTbl
    query_interface : Proc(IHTMLStyleSheet4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheet4*, UInt32)
    release : Proc(IHTMLStyleSheet4*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheet4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheet4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheet4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheet4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLStyleSheet4*, UInt8**, HRESULT)
    get_href : Proc(IHTMLStyleSheet4*, VARIANT*, HRESULT)
    get_title : Proc(IHTMLStyleSheet4*, UInt8**, HRESULT)
    get_owner_node : Proc(IHTMLStyleSheet4*, IHTMLElement*, HRESULT)
    get_owner_rule : Proc(IHTMLStyleSheet4*, IHTMLCSSRule*, HRESULT)
    get_css_rules : Proc(IHTMLStyleSheet4*, IHTMLStyleSheetRulesCollection*, HRESULT)
    get_media : Proc(IHTMLStyleSheet4*, VARIANT*, HRESULT)
    insert_rule : Proc(IHTMLStyleSheet4*, UInt8*, Int32, Int32*, HRESULT)
    delete_rule : Proc(IHTMLStyleSheet4*, Int32, HRESULT)
  end

  IHTMLStyleSheet4_GUID = "305106f4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheet4 = LibC::GUID.new(0x305106f4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheet4
    lpVtbl : IHTMLStyleSheet4VTbl*
  end

  struct DispHTMLStyleSheetVTbl
    query_interface : Proc(DispHTMLStyleSheet*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheet*, UInt32)
    release : Proc(DispHTMLStyleSheet*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheet*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheet*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheet*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheet*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheet_GUID = "3050f58d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheet = LibC::GUID.new(0x3050f58d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheet
    lpVtbl : DispHTMLStyleSheetVTbl*
  end

  struct IHTMLStyleSheetsCollection2VTbl
    query_interface : Proc(IHTMLStyleSheetsCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetsCollection2*, UInt32)
    release : Proc(IHTMLStyleSheetsCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetsCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetsCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetsCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetsCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IHTMLStyleSheetsCollection2*, Int32, VARIANT*, HRESULT)
  end

  IHTMLStyleSheetsCollection2_GUID = "305106e7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetsCollection2 = LibC::GUID.new(0x305106e7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetsCollection2
    lpVtbl : IHTMLStyleSheetsCollection2VTbl*
  end

  struct DispHTMLStyleSheetsCollectionVTbl
    query_interface : Proc(DispHTMLStyleSheetsCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetsCollection*, UInt32)
    release : Proc(DispHTMLStyleSheetsCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetsCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetsCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetsCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetsCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetsCollection_GUID = "3050f547-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetsCollection = LibC::GUID.new(0x3050f547_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetsCollection
    lpVtbl : DispHTMLStyleSheetsCollectionVTbl*
  end

  struct HTMLLinkElementEvents2VTbl
    query_interface : Proc(HTMLLinkElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLLinkElementEvents2*, UInt32)
    release : Proc(HTMLLinkElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLLinkElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLLinkElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLLinkElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLLinkElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLLinkElementEvents2_GUID = "3050f61d-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLLinkElementEvents2 = LibC::GUID.new(0x3050f61d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLLinkElementEvents2
    lpVtbl : HTMLLinkElementEvents2VTbl*
  end

  struct HTMLLinkElementEventsVTbl
    query_interface : Proc(HTMLLinkElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLLinkElementEvents*, UInt32)
    release : Proc(HTMLLinkElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLLinkElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLLinkElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLLinkElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLLinkElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLLinkElementEvents_GUID = "3050f3cc-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLLinkElementEvents = LibC::GUID.new(0x3050f3cc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLLinkElementEvents
    lpVtbl : HTMLLinkElementEventsVTbl*
  end

  struct IHTMLLinkElementVTbl
    query_interface : Proc(IHTMLLinkElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLinkElement*, UInt32)
    release : Proc(IHTMLLinkElement*, UInt32)
    get_type_info_count : Proc(IHTMLLinkElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLinkElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLinkElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLinkElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLLinkElement*, UInt8*, HRESULT)
    get_href : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
    put_rel : Proc(IHTMLLinkElement*, UInt8*, HRESULT)
    get_rel : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
    put_rev : Proc(IHTMLLinkElement*, UInt8*, HRESULT)
    get_rev : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
    put_type : Proc(IHTMLLinkElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
    get_ready_state : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
    put_onreadystatechange : Proc(IHTMLLinkElement*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLLinkElement*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLLinkElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLLinkElement*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLLinkElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLLinkElement*, VARIANT*, HRESULT)
    get_style_sheet : Proc(IHTMLLinkElement*, IHTMLStyleSheet*, HRESULT)
    put_disabled : Proc(IHTMLLinkElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLLinkElement*, Int16*, HRESULT)
    put_media : Proc(IHTMLLinkElement*, UInt8*, HRESULT)
    get_media : Proc(IHTMLLinkElement*, UInt8**, HRESULT)
  end

  IHTMLLinkElement_GUID = "3050f205-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLinkElement = LibC::GUID.new(0x3050f205_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLinkElement
    lpVtbl : IHTMLLinkElementVTbl*
  end

  struct IHTMLLinkElement2VTbl
    query_interface : Proc(IHTMLLinkElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLinkElement2*, UInt32)
    release : Proc(IHTMLLinkElement2*, UInt32)
    get_type_info_count : Proc(IHTMLLinkElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLinkElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLinkElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLinkElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_target : Proc(IHTMLLinkElement2*, UInt8*, HRESULT)
    get_target : Proc(IHTMLLinkElement2*, UInt8**, HRESULT)
  end

  IHTMLLinkElement2_GUID = "3050f4e5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLinkElement2 = LibC::GUID.new(0x3050f4e5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLinkElement2
    lpVtbl : IHTMLLinkElement2VTbl*
  end

  struct IHTMLLinkElement3VTbl
    query_interface : Proc(IHTMLLinkElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLinkElement3*, UInt32)
    release : Proc(IHTMLLinkElement3*, UInt32)
    get_type_info_count : Proc(IHTMLLinkElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLinkElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLinkElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLinkElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_charset : Proc(IHTMLLinkElement3*, UInt8*, HRESULT)
    get_charset : Proc(IHTMLLinkElement3*, UInt8**, HRESULT)
    put_hreflang : Proc(IHTMLLinkElement3*, UInt8*, HRESULT)
    get_hreflang : Proc(IHTMLLinkElement3*, UInt8**, HRESULT)
  end

  IHTMLLinkElement3_GUID = "3050f81e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLinkElement3 = LibC::GUID.new(0x3050f81e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLinkElement3
    lpVtbl : IHTMLLinkElement3VTbl*
  end

  struct IHTMLLinkElement4VTbl
    query_interface : Proc(IHTMLLinkElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLinkElement4*, UInt32)
    release : Proc(IHTMLLinkElement4*, UInt32)
    get_type_info_count : Proc(IHTMLLinkElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLinkElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLinkElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLinkElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLLinkElement4*, UInt8*, HRESULT)
    get_href : Proc(IHTMLLinkElement4*, UInt8**, HRESULT)
  end

  IHTMLLinkElement4_GUID = "3051043a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLinkElement4 = LibC::GUID.new(0x3051043a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLinkElement4
    lpVtbl : IHTMLLinkElement4VTbl*
  end

  struct IHTMLLinkElement5VTbl
    query_interface : Proc(IHTMLLinkElement5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLinkElement5*, UInt32)
    release : Proc(IHTMLLinkElement5*, UInt32)
    get_type_info_count : Proc(IHTMLLinkElement5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLinkElement5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLinkElement5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLinkElement5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_sheet : Proc(IHTMLLinkElement5*, IHTMLStyleSheet*, HRESULT)
  end

  IHTMLLinkElement5_GUID = "30510726-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLinkElement5 = LibC::GUID.new(0x30510726_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLinkElement5
    lpVtbl : IHTMLLinkElement5VTbl*
  end

  struct DispHTMLLinkElementVTbl
    query_interface : Proc(DispHTMLLinkElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLLinkElement*, UInt32)
    release : Proc(DispHTMLLinkElement*, UInt32)
    get_type_info_count : Proc(DispHTMLLinkElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLLinkElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLLinkElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLLinkElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLLinkElement_GUID = "3050f524-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLLinkElement = LibC::GUID.new(0x3050f524_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLLinkElement
    lpVtbl : DispHTMLLinkElementVTbl*
  end

  struct IHTMLTxtRangeVTbl
    query_interface : Proc(IHTMLTxtRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTxtRange*, UInt32)
    release : Proc(IHTMLTxtRange*, UInt32)
    get_type_info_count : Proc(IHTMLTxtRange*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTxtRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTxtRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTxtRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_html_text : Proc(IHTMLTxtRange*, UInt8**, HRESULT)
    put_text : Proc(IHTMLTxtRange*, UInt8*, HRESULT)
    get_text : Proc(IHTMLTxtRange*, UInt8**, HRESULT)
    parent_element : Proc(IHTMLTxtRange*, IHTMLElement*, HRESULT)
    duplicate : Proc(IHTMLTxtRange*, IHTMLTxtRange*, HRESULT)
    in_range : Proc(IHTMLTxtRange*, IHTMLTxtRange, Int16*, HRESULT)
    is_equal : Proc(IHTMLTxtRange*, IHTMLTxtRange, Int16*, HRESULT)
    scroll_into_view : Proc(IHTMLTxtRange*, Int16, HRESULT)
    collapse : Proc(IHTMLTxtRange*, Int16, HRESULT)
    expand : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    move : Proc(IHTMLTxtRange*, UInt8*, Int32, Int32*, HRESULT)
    move_start : Proc(IHTMLTxtRange*, UInt8*, Int32, Int32*, HRESULT)
    move_end : Proc(IHTMLTxtRange*, UInt8*, Int32, Int32*, HRESULT)
    select : Proc(IHTMLTxtRange*, HRESULT)
    paste_html : Proc(IHTMLTxtRange*, UInt8*, HRESULT)
    move_to_element_text : Proc(IHTMLTxtRange*, IHTMLElement, HRESULT)
    set_end_point : Proc(IHTMLTxtRange*, UInt8*, IHTMLTxtRange, HRESULT)
    compare_end_points : Proc(IHTMLTxtRange*, UInt8*, IHTMLTxtRange, Int32*, HRESULT)
    find_text : Proc(IHTMLTxtRange*, UInt8*, Int32, Int32, Int16*, HRESULT)
    move_to_point : Proc(IHTMLTxtRange*, Int32, Int32, HRESULT)
    get_bookmark : Proc(IHTMLTxtRange*, UInt8**, HRESULT)
    move_to_bookmark : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    query_command_supported : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    query_command_enabled : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    query_command_state : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    query_command_indeterm : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
    query_command_text : Proc(IHTMLTxtRange*, UInt8*, UInt8**, HRESULT)
    query_command_value : Proc(IHTMLTxtRange*, UInt8*, VARIANT*, HRESULT)
    exec_command : Proc(IHTMLTxtRange*, UInt8*, Int16, VARIANT, Int16*, HRESULT)
    exec_command_show_help : Proc(IHTMLTxtRange*, UInt8*, Int16*, HRESULT)
  end

  IHTMLTxtRange_GUID = "3050f220-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTxtRange = LibC::GUID.new(0x3050f220_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTxtRange
    lpVtbl : IHTMLTxtRangeVTbl*
  end

  struct IHTMLTextRangeMetricsVTbl
    query_interface : Proc(IHTMLTextRangeMetrics*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextRangeMetrics*, UInt32)
    release : Proc(IHTMLTextRangeMetrics*, UInt32)
    get_type_info_count : Proc(IHTMLTextRangeMetrics*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextRangeMetrics*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextRangeMetrics*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextRangeMetrics*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_offset_top : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
    get_offset_left : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
    get_bounding_top : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
    get_bounding_left : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
    get_bounding_width : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
    get_bounding_height : Proc(IHTMLTextRangeMetrics*, Int32*, HRESULT)
  end

  IHTMLTextRangeMetrics_GUID = "3050f40b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextRangeMetrics = LibC::GUID.new(0x3050f40b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextRangeMetrics
    lpVtbl : IHTMLTextRangeMetricsVTbl*
  end

  struct IHTMLTextRangeMetrics2VTbl
    query_interface : Proc(IHTMLTextRangeMetrics2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextRangeMetrics2*, UInt32)
    release : Proc(IHTMLTextRangeMetrics2*, UInt32)
    get_type_info_count : Proc(IHTMLTextRangeMetrics2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextRangeMetrics2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextRangeMetrics2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextRangeMetrics2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_client_rects : Proc(IHTMLTextRangeMetrics2*, IHTMLRectCollection*, HRESULT)
    get_bounding_client_rect : Proc(IHTMLTextRangeMetrics2*, IHTMLRect*, HRESULT)
  end

  IHTMLTextRangeMetrics2_GUID = "3050f4a6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextRangeMetrics2 = LibC::GUID.new(0x3050f4a6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextRangeMetrics2
    lpVtbl : IHTMLTextRangeMetrics2VTbl*
  end

  struct IHTMLTxtRangeCollectionVTbl
    query_interface : Proc(IHTMLTxtRangeCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTxtRangeCollection*, UInt32)
    release : Proc(IHTMLTxtRangeCollection*, UInt32)
    get_type_info_count : Proc(IHTMLTxtRangeCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTxtRangeCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTxtRangeCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTxtRangeCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLTxtRangeCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLTxtRangeCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLTxtRangeCollection*, VARIANT*, VARIANT*, HRESULT)
  end

  IHTMLTxtRangeCollection_GUID = "3050f7ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTxtRangeCollection = LibC::GUID.new(0x3050f7ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTxtRangeCollection
    lpVtbl : IHTMLTxtRangeCollectionVTbl*
  end

  struct IHTMLDOMRangeVTbl
    query_interface : Proc(IHTMLDOMRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMRange*, UInt32)
    release : Proc(IHTMLDOMRange*, UInt32)
    get_type_info_count : Proc(IHTMLDOMRange*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_container : Proc(IHTMLDOMRange*, IHTMLDOMNode*, HRESULT)
    get_start_offset : Proc(IHTMLDOMRange*, Int32*, HRESULT)
    get_end_container : Proc(IHTMLDOMRange*, IHTMLDOMNode*, HRESULT)
    get_end_offset : Proc(IHTMLDOMRange*, Int32*, HRESULT)
    get_collapsed : Proc(IHTMLDOMRange*, Int16*, HRESULT)
    get_common_ancestor_container : Proc(IHTMLDOMRange*, IHTMLDOMNode*, HRESULT)
    set_start : Proc(IHTMLDOMRange*, IDispatch, Int32, HRESULT)
    set_end : Proc(IHTMLDOMRange*, IDispatch, Int32, HRESULT)
    set_start_before : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    set_start_after : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    set_end_before : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    set_end_after : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    collapse : Proc(IHTMLDOMRange*, Int16, HRESULT)
    select_node : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    select_node_contents : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    compare_boundary_points : Proc(IHTMLDOMRange*, Int16, IDispatch, Int32*, HRESULT)
    delete_contents : Proc(IHTMLDOMRange*, HRESULT)
    extract_contents : Proc(IHTMLDOMRange*, IDispatch*, HRESULT)
    clone_contents : Proc(IHTMLDOMRange*, IDispatch*, HRESULT)
    insert_node : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    surround_contents : Proc(IHTMLDOMRange*, IDispatch, HRESULT)
    clone_range : Proc(IHTMLDOMRange*, IHTMLDOMRange*, HRESULT)
    to_string : Proc(IHTMLDOMRange*, UInt8**, HRESULT)
    detach : Proc(IHTMLDOMRange*, HRESULT)
    get_client_rects : Proc(IHTMLDOMRange*, IHTMLRectCollection*, HRESULT)
    get_bounding_client_rect : Proc(IHTMLDOMRange*, IHTMLRect*, HRESULT)
  end

  IHTMLDOMRange_GUID = "305104ae-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMRange = LibC::GUID.new(0x305104ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMRange
    lpVtbl : IHTMLDOMRangeVTbl*
  end

  struct DispHTMLDOMRangeVTbl
    query_interface : Proc(DispHTMLDOMRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDOMRange*, UInt32)
    release : Proc(DispHTMLDOMRange*, UInt32)
    get_type_info_count : Proc(DispHTMLDOMRange*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDOMRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDOMRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDOMRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDOMRange_GUID = "3050f5a3-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDOMRange = LibC::GUID.new(0x3050f5a3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDOMRange
    lpVtbl : DispHTMLDOMRangeVTbl*
  end

  struct HTMLFormElementEvents2VTbl
    query_interface : Proc(HTMLFormElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLFormElementEvents2*, UInt32)
    release : Proc(HTMLFormElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLFormElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLFormElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLFormElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLFormElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLFormElementEvents2_GUID = "3050f614-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLFormElementEvents2 = LibC::GUID.new(0x3050f614_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLFormElementEvents2
    lpVtbl : HTMLFormElementEvents2VTbl*
  end

  struct HTMLFormElementEventsVTbl
    query_interface : Proc(HTMLFormElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLFormElementEvents*, UInt32)
    release : Proc(HTMLFormElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLFormElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLFormElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLFormElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLFormElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLFormElementEvents_GUID = "3050f364-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLFormElementEvents = LibC::GUID.new(0x3050f364_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLFormElementEvents
    lpVtbl : HTMLFormElementEventsVTbl*
  end

  struct IHTMLFormElementVTbl
    query_interface : Proc(IHTMLFormElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFormElement*, UInt32)
    release : Proc(IHTMLFormElement*, UInt32)
    get_type_info_count : Proc(IHTMLFormElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFormElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFormElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFormElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_action : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_action : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    put_dir : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_dir : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    put_encoding : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_encoding : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    put_method : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_method : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    get_elements : Proc(IHTMLFormElement*, IDispatch*, HRESULT)
    put_target : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_target : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLFormElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLFormElement*, UInt8**, HRESULT)
    put_onsubmit : Proc(IHTMLFormElement*, VARIANT, HRESULT)
    get_onsubmit : Proc(IHTMLFormElement*, VARIANT*, HRESULT)
    put_onreset : Proc(IHTMLFormElement*, VARIANT, HRESULT)
    get_onreset : Proc(IHTMLFormElement*, VARIANT*, HRESULT)
    submit : Proc(IHTMLFormElement*, HRESULT)
    reset : Proc(IHTMLFormElement*, HRESULT)
    put_length : Proc(IHTMLFormElement*, Int32, HRESULT)
    get_length : Proc(IHTMLFormElement*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLFormElement*, IUnknown*, HRESULT)
    item : Proc(IHTMLFormElement*, VARIANT, VARIANT, IDispatch*, HRESULT)
    tags : Proc(IHTMLFormElement*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLFormElement_GUID = "3050f1f7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFormElement = LibC::GUID.new(0x3050f1f7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFormElement
    lpVtbl : IHTMLFormElementVTbl*
  end

  struct IHTMLFormElement2VTbl
    query_interface : Proc(IHTMLFormElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFormElement2*, UInt32)
    release : Proc(IHTMLFormElement2*, UInt32)
    get_type_info_count : Proc(IHTMLFormElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFormElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFormElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFormElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_accept_charset : Proc(IHTMLFormElement2*, UInt8*, HRESULT)
    get_accept_charset : Proc(IHTMLFormElement2*, UInt8**, HRESULT)
    urns : Proc(IHTMLFormElement2*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLFormElement2_GUID = "3050f4f6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFormElement2 = LibC::GUID.new(0x3050f4f6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFormElement2
    lpVtbl : IHTMLFormElement2VTbl*
  end

  struct IHTMLFormElement3VTbl
    query_interface : Proc(IHTMLFormElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFormElement3*, UInt32)
    release : Proc(IHTMLFormElement3*, UInt32)
    get_type_info_count : Proc(IHTMLFormElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFormElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFormElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFormElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    named_item : Proc(IHTMLFormElement3*, UInt8*, IDispatch*, HRESULT)
  end

  IHTMLFormElement3_GUID = "3050f836-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFormElement3 = LibC::GUID.new(0x3050f836_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFormElement3
    lpVtbl : IHTMLFormElement3VTbl*
  end

  struct IHTMLSubmitDataVTbl
    query_interface : Proc(IHTMLSubmitData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSubmitData*, UInt32)
    release : Proc(IHTMLSubmitData*, UInt32)
    get_type_info_count : Proc(IHTMLSubmitData*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSubmitData*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSubmitData*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSubmitData*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    append_name_value_pair : Proc(IHTMLSubmitData*, UInt8*, UInt8*, HRESULT)
    append_name_file_pair : Proc(IHTMLSubmitData*, UInt8*, UInt8*, HRESULT)
    append_item_separator : Proc(IHTMLSubmitData*, HRESULT)
  end

  IHTMLSubmitData_GUID = "3050f645-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSubmitData = LibC::GUID.new(0x3050f645_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSubmitData
    lpVtbl : IHTMLSubmitDataVTbl*
  end

  struct IHTMLFormElement4VTbl
    query_interface : Proc(IHTMLFormElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFormElement4*, UInt32)
    release : Proc(IHTMLFormElement4*, UInt32)
    get_type_info_count : Proc(IHTMLFormElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFormElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFormElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFormElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_action : Proc(IHTMLFormElement4*, UInt8*, HRESULT)
    get_action : Proc(IHTMLFormElement4*, UInt8**, HRESULT)
  end

  IHTMLFormElement4_GUID = "3051042c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFormElement4 = LibC::GUID.new(0x3051042c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFormElement4
    lpVtbl : IHTMLFormElement4VTbl*
  end

  struct DispHTMLFormElementVTbl
    query_interface : Proc(DispHTMLFormElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFormElement*, UInt32)
    release : Proc(DispHTMLFormElement*, UInt32)
    get_type_info_count : Proc(DispHTMLFormElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFormElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFormElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFormElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFormElement_GUID = "3050f510-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFormElement = LibC::GUID.new(0x3050f510_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFormElement
    lpVtbl : DispHTMLFormElementVTbl*
  end

  struct HTMLControlElementEvents2VTbl
    query_interface : Proc(HTMLControlElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLControlElementEvents2*, UInt32)
    release : Proc(HTMLControlElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLControlElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLControlElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLControlElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLControlElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLControlElementEvents2_GUID = "3050f612-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLControlElementEvents2 = LibC::GUID.new(0x3050f612_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLControlElementEvents2
    lpVtbl : HTMLControlElementEvents2VTbl*
  end

  struct HTMLControlElementEventsVTbl
    query_interface : Proc(HTMLControlElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLControlElementEvents*, UInt32)
    release : Proc(HTMLControlElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLControlElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLControlElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLControlElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLControlElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLControlElementEvents_GUID = "3050f4ea-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLControlElementEvents = LibC::GUID.new(0x3050f4ea_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLControlElementEvents
    lpVtbl : HTMLControlElementEventsVTbl*
  end

  struct IHTMLControlElementVTbl
    query_interface : Proc(IHTMLControlElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLControlElement*, UInt32)
    release : Proc(IHTMLControlElement*, UInt32)
    get_type_info_count : Proc(IHTMLControlElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLControlElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLControlElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLControlElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_tab_index : Proc(IHTMLControlElement*, Int16, HRESULT)
    get_tab_index : Proc(IHTMLControlElement*, Int16*, HRESULT)
    focus : Proc(IHTMLControlElement*, HRESULT)
    put_access_key : Proc(IHTMLControlElement*, UInt8*, HRESULT)
    get_access_key : Proc(IHTMLControlElement*, UInt8**, HRESULT)
    put_onblur : Proc(IHTMLControlElement*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLControlElement*, VARIANT*, HRESULT)
    put_onfocus : Proc(IHTMLControlElement*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLControlElement*, VARIANT*, HRESULT)
    put_onresize : Proc(IHTMLControlElement*, VARIANT, HRESULT)
    get_onresize : Proc(IHTMLControlElement*, VARIANT*, HRESULT)
    blur : Proc(IHTMLControlElement*, HRESULT)
    add_filter : Proc(IHTMLControlElement*, IUnknown, HRESULT)
    remove_filter : Proc(IHTMLControlElement*, IUnknown, HRESULT)
    get_client_height : Proc(IHTMLControlElement*, Int32*, HRESULT)
    get_client_width : Proc(IHTMLControlElement*, Int32*, HRESULT)
    get_client_top : Proc(IHTMLControlElement*, Int32*, HRESULT)
    get_client_left : Proc(IHTMLControlElement*, Int32*, HRESULT)
  end

  IHTMLControlElement_GUID = "3050f4e9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLControlElement = LibC::GUID.new(0x3050f4e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLControlElement
    lpVtbl : IHTMLControlElementVTbl*
  end

  struct IHTMLTextElementVTbl
    query_interface : Proc(IHTMLTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextElement*, UInt32)
    release : Proc(IHTMLTextElement*, UInt32)
    get_type_info_count : Proc(IHTMLTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLTextElement_GUID = "3050f218-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextElement = LibC::GUID.new(0x3050f218_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextElement
    lpVtbl : IHTMLTextElementVTbl*
  end

  struct DispHTMLTextElementVTbl
    query_interface : Proc(DispHTMLTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTextElement*, UInt32)
    release : Proc(DispHTMLTextElement*, UInt32)
    get_type_info_count : Proc(DispHTMLTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTextElement_GUID = "3050f537-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTextElement = LibC::GUID.new(0x3050f537_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTextElement
    lpVtbl : DispHTMLTextElementVTbl*
  end

  struct HTMLTextContainerEvents2VTbl
    query_interface : Proc(HTMLTextContainerEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLTextContainerEvents2*, UInt32)
    release : Proc(HTMLTextContainerEvents2*, UInt32)
    get_type_info_count : Proc(HTMLTextContainerEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLTextContainerEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLTextContainerEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLTextContainerEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLTextContainerEvents2_GUID = "3050f624-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLTextContainerEvents2 = LibC::GUID.new(0x3050f624_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLTextContainerEvents2
    lpVtbl : HTMLTextContainerEvents2VTbl*
  end

  struct HTMLTextContainerEventsVTbl
    query_interface : Proc(HTMLTextContainerEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLTextContainerEvents*, UInt32)
    release : Proc(HTMLTextContainerEvents*, UInt32)
    get_type_info_count : Proc(HTMLTextContainerEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLTextContainerEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLTextContainerEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLTextContainerEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLTextContainerEvents_GUID = "1ff6aa72-5842-11cf-a707-00aa00c0098d"
  IID_HTMLTextContainerEvents = LibC::GUID.new(0x1ff6aa72_u32, 0x5842_u16, 0x11cf_u16, StaticArray[0xa7_u8, 0x7_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xc0_u8, 0x9_u8, 0x8d_u8])
  struct HTMLTextContainerEvents
    lpVtbl : HTMLTextContainerEventsVTbl*
  end

  struct IHTMLTextContainerVTbl
    query_interface : Proc(IHTMLTextContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextContainer*, UInt32)
    release : Proc(IHTMLTextContainer*, UInt32)
    get_type_info_count : Proc(IHTMLTextContainer*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextContainer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextContainer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextContainer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_control_range : Proc(IHTMLTextContainer*, IDispatch*, HRESULT)
    get_scroll_height : Proc(IHTMLTextContainer*, Int32*, HRESULT)
    get_scroll_width : Proc(IHTMLTextContainer*, Int32*, HRESULT)
    put_scroll_top : Proc(IHTMLTextContainer*, Int32, HRESULT)
    get_scroll_top : Proc(IHTMLTextContainer*, Int32*, HRESULT)
    put_scroll_left : Proc(IHTMLTextContainer*, Int32, HRESULT)
    get_scroll_left : Proc(IHTMLTextContainer*, Int32*, HRESULT)
    put_onscroll : Proc(IHTMLTextContainer*, VARIANT, HRESULT)
    get_onscroll : Proc(IHTMLTextContainer*, VARIANT*, HRESULT)
  end

  IHTMLTextContainer_GUID = "3050f230-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextContainer = LibC::GUID.new(0x3050f230_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextContainer
    lpVtbl : IHTMLTextContainerVTbl*
  end

  struct IHTMLControlRangeVTbl
    query_interface : Proc(IHTMLControlRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLControlRange*, UInt32)
    release : Proc(IHTMLControlRange*, UInt32)
    get_type_info_count : Proc(IHTMLControlRange*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLControlRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLControlRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLControlRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    select : Proc(IHTMLControlRange*, HRESULT)
    add : Proc(IHTMLControlRange*, IHTMLControlElement, HRESULT)
    remove : Proc(IHTMLControlRange*, Int32, HRESULT)
    item : Proc(IHTMLControlRange*, Int32, IHTMLElement*, HRESULT)
    scroll_into_view : Proc(IHTMLControlRange*, VARIANT, HRESULT)
    query_command_supported : Proc(IHTMLControlRange*, UInt8*, Int16*, HRESULT)
    query_command_enabled : Proc(IHTMLControlRange*, UInt8*, Int16*, HRESULT)
    query_command_state : Proc(IHTMLControlRange*, UInt8*, Int16*, HRESULT)
    query_command_indeterm : Proc(IHTMLControlRange*, UInt8*, Int16*, HRESULT)
    query_command_text : Proc(IHTMLControlRange*, UInt8*, UInt8**, HRESULT)
    query_command_value : Proc(IHTMLControlRange*, UInt8*, VARIANT*, HRESULT)
    exec_command : Proc(IHTMLControlRange*, UInt8*, Int16, VARIANT, Int16*, HRESULT)
    exec_command_show_help : Proc(IHTMLControlRange*, UInt8*, Int16*, HRESULT)
    common_parent_element : Proc(IHTMLControlRange*, IHTMLElement*, HRESULT)
    get_length : Proc(IHTMLControlRange*, Int32*, HRESULT)
  end

  IHTMLControlRange_GUID = "3050f29c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLControlRange = LibC::GUID.new(0x3050f29c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLControlRange
    lpVtbl : IHTMLControlRangeVTbl*
  end

  struct IHTMLControlRange2VTbl
    query_interface : Proc(IHTMLControlRange2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLControlRange2*, UInt32)
    release : Proc(IHTMLControlRange2*, UInt32)
    get_type_info_count : Proc(IHTMLControlRange2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLControlRange2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLControlRange2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLControlRange2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add_element : Proc(IHTMLControlRange2*, IHTMLElement, HRESULT)
  end

  IHTMLControlRange2_GUID = "3050f65e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLControlRange2 = LibC::GUID.new(0x3050f65e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLControlRange2
    lpVtbl : IHTMLControlRange2VTbl*
  end

  struct HTMLImgEvents2VTbl
    query_interface : Proc(HTMLImgEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLImgEvents2*, UInt32)
    release : Proc(HTMLImgEvents2*, UInt32)
    get_type_info_count : Proc(HTMLImgEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLImgEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLImgEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLImgEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLImgEvents2_GUID = "3050f616-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLImgEvents2 = LibC::GUID.new(0x3050f616_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLImgEvents2
    lpVtbl : HTMLImgEvents2VTbl*
  end

  struct HTMLImgEventsVTbl
    query_interface : Proc(HTMLImgEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLImgEvents*, UInt32)
    release : Proc(HTMLImgEvents*, UInt32)
    get_type_info_count : Proc(HTMLImgEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLImgEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLImgEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLImgEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLImgEvents_GUID = "3050f25b-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLImgEvents = LibC::GUID.new(0x3050f25b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLImgEvents
    lpVtbl : HTMLImgEventsVTbl*
  end

  struct IHTMLImgElementVTbl
    query_interface : Proc(IHTMLImgElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLImgElement*, UInt32)
    release : Proc(IHTMLImgElement*, UInt32)
    get_type_info_count : Proc(IHTMLImgElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLImgElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLImgElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLImgElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_is_map : Proc(IHTMLImgElement*, Int16, HRESULT)
    get_is_map : Proc(IHTMLImgElement*, Int16*, HRESULT)
    put_use_map : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_use_map : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_mime_type : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_file_size : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_file_created_date : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_file_modified_date : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_file_updated_date : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_protocol : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_href : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_name_prop : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_border : Proc(IHTMLImgElement*, VARIANT, HRESULT)
    get_border : Proc(IHTMLImgElement*, VARIANT*, HRESULT)
    put_vspace : Proc(IHTMLImgElement*, Int32, HRESULT)
    get_vspace : Proc(IHTMLImgElement*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLImgElement*, Int32, HRESULT)
    get_hspace : Proc(IHTMLImgElement*, Int32*, HRESULT)
    put_alt : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_src : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_lowsrc : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_lowsrc : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_vrml : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_vrml : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_dynsrc : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_dynsrc : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_ready_state : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    get_complete : Proc(IHTMLImgElement*, Int16*, HRESULT)
    put_loop : Proc(IHTMLImgElement*, VARIANT, HRESULT)
    get_loop : Proc(IHTMLImgElement*, VARIANT*, HRESULT)
    put_align : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_onload : Proc(IHTMLImgElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLImgElement*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLImgElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLImgElement*, VARIANT*, HRESULT)
    put_onabort : Proc(IHTMLImgElement*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLImgElement*, VARIANT*, HRESULT)
    put_name : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLImgElement*, UInt8**, HRESULT)
    put_width : Proc(IHTMLImgElement*, Int32, HRESULT)
    get_width : Proc(IHTMLImgElement*, Int32*, HRESULT)
    put_height : Proc(IHTMLImgElement*, Int32, HRESULT)
    get_height : Proc(IHTMLImgElement*, Int32*, HRESULT)
    put_start : Proc(IHTMLImgElement*, UInt8*, HRESULT)
    get_start : Proc(IHTMLImgElement*, UInt8**, HRESULT)
  end

  IHTMLImgElement_GUID = "3050f240-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLImgElement = LibC::GUID.new(0x3050f240_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLImgElement
    lpVtbl : IHTMLImgElementVTbl*
  end

  struct IHTMLImgElement2VTbl
    query_interface : Proc(IHTMLImgElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLImgElement2*, UInt32)
    release : Proc(IHTMLImgElement2*, UInt32)
    get_type_info_count : Proc(IHTMLImgElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLImgElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLImgElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLImgElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_long_desc : Proc(IHTMLImgElement2*, UInt8*, HRESULT)
    get_long_desc : Proc(IHTMLImgElement2*, UInt8**, HRESULT)
  end

  IHTMLImgElement2_GUID = "3050f826-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLImgElement2 = LibC::GUID.new(0x3050f826_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLImgElement2
    lpVtbl : IHTMLImgElement2VTbl*
  end

  struct IHTMLImgElement3VTbl
    query_interface : Proc(IHTMLImgElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLImgElement3*, UInt32)
    release : Proc(IHTMLImgElement3*, UInt32)
    get_type_info_count : Proc(IHTMLImgElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLImgElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLImgElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLImgElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_long_desc : Proc(IHTMLImgElement3*, UInt8*, HRESULT)
    get_long_desc : Proc(IHTMLImgElement3*, UInt8**, HRESULT)
    put_vrml : Proc(IHTMLImgElement3*, UInt8*, HRESULT)
    get_vrml : Proc(IHTMLImgElement3*, UInt8**, HRESULT)
    put_lowsrc : Proc(IHTMLImgElement3*, UInt8*, HRESULT)
    get_lowsrc : Proc(IHTMLImgElement3*, UInt8**, HRESULT)
    put_dynsrc : Proc(IHTMLImgElement3*, UInt8*, HRESULT)
    get_dynsrc : Proc(IHTMLImgElement3*, UInt8**, HRESULT)
  end

  IHTMLImgElement3_GUID = "30510434-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLImgElement3 = LibC::GUID.new(0x30510434_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLImgElement3
    lpVtbl : IHTMLImgElement3VTbl*
  end

  struct IHTMLImgElement4VTbl
    query_interface : Proc(IHTMLImgElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLImgElement4*, UInt32)
    release : Proc(IHTMLImgElement4*, UInt32)
    get_type_info_count : Proc(IHTMLImgElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLImgElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLImgElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLImgElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_natural_width : Proc(IHTMLImgElement4*, Int32*, HRESULT)
    get_natural_height : Proc(IHTMLImgElement4*, Int32*, HRESULT)
  end

  IHTMLImgElement4_GUID = "305107f6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLImgElement4 = LibC::GUID.new(0x305107f6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLImgElement4
    lpVtbl : IHTMLImgElement4VTbl*
  end

  struct IHTMLMSImgElementVTbl
    query_interface : Proc(IHTMLMSImgElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMSImgElement*, UInt32)
    release : Proc(IHTMLMSImgElement*, UInt32)
    get_type_info_count : Proc(IHTMLMSImgElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMSImgElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMSImgElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMSImgElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ms_play_to_disabled : Proc(IHTMLMSImgElement*, Int16, HRESULT)
    get_ms_play_to_disabled : Proc(IHTMLMSImgElement*, Int16*, HRESULT)
    put_ms_play_to_primary : Proc(IHTMLMSImgElement*, Int16, HRESULT)
    get_ms_play_to_primary : Proc(IHTMLMSImgElement*, Int16*, HRESULT)
  end

  IHTMLMSImgElement_GUID = "30510793-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMSImgElement = LibC::GUID.new(0x30510793_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMSImgElement
    lpVtbl : IHTMLMSImgElementVTbl*
  end

  struct IHTMLImageElementFactoryVTbl
    query_interface : Proc(IHTMLImageElementFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLImageElementFactory*, UInt32)
    release : Proc(IHTMLImageElementFactory*, UInt32)
    get_type_info_count : Proc(IHTMLImageElementFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLImageElementFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLImageElementFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLImageElementFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IHTMLImageElementFactory*, VARIANT, VARIANT, IHTMLImgElement*, HRESULT)
  end

  IHTMLImageElementFactory_GUID = "3050f38e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLImageElementFactory = LibC::GUID.new(0x3050f38e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLImageElementFactory
    lpVtbl : IHTMLImageElementFactoryVTbl*
  end

  struct DispHTMLImgVTbl
    query_interface : Proc(DispHTMLImg*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLImg*, UInt32)
    release : Proc(DispHTMLImg*, UInt32)
    get_type_info_count : Proc(DispHTMLImg*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLImg*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLImg*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLImg*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLImg_GUID = "3050f51c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLImg = LibC::GUID.new(0x3050f51c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLImg
    lpVtbl : DispHTMLImgVTbl*
  end

  struct IHTMLBodyElementVTbl
    query_interface : Proc(IHTMLBodyElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBodyElement*, UInt32)
    release : Proc(IHTMLBodyElement*, UInt32)
    get_type_info_count : Proc(IHTMLBodyElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBodyElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBodyElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBodyElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_background : Proc(IHTMLBodyElement*, UInt8*, HRESULT)
    get_background : Proc(IHTMLBodyElement*, UInt8**, HRESULT)
    put_bg_properties : Proc(IHTMLBodyElement*, UInt8*, HRESULT)
    get_bg_properties : Proc(IHTMLBodyElement*, UInt8**, HRESULT)
    put_left_margin : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_left_margin : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_top_margin : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_top_margin : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_right_margin : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_right_margin : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_bottom_margin : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_bottom_margin : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_no_wrap : Proc(IHTMLBodyElement*, Int16, HRESULT)
    get_no_wrap : Proc(IHTMLBodyElement*, Int16*, HRESULT)
    put_bg_color : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_text : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_text : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_link : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_link : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_v_link : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_v_link : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_a_link : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_a_link : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_onunload : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_onunload : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_scroll : Proc(IHTMLBodyElement*, UInt8*, HRESULT)
    get_scroll : Proc(IHTMLBodyElement*, UInt8**, HRESULT)
    put_onselect : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    put_onbeforeunload : Proc(IHTMLBodyElement*, VARIANT, HRESULT)
    get_onbeforeunload : Proc(IHTMLBodyElement*, VARIANT*, HRESULT)
    create_text_range : Proc(IHTMLBodyElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLBodyElement_GUID = "3050f1d8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBodyElement = LibC::GUID.new(0x3050f1d8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBodyElement
    lpVtbl : IHTMLBodyElementVTbl*
  end

  struct IHTMLBodyElement2VTbl
    query_interface : Proc(IHTMLBodyElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBodyElement2*, UInt32)
    release : Proc(IHTMLBodyElement2*, UInt32)
    get_type_info_count : Proc(IHTMLBodyElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBodyElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBodyElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBodyElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onbeforeprint : Proc(IHTMLBodyElement2*, VARIANT, HRESULT)
    get_onbeforeprint : Proc(IHTMLBodyElement2*, VARIANT*, HRESULT)
    put_onafterprint : Proc(IHTMLBodyElement2*, VARIANT, HRESULT)
    get_onafterprint : Proc(IHTMLBodyElement2*, VARIANT*, HRESULT)
  end

  IHTMLBodyElement2_GUID = "3050f5c5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBodyElement2 = LibC::GUID.new(0x3050f5c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBodyElement2
    lpVtbl : IHTMLBodyElement2VTbl*
  end

  struct IHTMLBodyElement3VTbl
    query_interface : Proc(IHTMLBodyElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBodyElement3*, UInt32)
    release : Proc(IHTMLBodyElement3*, UInt32)
    get_type_info_count : Proc(IHTMLBodyElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBodyElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBodyElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBodyElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_background : Proc(IHTMLBodyElement3*, UInt8*, HRESULT)
    get_background : Proc(IHTMLBodyElement3*, UInt8**, HRESULT)
    put_ononline : Proc(IHTMLBodyElement3*, VARIANT, HRESULT)
    get_ononline : Proc(IHTMLBodyElement3*, VARIANT*, HRESULT)
    put_onoffline : Proc(IHTMLBodyElement3*, VARIANT, HRESULT)
    get_onoffline : Proc(IHTMLBodyElement3*, VARIANT*, HRESULT)
    put_onhashchange : Proc(IHTMLBodyElement3*, VARIANT, HRESULT)
    get_onhashchange : Proc(IHTMLBodyElement3*, VARIANT*, HRESULT)
  end

  IHTMLBodyElement3_GUID = "30510422-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBodyElement3 = LibC::GUID.new(0x30510422_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBodyElement3
    lpVtbl : IHTMLBodyElement3VTbl*
  end

  struct IHTMLBodyElement4VTbl
    query_interface : Proc(IHTMLBodyElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBodyElement4*, UInt32)
    release : Proc(IHTMLBodyElement4*, UInt32)
    get_type_info_count : Proc(IHTMLBodyElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBodyElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBodyElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBodyElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmessage : Proc(IHTMLBodyElement4*, VARIANT, HRESULT)
    get_onmessage : Proc(IHTMLBodyElement4*, VARIANT*, HRESULT)
    put_onstorage : Proc(IHTMLBodyElement4*, VARIANT, HRESULT)
    get_onstorage : Proc(IHTMLBodyElement4*, VARIANT*, HRESULT)
  end

  IHTMLBodyElement4_GUID = "30510795-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBodyElement4 = LibC::GUID.new(0x30510795_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBodyElement4
    lpVtbl : IHTMLBodyElement4VTbl*
  end

  struct IHTMLBodyElement5VTbl
    query_interface : Proc(IHTMLBodyElement5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBodyElement5*, UInt32)
    release : Proc(IHTMLBodyElement5*, UInt32)
    get_type_info_count : Proc(IHTMLBodyElement5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBodyElement5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBodyElement5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBodyElement5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onpopstate : Proc(IHTMLBodyElement5*, VARIANT, HRESULT)
    get_onpopstate : Proc(IHTMLBodyElement5*, VARIANT*, HRESULT)
  end

  IHTMLBodyElement5_GUID = "30510822-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBodyElement5 = LibC::GUID.new(0x30510822_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBodyElement5
    lpVtbl : IHTMLBodyElement5VTbl*
  end

  struct DispHTMLBodyVTbl
    query_interface : Proc(DispHTMLBody*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBody*, UInt32)
    release : Proc(DispHTMLBody*, UInt32)
    get_type_info_count : Proc(DispHTMLBody*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBody*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBody*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBody*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBody_GUID = "3050f507-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBody = LibC::GUID.new(0x3050f507_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBody
    lpVtbl : DispHTMLBodyVTbl*
  end

  struct IHTMLFontElementVTbl
    query_interface : Proc(IHTMLFontElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFontElement*, UInt32)
    release : Proc(IHTMLFontElement*, UInt32)
    get_type_info_count : Proc(IHTMLFontElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFontElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFontElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFontElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_color : Proc(IHTMLFontElement*, VARIANT, HRESULT)
    get_color : Proc(IHTMLFontElement*, VARIANT*, HRESULT)
    put_face : Proc(IHTMLFontElement*, UInt8*, HRESULT)
    get_face : Proc(IHTMLFontElement*, UInt8**, HRESULT)
    put_size : Proc(IHTMLFontElement*, VARIANT, HRESULT)
    get_size : Proc(IHTMLFontElement*, VARIANT*, HRESULT)
  end

  IHTMLFontElement_GUID = "3050f1d9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFontElement = LibC::GUID.new(0x3050f1d9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFontElement
    lpVtbl : IHTMLFontElementVTbl*
  end

  struct DispHTMLFontElementVTbl
    query_interface : Proc(DispHTMLFontElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFontElement*, UInt32)
    release : Proc(DispHTMLFontElement*, UInt32)
    get_type_info_count : Proc(DispHTMLFontElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFontElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFontElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFontElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFontElement_GUID = "3050f512-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFontElement = LibC::GUID.new(0x3050f512_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFontElement
    lpVtbl : DispHTMLFontElementVTbl*
  end

  struct HTMLAnchorEvents2VTbl
    query_interface : Proc(HTMLAnchorEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLAnchorEvents2*, UInt32)
    release : Proc(HTMLAnchorEvents2*, UInt32)
    get_type_info_count : Proc(HTMLAnchorEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLAnchorEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLAnchorEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLAnchorEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLAnchorEvents2_GUID = "3050f610-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLAnchorEvents2 = LibC::GUID.new(0x3050f610_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLAnchorEvents2
    lpVtbl : HTMLAnchorEvents2VTbl*
  end

  struct HTMLAnchorEventsVTbl
    query_interface : Proc(HTMLAnchorEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLAnchorEvents*, UInt32)
    release : Proc(HTMLAnchorEvents*, UInt32)
    get_type_info_count : Proc(HTMLAnchorEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLAnchorEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLAnchorEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLAnchorEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLAnchorEvents_GUID = "3050f29d-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLAnchorEvents = LibC::GUID.new(0x3050f29d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLAnchorEvents
    lpVtbl : HTMLAnchorEventsVTbl*
  end

  struct IHTMLAnchorElementVTbl
    query_interface : Proc(IHTMLAnchorElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAnchorElement*, UInt32)
    release : Proc(IHTMLAnchorElement*, UInt32)
    get_type_info_count : Proc(IHTMLAnchorElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAnchorElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAnchorElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAnchorElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_href : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_target : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_target : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_rel : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_rel : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_rev : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_rev : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_urn : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_urn : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_methods : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_methods : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_host : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_host : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_hostname : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_hostname : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_pathname : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_pathname : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_port : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_port : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_protocol : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_protocol : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_search : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_search : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_hash : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_hash : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_onblur : Proc(IHTMLAnchorElement*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLAnchorElement*, VARIANT*, HRESULT)
    put_onfocus : Proc(IHTMLAnchorElement*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLAnchorElement*, VARIANT*, HRESULT)
    put_access_key : Proc(IHTMLAnchorElement*, UInt8*, HRESULT)
    get_access_key : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    get_protocol_long : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    get_mime_type : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    get_name_prop : Proc(IHTMLAnchorElement*, UInt8**, HRESULT)
    put_tab_index : Proc(IHTMLAnchorElement*, Int16, HRESULT)
    get_tab_index : Proc(IHTMLAnchorElement*, Int16*, HRESULT)
    focus : Proc(IHTMLAnchorElement*, HRESULT)
    blur : Proc(IHTMLAnchorElement*, HRESULT)
  end

  IHTMLAnchorElement_GUID = "3050f1da-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAnchorElement = LibC::GUID.new(0x3050f1da_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAnchorElement
    lpVtbl : IHTMLAnchorElementVTbl*
  end

  struct IHTMLAnchorElement2VTbl
    query_interface : Proc(IHTMLAnchorElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAnchorElement2*, UInt32)
    release : Proc(IHTMLAnchorElement2*, UInt32)
    get_type_info_count : Proc(IHTMLAnchorElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAnchorElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAnchorElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAnchorElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_charset : Proc(IHTMLAnchorElement2*, UInt8*, HRESULT)
    get_charset : Proc(IHTMLAnchorElement2*, UInt8**, HRESULT)
    put_coords : Proc(IHTMLAnchorElement2*, UInt8*, HRESULT)
    get_coords : Proc(IHTMLAnchorElement2*, UInt8**, HRESULT)
    put_hreflang : Proc(IHTMLAnchorElement2*, UInt8*, HRESULT)
    get_hreflang : Proc(IHTMLAnchorElement2*, UInt8**, HRESULT)
    put_shape : Proc(IHTMLAnchorElement2*, UInt8*, HRESULT)
    get_shape : Proc(IHTMLAnchorElement2*, UInt8**, HRESULT)
    put_type : Proc(IHTMLAnchorElement2*, UInt8*, HRESULT)
    get_type : Proc(IHTMLAnchorElement2*, UInt8**, HRESULT)
  end

  IHTMLAnchorElement2_GUID = "3050f825-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAnchorElement2 = LibC::GUID.new(0x3050f825_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAnchorElement2
    lpVtbl : IHTMLAnchorElement2VTbl*
  end

  struct IHTMLAnchorElement3VTbl
    query_interface : Proc(IHTMLAnchorElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAnchorElement3*, UInt32)
    release : Proc(IHTMLAnchorElement3*, UInt32)
    get_type_info_count : Proc(IHTMLAnchorElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAnchorElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAnchorElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAnchorElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_shape : Proc(IHTMLAnchorElement3*, UInt8*, HRESULT)
    get_shape : Proc(IHTMLAnchorElement3*, UInt8**, HRESULT)
    put_coords : Proc(IHTMLAnchorElement3*, UInt8*, HRESULT)
    get_coords : Proc(IHTMLAnchorElement3*, UInt8**, HRESULT)
    put_href : Proc(IHTMLAnchorElement3*, UInt8*, HRESULT)
    get_href : Proc(IHTMLAnchorElement3*, UInt8**, HRESULT)
  end

  IHTMLAnchorElement3_GUID = "3051041d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAnchorElement3 = LibC::GUID.new(0x3051041d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAnchorElement3
    lpVtbl : IHTMLAnchorElement3VTbl*
  end

  struct DispHTMLAnchorElementVTbl
    query_interface : Proc(DispHTMLAnchorElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAnchorElement*, UInt32)
    release : Proc(DispHTMLAnchorElement*, UInt32)
    get_type_info_count : Proc(DispHTMLAnchorElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAnchorElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAnchorElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAnchorElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAnchorElement_GUID = "3050f502-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAnchorElement = LibC::GUID.new(0x3050f502_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAnchorElement
    lpVtbl : DispHTMLAnchorElementVTbl*
  end

  struct HTMLLabelEvents2VTbl
    query_interface : Proc(HTMLLabelEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLLabelEvents2*, UInt32)
    release : Proc(HTMLLabelEvents2*, UInt32)
    get_type_info_count : Proc(HTMLLabelEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLLabelEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLLabelEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLLabelEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLLabelEvents2_GUID = "3050f61c-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLLabelEvents2 = LibC::GUID.new(0x3050f61c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLLabelEvents2
    lpVtbl : HTMLLabelEvents2VTbl*
  end

  struct HTMLLabelEventsVTbl
    query_interface : Proc(HTMLLabelEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLLabelEvents*, UInt32)
    release : Proc(HTMLLabelEvents*, UInt32)
    get_type_info_count : Proc(HTMLLabelEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLLabelEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLLabelEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLLabelEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLLabelEvents_GUID = "3050f329-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLLabelEvents = LibC::GUID.new(0x3050f329_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLLabelEvents
    lpVtbl : HTMLLabelEventsVTbl*
  end

  struct IHTMLLabelElementVTbl
    query_interface : Proc(IHTMLLabelElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLabelElement*, UInt32)
    release : Proc(IHTMLLabelElement*, UInt32)
    get_type_info_count : Proc(IHTMLLabelElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLabelElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLabelElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLabelElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_html_for : Proc(IHTMLLabelElement*, UInt8*, HRESULT)
    get_html_for : Proc(IHTMLLabelElement*, UInt8**, HRESULT)
    put_access_key : Proc(IHTMLLabelElement*, UInt8*, HRESULT)
    get_access_key : Proc(IHTMLLabelElement*, UInt8**, HRESULT)
  end

  IHTMLLabelElement_GUID = "3050f32a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLabelElement = LibC::GUID.new(0x3050f32a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLabelElement
    lpVtbl : IHTMLLabelElementVTbl*
  end

  struct IHTMLLabelElement2VTbl
    query_interface : Proc(IHTMLLabelElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLabelElement2*, UInt32)
    release : Proc(IHTMLLabelElement2*, UInt32)
    get_type_info_count : Proc(IHTMLLabelElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLabelElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLabelElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLabelElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_form : Proc(IHTMLLabelElement2*, IHTMLFormElement*, HRESULT)
  end

  IHTMLLabelElement2_GUID = "3050f832-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLabelElement2 = LibC::GUID.new(0x3050f832_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLabelElement2
    lpVtbl : IHTMLLabelElement2VTbl*
  end

  struct DispHTMLLabelElementVTbl
    query_interface : Proc(DispHTMLLabelElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLLabelElement*, UInt32)
    release : Proc(DispHTMLLabelElement*, UInt32)
    get_type_info_count : Proc(DispHTMLLabelElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLLabelElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLLabelElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLLabelElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLLabelElement_GUID = "3050f522-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLLabelElement = LibC::GUID.new(0x3050f522_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLLabelElement
    lpVtbl : DispHTMLLabelElementVTbl*
  end

  struct IHTMLListElementVTbl
    query_interface : Proc(IHTMLListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLListElement*, UInt32)
    release : Proc(IHTMLListElement*, UInt32)
    get_type_info_count : Proc(IHTMLListElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLListElement_GUID = "3050f20e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLListElement = LibC::GUID.new(0x3050f20e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLListElement
    lpVtbl : IHTMLListElementVTbl*
  end

  struct IHTMLListElement2VTbl
    query_interface : Proc(IHTMLListElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLListElement2*, UInt32)
    release : Proc(IHTMLListElement2*, UInt32)
    get_type_info_count : Proc(IHTMLListElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLListElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLListElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLListElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_compact : Proc(IHTMLListElement2*, Int16, HRESULT)
    get_compact : Proc(IHTMLListElement2*, Int16*, HRESULT)
  end

  IHTMLListElement2_GUID = "3050f822-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLListElement2 = LibC::GUID.new(0x3050f822_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLListElement2
    lpVtbl : IHTMLListElement2VTbl*
  end

  struct DispHTMLListElementVTbl
    query_interface : Proc(DispHTMLListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLListElement*, UInt32)
    release : Proc(DispHTMLListElement*, UInt32)
    get_type_info_count : Proc(DispHTMLListElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLListElement_GUID = "3050f525-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLListElement = LibC::GUID.new(0x3050f525_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLListElement
    lpVtbl : DispHTMLListElementVTbl*
  end

  struct IHTMLUListElementVTbl
    query_interface : Proc(IHTMLUListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLUListElement*, UInt32)
    release : Proc(IHTMLUListElement*, UInt32)
    get_type_info_count : Proc(IHTMLUListElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLUListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLUListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLUListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_compact : Proc(IHTMLUListElement*, Int16, HRESULT)
    get_compact : Proc(IHTMLUListElement*, Int16*, HRESULT)
    put_type : Proc(IHTMLUListElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLUListElement*, UInt8**, HRESULT)
  end

  IHTMLUListElement_GUID = "3050f1dd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLUListElement = LibC::GUID.new(0x3050f1dd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLUListElement
    lpVtbl : IHTMLUListElementVTbl*
  end

  struct DispHTMLUListElementVTbl
    query_interface : Proc(DispHTMLUListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLUListElement*, UInt32)
    release : Proc(DispHTMLUListElement*, UInt32)
    get_type_info_count : Proc(DispHTMLUListElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLUListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLUListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLUListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLUListElement_GUID = "3050f538-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLUListElement = LibC::GUID.new(0x3050f538_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLUListElement
    lpVtbl : DispHTMLUListElementVTbl*
  end

  struct IHTMLOListElementVTbl
    query_interface : Proc(IHTMLOListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOListElement*, UInt32)
    release : Proc(IHTMLOListElement*, UInt32)
    get_type_info_count : Proc(IHTMLOListElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_compact : Proc(IHTMLOListElement*, Int16, HRESULT)
    get_compact : Proc(IHTMLOListElement*, Int16*, HRESULT)
    put_start : Proc(IHTMLOListElement*, Int32, HRESULT)
    get_start : Proc(IHTMLOListElement*, Int32*, HRESULT)
    put_type : Proc(IHTMLOListElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLOListElement*, UInt8**, HRESULT)
  end

  IHTMLOListElement_GUID = "3050f1de-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOListElement = LibC::GUID.new(0x3050f1de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOListElement
    lpVtbl : IHTMLOListElementVTbl*
  end

  struct DispHTMLOListElementVTbl
    query_interface : Proc(DispHTMLOListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLOListElement*, UInt32)
    release : Proc(DispHTMLOListElement*, UInt32)
    get_type_info_count : Proc(DispHTMLOListElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLOListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLOListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLOListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLOListElement_GUID = "3050f52a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLOListElement = LibC::GUID.new(0x3050f52a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLOListElement
    lpVtbl : DispHTMLOListElementVTbl*
  end

  struct IHTMLLIElementVTbl
    query_interface : Proc(IHTMLLIElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLIElement*, UInt32)
    release : Proc(IHTMLLIElement*, UInt32)
    get_type_info_count : Proc(IHTMLLIElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLIElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLIElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLIElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(IHTMLLIElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLLIElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLLIElement*, Int32, HRESULT)
    get_value : Proc(IHTMLLIElement*, Int32*, HRESULT)
  end

  IHTMLLIElement_GUID = "3050f1e0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLIElement = LibC::GUID.new(0x3050f1e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLIElement
    lpVtbl : IHTMLLIElementVTbl*
  end

  struct DispHTMLLIElementVTbl
    query_interface : Proc(DispHTMLLIElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLLIElement*, UInt32)
    release : Proc(DispHTMLLIElement*, UInt32)
    get_type_info_count : Proc(DispHTMLLIElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLLIElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLLIElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLLIElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLLIElement_GUID = "3050f523-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLLIElement = LibC::GUID.new(0x3050f523_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLLIElement
    lpVtbl : DispHTMLLIElementVTbl*
  end

  struct IHTMLBlockElementVTbl
    query_interface : Proc(IHTMLBlockElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBlockElement*, UInt32)
    release : Proc(IHTMLBlockElement*, UInt32)
    get_type_info_count : Proc(IHTMLBlockElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBlockElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBlockElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBlockElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_clear : Proc(IHTMLBlockElement*, UInt8*, HRESULT)
    get_clear : Proc(IHTMLBlockElement*, UInt8**, HRESULT)
  end

  IHTMLBlockElement_GUID = "3050f208-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBlockElement = LibC::GUID.new(0x3050f208_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBlockElement
    lpVtbl : IHTMLBlockElementVTbl*
  end

  struct IHTMLBlockElement2VTbl
    query_interface : Proc(IHTMLBlockElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBlockElement2*, UInt32)
    release : Proc(IHTMLBlockElement2*, UInt32)
    get_type_info_count : Proc(IHTMLBlockElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBlockElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBlockElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBlockElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_cite : Proc(IHTMLBlockElement2*, UInt8*, HRESULT)
    get_cite : Proc(IHTMLBlockElement2*, UInt8**, HRESULT)
    put_width : Proc(IHTMLBlockElement2*, UInt8*, HRESULT)
    get_width : Proc(IHTMLBlockElement2*, UInt8**, HRESULT)
  end

  IHTMLBlockElement2_GUID = "3050f823-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBlockElement2 = LibC::GUID.new(0x3050f823_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBlockElement2
    lpVtbl : IHTMLBlockElement2VTbl*
  end

  struct IHTMLBlockElement3VTbl
    query_interface : Proc(IHTMLBlockElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBlockElement3*, UInt32)
    release : Proc(IHTMLBlockElement3*, UInt32)
    get_type_info_count : Proc(IHTMLBlockElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBlockElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBlockElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBlockElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_cite : Proc(IHTMLBlockElement3*, UInt8*, HRESULT)
    get_cite : Proc(IHTMLBlockElement3*, UInt8**, HRESULT)
  end

  IHTMLBlockElement3_GUID = "30510494-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBlockElement3 = LibC::GUID.new(0x30510494_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBlockElement3
    lpVtbl : IHTMLBlockElement3VTbl*
  end

  struct DispHTMLBlockElementVTbl
    query_interface : Proc(DispHTMLBlockElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBlockElement*, UInt32)
    release : Proc(DispHTMLBlockElement*, UInt32)
    get_type_info_count : Proc(DispHTMLBlockElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBlockElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBlockElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBlockElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBlockElement_GUID = "3050f506-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBlockElement = LibC::GUID.new(0x3050f506_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBlockElement
    lpVtbl : DispHTMLBlockElementVTbl*
  end

  struct IHTMLDivElementVTbl
    query_interface : Proc(IHTMLDivElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDivElement*, UInt32)
    release : Proc(IHTMLDivElement*, UInt32)
    get_type_info_count : Proc(IHTMLDivElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDivElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDivElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDivElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLDivElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLDivElement*, UInt8**, HRESULT)
    put_no_wrap : Proc(IHTMLDivElement*, Int16, HRESULT)
    get_no_wrap : Proc(IHTMLDivElement*, Int16*, HRESULT)
  end

  IHTMLDivElement_GUID = "3050f200-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDivElement = LibC::GUID.new(0x3050f200_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDivElement
    lpVtbl : IHTMLDivElementVTbl*
  end

  struct DispHTMLDivElementVTbl
    query_interface : Proc(DispHTMLDivElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDivElement*, UInt32)
    release : Proc(DispHTMLDivElement*, UInt32)
    get_type_info_count : Proc(DispHTMLDivElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDivElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDivElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDivElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDivElement_GUID = "3050f50c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDivElement = LibC::GUID.new(0x3050f50c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDivElement
    lpVtbl : DispHTMLDivElementVTbl*
  end

  struct IHTMLDDElementVTbl
    query_interface : Proc(IHTMLDDElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDDElement*, UInt32)
    release : Proc(IHTMLDDElement*, UInt32)
    get_type_info_count : Proc(IHTMLDDElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDDElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDDElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDDElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_no_wrap : Proc(IHTMLDDElement*, Int16, HRESULT)
    get_no_wrap : Proc(IHTMLDDElement*, Int16*, HRESULT)
  end

  IHTMLDDElement_GUID = "3050f1f2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDDElement = LibC::GUID.new(0x3050f1f2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDDElement
    lpVtbl : IHTMLDDElementVTbl*
  end

  struct DispHTMLDDElementVTbl
    query_interface : Proc(DispHTMLDDElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDDElement*, UInt32)
    release : Proc(DispHTMLDDElement*, UInt32)
    get_type_info_count : Proc(DispHTMLDDElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDDElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDDElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDDElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDDElement_GUID = "3050f50b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDDElement = LibC::GUID.new(0x3050f50b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDDElement
    lpVtbl : DispHTMLDDElementVTbl*
  end

  struct IHTMLDTElementVTbl
    query_interface : Proc(IHTMLDTElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDTElement*, UInt32)
    release : Proc(IHTMLDTElement*, UInt32)
    get_type_info_count : Proc(IHTMLDTElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDTElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDTElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDTElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_no_wrap : Proc(IHTMLDTElement*, Int16, HRESULT)
    get_no_wrap : Proc(IHTMLDTElement*, Int16*, HRESULT)
  end

  IHTMLDTElement_GUID = "3050f1f3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDTElement = LibC::GUID.new(0x3050f1f3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDTElement
    lpVtbl : IHTMLDTElementVTbl*
  end

  struct DispHTMLDTElementVTbl
    query_interface : Proc(DispHTMLDTElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDTElement*, UInt32)
    release : Proc(DispHTMLDTElement*, UInt32)
    get_type_info_count : Proc(DispHTMLDTElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDTElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDTElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDTElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDTElement_GUID = "3050f50d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDTElement = LibC::GUID.new(0x3050f50d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDTElement
    lpVtbl : DispHTMLDTElementVTbl*
  end

  struct IHTMLBRElementVTbl
    query_interface : Proc(IHTMLBRElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBRElement*, UInt32)
    release : Proc(IHTMLBRElement*, UInt32)
    get_type_info_count : Proc(IHTMLBRElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBRElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBRElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBRElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_clear : Proc(IHTMLBRElement*, UInt8*, HRESULT)
    get_clear : Proc(IHTMLBRElement*, UInt8**, HRESULT)
  end

  IHTMLBRElement_GUID = "3050f1f0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBRElement = LibC::GUID.new(0x3050f1f0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBRElement
    lpVtbl : IHTMLBRElementVTbl*
  end

  struct DispHTMLBRElementVTbl
    query_interface : Proc(DispHTMLBRElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBRElement*, UInt32)
    release : Proc(DispHTMLBRElement*, UInt32)
    get_type_info_count : Proc(DispHTMLBRElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBRElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBRElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBRElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBRElement_GUID = "3050f53a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBRElement = LibC::GUID.new(0x3050f53a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBRElement
    lpVtbl : DispHTMLBRElementVTbl*
  end

  struct IHTMLDListElementVTbl
    query_interface : Proc(IHTMLDListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDListElement*, UInt32)
    release : Proc(IHTMLDListElement*, UInt32)
    get_type_info_count : Proc(IHTMLDListElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_compact : Proc(IHTMLDListElement*, Int16, HRESULT)
    get_compact : Proc(IHTMLDListElement*, Int16*, HRESULT)
  end

  IHTMLDListElement_GUID = "3050f1f1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDListElement = LibC::GUID.new(0x3050f1f1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDListElement
    lpVtbl : IHTMLDListElementVTbl*
  end

  struct DispHTMLDListElementVTbl
    query_interface : Proc(DispHTMLDListElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDListElement*, UInt32)
    release : Proc(DispHTMLDListElement*, UInt32)
    get_type_info_count : Proc(DispHTMLDListElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDListElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDListElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDListElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDListElement_GUID = "3050f53b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDListElement = LibC::GUID.new(0x3050f53b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDListElement
    lpVtbl : DispHTMLDListElementVTbl*
  end

  struct IHTMLHRElementVTbl
    query_interface : Proc(IHTMLHRElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLHRElement*, UInt32)
    release : Proc(IHTMLHRElement*, UInt32)
    get_type_info_count : Proc(IHTMLHRElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLHRElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLHRElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLHRElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLHRElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLHRElement*, UInt8**, HRESULT)
    put_color : Proc(IHTMLHRElement*, VARIANT, HRESULT)
    get_color : Proc(IHTMLHRElement*, VARIANT*, HRESULT)
    put_no_shade : Proc(IHTMLHRElement*, Int16, HRESULT)
    get_no_shade : Proc(IHTMLHRElement*, Int16*, HRESULT)
    put_width : Proc(IHTMLHRElement*, VARIANT, HRESULT)
    get_width : Proc(IHTMLHRElement*, VARIANT*, HRESULT)
    put_size : Proc(IHTMLHRElement*, VARIANT, HRESULT)
    get_size : Proc(IHTMLHRElement*, VARIANT*, HRESULT)
  end

  IHTMLHRElement_GUID = "3050f1f4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLHRElement = LibC::GUID.new(0x3050f1f4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLHRElement
    lpVtbl : IHTMLHRElementVTbl*
  end

  struct DispHTMLHRElementVTbl
    query_interface : Proc(DispHTMLHRElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLHRElement*, UInt32)
    release : Proc(DispHTMLHRElement*, UInt32)
    get_type_info_count : Proc(DispHTMLHRElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLHRElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLHRElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLHRElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLHRElement_GUID = "3050f53d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLHRElement = LibC::GUID.new(0x3050f53d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLHRElement
    lpVtbl : DispHTMLHRElementVTbl*
  end

  struct IHTMLParaElementVTbl
    query_interface : Proc(IHTMLParaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLParaElement*, UInt32)
    release : Proc(IHTMLParaElement*, UInt32)
    get_type_info_count : Proc(IHTMLParaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLParaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLParaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLParaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLParaElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLParaElement*, UInt8**, HRESULT)
  end

  IHTMLParaElement_GUID = "3050f1f5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLParaElement = LibC::GUID.new(0x3050f1f5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLParaElement
    lpVtbl : IHTMLParaElementVTbl*
  end

  struct DispHTMLParaElementVTbl
    query_interface : Proc(DispHTMLParaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLParaElement*, UInt32)
    release : Proc(DispHTMLParaElement*, UInt32)
    get_type_info_count : Proc(DispHTMLParaElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLParaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLParaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLParaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLParaElement_GUID = "3050f52c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLParaElement = LibC::GUID.new(0x3050f52c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLParaElement
    lpVtbl : DispHTMLParaElementVTbl*
  end

  struct IHTMLElementCollection2VTbl
    query_interface : Proc(IHTMLElementCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementCollection2*, UInt32)
    release : Proc(IHTMLElementCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLElementCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    urns : Proc(IHTMLElementCollection2*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLElementCollection2_GUID = "3050f5ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementCollection2 = LibC::GUID.new(0x3050f5ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementCollection2
    lpVtbl : IHTMLElementCollection2VTbl*
  end

  struct IHTMLElementCollection3VTbl
    query_interface : Proc(IHTMLElementCollection3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementCollection3*, UInt32)
    release : Proc(IHTMLElementCollection3*, UInt32)
    get_type_info_count : Proc(IHTMLElementCollection3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementCollection3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementCollection3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementCollection3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    named_item : Proc(IHTMLElementCollection3*, UInt8*, IDispatch*, HRESULT)
  end

  IHTMLElementCollection3_GUID = "3050f835-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementCollection3 = LibC::GUID.new(0x3050f835_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementCollection3
    lpVtbl : IHTMLElementCollection3VTbl*
  end

  struct IHTMLElementCollection4VTbl
    query_interface : Proc(IHTMLElementCollection4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLElementCollection4*, UInt32)
    release : Proc(IHTMLElementCollection4*, UInt32)
    get_type_info_count : Proc(IHTMLElementCollection4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLElementCollection4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLElementCollection4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLElementCollection4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLElementCollection4*, Int32*, HRESULT)
    item : Proc(IHTMLElementCollection4*, Int32, IHTMLElement2*, HRESULT)
    named_item : Proc(IHTMLElementCollection4*, UInt8*, IHTMLElement2*, HRESULT)
  end

  IHTMLElementCollection4_GUID = "30510425-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLElementCollection4 = LibC::GUID.new(0x30510425_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLElementCollection4
    lpVtbl : IHTMLElementCollection4VTbl*
  end

  struct DispHTMLElementCollectionVTbl
    query_interface : Proc(DispHTMLElementCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLElementCollection*, UInt32)
    release : Proc(DispHTMLElementCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLElementCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLElementCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLElementCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLElementCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLElementCollection_GUID = "3050f56b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLElementCollection = LibC::GUID.new(0x3050f56b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLElementCollection
    lpVtbl : DispHTMLElementCollectionVTbl*
  end

  struct IHTMLHeaderElementVTbl
    query_interface : Proc(IHTMLHeaderElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLHeaderElement*, UInt32)
    release : Proc(IHTMLHeaderElement*, UInt32)
    get_type_info_count : Proc(IHTMLHeaderElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLHeaderElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLHeaderElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLHeaderElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLHeaderElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLHeaderElement*, UInt8**, HRESULT)
  end

  IHTMLHeaderElement_GUID = "3050f1f6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLHeaderElement = LibC::GUID.new(0x3050f1f6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLHeaderElement
    lpVtbl : IHTMLHeaderElementVTbl*
  end

  struct DispHTMLHeaderElementVTbl
    query_interface : Proc(DispHTMLHeaderElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLHeaderElement*, UInt32)
    release : Proc(DispHTMLHeaderElement*, UInt32)
    get_type_info_count : Proc(DispHTMLHeaderElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLHeaderElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLHeaderElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLHeaderElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLHeaderElement_GUID = "3050f515-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLHeaderElement = LibC::GUID.new(0x3050f515_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLHeaderElement
    lpVtbl : DispHTMLHeaderElementVTbl*
  end

  struct HTMLSelectElementEvents2VTbl
    query_interface : Proc(HTMLSelectElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLSelectElementEvents2*, UInt32)
    release : Proc(HTMLSelectElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLSelectElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLSelectElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLSelectElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLSelectElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLSelectElementEvents2_GUID = "3050f622-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLSelectElementEvents2 = LibC::GUID.new(0x3050f622_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLSelectElementEvents2
    lpVtbl : HTMLSelectElementEvents2VTbl*
  end

  struct HTMLSelectElementEventsVTbl
    query_interface : Proc(HTMLSelectElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLSelectElementEvents*, UInt32)
    release : Proc(HTMLSelectElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLSelectElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLSelectElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLSelectElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLSelectElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLSelectElementEvents_GUID = "3050f302-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLSelectElementEvents = LibC::GUID.new(0x3050f302_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLSelectElementEvents
    lpVtbl : HTMLSelectElementEventsVTbl*
  end

  struct IHTMLOptionElementVTbl
    query_interface : Proc(IHTMLOptionElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionElement*, UInt32)
    release : Proc(IHTMLOptionElement*, UInt32)
    get_type_info_count : Proc(IHTMLOptionElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selected : Proc(IHTMLOptionElement*, Int16, HRESULT)
    get_selected : Proc(IHTMLOptionElement*, Int16*, HRESULT)
    put_value : Proc(IHTMLOptionElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLOptionElement*, UInt8**, HRESULT)
    put_default_selected : Proc(IHTMLOptionElement*, Int16, HRESULT)
    get_default_selected : Proc(IHTMLOptionElement*, Int16*, HRESULT)
    put_index : Proc(IHTMLOptionElement*, Int32, HRESULT)
    get_index : Proc(IHTMLOptionElement*, Int32*, HRESULT)
    put_text : Proc(IHTMLOptionElement*, UInt8*, HRESULT)
    get_text : Proc(IHTMLOptionElement*, UInt8**, HRESULT)
    get_form : Proc(IHTMLOptionElement*, IHTMLFormElement*, HRESULT)
  end

  IHTMLOptionElement_GUID = "3050f211-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionElement = LibC::GUID.new(0x3050f211_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionElement
    lpVtbl : IHTMLOptionElementVTbl*
  end

  struct IHTMLSelectElementExVTbl
    query_interface : Proc(IHTMLSelectElementEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElementEx*, UInt32)
    release : Proc(IHTMLSelectElementEx*, UInt32)
    show_dropdown : Proc(IHTMLSelectElementEx*, LibC::BOOL, HRESULT)
    set_select_ex_flags : Proc(IHTMLSelectElementEx*, UInt32, HRESULT)
    get_select_ex_flags : Proc(IHTMLSelectElementEx*, UInt32*, HRESULT)
    get_dropdown_open : Proc(IHTMLSelectElementEx*, LibC::BOOL*, HRESULT)
  end

  IHTMLSelectElementEx_GUID = "3050f2d1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElementEx = LibC::GUID.new(0x3050f2d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElementEx
    lpVtbl : IHTMLSelectElementExVTbl*
  end

  struct IHTMLSelectElementVTbl
    query_interface : Proc(IHTMLSelectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElement*, UInt32)
    release : Proc(IHTMLSelectElement*, UInt32)
    get_type_info_count : Proc(IHTMLSelectElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_size : Proc(IHTMLSelectElement*, Int32, HRESULT)
    get_size : Proc(IHTMLSelectElement*, Int32*, HRESULT)
    put_multiple : Proc(IHTMLSelectElement*, Int16, HRESULT)
    get_multiple : Proc(IHTMLSelectElement*, Int16*, HRESULT)
    put_name : Proc(IHTMLSelectElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLSelectElement*, UInt8**, HRESULT)
    get_options : Proc(IHTMLSelectElement*, IDispatch*, HRESULT)
    put_onchange : Proc(IHTMLSelectElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLSelectElement*, VARIANT*, HRESULT)
    put_selected_index : Proc(IHTMLSelectElement*, Int32, HRESULT)
    get_selected_index : Proc(IHTMLSelectElement*, Int32*, HRESULT)
    get_type : Proc(IHTMLSelectElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLSelectElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLSelectElement*, UInt8**, HRESULT)
    put_disabled : Proc(IHTMLSelectElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLSelectElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLSelectElement*, IHTMLFormElement*, HRESULT)
    add : Proc(IHTMLSelectElement*, IHTMLElement, VARIANT, HRESULT)
    remove : Proc(IHTMLSelectElement*, Int32, HRESULT)
    put_length : Proc(IHTMLSelectElement*, Int32, HRESULT)
    get_length : Proc(IHTMLSelectElement*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLSelectElement*, IUnknown*, HRESULT)
    item : Proc(IHTMLSelectElement*, VARIANT, VARIANT, IDispatch*, HRESULT)
    tags : Proc(IHTMLSelectElement*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLSelectElement_GUID = "3050f244-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElement = LibC::GUID.new(0x3050f244_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElement
    lpVtbl : IHTMLSelectElementVTbl*
  end

  struct IHTMLSelectElement2VTbl
    query_interface : Proc(IHTMLSelectElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElement2*, UInt32)
    release : Proc(IHTMLSelectElement2*, UInt32)
    get_type_info_count : Proc(IHTMLSelectElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    urns : Proc(IHTMLSelectElement2*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLSelectElement2_GUID = "3050f5ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElement2 = LibC::GUID.new(0x3050f5ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElement2
    lpVtbl : IHTMLSelectElement2VTbl*
  end

  struct IHTMLSelectElement4VTbl
    query_interface : Proc(IHTMLSelectElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElement4*, UInt32)
    release : Proc(IHTMLSelectElement4*, UInt32)
    get_type_info_count : Proc(IHTMLSelectElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    named_item : Proc(IHTMLSelectElement4*, UInt8*, IDispatch*, HRESULT)
  end

  IHTMLSelectElement4_GUID = "3050f838-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElement4 = LibC::GUID.new(0x3050f838_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElement4
    lpVtbl : IHTMLSelectElement4VTbl*
  end

  struct IHTMLSelectElement5VTbl
    query_interface : Proc(IHTMLSelectElement5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElement5*, UInt32)
    release : Proc(IHTMLSelectElement5*, UInt32)
    get_type_info_count : Proc(IHTMLSelectElement5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectElement5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectElement5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectElement5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add : Proc(IHTMLSelectElement5*, IHTMLOptionElement, VARIANT*, HRESULT)
  end

  IHTMLSelectElement5_GUID = "3051049d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElement5 = LibC::GUID.new(0x3051049d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElement5
    lpVtbl : IHTMLSelectElement5VTbl*
  end

  struct IHTMLSelectElement6VTbl
    query_interface : Proc(IHTMLSelectElement6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectElement6*, UInt32)
    release : Proc(IHTMLSelectElement6*, UInt32)
    get_type_info_count : Proc(IHTMLSelectElement6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectElement6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectElement6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectElement6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add : Proc(IHTMLSelectElement6*, IHTMLOptionElement, VARIANT*, HRESULT)
    put_value : Proc(IHTMLSelectElement6*, UInt8*, HRESULT)
    get_value : Proc(IHTMLSelectElement6*, UInt8**, HRESULT)
  end

  IHTMLSelectElement6_GUID = "30510760-98b6-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectElement6 = LibC::GUID.new(0x30510760_u32, 0x98b6_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectElement6
    lpVtbl : IHTMLSelectElement6VTbl*
  end

  struct DispHTMLSelectElementVTbl
    query_interface : Proc(DispHTMLSelectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLSelectElement*, UInt32)
    release : Proc(DispHTMLSelectElement*, UInt32)
    get_type_info_count : Proc(DispHTMLSelectElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLSelectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLSelectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLSelectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLSelectElement_GUID = "3050f531-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLSelectElement = LibC::GUID.new(0x3050f531_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLSelectElement
    lpVtbl : DispHTMLSelectElementVTbl*
  end

  struct DispHTMLWndSelectElementVTbl
    query_interface : Proc(DispHTMLWndSelectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLWndSelectElement*, UInt32)
    release : Proc(DispHTMLWndSelectElement*, UInt32)
    get_type_info_count : Proc(DispHTMLWndSelectElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLWndSelectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLWndSelectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLWndSelectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLWndSelectElement_GUID = "3050f597-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLWndSelectElement = LibC::GUID.new(0x3050f597_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLWndSelectElement
    lpVtbl : DispHTMLWndSelectElementVTbl*
  end

  struct IHTMLSelectionObjectVTbl
    query_interface : Proc(IHTMLSelectionObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectionObject*, UInt32)
    release : Proc(IHTMLSelectionObject*, UInt32)
    get_type_info_count : Proc(IHTMLSelectionObject*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectionObject*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectionObject*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectionObject*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_range : Proc(IHTMLSelectionObject*, IDispatch*, HRESULT)
    empty : Proc(IHTMLSelectionObject*, HRESULT)
    clear : Proc(IHTMLSelectionObject*, HRESULT)
    get_type : Proc(IHTMLSelectionObject*, UInt8**, HRESULT)
  end

  IHTMLSelectionObject_GUID = "3050f25a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectionObject = LibC::GUID.new(0x3050f25a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectionObject
    lpVtbl : IHTMLSelectionObjectVTbl*
  end

  struct IHTMLSelectionObject2VTbl
    query_interface : Proc(IHTMLSelectionObject2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelectionObject2*, UInt32)
    release : Proc(IHTMLSelectionObject2*, UInt32)
    get_type_info_count : Proc(IHTMLSelectionObject2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelectionObject2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelectionObject2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelectionObject2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_range_collection : Proc(IHTMLSelectionObject2*, IDispatch*, HRESULT)
    get_type_detail : Proc(IHTMLSelectionObject2*, UInt8**, HRESULT)
  end

  IHTMLSelectionObject2_GUID = "3050f7ec-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelectionObject2 = LibC::GUID.new(0x3050f7ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelectionObject2
    lpVtbl : IHTMLSelectionObject2VTbl*
  end

  struct IHTMLSelectionVTbl
    query_interface : Proc(IHTMLSelection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSelection*, UInt32)
    release : Proc(IHTMLSelection*, UInt32)
    get_type_info_count : Proc(IHTMLSelection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSelection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSelection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSelection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_anchor_node : Proc(IHTMLSelection*, IHTMLDOMNode*, HRESULT)
    get_anchor_offset : Proc(IHTMLSelection*, Int32*, HRESULT)
    get_focus_node : Proc(IHTMLSelection*, IHTMLDOMNode*, HRESULT)
    get_focus_offset : Proc(IHTMLSelection*, Int32*, HRESULT)
    get_is_collapsed : Proc(IHTMLSelection*, Int16*, HRESULT)
    collapse : Proc(IHTMLSelection*, IDispatch, Int32, HRESULT)
    collapse_to_start : Proc(IHTMLSelection*, HRESULT)
    collapse_to_end : Proc(IHTMLSelection*, HRESULT)
    select_all_children : Proc(IHTMLSelection*, IDispatch, HRESULT)
    delete_from_document : Proc(IHTMLSelection*, HRESULT)
    get_range_count : Proc(IHTMLSelection*, Int32*, HRESULT)
    get_range_at : Proc(IHTMLSelection*, Int32, IHTMLDOMRange*, HRESULT)
    add_range : Proc(IHTMLSelection*, IDispatch, HRESULT)
    remove_range : Proc(IHTMLSelection*, IDispatch, HRESULT)
    remove_all_ranges : Proc(IHTMLSelection*, HRESULT)
    to_string : Proc(IHTMLSelection*, UInt8**, HRESULT)
  end

  IHTMLSelection_GUID = "305104b6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSelection = LibC::GUID.new(0x305104b6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSelection
    lpVtbl : IHTMLSelectionVTbl*
  end

  struct IHTMLOptionElement3VTbl
    query_interface : Proc(IHTMLOptionElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionElement3*, UInt32)
    release : Proc(IHTMLOptionElement3*, UInt32)
    get_type_info_count : Proc(IHTMLOptionElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_label : Proc(IHTMLOptionElement3*, UInt8*, HRESULT)
    get_label : Proc(IHTMLOptionElement3*, UInt8**, HRESULT)
  end

  IHTMLOptionElement3_GUID = "3050f820-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionElement3 = LibC::GUID.new(0x3050f820_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionElement3
    lpVtbl : IHTMLOptionElement3VTbl*
  end

  struct IHTMLOptionElement4VTbl
    query_interface : Proc(IHTMLOptionElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionElement4*, UInt32)
    release : Proc(IHTMLOptionElement4*, UInt32)
    get_type_info_count : Proc(IHTMLOptionElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_value : Proc(IHTMLOptionElement4*, UInt8*, HRESULT)
    get_value : Proc(IHTMLOptionElement4*, UInt8**, HRESULT)
  end

  IHTMLOptionElement4_GUID = "305107b4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionElement4 = LibC::GUID.new(0x305107b4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionElement4
    lpVtbl : IHTMLOptionElement4VTbl*
  end

  struct IHTMLOptionElementFactoryVTbl
    query_interface : Proc(IHTMLOptionElementFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionElementFactory*, UInt32)
    release : Proc(IHTMLOptionElementFactory*, UInt32)
    get_type_info_count : Proc(IHTMLOptionElementFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionElementFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionElementFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionElementFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IHTMLOptionElementFactory*, VARIANT, VARIANT, VARIANT, VARIANT, IHTMLOptionElement*, HRESULT)
  end

  IHTMLOptionElementFactory_GUID = "3050f38c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionElementFactory = LibC::GUID.new(0x3050f38c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionElementFactory
    lpVtbl : IHTMLOptionElementFactoryVTbl*
  end

  struct DispHTMLOptionElementVTbl
    query_interface : Proc(DispHTMLOptionElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLOptionElement*, UInt32)
    release : Proc(DispHTMLOptionElement*, UInt32)
    get_type_info_count : Proc(DispHTMLOptionElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLOptionElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLOptionElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLOptionElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLOptionElement_GUID = "3050f52b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLOptionElement = LibC::GUID.new(0x3050f52b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLOptionElement
    lpVtbl : DispHTMLOptionElementVTbl*
  end

  struct DispHTMLWndOptionElementVTbl
    query_interface : Proc(DispHTMLWndOptionElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLWndOptionElement*, UInt32)
    release : Proc(DispHTMLWndOptionElement*, UInt32)
    get_type_info_count : Proc(DispHTMLWndOptionElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLWndOptionElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLWndOptionElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLWndOptionElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLWndOptionElement_GUID = "3050f598-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLWndOptionElement = LibC::GUID.new(0x3050f598_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLWndOptionElement
    lpVtbl : DispHTMLWndOptionElementVTbl*
  end

  struct HTMLButtonElementEvents2VTbl
    query_interface : Proc(HTMLButtonElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLButtonElementEvents2*, UInt32)
    release : Proc(HTMLButtonElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLButtonElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLButtonElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLButtonElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLButtonElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLButtonElementEvents2_GUID = "3050f617-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLButtonElementEvents2 = LibC::GUID.new(0x3050f617_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLButtonElementEvents2
    lpVtbl : HTMLButtonElementEvents2VTbl*
  end

  struct HTMLButtonElementEventsVTbl
    query_interface : Proc(HTMLButtonElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLButtonElementEvents*, UInt32)
    release : Proc(HTMLButtonElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLButtonElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLButtonElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLButtonElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLButtonElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLButtonElementEvents_GUID = "3050f2b3-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLButtonElementEvents = LibC::GUID.new(0x3050f2b3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLButtonElementEvents
    lpVtbl : HTMLButtonElementEventsVTbl*
  end

  struct HTMLInputTextElementEvents2VTbl
    query_interface : Proc(HTMLInputTextElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputTextElementEvents2*, UInt32)
    release : Proc(HTMLInputTextElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLInputTextElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputTextElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputTextElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputTextElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputTextElementEvents2_GUID = "3050f618-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputTextElementEvents2 = LibC::GUID.new(0x3050f618_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputTextElementEvents2
    lpVtbl : HTMLInputTextElementEvents2VTbl*
  end

  struct HTMLOptionButtonElementEvents2VTbl
    query_interface : Proc(HTMLOptionButtonElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLOptionButtonElementEvents2*, UInt32)
    release : Proc(HTMLOptionButtonElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLOptionButtonElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLOptionButtonElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLOptionButtonElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLOptionButtonElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLOptionButtonElementEvents2_GUID = "3050f619-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLOptionButtonElementEvents2 = LibC::GUID.new(0x3050f619_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLOptionButtonElementEvents2
    lpVtbl : HTMLOptionButtonElementEvents2VTbl*
  end

  struct HTMLInputFileElementEvents2VTbl
    query_interface : Proc(HTMLInputFileElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputFileElementEvents2*, UInt32)
    release : Proc(HTMLInputFileElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLInputFileElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputFileElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputFileElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputFileElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputFileElementEvents2_GUID = "3050f61a-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputFileElementEvents2 = LibC::GUID.new(0x3050f61a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputFileElementEvents2
    lpVtbl : HTMLInputFileElementEvents2VTbl*
  end

  struct HTMLInputImageEvents2VTbl
    query_interface : Proc(HTMLInputImageEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputImageEvents2*, UInt32)
    release : Proc(HTMLInputImageEvents2*, UInt32)
    get_type_info_count : Proc(HTMLInputImageEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputImageEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputImageEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputImageEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputImageEvents2_GUID = "3050f61b-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputImageEvents2 = LibC::GUID.new(0x3050f61b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputImageEvents2
    lpVtbl : HTMLInputImageEvents2VTbl*
  end

  struct HTMLInputTextElementEventsVTbl
    query_interface : Proc(HTMLInputTextElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputTextElementEvents*, UInt32)
    release : Proc(HTMLInputTextElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLInputTextElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputTextElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputTextElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputTextElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputTextElementEvents_GUID = "3050f2a7-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputTextElementEvents = LibC::GUID.new(0x3050f2a7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputTextElementEvents
    lpVtbl : HTMLInputTextElementEventsVTbl*
  end

  struct HTMLOptionButtonElementEventsVTbl
    query_interface : Proc(HTMLOptionButtonElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLOptionButtonElementEvents*, UInt32)
    release : Proc(HTMLOptionButtonElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLOptionButtonElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLOptionButtonElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLOptionButtonElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLOptionButtonElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLOptionButtonElementEvents_GUID = "3050f2bd-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLOptionButtonElementEvents = LibC::GUID.new(0x3050f2bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLOptionButtonElementEvents
    lpVtbl : HTMLOptionButtonElementEventsVTbl*
  end

  struct HTMLInputFileElementEventsVTbl
    query_interface : Proc(HTMLInputFileElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputFileElementEvents*, UInt32)
    release : Proc(HTMLInputFileElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLInputFileElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputFileElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputFileElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputFileElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputFileElementEvents_GUID = "3050f2af-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputFileElementEvents = LibC::GUID.new(0x3050f2af_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputFileElementEvents
    lpVtbl : HTMLInputFileElementEventsVTbl*
  end

  struct HTMLInputImageEventsVTbl
    query_interface : Proc(HTMLInputImageEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLInputImageEvents*, UInt32)
    release : Proc(HTMLInputImageEvents*, UInt32)
    get_type_info_count : Proc(HTMLInputImageEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLInputImageEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLInputImageEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLInputImageEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLInputImageEvents_GUID = "3050f2c3-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLInputImageEvents = LibC::GUID.new(0x3050f2c3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLInputImageEvents
    lpVtbl : HTMLInputImageEventsVTbl*
  end

  struct IHTMLInputElementVTbl
    query_interface : Proc(IHTMLInputElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputElement*, UInt32)
    release : Proc(IHTMLInputElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_status : Proc(IHTMLInputElement*, Int16*, HRESULT)
    put_disabled : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLInputElement*, IHTMLFormElement*, HRESULT)
    put_size : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_size : Proc(IHTMLInputElement*, Int32*, HRESULT)
    put_max_length : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_max_length : Proc(IHTMLInputElement*, Int32*, HRESULT)
    select : Proc(IHTMLInputElement*, HRESULT)
    put_onchange : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_default_value : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_default_value : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_read_only : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_read_only : Proc(IHTMLInputElement*, Int16*, HRESULT)
    create_text_range : Proc(IHTMLInputElement*, IHTMLTxtRange*, HRESULT)
    put_indeterminate : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_indeterminate : Proc(IHTMLInputElement*, Int16*, HRESULT)
    put_default_checked : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_default_checked : Proc(IHTMLInputElement*, Int16*, HRESULT)
    put_checked : Proc(IHTMLInputElement*, Int16, HRESULT)
    get_checked : Proc(IHTMLInputElement*, Int16*, HRESULT)
    put_border : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_border : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_vspace : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_vspace : Proc(IHTMLInputElement*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_hspace : Proc(IHTMLInputElement*, Int32*, HRESULT)
    put_alt : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_src : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_lowsrc : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_lowsrc : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_vrml : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_vrml : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_dynsrc : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_dynsrc : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    get_ready_state : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    get_complete : Proc(IHTMLInputElement*, Int16*, HRESULT)
    put_loop : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_loop : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_align : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLInputElement*, UInt8**, HRESULT)
    put_onload : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_onabort : Proc(IHTMLInputElement*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLInputElement*, VARIANT*, HRESULT)
    put_width : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_width : Proc(IHTMLInputElement*, Int32*, HRESULT)
    put_height : Proc(IHTMLInputElement*, Int32, HRESULT)
    get_height : Proc(IHTMLInputElement*, Int32*, HRESULT)
    put_start : Proc(IHTMLInputElement*, UInt8*, HRESULT)
    get_start : Proc(IHTMLInputElement*, UInt8**, HRESULT)
  end

  IHTMLInputElement_GUID = "3050f5d2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputElement = LibC::GUID.new(0x3050f5d2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputElement
    lpVtbl : IHTMLInputElementVTbl*
  end

  struct IHTMLInputElement2VTbl
    query_interface : Proc(IHTMLInputElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputElement2*, UInt32)
    release : Proc(IHTMLInputElement2*, UInt32)
    get_type_info_count : Proc(IHTMLInputElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_accept : Proc(IHTMLInputElement2*, UInt8*, HRESULT)
    get_accept : Proc(IHTMLInputElement2*, UInt8**, HRESULT)
    put_use_map : Proc(IHTMLInputElement2*, UInt8*, HRESULT)
    get_use_map : Proc(IHTMLInputElement2*, UInt8**, HRESULT)
  end

  IHTMLInputElement2_GUID = "3050f821-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputElement2 = LibC::GUID.new(0x3050f821_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputElement2
    lpVtbl : IHTMLInputElement2VTbl*
  end

  struct IHTMLInputElement3VTbl
    query_interface : Proc(IHTMLInputElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputElement3*, UInt32)
    release : Proc(IHTMLInputElement3*, UInt32)
    get_type_info_count : Proc(IHTMLInputElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLInputElement3*, UInt8*, HRESULT)
    get_src : Proc(IHTMLInputElement3*, UInt8**, HRESULT)
    put_lowsrc : Proc(IHTMLInputElement3*, UInt8*, HRESULT)
    get_lowsrc : Proc(IHTMLInputElement3*, UInt8**, HRESULT)
    put_vrml : Proc(IHTMLInputElement3*, UInt8*, HRESULT)
    get_vrml : Proc(IHTMLInputElement3*, UInt8**, HRESULT)
    put_dynsrc : Proc(IHTMLInputElement3*, UInt8*, HRESULT)
    get_dynsrc : Proc(IHTMLInputElement3*, UInt8**, HRESULT)
  end

  IHTMLInputElement3_GUID = "30510435-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputElement3 = LibC::GUID.new(0x30510435_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputElement3
    lpVtbl : IHTMLInputElement3VTbl*
  end

  struct IHTMLInputButtonElementVTbl
    query_interface : Proc(IHTMLInputButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputButtonElement*, UInt32)
    release : Proc(IHTMLInputButtonElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLInputButtonElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLInputButtonElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputButtonElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputButtonElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputButtonElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLInputButtonElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLInputButtonElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLInputButtonElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputButtonElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLInputButtonElement*, IHTMLFormElement*, HRESULT)
    create_text_range : Proc(IHTMLInputButtonElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLInputButtonElement_GUID = "3050f2b2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputButtonElement = LibC::GUID.new(0x3050f2b2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputButtonElement
    lpVtbl : IHTMLInputButtonElementVTbl*
  end

  struct IHTMLInputHiddenElementVTbl
    query_interface : Proc(IHTMLInputHiddenElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputHiddenElement*, UInt32)
    release : Proc(IHTMLInputHiddenElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputHiddenElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputHiddenElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputHiddenElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputHiddenElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLInputHiddenElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLInputHiddenElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputHiddenElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputHiddenElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputHiddenElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLInputHiddenElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLInputHiddenElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLInputHiddenElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputHiddenElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLInputHiddenElement*, IHTMLFormElement*, HRESULT)
    create_text_range : Proc(IHTMLInputHiddenElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLInputHiddenElement_GUID = "3050f2a4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputHiddenElement = LibC::GUID.new(0x3050f2a4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputHiddenElement
    lpVtbl : IHTMLInputHiddenElementVTbl*
  end

  struct IHTMLInputTextElementVTbl
    query_interface : Proc(IHTMLInputTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputTextElement*, UInt32)
    release : Proc(IHTMLInputTextElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLInputTextElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLInputTextElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputTextElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputTextElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputTextElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLInputTextElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLInputTextElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLInputTextElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputTextElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLInputTextElement*, IHTMLFormElement*, HRESULT)
    put_default_value : Proc(IHTMLInputTextElement*, UInt8*, HRESULT)
    get_default_value : Proc(IHTMLInputTextElement*, UInt8**, HRESULT)
    put_size : Proc(IHTMLInputTextElement*, Int32, HRESULT)
    get_size : Proc(IHTMLInputTextElement*, Int32*, HRESULT)
    put_max_length : Proc(IHTMLInputTextElement*, Int32, HRESULT)
    get_max_length : Proc(IHTMLInputTextElement*, Int32*, HRESULT)
    select : Proc(IHTMLInputTextElement*, HRESULT)
    put_onchange : Proc(IHTMLInputTextElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLInputTextElement*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLInputTextElement*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLInputTextElement*, VARIANT*, HRESULT)
    put_read_only : Proc(IHTMLInputTextElement*, Int16, HRESULT)
    get_read_only : Proc(IHTMLInputTextElement*, Int16*, HRESULT)
    create_text_range : Proc(IHTMLInputTextElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLInputTextElement_GUID = "3050f2a6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputTextElement = LibC::GUID.new(0x3050f2a6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputTextElement
    lpVtbl : IHTMLInputTextElementVTbl*
  end

  struct IHTMLInputTextElement2VTbl
    query_interface : Proc(IHTMLInputTextElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputTextElement2*, UInt32)
    release : Proc(IHTMLInputTextElement2*, UInt32)
    get_type_info_count : Proc(IHTMLInputTextElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputTextElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputTextElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputTextElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selection_start : Proc(IHTMLInputTextElement2*, Int32, HRESULT)
    get_selection_start : Proc(IHTMLInputTextElement2*, Int32*, HRESULT)
    put_selection_end : Proc(IHTMLInputTextElement2*, Int32, HRESULT)
    get_selection_end : Proc(IHTMLInputTextElement2*, Int32*, HRESULT)
    set_selection_range : Proc(IHTMLInputTextElement2*, Int32, Int32, HRESULT)
  end

  IHTMLInputTextElement2_GUID = "3050f2d2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputTextElement2 = LibC::GUID.new(0x3050f2d2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputTextElement2
    lpVtbl : IHTMLInputTextElement2VTbl*
  end

  struct IHTMLInputFileElementVTbl
    query_interface : Proc(IHTMLInputFileElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputFileElement*, UInt32)
    release : Proc(IHTMLInputFileElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputFileElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputFileElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputFileElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputFileElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLInputFileElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputFileElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputFileElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLInputFileElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLInputFileElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLInputFileElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputFileElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLInputFileElement*, IHTMLFormElement*, HRESULT)
    put_size : Proc(IHTMLInputFileElement*, Int32, HRESULT)
    get_size : Proc(IHTMLInputFileElement*, Int32*, HRESULT)
    put_max_length : Proc(IHTMLInputFileElement*, Int32, HRESULT)
    get_max_length : Proc(IHTMLInputFileElement*, Int32*, HRESULT)
    select : Proc(IHTMLInputFileElement*, HRESULT)
    put_onchange : Proc(IHTMLInputFileElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLInputFileElement*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLInputFileElement*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLInputFileElement*, VARIANT*, HRESULT)
    put_value : Proc(IHTMLInputFileElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputFileElement*, UInt8**, HRESULT)
  end

  IHTMLInputFileElement_GUID = "3050f2ad-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputFileElement = LibC::GUID.new(0x3050f2ad_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputFileElement
    lpVtbl : IHTMLInputFileElementVTbl*
  end

  struct IHTMLOptionButtonElementVTbl
    query_interface : Proc(IHTMLOptionButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionButtonElement*, UInt32)
    release : Proc(IHTMLOptionButtonElement*, UInt32)
    get_type_info_count : Proc(IHTMLOptionButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_value : Proc(IHTMLOptionButtonElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLOptionButtonElement*, UInt8**, HRESULT)
    get_type : Proc(IHTMLOptionButtonElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLOptionButtonElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLOptionButtonElement*, UInt8**, HRESULT)
    put_checked : Proc(IHTMLOptionButtonElement*, Int16, HRESULT)
    get_checked : Proc(IHTMLOptionButtonElement*, Int16*, HRESULT)
    put_default_checked : Proc(IHTMLOptionButtonElement*, Int16, HRESULT)
    get_default_checked : Proc(IHTMLOptionButtonElement*, Int16*, HRESULT)
    put_onchange : Proc(IHTMLOptionButtonElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLOptionButtonElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLOptionButtonElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLOptionButtonElement*, Int16*, HRESULT)
    put_status : Proc(IHTMLOptionButtonElement*, Int16, HRESULT)
    get_status : Proc(IHTMLOptionButtonElement*, Int16*, HRESULT)
    put_indeterminate : Proc(IHTMLOptionButtonElement*, Int16, HRESULT)
    get_indeterminate : Proc(IHTMLOptionButtonElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLOptionButtonElement*, IHTMLFormElement*, HRESULT)
  end

  IHTMLOptionButtonElement_GUID = "3050f2bc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionButtonElement = LibC::GUID.new(0x3050f2bc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionButtonElement
    lpVtbl : IHTMLOptionButtonElementVTbl*
  end

  struct IHTMLInputImageVTbl
    query_interface : Proc(IHTMLInputImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputImage*, UInt32)
    release : Proc(IHTMLInputImage*, UInt32)
    get_type_info_count : Proc(IHTMLInputImage*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputImage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputImage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputImage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_disabled : Proc(IHTMLInputImage*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputImage*, Int16*, HRESULT)
    put_border : Proc(IHTMLInputImage*, VARIANT, HRESULT)
    get_border : Proc(IHTMLInputImage*, VARIANT*, HRESULT)
    put_vspace : Proc(IHTMLInputImage*, Int32, HRESULT)
    get_vspace : Proc(IHTMLInputImage*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLInputImage*, Int32, HRESULT)
    get_hspace : Proc(IHTMLInputImage*, Int32*, HRESULT)
    put_alt : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_src : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_src : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_lowsrc : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_lowsrc : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_vrml : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_vrml : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_dynsrc : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_dynsrc : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    get_ready_state : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    get_complete : Proc(IHTMLInputImage*, Int16*, HRESULT)
    put_loop : Proc(IHTMLInputImage*, VARIANT, HRESULT)
    get_loop : Proc(IHTMLInputImage*, VARIANT*, HRESULT)
    put_align : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_align : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_onload : Proc(IHTMLInputImage*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLInputImage*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLInputImage*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLInputImage*, VARIANT*, HRESULT)
    put_onabort : Proc(IHTMLInputImage*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLInputImage*, VARIANT*, HRESULT)
    put_name : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputImage*, UInt8**, HRESULT)
    put_width : Proc(IHTMLInputImage*, Int32, HRESULT)
    get_width : Proc(IHTMLInputImage*, Int32*, HRESULT)
    put_height : Proc(IHTMLInputImage*, Int32, HRESULT)
    get_height : Proc(IHTMLInputImage*, Int32*, HRESULT)
    put_start : Proc(IHTMLInputImage*, UInt8*, HRESULT)
    get_start : Proc(IHTMLInputImage*, UInt8**, HRESULT)
  end

  IHTMLInputImage_GUID = "3050f2c2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputImage = LibC::GUID.new(0x3050f2c2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputImage
    lpVtbl : IHTMLInputImageVTbl*
  end

  struct IHTMLInputRangeElementVTbl
    query_interface : Proc(IHTMLInputRangeElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLInputRangeElement*, UInt32)
    release : Proc(IHTMLInputRangeElement*, UInt32)
    get_type_info_count : Proc(IHTMLInputRangeElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLInputRangeElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLInputRangeElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLInputRangeElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_disabled : Proc(IHTMLInputRangeElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLInputRangeElement*, Int16*, HRESULT)
    get_type : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_alt : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_min : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_min : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_max : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_max : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_step : Proc(IHTMLInputRangeElement*, UInt8*, HRESULT)
    get_step : Proc(IHTMLInputRangeElement*, UInt8**, HRESULT)
    put_value_as_number : Proc(IHTMLInputRangeElement*, Float64, HRESULT)
    get_value_as_number : Proc(IHTMLInputRangeElement*, Float64*, HRESULT)
    step_up : Proc(IHTMLInputRangeElement*, Int32, HRESULT)
    step_down : Proc(IHTMLInputRangeElement*, Int32, HRESULT)
  end

  IHTMLInputRangeElement_GUID = "3050f2d4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLInputRangeElement = LibC::GUID.new(0x3050f2d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLInputRangeElement
    lpVtbl : IHTMLInputRangeElementVTbl*
  end

  struct DispHTMLInputElementVTbl
    query_interface : Proc(DispHTMLInputElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLInputElement*, UInt32)
    release : Proc(DispHTMLInputElement*, UInt32)
    get_type_info_count : Proc(DispHTMLInputElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLInputElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLInputElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLInputElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLInputElement_GUID = "3050f57d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLInputElement = LibC::GUID.new(0x3050f57d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLInputElement
    lpVtbl : DispHTMLInputElementVTbl*
  end

  struct IHTMLTextAreaElementVTbl
    query_interface : Proc(IHTMLTextAreaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextAreaElement*, UInt32)
    release : Proc(IHTMLTextAreaElement*, UInt32)
    get_type_info_count : Proc(IHTMLTextAreaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextAreaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextAreaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextAreaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLTextAreaElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLTextAreaElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLTextAreaElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLTextAreaElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLTextAreaElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLTextAreaElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLTextAreaElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLTextAreaElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLTextAreaElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLTextAreaElement*, IHTMLFormElement*, HRESULT)
    put_default_value : Proc(IHTMLTextAreaElement*, UInt8*, HRESULT)
    get_default_value : Proc(IHTMLTextAreaElement*, UInt8**, HRESULT)
    select : Proc(IHTMLTextAreaElement*, HRESULT)
    put_onchange : Proc(IHTMLTextAreaElement*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLTextAreaElement*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLTextAreaElement*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLTextAreaElement*, VARIANT*, HRESULT)
    put_read_only : Proc(IHTMLTextAreaElement*, Int16, HRESULT)
    get_read_only : Proc(IHTMLTextAreaElement*, Int16*, HRESULT)
    put_rows : Proc(IHTMLTextAreaElement*, Int32, HRESULT)
    get_rows : Proc(IHTMLTextAreaElement*, Int32*, HRESULT)
    put_cols : Proc(IHTMLTextAreaElement*, Int32, HRESULT)
    get_cols : Proc(IHTMLTextAreaElement*, Int32*, HRESULT)
    put_wrap : Proc(IHTMLTextAreaElement*, UInt8*, HRESULT)
    get_wrap : Proc(IHTMLTextAreaElement*, UInt8**, HRESULT)
    create_text_range : Proc(IHTMLTextAreaElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLTextAreaElement_GUID = "3050f2aa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextAreaElement = LibC::GUID.new(0x3050f2aa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextAreaElement
    lpVtbl : IHTMLTextAreaElementVTbl*
  end

  struct IHTMLTextAreaElement2VTbl
    query_interface : Proc(IHTMLTextAreaElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTextAreaElement2*, UInt32)
    release : Proc(IHTMLTextAreaElement2*, UInt32)
    get_type_info_count : Proc(IHTMLTextAreaElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTextAreaElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTextAreaElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTextAreaElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_selection_start : Proc(IHTMLTextAreaElement2*, Int32, HRESULT)
    get_selection_start : Proc(IHTMLTextAreaElement2*, Int32*, HRESULT)
    put_selection_end : Proc(IHTMLTextAreaElement2*, Int32, HRESULT)
    get_selection_end : Proc(IHTMLTextAreaElement2*, Int32*, HRESULT)
    set_selection_range : Proc(IHTMLTextAreaElement2*, Int32, Int32, HRESULT)
  end

  IHTMLTextAreaElement2_GUID = "3050f2d3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTextAreaElement2 = LibC::GUID.new(0x3050f2d3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTextAreaElement2
    lpVtbl : IHTMLTextAreaElement2VTbl*
  end

  struct DispHTMLTextAreaElementVTbl
    query_interface : Proc(DispHTMLTextAreaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTextAreaElement*, UInt32)
    release : Proc(DispHTMLTextAreaElement*, UInt32)
    get_type_info_count : Proc(DispHTMLTextAreaElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTextAreaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTextAreaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTextAreaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTextAreaElement_GUID = "3050f521-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTextAreaElement = LibC::GUID.new(0x3050f521_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTextAreaElement
    lpVtbl : DispHTMLTextAreaElementVTbl*
  end

  struct DispHTMLRichtextElementVTbl
    query_interface : Proc(DispHTMLRichtextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLRichtextElement*, UInt32)
    release : Proc(DispHTMLRichtextElement*, UInt32)
    get_type_info_count : Proc(DispHTMLRichtextElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLRichtextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLRichtextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLRichtextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLRichtextElement_GUID = "3050f54d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLRichtextElement = LibC::GUID.new(0x3050f54d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLRichtextElement
    lpVtbl : DispHTMLRichtextElementVTbl*
  end

  struct IHTMLButtonElementVTbl
    query_interface : Proc(IHTMLButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLButtonElement*, UInt32)
    release : Proc(IHTMLButtonElement*, UInt32)
    get_type_info_count : Proc(IHTMLButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLButtonElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLButtonElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLButtonElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLButtonElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLButtonElement*, UInt8**, HRESULT)
    put_status : Proc(IHTMLButtonElement*, VARIANT, HRESULT)
    get_status : Proc(IHTMLButtonElement*, VARIANT*, HRESULT)
    put_disabled : Proc(IHTMLButtonElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLButtonElement*, Int16*, HRESULT)
    get_form : Proc(IHTMLButtonElement*, IHTMLFormElement*, HRESULT)
    create_text_range : Proc(IHTMLButtonElement*, IHTMLTxtRange*, HRESULT)
  end

  IHTMLButtonElement_GUID = "3050f2bb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLButtonElement = LibC::GUID.new(0x3050f2bb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLButtonElement
    lpVtbl : IHTMLButtonElementVTbl*
  end

  struct IHTMLButtonElement2VTbl
    query_interface : Proc(IHTMLButtonElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLButtonElement2*, UInt32)
    release : Proc(IHTMLButtonElement2*, UInt32)
    get_type_info_count : Proc(IHTMLButtonElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLButtonElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLButtonElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLButtonElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(IHTMLButtonElement2*, UInt8*, HRESULT)
    get_type : Proc(IHTMLButtonElement2*, UInt8**, HRESULT)
  end

  IHTMLButtonElement2_GUID = "305106f3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLButtonElement2 = LibC::GUID.new(0x305106f3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLButtonElement2
    lpVtbl : IHTMLButtonElement2VTbl*
  end

  struct DispHTMLButtonElementVTbl
    query_interface : Proc(DispHTMLButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLButtonElement*, UInt32)
    release : Proc(DispHTMLButtonElement*, UInt32)
    get_type_info_count : Proc(DispHTMLButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLButtonElement_GUID = "3050f51f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLButtonElement = LibC::GUID.new(0x3050f51f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLButtonElement
    lpVtbl : DispHTMLButtonElementVTbl*
  end

  struct HTMLMarqueeElementEvents2VTbl
    query_interface : Proc(HTMLMarqueeElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLMarqueeElementEvents2*, UInt32)
    release : Proc(HTMLMarqueeElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLMarqueeElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLMarqueeElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLMarqueeElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLMarqueeElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLMarqueeElementEvents2_GUID = "3050f61f-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLMarqueeElementEvents2 = LibC::GUID.new(0x3050f61f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLMarqueeElementEvents2
    lpVtbl : HTMLMarqueeElementEvents2VTbl*
  end

  struct HTMLMarqueeElementEventsVTbl
    query_interface : Proc(HTMLMarqueeElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLMarqueeElementEvents*, UInt32)
    release : Proc(HTMLMarqueeElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLMarqueeElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLMarqueeElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLMarqueeElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLMarqueeElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLMarqueeElementEvents_GUID = "3050f2b8-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLMarqueeElementEvents = LibC::GUID.new(0x3050f2b8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLMarqueeElementEvents
    lpVtbl : HTMLMarqueeElementEventsVTbl*
  end

  struct IHTMLMarqueeElementVTbl
    query_interface : Proc(IHTMLMarqueeElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMarqueeElement*, UInt32)
    release : Proc(IHTMLMarqueeElement*, UInt32)
    get_type_info_count : Proc(IHTMLMarqueeElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMarqueeElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMarqueeElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMarqueeElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_bg_color : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_scroll_delay : Proc(IHTMLMarqueeElement*, Int32, HRESULT)
    get_scroll_delay : Proc(IHTMLMarqueeElement*, Int32*, HRESULT)
    put_direction : Proc(IHTMLMarqueeElement*, UInt8*, HRESULT)
    get_direction : Proc(IHTMLMarqueeElement*, UInt8**, HRESULT)
    put_behavior : Proc(IHTMLMarqueeElement*, UInt8*, HRESULT)
    get_behavior : Proc(IHTMLMarqueeElement*, UInt8**, HRESULT)
    put_scroll_amount : Proc(IHTMLMarqueeElement*, Int32, HRESULT)
    get_scroll_amount : Proc(IHTMLMarqueeElement*, Int32*, HRESULT)
    put_loop : Proc(IHTMLMarqueeElement*, Int32, HRESULT)
    get_loop : Proc(IHTMLMarqueeElement*, Int32*, HRESULT)
    put_vspace : Proc(IHTMLMarqueeElement*, Int32, HRESULT)
    get_vspace : Proc(IHTMLMarqueeElement*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLMarqueeElement*, Int32, HRESULT)
    get_hspace : Proc(IHTMLMarqueeElement*, Int32*, HRESULT)
    put_onfinish : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_onfinish : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_onstart : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_onstart : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_onbounce : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_onbounce : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_width : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_width : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLMarqueeElement*, VARIANT, HRESULT)
    get_height : Proc(IHTMLMarqueeElement*, VARIANT*, HRESULT)
    put_true_speed : Proc(IHTMLMarqueeElement*, Int16, HRESULT)
    get_true_speed : Proc(IHTMLMarqueeElement*, Int16*, HRESULT)
    start : Proc(IHTMLMarqueeElement*, HRESULT)
    stop : Proc(IHTMLMarqueeElement*, HRESULT)
  end

  IHTMLMarqueeElement_GUID = "3050f2b5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMarqueeElement = LibC::GUID.new(0x3050f2b5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMarqueeElement
    lpVtbl : IHTMLMarqueeElementVTbl*
  end

  struct DispHTMLMarqueeElementVTbl
    query_interface : Proc(DispHTMLMarqueeElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMarqueeElement*, UInt32)
    release : Proc(DispHTMLMarqueeElement*, UInt32)
    get_type_info_count : Proc(DispHTMLMarqueeElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMarqueeElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMarqueeElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMarqueeElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMarqueeElement_GUID = "3050f527-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMarqueeElement = LibC::GUID.new(0x3050f527_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMarqueeElement
    lpVtbl : DispHTMLMarqueeElementVTbl*
  end

  struct IHTMLHtmlElementVTbl
    query_interface : Proc(IHTMLHtmlElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLHtmlElement*, UInt32)
    release : Proc(IHTMLHtmlElement*, UInt32)
    get_type_info_count : Proc(IHTMLHtmlElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLHtmlElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLHtmlElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLHtmlElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_version : Proc(IHTMLHtmlElement*, UInt8*, HRESULT)
    get_version : Proc(IHTMLHtmlElement*, UInt8**, HRESULT)
  end

  IHTMLHtmlElement_GUID = "3050f81c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLHtmlElement = LibC::GUID.new(0x3050f81c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLHtmlElement
    lpVtbl : IHTMLHtmlElementVTbl*
  end

  struct IHTMLHeadElementVTbl
    query_interface : Proc(IHTMLHeadElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLHeadElement*, UInt32)
    release : Proc(IHTMLHeadElement*, UInt32)
    get_type_info_count : Proc(IHTMLHeadElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLHeadElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLHeadElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLHeadElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_profile : Proc(IHTMLHeadElement*, UInt8*, HRESULT)
    get_profile : Proc(IHTMLHeadElement*, UInt8**, HRESULT)
  end

  IHTMLHeadElement_GUID = "3050f81d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLHeadElement = LibC::GUID.new(0x3050f81d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLHeadElement
    lpVtbl : IHTMLHeadElementVTbl*
  end

  struct IHTMLHeadElement2VTbl
    query_interface : Proc(IHTMLHeadElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLHeadElement2*, UInt32)
    release : Proc(IHTMLHeadElement2*, UInt32)
    get_type_info_count : Proc(IHTMLHeadElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLHeadElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLHeadElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLHeadElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_profile : Proc(IHTMLHeadElement2*, UInt8*, HRESULT)
    get_profile : Proc(IHTMLHeadElement2*, UInt8**, HRESULT)
  end

  IHTMLHeadElement2_GUID = "3051042f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLHeadElement2 = LibC::GUID.new(0x3051042f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLHeadElement2
    lpVtbl : IHTMLHeadElement2VTbl*
  end

  struct IHTMLTitleElementVTbl
    query_interface : Proc(IHTMLTitleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTitleElement*, UInt32)
    release : Proc(IHTMLTitleElement*, UInt32)
    get_type_info_count : Proc(IHTMLTitleElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTitleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTitleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTitleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_text : Proc(IHTMLTitleElement*, UInt8*, HRESULT)
    get_text : Proc(IHTMLTitleElement*, UInt8**, HRESULT)
  end

  IHTMLTitleElement_GUID = "3050f322-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTitleElement = LibC::GUID.new(0x3050f322_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTitleElement
    lpVtbl : IHTMLTitleElementVTbl*
  end

  struct IHTMLMetaElementVTbl
    query_interface : Proc(IHTMLMetaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMetaElement*, UInt32)
    release : Proc(IHTMLMetaElement*, UInt32)
    get_type_info_count : Proc(IHTMLMetaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMetaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMetaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMetaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_http_equiv : Proc(IHTMLMetaElement*, UInt8*, HRESULT)
    get_http_equiv : Proc(IHTMLMetaElement*, UInt8**, HRESULT)
    put_content : Proc(IHTMLMetaElement*, UInt8*, HRESULT)
    get_content : Proc(IHTMLMetaElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLMetaElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLMetaElement*, UInt8**, HRESULT)
    put_url : Proc(IHTMLMetaElement*, UInt8*, HRESULT)
    get_url : Proc(IHTMLMetaElement*, UInt8**, HRESULT)
    put_charset : Proc(IHTMLMetaElement*, UInt8*, HRESULT)
    get_charset : Proc(IHTMLMetaElement*, UInt8**, HRESULT)
  end

  IHTMLMetaElement_GUID = "3050f203-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMetaElement = LibC::GUID.new(0x3050f203_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMetaElement
    lpVtbl : IHTMLMetaElementVTbl*
  end

  struct IHTMLMetaElement2VTbl
    query_interface : Proc(IHTMLMetaElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMetaElement2*, UInt32)
    release : Proc(IHTMLMetaElement2*, UInt32)
    get_type_info_count : Proc(IHTMLMetaElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMetaElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMetaElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMetaElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_scheme : Proc(IHTMLMetaElement2*, UInt8*, HRESULT)
    get_scheme : Proc(IHTMLMetaElement2*, UInt8**, HRESULT)
  end

  IHTMLMetaElement2_GUID = "3050f81f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMetaElement2 = LibC::GUID.new(0x3050f81f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMetaElement2
    lpVtbl : IHTMLMetaElement2VTbl*
  end

  struct IHTMLMetaElement3VTbl
    query_interface : Proc(IHTMLMetaElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMetaElement3*, UInt32)
    release : Proc(IHTMLMetaElement3*, UInt32)
    get_type_info_count : Proc(IHTMLMetaElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMetaElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMetaElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMetaElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_url : Proc(IHTMLMetaElement3*, UInt8*, HRESULT)
    get_url : Proc(IHTMLMetaElement3*, UInt8**, HRESULT)
  end

  IHTMLMetaElement3_GUID = "30510495-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMetaElement3 = LibC::GUID.new(0x30510495_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMetaElement3
    lpVtbl : IHTMLMetaElement3VTbl*
  end

  struct IHTMLBaseElementVTbl
    query_interface : Proc(IHTMLBaseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBaseElement*, UInt32)
    release : Proc(IHTMLBaseElement*, UInt32)
    get_type_info_count : Proc(IHTMLBaseElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBaseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBaseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBaseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLBaseElement*, UInt8*, HRESULT)
    get_href : Proc(IHTMLBaseElement*, UInt8**, HRESULT)
    put_target : Proc(IHTMLBaseElement*, UInt8*, HRESULT)
    get_target : Proc(IHTMLBaseElement*, UInt8**, HRESULT)
  end

  IHTMLBaseElement_GUID = "3050f204-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBaseElement = LibC::GUID.new(0x3050f204_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBaseElement
    lpVtbl : IHTMLBaseElementVTbl*
  end

  struct IHTMLBaseElement2VTbl
    query_interface : Proc(IHTMLBaseElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBaseElement2*, UInt32)
    release : Proc(IHTMLBaseElement2*, UInt32)
    get_type_info_count : Proc(IHTMLBaseElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBaseElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBaseElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBaseElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLBaseElement2*, UInt8*, HRESULT)
    get_href : Proc(IHTMLBaseElement2*, UInt8**, HRESULT)
  end

  IHTMLBaseElement2_GUID = "30510420-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBaseElement2 = LibC::GUID.new(0x30510420_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBaseElement2
    lpVtbl : IHTMLBaseElement2VTbl*
  end

  struct DispHTMLHtmlElementVTbl
    query_interface : Proc(DispHTMLHtmlElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLHtmlElement*, UInt32)
    release : Proc(DispHTMLHtmlElement*, UInt32)
    get_type_info_count : Proc(DispHTMLHtmlElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLHtmlElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLHtmlElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLHtmlElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLHtmlElement_GUID = "3050f560-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLHtmlElement = LibC::GUID.new(0x3050f560_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLHtmlElement
    lpVtbl : DispHTMLHtmlElementVTbl*
  end

  struct DispHTMLHeadElementVTbl
    query_interface : Proc(DispHTMLHeadElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLHeadElement*, UInt32)
    release : Proc(DispHTMLHeadElement*, UInt32)
    get_type_info_count : Proc(DispHTMLHeadElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLHeadElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLHeadElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLHeadElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLHeadElement_GUID = "3050f561-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLHeadElement = LibC::GUID.new(0x3050f561_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLHeadElement
    lpVtbl : DispHTMLHeadElementVTbl*
  end

  struct DispHTMLTitleElementVTbl
    query_interface : Proc(DispHTMLTitleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTitleElement*, UInt32)
    release : Proc(DispHTMLTitleElement*, UInt32)
    get_type_info_count : Proc(DispHTMLTitleElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTitleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTitleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTitleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTitleElement_GUID = "3050f516-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTitleElement = LibC::GUID.new(0x3050f516_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTitleElement
    lpVtbl : DispHTMLTitleElementVTbl*
  end

  struct DispHTMLMetaElementVTbl
    query_interface : Proc(DispHTMLMetaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMetaElement*, UInt32)
    release : Proc(DispHTMLMetaElement*, UInt32)
    get_type_info_count : Proc(DispHTMLMetaElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMetaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMetaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMetaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMetaElement_GUID = "3050f517-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMetaElement = LibC::GUID.new(0x3050f517_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMetaElement
    lpVtbl : DispHTMLMetaElementVTbl*
  end

  struct DispHTMLBaseElementVTbl
    query_interface : Proc(DispHTMLBaseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBaseElement*, UInt32)
    release : Proc(DispHTMLBaseElement*, UInt32)
    get_type_info_count : Proc(DispHTMLBaseElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBaseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBaseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBaseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBaseElement_GUID = "3050f518-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBaseElement = LibC::GUID.new(0x3050f518_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBaseElement
    lpVtbl : DispHTMLBaseElementVTbl*
  end

  struct IHTMLIsIndexElementVTbl
    query_interface : Proc(IHTMLIsIndexElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIsIndexElement*, UInt32)
    release : Proc(IHTMLIsIndexElement*, UInt32)
    get_type_info_count : Proc(IHTMLIsIndexElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIsIndexElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIsIndexElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIsIndexElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_prompt : Proc(IHTMLIsIndexElement*, UInt8*, HRESULT)
    get_prompt : Proc(IHTMLIsIndexElement*, UInt8**, HRESULT)
    put_action : Proc(IHTMLIsIndexElement*, UInt8*, HRESULT)
    get_action : Proc(IHTMLIsIndexElement*, UInt8**, HRESULT)
  end

  IHTMLIsIndexElement_GUID = "3050f206-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIsIndexElement = LibC::GUID.new(0x3050f206_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIsIndexElement
    lpVtbl : IHTMLIsIndexElementVTbl*
  end

  struct IHTMLIsIndexElement2VTbl
    query_interface : Proc(IHTMLIsIndexElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIsIndexElement2*, UInt32)
    release : Proc(IHTMLIsIndexElement2*, UInt32)
    get_type_info_count : Proc(IHTMLIsIndexElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIsIndexElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIsIndexElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIsIndexElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_form : Proc(IHTMLIsIndexElement2*, IHTMLFormElement*, HRESULT)
  end

  IHTMLIsIndexElement2_GUID = "3050f82f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIsIndexElement2 = LibC::GUID.new(0x3050f82f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIsIndexElement2
    lpVtbl : IHTMLIsIndexElement2VTbl*
  end

  struct IHTMLNextIdElementVTbl
    query_interface : Proc(IHTMLNextIdElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLNextIdElement*, UInt32)
    release : Proc(IHTMLNextIdElement*, UInt32)
    get_type_info_count : Proc(IHTMLNextIdElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLNextIdElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLNextIdElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLNextIdElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_n : Proc(IHTMLNextIdElement*, UInt8*, HRESULT)
    get_n : Proc(IHTMLNextIdElement*, UInt8**, HRESULT)
  end

  IHTMLNextIdElement_GUID = "3050f207-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLNextIdElement = LibC::GUID.new(0x3050f207_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLNextIdElement
    lpVtbl : IHTMLNextIdElementVTbl*
  end

  struct DispHTMLIsIndexElementVTbl
    query_interface : Proc(DispHTMLIsIndexElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLIsIndexElement*, UInt32)
    release : Proc(DispHTMLIsIndexElement*, UInt32)
    get_type_info_count : Proc(DispHTMLIsIndexElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLIsIndexElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLIsIndexElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLIsIndexElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLIsIndexElement_GUID = "3050f519-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLIsIndexElement = LibC::GUID.new(0x3050f519_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLIsIndexElement
    lpVtbl : DispHTMLIsIndexElementVTbl*
  end

  struct DispHTMLNextIdElementVTbl
    query_interface : Proc(DispHTMLNextIdElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLNextIdElement*, UInt32)
    release : Proc(DispHTMLNextIdElement*, UInt32)
    get_type_info_count : Proc(DispHTMLNextIdElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLNextIdElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLNextIdElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLNextIdElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLNextIdElement_GUID = "3050f51a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLNextIdElement = LibC::GUID.new(0x3050f51a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLNextIdElement
    lpVtbl : DispHTMLNextIdElementVTbl*
  end

  struct IHTMLBaseFontElementVTbl
    query_interface : Proc(IHTMLBaseFontElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBaseFontElement*, UInt32)
    release : Proc(IHTMLBaseFontElement*, UInt32)
    get_type_info_count : Proc(IHTMLBaseFontElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBaseFontElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBaseFontElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBaseFontElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_color : Proc(IHTMLBaseFontElement*, VARIANT, HRESULT)
    get_color : Proc(IHTMLBaseFontElement*, VARIANT*, HRESULT)
    put_face : Proc(IHTMLBaseFontElement*, UInt8*, HRESULT)
    get_face : Proc(IHTMLBaseFontElement*, UInt8**, HRESULT)
    put_size : Proc(IHTMLBaseFontElement*, Int32, HRESULT)
    get_size : Proc(IHTMLBaseFontElement*, Int32*, HRESULT)
  end

  IHTMLBaseFontElement_GUID = "3050f202-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBaseFontElement = LibC::GUID.new(0x3050f202_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBaseFontElement
    lpVtbl : IHTMLBaseFontElementVTbl*
  end

  struct DispHTMLBaseFontElementVTbl
    query_interface : Proc(DispHTMLBaseFontElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBaseFontElement*, UInt32)
    release : Proc(DispHTMLBaseFontElement*, UInt32)
    get_type_info_count : Proc(DispHTMLBaseFontElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBaseFontElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBaseFontElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBaseFontElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBaseFontElement_GUID = "3050f504-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBaseFontElement = LibC::GUID.new(0x3050f504_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBaseFontElement
    lpVtbl : DispHTMLBaseFontElementVTbl*
  end

  struct IHTMLUnknownElementVTbl
    query_interface : Proc(IHTMLUnknownElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLUnknownElement*, UInt32)
    release : Proc(IHTMLUnknownElement*, UInt32)
    get_type_info_count : Proc(IHTMLUnknownElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLUnknownElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLUnknownElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLUnknownElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLUnknownElement_GUID = "3050f209-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLUnknownElement = LibC::GUID.new(0x3050f209_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLUnknownElement
    lpVtbl : IHTMLUnknownElementVTbl*
  end

  struct DispHTMLUnknownElementVTbl
    query_interface : Proc(DispHTMLUnknownElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLUnknownElement*, UInt32)
    release : Proc(DispHTMLUnknownElement*, UInt32)
    get_type_info_count : Proc(DispHTMLUnknownElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLUnknownElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLUnknownElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLUnknownElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLUnknownElement_GUID = "3050f539-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLUnknownElement = LibC::GUID.new(0x3050f539_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLUnknownElement
    lpVtbl : DispHTMLUnknownElementVTbl*
  end

  struct IWebGeolocationVTbl
    query_interface : Proc(IWebGeolocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebGeolocation*, UInt32)
    release : Proc(IWebGeolocation*, UInt32)
    get_type_info_count : Proc(IWebGeolocation*, UInt32*, HRESULT)
    get_type_info : Proc(IWebGeolocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebGeolocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebGeolocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_current_position : Proc(IWebGeolocation*, IDispatch, IDispatch, IDispatch, HRESULT)
    watch_position : Proc(IWebGeolocation*, IDispatch, IDispatch, IDispatch, Int32*, HRESULT)
    clear_watch : Proc(IWebGeolocation*, Int32, HRESULT)
  end

  IWebGeolocation_GUID = "305107c5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IWebGeolocation = LibC::GUID.new(0x305107c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IWebGeolocation
    lpVtbl : IWebGeolocationVTbl*
  end

  struct IHTMLMimeTypesCollectionVTbl
    query_interface : Proc(IHTMLMimeTypesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMimeTypesCollection*, UInt32)
    release : Proc(IHTMLMimeTypesCollection*, UInt32)
    get_type_info_count : Proc(IHTMLMimeTypesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMimeTypesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMimeTypesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMimeTypesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLMimeTypesCollection*, Int32*, HRESULT)
  end

  IHTMLMimeTypesCollection_GUID = "3050f3fc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMimeTypesCollection = LibC::GUID.new(0x3050f3fc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMimeTypesCollection
    lpVtbl : IHTMLMimeTypesCollectionVTbl*
  end

  struct IHTMLPluginsCollectionVTbl
    query_interface : Proc(IHTMLPluginsCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPluginsCollection*, UInt32)
    release : Proc(IHTMLPluginsCollection*, UInt32)
    get_type_info_count : Proc(IHTMLPluginsCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPluginsCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPluginsCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPluginsCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLPluginsCollection*, Int32*, HRESULT)
    refresh : Proc(IHTMLPluginsCollection*, Int16, HRESULT)
  end

  IHTMLPluginsCollection_GUID = "3050f3fd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPluginsCollection = LibC::GUID.new(0x3050f3fd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPluginsCollection
    lpVtbl : IHTMLPluginsCollectionVTbl*
  end

  struct IOmHistoryVTbl
    query_interface : Proc(IOmHistory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOmHistory*, UInt32)
    release : Proc(IOmHistory*, UInt32)
    get_type_info_count : Proc(IOmHistory*, UInt32*, HRESULT)
    get_type_info : Proc(IOmHistory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IOmHistory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IOmHistory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IOmHistory*, Int16*, HRESULT)
    back : Proc(IOmHistory*, VARIANT*, HRESULT)
    forward : Proc(IOmHistory*, VARIANT*, HRESULT)
    go : Proc(IOmHistory*, VARIANT*, HRESULT)
  end

  IOmHistory_GUID = "feceaaa2-8405-11cf-8ba1-00aa00476da6"
  IID_IOmHistory = LibC::GUID.new(0xfeceaaa2_u32, 0x8405_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x6d_u8, 0xa6_u8])
  struct IOmHistory
    lpVtbl : IOmHistoryVTbl*
  end

  struct IHTMLOpsProfileVTbl
    query_interface : Proc(IHTMLOpsProfile*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOpsProfile*, UInt32)
    release : Proc(IHTMLOpsProfile*, UInt32)
    get_type_info_count : Proc(IHTMLOpsProfile*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOpsProfile*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOpsProfile*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOpsProfile*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add_request : Proc(IHTMLOpsProfile*, UInt8*, VARIANT, Int16*, HRESULT)
    clear_request : Proc(IHTMLOpsProfile*, HRESULT)
    do_request : Proc(IHTMLOpsProfile*, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    get_attribute : Proc(IHTMLOpsProfile*, UInt8*, UInt8**, HRESULT)
    set_attribute : Proc(IHTMLOpsProfile*, UInt8*, UInt8*, VARIANT, Int16*, HRESULT)
    commit_changes : Proc(IHTMLOpsProfile*, Int16*, HRESULT)
    add_read_request : Proc(IHTMLOpsProfile*, UInt8*, VARIANT, Int16*, HRESULT)
    do_read_request : Proc(IHTMLOpsProfile*, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    do_write_request : Proc(IHTMLOpsProfile*, Int16*, HRESULT)
  end

  IHTMLOpsProfile_GUID = "3050f401-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOpsProfile = LibC::GUID.new(0x3050f401_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOpsProfile
    lpVtbl : IHTMLOpsProfileVTbl*
  end

  struct IOmNavigatorVTbl
    query_interface : Proc(IOmNavigator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOmNavigator*, UInt32)
    release : Proc(IOmNavigator*, UInt32)
    get_type_info_count : Proc(IOmNavigator*, UInt32*, HRESULT)
    get_type_info : Proc(IOmNavigator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IOmNavigator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IOmNavigator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_app_code_name : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_app_name : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_app_version : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_user_agent : Proc(IOmNavigator*, UInt8**, HRESULT)
    java_enabled : Proc(IOmNavigator*, Int16*, HRESULT)
    taint_enabled : Proc(IOmNavigator*, Int16*, HRESULT)
    get_mime_types : Proc(IOmNavigator*, IHTMLMimeTypesCollection*, HRESULT)
    get_plugins : Proc(IOmNavigator*, IHTMLPluginsCollection*, HRESULT)
    get_cookie_enabled : Proc(IOmNavigator*, Int16*, HRESULT)
    get_ops_profile : Proc(IOmNavigator*, IHTMLOpsProfile*, HRESULT)
    to_string : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_cpu_class : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_system_language : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_browser_language : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_user_language : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_platform : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_app_minor_version : Proc(IOmNavigator*, UInt8**, HRESULT)
    get_connection_speed : Proc(IOmNavigator*, Int32*, HRESULT)
    get_on_line : Proc(IOmNavigator*, Int16*, HRESULT)
    get_user_profile : Proc(IOmNavigator*, IHTMLOpsProfile*, HRESULT)
  end

  IOmNavigator_GUID = "feceaaa5-8405-11cf-8ba1-00aa00476da6"
  IID_IOmNavigator = LibC::GUID.new(0xfeceaaa5_u32, 0x8405_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x6d_u8, 0xa6_u8])
  struct IOmNavigator
    lpVtbl : IOmNavigatorVTbl*
  end

  struct INavigatorGeolocationVTbl
    query_interface : Proc(INavigatorGeolocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(INavigatorGeolocation*, UInt32)
    release : Proc(INavigatorGeolocation*, UInt32)
    get_type_info_count : Proc(INavigatorGeolocation*, UInt32*, HRESULT)
    get_type_info : Proc(INavigatorGeolocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(INavigatorGeolocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(INavigatorGeolocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_geolocation : Proc(INavigatorGeolocation*, IWebGeolocation*, HRESULT)
  end

  INavigatorGeolocation_GUID = "305107cf-98b5-11cf-bb82-00aa00bdce0b"
  IID_INavigatorGeolocation = LibC::GUID.new(0x305107cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct INavigatorGeolocation
    lpVtbl : INavigatorGeolocationVTbl*
  end

  struct INavigatorDoNotTrackVTbl
    query_interface : Proc(INavigatorDoNotTrack*, Guid*, Void**, HRESULT)
    add_ref : Proc(INavigatorDoNotTrack*, UInt32)
    release : Proc(INavigatorDoNotTrack*, UInt32)
    get_type_info_count : Proc(INavigatorDoNotTrack*, UInt32*, HRESULT)
    get_type_info : Proc(INavigatorDoNotTrack*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(INavigatorDoNotTrack*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(INavigatorDoNotTrack*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ms_do_not_track : Proc(INavigatorDoNotTrack*, UInt8**, HRESULT)
  end

  INavigatorDoNotTrack_GUID = "30510804-98b5-11cf-bb82-00aa00bdce0b"
  IID_INavigatorDoNotTrack = LibC::GUID.new(0x30510804_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct INavigatorDoNotTrack
    lpVtbl : INavigatorDoNotTrackVTbl*
  end

  struct IHTMLLocationVTbl
    query_interface : Proc(IHTMLLocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLocation*, UInt32)
    release : Proc(IHTMLLocation*, UInt32)
    get_type_info_count : Proc(IHTMLLocation*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_href : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_href : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_protocol : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_protocol : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_host : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_host : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_hostname : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_hostname : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_port : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_port : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_pathname : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_pathname : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_search : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_search : Proc(IHTMLLocation*, UInt8**, HRESULT)
    put_hash : Proc(IHTMLLocation*, UInt8*, HRESULT)
    get_hash : Proc(IHTMLLocation*, UInt8**, HRESULT)
    reload : Proc(IHTMLLocation*, Int16, HRESULT)
    replace : Proc(IHTMLLocation*, UInt8*, HRESULT)
    assign : Proc(IHTMLLocation*, UInt8*, HRESULT)
    to_string : Proc(IHTMLLocation*, UInt8**, HRESULT)
  end

  IHTMLLocation_GUID = "163bb1e0-6e00-11cf-837a-48dc04c10000"
  IID_IHTMLLocation = LibC::GUID.new(0x163bb1e0_u32, 0x6e00_u16, 0x11cf_u16, StaticArray[0x83_u8, 0x7a_u8, 0x48_u8, 0xdc_u8, 0x4_u8, 0xc1_u8, 0x0_u8, 0x0_u8])
  struct IHTMLLocation
    lpVtbl : IHTMLLocationVTbl*
  end

  struct DispHTMLHistoryVTbl
    query_interface : Proc(DispHTMLHistory*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLHistory*, UInt32)
    release : Proc(DispHTMLHistory*, UInt32)
    get_type_info_count : Proc(DispHTMLHistory*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLHistory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLHistory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLHistory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLHistory_GUID = "3050f549-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLHistory = LibC::GUID.new(0x3050f549_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLHistory
    lpVtbl : DispHTMLHistoryVTbl*
  end

  struct DispHTMLNavigatorVTbl
    query_interface : Proc(DispHTMLNavigator*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLNavigator*, UInt32)
    release : Proc(DispHTMLNavigator*, UInt32)
    get_type_info_count : Proc(DispHTMLNavigator*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLNavigator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLNavigator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLNavigator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLNavigator_GUID = "3050f54c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLNavigator = LibC::GUID.new(0x3050f54c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLNavigator
    lpVtbl : DispHTMLNavigatorVTbl*
  end

  struct DispHTMLLocationVTbl
    query_interface : Proc(DispHTMLLocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLLocation*, UInt32)
    release : Proc(DispHTMLLocation*, UInt32)
    get_type_info_count : Proc(DispHTMLLocation*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLLocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLLocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLLocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLLocation_GUID = "3050f54e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLLocation = LibC::GUID.new(0x3050f54e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLLocation
    lpVtbl : DispHTMLLocationVTbl*
  end

  struct DispCPluginsVTbl
    query_interface : Proc(DispCPlugins*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCPlugins*, UInt32)
    release : Proc(DispCPlugins*, UInt32)
    get_type_info_count : Proc(DispCPlugins*, UInt32*, HRESULT)
    get_type_info : Proc(DispCPlugins*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCPlugins*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCPlugins*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCPlugins_GUID = "3050f54a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCPlugins = LibC::GUID.new(0x3050f54a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCPlugins
    lpVtbl : DispCPluginsVTbl*
  end

  struct IHTMLBookmarkCollectionVTbl
    query_interface : Proc(IHTMLBookmarkCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBookmarkCollection*, UInt32)
    release : Proc(IHTMLBookmarkCollection*, UInt32)
    get_type_info_count : Proc(IHTMLBookmarkCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBookmarkCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBookmarkCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBookmarkCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLBookmarkCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLBookmarkCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLBookmarkCollection*, Int32, VARIANT*, HRESULT)
  end

  IHTMLBookmarkCollection_GUID = "3050f4ce-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBookmarkCollection = LibC::GUID.new(0x3050f4ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBookmarkCollection
    lpVtbl : IHTMLBookmarkCollectionVTbl*
  end

  struct IHTMLDataTransferVTbl
    query_interface : Proc(IHTMLDataTransfer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDataTransfer*, UInt32)
    release : Proc(IHTMLDataTransfer*, UInt32)
    get_type_info_count : Proc(IHTMLDataTransfer*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDataTransfer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDataTransfer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDataTransfer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_data : Proc(IHTMLDataTransfer*, UInt8*, VARIANT*, Int16*, HRESULT)
    get_data : Proc(IHTMLDataTransfer*, UInt8*, VARIANT*, HRESULT)
    clear_data : Proc(IHTMLDataTransfer*, UInt8*, Int16*, HRESULT)
    put_drop_effect : Proc(IHTMLDataTransfer*, UInt8*, HRESULT)
    get_drop_effect : Proc(IHTMLDataTransfer*, UInt8**, HRESULT)
    put_effect_allowed : Proc(IHTMLDataTransfer*, UInt8*, HRESULT)
    get_effect_allowed : Proc(IHTMLDataTransfer*, UInt8**, HRESULT)
  end

  IHTMLDataTransfer_GUID = "3050f4b3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDataTransfer = LibC::GUID.new(0x3050f4b3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDataTransfer
    lpVtbl : IHTMLDataTransferVTbl*
  end

  struct IHTMLEventObj2VTbl
    query_interface : Proc(IHTMLEventObj2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj2*, UInt32)
    release : Proc(IHTMLEventObj2*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_attribute : Proc(IHTMLEventObj2*, UInt8*, VARIANT, Int32, HRESULT)
    get_attribute : Proc(IHTMLEventObj2*, UInt8*, Int32, VARIANT*, HRESULT)
    remove_attribute : Proc(IHTMLEventObj2*, UInt8*, Int32, Int16*, HRESULT)
    put_property_name : Proc(IHTMLEventObj2*, UInt8*, HRESULT)
    get_property_name : Proc(IHTMLEventObj2*, UInt8**, HRESULT)
    putref_bookmarks : Proc(IHTMLEventObj2*, IHTMLBookmarkCollection, HRESULT)
    get_bookmarks : Proc(IHTMLEventObj2*, IHTMLBookmarkCollection*, HRESULT)
    putref_recordset : Proc(IHTMLEventObj2*, IDispatch, HRESULT)
    get_recordset : Proc(IHTMLEventObj2*, IDispatch*, HRESULT)
    put_data_fld : Proc(IHTMLEventObj2*, UInt8*, HRESULT)
    get_data_fld : Proc(IHTMLEventObj2*, UInt8**, HRESULT)
    putref_bound_elements : Proc(IHTMLEventObj2*, IHTMLElementCollection, HRESULT)
    get_bound_elements : Proc(IHTMLEventObj2*, IHTMLElementCollection*, HRESULT)
    put_repeat : Proc(IHTMLEventObj2*, Int16, HRESULT)
    get_repeat : Proc(IHTMLEventObj2*, Int16*, HRESULT)
    put_src_urn : Proc(IHTMLEventObj2*, UInt8*, HRESULT)
    get_src_urn : Proc(IHTMLEventObj2*, UInt8**, HRESULT)
    putref_src_element : Proc(IHTMLEventObj2*, IHTMLElement, HRESULT)
    get_src_element : Proc(IHTMLEventObj2*, IHTMLElement*, HRESULT)
    put_alt_key : Proc(IHTMLEventObj2*, Int16, HRESULT)
    get_alt_key : Proc(IHTMLEventObj2*, Int16*, HRESULT)
    put_ctrl_key : Proc(IHTMLEventObj2*, Int16, HRESULT)
    get_ctrl_key : Proc(IHTMLEventObj2*, Int16*, HRESULT)
    put_shift_key : Proc(IHTMLEventObj2*, Int16, HRESULT)
    get_shift_key : Proc(IHTMLEventObj2*, Int16*, HRESULT)
    putref_from_element : Proc(IHTMLEventObj2*, IHTMLElement, HRESULT)
    get_from_element : Proc(IHTMLEventObj2*, IHTMLElement*, HRESULT)
    putref_to_element : Proc(IHTMLEventObj2*, IHTMLElement, HRESULT)
    get_to_element : Proc(IHTMLEventObj2*, IHTMLElement*, HRESULT)
    put_button : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_button : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_type : Proc(IHTMLEventObj2*, UInt8*, HRESULT)
    get_type : Proc(IHTMLEventObj2*, UInt8**, HRESULT)
    put_qualifier : Proc(IHTMLEventObj2*, UInt8*, HRESULT)
    get_qualifier : Proc(IHTMLEventObj2*, UInt8**, HRESULT)
    put_reason : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_reason : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_x : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_x : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_y : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_y : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_client_x : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_client_x : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_client_y : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_client_y : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_offset_x : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_offset_x : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_offset_y : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_offset_y : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_screen_x : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_screen_x : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    put_screen_y : Proc(IHTMLEventObj2*, Int32, HRESULT)
    get_screen_y : Proc(IHTMLEventObj2*, Int32*, HRESULT)
    putref_src_filter : Proc(IHTMLEventObj2*, IDispatch, HRESULT)
    get_src_filter : Proc(IHTMLEventObj2*, IDispatch*, HRESULT)
    get_data_transfer : Proc(IHTMLEventObj2*, IHTMLDataTransfer*, HRESULT)
  end

  IHTMLEventObj2_GUID = "3050f48b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj2 = LibC::GUID.new(0x3050f48b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj2
    lpVtbl : IHTMLEventObj2VTbl*
  end

  struct IHTMLEventObj3VTbl
    query_interface : Proc(IHTMLEventObj3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj3*, UInt32)
    release : Proc(IHTMLEventObj3*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_content_overflow : Proc(IHTMLEventObj3*, Int16*, HRESULT)
    put_shift_left : Proc(IHTMLEventObj3*, Int16, HRESULT)
    get_shift_left : Proc(IHTMLEventObj3*, Int16*, HRESULT)
    put_alt_left : Proc(IHTMLEventObj3*, Int16, HRESULT)
    get_alt_left : Proc(IHTMLEventObj3*, Int16*, HRESULT)
    put_ctrl_left : Proc(IHTMLEventObj3*, Int16, HRESULT)
    get_ctrl_left : Proc(IHTMLEventObj3*, Int16*, HRESULT)
    get_ime_composition_change : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_ime_notify_command : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_ime_notify_data : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_ime_request : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_ime_request_data : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_keyboard_layout : Proc(IHTMLEventObj3*, LibC::IntPtrT*, HRESULT)
    get_behavior_cookie : Proc(IHTMLEventObj3*, Int32*, HRESULT)
    get_behavior_part : Proc(IHTMLEventObj3*, Int32*, HRESULT)
    get_next_page : Proc(IHTMLEventObj3*, UInt8**, HRESULT)
  end

  IHTMLEventObj3_GUID = "3050f680-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj3 = LibC::GUID.new(0x3050f680_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj3
    lpVtbl : IHTMLEventObj3VTbl*
  end

  struct IHTMLEventObj4VTbl
    query_interface : Proc(IHTMLEventObj4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj4*, UInt32)
    release : Proc(IHTMLEventObj4*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_wheel_delta : Proc(IHTMLEventObj4*, Int32*, HRESULT)
  end

  IHTMLEventObj4_GUID = "3050f814-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj4 = LibC::GUID.new(0x3050f814_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj4
    lpVtbl : IHTMLEventObj4VTbl*
  end

  struct IHTMLEventObj5VTbl
    query_interface : Proc(IHTMLEventObj5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj5*, UInt32)
    release : Proc(IHTMLEventObj5*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_url : Proc(IHTMLEventObj5*, UInt8*, HRESULT)
    get_url : Proc(IHTMLEventObj5*, UInt8**, HRESULT)
    put_data : Proc(IHTMLEventObj5*, UInt8*, HRESULT)
    get_data : Proc(IHTMLEventObj5*, UInt8**, HRESULT)
    get_source : Proc(IHTMLEventObj5*, IDispatch*, HRESULT)
    put_origin : Proc(IHTMLEventObj5*, UInt8*, HRESULT)
    get_origin : Proc(IHTMLEventObj5*, UInt8**, HRESULT)
    put_issession : Proc(IHTMLEventObj5*, Int16, HRESULT)
    get_issession : Proc(IHTMLEventObj5*, Int16*, HRESULT)
  end

  IHTMLEventObj5_GUID = "30510478-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj5 = LibC::GUID.new(0x30510478_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj5
    lpVtbl : IHTMLEventObj5VTbl*
  end

  struct IHTMLEventObj6VTbl
    query_interface : Proc(IHTMLEventObj6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEventObj6*, UInt32)
    release : Proc(IHTMLEventObj6*, UInt32)
    get_type_info_count : Proc(IHTMLEventObj6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEventObj6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEventObj6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEventObj6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_action_url : Proc(IHTMLEventObj6*, UInt8**, HRESULT)
    get_button_id : Proc(IHTMLEventObj6*, Int32*, HRESULT)
  end

  IHTMLEventObj6_GUID = "30510734-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEventObj6 = LibC::GUID.new(0x30510734_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEventObj6
    lpVtbl : IHTMLEventObj6VTbl*
  end

  struct DispCEventObjVTbl
    query_interface : Proc(DispCEventObj*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCEventObj*, UInt32)
    release : Proc(DispCEventObj*, UInt32)
    get_type_info_count : Proc(DispCEventObj*, UInt32*, HRESULT)
    get_type_info : Proc(DispCEventObj*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCEventObj*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCEventObj*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCEventObj_GUID = "3050f558-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCEventObj = LibC::GUID.new(0x3050f558_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCEventObj
    lpVtbl : DispCEventObjVTbl*
  end

  struct IHTMLStyleMediaVTbl
    query_interface : Proc(IHTMLStyleMedia*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleMedia*, UInt32)
    release : Proc(IHTMLStyleMedia*, UInt32)
    get_type_info_count : Proc(IHTMLStyleMedia*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleMedia*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleMedia*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleMedia*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLStyleMedia*, UInt8**, HRESULT)
    match_medium : Proc(IHTMLStyleMedia*, UInt8*, Int16*, HRESULT)
  end

  IHTMLStyleMedia_GUID = "3051074b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleMedia = LibC::GUID.new(0x3051074b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleMedia
    lpVtbl : IHTMLStyleMediaVTbl*
  end

  struct DispHTMLStyleMediaVTbl
    query_interface : Proc(DispHTMLStyleMedia*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleMedia*, UInt32)
    release : Proc(DispHTMLStyleMedia*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleMedia*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleMedia*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleMedia*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleMedia*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleMedia_GUID = "3059009e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleMedia = LibC::GUID.new(0x3059009e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleMedia
    lpVtbl : DispHTMLStyleMediaVTbl*
  end

  struct IHTMLFramesCollection2VTbl
    query_interface : Proc(IHTMLFramesCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFramesCollection2*, UInt32)
    release : Proc(IHTMLFramesCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLFramesCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFramesCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFramesCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFramesCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IHTMLFramesCollection2*, VARIANT*, VARIANT*, HRESULT)
    get_length : Proc(IHTMLFramesCollection2*, Int32*, HRESULT)
  end

  IHTMLFramesCollection2_GUID = "332c4426-26cb-11d0-b483-00c04fd90119"
  IID_IHTMLFramesCollection2 = LibC::GUID.new(0x332c4426_u32, 0x26cb_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x83_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1_u8, 0x19_u8])
  struct IHTMLFramesCollection2
    lpVtbl : IHTMLFramesCollection2VTbl*
  end

  struct HTMLWindowEvents3VTbl
    query_interface : Proc(HTMLWindowEvents3*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLWindowEvents3*, UInt32)
    release : Proc(HTMLWindowEvents3*, UInt32)
    get_type_info_count : Proc(HTMLWindowEvents3*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLWindowEvents3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLWindowEvents3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLWindowEvents3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLWindowEvents3_GUID = "3050f5a1-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLWindowEvents3 = LibC::GUID.new(0x3050f5a1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLWindowEvents3
    lpVtbl : HTMLWindowEvents3VTbl*
  end

  struct HTMLWindowEvents2VTbl
    query_interface : Proc(HTMLWindowEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLWindowEvents2*, UInt32)
    release : Proc(HTMLWindowEvents2*, UInt32)
    get_type_info_count : Proc(HTMLWindowEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLWindowEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLWindowEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLWindowEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLWindowEvents2_GUID = "3050f625-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLWindowEvents2 = LibC::GUID.new(0x3050f625_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLWindowEvents2
    lpVtbl : HTMLWindowEvents2VTbl*
  end

  struct HTMLWindowEventsVTbl
    query_interface : Proc(HTMLWindowEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLWindowEvents*, UInt32)
    release : Proc(HTMLWindowEvents*, UInt32)
    get_type_info_count : Proc(HTMLWindowEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLWindowEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLWindowEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLWindowEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLWindowEvents_GUID = "96a0a4e0-d062-11cf-94b6-00aa0060275c"
  IID_HTMLWindowEvents = LibC::GUID.new(0x96a0a4e0_u32, 0xd062_u16, 0x11cf_u16, StaticArray[0x94_u8, 0xb6_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x60_u8, 0x27_u8, 0x5c_u8])
  struct HTMLWindowEvents
    lpVtbl : HTMLWindowEventsVTbl*
  end

  struct IHTMLDocument2VTbl
    query_interface : Proc(IHTMLDocument2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument2*, UInt32)
    release : Proc(IHTMLDocument2*, UInt32)
    get_type_info_count : Proc(IHTMLDocument2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_script : Proc(IHTMLDocument2*, IDispatch*, HRESULT)
    get_all : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_body : Proc(IHTMLDocument2*, IHTMLElement*, HRESULT)
    get_active_element : Proc(IHTMLDocument2*, IHTMLElement*, HRESULT)
    get_images : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_applets : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_links : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_forms : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_anchors : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    put_title : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_title : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_scripts : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    put_design_mode : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_design_mode : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_selection : Proc(IHTMLDocument2*, IHTMLSelectionObject*, HRESULT)
    get_ready_state : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_frames : Proc(IHTMLDocument2*, IHTMLFramesCollection2*, HRESULT)
    get_embeds : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    get_plugins : Proc(IHTMLDocument2*, IHTMLElementCollection*, HRESULT)
    put_alink_color : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_alink_color : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_bg_color : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_fg_color : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_fg_color : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_link_color : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_link_color : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_vlink_color : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_vlink_color : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    get_referrer : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_location : Proc(IHTMLDocument2*, IHTMLLocation*, HRESULT)
    get_last_modified : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    put_url : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_url : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    put_domain : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_domain : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    put_cookie : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_cookie : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    put_expando : Proc(IHTMLDocument2*, Int16, HRESULT)
    get_expando : Proc(IHTMLDocument2*, Int16*, HRESULT)
    put_charset : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_charset : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    put_default_charset : Proc(IHTMLDocument2*, UInt8*, HRESULT)
    get_default_charset : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_mime_type : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_file_size : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_file_created_date : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_file_modified_date : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_file_updated_date : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_security : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_protocol : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    get_name_prop : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    write : Proc(IHTMLDocument2*, SAFEARRAY*, HRESULT)
    writeln : Proc(IHTMLDocument2*, SAFEARRAY*, HRESULT)
    open : Proc(IHTMLDocument2*, UInt8*, VARIANT, VARIANT, VARIANT, IDispatch*, HRESULT)
    close : Proc(IHTMLDocument2*, HRESULT)
    clear : Proc(IHTMLDocument2*, HRESULT)
    query_command_supported : Proc(IHTMLDocument2*, UInt8*, Int16*, HRESULT)
    query_command_enabled : Proc(IHTMLDocument2*, UInt8*, Int16*, HRESULT)
    query_command_state : Proc(IHTMLDocument2*, UInt8*, Int16*, HRESULT)
    query_command_indeterm : Proc(IHTMLDocument2*, UInt8*, Int16*, HRESULT)
    query_command_text : Proc(IHTMLDocument2*, UInt8*, UInt8**, HRESULT)
    query_command_value : Proc(IHTMLDocument2*, UInt8*, VARIANT*, HRESULT)
    exec_command : Proc(IHTMLDocument2*, UInt8*, Int16, VARIANT, Int16*, HRESULT)
    exec_command_show_help : Proc(IHTMLDocument2*, UInt8*, Int16*, HRESULT)
    create_element : Proc(IHTMLDocument2*, UInt8*, IHTMLElement*, HRESULT)
    put_onhelp : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onhelp : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onclick : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onclick : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_ondblclick : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_ondblclick : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onkeyup : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onkeyup : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onkeydown : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onkeydown : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onkeypress : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onkeypress : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onmouseup : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onmouseup : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onmousedown : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onmousedown : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onmousemove : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onmousemove : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onmouseout : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onmouseout : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onmouseover : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onmouseover : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onreadystatechange : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onafterupdate : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onafterupdate : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onrowexit : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onrowexit : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onrowenter : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onrowenter : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_ondragstart : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_ondragstart : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onselectstart : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onselectstart : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    element_from_point : Proc(IHTMLDocument2*, Int32, Int32, IHTMLElement*, HRESULT)
    get_parent_window : Proc(IHTMLDocument2*, IHTMLWindow2*, HRESULT)
    get_style_sheets : Proc(IHTMLDocument2*, IHTMLStyleSheetsCollection*, HRESULT)
    put_onbeforeupdate : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onbeforeupdate : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    put_onerrorupdate : Proc(IHTMLDocument2*, VARIANT, HRESULT)
    get_onerrorupdate : Proc(IHTMLDocument2*, VARIANT*, HRESULT)
    to_string : Proc(IHTMLDocument2*, UInt8**, HRESULT)
    create_style_sheet : Proc(IHTMLDocument2*, UInt8*, Int32, IHTMLStyleSheet*, HRESULT)
  end

  IHTMLDocument2_GUID = "332c4425-26cb-11d0-b483-00c04fd90119"
  IID_IHTMLDocument2 = LibC::GUID.new(0x332c4425_u32, 0x26cb_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x83_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1_u8, 0x19_u8])
  struct IHTMLDocument2
    lpVtbl : IHTMLDocument2VTbl*
  end

  struct IHTMLWindow2VTbl
    query_interface : Proc(IHTMLWindow2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow2*, UInt32)
    release : Proc(IHTMLWindow2*, UInt32)
    get_type_info_count : Proc(IHTMLWindow2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IHTMLWindow2*, VARIANT*, VARIANT*, HRESULT)
    get_length : Proc(IHTMLWindow2*, Int32*, HRESULT)
    get_frames : Proc(IHTMLWindow2*, IHTMLFramesCollection2*, HRESULT)
    put_default_status : Proc(IHTMLWindow2*, UInt8*, HRESULT)
    get_default_status : Proc(IHTMLWindow2*, UInt8**, HRESULT)
    put_status : Proc(IHTMLWindow2*, UInt8*, HRESULT)
    get_status : Proc(IHTMLWindow2*, UInt8**, HRESULT)
    set_timeout : Proc(IHTMLWindow2*, UInt8*, Int32, VARIANT*, Int32*, HRESULT)
    clear_timeout : Proc(IHTMLWindow2*, Int32, HRESULT)
    alert : Proc(IHTMLWindow2*, UInt8*, HRESULT)
    confirm : Proc(IHTMLWindow2*, UInt8*, Int16*, HRESULT)
    prompt : Proc(IHTMLWindow2*, UInt8*, UInt8*, VARIANT*, HRESULT)
    get_image : Proc(IHTMLWindow2*, IHTMLImageElementFactory*, HRESULT)
    get_location : Proc(IHTMLWindow2*, IHTMLLocation*, HRESULT)
    get_history : Proc(IHTMLWindow2*, IOmHistory*, HRESULT)
    close : Proc(IHTMLWindow2*, HRESULT)
    put_opener : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_opener : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    get_navigator : Proc(IHTMLWindow2*, IOmNavigator*, HRESULT)
    put_name : Proc(IHTMLWindow2*, UInt8*, HRESULT)
    get_name : Proc(IHTMLWindow2*, UInt8**, HRESULT)
    get_parent : Proc(IHTMLWindow2*, IHTMLWindow2*, HRESULT)
    open : Proc(IHTMLWindow2*, UInt8*, UInt8*, UInt8*, Int16, IHTMLWindow2*, HRESULT)
    get_self : Proc(IHTMLWindow2*, IHTMLWindow2*, HRESULT)
    get_top : Proc(IHTMLWindow2*, IHTMLWindow2*, HRESULT)
    get_window : Proc(IHTMLWindow2*, IHTMLWindow2*, HRESULT)
    navigate : Proc(IHTMLWindow2*, UInt8*, HRESULT)
    put_onfocus : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onblur : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onbeforeunload : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onbeforeunload : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onunload : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onunload : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onhelp : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onhelp : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onresize : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onresize : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    put_onscroll : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_onscroll : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    get_document : Proc(IHTMLWindow2*, IHTMLDocument2*, HRESULT)
    get_event : Proc(IHTMLWindow2*, IHTMLEventObj*, HRESULT)
    get__new_enum : Proc(IHTMLWindow2*, IUnknown*, HRESULT)
    show_modal_dialog : Proc(IHTMLWindow2*, UInt8*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    show_help : Proc(IHTMLWindow2*, UInt8*, VARIANT, UInt8*, HRESULT)
    get_screen : Proc(IHTMLWindow2*, IHTMLScreen*, HRESULT)
    get_option : Proc(IHTMLWindow2*, IHTMLOptionElementFactory*, HRESULT)
    focus : Proc(IHTMLWindow2*, HRESULT)
    get_closed : Proc(IHTMLWindow2*, Int16*, HRESULT)
    blur : Proc(IHTMLWindow2*, HRESULT)
    scroll : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    get_client_information : Proc(IHTMLWindow2*, IOmNavigator*, HRESULT)
    set_interval : Proc(IHTMLWindow2*, UInt8*, Int32, VARIANT*, Int32*, HRESULT)
    clear_interval : Proc(IHTMLWindow2*, Int32, HRESULT)
    put_offscreen_buffering : Proc(IHTMLWindow2*, VARIANT, HRESULT)
    get_offscreen_buffering : Proc(IHTMLWindow2*, VARIANT*, HRESULT)
    exec_script : Proc(IHTMLWindow2*, UInt8*, UInt8*, VARIANT*, HRESULT)
    to_string : Proc(IHTMLWindow2*, UInt8**, HRESULT)
    scroll_by : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    scroll_to : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    move_to : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    move_by : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    resize_to : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    resize_by : Proc(IHTMLWindow2*, Int32, Int32, HRESULT)
    get_external : Proc(IHTMLWindow2*, IDispatch*, HRESULT)
  end

  IHTMLWindow2_GUID = "332c4427-26cb-11d0-b483-00c04fd90119"
  IID_IHTMLWindow2 = LibC::GUID.new(0x332c4427_u32, 0x26cb_u16, 0x11d0_u16, StaticArray[0xb4_u8, 0x83_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1_u8, 0x19_u8])
  struct IHTMLWindow2
    lpVtbl : IHTMLWindow2VTbl*
  end

  struct IHTMLWindow3VTbl
    query_interface : Proc(IHTMLWindow3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow3*, UInt32)
    release : Proc(IHTMLWindow3*, UInt32)
    get_type_info_count : Proc(IHTMLWindow3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_screen_left : Proc(IHTMLWindow3*, Int32*, HRESULT)
    get_screen_top : Proc(IHTMLWindow3*, Int32*, HRESULT)
    attach_event : Proc(IHTMLWindow3*, UInt8*, IDispatch, Int16*, HRESULT)
    detach_event : Proc(IHTMLWindow3*, UInt8*, IDispatch, HRESULT)
    set_timeout : Proc(IHTMLWindow3*, VARIANT*, Int32, VARIANT*, Int32*, HRESULT)
    set_interval : Proc(IHTMLWindow3*, VARIANT*, Int32, VARIANT*, Int32*, HRESULT)
    print : Proc(IHTMLWindow3*, HRESULT)
    put_onbeforeprint : Proc(IHTMLWindow3*, VARIANT, HRESULT)
    get_onbeforeprint : Proc(IHTMLWindow3*, VARIANT*, HRESULT)
    put_onafterprint : Proc(IHTMLWindow3*, VARIANT, HRESULT)
    get_onafterprint : Proc(IHTMLWindow3*, VARIANT*, HRESULT)
    get_clipboard_data : Proc(IHTMLWindow3*, IHTMLDataTransfer*, HRESULT)
    show_modeless_dialog : Proc(IHTMLWindow3*, UInt8*, VARIANT*, VARIANT*, IHTMLWindow2*, HRESULT)
  end

  IHTMLWindow3_GUID = "3050f4ae-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow3 = LibC::GUID.new(0x3050f4ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow3
    lpVtbl : IHTMLWindow3VTbl*
  end

  struct IHTMLFrameBaseVTbl
    query_interface : Proc(IHTMLFrameBase*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameBase*, UInt32)
    release : Proc(IHTMLFrameBase*, UInt32)
    get_type_info_count : Proc(IHTMLFrameBase*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameBase*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameBase*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameBase*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLFrameBase*, UInt8*, HRESULT)
    get_src : Proc(IHTMLFrameBase*, UInt8**, HRESULT)
    put_name : Proc(IHTMLFrameBase*, UInt8*, HRESULT)
    get_name : Proc(IHTMLFrameBase*, UInt8**, HRESULT)
    put_border : Proc(IHTMLFrameBase*, VARIANT, HRESULT)
    get_border : Proc(IHTMLFrameBase*, VARIANT*, HRESULT)
    put_frame_border : Proc(IHTMLFrameBase*, UInt8*, HRESULT)
    get_frame_border : Proc(IHTMLFrameBase*, UInt8**, HRESULT)
    put_frame_spacing : Proc(IHTMLFrameBase*, VARIANT, HRESULT)
    get_frame_spacing : Proc(IHTMLFrameBase*, VARIANT*, HRESULT)
    put_margin_width : Proc(IHTMLFrameBase*, VARIANT, HRESULT)
    get_margin_width : Proc(IHTMLFrameBase*, VARIANT*, HRESULT)
    put_margin_height : Proc(IHTMLFrameBase*, VARIANT, HRESULT)
    get_margin_height : Proc(IHTMLFrameBase*, VARIANT*, HRESULT)
    put_no_resize : Proc(IHTMLFrameBase*, Int16, HRESULT)
    get_no_resize : Proc(IHTMLFrameBase*, Int16*, HRESULT)
    put_scrolling : Proc(IHTMLFrameBase*, UInt8*, HRESULT)
    get_scrolling : Proc(IHTMLFrameBase*, UInt8**, HRESULT)
  end

  IHTMLFrameBase_GUID = "3050f311-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameBase = LibC::GUID.new(0x3050f311_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameBase
    lpVtbl : IHTMLFrameBaseVTbl*
  end

  struct IHTMLStorageVTbl
    query_interface : Proc(IHTMLStorage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStorage*, UInt32)
    release : Proc(IHTMLStorage*, UInt32)
    get_type_info_count : Proc(IHTMLStorage*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStorage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStorage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStorage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLStorage*, Int32*, HRESULT)
    get_remaining_space : Proc(IHTMLStorage*, Int32*, HRESULT)
    key : Proc(IHTMLStorage*, Int32, UInt8**, HRESULT)
    get_item : Proc(IHTMLStorage*, UInt8*, VARIANT*, HRESULT)
    set_item : Proc(IHTMLStorage*, UInt8*, UInt8*, HRESULT)
    remove_item : Proc(IHTMLStorage*, UInt8*, HRESULT)
    clear : Proc(IHTMLStorage*, HRESULT)
  end

  IHTMLStorage_GUID = "30510474-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStorage = LibC::GUID.new(0x30510474_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStorage
    lpVtbl : IHTMLStorageVTbl*
  end

  struct IHTMLPerformanceVTbl
    query_interface : Proc(IHTMLPerformance*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPerformance*, UInt32)
    release : Proc(IHTMLPerformance*, UInt32)
    get_type_info_count : Proc(IHTMLPerformance*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPerformance*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPerformance*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPerformance*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_navigation : Proc(IHTMLPerformance*, IHTMLPerformanceNavigation*, HRESULT)
    get_timing : Proc(IHTMLPerformance*, IHTMLPerformanceTiming*, HRESULT)
    to_string : Proc(IHTMLPerformance*, UInt8**, HRESULT)
    to_json : Proc(IHTMLPerformance*, VARIANT*, HRESULT)
  end

  IHTMLPerformance_GUID = "3051074e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPerformance = LibC::GUID.new(0x3051074e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPerformance
    lpVtbl : IHTMLPerformanceVTbl*
  end

  struct IHTMLApplicationCacheVTbl
    query_interface : Proc(IHTMLApplicationCache*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLApplicationCache*, UInt32)
    release : Proc(IHTMLApplicationCache*, UInt32)
    get_type_info_count : Proc(IHTMLApplicationCache*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLApplicationCache*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLApplicationCache*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLApplicationCache*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_status : Proc(IHTMLApplicationCache*, Int32*, HRESULT)
    put_onchecking : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onchecking : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_onnoupdate : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onnoupdate : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_ondownloading : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_ondownloading : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_onprogress : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onprogress : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_onupdateready : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onupdateready : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_oncached : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_oncached : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    put_onobsolete : Proc(IHTMLApplicationCache*, VARIANT, HRESULT)
    get_onobsolete : Proc(IHTMLApplicationCache*, VARIANT*, HRESULT)
    update : Proc(IHTMLApplicationCache*, HRESULT)
    swap_cache : Proc(IHTMLApplicationCache*, HRESULT)
    abort : Proc(IHTMLApplicationCache*, HRESULT)
  end

  IHTMLApplicationCache_GUID = "30510828-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLApplicationCache = LibC::GUID.new(0x30510828_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLApplicationCache
    lpVtbl : IHTMLApplicationCacheVTbl*
  end

  struct IHTMLScreenVTbl
    query_interface : Proc(IHTMLScreen*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScreen*, UInt32)
    release : Proc(IHTMLScreen*, UInt32)
    get_type_info_count : Proc(IHTMLScreen*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScreen*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScreen*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScreen*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_color_depth : Proc(IHTMLScreen*, Int32*, HRESULT)
    put_buffer_depth : Proc(IHTMLScreen*, Int32, HRESULT)
    get_buffer_depth : Proc(IHTMLScreen*, Int32*, HRESULT)
    get_width : Proc(IHTMLScreen*, Int32*, HRESULT)
    get_height : Proc(IHTMLScreen*, Int32*, HRESULT)
    put_update_interval : Proc(IHTMLScreen*, Int32, HRESULT)
    get_update_interval : Proc(IHTMLScreen*, Int32*, HRESULT)
    get_avail_height : Proc(IHTMLScreen*, Int32*, HRESULT)
    get_avail_width : Proc(IHTMLScreen*, Int32*, HRESULT)
    get_font_smoothing_enabled : Proc(IHTMLScreen*, Int16*, HRESULT)
  end

  IHTMLScreen_GUID = "3050f35c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScreen = LibC::GUID.new(0x3050f35c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScreen
    lpVtbl : IHTMLScreenVTbl*
  end

  struct IHTMLScreen2VTbl
    query_interface : Proc(IHTMLScreen2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScreen2*, UInt32)
    release : Proc(IHTMLScreen2*, UInt32)
    get_type_info_count : Proc(IHTMLScreen2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScreen2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScreen2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScreen2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_logical_xdpi : Proc(IHTMLScreen2*, Int32*, HRESULT)
    get_logical_ydpi : Proc(IHTMLScreen2*, Int32*, HRESULT)
    get_device_xdpi : Proc(IHTMLScreen2*, Int32*, HRESULT)
    get_device_ydpi : Proc(IHTMLScreen2*, Int32*, HRESULT)
  end

  IHTMLScreen2_GUID = "3050f84a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScreen2 = LibC::GUID.new(0x3050f84a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScreen2
    lpVtbl : IHTMLScreen2VTbl*
  end

  struct IHTMLScreen3VTbl
    query_interface : Proc(IHTMLScreen3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScreen3*, UInt32)
    release : Proc(IHTMLScreen3*, UInt32)
    get_type_info_count : Proc(IHTMLScreen3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScreen3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScreen3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScreen3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_system_xdpi : Proc(IHTMLScreen3*, Int32*, HRESULT)
    get_system_ydpi : Proc(IHTMLScreen3*, Int32*, HRESULT)
  end

  IHTMLScreen3_GUID = "305104a1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScreen3 = LibC::GUID.new(0x305104a1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScreen3
    lpVtbl : IHTMLScreen3VTbl*
  end

  struct IHTMLScreen4VTbl
    query_interface : Proc(IHTMLScreen4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScreen4*, UInt32)
    release : Proc(IHTMLScreen4*, UInt32)
    get_type_info_count : Proc(IHTMLScreen4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScreen4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScreen4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScreen4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_pixel_depth : Proc(IHTMLScreen4*, Int32*, HRESULT)
  end

  IHTMLScreen4_GUID = "3051076b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScreen4 = LibC::GUID.new(0x3051076b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScreen4
    lpVtbl : IHTMLScreen4VTbl*
  end

  struct IHTMLWindow4VTbl
    query_interface : Proc(IHTMLWindow4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow4*, UInt32)
    release : Proc(IHTMLWindow4*, UInt32)
    get_type_info_count : Proc(IHTMLWindow4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_popup : Proc(IHTMLWindow4*, VARIANT*, IDispatch*, HRESULT)
    get_frame_element : Proc(IHTMLWindow4*, IHTMLFrameBase*, HRESULT)
  end

  IHTMLWindow4_GUID = "3050f6cf-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow4 = LibC::GUID.new(0x3050f6cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow4
    lpVtbl : IHTMLWindow4VTbl*
  end

  struct IHTMLWindow5VTbl
    query_interface : Proc(IHTMLWindow5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow5*, UInt32)
    release : Proc(IHTMLWindow5*, UInt32)
    get_type_info_count : Proc(IHTMLWindow5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_xml_http_request : Proc(IHTMLWindow5*, VARIANT, HRESULT)
    get_xml_http_request : Proc(IHTMLWindow5*, VARIANT*, HRESULT)
  end

  IHTMLWindow5_GUID = "3051040e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow5 = LibC::GUID.new(0x3051040e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow5
    lpVtbl : IHTMLWindow5VTbl*
  end

  struct IHTMLWindow6VTbl
    query_interface : Proc(IHTMLWindow6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow6*, UInt32)
    release : Proc(IHTMLWindow6*, UInt32)
    get_type_info_count : Proc(IHTMLWindow6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x_domain_request : Proc(IHTMLWindow6*, VARIANT, HRESULT)
    get_x_domain_request : Proc(IHTMLWindow6*, VARIANT*, HRESULT)
    get_session_storage : Proc(IHTMLWindow6*, IHTMLStorage*, HRESULT)
    get_local_storage : Proc(IHTMLWindow6*, IHTMLStorage*, HRESULT)
    put_onhashchange : Proc(IHTMLWindow6*, VARIANT, HRESULT)
    get_onhashchange : Proc(IHTMLWindow6*, VARIANT*, HRESULT)
    get_max_connections_per_server : Proc(IHTMLWindow6*, Int32*, HRESULT)
    post_message : Proc(IHTMLWindow6*, UInt8*, VARIANT, HRESULT)
    to_static_html : Proc(IHTMLWindow6*, UInt8*, UInt8**, HRESULT)
    put_onmessage : Proc(IHTMLWindow6*, VARIANT, HRESULT)
    get_onmessage : Proc(IHTMLWindow6*, VARIANT*, HRESULT)
    ms_write_profiler_mark : Proc(IHTMLWindow6*, UInt8*, HRESULT)
  end

  IHTMLWindow6_GUID = "30510453-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow6 = LibC::GUID.new(0x30510453_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow6
    lpVtbl : IHTMLWindow6VTbl*
  end

  struct IHTMLWindow7VTbl
    query_interface : Proc(IHTMLWindow7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow7*, UInt32)
    release : Proc(IHTMLWindow7*, UInt32)
    get_type_info_count : Proc(IHTMLWindow7*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow7*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow7*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow7*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_selection : Proc(IHTMLWindow7*, IHTMLSelection*, HRESULT)
    get_computed_style : Proc(IHTMLWindow7*, IHTMLDOMNode, UInt8*, IHTMLCSSStyleDeclaration*, HRESULT)
    get_style_media : Proc(IHTMLWindow7*, IHTMLStyleMedia*, HRESULT)
    put_performance : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_performance : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    get_inner_width : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_inner_height : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_page_x_offset : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_page_y_offset : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_screen_x : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_screen_y : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_outer_width : Proc(IHTMLWindow7*, Int32*, HRESULT)
    get_outer_height : Proc(IHTMLWindow7*, Int32*, HRESULT)
    put_onabort : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onabort : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_oncanplay : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_oncanplay : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_oncanplaythrough : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_oncanplaythrough : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onchange : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onchange : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onclick : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onclick : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_oncontextmenu : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_oncontextmenu : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondblclick : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondblclick : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondrag : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondrag : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondragend : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondragend : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondragenter : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondragenter : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondragleave : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondragleave : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondragover : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondragover : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondragstart : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondragstart : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondrop : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondrop : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ondurationchange : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ondurationchange : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onfocusin : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onfocusin : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onfocusout : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onfocusout : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_oninput : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_oninput : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onemptied : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onemptied : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onended : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onended : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onkeydown : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onkeydown : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onkeypress : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onkeypress : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onkeyup : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onkeyup : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onloadeddata : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onloadeddata : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onloadedmetadata : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onloadedmetadata : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onloadstart : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onloadstart : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmousedown : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmousedown : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmouseenter : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmouseenter : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmouseleave : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmouseleave : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmousemove : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmousemove : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmouseout : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmouseout : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmouseover : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmouseover : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmouseup : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmouseup : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onmousewheel : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onmousewheel : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onoffline : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onoffline : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ononline : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ononline : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onprogress : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onprogress : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onratechange : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onratechange : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onreadystatechange : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onreset : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onreset : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onseeked : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onseeked : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onseeking : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onseeking : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onselect : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onselect : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onstalled : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onstalled : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onstorage : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onstorage : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onsubmit : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onsubmit : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onsuspend : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onsuspend : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_ontimeupdate : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_ontimeupdate : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onpause : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onpause : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onplay : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onplay : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onplaying : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onplaying : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onvolumechange : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onvolumechange : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
    put_onwaiting : Proc(IHTMLWindow7*, VARIANT, HRESULT)
    get_onwaiting : Proc(IHTMLWindow7*, VARIANT*, HRESULT)
  end

  IHTMLWindow7_GUID = "305104b7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow7 = LibC::GUID.new(0x305104b7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow7
    lpVtbl : IHTMLWindow7VTbl*
  end

  struct IHTMLWindow8VTbl
    query_interface : Proc(IHTMLWindow8*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLWindow8*, UInt32)
    release : Proc(IHTMLWindow8*, UInt32)
    get_type_info_count : Proc(IHTMLWindow8*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLWindow8*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLWindow8*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLWindow8*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmspointerdown : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointerdown : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointermove : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointermove : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointerup : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointerup : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointerover : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointerover : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointerout : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointerout : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointercancel : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointercancel : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmspointerhover : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmspointerhover : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgesturestart : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgesturestart : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgesturechange : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgesturechange : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgestureend : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgestureend : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgesturehold : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgesturehold : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgesturetap : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgesturetap : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsgesturedoubletap : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsgesturedoubletap : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    put_onmsinertiastart : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onmsinertiastart : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
    get_application_cache : Proc(IHTMLWindow8*, IHTMLApplicationCache*, HRESULT)
    put_onpopstate : Proc(IHTMLWindow8*, VARIANT, HRESULT)
    get_onpopstate : Proc(IHTMLWindow8*, VARIANT*, HRESULT)
  end

  IHTMLWindow8_GUID = "305107ab-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLWindow8 = LibC::GUID.new(0x305107ab_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLWindow8
    lpVtbl : IHTMLWindow8VTbl*
  end

  struct DispHTMLScreenVTbl
    query_interface : Proc(DispHTMLScreen*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLScreen*, UInt32)
    release : Proc(DispHTMLScreen*, UInt32)
    get_type_info_count : Proc(DispHTMLScreen*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLScreen*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLScreen*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLScreen*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLScreen_GUID = "3050f591-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLScreen = LibC::GUID.new(0x3050f591_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLScreen
    lpVtbl : DispHTMLScreenVTbl*
  end

  struct DispHTMLWindow2VTbl
    query_interface : Proc(DispHTMLWindow2*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLWindow2*, UInt32)
    release : Proc(DispHTMLWindow2*, UInt32)
    get_type_info_count : Proc(DispHTMLWindow2*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLWindow2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLWindow2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLWindow2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLWindow2_GUID = "3050f55d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLWindow2 = LibC::GUID.new(0x3050f55d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLWindow2
    lpVtbl : DispHTMLWindow2VTbl*
  end

  struct DispHTMLWindowProxyVTbl
    query_interface : Proc(DispHTMLWindowProxy*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLWindowProxy*, UInt32)
    release : Proc(DispHTMLWindowProxy*, UInt32)
    get_type_info_count : Proc(DispHTMLWindowProxy*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLWindowProxy*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLWindowProxy*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLWindowProxy*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLWindowProxy_GUID = "3050f55e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLWindowProxy = LibC::GUID.new(0x3050f55e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLWindowProxy
    lpVtbl : DispHTMLWindowProxyVTbl*
  end

  struct IHTMLDocumentCompatibleInfoVTbl
    query_interface : Proc(IHTMLDocumentCompatibleInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocumentCompatibleInfo*, UInt32)
    release : Proc(IHTMLDocumentCompatibleInfo*, UInt32)
    get_type_info_count : Proc(IHTMLDocumentCompatibleInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocumentCompatibleInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocumentCompatibleInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocumentCompatibleInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_user_agent : Proc(IHTMLDocumentCompatibleInfo*, UInt8**, HRESULT)
    get_version : Proc(IHTMLDocumentCompatibleInfo*, UInt8**, HRESULT)
  end

  IHTMLDocumentCompatibleInfo_GUID = "3051041a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocumentCompatibleInfo = LibC::GUID.new(0x3051041a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocumentCompatibleInfo
    lpVtbl : IHTMLDocumentCompatibleInfoVTbl*
  end

  struct IHTMLDocumentCompatibleInfoCollectionVTbl
    query_interface : Proc(IHTMLDocumentCompatibleInfoCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocumentCompatibleInfoCollection*, UInt32)
    release : Proc(IHTMLDocumentCompatibleInfoCollection*, UInt32)
    get_type_info_count : Proc(IHTMLDocumentCompatibleInfoCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocumentCompatibleInfoCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocumentCompatibleInfoCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocumentCompatibleInfoCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLDocumentCompatibleInfoCollection*, Int32*, HRESULT)
    item : Proc(IHTMLDocumentCompatibleInfoCollection*, Int32, IHTMLDocumentCompatibleInfo*, HRESULT)
  end

  IHTMLDocumentCompatibleInfoCollection_GUID = "30510418-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocumentCompatibleInfoCollection = LibC::GUID.new(0x30510418_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocumentCompatibleInfoCollection
    lpVtbl : IHTMLDocumentCompatibleInfoCollectionVTbl*
  end

  struct DispHTMLDocumentCompatibleInfoVTbl
    query_interface : Proc(DispHTMLDocumentCompatibleInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDocumentCompatibleInfo*, UInt32)
    release : Proc(DispHTMLDocumentCompatibleInfo*, UInt32)
    get_type_info_count : Proc(DispHTMLDocumentCompatibleInfo*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDocumentCompatibleInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDocumentCompatibleInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDocumentCompatibleInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDocumentCompatibleInfo_GUID = "3050f53e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDocumentCompatibleInfo = LibC::GUID.new(0x3050f53e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDocumentCompatibleInfo
    lpVtbl : DispHTMLDocumentCompatibleInfoVTbl*
  end

  struct DispHTMLDocumentCompatibleInfoCollectionVTbl
    query_interface : Proc(DispHTMLDocumentCompatibleInfoCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDocumentCompatibleInfoCollection*, UInt32)
    release : Proc(DispHTMLDocumentCompatibleInfoCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLDocumentCompatibleInfoCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDocumentCompatibleInfoCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDocumentCompatibleInfoCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDocumentCompatibleInfoCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDocumentCompatibleInfoCollection_GUID = "3050f53f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDocumentCompatibleInfoCollection = LibC::GUID.new(0x3050f53f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDocumentCompatibleInfoCollection
    lpVtbl : DispHTMLDocumentCompatibleInfoCollectionVTbl*
  end

  struct HTMLDocumentEvents4VTbl
    query_interface : Proc(HTMLDocumentEvents4*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLDocumentEvents4*, UInt32)
    release : Proc(HTMLDocumentEvents4*, UInt32)
    get_type_info_count : Proc(HTMLDocumentEvents4*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLDocumentEvents4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLDocumentEvents4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLDocumentEvents4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLDocumentEvents4_GUID = "30510737-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLDocumentEvents4 = LibC::GUID.new(0x30510737_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLDocumentEvents4
    lpVtbl : HTMLDocumentEvents4VTbl*
  end

  struct HTMLDocumentEvents3VTbl
    query_interface : Proc(HTMLDocumentEvents3*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLDocumentEvents3*, UInt32)
    release : Proc(HTMLDocumentEvents3*, UInt32)
    get_type_info_count : Proc(HTMLDocumentEvents3*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLDocumentEvents3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLDocumentEvents3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLDocumentEvents3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLDocumentEvents3_GUID = "3050f5a0-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLDocumentEvents3 = LibC::GUID.new(0x3050f5a0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLDocumentEvents3
    lpVtbl : HTMLDocumentEvents3VTbl*
  end

  struct HTMLDocumentEvents2VTbl
    query_interface : Proc(HTMLDocumentEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLDocumentEvents2*, UInt32)
    release : Proc(HTMLDocumentEvents2*, UInt32)
    get_type_info_count : Proc(HTMLDocumentEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLDocumentEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLDocumentEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLDocumentEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLDocumentEvents2_GUID = "3050f613-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLDocumentEvents2 = LibC::GUID.new(0x3050f613_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLDocumentEvents2
    lpVtbl : HTMLDocumentEvents2VTbl*
  end

  struct HTMLDocumentEventsVTbl
    query_interface : Proc(HTMLDocumentEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLDocumentEvents*, UInt32)
    release : Proc(HTMLDocumentEvents*, UInt32)
    get_type_info_count : Proc(HTMLDocumentEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLDocumentEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLDocumentEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLDocumentEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLDocumentEvents_GUID = "3050f260-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLDocumentEvents = LibC::GUID.new(0x3050f260_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLDocumentEvents
    lpVtbl : HTMLDocumentEventsVTbl*
  end

  struct ISVGSVGElementVTbl
    query_interface : Proc(ISVGSVGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGSVGElement*, UInt32)
    release : Proc(ISVGSVGElement*, UInt32)
    get_type_info_count : Proc(ISVGSVGElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGSVGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGSVGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGSVGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x : Proc(ISVGSVGElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGSVGElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGSVGElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGSVGElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGSVGElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGSVGElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGSVGElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGSVGElement*, ISVGAnimatedLength*, HRESULT)
    put_content_script_type : Proc(ISVGSVGElement*, UInt8*, HRESULT)
    get_content_script_type : Proc(ISVGSVGElement*, UInt8**, HRESULT)
    put_content_style_type : Proc(ISVGSVGElement*, UInt8*, HRESULT)
    get_content_style_type : Proc(ISVGSVGElement*, UInt8**, HRESULT)
    putref_viewport : Proc(ISVGSVGElement*, ISVGRect, HRESULT)
    get_viewport : Proc(ISVGSVGElement*, ISVGRect*, HRESULT)
    put_pixel_unit_to_millimeter_x : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_pixel_unit_to_millimeter_x : Proc(ISVGSVGElement*, Float32*, HRESULT)
    put_pixel_unit_to_millimeter_y : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_pixel_unit_to_millimeter_y : Proc(ISVGSVGElement*, Float32*, HRESULT)
    put_screen_pixel_to_millimeter_x : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_screen_pixel_to_millimeter_x : Proc(ISVGSVGElement*, Float32*, HRESULT)
    put_screen_pixel_to_millimeter_y : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_screen_pixel_to_millimeter_y : Proc(ISVGSVGElement*, Float32*, HRESULT)
    put_use_current_view : Proc(ISVGSVGElement*, Int16, HRESULT)
    get_use_current_view : Proc(ISVGSVGElement*, Int16*, HRESULT)
    putref_current_view : Proc(ISVGSVGElement*, ISVGViewSpec, HRESULT)
    get_current_view : Proc(ISVGSVGElement*, ISVGViewSpec*, HRESULT)
    put_current_scale : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_current_scale : Proc(ISVGSVGElement*, Float32*, HRESULT)
    putref_current_translate : Proc(ISVGSVGElement*, ISVGPoint, HRESULT)
    get_current_translate : Proc(ISVGSVGElement*, ISVGPoint*, HRESULT)
    suspend_redraw : Proc(ISVGSVGElement*, UInt32, UInt32*, HRESULT)
    unsuspend_redraw : Proc(ISVGSVGElement*, UInt32, HRESULT)
    unsuspend_redraw_all : Proc(ISVGSVGElement*, HRESULT)
    force_redraw : Proc(ISVGSVGElement*, HRESULT)
    pause_animations : Proc(ISVGSVGElement*, HRESULT)
    unpause_animations : Proc(ISVGSVGElement*, HRESULT)
    animations_paused : Proc(ISVGSVGElement*, Int16*, HRESULT)
    get_current_time : Proc(ISVGSVGElement*, Float32*, HRESULT)
    set_current_time : Proc(ISVGSVGElement*, Float32, HRESULT)
    get_intersection_list : Proc(ISVGSVGElement*, ISVGRect, ISVGElement, VARIANT*, HRESULT)
    get_enclosure_list : Proc(ISVGSVGElement*, ISVGRect, ISVGElement, VARIANT*, HRESULT)
    check_intersection : Proc(ISVGSVGElement*, ISVGElement, ISVGRect, Int16*, HRESULT)
    check_enclosure : Proc(ISVGSVGElement*, ISVGElement, ISVGRect, Int16*, HRESULT)
    deselect_all : Proc(ISVGSVGElement*, HRESULT)
    create_svg_number : Proc(ISVGSVGElement*, ISVGNumber*, HRESULT)
    create_svg_length : Proc(ISVGSVGElement*, ISVGLength*, HRESULT)
    create_svg_angle : Proc(ISVGSVGElement*, ISVGAngle*, HRESULT)
    create_svg_point : Proc(ISVGSVGElement*, ISVGPoint*, HRESULT)
    create_svg_matrix : Proc(ISVGSVGElement*, ISVGMatrix*, HRESULT)
    create_svg_rect : Proc(ISVGSVGElement*, ISVGRect*, HRESULT)
    create_svg_transform : Proc(ISVGSVGElement*, ISVGTransform*, HRESULT)
    create_svg_transform_from_matrix : Proc(ISVGSVGElement*, ISVGMatrix, ISVGTransform*, HRESULT)
    get_element_by_id : Proc(ISVGSVGElement*, UInt8*, IHTMLElement*, HRESULT)
  end

  ISVGSVGElement_GUID = "305104e7-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGSVGElement = LibC::GUID.new(0x305104e7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGSVGElement
    lpVtbl : ISVGSVGElementVTbl*
  end

  struct IDOMNodeIteratorVTbl
    query_interface : Proc(IDOMNodeIterator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMNodeIterator*, UInt32)
    release : Proc(IDOMNodeIterator*, UInt32)
    get_type_info_count : Proc(IDOMNodeIterator*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMNodeIterator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMNodeIterator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMNodeIterator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root : Proc(IDOMNodeIterator*, IDispatch*, HRESULT)
    get_what_to_show : Proc(IDOMNodeIterator*, UInt32*, HRESULT)
    get_filter : Proc(IDOMNodeIterator*, IDispatch*, HRESULT)
    get_expand_entity_references : Proc(IDOMNodeIterator*, Int16*, HRESULT)
    next_node : Proc(IDOMNodeIterator*, IDispatch*, HRESULT)
    previous_node : Proc(IDOMNodeIterator*, IDispatch*, HRESULT)
    detach : Proc(IDOMNodeIterator*, HRESULT)
  end

  IDOMNodeIterator_GUID = "30510746-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMNodeIterator = LibC::GUID.new(0x30510746_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMNodeIterator
    lpVtbl : IDOMNodeIteratorVTbl*
  end

  struct IDOMTreeWalkerVTbl
    query_interface : Proc(IDOMTreeWalker*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMTreeWalker*, UInt32)
    release : Proc(IDOMTreeWalker*, UInt32)
    get_type_info_count : Proc(IDOMTreeWalker*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMTreeWalker*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMTreeWalker*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMTreeWalker*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    get_what_to_show : Proc(IDOMTreeWalker*, UInt32*, HRESULT)
    get_filter : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    get_expand_entity_references : Proc(IDOMTreeWalker*, Int16*, HRESULT)
    putref_current_node : Proc(IDOMTreeWalker*, IDispatch, HRESULT)
    get_current_node : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    parent_node : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    first_child : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    last_child : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    previous_sibling : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    next_sibling : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    previous_node : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
    next_node : Proc(IDOMTreeWalker*, IDispatch*, HRESULT)
  end

  IDOMTreeWalker_GUID = "30510748-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMTreeWalker = LibC::GUID.new(0x30510748_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMTreeWalker
    lpVtbl : IDOMTreeWalkerVTbl*
  end

  struct IDOMProcessingInstructionVTbl
    query_interface : Proc(IDOMProcessingInstruction*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMProcessingInstruction*, UInt32)
    release : Proc(IDOMProcessingInstruction*, UInt32)
    get_type_info_count : Proc(IDOMProcessingInstruction*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMProcessingInstruction*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMProcessingInstruction*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMProcessingInstruction*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_target : Proc(IDOMProcessingInstruction*, UInt8**, HRESULT)
    put_data : Proc(IDOMProcessingInstruction*, UInt8*, HRESULT)
    get_data : Proc(IDOMProcessingInstruction*, UInt8**, HRESULT)
  end

  IDOMProcessingInstruction_GUID = "30510742-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMProcessingInstruction = LibC::GUID.new(0x30510742_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMProcessingInstruction
    lpVtbl : IDOMProcessingInstructionVTbl*
  end

  struct IHTMLDocument3VTbl
    query_interface : Proc(IHTMLDocument3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument3*, UInt32)
    release : Proc(IHTMLDocument3*, UInt32)
    get_type_info_count : Proc(IHTMLDocument3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    release_capture : Proc(IHTMLDocument3*, HRESULT)
    recalc : Proc(IHTMLDocument3*, Int16, HRESULT)
    create_text_node : Proc(IHTMLDocument3*, UInt8*, IHTMLDOMNode*, HRESULT)
    get_document_element : Proc(IHTMLDocument3*, IHTMLElement*, HRESULT)
    get_unique_id : Proc(IHTMLDocument3*, UInt8**, HRESULT)
    attach_event : Proc(IHTMLDocument3*, UInt8*, IDispatch, Int16*, HRESULT)
    detach_event : Proc(IHTMLDocument3*, UInt8*, IDispatch, HRESULT)
    put_onrowsdelete : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_onrowsdelete : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_onrowsinserted : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_onrowsinserted : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_oncellchange : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_oncellchange : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_ondatasetchanged : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_ondatasetchanged : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_ondataavailable : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_ondataavailable : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_ondatasetcomplete : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_ondatasetcomplete : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_onpropertychange : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_onpropertychange : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_dir : Proc(IHTMLDocument3*, UInt8*, HRESULT)
    get_dir : Proc(IHTMLDocument3*, UInt8**, HRESULT)
    put_oncontextmenu : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_oncontextmenu : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    put_onstop : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_onstop : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    create_document_fragment : Proc(IHTMLDocument3*, IHTMLDocument2*, HRESULT)
    get_parent_document : Proc(IHTMLDocument3*, IHTMLDocument2*, HRESULT)
    put_enable_download : Proc(IHTMLDocument3*, Int16, HRESULT)
    get_enable_download : Proc(IHTMLDocument3*, Int16*, HRESULT)
    put_base_url : Proc(IHTMLDocument3*, UInt8*, HRESULT)
    get_base_url : Proc(IHTMLDocument3*, UInt8**, HRESULT)
    get_child_nodes : Proc(IHTMLDocument3*, IDispatch*, HRESULT)
    put_inherit_style_sheets : Proc(IHTMLDocument3*, Int16, HRESULT)
    get_inherit_style_sheets : Proc(IHTMLDocument3*, Int16*, HRESULT)
    put_onbeforeeditfocus : Proc(IHTMLDocument3*, VARIANT, HRESULT)
    get_onbeforeeditfocus : Proc(IHTMLDocument3*, VARIANT*, HRESULT)
    get_elements_by_name : Proc(IHTMLDocument3*, UInt8*, IHTMLElementCollection*, HRESULT)
    get_element_by_id : Proc(IHTMLDocument3*, UInt8*, IHTMLElement*, HRESULT)
    get_elements_by_tag_name : Proc(IHTMLDocument3*, UInt8*, IHTMLElementCollection*, HRESULT)
  end

  IHTMLDocument3_GUID = "3050f485-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument3 = LibC::GUID.new(0x3050f485_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument3
    lpVtbl : IHTMLDocument3VTbl*
  end

  struct IHTMLDocument4VTbl
    query_interface : Proc(IHTMLDocument4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument4*, UInt32)
    release : Proc(IHTMLDocument4*, UInt32)
    get_type_info_count : Proc(IHTMLDocument4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    focus : Proc(IHTMLDocument4*, HRESULT)
    has_focus : Proc(IHTMLDocument4*, Int16*, HRESULT)
    put_onselectionchange : Proc(IHTMLDocument4*, VARIANT, HRESULT)
    get_onselectionchange : Proc(IHTMLDocument4*, VARIANT*, HRESULT)
    get_namespaces : Proc(IHTMLDocument4*, IDispatch*, HRESULT)
    create_document_from_url : Proc(IHTMLDocument4*, UInt8*, UInt8*, IHTMLDocument2*, HRESULT)
    put_media : Proc(IHTMLDocument4*, UInt8*, HRESULT)
    get_media : Proc(IHTMLDocument4*, UInt8**, HRESULT)
    create_event_object : Proc(IHTMLDocument4*, VARIANT*, IHTMLEventObj*, HRESULT)
    fire_event : Proc(IHTMLDocument4*, UInt8*, VARIANT*, Int16*, HRESULT)
    create_render_style : Proc(IHTMLDocument4*, UInt8*, IHTMLRenderStyle*, HRESULT)
    put_oncontrolselect : Proc(IHTMLDocument4*, VARIANT, HRESULT)
    get_oncontrolselect : Proc(IHTMLDocument4*, VARIANT*, HRESULT)
    get_url_unencoded : Proc(IHTMLDocument4*, UInt8**, HRESULT)
  end

  IHTMLDocument4_GUID = "3050f69a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument4 = LibC::GUID.new(0x3050f69a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument4
    lpVtbl : IHTMLDocument4VTbl*
  end

  struct IHTMLDocument5VTbl
    query_interface : Proc(IHTMLDocument5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument5*, UInt32)
    release : Proc(IHTMLDocument5*, UInt32)
    get_type_info_count : Proc(IHTMLDocument5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmousewheel : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onmousewheel : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    get_doctype : Proc(IHTMLDocument5*, IHTMLDOMNode*, HRESULT)
    get_implementation : Proc(IHTMLDocument5*, IHTMLDOMImplementation*, HRESULT)
    create_attribute : Proc(IHTMLDocument5*, UInt8*, IHTMLDOMAttribute*, HRESULT)
    create_comment : Proc(IHTMLDocument5*, UInt8*, IHTMLDOMNode*, HRESULT)
    put_onfocusin : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onfocusin : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    put_onfocusout : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onfocusout : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    put_onactivate : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onactivate : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    put_ondeactivate : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_ondeactivate : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    put_onbeforeactivate : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onbeforeactivate : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    put_onbeforedeactivate : Proc(IHTMLDocument5*, VARIANT, HRESULT)
    get_onbeforedeactivate : Proc(IHTMLDocument5*, VARIANT*, HRESULT)
    get_compat_mode : Proc(IHTMLDocument5*, UInt8**, HRESULT)
  end

  IHTMLDocument5_GUID = "3050f80c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument5 = LibC::GUID.new(0x3050f80c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument5
    lpVtbl : IHTMLDocument5VTbl*
  end

  struct IHTMLDocument6VTbl
    query_interface : Proc(IHTMLDocument6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument6*, UInt32)
    release : Proc(IHTMLDocument6*, UInt32)
    get_type_info_count : Proc(IHTMLDocument6*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument6*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument6*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument6*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_compatible : Proc(IHTMLDocument6*, IHTMLDocumentCompatibleInfoCollection*, HRESULT)
    get_document_mode : Proc(IHTMLDocument6*, VARIANT*, HRESULT)
    put_onstorage : Proc(IHTMLDocument6*, VARIANT, HRESULT)
    get_onstorage : Proc(IHTMLDocument6*, VARIANT*, HRESULT)
    put_onstoragecommit : Proc(IHTMLDocument6*, VARIANT, HRESULT)
    get_onstoragecommit : Proc(IHTMLDocument6*, VARIANT*, HRESULT)
    get_element_by_id : Proc(IHTMLDocument6*, UInt8*, IHTMLElement2*, HRESULT)
    update_settings : Proc(IHTMLDocument6*, HRESULT)
  end

  IHTMLDocument6_GUID = "30510417-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument6 = LibC::GUID.new(0x30510417_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument6
    lpVtbl : IHTMLDocument6VTbl*
  end

  struct IHTMLDocument8VTbl
    query_interface : Proc(IHTMLDocument8*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDocument8*, UInt32)
    release : Proc(IHTMLDocument8*, UInt32)
    get_type_info_count : Proc(IHTMLDocument8*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDocument8*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDocument8*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDocument8*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onmscontentzoom : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmscontentzoom : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointerdown : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointerdown : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointermove : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointermove : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointerup : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointerup : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointerover : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointerover : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointerout : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointerout : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointercancel : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointercancel : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmspointerhover : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmspointerhover : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgesturestart : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgesturestart : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgesturechange : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgesturechange : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgestureend : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgestureend : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgesturehold : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgesturehold : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgesturetap : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgesturetap : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsgesturedoubletap : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsgesturedoubletap : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_onmsinertiastart : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsinertiastart : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    elements_from_point : Proc(IHTMLDocument8*, Float32, Float32, IHTMLDOMChildrenCollection*, HRESULT)
    elements_from_rect : Proc(IHTMLDocument8*, Float32, Float32, Float32, Float32, IHTMLDOMChildrenCollection*, HRESULT)
    put_onmsmanipulationstatechanged : Proc(IHTMLDocument8*, VARIANT, HRESULT)
    get_onmsmanipulationstatechanged : Proc(IHTMLDocument8*, VARIANT*, HRESULT)
    put_ms_caps_lock_warning_off : Proc(IHTMLDocument8*, Int16, HRESULT)
    get_ms_caps_lock_warning_off : Proc(IHTMLDocument8*, Int16*, HRESULT)
  end

  IHTMLDocument8_GUID = "305107d0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDocument8 = LibC::GUID.new(0x305107d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDocument8
    lpVtbl : IHTMLDocument8VTbl*
  end

  struct IDocumentEventVTbl
    query_interface : Proc(IDocumentEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocumentEvent*, UInt32)
    release : Proc(IDocumentEvent*, UInt32)
    get_type_info_count : Proc(IDocumentEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDocumentEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDocumentEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDocumentEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_event : Proc(IDocumentEvent*, UInt8*, IDOMEvent*, HRESULT)
  end

  IDocumentEvent_GUID = "305104bc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocumentEvent = LibC::GUID.new(0x305104bc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocumentEvent
    lpVtbl : IDocumentEventVTbl*
  end

  struct IDocumentRangeVTbl
    query_interface : Proc(IDocumentRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocumentRange*, UInt32)
    release : Proc(IDocumentRange*, UInt32)
    get_type_info_count : Proc(IDocumentRange*, UInt32*, HRESULT)
    get_type_info : Proc(IDocumentRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDocumentRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDocumentRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_range : Proc(IDocumentRange*, IHTMLDOMRange*, HRESULT)
  end

  IDocumentRange_GUID = "305104af-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocumentRange = LibC::GUID.new(0x305104af_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocumentRange
    lpVtbl : IDocumentRangeVTbl*
  end

  struct IDocumentSelectorVTbl
    query_interface : Proc(IDocumentSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocumentSelector*, UInt32)
    release : Proc(IDocumentSelector*, UInt32)
    get_type_info_count : Proc(IDocumentSelector*, UInt32*, HRESULT)
    get_type_info : Proc(IDocumentSelector*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDocumentSelector*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDocumentSelector*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    query_selector : Proc(IDocumentSelector*, UInt8*, IHTMLElement*, HRESULT)
    query_selector_all : Proc(IDocumentSelector*, UInt8*, IHTMLDOMChildrenCollection*, HRESULT)
  end

  IDocumentSelector_GUID = "30510462-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocumentSelector = LibC::GUID.new(0x30510462_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocumentSelector
    lpVtbl : IDocumentSelectorVTbl*
  end

  struct IDocumentTraversalVTbl
    query_interface : Proc(IDocumentTraversal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocumentTraversal*, UInt32)
    release : Proc(IDocumentTraversal*, UInt32)
    get_type_info_count : Proc(IDocumentTraversal*, UInt32*, HRESULT)
    get_type_info : Proc(IDocumentTraversal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDocumentTraversal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDocumentTraversal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_node_iterator : Proc(IDocumentTraversal*, IDispatch, Int32, VARIANT*, Int16, IDOMNodeIterator*, HRESULT)
    create_tree_walker : Proc(IDocumentTraversal*, IDispatch, Int32, VARIANT*, Int16, IDOMTreeWalker*, HRESULT)
  end

  IDocumentTraversal_GUID = "30510744-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocumentTraversal = LibC::GUID.new(0x30510744_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocumentTraversal
    lpVtbl : IDocumentTraversalVTbl*
  end

  struct DispHTMLDocumentVTbl
    query_interface : Proc(DispHTMLDocument*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDocument*, UInt32)
    release : Proc(DispHTMLDocument*, UInt32)
    get_type_info_count : Proc(DispHTMLDocument*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDocument*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDocument*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDocument*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDocument_GUID = "3050f55f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDocument = LibC::GUID.new(0x3050f55f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDocument
    lpVtbl : DispHTMLDocumentVTbl*
  end

  struct DWebBridgeEventsVTbl
    query_interface : Proc(DWebBridgeEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DWebBridgeEvents*, UInt32)
    release : Proc(DWebBridgeEvents*, UInt32)
    get_type_info_count : Proc(DWebBridgeEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DWebBridgeEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DWebBridgeEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DWebBridgeEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DWebBridgeEvents_GUID = "a6d897ff-0a95-11d1-b0ba-006008166e11"
  IID_DWebBridgeEvents = LibC::GUID.new(0xa6d897ff_u32, 0xa95_u16, 0x11d1_u16, StaticArray[0xb0_u8, 0xba_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0x16_u8, 0x6e_u8, 0x11_u8])
  struct DWebBridgeEvents
    lpVtbl : DWebBridgeEventsVTbl*
  end

  struct IWebBridgeVTbl
    query_interface : Proc(IWebBridge*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBridge*, UInt32)
    release : Proc(IWebBridge*, UInt32)
    get_type_info_count : Proc(IWebBridge*, UInt32*, HRESULT)
    get_type_info : Proc(IWebBridge*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebBridge*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebBridge*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_url : Proc(IWebBridge*, UInt8*, HRESULT)
    get_url : Proc(IWebBridge*, UInt8**, HRESULT)
    put_scrollbar : Proc(IWebBridge*, Int16, HRESULT)
    get_scrollbar : Proc(IWebBridge*, Int16*, HRESULT)
    put_embed : Proc(IWebBridge*, Int16, HRESULT)
    get_embed : Proc(IWebBridge*, Int16*, HRESULT)
    get_event : Proc(IWebBridge*, IDispatch*, HRESULT)
    get_ready_state : Proc(IWebBridge*, Int32*, HRESULT)
    about_box : Proc(IWebBridge*, HRESULT)
  end

  IWebBridge_GUID = "ae24fdad-03c6-11d1-8b76-0080c744f389"
  IID_IWebBridge = LibC::GUID.new(0xae24fdad_u32, 0x3c6_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0x76_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x44_u8, 0xf3_u8, 0x89_u8])
  struct IWebBridge
    lpVtbl : IWebBridgeVTbl*
  end

  struct IWBScriptControlVTbl
    query_interface : Proc(IWBScriptControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWBScriptControl*, UInt32)
    release : Proc(IWBScriptControl*, UInt32)
    get_type_info_count : Proc(IWBScriptControl*, UInt32*, HRESULT)
    get_type_info : Proc(IWBScriptControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWBScriptControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWBScriptControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    raise_event : Proc(IWBScriptControl*, UInt8*, VARIANT, HRESULT)
    bubble_event : Proc(IWBScriptControl*, HRESULT)
    set_context_menu : Proc(IWBScriptControl*, VARIANT, HRESULT)
    put_selectable_content : Proc(IWBScriptControl*, Int16, HRESULT)
    get_selectable_content : Proc(IWBScriptControl*, Int16*, HRESULT)
    get_frozen : Proc(IWBScriptControl*, Int16*, HRESULT)
    put_scrollbar : Proc(IWBScriptControl*, Int16, HRESULT)
    get_scrollbar : Proc(IWBScriptControl*, Int16*, HRESULT)
    get_version : Proc(IWBScriptControl*, UInt8**, HRESULT)
    get_visibility : Proc(IWBScriptControl*, Int16*, HRESULT)
    put_onvisibilitychange : Proc(IWBScriptControl*, VARIANT, HRESULT)
    get_onvisibilitychange : Proc(IWBScriptControl*, VARIANT*, HRESULT)
  end

  IWBScriptControl_GUID = "a5170870-0cf8-11d1-8b91-0080c744f389"
  IID_IWBScriptControl = LibC::GUID.new(0xa5170870_u32, 0xcf8_u16, 0x11d1_u16, StaticArray[0x8b_u8, 0x91_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x44_u8, 0xf3_u8, 0x89_u8])
  struct IWBScriptControl
    lpVtbl : IWBScriptControlVTbl*
  end

  struct IHTMLEmbedElementVTbl
    query_interface : Proc(IHTMLEmbedElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEmbedElement*, UInt32)
    release : Proc(IHTMLEmbedElement*, UInt32)
    get_type_info_count : Proc(IHTMLEmbedElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEmbedElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEmbedElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEmbedElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_hidden : Proc(IHTMLEmbedElement*, UInt8*, HRESULT)
    get_hidden : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    get_palette : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    get_pluginspage : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    put_src : Proc(IHTMLEmbedElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    put_units : Proc(IHTMLEmbedElement*, UInt8*, HRESULT)
    get_units : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLEmbedElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLEmbedElement*, UInt8**, HRESULT)
    put_width : Proc(IHTMLEmbedElement*, VARIANT, HRESULT)
    get_width : Proc(IHTMLEmbedElement*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLEmbedElement*, VARIANT, HRESULT)
    get_height : Proc(IHTMLEmbedElement*, VARIANT*, HRESULT)
  end

  IHTMLEmbedElement_GUID = "3050f25f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEmbedElement = LibC::GUID.new(0x3050f25f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEmbedElement
    lpVtbl : IHTMLEmbedElementVTbl*
  end

  struct IHTMLEmbedElement2VTbl
    query_interface : Proc(IHTMLEmbedElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEmbedElement2*, UInt32)
    release : Proc(IHTMLEmbedElement2*, UInt32)
    get_type_info_count : Proc(IHTMLEmbedElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLEmbedElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLEmbedElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLEmbedElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLEmbedElement2*, UInt8*, HRESULT)
    get_src : Proc(IHTMLEmbedElement2*, UInt8**, HRESULT)
    get_pluginspage : Proc(IHTMLEmbedElement2*, UInt8**, HRESULT)
  end

  IHTMLEmbedElement2_GUID = "30510493-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEmbedElement2 = LibC::GUID.new(0x30510493_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEmbedElement2
    lpVtbl : IHTMLEmbedElement2VTbl*
  end

  struct DispHTMLEmbedVTbl
    query_interface : Proc(DispHTMLEmbed*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLEmbed*, UInt32)
    release : Proc(DispHTMLEmbed*, UInt32)
    get_type_info_count : Proc(DispHTMLEmbed*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLEmbed*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLEmbed*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLEmbed*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLEmbed_GUID = "3050f52e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLEmbed = LibC::GUID.new(0x3050f52e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLEmbed
    lpVtbl : DispHTMLEmbedVTbl*
  end

  struct HTMLMapEvents2VTbl
    query_interface : Proc(HTMLMapEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLMapEvents2*, UInt32)
    release : Proc(HTMLMapEvents2*, UInt32)
    get_type_info_count : Proc(HTMLMapEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLMapEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLMapEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLMapEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLMapEvents2_GUID = "3050f61e-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLMapEvents2 = LibC::GUID.new(0x3050f61e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLMapEvents2
    lpVtbl : HTMLMapEvents2VTbl*
  end

  struct HTMLMapEventsVTbl
    query_interface : Proc(HTMLMapEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLMapEvents*, UInt32)
    release : Proc(HTMLMapEvents*, UInt32)
    get_type_info_count : Proc(HTMLMapEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLMapEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLMapEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLMapEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLMapEvents_GUID = "3050f3ba-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLMapEvents = LibC::GUID.new(0x3050f3ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLMapEvents
    lpVtbl : HTMLMapEventsVTbl*
  end

  struct IHTMLAreasCollectionVTbl
    query_interface : Proc(IHTMLAreasCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreasCollection*, UInt32)
    release : Proc(IHTMLAreasCollection*, UInt32)
    get_type_info_count : Proc(IHTMLAreasCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreasCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreasCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreasCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_length : Proc(IHTMLAreasCollection*, Int32, HRESULT)
    get_length : Proc(IHTMLAreasCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLAreasCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLAreasCollection*, VARIANT, VARIANT, IDispatch*, HRESULT)
    tags : Proc(IHTMLAreasCollection*, VARIANT, IDispatch*, HRESULT)
    add : Proc(IHTMLAreasCollection*, IHTMLElement, VARIANT, HRESULT)
    remove : Proc(IHTMLAreasCollection*, Int32, HRESULT)
  end

  IHTMLAreasCollection_GUID = "3050f383-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreasCollection = LibC::GUID.new(0x3050f383_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreasCollection
    lpVtbl : IHTMLAreasCollectionVTbl*
  end

  struct IHTMLAreasCollection2VTbl
    query_interface : Proc(IHTMLAreasCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreasCollection2*, UInt32)
    release : Proc(IHTMLAreasCollection2*, UInt32)
    get_type_info_count : Proc(IHTMLAreasCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreasCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreasCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreasCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    urns : Proc(IHTMLAreasCollection2*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLAreasCollection2_GUID = "3050f5ec-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreasCollection2 = LibC::GUID.new(0x3050f5ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreasCollection2
    lpVtbl : IHTMLAreasCollection2VTbl*
  end

  struct IHTMLAreasCollection3VTbl
    query_interface : Proc(IHTMLAreasCollection3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreasCollection3*, UInt32)
    release : Proc(IHTMLAreasCollection3*, UInt32)
    get_type_info_count : Proc(IHTMLAreasCollection3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreasCollection3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreasCollection3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreasCollection3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    named_item : Proc(IHTMLAreasCollection3*, UInt8*, IDispatch*, HRESULT)
  end

  IHTMLAreasCollection3_GUID = "3050f837-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreasCollection3 = LibC::GUID.new(0x3050f837_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreasCollection3
    lpVtbl : IHTMLAreasCollection3VTbl*
  end

  struct IHTMLAreasCollection4VTbl
    query_interface : Proc(IHTMLAreasCollection4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreasCollection4*, UInt32)
    release : Proc(IHTMLAreasCollection4*, UInt32)
    get_type_info_count : Proc(IHTMLAreasCollection4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreasCollection4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreasCollection4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreasCollection4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLAreasCollection4*, Int32*, HRESULT)
    item : Proc(IHTMLAreasCollection4*, Int32, IHTMLElement2*, HRESULT)
    named_item : Proc(IHTMLAreasCollection4*, UInt8*, IHTMLElement2*, HRESULT)
  end

  IHTMLAreasCollection4_GUID = "30510492-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreasCollection4 = LibC::GUID.new(0x30510492_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreasCollection4
    lpVtbl : IHTMLAreasCollection4VTbl*
  end

  struct IHTMLMapElementVTbl
    query_interface : Proc(IHTMLMapElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMapElement*, UInt32)
    release : Proc(IHTMLMapElement*, UInt32)
    get_type_info_count : Proc(IHTMLMapElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMapElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMapElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMapElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_areas : Proc(IHTMLMapElement*, IHTMLAreasCollection*, HRESULT)
    put_name : Proc(IHTMLMapElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLMapElement*, UInt8**, HRESULT)
  end

  IHTMLMapElement_GUID = "3050f266-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMapElement = LibC::GUID.new(0x3050f266_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMapElement
    lpVtbl : IHTMLMapElementVTbl*
  end

  struct DispHTMLAreasCollectionVTbl
    query_interface : Proc(DispHTMLAreasCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAreasCollection*, UInt32)
    release : Proc(DispHTMLAreasCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLAreasCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAreasCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAreasCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAreasCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAreasCollection_GUID = "3050f56a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAreasCollection = LibC::GUID.new(0x3050f56a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAreasCollection
    lpVtbl : DispHTMLAreasCollectionVTbl*
  end

  struct DispHTMLMapElementVTbl
    query_interface : Proc(DispHTMLMapElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMapElement*, UInt32)
    release : Proc(DispHTMLMapElement*, UInt32)
    get_type_info_count : Proc(DispHTMLMapElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMapElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMapElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMapElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMapElement_GUID = "3050f526-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMapElement = LibC::GUID.new(0x3050f526_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMapElement
    lpVtbl : DispHTMLMapElementVTbl*
  end

  struct HTMLAreaEvents2VTbl
    query_interface : Proc(HTMLAreaEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLAreaEvents2*, UInt32)
    release : Proc(HTMLAreaEvents2*, UInt32)
    get_type_info_count : Proc(HTMLAreaEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLAreaEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLAreaEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLAreaEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLAreaEvents2_GUID = "3050f611-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLAreaEvents2 = LibC::GUID.new(0x3050f611_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLAreaEvents2
    lpVtbl : HTMLAreaEvents2VTbl*
  end

  struct HTMLAreaEventsVTbl
    query_interface : Proc(HTMLAreaEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLAreaEvents*, UInt32)
    release : Proc(HTMLAreaEvents*, UInt32)
    get_type_info_count : Proc(HTMLAreaEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLAreaEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLAreaEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLAreaEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLAreaEvents_GUID = "3050f366-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLAreaEvents = LibC::GUID.new(0x3050f366_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLAreaEvents
    lpVtbl : HTMLAreaEventsVTbl*
  end

  struct IHTMLAreaElementVTbl
    query_interface : Proc(IHTMLAreaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreaElement*, UInt32)
    release : Proc(IHTMLAreaElement*, UInt32)
    get_type_info_count : Proc(IHTMLAreaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_shape : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_shape : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_coords : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_coords : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_href : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_href : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_target : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_target : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_alt : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_no_href : Proc(IHTMLAreaElement*, Int16, HRESULT)
    get_no_href : Proc(IHTMLAreaElement*, Int16*, HRESULT)
    put_host : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_host : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_hostname : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_hostname : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_pathname : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_pathname : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_port : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_port : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_protocol : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_protocol : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_search : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_search : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_hash : Proc(IHTMLAreaElement*, UInt8*, HRESULT)
    get_hash : Proc(IHTMLAreaElement*, UInt8**, HRESULT)
    put_onblur : Proc(IHTMLAreaElement*, VARIANT, HRESULT)
    get_onblur : Proc(IHTMLAreaElement*, VARIANT*, HRESULT)
    put_onfocus : Proc(IHTMLAreaElement*, VARIANT, HRESULT)
    get_onfocus : Proc(IHTMLAreaElement*, VARIANT*, HRESULT)
    put_tab_index : Proc(IHTMLAreaElement*, Int16, HRESULT)
    get_tab_index : Proc(IHTMLAreaElement*, Int16*, HRESULT)
    focus : Proc(IHTMLAreaElement*, HRESULT)
    blur : Proc(IHTMLAreaElement*, HRESULT)
  end

  IHTMLAreaElement_GUID = "3050f265-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreaElement = LibC::GUID.new(0x3050f265_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreaElement
    lpVtbl : IHTMLAreaElementVTbl*
  end

  struct IHTMLAreaElement2VTbl
    query_interface : Proc(IHTMLAreaElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAreaElement2*, UInt32)
    release : Proc(IHTMLAreaElement2*, UInt32)
    get_type_info_count : Proc(IHTMLAreaElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAreaElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAreaElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAreaElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_shape : Proc(IHTMLAreaElement2*, UInt8*, HRESULT)
    get_shape : Proc(IHTMLAreaElement2*, UInt8**, HRESULT)
    put_coords : Proc(IHTMLAreaElement2*, UInt8*, HRESULT)
    get_coords : Proc(IHTMLAreaElement2*, UInt8**, HRESULT)
    put_href : Proc(IHTMLAreaElement2*, UInt8*, HRESULT)
    get_href : Proc(IHTMLAreaElement2*, UInt8**, HRESULT)
  end

  IHTMLAreaElement2_GUID = "3051041f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAreaElement2 = LibC::GUID.new(0x3051041f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAreaElement2
    lpVtbl : IHTMLAreaElement2VTbl*
  end

  struct DispHTMLAreaElementVTbl
    query_interface : Proc(DispHTMLAreaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAreaElement*, UInt32)
    release : Proc(DispHTMLAreaElement*, UInt32)
    get_type_info_count : Proc(DispHTMLAreaElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAreaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAreaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAreaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAreaElement_GUID = "3050f503-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAreaElement = LibC::GUID.new(0x3050f503_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAreaElement
    lpVtbl : DispHTMLAreaElementVTbl*
  end

  struct IHTMLTableCaptionVTbl
    query_interface : Proc(IHTMLTableCaption*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCaption*, UInt32)
    release : Proc(IHTMLTableCaption*, UInt32)
    get_type_info_count : Proc(IHTMLTableCaption*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCaption*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCaption*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCaption*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLTableCaption*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTableCaption*, UInt8**, HRESULT)
    put_v_align : Proc(IHTMLTableCaption*, UInt8*, HRESULT)
    get_v_align : Proc(IHTMLTableCaption*, UInt8**, HRESULT)
  end

  IHTMLTableCaption_GUID = "3050f2eb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCaption = LibC::GUID.new(0x3050f2eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCaption
    lpVtbl : IHTMLTableCaptionVTbl*
  end

  struct DispHTMLTableCaptionVTbl
    query_interface : Proc(DispHTMLTableCaption*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTableCaption*, UInt32)
    release : Proc(DispHTMLTableCaption*, UInt32)
    get_type_info_count : Proc(DispHTMLTableCaption*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTableCaption*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTableCaption*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTableCaption*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTableCaption_GUID = "3050f508-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTableCaption = LibC::GUID.new(0x3050f508_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTableCaption
    lpVtbl : DispHTMLTableCaptionVTbl*
  end

  struct IHTMLCommentElementVTbl
    query_interface : Proc(IHTMLCommentElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCommentElement*, UInt32)
    release : Proc(IHTMLCommentElement*, UInt32)
    get_type_info_count : Proc(IHTMLCommentElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCommentElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCommentElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCommentElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_text : Proc(IHTMLCommentElement*, UInt8*, HRESULT)
    get_text : Proc(IHTMLCommentElement*, UInt8**, HRESULT)
    put_atomic : Proc(IHTMLCommentElement*, Int32, HRESULT)
    get_atomic : Proc(IHTMLCommentElement*, Int32*, HRESULT)
  end

  IHTMLCommentElement_GUID = "3050f20c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCommentElement = LibC::GUID.new(0x3050f20c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCommentElement
    lpVtbl : IHTMLCommentElementVTbl*
  end

  struct IHTMLCommentElement2VTbl
    query_interface : Proc(IHTMLCommentElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCommentElement2*, UInt32)
    release : Proc(IHTMLCommentElement2*, UInt32)
    get_type_info_count : Proc(IHTMLCommentElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCommentElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCommentElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCommentElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_data : Proc(IHTMLCommentElement2*, UInt8*, HRESULT)
    get_data : Proc(IHTMLCommentElement2*, UInt8**, HRESULT)
    get_length : Proc(IHTMLCommentElement2*, Int32*, HRESULT)
    substring_data : Proc(IHTMLCommentElement2*, Int32, Int32, UInt8**, HRESULT)
    append_data : Proc(IHTMLCommentElement2*, UInt8*, HRESULT)
    insert_data : Proc(IHTMLCommentElement2*, Int32, UInt8*, HRESULT)
    delete_data : Proc(IHTMLCommentElement2*, Int32, Int32, HRESULT)
    replace_data : Proc(IHTMLCommentElement2*, Int32, Int32, UInt8*, HRESULT)
  end

  IHTMLCommentElement2_GUID = "3050f813-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCommentElement2 = LibC::GUID.new(0x3050f813_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCommentElement2
    lpVtbl : IHTMLCommentElement2VTbl*
  end

  struct IHTMLCommentElement3VTbl
    query_interface : Proc(IHTMLCommentElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCommentElement3*, UInt32)
    release : Proc(IHTMLCommentElement3*, UInt32)
    get_type_info_count : Proc(IHTMLCommentElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCommentElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCommentElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCommentElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    substring_data : Proc(IHTMLCommentElement3*, Int32, Int32, UInt8**, HRESULT)
    insert_data : Proc(IHTMLCommentElement3*, Int32, UInt8*, HRESULT)
    delete_data : Proc(IHTMLCommentElement3*, Int32, Int32, HRESULT)
    replace_data : Proc(IHTMLCommentElement3*, Int32, Int32, UInt8*, HRESULT)
  end

  IHTMLCommentElement3_GUID = "3051073f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCommentElement3 = LibC::GUID.new(0x3051073f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCommentElement3
    lpVtbl : IHTMLCommentElement3VTbl*
  end

  struct DispHTMLCommentElementVTbl
    query_interface : Proc(DispHTMLCommentElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCommentElement*, UInt32)
    release : Proc(DispHTMLCommentElement*, UInt32)
    get_type_info_count : Proc(DispHTMLCommentElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCommentElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCommentElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCommentElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCommentElement_GUID = "3050f50a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCommentElement = LibC::GUID.new(0x3050f50a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCommentElement
    lpVtbl : DispHTMLCommentElementVTbl*
  end

  struct IHTMLPhraseElementVTbl
    query_interface : Proc(IHTMLPhraseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPhraseElement*, UInt32)
    release : Proc(IHTMLPhraseElement*, UInt32)
    get_type_info_count : Proc(IHTMLPhraseElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPhraseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPhraseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPhraseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLPhraseElement_GUID = "3050f20a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPhraseElement = LibC::GUID.new(0x3050f20a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPhraseElement
    lpVtbl : IHTMLPhraseElementVTbl*
  end

  struct IHTMLPhraseElement2VTbl
    query_interface : Proc(IHTMLPhraseElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPhraseElement2*, UInt32)
    release : Proc(IHTMLPhraseElement2*, UInt32)
    get_type_info_count : Proc(IHTMLPhraseElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPhraseElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPhraseElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPhraseElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_cite : Proc(IHTMLPhraseElement2*, UInt8*, HRESULT)
    get_cite : Proc(IHTMLPhraseElement2*, UInt8**, HRESULT)
    put_date_time : Proc(IHTMLPhraseElement2*, UInt8*, HRESULT)
    get_date_time : Proc(IHTMLPhraseElement2*, UInt8**, HRESULT)
  end

  IHTMLPhraseElement2_GUID = "3050f824-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPhraseElement2 = LibC::GUID.new(0x3050f824_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPhraseElement2
    lpVtbl : IHTMLPhraseElement2VTbl*
  end

  struct IHTMLPhraseElement3VTbl
    query_interface : Proc(IHTMLPhraseElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPhraseElement3*, UInt32)
    release : Proc(IHTMLPhraseElement3*, UInt32)
    get_type_info_count : Proc(IHTMLPhraseElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPhraseElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPhraseElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPhraseElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_cite : Proc(IHTMLPhraseElement3*, UInt8*, HRESULT)
    get_cite : Proc(IHTMLPhraseElement3*, UInt8**, HRESULT)
  end

  IHTMLPhraseElement3_GUID = "3051043d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPhraseElement3 = LibC::GUID.new(0x3051043d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPhraseElement3
    lpVtbl : IHTMLPhraseElement3VTbl*
  end

  struct IHTMLSpanElementVTbl
    query_interface : Proc(IHTMLSpanElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSpanElement*, UInt32)
    release : Proc(IHTMLSpanElement*, UInt32)
    get_type_info_count : Proc(IHTMLSpanElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSpanElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSpanElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSpanElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLSpanElement_GUID = "3050f3f3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSpanElement = LibC::GUID.new(0x3050f3f3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSpanElement
    lpVtbl : IHTMLSpanElementVTbl*
  end

  struct DispHTMLPhraseElementVTbl
    query_interface : Proc(DispHTMLPhraseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLPhraseElement*, UInt32)
    release : Proc(DispHTMLPhraseElement*, UInt32)
    get_type_info_count : Proc(DispHTMLPhraseElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLPhraseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLPhraseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLPhraseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLPhraseElement_GUID = "3050f52d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLPhraseElement = LibC::GUID.new(0x3050f52d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLPhraseElement
    lpVtbl : DispHTMLPhraseElementVTbl*
  end

  struct DispHTMLSpanElementVTbl
    query_interface : Proc(DispHTMLSpanElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLSpanElement*, UInt32)
    release : Proc(DispHTMLSpanElement*, UInt32)
    get_type_info_count : Proc(DispHTMLSpanElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLSpanElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLSpanElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLSpanElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLSpanElement_GUID = "3050f548-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLSpanElement = LibC::GUID.new(0x3050f548_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLSpanElement
    lpVtbl : DispHTMLSpanElementVTbl*
  end

  struct HTMLTableEvents2VTbl
    query_interface : Proc(HTMLTableEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLTableEvents2*, UInt32)
    release : Proc(HTMLTableEvents2*, UInt32)
    get_type_info_count : Proc(HTMLTableEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLTableEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLTableEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLTableEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLTableEvents2_GUID = "3050f623-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLTableEvents2 = LibC::GUID.new(0x3050f623_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLTableEvents2
    lpVtbl : HTMLTableEvents2VTbl*
  end

  struct HTMLTableEventsVTbl
    query_interface : Proc(HTMLTableEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLTableEvents*, UInt32)
    release : Proc(HTMLTableEvents*, UInt32)
    get_type_info_count : Proc(HTMLTableEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLTableEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLTableEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLTableEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLTableEvents_GUID = "3050f407-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLTableEvents = LibC::GUID.new(0x3050f407_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLTableEvents
    lpVtbl : HTMLTableEventsVTbl*
  end

  struct IHTMLTableSectionVTbl
    query_interface : Proc(IHTMLTableSection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableSection*, UInt32)
    release : Proc(IHTMLTableSection*, UInt32)
    get_type_info_count : Proc(IHTMLTableSection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableSection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableSection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableSection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLTableSection*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTableSection*, UInt8**, HRESULT)
    put_v_align : Proc(IHTMLTableSection*, UInt8*, HRESULT)
    get_v_align : Proc(IHTMLTableSection*, UInt8**, HRESULT)
    put_bg_color : Proc(IHTMLTableSection*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLTableSection*, VARIANT*, HRESULT)
    get_rows : Proc(IHTMLTableSection*, IHTMLElementCollection*, HRESULT)
    insert_row : Proc(IHTMLTableSection*, Int32, IDispatch*, HRESULT)
    delete_row : Proc(IHTMLTableSection*, Int32, HRESULT)
  end

  IHTMLTableSection_GUID = "3050f23b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableSection = LibC::GUID.new(0x3050f23b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableSection
    lpVtbl : IHTMLTableSectionVTbl*
  end

  struct IHTMLTableVTbl
    query_interface : Proc(IHTMLTable*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTable*, UInt32)
    release : Proc(IHTMLTable*, UInt32)
    get_type_info_count : Proc(IHTMLTable*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTable*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTable*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTable*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_cols : Proc(IHTMLTable*, Int32, HRESULT)
    get_cols : Proc(IHTMLTable*, Int32*, HRESULT)
    put_border : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_border : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_frame : Proc(IHTMLTable*, UInt8*, HRESULT)
    get_frame : Proc(IHTMLTable*, UInt8**, HRESULT)
    put_rules : Proc(IHTMLTable*, UInt8*, HRESULT)
    get_rules : Proc(IHTMLTable*, UInt8**, HRESULT)
    put_cell_spacing : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_cell_spacing : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_cell_padding : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_cell_padding : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_background : Proc(IHTMLTable*, UInt8*, HRESULT)
    get_background : Proc(IHTMLTable*, UInt8**, HRESULT)
    put_bg_color : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_border_color : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_border_color : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_border_color_light : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_border_color_light : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_border_color_dark : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_border_color_dark : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_align : Proc(IHTMLTable*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTable*, UInt8**, HRESULT)
    refresh : Proc(IHTMLTable*, HRESULT)
    get_rows : Proc(IHTMLTable*, IHTMLElementCollection*, HRESULT)
    put_width : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_width : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_height : Proc(IHTMLTable*, VARIANT*, HRESULT)
    put_data_page_size : Proc(IHTMLTable*, Int32, HRESULT)
    get_data_page_size : Proc(IHTMLTable*, Int32*, HRESULT)
    next_page : Proc(IHTMLTable*, HRESULT)
    previous_page : Proc(IHTMLTable*, HRESULT)
    get_t_head : Proc(IHTMLTable*, IHTMLTableSection*, HRESULT)
    get_t_foot : Proc(IHTMLTable*, IHTMLTableSection*, HRESULT)
    get_t_bodies : Proc(IHTMLTable*, IHTMLElementCollection*, HRESULT)
    get_caption : Proc(IHTMLTable*, IHTMLTableCaption*, HRESULT)
    create_t_head : Proc(IHTMLTable*, IDispatch*, HRESULT)
    delete_t_head : Proc(IHTMLTable*, HRESULT)
    create_t_foot : Proc(IHTMLTable*, IDispatch*, HRESULT)
    delete_t_foot : Proc(IHTMLTable*, HRESULT)
    create_caption : Proc(IHTMLTable*, IHTMLTableCaption*, HRESULT)
    delete_caption : Proc(IHTMLTable*, HRESULT)
    insert_row : Proc(IHTMLTable*, Int32, IDispatch*, HRESULT)
    delete_row : Proc(IHTMLTable*, Int32, HRESULT)
    get_ready_state : Proc(IHTMLTable*, UInt8**, HRESULT)
    put_onreadystatechange : Proc(IHTMLTable*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLTable*, VARIANT*, HRESULT)
  end

  IHTMLTable_GUID = "3050f21e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTable = LibC::GUID.new(0x3050f21e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTable
    lpVtbl : IHTMLTableVTbl*
  end

  struct IHTMLTable2VTbl
    query_interface : Proc(IHTMLTable2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTable2*, UInt32)
    release : Proc(IHTMLTable2*, UInt32)
    get_type_info_count : Proc(IHTMLTable2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTable2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTable2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTable2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    first_page : Proc(IHTMLTable2*, HRESULT)
    last_page : Proc(IHTMLTable2*, HRESULT)
    get_cells : Proc(IHTMLTable2*, IHTMLElementCollection*, HRESULT)
    move_row : Proc(IHTMLTable2*, Int32, Int32, IDispatch*, HRESULT)
  end

  IHTMLTable2_GUID = "3050f4ad-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTable2 = LibC::GUID.new(0x3050f4ad_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTable2
    lpVtbl : IHTMLTable2VTbl*
  end

  struct IHTMLTable3VTbl
    query_interface : Proc(IHTMLTable3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTable3*, UInt32)
    release : Proc(IHTMLTable3*, UInt32)
    get_type_info_count : Proc(IHTMLTable3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTable3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTable3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTable3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_summary : Proc(IHTMLTable3*, UInt8*, HRESULT)
    get_summary : Proc(IHTMLTable3*, UInt8**, HRESULT)
  end

  IHTMLTable3_GUID = "3050f829-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTable3 = LibC::GUID.new(0x3050f829_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTable3
    lpVtbl : IHTMLTable3VTbl*
  end

  struct IHTMLTable4VTbl
    query_interface : Proc(IHTMLTable4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTable4*, UInt32)
    release : Proc(IHTMLTable4*, UInt32)
    get_type_info_count : Proc(IHTMLTable4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTable4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTable4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTable4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_t_head : Proc(IHTMLTable4*, IHTMLTableSection, HRESULT)
    get_t_head : Proc(IHTMLTable4*, IHTMLTableSection*, HRESULT)
    putref_t_foot : Proc(IHTMLTable4*, IHTMLTableSection, HRESULT)
    get_t_foot : Proc(IHTMLTable4*, IHTMLTableSection*, HRESULT)
    putref_caption : Proc(IHTMLTable4*, IHTMLTableCaption, HRESULT)
    get_caption : Proc(IHTMLTable4*, IHTMLTableCaption*, HRESULT)
    insert_row : Proc(IHTMLTable4*, Int32, IDispatch*, HRESULT)
    delete_row : Proc(IHTMLTable4*, Int32, HRESULT)
    create_t_body : Proc(IHTMLTable4*, IHTMLTableSection*, HRESULT)
  end

  IHTMLTable4_GUID = "305106c2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTable4 = LibC::GUID.new(0x305106c2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTable4
    lpVtbl : IHTMLTable4VTbl*
  end

  struct IHTMLTableColVTbl
    query_interface : Proc(IHTMLTableCol*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCol*, UInt32)
    release : Proc(IHTMLTableCol*, UInt32)
    get_type_info_count : Proc(IHTMLTableCol*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCol*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCol*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCol*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_span : Proc(IHTMLTableCol*, Int32, HRESULT)
    get_span : Proc(IHTMLTableCol*, Int32*, HRESULT)
    put_width : Proc(IHTMLTableCol*, VARIANT, HRESULT)
    get_width : Proc(IHTMLTableCol*, VARIANT*, HRESULT)
    put_align : Proc(IHTMLTableCol*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTableCol*, UInt8**, HRESULT)
    put_v_align : Proc(IHTMLTableCol*, UInt8*, HRESULT)
    get_v_align : Proc(IHTMLTableCol*, UInt8**, HRESULT)
  end

  IHTMLTableCol_GUID = "3050f23a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCol = LibC::GUID.new(0x3050f23a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCol
    lpVtbl : IHTMLTableColVTbl*
  end

  struct IHTMLTableCol2VTbl
    query_interface : Proc(IHTMLTableCol2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCol2*, UInt32)
    release : Proc(IHTMLTableCol2*, UInt32)
    get_type_info_count : Proc(IHTMLTableCol2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCol2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCol2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCol2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableCol2*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableCol2*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableCol2*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableCol2*, UInt8**, HRESULT)
  end

  IHTMLTableCol2_GUID = "3050f82a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCol2 = LibC::GUID.new(0x3050f82a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCol2
    lpVtbl : IHTMLTableCol2VTbl*
  end

  struct IHTMLTableCol3VTbl
    query_interface : Proc(IHTMLTableCol3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCol3*, UInt32)
    release : Proc(IHTMLTableCol3*, UInt32)
    get_type_info_count : Proc(IHTMLTableCol3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCol3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCol3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCol3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableCol3*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableCol3*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableCol3*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableCol3*, UInt8**, HRESULT)
  end

  IHTMLTableCol3_GUID = "305106c4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCol3 = LibC::GUID.new(0x305106c4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCol3
    lpVtbl : IHTMLTableCol3VTbl*
  end

  struct IHTMLTableSection2VTbl
    query_interface : Proc(IHTMLTableSection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableSection2*, UInt32)
    release : Proc(IHTMLTableSection2*, UInt32)
    get_type_info_count : Proc(IHTMLTableSection2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableSection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableSection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableSection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    move_row : Proc(IHTMLTableSection2*, Int32, Int32, IDispatch*, HRESULT)
  end

  IHTMLTableSection2_GUID = "3050f5c7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableSection2 = LibC::GUID.new(0x3050f5c7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableSection2
    lpVtbl : IHTMLTableSection2VTbl*
  end

  struct IHTMLTableSection3VTbl
    query_interface : Proc(IHTMLTableSection3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableSection3*, UInt32)
    release : Proc(IHTMLTableSection3*, UInt32)
    get_type_info_count : Proc(IHTMLTableSection3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableSection3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableSection3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableSection3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableSection3*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableSection3*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableSection3*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableSection3*, UInt8**, HRESULT)
  end

  IHTMLTableSection3_GUID = "3050f82b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableSection3 = LibC::GUID.new(0x3050f82b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableSection3
    lpVtbl : IHTMLTableSection3VTbl*
  end

  struct IHTMLTableSection4VTbl
    query_interface : Proc(IHTMLTableSection4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableSection4*, UInt32)
    release : Proc(IHTMLTableSection4*, UInt32)
    get_type_info_count : Proc(IHTMLTableSection4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableSection4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableSection4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableSection4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableSection4*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableSection4*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableSection4*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableSection4*, UInt8**, HRESULT)
    insert_row : Proc(IHTMLTableSection4*, Int32, IDispatch*, HRESULT)
    delete_row : Proc(IHTMLTableSection4*, Int32, HRESULT)
  end

  IHTMLTableSection4_GUID = "305106c5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableSection4 = LibC::GUID.new(0x305106c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableSection4
    lpVtbl : IHTMLTableSection4VTbl*
  end

  struct IHTMLTableRowVTbl
    query_interface : Proc(IHTMLTableRow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableRow*, UInt32)
    release : Proc(IHTMLTableRow*, UInt32)
    get_type_info_count : Proc(IHTMLTableRow*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableRow*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableRow*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableRow*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLTableRow*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTableRow*, UInt8**, HRESULT)
    put_v_align : Proc(IHTMLTableRow*, UInt8*, HRESULT)
    get_v_align : Proc(IHTMLTableRow*, UInt8**, HRESULT)
    put_bg_color : Proc(IHTMLTableRow*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLTableRow*, VARIANT*, HRESULT)
    put_border_color : Proc(IHTMLTableRow*, VARIANT, HRESULT)
    get_border_color : Proc(IHTMLTableRow*, VARIANT*, HRESULT)
    put_border_color_light : Proc(IHTMLTableRow*, VARIANT, HRESULT)
    get_border_color_light : Proc(IHTMLTableRow*, VARIANT*, HRESULT)
    put_border_color_dark : Proc(IHTMLTableRow*, VARIANT, HRESULT)
    get_border_color_dark : Proc(IHTMLTableRow*, VARIANT*, HRESULT)
    get_row_index : Proc(IHTMLTableRow*, Int32*, HRESULT)
    get_section_row_index : Proc(IHTMLTableRow*, Int32*, HRESULT)
    get_cells : Proc(IHTMLTableRow*, IHTMLElementCollection*, HRESULT)
    insert_cell : Proc(IHTMLTableRow*, Int32, IDispatch*, HRESULT)
    delete_cell : Proc(IHTMLTableRow*, Int32, HRESULT)
  end

  IHTMLTableRow_GUID = "3050f23c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableRow = LibC::GUID.new(0x3050f23c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableRow
    lpVtbl : IHTMLTableRowVTbl*
  end

  struct IHTMLTableRow2VTbl
    query_interface : Proc(IHTMLTableRow2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableRow2*, UInt32)
    release : Proc(IHTMLTableRow2*, UInt32)
    get_type_info_count : Proc(IHTMLTableRow2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableRow2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableRow2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableRow2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_height : Proc(IHTMLTableRow2*, VARIANT, HRESULT)
    get_height : Proc(IHTMLTableRow2*, VARIANT*, HRESULT)
  end

  IHTMLTableRow2_GUID = "3050f4a1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableRow2 = LibC::GUID.new(0x3050f4a1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableRow2
    lpVtbl : IHTMLTableRow2VTbl*
  end

  struct IHTMLTableRow3VTbl
    query_interface : Proc(IHTMLTableRow3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableRow3*, UInt32)
    release : Proc(IHTMLTableRow3*, UInt32)
    get_type_info_count : Proc(IHTMLTableRow3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableRow3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableRow3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableRow3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableRow3*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableRow3*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableRow3*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableRow3*, UInt8**, HRESULT)
  end

  IHTMLTableRow3_GUID = "3050f82c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableRow3 = LibC::GUID.new(0x3050f82c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableRow3
    lpVtbl : IHTMLTableRow3VTbl*
  end

  struct IHTMLTableRow4VTbl
    query_interface : Proc(IHTMLTableRow4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableRow4*, UInt32)
    release : Proc(IHTMLTableRow4*, UInt32)
    get_type_info_count : Proc(IHTMLTableRow4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableRow4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableRow4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableRow4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableRow4*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableRow4*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableRow4*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableRow4*, UInt8**, HRESULT)
    insert_cell : Proc(IHTMLTableRow4*, Int32, IDispatch*, HRESULT)
    delete_cell : Proc(IHTMLTableRow4*, Int32, HRESULT)
  end

  IHTMLTableRow4_GUID = "305106c6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableRow4 = LibC::GUID.new(0x305106c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableRow4
    lpVtbl : IHTMLTableRow4VTbl*
  end

  struct IHTMLTableRowMetricsVTbl
    query_interface : Proc(IHTMLTableRowMetrics*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableRowMetrics*, UInt32)
    release : Proc(IHTMLTableRowMetrics*, UInt32)
    get_type_info_count : Proc(IHTMLTableRowMetrics*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableRowMetrics*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableRowMetrics*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableRowMetrics*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_client_height : Proc(IHTMLTableRowMetrics*, Int32*, HRESULT)
    get_client_width : Proc(IHTMLTableRowMetrics*, Int32*, HRESULT)
    get_client_top : Proc(IHTMLTableRowMetrics*, Int32*, HRESULT)
    get_client_left : Proc(IHTMLTableRowMetrics*, Int32*, HRESULT)
  end

  IHTMLTableRowMetrics_GUID = "3050f413-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableRowMetrics = LibC::GUID.new(0x3050f413_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableRowMetrics
    lpVtbl : IHTMLTableRowMetricsVTbl*
  end

  struct IHTMLTableCellVTbl
    query_interface : Proc(IHTMLTableCell*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCell*, UInt32)
    release : Proc(IHTMLTableCell*, UInt32)
    get_type_info_count : Proc(IHTMLTableCell*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCell*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCell*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCell*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_row_span : Proc(IHTMLTableCell*, Int32, HRESULT)
    get_row_span : Proc(IHTMLTableCell*, Int32*, HRESULT)
    put_col_span : Proc(IHTMLTableCell*, Int32, HRESULT)
    get_col_span : Proc(IHTMLTableCell*, Int32*, HRESULT)
    put_align : Proc(IHTMLTableCell*, UInt8*, HRESULT)
    get_align : Proc(IHTMLTableCell*, UInt8**, HRESULT)
    put_v_align : Proc(IHTMLTableCell*, UInt8*, HRESULT)
    get_v_align : Proc(IHTMLTableCell*, UInt8**, HRESULT)
    put_bg_color : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_bg_color : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    put_no_wrap : Proc(IHTMLTableCell*, Int16, HRESULT)
    get_no_wrap : Proc(IHTMLTableCell*, Int16*, HRESULT)
    put_background : Proc(IHTMLTableCell*, UInt8*, HRESULT)
    get_background : Proc(IHTMLTableCell*, UInt8**, HRESULT)
    put_border_color : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_border_color : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    put_border_color_light : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_border_color_light : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    put_border_color_dark : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_border_color_dark : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    put_width : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_width : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLTableCell*, VARIANT, HRESULT)
    get_height : Proc(IHTMLTableCell*, VARIANT*, HRESULT)
    get_cell_index : Proc(IHTMLTableCell*, Int32*, HRESULT)
  end

  IHTMLTableCell_GUID = "3050f23d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCell = LibC::GUID.new(0x3050f23d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCell
    lpVtbl : IHTMLTableCellVTbl*
  end

  struct IHTMLTableCell2VTbl
    query_interface : Proc(IHTMLTableCell2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCell2*, UInt32)
    release : Proc(IHTMLTableCell2*, UInt32)
    get_type_info_count : Proc(IHTMLTableCell2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCell2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCell2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCell2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_abbr : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_abbr : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
    put_axis : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_axis : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
    put_ch : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
    put_headers : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_headers : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
    put_scope : Proc(IHTMLTableCell2*, UInt8*, HRESULT)
    get_scope : Proc(IHTMLTableCell2*, UInt8**, HRESULT)
  end

  IHTMLTableCell2_GUID = "3050f82d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCell2 = LibC::GUID.new(0x3050f82d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCell2
    lpVtbl : IHTMLTableCell2VTbl*
  end

  struct IHTMLTableCell3VTbl
    query_interface : Proc(IHTMLTableCell3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTableCell3*, UInt32)
    release : Proc(IHTMLTableCell3*, UInt32)
    get_type_info_count : Proc(IHTMLTableCell3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTableCell3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTableCell3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTableCell3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ch : Proc(IHTMLTableCell3*, UInt8*, HRESULT)
    get_ch : Proc(IHTMLTableCell3*, UInt8**, HRESULT)
    put_ch_off : Proc(IHTMLTableCell3*, UInt8*, HRESULT)
    get_ch_off : Proc(IHTMLTableCell3*, UInt8**, HRESULT)
  end

  IHTMLTableCell3_GUID = "305106c7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTableCell3 = LibC::GUID.new(0x305106c7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTableCell3
    lpVtbl : IHTMLTableCell3VTbl*
  end

  struct DispHTMLTableVTbl
    query_interface : Proc(DispHTMLTable*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTable*, UInt32)
    release : Proc(DispHTMLTable*, UInt32)
    get_type_info_count : Proc(DispHTMLTable*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTable*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTable*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTable*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTable_GUID = "3050f532-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTable = LibC::GUID.new(0x3050f532_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTable
    lpVtbl : DispHTMLTableVTbl*
  end

  struct DispHTMLTableColVTbl
    query_interface : Proc(DispHTMLTableCol*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTableCol*, UInt32)
    release : Proc(DispHTMLTableCol*, UInt32)
    get_type_info_count : Proc(DispHTMLTableCol*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTableCol*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTableCol*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTableCol*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTableCol_GUID = "3050f533-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTableCol = LibC::GUID.new(0x3050f533_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTableCol
    lpVtbl : DispHTMLTableColVTbl*
  end

  struct DispHTMLTableSectionVTbl
    query_interface : Proc(DispHTMLTableSection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTableSection*, UInt32)
    release : Proc(DispHTMLTableSection*, UInt32)
    get_type_info_count : Proc(DispHTMLTableSection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTableSection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTableSection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTableSection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTableSection_GUID = "3050f534-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTableSection = LibC::GUID.new(0x3050f534_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTableSection
    lpVtbl : DispHTMLTableSectionVTbl*
  end

  struct DispHTMLTableRowVTbl
    query_interface : Proc(DispHTMLTableRow*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTableRow*, UInt32)
    release : Proc(DispHTMLTableRow*, UInt32)
    get_type_info_count : Proc(DispHTMLTableRow*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTableRow*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTableRow*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTableRow*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTableRow_GUID = "3050f535-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTableRow = LibC::GUID.new(0x3050f535_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTableRow
    lpVtbl : DispHTMLTableRowVTbl*
  end

  struct DispHTMLTableCellVTbl
    query_interface : Proc(DispHTMLTableCell*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTableCell*, UInt32)
    release : Proc(DispHTMLTableCell*, UInt32)
    get_type_info_count : Proc(DispHTMLTableCell*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTableCell*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTableCell*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTableCell*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTableCell_GUID = "3050f536-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTableCell = LibC::GUID.new(0x3050f536_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTableCell
    lpVtbl : DispHTMLTableCellVTbl*
  end

  struct HTMLScriptEvents2VTbl
    query_interface : Proc(HTMLScriptEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLScriptEvents2*, UInt32)
    release : Proc(HTMLScriptEvents2*, UInt32)
    get_type_info_count : Proc(HTMLScriptEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLScriptEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLScriptEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLScriptEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLScriptEvents2_GUID = "3050f621-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLScriptEvents2 = LibC::GUID.new(0x3050f621_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLScriptEvents2
    lpVtbl : HTMLScriptEvents2VTbl*
  end

  struct HTMLScriptEventsVTbl
    query_interface : Proc(HTMLScriptEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLScriptEvents*, UInt32)
    release : Proc(HTMLScriptEvents*, UInt32)
    get_type_info_count : Proc(HTMLScriptEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLScriptEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLScriptEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLScriptEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLScriptEvents_GUID = "3050f3e2-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLScriptEvents = LibC::GUID.new(0x3050f3e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLScriptEvents
    lpVtbl : HTMLScriptEventsVTbl*
  end

  struct IHTMLScriptElementVTbl
    query_interface : Proc(IHTMLScriptElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScriptElement*, UInt32)
    release : Proc(IHTMLScriptElement*, UInt32)
    get_type_info_count : Proc(IHTMLScriptElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScriptElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScriptElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScriptElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLScriptElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
    put_html_for : Proc(IHTMLScriptElement*, UInt8*, HRESULT)
    get_html_for : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
    put_event : Proc(IHTMLScriptElement*, UInt8*, HRESULT)
    get_event : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
    put_text : Proc(IHTMLScriptElement*, UInt8*, HRESULT)
    get_text : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
    put_defer : Proc(IHTMLScriptElement*, Int16, HRESULT)
    get_defer : Proc(IHTMLScriptElement*, Int16*, HRESULT)
    get_ready_state : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
    put_onerror : Proc(IHTMLScriptElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLScriptElement*, VARIANT*, HRESULT)
    put_type : Proc(IHTMLScriptElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLScriptElement*, UInt8**, HRESULT)
  end

  IHTMLScriptElement_GUID = "3050f28b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScriptElement = LibC::GUID.new(0x3050f28b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScriptElement
    lpVtbl : IHTMLScriptElementVTbl*
  end

  struct IHTMLScriptElement2VTbl
    query_interface : Proc(IHTMLScriptElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScriptElement2*, UInt32)
    release : Proc(IHTMLScriptElement2*, UInt32)
    get_type_info_count : Proc(IHTMLScriptElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScriptElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScriptElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScriptElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_charset : Proc(IHTMLScriptElement2*, UInt8*, HRESULT)
    get_charset : Proc(IHTMLScriptElement2*, UInt8**, HRESULT)
  end

  IHTMLScriptElement2_GUID = "3050f828-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScriptElement2 = LibC::GUID.new(0x3050f828_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScriptElement2
    lpVtbl : IHTMLScriptElement2VTbl*
  end

  struct IHTMLScriptElement3VTbl
    query_interface : Proc(IHTMLScriptElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScriptElement3*, UInt32)
    release : Proc(IHTMLScriptElement3*, UInt32)
    get_type_info_count : Proc(IHTMLScriptElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScriptElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScriptElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScriptElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLScriptElement3*, UInt8*, HRESULT)
    get_src : Proc(IHTMLScriptElement3*, UInt8**, HRESULT)
  end

  IHTMLScriptElement3_GUID = "30510447-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScriptElement3 = LibC::GUID.new(0x30510447_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScriptElement3
    lpVtbl : IHTMLScriptElement3VTbl*
  end

  struct IHTMLScriptElement4VTbl
    query_interface : Proc(IHTMLScriptElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLScriptElement4*, UInt32)
    release : Proc(IHTMLScriptElement4*, UInt32)
    get_type_info_count : Proc(IHTMLScriptElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLScriptElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLScriptElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLScriptElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_used_charset : Proc(IHTMLScriptElement4*, UInt8**, HRESULT)
  end

  IHTMLScriptElement4_GUID = "30510801-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLScriptElement4 = LibC::GUID.new(0x30510801_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLScriptElement4
    lpVtbl : IHTMLScriptElement4VTbl*
  end

  struct DispHTMLScriptElementVTbl
    query_interface : Proc(DispHTMLScriptElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLScriptElement*, UInt32)
    release : Proc(DispHTMLScriptElement*, UInt32)
    get_type_info_count : Proc(DispHTMLScriptElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLScriptElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLScriptElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLScriptElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLScriptElement_GUID = "3050f530-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLScriptElement = LibC::GUID.new(0x3050f530_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLScriptElement
    lpVtbl : DispHTMLScriptElementVTbl*
  end

  struct IHTMLNoShowElementVTbl
    query_interface : Proc(IHTMLNoShowElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLNoShowElement*, UInt32)
    release : Proc(IHTMLNoShowElement*, UInt32)
    get_type_info_count : Proc(IHTMLNoShowElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLNoShowElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLNoShowElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLNoShowElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLNoShowElement_GUID = "3050f38a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLNoShowElement = LibC::GUID.new(0x3050f38a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLNoShowElement
    lpVtbl : IHTMLNoShowElementVTbl*
  end

  struct DispHTMLNoShowElementVTbl
    query_interface : Proc(DispHTMLNoShowElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLNoShowElement*, UInt32)
    release : Proc(DispHTMLNoShowElement*, UInt32)
    get_type_info_count : Proc(DispHTMLNoShowElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLNoShowElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLNoShowElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLNoShowElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLNoShowElement_GUID = "3050f528-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLNoShowElement = LibC::GUID.new(0x3050f528_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLNoShowElement
    lpVtbl : DispHTMLNoShowElementVTbl*
  end

  struct HTMLObjectElementEvents2VTbl
    query_interface : Proc(HTMLObjectElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLObjectElementEvents2*, UInt32)
    release : Proc(HTMLObjectElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLObjectElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLObjectElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLObjectElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLObjectElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLObjectElementEvents2_GUID = "3050f620-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLObjectElementEvents2 = LibC::GUID.new(0x3050f620_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLObjectElementEvents2
    lpVtbl : HTMLObjectElementEvents2VTbl*
  end

  struct HTMLObjectElementEventsVTbl
    query_interface : Proc(HTMLObjectElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLObjectElementEvents*, UInt32)
    release : Proc(HTMLObjectElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLObjectElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLObjectElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLObjectElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLObjectElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLObjectElementEvents_GUID = "3050f3c4-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLObjectElementEvents = LibC::GUID.new(0x3050f3c4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLObjectElementEvents
    lpVtbl : HTMLObjectElementEventsVTbl*
  end

  struct IHTMLObjectElementVTbl
    query_interface : Proc(IHTMLObjectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLObjectElement*, UInt32)
    release : Proc(IHTMLObjectElement*, UInt32)
    get_type_info_count : Proc(IHTMLObjectElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLObjectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLObjectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLObjectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_object : Proc(IHTMLObjectElement*, IDispatch*, HRESULT)
    get_classid : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    get_data : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    putref_recordset : Proc(IHTMLObjectElement*, IDispatch, HRESULT)
    get_recordset : Proc(IHTMLObjectElement*, IDispatch*, HRESULT)
    put_align : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_name : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_code_base : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_code_base : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_code_type : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_code_type : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_code : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_code : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    get_base_href : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_type : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    get_form : Proc(IHTMLObjectElement*, IHTMLFormElement*, HRESULT)
    put_width : Proc(IHTMLObjectElement*, VARIANT, HRESULT)
    get_width : Proc(IHTMLObjectElement*, VARIANT*, HRESULT)
    put_height : Proc(IHTMLObjectElement*, VARIANT, HRESULT)
    get_height : Proc(IHTMLObjectElement*, VARIANT*, HRESULT)
    get_ready_state : Proc(IHTMLObjectElement*, Int32*, HRESULT)
    put_onreadystatechange : Proc(IHTMLObjectElement*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLObjectElement*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLObjectElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLObjectElement*, VARIANT*, HRESULT)
    put_alt_html : Proc(IHTMLObjectElement*, UInt8*, HRESULT)
    get_alt_html : Proc(IHTMLObjectElement*, UInt8**, HRESULT)
    put_vspace : Proc(IHTMLObjectElement*, Int32, HRESULT)
    get_vspace : Proc(IHTMLObjectElement*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLObjectElement*, Int32, HRESULT)
    get_hspace : Proc(IHTMLObjectElement*, Int32*, HRESULT)
  end

  IHTMLObjectElement_GUID = "3050f24f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLObjectElement = LibC::GUID.new(0x3050f24f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLObjectElement
    lpVtbl : IHTMLObjectElementVTbl*
  end

  struct IHTMLObjectElement2VTbl
    query_interface : Proc(IHTMLObjectElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLObjectElement2*, UInt32)
    release : Proc(IHTMLObjectElement2*, UInt32)
    get_type_info_count : Proc(IHTMLObjectElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLObjectElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLObjectElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLObjectElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    named_recordset : Proc(IHTMLObjectElement2*, UInt8*, VARIANT*, IDispatch*, HRESULT)
    put_classid : Proc(IHTMLObjectElement2*, UInt8*, HRESULT)
    get_classid : Proc(IHTMLObjectElement2*, UInt8**, HRESULT)
    put_data : Proc(IHTMLObjectElement2*, UInt8*, HRESULT)
    get_data : Proc(IHTMLObjectElement2*, UInt8**, HRESULT)
  end

  IHTMLObjectElement2_GUID = "3050f4cd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLObjectElement2 = LibC::GUID.new(0x3050f4cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLObjectElement2
    lpVtbl : IHTMLObjectElement2VTbl*
  end

  struct IHTMLObjectElement3VTbl
    query_interface : Proc(IHTMLObjectElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLObjectElement3*, UInt32)
    release : Proc(IHTMLObjectElement3*, UInt32)
    get_type_info_count : Proc(IHTMLObjectElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLObjectElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLObjectElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLObjectElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_archive : Proc(IHTMLObjectElement3*, UInt8*, HRESULT)
    get_archive : Proc(IHTMLObjectElement3*, UInt8**, HRESULT)
    put_alt : Proc(IHTMLObjectElement3*, UInt8*, HRESULT)
    get_alt : Proc(IHTMLObjectElement3*, UInt8**, HRESULT)
    put_declare : Proc(IHTMLObjectElement3*, Int16, HRESULT)
    get_declare : Proc(IHTMLObjectElement3*, Int16*, HRESULT)
    put_standby : Proc(IHTMLObjectElement3*, UInt8*, HRESULT)
    get_standby : Proc(IHTMLObjectElement3*, UInt8**, HRESULT)
    put_border : Proc(IHTMLObjectElement3*, VARIANT, HRESULT)
    get_border : Proc(IHTMLObjectElement3*, VARIANT*, HRESULT)
    put_use_map : Proc(IHTMLObjectElement3*, UInt8*, HRESULT)
    get_use_map : Proc(IHTMLObjectElement3*, UInt8**, HRESULT)
  end

  IHTMLObjectElement3_GUID = "3050f827-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLObjectElement3 = LibC::GUID.new(0x3050f827_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLObjectElement3
    lpVtbl : IHTMLObjectElement3VTbl*
  end

  struct IHTMLObjectElement4VTbl
    query_interface : Proc(IHTMLObjectElement4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLObjectElement4*, UInt32)
    release : Proc(IHTMLObjectElement4*, UInt32)
    get_type_info_count : Proc(IHTMLObjectElement4*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLObjectElement4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLObjectElement4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLObjectElement4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_content_document : Proc(IHTMLObjectElement4*, IDispatch*, HRESULT)
    put_code_base : Proc(IHTMLObjectElement4*, UInt8*, HRESULT)
    get_code_base : Proc(IHTMLObjectElement4*, UInt8**, HRESULT)
    put_data : Proc(IHTMLObjectElement4*, UInt8*, HRESULT)
    get_data : Proc(IHTMLObjectElement4*, UInt8**, HRESULT)
  end

  IHTMLObjectElement4_GUID = "3051043e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLObjectElement4 = LibC::GUID.new(0x3051043e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLObjectElement4
    lpVtbl : IHTMLObjectElement4VTbl*
  end

  struct IHTMLObjectElement5VTbl
    query_interface : Proc(IHTMLObjectElement5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLObjectElement5*, UInt32)
    release : Proc(IHTMLObjectElement5*, UInt32)
    get_type_info_count : Proc(IHTMLObjectElement5*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLObjectElement5*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLObjectElement5*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLObjectElement5*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_object : Proc(IHTMLObjectElement5*, UInt8*, HRESULT)
    get_object : Proc(IHTMLObjectElement5*, UInt8**, HRESULT)
  end

  IHTMLObjectElement5_GUID = "305104b5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLObjectElement5 = LibC::GUID.new(0x305104b5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLObjectElement5
    lpVtbl : IHTMLObjectElement5VTbl*
  end

  struct IHTMLParamElementVTbl
    query_interface : Proc(IHTMLParamElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLParamElement*, UInt32)
    release : Proc(IHTMLParamElement*, UInt32)
    get_type_info_count : Proc(IHTMLParamElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLParamElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLParamElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLParamElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_name : Proc(IHTMLParamElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLParamElement*, UInt8**, HRESULT)
    put_value : Proc(IHTMLParamElement*, UInt8*, HRESULT)
    get_value : Proc(IHTMLParamElement*, UInt8**, HRESULT)
    put_type : Proc(IHTMLParamElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLParamElement*, UInt8**, HRESULT)
    put_value_type : Proc(IHTMLParamElement*, UInt8*, HRESULT)
    get_value_type : Proc(IHTMLParamElement*, UInt8**, HRESULT)
  end

  IHTMLParamElement_GUID = "3050f83d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLParamElement = LibC::GUID.new(0x3050f83d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLParamElement
    lpVtbl : IHTMLParamElementVTbl*
  end

  struct IHTMLParamElement2VTbl
    query_interface : Proc(IHTMLParamElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLParamElement2*, UInt32)
    release : Proc(IHTMLParamElement2*, UInt32)
    get_type_info_count : Proc(IHTMLParamElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLParamElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLParamElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLParamElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_name : Proc(IHTMLParamElement2*, UInt8*, HRESULT)
    get_name : Proc(IHTMLParamElement2*, UInt8**, HRESULT)
    put_type : Proc(IHTMLParamElement2*, UInt8*, HRESULT)
    get_type : Proc(IHTMLParamElement2*, UInt8**, HRESULT)
    put_value : Proc(IHTMLParamElement2*, UInt8*, HRESULT)
    get_value : Proc(IHTMLParamElement2*, UInt8**, HRESULT)
    put_value_type : Proc(IHTMLParamElement2*, UInt8*, HRESULT)
    get_value_type : Proc(IHTMLParamElement2*, UInt8**, HRESULT)
  end

  IHTMLParamElement2_GUID = "30510444-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLParamElement2 = LibC::GUID.new(0x30510444_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLParamElement2
    lpVtbl : IHTMLParamElement2VTbl*
  end

  struct DispHTMLObjectElementVTbl
    query_interface : Proc(DispHTMLObjectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLObjectElement*, UInt32)
    release : Proc(DispHTMLObjectElement*, UInt32)
    get_type_info_count : Proc(DispHTMLObjectElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLObjectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLObjectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLObjectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLObjectElement_GUID = "3050f529-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLObjectElement = LibC::GUID.new(0x3050f529_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLObjectElement
    lpVtbl : DispHTMLObjectElementVTbl*
  end

  struct DispHTMLParamElementVTbl
    query_interface : Proc(DispHTMLParamElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLParamElement*, UInt32)
    release : Proc(DispHTMLParamElement*, UInt32)
    get_type_info_count : Proc(DispHTMLParamElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLParamElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLParamElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLParamElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLParamElement_GUID = "3050f590-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLParamElement = LibC::GUID.new(0x3050f590_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLParamElement
    lpVtbl : DispHTMLParamElementVTbl*
  end

  struct HTMLFrameSiteEvents2VTbl
    query_interface : Proc(HTMLFrameSiteEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLFrameSiteEvents2*, UInt32)
    release : Proc(HTMLFrameSiteEvents2*, UInt32)
    get_type_info_count : Proc(HTMLFrameSiteEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLFrameSiteEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLFrameSiteEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLFrameSiteEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLFrameSiteEvents2_GUID = "3050f7ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLFrameSiteEvents2 = LibC::GUID.new(0x3050f7ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLFrameSiteEvents2
    lpVtbl : HTMLFrameSiteEvents2VTbl*
  end

  struct HTMLFrameSiteEventsVTbl
    query_interface : Proc(HTMLFrameSiteEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLFrameSiteEvents*, UInt32)
    release : Proc(HTMLFrameSiteEvents*, UInt32)
    get_type_info_count : Proc(HTMLFrameSiteEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLFrameSiteEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLFrameSiteEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLFrameSiteEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLFrameSiteEvents_GUID = "3050f800-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLFrameSiteEvents = LibC::GUID.new(0x3050f800_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLFrameSiteEvents
    lpVtbl : HTMLFrameSiteEventsVTbl*
  end

  struct IHTMLFrameBase2VTbl
    query_interface : Proc(IHTMLFrameBase2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameBase2*, UInt32)
    release : Proc(IHTMLFrameBase2*, UInt32)
    get_type_info_count : Proc(IHTMLFrameBase2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameBase2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameBase2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameBase2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_content_window : Proc(IHTMLFrameBase2*, IHTMLWindow2*, HRESULT)
    put_onload : Proc(IHTMLFrameBase2*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLFrameBase2*, VARIANT*, HRESULT)
    put_onreadystatechange : Proc(IHTMLFrameBase2*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLFrameBase2*, VARIANT*, HRESULT)
    get_ready_state : Proc(IHTMLFrameBase2*, UInt8**, HRESULT)
    put_allow_transparency : Proc(IHTMLFrameBase2*, Int16, HRESULT)
    get_allow_transparency : Proc(IHTMLFrameBase2*, Int16*, HRESULT)
  end

  IHTMLFrameBase2_GUID = "3050f6db-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameBase2 = LibC::GUID.new(0x3050f6db_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameBase2
    lpVtbl : IHTMLFrameBase2VTbl*
  end

  struct IHTMLFrameBase3VTbl
    query_interface : Proc(IHTMLFrameBase3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameBase3*, UInt32)
    release : Proc(IHTMLFrameBase3*, UInt32)
    get_type_info_count : Proc(IHTMLFrameBase3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameBase3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameBase3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameBase3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_long_desc : Proc(IHTMLFrameBase3*, UInt8*, HRESULT)
    get_long_desc : Proc(IHTMLFrameBase3*, UInt8**, HRESULT)
  end

  IHTMLFrameBase3_GUID = "3050f82e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameBase3 = LibC::GUID.new(0x3050f82e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameBase3
    lpVtbl : IHTMLFrameBase3VTbl*
  end

  struct DispHTMLFrameBaseVTbl
    query_interface : Proc(DispHTMLFrameBase*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFrameBase*, UInt32)
    release : Proc(DispHTMLFrameBase*, UInt32)
    get_type_info_count : Proc(DispHTMLFrameBase*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFrameBase*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFrameBase*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFrameBase*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFrameBase_GUID = "3050f541-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFrameBase = LibC::GUID.new(0x3050f541_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFrameBase
    lpVtbl : DispHTMLFrameBaseVTbl*
  end

  struct IHTMLFrameElementVTbl
    query_interface : Proc(IHTMLFrameElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameElement*, UInt32)
    release : Proc(IHTMLFrameElement*, UInt32)
    get_type_info_count : Proc(IHTMLFrameElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_border_color : Proc(IHTMLFrameElement*, VARIANT, HRESULT)
    get_border_color : Proc(IHTMLFrameElement*, VARIANT*, HRESULT)
  end

  IHTMLFrameElement_GUID = "3050f313-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameElement = LibC::GUID.new(0x3050f313_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameElement
    lpVtbl : IHTMLFrameElementVTbl*
  end

  struct IHTMLFrameElement2VTbl
    query_interface : Proc(IHTMLFrameElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameElement2*, UInt32)
    release : Proc(IHTMLFrameElement2*, UInt32)
    get_type_info_count : Proc(IHTMLFrameElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_height : Proc(IHTMLFrameElement2*, VARIANT, HRESULT)
    get_height : Proc(IHTMLFrameElement2*, VARIANT*, HRESULT)
    put_width : Proc(IHTMLFrameElement2*, VARIANT, HRESULT)
    get_width : Proc(IHTMLFrameElement2*, VARIANT*, HRESULT)
  end

  IHTMLFrameElement2_GUID = "3050f7f5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameElement2 = LibC::GUID.new(0x3050f7f5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameElement2
    lpVtbl : IHTMLFrameElement2VTbl*
  end

  struct IHTMLFrameElement3VTbl
    query_interface : Proc(IHTMLFrameElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameElement3*, UInt32)
    release : Proc(IHTMLFrameElement3*, UInt32)
    get_type_info_count : Proc(IHTMLFrameElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_content_document : Proc(IHTMLFrameElement3*, IDispatch*, HRESULT)
    put_src : Proc(IHTMLFrameElement3*, UInt8*, HRESULT)
    get_src : Proc(IHTMLFrameElement3*, UInt8**, HRESULT)
    put_long_desc : Proc(IHTMLFrameElement3*, UInt8*, HRESULT)
    get_long_desc : Proc(IHTMLFrameElement3*, UInt8**, HRESULT)
    put_frame_border : Proc(IHTMLFrameElement3*, UInt8*, HRESULT)
    get_frame_border : Proc(IHTMLFrameElement3*, UInt8**, HRESULT)
  end

  IHTMLFrameElement3_GUID = "3051042d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameElement3 = LibC::GUID.new(0x3051042d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameElement3
    lpVtbl : IHTMLFrameElement3VTbl*
  end

  struct DispHTMLFrameElementVTbl
    query_interface : Proc(DispHTMLFrameElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFrameElement*, UInt32)
    release : Proc(DispHTMLFrameElement*, UInt32)
    get_type_info_count : Proc(DispHTMLFrameElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFrameElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFrameElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFrameElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFrameElement_GUID = "3050f513-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFrameElement = LibC::GUID.new(0x3050f513_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFrameElement
    lpVtbl : DispHTMLFrameElementVTbl*
  end

  struct IHTMLIFrameElementVTbl
    query_interface : Proc(IHTMLIFrameElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIFrameElement*, UInt32)
    release : Proc(IHTMLIFrameElement*, UInt32)
    get_type_info_count : Proc(IHTMLIFrameElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIFrameElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIFrameElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIFrameElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_vspace : Proc(IHTMLIFrameElement*, Int32, HRESULT)
    get_vspace : Proc(IHTMLIFrameElement*, Int32*, HRESULT)
    put_hspace : Proc(IHTMLIFrameElement*, Int32, HRESULT)
    get_hspace : Proc(IHTMLIFrameElement*, Int32*, HRESULT)
    put_align : Proc(IHTMLIFrameElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLIFrameElement*, UInt8**, HRESULT)
  end

  IHTMLIFrameElement_GUID = "3050f315-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIFrameElement = LibC::GUID.new(0x3050f315_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIFrameElement
    lpVtbl : IHTMLIFrameElementVTbl*
  end

  struct IHTMLIFrameElement2VTbl
    query_interface : Proc(IHTMLIFrameElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIFrameElement2*, UInt32)
    release : Proc(IHTMLIFrameElement2*, UInt32)
    get_type_info_count : Proc(IHTMLIFrameElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIFrameElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIFrameElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIFrameElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_height : Proc(IHTMLIFrameElement2*, VARIANT, HRESULT)
    get_height : Proc(IHTMLIFrameElement2*, VARIANT*, HRESULT)
    put_width : Proc(IHTMLIFrameElement2*, VARIANT, HRESULT)
    get_width : Proc(IHTMLIFrameElement2*, VARIANT*, HRESULT)
  end

  IHTMLIFrameElement2_GUID = "3050f4e6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIFrameElement2 = LibC::GUID.new(0x3050f4e6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIFrameElement2
    lpVtbl : IHTMLIFrameElement2VTbl*
  end

  struct IHTMLIFrameElement3VTbl
    query_interface : Proc(IHTMLIFrameElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIFrameElement3*, UInt32)
    release : Proc(IHTMLIFrameElement3*, UInt32)
    get_type_info_count : Proc(IHTMLIFrameElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIFrameElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIFrameElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIFrameElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_content_document : Proc(IHTMLIFrameElement3*, IDispatch*, HRESULT)
    put_src : Proc(IHTMLIFrameElement3*, UInt8*, HRESULT)
    get_src : Proc(IHTMLIFrameElement3*, UInt8**, HRESULT)
    put_long_desc : Proc(IHTMLIFrameElement3*, UInt8*, HRESULT)
    get_long_desc : Proc(IHTMLIFrameElement3*, UInt8**, HRESULT)
    put_frame_border : Proc(IHTMLIFrameElement3*, UInt8*, HRESULT)
    get_frame_border : Proc(IHTMLIFrameElement3*, UInt8**, HRESULT)
  end

  IHTMLIFrameElement3_GUID = "30510433-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIFrameElement3 = LibC::GUID.new(0x30510433_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIFrameElement3
    lpVtbl : IHTMLIFrameElement3VTbl*
  end

  struct DispHTMLIFrameVTbl
    query_interface : Proc(DispHTMLIFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLIFrame*, UInt32)
    release : Proc(DispHTMLIFrame*, UInt32)
    get_type_info_count : Proc(DispHTMLIFrame*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLIFrame*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLIFrame*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLIFrame*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLIFrame_GUID = "3050f51b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLIFrame = LibC::GUID.new(0x3050f51b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLIFrame
    lpVtbl : DispHTMLIFrameVTbl*
  end

  struct IHTMLDivPositionVTbl
    query_interface : Proc(IHTMLDivPosition*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDivPosition*, UInt32)
    release : Proc(IHTMLDivPosition*, UInt32)
    get_type_info_count : Proc(IHTMLDivPosition*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDivPosition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDivPosition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDivPosition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLDivPosition*, UInt8*, HRESULT)
    get_align : Proc(IHTMLDivPosition*, UInt8**, HRESULT)
  end

  IHTMLDivPosition_GUID = "3050f212-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDivPosition = LibC::GUID.new(0x3050f212_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDivPosition
    lpVtbl : IHTMLDivPositionVTbl*
  end

  struct IHTMLFieldSetElementVTbl
    query_interface : Proc(IHTMLFieldSetElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFieldSetElement*, UInt32)
    release : Proc(IHTMLFieldSetElement*, UInt32)
    get_type_info_count : Proc(IHTMLFieldSetElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFieldSetElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFieldSetElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFieldSetElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLFieldSetElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLFieldSetElement*, UInt8**, HRESULT)
  end

  IHTMLFieldSetElement_GUID = "3050f3e7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFieldSetElement = LibC::GUID.new(0x3050f3e7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFieldSetElement
    lpVtbl : IHTMLFieldSetElementVTbl*
  end

  struct IHTMLFieldSetElement2VTbl
    query_interface : Proc(IHTMLFieldSetElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFieldSetElement2*, UInt32)
    release : Proc(IHTMLFieldSetElement2*, UInt32)
    get_type_info_count : Proc(IHTMLFieldSetElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFieldSetElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFieldSetElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFieldSetElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_form : Proc(IHTMLFieldSetElement2*, IHTMLFormElement*, HRESULT)
  end

  IHTMLFieldSetElement2_GUID = "3050f833-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFieldSetElement2 = LibC::GUID.new(0x3050f833_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFieldSetElement2
    lpVtbl : IHTMLFieldSetElement2VTbl*
  end

  struct IHTMLLegendElementVTbl
    query_interface : Proc(IHTMLLegendElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLegendElement*, UInt32)
    release : Proc(IHTMLLegendElement*, UInt32)
    get_type_info_count : Proc(IHTMLLegendElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLegendElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLegendElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLegendElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLLegendElement*, UInt8*, HRESULT)
    get_align : Proc(IHTMLLegendElement*, UInt8**, HRESULT)
  end

  IHTMLLegendElement_GUID = "3050f3ea-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLegendElement = LibC::GUID.new(0x3050f3ea_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLegendElement
    lpVtbl : IHTMLLegendElementVTbl*
  end

  struct IHTMLLegendElement2VTbl
    query_interface : Proc(IHTMLLegendElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLLegendElement2*, UInt32)
    release : Proc(IHTMLLegendElement2*, UInt32)
    get_type_info_count : Proc(IHTMLLegendElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLLegendElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLLegendElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLLegendElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_form : Proc(IHTMLLegendElement2*, IHTMLFormElement*, HRESULT)
  end

  IHTMLLegendElement2_GUID = "3050f834-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLLegendElement2 = LibC::GUID.new(0x3050f834_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLLegendElement2
    lpVtbl : IHTMLLegendElement2VTbl*
  end

  struct DispHTMLDivPositionVTbl
    query_interface : Proc(DispHTMLDivPosition*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLDivPosition*, UInt32)
    release : Proc(DispHTMLDivPosition*, UInt32)
    get_type_info_count : Proc(DispHTMLDivPosition*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLDivPosition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLDivPosition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLDivPosition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLDivPosition_GUID = "3050f50f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLDivPosition = LibC::GUID.new(0x3050f50f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLDivPosition
    lpVtbl : DispHTMLDivPositionVTbl*
  end

  struct DispHTMLFieldSetElementVTbl
    query_interface : Proc(DispHTMLFieldSetElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFieldSetElement*, UInt32)
    release : Proc(DispHTMLFieldSetElement*, UInt32)
    get_type_info_count : Proc(DispHTMLFieldSetElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFieldSetElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFieldSetElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFieldSetElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFieldSetElement_GUID = "3050f545-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFieldSetElement = LibC::GUID.new(0x3050f545_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFieldSetElement
    lpVtbl : DispHTMLFieldSetElementVTbl*
  end

  struct DispHTMLLegendElementVTbl
    query_interface : Proc(DispHTMLLegendElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLLegendElement*, UInt32)
    release : Proc(DispHTMLLegendElement*, UInt32)
    get_type_info_count : Proc(DispHTMLLegendElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLLegendElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLLegendElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLLegendElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLLegendElement_GUID = "3050f546-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLLegendElement = LibC::GUID.new(0x3050f546_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLLegendElement
    lpVtbl : DispHTMLLegendElementVTbl*
  end

  struct IHTMLSpanFlowVTbl
    query_interface : Proc(IHTMLSpanFlow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSpanFlow*, UInt32)
    release : Proc(IHTMLSpanFlow*, UInt32)
    get_type_info_count : Proc(IHTMLSpanFlow*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSpanFlow*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSpanFlow*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSpanFlow*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(IHTMLSpanFlow*, UInt8*, HRESULT)
    get_align : Proc(IHTMLSpanFlow*, UInt8**, HRESULT)
  end

  IHTMLSpanFlow_GUID = "3050f3e5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSpanFlow = LibC::GUID.new(0x3050f3e5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSpanFlow
    lpVtbl : IHTMLSpanFlowVTbl*
  end

  struct DispHTMLSpanFlowVTbl
    query_interface : Proc(DispHTMLSpanFlow*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLSpanFlow*, UInt32)
    release : Proc(DispHTMLSpanFlow*, UInt32)
    get_type_info_count : Proc(DispHTMLSpanFlow*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLSpanFlow*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLSpanFlow*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLSpanFlow*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLSpanFlow_GUID = "3050f544-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLSpanFlow = LibC::GUID.new(0x3050f544_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLSpanFlow
    lpVtbl : DispHTMLSpanFlowVTbl*
  end

  struct IHTMLFrameSetElementVTbl
    query_interface : Proc(IHTMLFrameSetElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameSetElement*, UInt32)
    release : Proc(IHTMLFrameSetElement*, UInt32)
    get_type_info_count : Proc(IHTMLFrameSetElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameSetElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameSetElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameSetElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_rows : Proc(IHTMLFrameSetElement*, UInt8*, HRESULT)
    get_rows : Proc(IHTMLFrameSetElement*, UInt8**, HRESULT)
    put_cols : Proc(IHTMLFrameSetElement*, UInt8*, HRESULT)
    get_cols : Proc(IHTMLFrameSetElement*, UInt8**, HRESULT)
    put_border : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_border : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
    put_border_color : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_border_color : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
    put_frame_border : Proc(IHTMLFrameSetElement*, UInt8*, HRESULT)
    get_frame_border : Proc(IHTMLFrameSetElement*, UInt8**, HRESULT)
    put_frame_spacing : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_frame_spacing : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
    put_name : Proc(IHTMLFrameSetElement*, UInt8*, HRESULT)
    get_name : Proc(IHTMLFrameSetElement*, UInt8**, HRESULT)
    put_onload : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
    put_onunload : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_onunload : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
    put_onbeforeunload : Proc(IHTMLFrameSetElement*, VARIANT, HRESULT)
    get_onbeforeunload : Proc(IHTMLFrameSetElement*, VARIANT*, HRESULT)
  end

  IHTMLFrameSetElement_GUID = "3050f319-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameSetElement = LibC::GUID.new(0x3050f319_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameSetElement
    lpVtbl : IHTMLFrameSetElementVTbl*
  end

  struct IHTMLFrameSetElement2VTbl
    query_interface : Proc(IHTMLFrameSetElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameSetElement2*, UInt32)
    release : Proc(IHTMLFrameSetElement2*, UInt32)
    get_type_info_count : Proc(IHTMLFrameSetElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameSetElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameSetElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameSetElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onbeforeprint : Proc(IHTMLFrameSetElement2*, VARIANT, HRESULT)
    get_onbeforeprint : Proc(IHTMLFrameSetElement2*, VARIANT*, HRESULT)
    put_onafterprint : Proc(IHTMLFrameSetElement2*, VARIANT, HRESULT)
    get_onafterprint : Proc(IHTMLFrameSetElement2*, VARIANT*, HRESULT)
  end

  IHTMLFrameSetElement2_GUID = "3050f5c6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameSetElement2 = LibC::GUID.new(0x3050f5c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameSetElement2
    lpVtbl : IHTMLFrameSetElement2VTbl*
  end

  struct IHTMLFrameSetElement3VTbl
    query_interface : Proc(IHTMLFrameSetElement3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFrameSetElement3*, UInt32)
    release : Proc(IHTMLFrameSetElement3*, UInt32)
    get_type_info_count : Proc(IHTMLFrameSetElement3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFrameSetElement3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFrameSetElement3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFrameSetElement3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_onhashchange : Proc(IHTMLFrameSetElement3*, VARIANT, HRESULT)
    get_onhashchange : Proc(IHTMLFrameSetElement3*, VARIANT*, HRESULT)
    put_onmessage : Proc(IHTMLFrameSetElement3*, VARIANT, HRESULT)
    get_onmessage : Proc(IHTMLFrameSetElement3*, VARIANT*, HRESULT)
    put_onoffline : Proc(IHTMLFrameSetElement3*, VARIANT, HRESULT)
    get_onoffline : Proc(IHTMLFrameSetElement3*, VARIANT*, HRESULT)
    put_ononline : Proc(IHTMLFrameSetElement3*, VARIANT, HRESULT)
    get_ononline : Proc(IHTMLFrameSetElement3*, VARIANT*, HRESULT)
    put_onstorage : Proc(IHTMLFrameSetElement3*, VARIANT, HRESULT)
    get_onstorage : Proc(IHTMLFrameSetElement3*, VARIANT*, HRESULT)
  end

  IHTMLFrameSetElement3_GUID = "30510796-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFrameSetElement3 = LibC::GUID.new(0x30510796_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFrameSetElement3
    lpVtbl : IHTMLFrameSetElement3VTbl*
  end

  struct DispHTMLFrameSetSiteVTbl
    query_interface : Proc(DispHTMLFrameSetSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLFrameSetSite*, UInt32)
    release : Proc(DispHTMLFrameSetSite*, UInt32)
    get_type_info_count : Proc(DispHTMLFrameSetSite*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLFrameSetSite*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLFrameSetSite*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLFrameSetSite*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLFrameSetSite_GUID = "3050f514-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLFrameSetSite = LibC::GUID.new(0x3050f514_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLFrameSetSite
    lpVtbl : DispHTMLFrameSetSiteVTbl*
  end

  struct IHTMLBGsoundVTbl
    query_interface : Proc(IHTMLBGsound*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLBGsound*, UInt32)
    release : Proc(IHTMLBGsound*, UInt32)
    get_type_info_count : Proc(IHTMLBGsound*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLBGsound*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLBGsound*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLBGsound*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLBGsound*, UInt8*, HRESULT)
    get_src : Proc(IHTMLBGsound*, UInt8**, HRESULT)
    put_loop : Proc(IHTMLBGsound*, VARIANT, HRESULT)
    get_loop : Proc(IHTMLBGsound*, VARIANT*, HRESULT)
    put_volume : Proc(IHTMLBGsound*, VARIANT, HRESULT)
    get_volume : Proc(IHTMLBGsound*, VARIANT*, HRESULT)
    put_balance : Proc(IHTMLBGsound*, VARIANT, HRESULT)
    get_balance : Proc(IHTMLBGsound*, VARIANT*, HRESULT)
  end

  IHTMLBGsound_GUID = "3050f369-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLBGsound = LibC::GUID.new(0x3050f369_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLBGsound
    lpVtbl : IHTMLBGsoundVTbl*
  end

  struct DispHTMLBGsoundVTbl
    query_interface : Proc(DispHTMLBGsound*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLBGsound*, UInt32)
    release : Proc(DispHTMLBGsound*, UInt32)
    get_type_info_count : Proc(DispHTMLBGsound*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLBGsound*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLBGsound*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLBGsound*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLBGsound_GUID = "3050f53c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLBGsound = LibC::GUID.new(0x3050f53c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLBGsound
    lpVtbl : DispHTMLBGsoundVTbl*
  end

  struct IHTMLFontNamesCollectionVTbl
    query_interface : Proc(IHTMLFontNamesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFontNamesCollection*, UInt32)
    release : Proc(IHTMLFontNamesCollection*, UInt32)
    get_type_info_count : Proc(IHTMLFontNamesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFontNamesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFontNamesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFontNamesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLFontNamesCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLFontNamesCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLFontNamesCollection*, Int32, UInt8**, HRESULT)
  end

  IHTMLFontNamesCollection_GUID = "3050f376-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFontNamesCollection = LibC::GUID.new(0x3050f376_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFontNamesCollection
    lpVtbl : IHTMLFontNamesCollectionVTbl*
  end

  struct IHTMLFontSizesCollectionVTbl
    query_interface : Proc(IHTMLFontSizesCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLFontSizesCollection*, UInt32)
    release : Proc(IHTMLFontSizesCollection*, UInt32)
    get_type_info_count : Proc(IHTMLFontSizesCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLFontSizesCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLFontSizesCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLFontSizesCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLFontSizesCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLFontSizesCollection*, IUnknown*, HRESULT)
    get_for_font : Proc(IHTMLFontSizesCollection*, UInt8**, HRESULT)
    item : Proc(IHTMLFontSizesCollection*, Int32, Int32*, HRESULT)
  end

  IHTMLFontSizesCollection_GUID = "3050f377-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLFontSizesCollection = LibC::GUID.new(0x3050f377_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLFontSizesCollection
    lpVtbl : IHTMLFontSizesCollectionVTbl*
  end

  struct IHTMLOptionsHolderVTbl
    query_interface : Proc(IHTMLOptionsHolder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOptionsHolder*, UInt32)
    release : Proc(IHTMLOptionsHolder*, UInt32)
    get_type_info_count : Proc(IHTMLOptionsHolder*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLOptionsHolder*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLOptionsHolder*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLOptionsHolder*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_document : Proc(IHTMLOptionsHolder*, IHTMLDocument2*, HRESULT)
    get_fonts : Proc(IHTMLOptionsHolder*, IHTMLFontNamesCollection*, HRESULT)
    put_exec_arg : Proc(IHTMLOptionsHolder*, VARIANT, HRESULT)
    get_exec_arg : Proc(IHTMLOptionsHolder*, VARIANT*, HRESULT)
    put_error_line : Proc(IHTMLOptionsHolder*, Int32, HRESULT)
    get_error_line : Proc(IHTMLOptionsHolder*, Int32*, HRESULT)
    put_error_character : Proc(IHTMLOptionsHolder*, Int32, HRESULT)
    get_error_character : Proc(IHTMLOptionsHolder*, Int32*, HRESULT)
    put_error_code : Proc(IHTMLOptionsHolder*, Int32, HRESULT)
    get_error_code : Proc(IHTMLOptionsHolder*, Int32*, HRESULT)
    put_error_message : Proc(IHTMLOptionsHolder*, UInt8*, HRESULT)
    get_error_message : Proc(IHTMLOptionsHolder*, UInt8**, HRESULT)
    put_error_debug : Proc(IHTMLOptionsHolder*, Int16, HRESULT)
    get_error_debug : Proc(IHTMLOptionsHolder*, Int16*, HRESULT)
    get_unsecured_window_of_document : Proc(IHTMLOptionsHolder*, IHTMLWindow2*, HRESULT)
    put_find_text : Proc(IHTMLOptionsHolder*, UInt8*, HRESULT)
    get_find_text : Proc(IHTMLOptionsHolder*, UInt8**, HRESULT)
    put_anything_after_frameset : Proc(IHTMLOptionsHolder*, Int16, HRESULT)
    get_anything_after_frameset : Proc(IHTMLOptionsHolder*, Int16*, HRESULT)
    sizes : Proc(IHTMLOptionsHolder*, UInt8*, IHTMLFontSizesCollection*, HRESULT)
    openfiledlg : Proc(IHTMLOptionsHolder*, VARIANT, VARIANT, VARIANT, VARIANT, UInt8**, HRESULT)
    savefiledlg : Proc(IHTMLOptionsHolder*, VARIANT, VARIANT, VARIANT, VARIANT, UInt8**, HRESULT)
    choosecolordlg : Proc(IHTMLOptionsHolder*, VARIANT, Int32*, HRESULT)
    show_security_info : Proc(IHTMLOptionsHolder*, HRESULT)
    is_apartment_model : Proc(IHTMLOptionsHolder*, IHTMLObjectElement, Int16*, HRESULT)
    get_charset : Proc(IHTMLOptionsHolder*, UInt8*, Int32*, HRESULT)
    get_secure_connection_info : Proc(IHTMLOptionsHolder*, UInt8**, HRESULT)
  end

  IHTMLOptionsHolder_GUID = "3050f378-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOptionsHolder = LibC::GUID.new(0x3050f378_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOptionsHolder
    lpVtbl : IHTMLOptionsHolderVTbl*
  end

  struct HTMLStyleElementEvents2VTbl
    query_interface : Proc(HTMLStyleElementEvents2*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLStyleElementEvents2*, UInt32)
    release : Proc(HTMLStyleElementEvents2*, UInt32)
    get_type_info_count : Proc(HTMLStyleElementEvents2*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLStyleElementEvents2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLStyleElementEvents2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLStyleElementEvents2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLStyleElementEvents2_GUID = "3050f615-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLStyleElementEvents2 = LibC::GUID.new(0x3050f615_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLStyleElementEvents2
    lpVtbl : HTMLStyleElementEvents2VTbl*
  end

  struct HTMLStyleElementEventsVTbl
    query_interface : Proc(HTMLStyleElementEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLStyleElementEvents*, UInt32)
    release : Proc(HTMLStyleElementEvents*, UInt32)
    get_type_info_count : Proc(HTMLStyleElementEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLStyleElementEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLStyleElementEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLStyleElementEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLStyleElementEvents_GUID = "3050f3cb-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLStyleElementEvents = LibC::GUID.new(0x3050f3cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLStyleElementEvents
    lpVtbl : HTMLStyleElementEventsVTbl*
  end

  struct IHTMLStyleElementVTbl
    query_interface : Proc(IHTMLStyleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleElement*, UInt32)
    release : Proc(IHTMLStyleElement*, UInt32)
    get_type_info_count : Proc(IHTMLStyleElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(IHTMLStyleElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLStyleElement*, UInt8**, HRESULT)
    get_ready_state : Proc(IHTMLStyleElement*, UInt8**, HRESULT)
    put_onreadystatechange : Proc(IHTMLStyleElement*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLStyleElement*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLStyleElement*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLStyleElement*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLStyleElement*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLStyleElement*, VARIANT*, HRESULT)
    get_style_sheet : Proc(IHTMLStyleElement*, IHTMLStyleSheet*, HRESULT)
    put_disabled : Proc(IHTMLStyleElement*, Int16, HRESULT)
    get_disabled : Proc(IHTMLStyleElement*, Int16*, HRESULT)
    put_media : Proc(IHTMLStyleElement*, UInt8*, HRESULT)
    get_media : Proc(IHTMLStyleElement*, UInt8**, HRESULT)
  end

  IHTMLStyleElement_GUID = "3050f375-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleElement = LibC::GUID.new(0x3050f375_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleElement
    lpVtbl : IHTMLStyleElementVTbl*
  end

  struct IHTMLStyleElement2VTbl
    query_interface : Proc(IHTMLStyleElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleElement2*, UInt32)
    release : Proc(IHTMLStyleElement2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_sheet : Proc(IHTMLStyleElement2*, IHTMLStyleSheet*, HRESULT)
  end

  IHTMLStyleElement2_GUID = "3051072a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleElement2 = LibC::GUID.new(0x3051072a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleElement2
    lpVtbl : IHTMLStyleElement2VTbl*
  end

  struct DispHTMLStyleElementVTbl
    query_interface : Proc(DispHTMLStyleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleElement*, UInt32)
    release : Proc(DispHTMLStyleElement*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleElement_GUID = "3050f511-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleElement = LibC::GUID.new(0x3050f511_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleElement
    lpVtbl : DispHTMLStyleElementVTbl*
  end

  struct IHTMLStyleFontFaceVTbl
    query_interface : Proc(IHTMLStyleFontFace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleFontFace*, UInt32)
    release : Proc(IHTMLStyleFontFace*, UInt32)
    get_type_info_count : Proc(IHTMLStyleFontFace*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleFontFace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleFontFace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleFontFace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_fontsrc : Proc(IHTMLStyleFontFace*, UInt8*, HRESULT)
    get_fontsrc : Proc(IHTMLStyleFontFace*, UInt8**, HRESULT)
  end

  IHTMLStyleFontFace_GUID = "3050f3d5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleFontFace = LibC::GUID.new(0x3050f3d5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleFontFace
    lpVtbl : IHTMLStyleFontFaceVTbl*
  end

  struct IHTMLStyleFontFace2VTbl
    query_interface : Proc(IHTMLStyleFontFace2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleFontFace2*, UInt32)
    release : Proc(IHTMLStyleFontFace2*, UInt32)
    get_type_info_count : Proc(IHTMLStyleFontFace2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleFontFace2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleFontFace2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleFontFace2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_style : Proc(IHTMLStyleFontFace2*, IHTMLRuleStyle*, HRESULT)
  end

  IHTMLStyleFontFace2_GUID = "305106ec-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleFontFace2 = LibC::GUID.new(0x305106ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleFontFace2
    lpVtbl : IHTMLStyleFontFace2VTbl*
  end

  struct DispHTMLStyleFontFaceVTbl
    query_interface : Proc(DispHTMLStyleFontFace*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleFontFace*, UInt32)
    release : Proc(DispHTMLStyleFontFace*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleFontFace*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleFontFace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleFontFace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleFontFace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleFontFace_GUID = "30590081-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleFontFace = LibC::GUID.new(0x30590081_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleFontFace
    lpVtbl : DispHTMLStyleFontFaceVTbl*
  end

  struct IHTMLXDomainRequestVTbl
    query_interface : Proc(IHTMLXDomainRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLXDomainRequest*, UInt32)
    release : Proc(IHTMLXDomainRequest*, UInt32)
    get_type_info_count : Proc(IHTMLXDomainRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLXDomainRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLXDomainRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLXDomainRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_response_text : Proc(IHTMLXDomainRequest*, UInt8**, HRESULT)
    put_timeout : Proc(IHTMLXDomainRequest*, Int32, HRESULT)
    get_timeout : Proc(IHTMLXDomainRequest*, Int32*, HRESULT)
    get_content_type : Proc(IHTMLXDomainRequest*, UInt8**, HRESULT)
    put_onprogress : Proc(IHTMLXDomainRequest*, VARIANT, HRESULT)
    get_onprogress : Proc(IHTMLXDomainRequest*, VARIANT*, HRESULT)
    put_onerror : Proc(IHTMLXDomainRequest*, VARIANT, HRESULT)
    get_onerror : Proc(IHTMLXDomainRequest*, VARIANT*, HRESULT)
    put_ontimeout : Proc(IHTMLXDomainRequest*, VARIANT, HRESULT)
    get_ontimeout : Proc(IHTMLXDomainRequest*, VARIANT*, HRESULT)
    put_onload : Proc(IHTMLXDomainRequest*, VARIANT, HRESULT)
    get_onload : Proc(IHTMLXDomainRequest*, VARIANT*, HRESULT)
    abort : Proc(IHTMLXDomainRequest*, HRESULT)
    open : Proc(IHTMLXDomainRequest*, UInt8*, UInt8*, HRESULT)
    send : Proc(IHTMLXDomainRequest*, VARIANT, HRESULT)
  end

  IHTMLXDomainRequest_GUID = "30510454-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLXDomainRequest = LibC::GUID.new(0x30510454_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLXDomainRequest
    lpVtbl : IHTMLXDomainRequestVTbl*
  end

  struct IHTMLXDomainRequestFactoryVTbl
    query_interface : Proc(IHTMLXDomainRequestFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLXDomainRequestFactory*, UInt32)
    release : Proc(IHTMLXDomainRequestFactory*, UInt32)
    get_type_info_count : Proc(IHTMLXDomainRequestFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLXDomainRequestFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLXDomainRequestFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLXDomainRequestFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IHTMLXDomainRequestFactory*, IHTMLXDomainRequest*, HRESULT)
  end

  IHTMLXDomainRequestFactory_GUID = "30510456-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLXDomainRequestFactory = LibC::GUID.new(0x30510456_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLXDomainRequestFactory
    lpVtbl : IHTMLXDomainRequestFactoryVTbl*
  end

  struct DispXDomainRequestVTbl
    query_interface : Proc(DispXDomainRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispXDomainRequest*, UInt32)
    release : Proc(DispXDomainRequest*, UInt32)
    get_type_info_count : Proc(DispXDomainRequest*, UInt32*, HRESULT)
    get_type_info : Proc(DispXDomainRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispXDomainRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispXDomainRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispXDomainRequest_GUID = "3050f599-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispXDomainRequest = LibC::GUID.new(0x3050f599_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispXDomainRequest
    lpVtbl : DispXDomainRequestVTbl*
  end

  struct IHTMLStorage2VTbl
    query_interface : Proc(IHTMLStorage2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStorage2*, UInt32)
    release : Proc(IHTMLStorage2*, UInt32)
    get_type_info_count : Proc(IHTMLStorage2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStorage2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStorage2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStorage2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    set_item : Proc(IHTMLStorage2*, UInt8*, UInt8*, HRESULT)
  end

  IHTMLStorage2_GUID = "30510799-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStorage2 = LibC::GUID.new(0x30510799_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStorage2
    lpVtbl : IHTMLStorage2VTbl*
  end

  struct DispHTMLStorageVTbl
    query_interface : Proc(DispHTMLStorage*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStorage*, UInt32)
    release : Proc(DispHTMLStorage*, UInt32)
    get_type_info_count : Proc(DispHTMLStorage*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStorage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStorage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStorage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStorage_GUID = "3050f59d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStorage = LibC::GUID.new(0x3050f59d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStorage
    lpVtbl : DispHTMLStorageVTbl*
  end

  struct IEventTargetVTbl
    query_interface : Proc(IEventTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEventTarget*, UInt32)
    release : Proc(IEventTarget*, UInt32)
    get_type_info_count : Proc(IEventTarget*, UInt32*, HRESULT)
    get_type_info : Proc(IEventTarget*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IEventTarget*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IEventTarget*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add_event_listener : Proc(IEventTarget*, UInt8*, IDispatch, Int16, HRESULT)
    remove_event_listener : Proc(IEventTarget*, UInt8*, IDispatch, Int16, HRESULT)
    dispatch_event : Proc(IEventTarget*, IDOMEvent, Int16*, HRESULT)
  end

  IEventTarget_GUID = "305104b9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IEventTarget = LibC::GUID.new(0x305104b9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IEventTarget
    lpVtbl : IEventTargetVTbl*
  end

  struct DispDOMEventVTbl
    query_interface : Proc(DispDOMEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMEvent*, UInt32)
    release : Proc(DispDOMEvent*, UInt32)
    get_type_info_count : Proc(DispDOMEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMEvent_GUID = "3050f5a2-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMEvent = LibC::GUID.new(0x3050f5a2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMEvent
    lpVtbl : DispDOMEventVTbl*
  end

  struct IDOMUIEventVTbl
    query_interface : Proc(IDOMUIEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMUIEvent*, UInt32)
    release : Proc(IDOMUIEvent*, UInt32)
    get_type_info_count : Proc(IDOMUIEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMUIEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMUIEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMUIEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_view : Proc(IDOMUIEvent*, IHTMLWindow2*, HRESULT)
    get_detail : Proc(IDOMUIEvent*, Int32*, HRESULT)
    init_ui_event : Proc(IDOMUIEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, HRESULT)
  end

  IDOMUIEvent_GUID = "305106ca-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMUIEvent = LibC::GUID.new(0x305106ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMUIEvent
    lpVtbl : IDOMUIEventVTbl*
  end

  struct DispDOMUIEventVTbl
    query_interface : Proc(DispDOMUIEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMUIEvent*, UInt32)
    release : Proc(DispDOMUIEvent*, UInt32)
    get_type_info_count : Proc(DispDOMUIEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMUIEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMUIEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMUIEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMUIEvent_GUID = "30590072-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMUIEvent = LibC::GUID.new(0x30590072_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMUIEvent
    lpVtbl : DispDOMUIEventVTbl*
  end

  struct IDOMMouseEventVTbl
    query_interface : Proc(IDOMMouseEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMouseEvent*, UInt32)
    release : Proc(IDOMMouseEvent*, UInt32)
    get_type_info_count : Proc(IDOMMouseEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMouseEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMouseEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMouseEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_screen_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_screen_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_client_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_client_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_ctrl_key : Proc(IDOMMouseEvent*, Int16*, HRESULT)
    get_shift_key : Proc(IDOMMouseEvent*, Int16*, HRESULT)
    get_alt_key : Proc(IDOMMouseEvent*, Int16*, HRESULT)
    get_meta_key : Proc(IDOMMouseEvent*, Int16*, HRESULT)
    get_button : Proc(IDOMMouseEvent*, UInt16*, HRESULT)
    get_related_target : Proc(IDOMMouseEvent*, IEventTarget*, HRESULT)
    init_mouse_event : Proc(IDOMMouseEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, Int32, Int32, Int32, Int32, Int16, Int16, Int16, Int16, UInt16, IEventTarget, HRESULT)
    get_modifier_state : Proc(IDOMMouseEvent*, UInt8*, Int16*, HRESULT)
    get_buttons : Proc(IDOMMouseEvent*, UInt16*, HRESULT)
    get_from_element : Proc(IDOMMouseEvent*, IHTMLElement*, HRESULT)
    get_to_element : Proc(IDOMMouseEvent*, IHTMLElement*, HRESULT)
    get_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_offset_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_offset_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_page_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_page_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_layer_x : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_layer_y : Proc(IDOMMouseEvent*, Int32*, HRESULT)
    get_which : Proc(IDOMMouseEvent*, UInt16*, HRESULT)
  end

  IDOMMouseEvent_GUID = "305106ce-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMouseEvent = LibC::GUID.new(0x305106ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMouseEvent
    lpVtbl : IDOMMouseEventVTbl*
  end

  struct DispDOMMouseEventVTbl
    query_interface : Proc(DispDOMMouseEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMouseEvent*, UInt32)
    release : Proc(DispDOMMouseEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMouseEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMouseEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMouseEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMouseEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMouseEvent_GUID = "30590073-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMouseEvent = LibC::GUID.new(0x30590073_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMouseEvent
    lpVtbl : DispDOMMouseEventVTbl*
  end

  struct IDOMDragEventVTbl
    query_interface : Proc(IDOMDragEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMDragEvent*, UInt32)
    release : Proc(IDOMDragEvent*, UInt32)
    get_type_info_count : Proc(IDOMDragEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMDragEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMDragEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMDragEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_data_transfer : Proc(IDOMDragEvent*, IHTMLDataTransfer*, HRESULT)
    init_drag_event : Proc(IDOMDragEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, Int32, Int32, Int32, Int32, Int16, Int16, Int16, Int16, UInt16, IEventTarget, IHTMLDataTransfer, HRESULT)
  end

  IDOMDragEvent_GUID = "30510761-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMDragEvent = LibC::GUID.new(0x30510761_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMDragEvent
    lpVtbl : IDOMDragEventVTbl*
  end

  struct DispDOMDragEventVTbl
    query_interface : Proc(DispDOMDragEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMDragEvent*, UInt32)
    release : Proc(DispDOMDragEvent*, UInt32)
    get_type_info_count : Proc(DispDOMDragEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMDragEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMDragEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMDragEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMDragEvent_GUID = "305900a7-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMDragEvent = LibC::GUID.new(0x305900a7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMDragEvent
    lpVtbl : DispDOMDragEventVTbl*
  end

  struct IDOMMouseWheelEventVTbl
    query_interface : Proc(IDOMMouseWheelEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMouseWheelEvent*, UInt32)
    release : Proc(IDOMMouseWheelEvent*, UInt32)
    get_type_info_count : Proc(IDOMMouseWheelEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMouseWheelEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMouseWheelEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMouseWheelEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_wheel_delta : Proc(IDOMMouseWheelEvent*, Int32*, HRESULT)
    init_mouse_wheel_event : Proc(IDOMMouseWheelEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, Int32, Int32, Int32, Int32, UInt16, IEventTarget, UInt8*, Int32, HRESULT)
  end

  IDOMMouseWheelEvent_GUID = "305106d0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMouseWheelEvent = LibC::GUID.new(0x305106d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMouseWheelEvent
    lpVtbl : IDOMMouseWheelEventVTbl*
  end

  struct DispDOMMouseWheelEventVTbl
    query_interface : Proc(DispDOMMouseWheelEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMouseWheelEvent*, UInt32)
    release : Proc(DispDOMMouseWheelEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMouseWheelEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMouseWheelEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMouseWheelEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMouseWheelEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMouseWheelEvent_GUID = "30590074-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMouseWheelEvent = LibC::GUID.new(0x30590074_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMouseWheelEvent
    lpVtbl : DispDOMMouseWheelEventVTbl*
  end

  struct IDOMWheelEventVTbl
    query_interface : Proc(IDOMWheelEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMWheelEvent*, UInt32)
    release : Proc(IDOMWheelEvent*, UInt32)
    get_type_info_count : Proc(IDOMWheelEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMWheelEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMWheelEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMWheelEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_delta_x : Proc(IDOMWheelEvent*, Int32*, HRESULT)
    get_delta_y : Proc(IDOMWheelEvent*, Int32*, HRESULT)
    get_delta_z : Proc(IDOMWheelEvent*, Int32*, HRESULT)
    get_delta_mode : Proc(IDOMWheelEvent*, UInt32*, HRESULT)
    init_wheel_event : Proc(IDOMWheelEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, Int32, Int32, Int32, Int32, UInt16, IEventTarget, UInt8*, Int32, Int32, Int32, UInt32, HRESULT)
  end

  IDOMWheelEvent_GUID = "305106d2-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMWheelEvent = LibC::GUID.new(0x305106d2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMWheelEvent
    lpVtbl : IDOMWheelEventVTbl*
  end

  struct DispDOMWheelEventVTbl
    query_interface : Proc(DispDOMWheelEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMWheelEvent*, UInt32)
    release : Proc(DispDOMWheelEvent*, UInt32)
    get_type_info_count : Proc(DispDOMWheelEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMWheelEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMWheelEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMWheelEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMWheelEvent_GUID = "30590075-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMWheelEvent = LibC::GUID.new(0x30590075_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMWheelEvent
    lpVtbl : DispDOMWheelEventVTbl*
  end

  struct IDOMTextEventVTbl
    query_interface : Proc(IDOMTextEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMTextEvent*, UInt32)
    release : Proc(IDOMTextEvent*, UInt32)
    get_type_info_count : Proc(IDOMTextEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMTextEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMTextEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMTextEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_data : Proc(IDOMTextEvent*, UInt8**, HRESULT)
    get_input_method : Proc(IDOMTextEvent*, UInt32*, HRESULT)
    init_text_event : Proc(IDOMTextEvent*, UInt8*, Int16, Int16, IHTMLWindow2, UInt8*, UInt32, UInt8*, HRESULT)
    get_locale : Proc(IDOMTextEvent*, UInt8**, HRESULT)
  end

  IDOMTextEvent_GUID = "305106d4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMTextEvent = LibC::GUID.new(0x305106d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMTextEvent
    lpVtbl : IDOMTextEventVTbl*
  end

  struct DispDOMTextEventVTbl
    query_interface : Proc(DispDOMTextEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMTextEvent*, UInt32)
    release : Proc(DispDOMTextEvent*, UInt32)
    get_type_info_count : Proc(DispDOMTextEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMTextEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMTextEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMTextEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMTextEvent_GUID = "30590076-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMTextEvent = LibC::GUID.new(0x30590076_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMTextEvent
    lpVtbl : DispDOMTextEventVTbl*
  end

  struct IDOMKeyboardEventVTbl
    query_interface : Proc(IDOMKeyboardEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMKeyboardEvent*, UInt32)
    release : Proc(IDOMKeyboardEvent*, UInt32)
    get_type_info_count : Proc(IDOMKeyboardEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMKeyboardEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMKeyboardEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMKeyboardEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_key : Proc(IDOMKeyboardEvent*, UInt8**, HRESULT)
    get_location : Proc(IDOMKeyboardEvent*, UInt32*, HRESULT)
    get_ctrl_key : Proc(IDOMKeyboardEvent*, Int16*, HRESULT)
    get_shift_key : Proc(IDOMKeyboardEvent*, Int16*, HRESULT)
    get_alt_key : Proc(IDOMKeyboardEvent*, Int16*, HRESULT)
    get_meta_key : Proc(IDOMKeyboardEvent*, Int16*, HRESULT)
    get_repeat : Proc(IDOMKeyboardEvent*, Int16*, HRESULT)
    get_modifier_state : Proc(IDOMKeyboardEvent*, UInt8*, Int16*, HRESULT)
    init_keyboard_event : Proc(IDOMKeyboardEvent*, UInt8*, Int16, Int16, IHTMLWindow2, UInt8*, UInt32, UInt8*, Int16, UInt8*, HRESULT)
    get_key_code : Proc(IDOMKeyboardEvent*, Int32*, HRESULT)
    get_char_code : Proc(IDOMKeyboardEvent*, Int32*, HRESULT)
    get_which : Proc(IDOMKeyboardEvent*, Int32*, HRESULT)
    get_ie9_char : Proc(IDOMKeyboardEvent*, VARIANT*, HRESULT)
    get_locale : Proc(IDOMKeyboardEvent*, UInt8**, HRESULT)
  end

  IDOMKeyboardEvent_GUID = "305106d6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMKeyboardEvent = LibC::GUID.new(0x305106d6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMKeyboardEvent
    lpVtbl : IDOMKeyboardEventVTbl*
  end

  struct DispDOMKeyboardEventVTbl
    query_interface : Proc(DispDOMKeyboardEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMKeyboardEvent*, UInt32)
    release : Proc(DispDOMKeyboardEvent*, UInt32)
    get_type_info_count : Proc(DispDOMKeyboardEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMKeyboardEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMKeyboardEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMKeyboardEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMKeyboardEvent_GUID = "30590077-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMKeyboardEvent = LibC::GUID.new(0x30590077_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMKeyboardEvent
    lpVtbl : DispDOMKeyboardEventVTbl*
  end

  struct IDOMCompositionEventVTbl
    query_interface : Proc(IDOMCompositionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMCompositionEvent*, UInt32)
    release : Proc(IDOMCompositionEvent*, UInt32)
    get_type_info_count : Proc(IDOMCompositionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMCompositionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMCompositionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMCompositionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_data : Proc(IDOMCompositionEvent*, UInt8**, HRESULT)
    init_composition_event : Proc(IDOMCompositionEvent*, UInt8*, Int16, Int16, IHTMLWindow2, UInt8*, UInt8*, HRESULT)
    get_locale : Proc(IDOMCompositionEvent*, UInt8**, HRESULT)
  end

  IDOMCompositionEvent_GUID = "305106d8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMCompositionEvent = LibC::GUID.new(0x305106d8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMCompositionEvent
    lpVtbl : IDOMCompositionEventVTbl*
  end

  struct DispDOMCompositionEventVTbl
    query_interface : Proc(DispDOMCompositionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMCompositionEvent*, UInt32)
    release : Proc(DispDOMCompositionEvent*, UInt32)
    get_type_info_count : Proc(DispDOMCompositionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMCompositionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMCompositionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMCompositionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMCompositionEvent_GUID = "30590078-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMCompositionEvent = LibC::GUID.new(0x30590078_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMCompositionEvent
    lpVtbl : DispDOMCompositionEventVTbl*
  end

  struct IDOMMutationEventVTbl
    query_interface : Proc(IDOMMutationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMutationEvent*, UInt32)
    release : Proc(IDOMMutationEvent*, UInt32)
    get_type_info_count : Proc(IDOMMutationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMutationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMutationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMutationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_related_node : Proc(IDOMMutationEvent*, IDispatch*, HRESULT)
    get_prev_value : Proc(IDOMMutationEvent*, UInt8**, HRESULT)
    get_new_value : Proc(IDOMMutationEvent*, UInt8**, HRESULT)
    get_attr_name : Proc(IDOMMutationEvent*, UInt8**, HRESULT)
    get_attr_change : Proc(IDOMMutationEvent*, UInt16*, HRESULT)
    init_mutation_event : Proc(IDOMMutationEvent*, UInt8*, Int16, Int16, IDispatch, UInt8*, UInt8*, UInt8*, UInt16, HRESULT)
  end

  IDOMMutationEvent_GUID = "305106da-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMutationEvent = LibC::GUID.new(0x305106da_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMutationEvent
    lpVtbl : IDOMMutationEventVTbl*
  end

  struct DispDOMMutationEventVTbl
    query_interface : Proc(DispDOMMutationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMutationEvent*, UInt32)
    release : Proc(DispDOMMutationEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMutationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMutationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMutationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMutationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMutationEvent_GUID = "30590079-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMutationEvent = LibC::GUID.new(0x30590079_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMutationEvent
    lpVtbl : DispDOMMutationEventVTbl*
  end

  struct IDOMBeforeUnloadEventVTbl
    query_interface : Proc(IDOMBeforeUnloadEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMBeforeUnloadEvent*, UInt32)
    release : Proc(IDOMBeforeUnloadEvent*, UInt32)
    get_type_info_count : Proc(IDOMBeforeUnloadEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMBeforeUnloadEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMBeforeUnloadEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMBeforeUnloadEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_return_value : Proc(IDOMBeforeUnloadEvent*, VARIANT, HRESULT)
    get_return_value : Proc(IDOMBeforeUnloadEvent*, VARIANT*, HRESULT)
  end

  IDOMBeforeUnloadEvent_GUID = "30510763-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMBeforeUnloadEvent = LibC::GUID.new(0x30510763_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMBeforeUnloadEvent
    lpVtbl : IDOMBeforeUnloadEventVTbl*
  end

  struct DispDOMBeforeUnloadEventVTbl
    query_interface : Proc(DispDOMBeforeUnloadEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMBeforeUnloadEvent*, UInt32)
    release : Proc(DispDOMBeforeUnloadEvent*, UInt32)
    get_type_info_count : Proc(DispDOMBeforeUnloadEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMBeforeUnloadEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMBeforeUnloadEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMBeforeUnloadEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMBeforeUnloadEvent_GUID = "305900a8-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMBeforeUnloadEvent = LibC::GUID.new(0x305900a8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMBeforeUnloadEvent
    lpVtbl : DispDOMBeforeUnloadEventVTbl*
  end

  struct IDOMFocusEventVTbl
    query_interface : Proc(IDOMFocusEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMFocusEvent*, UInt32)
    release : Proc(IDOMFocusEvent*, UInt32)
    get_type_info_count : Proc(IDOMFocusEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMFocusEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMFocusEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMFocusEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_related_target : Proc(IDOMFocusEvent*, IEventTarget*, HRESULT)
    init_focus_event : Proc(IDOMFocusEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, IEventTarget, HRESULT)
  end

  IDOMFocusEvent_GUID = "305106cc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMFocusEvent = LibC::GUID.new(0x305106cc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMFocusEvent
    lpVtbl : IDOMFocusEventVTbl*
  end

  struct DispDOMFocusEventVTbl
    query_interface : Proc(DispDOMFocusEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMFocusEvent*, UInt32)
    release : Proc(DispDOMFocusEvent*, UInt32)
    get_type_info_count : Proc(DispDOMFocusEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMFocusEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMFocusEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMFocusEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMFocusEvent_GUID = "30590071-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMFocusEvent = LibC::GUID.new(0x30590071_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMFocusEvent
    lpVtbl : DispDOMFocusEventVTbl*
  end

  struct IDOMCustomEventVTbl
    query_interface : Proc(IDOMCustomEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMCustomEvent*, UInt32)
    release : Proc(IDOMCustomEvent*, UInt32)
    get_type_info_count : Proc(IDOMCustomEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMCustomEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMCustomEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMCustomEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_detail : Proc(IDOMCustomEvent*, VARIANT*, HRESULT)
    init_custom_event : Proc(IDOMCustomEvent*, UInt8*, Int16, Int16, VARIANT*, HRESULT)
  end

  IDOMCustomEvent_GUID = "305106de-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMCustomEvent = LibC::GUID.new(0x305106de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMCustomEvent
    lpVtbl : IDOMCustomEventVTbl*
  end

  struct DispDOMCustomEventVTbl
    query_interface : Proc(DispDOMCustomEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMCustomEvent*, UInt32)
    release : Proc(DispDOMCustomEvent*, UInt32)
    get_type_info_count : Proc(DispDOMCustomEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMCustomEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMCustomEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMCustomEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMCustomEvent_GUID = "3059007c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMCustomEvent = LibC::GUID.new(0x3059007c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMCustomEvent
    lpVtbl : DispDOMCustomEventVTbl*
  end

  struct ICanvasGradientVTbl
    query_interface : Proc(ICanvasGradient*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasGradient*, UInt32)
    release : Proc(ICanvasGradient*, UInt32)
    get_type_info_count : Proc(ICanvasGradient*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasGradient*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasGradient*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasGradient*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    add_color_stop : Proc(ICanvasGradient*, Float32, UInt8*, HRESULT)
  end

  ICanvasGradient_GUID = "30510714-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasGradient = LibC::GUID.new(0x30510714_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasGradient
    lpVtbl : ICanvasGradientVTbl*
  end

  struct ICanvasPatternVTbl
    query_interface : Proc(ICanvasPattern*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasPattern*, UInt32)
    release : Proc(ICanvasPattern*, UInt32)
    get_type_info_count : Proc(ICanvasPattern*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasPattern*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasPattern*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasPattern*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ICanvasPattern_GUID = "30510716-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasPattern = LibC::GUID.new(0x30510716_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasPattern
    lpVtbl : ICanvasPatternVTbl*
  end

  struct ICanvasTextMetricsVTbl
    query_interface : Proc(ICanvasTextMetrics*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasTextMetrics*, UInt32)
    release : Proc(ICanvasTextMetrics*, UInt32)
    get_type_info_count : Proc(ICanvasTextMetrics*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasTextMetrics*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasTextMetrics*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasTextMetrics*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_width : Proc(ICanvasTextMetrics*, Float32*, HRESULT)
  end

  ICanvasTextMetrics_GUID = "30510718-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasTextMetrics = LibC::GUID.new(0x30510718_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasTextMetrics
    lpVtbl : ICanvasTextMetricsVTbl*
  end

  struct ICanvasImageDataVTbl
    query_interface : Proc(ICanvasImageData*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasImageData*, UInt32)
    release : Proc(ICanvasImageData*, UInt32)
    get_type_info_count : Proc(ICanvasImageData*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasImageData*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasImageData*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasImageData*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_width : Proc(ICanvasImageData*, UInt32*, HRESULT)
    get_height : Proc(ICanvasImageData*, UInt32*, HRESULT)
    get_data : Proc(ICanvasImageData*, VARIANT*, HRESULT)
  end

  ICanvasImageData_GUID = "3051071a-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasImageData = LibC::GUID.new(0x3051071a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasImageData
    lpVtbl : ICanvasImageDataVTbl*
  end

  struct ICanvasPixelArrayVTbl
    query_interface : Proc(ICanvasPixelArray*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasPixelArray*, UInt32)
    release : Proc(ICanvasPixelArray*, UInt32)
    get_type_info_count : Proc(ICanvasPixelArray*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasPixelArray*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasPixelArray*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasPixelArray*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(ICanvasPixelArray*, UInt32*, HRESULT)
  end

  ICanvasPixelArray_GUID = "3051071c-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasPixelArray = LibC::GUID.new(0x3051071c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasPixelArray
    lpVtbl : ICanvasPixelArrayVTbl*
  end

  struct IHTMLCanvasElementVTbl
    query_interface : Proc(IHTMLCanvasElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCanvasElement*, UInt32)
    release : Proc(IHTMLCanvasElement*, UInt32)
    get_type_info_count : Proc(IHTMLCanvasElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLCanvasElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLCanvasElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLCanvasElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_width : Proc(IHTMLCanvasElement*, Int32, HRESULT)
    get_width : Proc(IHTMLCanvasElement*, Int32*, HRESULT)
    put_height : Proc(IHTMLCanvasElement*, Int32, HRESULT)
    get_height : Proc(IHTMLCanvasElement*, Int32*, HRESULT)
    get_context : Proc(IHTMLCanvasElement*, UInt8*, ICanvasRenderingContext2D*, HRESULT)
    to_data_url : Proc(IHTMLCanvasElement*, UInt8*, VARIANT, UInt8**, HRESULT)
  end

  IHTMLCanvasElement_GUID = "305106e4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCanvasElement = LibC::GUID.new(0x305106e4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCanvasElement
    lpVtbl : IHTMLCanvasElementVTbl*
  end

  struct ICanvasRenderingContext2DVTbl
    query_interface : Proc(ICanvasRenderingContext2D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasRenderingContext2D*, UInt32)
    release : Proc(ICanvasRenderingContext2D*, UInt32)
    get_type_info_count : Proc(ICanvasRenderingContext2D*, UInt32*, HRESULT)
    get_type_info : Proc(ICanvasRenderingContext2D*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ICanvasRenderingContext2D*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ICanvasRenderingContext2D*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_canvas : Proc(ICanvasRenderingContext2D*, IHTMLCanvasElement*, HRESULT)
    restore : Proc(ICanvasRenderingContext2D*, HRESULT)
    save : Proc(ICanvasRenderingContext2D*, HRESULT)
    rotate : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    scale : Proc(ICanvasRenderingContext2D*, Float32, Float32, HRESULT)
    set_transform : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, Float32, HRESULT)
    transform : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, Float32, HRESULT)
    translate : Proc(ICanvasRenderingContext2D*, Float32, Float32, HRESULT)
    put_global_alpha : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_global_alpha : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    put_global_composite_operation : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_global_composite_operation : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_fill_style : Proc(ICanvasRenderingContext2D*, VARIANT, HRESULT)
    get_fill_style : Proc(ICanvasRenderingContext2D*, VARIANT*, HRESULT)
    put_stroke_style : Proc(ICanvasRenderingContext2D*, VARIANT, HRESULT)
    get_stroke_style : Proc(ICanvasRenderingContext2D*, VARIANT*, HRESULT)
    create_linear_gradient : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, ICanvasGradient*, HRESULT)
    create_radial_gradient : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, Float32, ICanvasGradient*, HRESULT)
    create_pattern : Proc(ICanvasRenderingContext2D*, IDispatch, VARIANT, ICanvasPattern*, HRESULT)
    put_line_cap : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_line_cap : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_line_join : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_line_join : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_line_width : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_line_width : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    put_miter_limit : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_miter_limit : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    put_shadow_blur : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_shadow_blur : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    put_shadow_color : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_shadow_color : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_shadow_offset_x : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_shadow_offset_x : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    put_shadow_offset_y : Proc(ICanvasRenderingContext2D*, Float32, HRESULT)
    get_shadow_offset_y : Proc(ICanvasRenderingContext2D*, Float32*, HRESULT)
    clear_rect : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, HRESULT)
    fill_rect : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, HRESULT)
    stroke_rect : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, HRESULT)
    arc : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, LibC::BOOL, HRESULT)
    arc_to : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, HRESULT)
    begin_path : Proc(ICanvasRenderingContext2D*, HRESULT)
    bezier_curve_to : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, Float32, Float32, HRESULT)
    clip : Proc(ICanvasRenderingContext2D*, HRESULT)
    close_path : Proc(ICanvasRenderingContext2D*, HRESULT)
    fill : Proc(ICanvasRenderingContext2D*, HRESULT)
    line_to : Proc(ICanvasRenderingContext2D*, Float32, Float32, HRESULT)
    move_to : Proc(ICanvasRenderingContext2D*, Float32, Float32, HRESULT)
    quadratic_curve_to : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, HRESULT)
    rect : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, HRESULT)
    stroke : Proc(ICanvasRenderingContext2D*, HRESULT)
    is_point_in_path : Proc(ICanvasRenderingContext2D*, Float32, Float32, Int16*, HRESULT)
    put_font : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_font : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_text_align : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_text_align : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    put_text_baseline : Proc(ICanvasRenderingContext2D*, UInt8*, HRESULT)
    get_text_baseline : Proc(ICanvasRenderingContext2D*, UInt8**, HRESULT)
    fill_text : Proc(ICanvasRenderingContext2D*, UInt8*, Float32, Float32, VARIANT, HRESULT)
    measure_text : Proc(ICanvasRenderingContext2D*, UInt8*, ICanvasTextMetrics*, HRESULT)
    stroke_text : Proc(ICanvasRenderingContext2D*, UInt8*, Float32, Float32, VARIANT, HRESULT)
    draw_image : Proc(ICanvasRenderingContext2D*, IDispatch, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
    create_image_data : Proc(ICanvasRenderingContext2D*, VARIANT, VARIANT, ICanvasImageData*, HRESULT)
    get_image_data : Proc(ICanvasRenderingContext2D*, Float32, Float32, Float32, Float32, ICanvasImageData*, HRESULT)
    put_image_data : Proc(ICanvasRenderingContext2D*, ICanvasImageData, Float32, Float32, VARIANT, VARIANT, VARIANT, VARIANT, HRESULT)
  end

  ICanvasRenderingContext2D_GUID = "305106ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasRenderingContext2D = LibC::GUID.new(0x305106ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasRenderingContext2D
    lpVtbl : ICanvasRenderingContext2DVTbl*
  end

  struct DispCanvasGradientVTbl
    query_interface : Proc(DispCanvasGradient*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCanvasGradient*, UInt32)
    release : Proc(DispCanvasGradient*, UInt32)
    get_type_info_count : Proc(DispCanvasGradient*, UInt32*, HRESULT)
    get_type_info : Proc(DispCanvasGradient*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCanvasGradient*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCanvasGradient*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCanvasGradient_GUID = "3059008c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCanvasGradient = LibC::GUID.new(0x3059008c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCanvasGradient
    lpVtbl : DispCanvasGradientVTbl*
  end

  struct DispCanvasPatternVTbl
    query_interface : Proc(DispCanvasPattern*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCanvasPattern*, UInt32)
    release : Proc(DispCanvasPattern*, UInt32)
    get_type_info_count : Proc(DispCanvasPattern*, UInt32*, HRESULT)
    get_type_info : Proc(DispCanvasPattern*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCanvasPattern*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCanvasPattern*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCanvasPattern_GUID = "3059008d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCanvasPattern = LibC::GUID.new(0x3059008d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCanvasPattern
    lpVtbl : DispCanvasPatternVTbl*
  end

  struct DispCanvasTextMetricsVTbl
    query_interface : Proc(DispCanvasTextMetrics*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCanvasTextMetrics*, UInt32)
    release : Proc(DispCanvasTextMetrics*, UInt32)
    get_type_info_count : Proc(DispCanvasTextMetrics*, UInt32*, HRESULT)
    get_type_info : Proc(DispCanvasTextMetrics*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCanvasTextMetrics*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCanvasTextMetrics*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCanvasTextMetrics_GUID = "3059008e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCanvasTextMetrics = LibC::GUID.new(0x3059008e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCanvasTextMetrics
    lpVtbl : DispCanvasTextMetricsVTbl*
  end

  struct DispCanvasImageDataVTbl
    query_interface : Proc(DispCanvasImageData*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCanvasImageData*, UInt32)
    release : Proc(DispCanvasImageData*, UInt32)
    get_type_info_count : Proc(DispCanvasImageData*, UInt32*, HRESULT)
    get_type_info : Proc(DispCanvasImageData*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCanvasImageData*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCanvasImageData*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCanvasImageData_GUID = "3059008f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCanvasImageData = LibC::GUID.new(0x3059008f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCanvasImageData
    lpVtbl : DispCanvasImageDataVTbl*
  end

  struct DispCanvasRenderingContext2DVTbl
    query_interface : Proc(DispCanvasRenderingContext2D*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCanvasRenderingContext2D*, UInt32)
    release : Proc(DispCanvasRenderingContext2D*, UInt32)
    get_type_info_count : Proc(DispCanvasRenderingContext2D*, UInt32*, HRESULT)
    get_type_info : Proc(DispCanvasRenderingContext2D*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCanvasRenderingContext2D*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCanvasRenderingContext2D*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCanvasRenderingContext2D_GUID = "30590082-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCanvasRenderingContext2D = LibC::GUID.new(0x30590082_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCanvasRenderingContext2D
    lpVtbl : DispCanvasRenderingContext2DVTbl*
  end

  struct DispHTMLCanvasElementVTbl
    query_interface : Proc(DispHTMLCanvasElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLCanvasElement*, UInt32)
    release : Proc(DispHTMLCanvasElement*, UInt32)
    get_type_info_count : Proc(DispHTMLCanvasElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLCanvasElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLCanvasElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLCanvasElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLCanvasElement_GUID = "3059007b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLCanvasElement = LibC::GUID.new(0x3059007b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLCanvasElement
    lpVtbl : DispHTMLCanvasElementVTbl*
  end

  struct IDOMProgressEventVTbl
    query_interface : Proc(IDOMProgressEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMProgressEvent*, UInt32)
    release : Proc(IDOMProgressEvent*, UInt32)
    get_type_info_count : Proc(IDOMProgressEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMProgressEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMProgressEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMProgressEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length_computable : Proc(IDOMProgressEvent*, Int16*, HRESULT)
    get_loaded : Proc(IDOMProgressEvent*, UInt64*, HRESULT)
    get_total : Proc(IDOMProgressEvent*, UInt64*, HRESULT)
    init_progress_event : Proc(IDOMProgressEvent*, UInt8*, Int16, Int16, Int16, UInt64, UInt64, HRESULT)
  end

  IDOMProgressEvent_GUID = "3051071e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMProgressEvent = LibC::GUID.new(0x3051071e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMProgressEvent
    lpVtbl : IDOMProgressEventVTbl*
  end

  struct DispDOMProgressEventVTbl
    query_interface : Proc(DispDOMProgressEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMProgressEvent*, UInt32)
    release : Proc(DispDOMProgressEvent*, UInt32)
    get_type_info_count : Proc(DispDOMProgressEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMProgressEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMProgressEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMProgressEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMProgressEvent_GUID = "30590091-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMProgressEvent = LibC::GUID.new(0x30590091_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMProgressEvent
    lpVtbl : DispDOMProgressEventVTbl*
  end

  struct IDOMMessageEventVTbl
    query_interface : Proc(IDOMMessageEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMessageEvent*, UInt32)
    release : Proc(IDOMMessageEvent*, UInt32)
    get_type_info_count : Proc(IDOMMessageEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMessageEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMessageEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMessageEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_data : Proc(IDOMMessageEvent*, UInt8**, HRESULT)
    get_origin : Proc(IDOMMessageEvent*, UInt8**, HRESULT)
    get_source : Proc(IDOMMessageEvent*, IHTMLWindow2*, HRESULT)
    init_message_event : Proc(IDOMMessageEvent*, UInt8*, Int16, Int16, UInt8*, UInt8*, UInt8*, IHTMLWindow2, HRESULT)
  end

  IDOMMessageEvent_GUID = "30510720-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMessageEvent = LibC::GUID.new(0x30510720_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMessageEvent
    lpVtbl : IDOMMessageEventVTbl*
  end

  struct DispDOMMessageEventVTbl
    query_interface : Proc(DispDOMMessageEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMessageEvent*, UInt32)
    release : Proc(DispDOMMessageEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMessageEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMessageEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMessageEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMessageEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMessageEvent_GUID = "30590092-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMessageEvent = LibC::GUID.new(0x30590092_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMessageEvent
    lpVtbl : DispDOMMessageEventVTbl*
  end

  struct IDOMSiteModeEventVTbl
    query_interface : Proc(IDOMSiteModeEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMSiteModeEvent*, UInt32)
    release : Proc(IDOMSiteModeEvent*, UInt32)
    get_type_info_count : Proc(IDOMSiteModeEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMSiteModeEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMSiteModeEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMSiteModeEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_button_id : Proc(IDOMSiteModeEvent*, Int32*, HRESULT)
    get_action_url : Proc(IDOMSiteModeEvent*, UInt8**, HRESULT)
  end

  IDOMSiteModeEvent_GUID = "30510765-98b6-11cf-bb82-00aa00bdce0b"
  IID_IDOMSiteModeEvent = LibC::GUID.new(0x30510765_u32, 0x98b6_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMSiteModeEvent
    lpVtbl : IDOMSiteModeEventVTbl*
  end

  struct DispDOMSiteModeEventVTbl
    query_interface : Proc(DispDOMSiteModeEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMSiteModeEvent*, UInt32)
    release : Proc(DispDOMSiteModeEvent*, UInt32)
    get_type_info_count : Proc(DispDOMSiteModeEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMSiteModeEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMSiteModeEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMSiteModeEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMSiteModeEvent_GUID = "305900a9-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMSiteModeEvent = LibC::GUID.new(0x305900a9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMSiteModeEvent
    lpVtbl : DispDOMSiteModeEventVTbl*
  end

  struct IDOMStorageEventVTbl
    query_interface : Proc(IDOMStorageEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMStorageEvent*, UInt32)
    release : Proc(IDOMStorageEvent*, UInt32)
    get_type_info_count : Proc(IDOMStorageEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMStorageEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMStorageEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMStorageEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_key : Proc(IDOMStorageEvent*, UInt8**, HRESULT)
    get_old_value : Proc(IDOMStorageEvent*, UInt8**, HRESULT)
    get_new_value : Proc(IDOMStorageEvent*, UInt8**, HRESULT)
    get_url : Proc(IDOMStorageEvent*, UInt8**, HRESULT)
    get_storage_area : Proc(IDOMStorageEvent*, IHTMLStorage*, HRESULT)
    init_storage_event : Proc(IDOMStorageEvent*, UInt8*, Int16, Int16, UInt8*, UInt8*, UInt8*, UInt8*, IHTMLStorage, HRESULT)
  end

  IDOMStorageEvent_GUID = "30510722-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMStorageEvent = LibC::GUID.new(0x30510722_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMStorageEvent
    lpVtbl : IDOMStorageEventVTbl*
  end

  struct DispDOMStorageEventVTbl
    query_interface : Proc(DispDOMStorageEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMStorageEvent*, UInt32)
    release : Proc(DispDOMStorageEvent*, UInt32)
    get_type_info_count : Proc(DispDOMStorageEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMStorageEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMStorageEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMStorageEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMStorageEvent_GUID = "30590093-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMStorageEvent = LibC::GUID.new(0x30590093_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMStorageEvent
    lpVtbl : DispDOMStorageEventVTbl*
  end

  struct IXMLHttpRequestEventTargetVTbl
    query_interface : Proc(IXMLHttpRequestEventTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXMLHttpRequestEventTarget*, UInt32)
    release : Proc(IXMLHttpRequestEventTarget*, UInt32)
    get_type_info_count : Proc(IXMLHttpRequestEventTarget*, UInt32*, HRESULT)
    get_type_info : Proc(IXMLHttpRequestEventTarget*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IXMLHttpRequestEventTarget*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IXMLHttpRequestEventTarget*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IXMLHttpRequestEventTarget_GUID = "30510830-98b5-11cf-bb82-00aa00bdce0b"
  IID_IXMLHttpRequestEventTarget = LibC::GUID.new(0x30510830_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IXMLHttpRequestEventTarget
    lpVtbl : IXMLHttpRequestEventTargetVTbl*
  end

  struct DispXMLHttpRequestEventTargetVTbl
    query_interface : Proc(DispXMLHttpRequestEventTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispXMLHttpRequestEventTarget*, UInt32)
    release : Proc(DispXMLHttpRequestEventTarget*, UInt32)
    get_type_info_count : Proc(DispXMLHttpRequestEventTarget*, UInt32*, HRESULT)
    get_type_info : Proc(DispXMLHttpRequestEventTarget*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispXMLHttpRequestEventTarget*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispXMLHttpRequestEventTarget*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispXMLHttpRequestEventTarget_GUID = "305900e7-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispXMLHttpRequestEventTarget = LibC::GUID.new(0x305900e7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispXMLHttpRequestEventTarget
    lpVtbl : DispXMLHttpRequestEventTargetVTbl*
  end

  struct HTMLXMLHttpRequestEventsVTbl
    query_interface : Proc(HTMLXMLHttpRequestEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLXMLHttpRequestEvents*, UInt32)
    release : Proc(HTMLXMLHttpRequestEvents*, UInt32)
    get_type_info_count : Proc(HTMLXMLHttpRequestEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLXMLHttpRequestEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLXMLHttpRequestEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLXMLHttpRequestEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLXMLHttpRequestEvents_GUID = "30510498-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLXMLHttpRequestEvents = LibC::GUID.new(0x30510498_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLXMLHttpRequestEvents
    lpVtbl : HTMLXMLHttpRequestEventsVTbl*
  end

  struct IHTMLXMLHttpRequestVTbl
    query_interface : Proc(IHTMLXMLHttpRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLXMLHttpRequest*, UInt32)
    release : Proc(IHTMLXMLHttpRequest*, UInt32)
    get_type_info_count : Proc(IHTMLXMLHttpRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLXMLHttpRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLXMLHttpRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLXMLHttpRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ready_state : Proc(IHTMLXMLHttpRequest*, Int32*, HRESULT)
    get_response_body : Proc(IHTMLXMLHttpRequest*, VARIANT*, HRESULT)
    get_response_text : Proc(IHTMLXMLHttpRequest*, UInt8**, HRESULT)
    get_response_xml : Proc(IHTMLXMLHttpRequest*, IDispatch*, HRESULT)
    get_status : Proc(IHTMLXMLHttpRequest*, Int32*, HRESULT)
    get_status_text : Proc(IHTMLXMLHttpRequest*, UInt8**, HRESULT)
    put_onreadystatechange : Proc(IHTMLXMLHttpRequest*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLXMLHttpRequest*, VARIANT*, HRESULT)
    abort : Proc(IHTMLXMLHttpRequest*, HRESULT)
    open : Proc(IHTMLXMLHttpRequest*, UInt8*, UInt8*, VARIANT, VARIANT, VARIANT, HRESULT)
    send : Proc(IHTMLXMLHttpRequest*, VARIANT, HRESULT)
    get_all_response_headers : Proc(IHTMLXMLHttpRequest*, UInt8**, HRESULT)
    get_response_header : Proc(IHTMLXMLHttpRequest*, UInt8*, UInt8**, HRESULT)
    set_request_header : Proc(IHTMLXMLHttpRequest*, UInt8*, UInt8*, HRESULT)
  end

  IHTMLXMLHttpRequest_GUID = "3051040a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLXMLHttpRequest = LibC::GUID.new(0x3051040a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLXMLHttpRequest
    lpVtbl : IHTMLXMLHttpRequestVTbl*
  end

  struct IHTMLXMLHttpRequest2VTbl
    query_interface : Proc(IHTMLXMLHttpRequest2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLXMLHttpRequest2*, UInt32)
    release : Proc(IHTMLXMLHttpRequest2*, UInt32)
    get_type_info_count : Proc(IHTMLXMLHttpRequest2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLXMLHttpRequest2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLXMLHttpRequest2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLXMLHttpRequest2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_timeout : Proc(IHTMLXMLHttpRequest2*, Int32, HRESULT)
    get_timeout : Proc(IHTMLXMLHttpRequest2*, Int32*, HRESULT)
    put_ontimeout : Proc(IHTMLXMLHttpRequest2*, VARIANT, HRESULT)
    get_ontimeout : Proc(IHTMLXMLHttpRequest2*, VARIANT*, HRESULT)
  end

  IHTMLXMLHttpRequest2_GUID = "30510482-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLXMLHttpRequest2 = LibC::GUID.new(0x30510482_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLXMLHttpRequest2
    lpVtbl : IHTMLXMLHttpRequest2VTbl*
  end

  struct IHTMLXMLHttpRequestFactoryVTbl
    query_interface : Proc(IHTMLXMLHttpRequestFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLXMLHttpRequestFactory*, UInt32)
    release : Proc(IHTMLXMLHttpRequestFactory*, UInt32)
    get_type_info_count : Proc(IHTMLXMLHttpRequestFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLXMLHttpRequestFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLXMLHttpRequestFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLXMLHttpRequestFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IHTMLXMLHttpRequestFactory*, IHTMLXMLHttpRequest*, HRESULT)
  end

  IHTMLXMLHttpRequestFactory_GUID = "3051040c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLXMLHttpRequestFactory = LibC::GUID.new(0x3051040c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLXMLHttpRequestFactory
    lpVtbl : IHTMLXMLHttpRequestFactoryVTbl*
  end

  struct DispHTMLXMLHttpRequestVTbl
    query_interface : Proc(DispHTMLXMLHttpRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLXMLHttpRequest*, UInt32)
    release : Proc(DispHTMLXMLHttpRequest*, UInt32)
    get_type_info_count : Proc(DispHTMLXMLHttpRequest*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLXMLHttpRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLXMLHttpRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLXMLHttpRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLXMLHttpRequest_GUID = "3050f596-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLXMLHttpRequest = LibC::GUID.new(0x3050f596_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLXMLHttpRequest
    lpVtbl : DispHTMLXMLHttpRequestVTbl*
  end

  struct ISVGAngleVTbl
    query_interface : Proc(ISVGAngle*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAngle*, UInt32)
    release : Proc(ISVGAngle*, UInt32)
    get_type_info_count : Proc(ISVGAngle*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAngle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAngle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAngle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_unit_type : Proc(ISVGAngle*, Int16, HRESULT)
    get_unit_type : Proc(ISVGAngle*, Int16*, HRESULT)
    put_value : Proc(ISVGAngle*, Float32, HRESULT)
    get_value : Proc(ISVGAngle*, Float32*, HRESULT)
    put_value_in_specified_units : Proc(ISVGAngle*, Float32, HRESULT)
    get_value_in_specified_units : Proc(ISVGAngle*, Float32*, HRESULT)
    put_value_as_string : Proc(ISVGAngle*, UInt8*, HRESULT)
    get_value_as_string : Proc(ISVGAngle*, UInt8**, HRESULT)
    new_value_specified_units : Proc(ISVGAngle*, Int16, Float32, HRESULT)
    convert_to_specified_units : Proc(ISVGAngle*, Int16, HRESULT)
  end

  ISVGAngle_GUID = "305104d3-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAngle = LibC::GUID.new(0x305104d3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAngle
    lpVtbl : ISVGAngleVTbl*
  end

  struct ISVGElementVTbl
    query_interface : Proc(ISVGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGElement*, UInt32)
    release : Proc(ISVGElement*, UInt32)
    get_type_info_count : Proc(ISVGElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_xmlbase : Proc(ISVGElement*, UInt8*, HRESULT)
    get_xmlbase : Proc(ISVGElement*, UInt8**, HRESULT)
    putref_owner_svg_element : Proc(ISVGElement*, ISVGSVGElement, HRESULT)
    get_owner_svg_element : Proc(ISVGElement*, ISVGSVGElement*, HRESULT)
    putref_viewport_element : Proc(ISVGElement*, ISVGElement, HRESULT)
    get_viewport_element : Proc(ISVGElement*, ISVGElement*, HRESULT)
    putref_focusable : Proc(ISVGElement*, ISVGAnimatedEnumeration, HRESULT)
    get_focusable : Proc(ISVGElement*, ISVGAnimatedEnumeration*, HRESULT)
  end

  ISVGElement_GUID = "305104c5-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGElement = LibC::GUID.new(0x305104c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGElement
    lpVtbl : ISVGElementVTbl*
  end

  struct ISVGRectVTbl
    query_interface : Proc(ISVGRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGRect*, UInt32)
    release : Proc(ISVGRect*, UInt32)
    get_type_info_count : Proc(ISVGRect*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGRect*, Float32, HRESULT)
    get_x : Proc(ISVGRect*, Float32*, HRESULT)
    put_y : Proc(ISVGRect*, Float32, HRESULT)
    get_y : Proc(ISVGRect*, Float32*, HRESULT)
    put_width : Proc(ISVGRect*, Float32, HRESULT)
    get_width : Proc(ISVGRect*, Float32*, HRESULT)
    put_height : Proc(ISVGRect*, Float32, HRESULT)
    get_height : Proc(ISVGRect*, Float32*, HRESULT)
  end

  ISVGRect_GUID = "305104d7-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGRect = LibC::GUID.new(0x305104d7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGRect
    lpVtbl : ISVGRectVTbl*
  end

  struct ISVGMatrixVTbl
    query_interface : Proc(ISVGMatrix*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGMatrix*, UInt32)
    release : Proc(ISVGMatrix*, UInt32)
    get_type_info_count : Proc(ISVGMatrix*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGMatrix*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGMatrix*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGMatrix*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_a : Proc(ISVGMatrix*, Float32, HRESULT)
    get_a : Proc(ISVGMatrix*, Float32*, HRESULT)
    put_b : Proc(ISVGMatrix*, Float32, HRESULT)
    get_b : Proc(ISVGMatrix*, Float32*, HRESULT)
    put_c : Proc(ISVGMatrix*, Float32, HRESULT)
    get_c : Proc(ISVGMatrix*, Float32*, HRESULT)
    put_d : Proc(ISVGMatrix*, Float32, HRESULT)
    get_d : Proc(ISVGMatrix*, Float32*, HRESULT)
    put_e : Proc(ISVGMatrix*, Float32, HRESULT)
    get_e : Proc(ISVGMatrix*, Float32*, HRESULT)
    put_f : Proc(ISVGMatrix*, Float32, HRESULT)
    get_f : Proc(ISVGMatrix*, Float32*, HRESULT)
    multiply : Proc(ISVGMatrix*, ISVGMatrix, ISVGMatrix*, HRESULT)
    inverse : Proc(ISVGMatrix*, ISVGMatrix*, HRESULT)
    translate : Proc(ISVGMatrix*, Float32, Float32, ISVGMatrix*, HRESULT)
    scale : Proc(ISVGMatrix*, Float32, ISVGMatrix*, HRESULT)
    scale_non_uniform : Proc(ISVGMatrix*, Float32, Float32, ISVGMatrix*, HRESULT)
    rotate : Proc(ISVGMatrix*, Float32, ISVGMatrix*, HRESULT)
    rotate_from_vector : Proc(ISVGMatrix*, Float32, Float32, ISVGMatrix*, HRESULT)
    flip_x : Proc(ISVGMatrix*, ISVGMatrix*, HRESULT)
    flip_y : Proc(ISVGMatrix*, ISVGMatrix*, HRESULT)
    skew_x : Proc(ISVGMatrix*, Float32, ISVGMatrix*, HRESULT)
    skew_y : Proc(ISVGMatrix*, Float32, ISVGMatrix*, HRESULT)
  end

  ISVGMatrix_GUID = "305104f6-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGMatrix = LibC::GUID.new(0x305104f6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGMatrix
    lpVtbl : ISVGMatrixVTbl*
  end

  struct ISVGStringListVTbl
    query_interface : Proc(ISVGStringList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGStringList*, UInt32)
    release : Proc(ISVGStringList*, UInt32)
    get_type_info_count : Proc(ISVGStringList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGStringList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGStringList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGStringList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGStringList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGStringList*, Int32*, HRESULT)
    clear : Proc(ISVGStringList*, HRESULT)
    initialize : Proc(ISVGStringList*, UInt8*, UInt8**, HRESULT)
    get_item : Proc(ISVGStringList*, Int32, UInt8**, HRESULT)
    insert_item_before : Proc(ISVGStringList*, UInt8*, Int32, UInt8**, HRESULT)
    replace_item : Proc(ISVGStringList*, UInt8*, Int32, UInt8**, HRESULT)
    remove_item : Proc(ISVGStringList*, Int32, UInt8**, HRESULT)
    append_item : Proc(ISVGStringList*, UInt8*, UInt8**, HRESULT)
  end

  ISVGStringList_GUID = "305104c8-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGStringList = LibC::GUID.new(0x305104c8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGStringList
    lpVtbl : ISVGStringListVTbl*
  end

  struct ISVGAnimatedRectVTbl
    query_interface : Proc(ISVGAnimatedRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedRect*, UInt32)
    release : Proc(ISVGAnimatedRect*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedRect*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedRect*, ISVGRect, HRESULT)
    get_base_val : Proc(ISVGAnimatedRect*, ISVGRect*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedRect*, ISVGRect, HRESULT)
    get_anim_val : Proc(ISVGAnimatedRect*, ISVGRect*, HRESULT)
  end

  ISVGAnimatedRect_GUID = "305104d8-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedRect = LibC::GUID.new(0x305104d8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedRect
    lpVtbl : ISVGAnimatedRectVTbl*
  end

  struct ISVGAnimatedStringVTbl
    query_interface : Proc(ISVGAnimatedString*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedString*, UInt32)
    release : Proc(ISVGAnimatedString*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedString*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedString*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedString*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedString*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_base_val : Proc(ISVGAnimatedString*, UInt8*, HRESULT)
    get_base_val : Proc(ISVGAnimatedString*, UInt8**, HRESULT)
    get_anim_val : Proc(ISVGAnimatedString*, UInt8**, HRESULT)
  end

  ISVGAnimatedString_GUID = "305104c7-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedString = LibC::GUID.new(0x305104c7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedString
    lpVtbl : ISVGAnimatedStringVTbl*
  end

  struct ISVGAnimatedBooleanVTbl
    query_interface : Proc(ISVGAnimatedBoolean*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedBoolean*, UInt32)
    release : Proc(ISVGAnimatedBoolean*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedBoolean*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedBoolean*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedBoolean*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedBoolean*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_base_val : Proc(ISVGAnimatedBoolean*, Int16, HRESULT)
    get_base_val : Proc(ISVGAnimatedBoolean*, Int16*, HRESULT)
    put_anim_val : Proc(ISVGAnimatedBoolean*, Int16, HRESULT)
    get_anim_val : Proc(ISVGAnimatedBoolean*, Int16*, HRESULT)
  end

  ISVGAnimatedBoolean_GUID = "305104c6-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedBoolean = LibC::GUID.new(0x305104c6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedBoolean
    lpVtbl : ISVGAnimatedBooleanVTbl*
  end

  struct ISVGAnimatedTransformListVTbl
    query_interface : Proc(ISVGAnimatedTransformList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedTransformList*, UInt32)
    release : Proc(ISVGAnimatedTransformList*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedTransformList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedTransformList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedTransformList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedTransformList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedTransformList*, ISVGTransformList, HRESULT)
    get_base_val : Proc(ISVGAnimatedTransformList*, ISVGTransformList*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedTransformList*, ISVGTransformList, HRESULT)
    get_anim_val : Proc(ISVGAnimatedTransformList*, ISVGTransformList*, HRESULT)
  end

  ISVGAnimatedTransformList_GUID = "305104f9-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedTransformList = LibC::GUID.new(0x305104f9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedTransformList
    lpVtbl : ISVGAnimatedTransformListVTbl*
  end

  struct ISVGAnimatedPreserveAspectRatioVTbl
    query_interface : Proc(ISVGAnimatedPreserveAspectRatio*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedPreserveAspectRatio*, UInt32)
    release : Proc(ISVGAnimatedPreserveAspectRatio*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedPreserveAspectRatio*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedPreserveAspectRatio*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedPreserveAspectRatio*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedPreserveAspectRatio*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedPreserveAspectRatio*, ISVGPreserveAspectRatio, HRESULT)
    get_base_val : Proc(ISVGAnimatedPreserveAspectRatio*, ISVGPreserveAspectRatio*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedPreserveAspectRatio*, ISVGPreserveAspectRatio, HRESULT)
    get_anim_val : Proc(ISVGAnimatedPreserveAspectRatio*, ISVGPreserveAspectRatio*, HRESULT)
  end

  ISVGAnimatedPreserveAspectRatio_GUID = "305104fb-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedPreserveAspectRatio = LibC::GUID.new(0x305104fb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedPreserveAspectRatio
    lpVtbl : ISVGAnimatedPreserveAspectRatioVTbl*
  end

  struct ISVGStylableVTbl
    query_interface : Proc(ISVGStylable*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGStylable*, UInt32)
    release : Proc(ISVGStylable*, UInt32)
    get_type_info_count : Proc(ISVGStylable*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGStylable*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGStylable*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGStylable*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_class_name : Proc(ISVGStylable*, ISVGAnimatedString*, HRESULT)
  end

  ISVGStylable_GUID = "305104da-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGStylable = LibC::GUID.new(0x305104da_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGStylable
    lpVtbl : ISVGStylableVTbl*
  end

  struct ISVGLocatableVTbl
    query_interface : Proc(ISVGLocatable*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLocatable*, UInt32)
    release : Proc(ISVGLocatable*, UInt32)
    get_type_info_count : Proc(ISVGLocatable*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLocatable*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLocatable*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLocatable*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_nearest_viewport_element : Proc(ISVGLocatable*, ISVGElement*, HRESULT)
    get_farthest_viewport_element : Proc(ISVGLocatable*, ISVGElement*, HRESULT)
    get_b_box : Proc(ISVGLocatable*, ISVGRect*, HRESULT)
    get_ctm : Proc(ISVGLocatable*, ISVGMatrix*, HRESULT)
    get_screen_ctm : Proc(ISVGLocatable*, ISVGMatrix*, HRESULT)
    get_transform_to_element : Proc(ISVGLocatable*, ISVGElement, ISVGMatrix*, HRESULT)
  end

  ISVGLocatable_GUID = "305104db-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLocatable = LibC::GUID.new(0x305104db_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLocatable
    lpVtbl : ISVGLocatableVTbl*
  end

  struct ISVGTransformableVTbl
    query_interface : Proc(ISVGTransformable*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTransformable*, UInt32)
    release : Proc(ISVGTransformable*, UInt32)
    get_type_info_count : Proc(ISVGTransformable*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTransformable*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTransformable*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTransformable*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_transform : Proc(ISVGTransformable*, ISVGAnimatedTransformList*, HRESULT)
  end

  ISVGTransformable_GUID = "305104dc-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTransformable = LibC::GUID.new(0x305104dc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTransformable
    lpVtbl : ISVGTransformableVTbl*
  end

  struct ISVGTestsVTbl
    query_interface : Proc(ISVGTests*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTests*, UInt32)
    release : Proc(ISVGTests*, UInt32)
    get_type_info_count : Proc(ISVGTests*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTests*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTests*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTests*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_required_features : Proc(ISVGTests*, ISVGStringList*, HRESULT)
    get_required_extensions : Proc(ISVGTests*, ISVGStringList*, HRESULT)
    get_system_language : Proc(ISVGTests*, ISVGStringList*, HRESULT)
    has_extension : Proc(ISVGTests*, UInt8*, Int16*, HRESULT)
  end

  ISVGTests_GUID = "305104dd-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTests = LibC::GUID.new(0x305104dd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTests
    lpVtbl : ISVGTestsVTbl*
  end

  struct ISVGLangSpaceVTbl
    query_interface : Proc(ISVGLangSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLangSpace*, UInt32)
    release : Proc(ISVGLangSpace*, UInt32)
    get_type_info_count : Proc(ISVGLangSpace*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLangSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLangSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLangSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_xmllang : Proc(ISVGLangSpace*, UInt8*, HRESULT)
    get_xmllang : Proc(ISVGLangSpace*, UInt8**, HRESULT)
    put_xmlspace : Proc(ISVGLangSpace*, UInt8*, HRESULT)
    get_xmlspace : Proc(ISVGLangSpace*, UInt8**, HRESULT)
  end

  ISVGLangSpace_GUID = "305104de-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLangSpace = LibC::GUID.new(0x305104de_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLangSpace
    lpVtbl : ISVGLangSpaceVTbl*
  end

  struct ISVGExternalResourcesRequiredVTbl
    query_interface : Proc(ISVGExternalResourcesRequired*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGExternalResourcesRequired*, UInt32)
    release : Proc(ISVGExternalResourcesRequired*, UInt32)
    get_type_info_count : Proc(ISVGExternalResourcesRequired*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGExternalResourcesRequired*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGExternalResourcesRequired*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGExternalResourcesRequired*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_external_resources_required : Proc(ISVGExternalResourcesRequired*, ISVGAnimatedBoolean*, HRESULT)
  end

  ISVGExternalResourcesRequired_GUID = "305104df-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGExternalResourcesRequired = LibC::GUID.new(0x305104df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGExternalResourcesRequired
    lpVtbl : ISVGExternalResourcesRequiredVTbl*
  end

  struct ISVGFitToViewBoxVTbl
    query_interface : Proc(ISVGFitToViewBox*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGFitToViewBox*, UInt32)
    release : Proc(ISVGFitToViewBox*, UInt32)
    get_type_info_count : Proc(ISVGFitToViewBox*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGFitToViewBox*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGFitToViewBox*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGFitToViewBox*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_view_box : Proc(ISVGFitToViewBox*, ISVGAnimatedRect*, HRESULT)
    putref_preserve_aspect_ratio : Proc(ISVGFitToViewBox*, ISVGAnimatedPreserveAspectRatio, HRESULT)
    get_preserve_aspect_ratio : Proc(ISVGFitToViewBox*, ISVGAnimatedPreserveAspectRatio*, HRESULT)
  end

  ISVGFitToViewBox_GUID = "305104e0-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGFitToViewBox = LibC::GUID.new(0x305104e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGFitToViewBox
    lpVtbl : ISVGFitToViewBoxVTbl*
  end

  struct ISVGZoomAndPanVTbl
    query_interface : Proc(ISVGZoomAndPan*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGZoomAndPan*, UInt32)
    release : Proc(ISVGZoomAndPan*, UInt32)
    get_type_info_count : Proc(ISVGZoomAndPan*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGZoomAndPan*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGZoomAndPan*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGZoomAndPan*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_zoom_and_pan : Proc(ISVGZoomAndPan*, Int16*, HRESULT)
  end

  ISVGZoomAndPan_GUID = "305104e1-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGZoomAndPan = LibC::GUID.new(0x305104e1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGZoomAndPan
    lpVtbl : ISVGZoomAndPanVTbl*
  end

  struct ISVGURIReferenceVTbl
    query_interface : Proc(ISVGURIReference*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGURIReference*, UInt32)
    release : Proc(ISVGURIReference*, UInt32)
    get_type_info_count : Proc(ISVGURIReference*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGURIReference*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGURIReference*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGURIReference*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_href : Proc(ISVGURIReference*, ISVGAnimatedString*, HRESULT)
  end

  ISVGURIReference_GUID = "305104e3-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGURIReference = LibC::GUID.new(0x305104e3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGURIReference
    lpVtbl : ISVGURIReferenceVTbl*
  end

  struct ISVGAnimatedAngleVTbl
    query_interface : Proc(ISVGAnimatedAngle*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedAngle*, UInt32)
    release : Proc(ISVGAnimatedAngle*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedAngle*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedAngle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedAngle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedAngle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedAngle*, ISVGAngle, HRESULT)
    get_base_val : Proc(ISVGAnimatedAngle*, ISVGAngle*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedAngle*, ISVGAngle, HRESULT)
    get_anim_val : Proc(ISVGAnimatedAngle*, ISVGAngle*, HRESULT)
  end

  ISVGAnimatedAngle_GUID = "305104d4-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedAngle = LibC::GUID.new(0x305104d4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedAngle
    lpVtbl : ISVGAnimatedAngleVTbl*
  end

  struct ISVGTransformListVTbl
    query_interface : Proc(ISVGTransformList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTransformList*, UInt32)
    release : Proc(ISVGTransformList*, UInt32)
    get_type_info_count : Proc(ISVGTransformList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTransformList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTransformList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTransformList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGTransformList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGTransformList*, Int32*, HRESULT)
    clear : Proc(ISVGTransformList*, HRESULT)
    initialize : Proc(ISVGTransformList*, ISVGTransform, ISVGTransform*, HRESULT)
    get_item : Proc(ISVGTransformList*, Int32, ISVGTransform*, HRESULT)
    insert_item_before : Proc(ISVGTransformList*, ISVGTransform, Int32, ISVGTransform*, HRESULT)
    replace_item : Proc(ISVGTransformList*, ISVGTransform, Int32, ISVGTransform*, HRESULT)
    remove_item : Proc(ISVGTransformList*, Int32, ISVGTransform*, HRESULT)
    append_item : Proc(ISVGTransformList*, ISVGTransform, ISVGTransform*, HRESULT)
    create_svg_transform_from_matrix : Proc(ISVGTransformList*, ISVGMatrix, ISVGTransform*, HRESULT)
    consolidate : Proc(ISVGTransformList*, ISVGTransform*, HRESULT)
  end

  ISVGTransformList_GUID = "305104f8-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTransformList = LibC::GUID.new(0x305104f8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTransformList
    lpVtbl : ISVGTransformListVTbl*
  end

  struct ISVGAnimatedEnumerationVTbl
    query_interface : Proc(ISVGAnimatedEnumeration*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedEnumeration*, UInt32)
    release : Proc(ISVGAnimatedEnumeration*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedEnumeration*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedEnumeration*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedEnumeration*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedEnumeration*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_base_val : Proc(ISVGAnimatedEnumeration*, UInt16, HRESULT)
    get_base_val : Proc(ISVGAnimatedEnumeration*, UInt16*, HRESULT)
    put_anim_val : Proc(ISVGAnimatedEnumeration*, UInt16, HRESULT)
    get_anim_val : Proc(ISVGAnimatedEnumeration*, UInt16*, HRESULT)
  end

  ISVGAnimatedEnumeration_GUID = "305104c9-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedEnumeration = LibC::GUID.new(0x305104c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedEnumeration
    lpVtbl : ISVGAnimatedEnumerationVTbl*
  end

  struct ISVGAnimatedIntegerVTbl
    query_interface : Proc(ISVGAnimatedInteger*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedInteger*, UInt32)
    release : Proc(ISVGAnimatedInteger*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedInteger*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedInteger*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedInteger*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedInteger*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_base_val : Proc(ISVGAnimatedInteger*, Int32, HRESULT)
    get_base_val : Proc(ISVGAnimatedInteger*, Int32*, HRESULT)
    put_anim_val : Proc(ISVGAnimatedInteger*, Int32, HRESULT)
    get_anim_val : Proc(ISVGAnimatedInteger*, Int32*, HRESULT)
  end

  ISVGAnimatedInteger_GUID = "305104ca-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedInteger = LibC::GUID.new(0x305104ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedInteger
    lpVtbl : ISVGAnimatedIntegerVTbl*
  end

  struct ISVGLengthVTbl
    query_interface : Proc(ISVGLength*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLength*, UInt32)
    release : Proc(ISVGLength*, UInt32)
    get_type_info_count : Proc(ISVGLength*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLength*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLength*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLength*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_unit_type : Proc(ISVGLength*, Int16, HRESULT)
    get_unit_type : Proc(ISVGLength*, Int16*, HRESULT)
    put_value : Proc(ISVGLength*, Float32, HRESULT)
    get_value : Proc(ISVGLength*, Float32*, HRESULT)
    put_value_in_specified_units : Proc(ISVGLength*, Float32, HRESULT)
    get_value_in_specified_units : Proc(ISVGLength*, Float32*, HRESULT)
    put_value_as_string : Proc(ISVGLength*, UInt8*, HRESULT)
    get_value_as_string : Proc(ISVGLength*, UInt8**, HRESULT)
    new_value_specified_units : Proc(ISVGLength*, Int16, Float32, HRESULT)
    convert_to_specified_units : Proc(ISVGLength*, Int16, HRESULT)
  end

  ISVGLength_GUID = "305104cf-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLength = LibC::GUID.new(0x305104cf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLength
    lpVtbl : ISVGLengthVTbl*
  end

  struct ISVGAnimatedLengthVTbl
    query_interface : Proc(ISVGAnimatedLength*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedLength*, UInt32)
    release : Proc(ISVGAnimatedLength*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedLength*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedLength*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedLength*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedLength*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedLength*, ISVGLength, HRESULT)
    get_base_val : Proc(ISVGAnimatedLength*, ISVGLength*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedLength*, ISVGLength, HRESULT)
    get_anim_val : Proc(ISVGAnimatedLength*, ISVGLength*, HRESULT)
  end

  ISVGAnimatedLength_GUID = "305104d0-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedLength = LibC::GUID.new(0x305104d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedLength
    lpVtbl : ISVGAnimatedLengthVTbl*
  end

  struct ISVGLengthListVTbl
    query_interface : Proc(ISVGLengthList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLengthList*, UInt32)
    release : Proc(ISVGLengthList*, UInt32)
    get_type_info_count : Proc(ISVGLengthList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLengthList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLengthList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLengthList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGLengthList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGLengthList*, Int32*, HRESULT)
    clear : Proc(ISVGLengthList*, HRESULT)
    initialize : Proc(ISVGLengthList*, ISVGLength, ISVGLength*, HRESULT)
    get_item : Proc(ISVGLengthList*, Int32, ISVGLength*, HRESULT)
    insert_item_before : Proc(ISVGLengthList*, ISVGLength, Int32, ISVGLength*, HRESULT)
    replace_item : Proc(ISVGLengthList*, ISVGLength, Int32, ISVGLength*, HRESULT)
    remove_item : Proc(ISVGLengthList*, Int32, ISVGLength*, HRESULT)
    append_item : Proc(ISVGLengthList*, ISVGLength, ISVGLength*, HRESULT)
  end

  ISVGLengthList_GUID = "305104d1-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLengthList = LibC::GUID.new(0x305104d1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLengthList
    lpVtbl : ISVGLengthListVTbl*
  end

  struct ISVGAnimatedLengthListVTbl
    query_interface : Proc(ISVGAnimatedLengthList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedLengthList*, UInt32)
    release : Proc(ISVGAnimatedLengthList*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedLengthList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedLengthList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedLengthList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedLengthList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedLengthList*, ISVGLengthList, HRESULT)
    get_base_val : Proc(ISVGAnimatedLengthList*, ISVGLengthList*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedLengthList*, ISVGLengthList, HRESULT)
    get_anim_val : Proc(ISVGAnimatedLengthList*, ISVGLengthList*, HRESULT)
  end

  ISVGAnimatedLengthList_GUID = "305104d2-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedLengthList = LibC::GUID.new(0x305104d2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedLengthList
    lpVtbl : ISVGAnimatedLengthListVTbl*
  end

  struct ISVGNumberVTbl
    query_interface : Proc(ISVGNumber*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGNumber*, UInt32)
    release : Proc(ISVGNumber*, UInt32)
    get_type_info_count : Proc(ISVGNumber*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGNumber*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGNumber*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGNumber*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_value : Proc(ISVGNumber*, Float32, HRESULT)
    get_value : Proc(ISVGNumber*, Float32*, HRESULT)
  end

  ISVGNumber_GUID = "305104cb-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGNumber = LibC::GUID.new(0x305104cb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGNumber
    lpVtbl : ISVGNumberVTbl*
  end

  struct ISVGAnimatedNumberVTbl
    query_interface : Proc(ISVGAnimatedNumber*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedNumber*, UInt32)
    release : Proc(ISVGAnimatedNumber*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedNumber*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedNumber*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedNumber*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedNumber*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_base_val : Proc(ISVGAnimatedNumber*, Float32, HRESULT)
    get_base_val : Proc(ISVGAnimatedNumber*, Float32*, HRESULT)
    put_anim_val : Proc(ISVGAnimatedNumber*, Float32, HRESULT)
    get_anim_val : Proc(ISVGAnimatedNumber*, Float32*, HRESULT)
  end

  ISVGAnimatedNumber_GUID = "305104cc-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedNumber = LibC::GUID.new(0x305104cc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedNumber
    lpVtbl : ISVGAnimatedNumberVTbl*
  end

  struct ISVGNumberListVTbl
    query_interface : Proc(ISVGNumberList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGNumberList*, UInt32)
    release : Proc(ISVGNumberList*, UInt32)
    get_type_info_count : Proc(ISVGNumberList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGNumberList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGNumberList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGNumberList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGNumberList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGNumberList*, Int32*, HRESULT)
    clear : Proc(ISVGNumberList*, HRESULT)
    initialize : Proc(ISVGNumberList*, ISVGNumber, ISVGNumber*, HRESULT)
    get_item : Proc(ISVGNumberList*, Int32, ISVGNumber*, HRESULT)
    insert_item_before : Proc(ISVGNumberList*, ISVGNumber, Int32, ISVGNumber*, HRESULT)
    replace_item : Proc(ISVGNumberList*, ISVGNumber, Int32, ISVGNumber*, HRESULT)
    remove_item : Proc(ISVGNumberList*, Int32, ISVGNumber*, HRESULT)
    append_item : Proc(ISVGNumberList*, ISVGNumber, ISVGNumber*, HRESULT)
  end

  ISVGNumberList_GUID = "305104cd-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGNumberList = LibC::GUID.new(0x305104cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGNumberList
    lpVtbl : ISVGNumberListVTbl*
  end

  struct ISVGAnimatedNumberListVTbl
    query_interface : Proc(ISVGAnimatedNumberList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedNumberList*, UInt32)
    release : Proc(ISVGAnimatedNumberList*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedNumberList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedNumberList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedNumberList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedNumberList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_base_val : Proc(ISVGAnimatedNumberList*, ISVGNumberList, HRESULT)
    get_base_val : Proc(ISVGAnimatedNumberList*, ISVGNumberList*, HRESULT)
    putref_anim_val : Proc(ISVGAnimatedNumberList*, ISVGNumberList, HRESULT)
    get_anim_val : Proc(ISVGAnimatedNumberList*, ISVGNumberList*, HRESULT)
  end

  ISVGAnimatedNumberList_GUID = "305104ce-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedNumberList = LibC::GUID.new(0x305104ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedNumberList
    lpVtbl : ISVGAnimatedNumberListVTbl*
  end

  struct ISVGClipPathElementVTbl
    query_interface : Proc(ISVGClipPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGClipPathElement*, UInt32)
    release : Proc(ISVGClipPathElement*, UInt32)
    get_type_info_count : Proc(ISVGClipPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGClipPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGClipPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGClipPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_clip_path_units : Proc(ISVGClipPathElement*, ISVGAnimatedEnumeration, HRESULT)
    get_clip_path_units : Proc(ISVGClipPathElement*, ISVGAnimatedEnumeration*, HRESULT)
  end

  ISVGClipPathElement_GUID = "3051052d-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGClipPathElement = LibC::GUID.new(0x3051052d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGClipPathElement
    lpVtbl : ISVGClipPathElementVTbl*
  end

  struct DispSVGClipPathElementVTbl
    query_interface : Proc(DispSVGClipPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGClipPathElement*, UInt32)
    release : Proc(DispSVGClipPathElement*, UInt32)
    get_type_info_count : Proc(DispSVGClipPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGClipPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGClipPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGClipPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGClipPathElement_GUID = "3059003b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGClipPathElement = LibC::GUID.new(0x3059003b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGClipPathElement
    lpVtbl : DispSVGClipPathElementVTbl*
  end

  struct ISVGDocumentVTbl
    query_interface : Proc(ISVGDocument*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGDocument*, UInt32)
    release : Proc(ISVGDocument*, UInt32)
    get_type_info_count : Proc(ISVGDocument*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGDocument*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGDocument*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGDocument*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root_element : Proc(ISVGDocument*, ISVGSVGElement*, HRESULT)
  end

  ISVGDocument_GUID = "305104e6-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGDocument = LibC::GUID.new(0x305104e6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGDocument
    lpVtbl : ISVGDocumentVTbl*
  end

  struct IGetSVGDocumentVTbl
    query_interface : Proc(IGetSVGDocument*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetSVGDocument*, UInt32)
    release : Proc(IGetSVGDocument*, UInt32)
    get_type_info_count : Proc(IGetSVGDocument*, UInt32*, HRESULT)
    get_type_info : Proc(IGetSVGDocument*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IGetSVGDocument*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IGetSVGDocument*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_svg_document : Proc(IGetSVGDocument*, IDispatch*, HRESULT)
  end

  IGetSVGDocument_GUID = "305105ab-98b5-11cf-bb82-00aa00bdce0b"
  IID_IGetSVGDocument = LibC::GUID.new(0x305105ab_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IGetSVGDocument
    lpVtbl : IGetSVGDocumentVTbl*
  end

  struct DispSVGElementVTbl
    query_interface : Proc(DispSVGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGElement*, UInt32)
    release : Proc(DispSVGElement*, UInt32)
    get_type_info_count : Proc(DispSVGElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGElement_GUID = "30590000-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGElement = LibC::GUID.new(0x30590000_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGElement
    lpVtbl : DispSVGElementVTbl*
  end

  struct IICCSVGColorVTbl
    query_interface : Proc(IICCSVGColor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IICCSVGColor*, UInt32)
    release : Proc(IICCSVGColor*, UInt32)
    get_type_info_count : Proc(IICCSVGColor*, UInt32*, HRESULT)
    get_type_info : Proc(IICCSVGColor*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IICCSVGColor*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IICCSVGColor*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IICCSVGColor_GUID = "305104d6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IICCSVGColor = LibC::GUID.new(0x305104d6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IICCSVGColor
    lpVtbl : IICCSVGColorVTbl*
  end

  struct ISVGPaintVTbl
    query_interface : Proc(ISVGPaint*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPaint*, UInt32)
    release : Proc(ISVGPaint*, UInt32)
    get_type_info_count : Proc(ISVGPaint*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPaint*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPaint*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPaint*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGPaint_GUID = "30510524-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPaint = LibC::GUID.new(0x30510524_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPaint
    lpVtbl : ISVGPaintVTbl*
  end

  struct ISVGPatternElementVTbl
    query_interface : Proc(ISVGPatternElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPatternElement*, UInt32)
    release : Proc(ISVGPatternElement*, UInt32)
    get_type_info_count : Proc(ISVGPatternElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPatternElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPatternElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPatternElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_pattern_units : Proc(ISVGPatternElement*, ISVGAnimatedEnumeration, HRESULT)
    get_pattern_units : Proc(ISVGPatternElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_pattern_content_units : Proc(ISVGPatternElement*, ISVGAnimatedEnumeration, HRESULT)
    get_pattern_content_units : Proc(ISVGPatternElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_pattern_transform : Proc(ISVGPatternElement*, ISVGAnimatedTransformList, HRESULT)
    get_pattern_transform : Proc(ISVGPatternElement*, ISVGAnimatedTransformList*, HRESULT)
    putref_x : Proc(ISVGPatternElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGPatternElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGPatternElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGPatternElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGPatternElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGPatternElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGPatternElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGPatternElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGPatternElement_GUID = "3051052c-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPatternElement = LibC::GUID.new(0x3051052c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPatternElement
    lpVtbl : ISVGPatternElementVTbl*
  end

  struct DispSVGPatternElementVTbl
    query_interface : Proc(DispSVGPatternElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPatternElement*, UInt32)
    release : Proc(DispSVGPatternElement*, UInt32)
    get_type_info_count : Proc(DispSVGPatternElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPatternElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPatternElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPatternElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPatternElement_GUID = "3059002c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPatternElement = LibC::GUID.new(0x3059002c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPatternElement
    lpVtbl : DispSVGPatternElementVTbl*
  end

  struct ISVGPathSegVTbl
    query_interface : Proc(ISVGPathSeg*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSeg*, UInt32)
    release : Proc(ISVGPathSeg*, UInt32)
    get_type_info_count : Proc(ISVGPathSeg*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSeg*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSeg*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSeg*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_path_seg_type : Proc(ISVGPathSeg*, Int16, HRESULT)
    get_path_seg_type : Proc(ISVGPathSeg*, Int16*, HRESULT)
    get_path_seg_type_as_letter : Proc(ISVGPathSeg*, UInt8**, HRESULT)
  end

  ISVGPathSeg_GUID = "305104fc-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSeg = LibC::GUID.new(0x305104fc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSeg
    lpVtbl : ISVGPathSegVTbl*
  end

  struct ISVGPathSegArcAbsVTbl
    query_interface : Proc(ISVGPathSegArcAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegArcAbs*, UInt32)
    release : Proc(ISVGPathSegArcAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegArcAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegArcAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegArcAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegArcAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegArcAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegArcAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegArcAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegArcAbs*, Float32*, HRESULT)
    put_r1 : Proc(ISVGPathSegArcAbs*, Float32, HRESULT)
    get_r1 : Proc(ISVGPathSegArcAbs*, Float32*, HRESULT)
    put_r2 : Proc(ISVGPathSegArcAbs*, Float32, HRESULT)
    get_r2 : Proc(ISVGPathSegArcAbs*, Float32*, HRESULT)
    put_angle : Proc(ISVGPathSegArcAbs*, Float32, HRESULT)
    get_angle : Proc(ISVGPathSegArcAbs*, Float32*, HRESULT)
    put_large_arc_flag : Proc(ISVGPathSegArcAbs*, Int16, HRESULT)
    get_large_arc_flag : Proc(ISVGPathSegArcAbs*, Int16*, HRESULT)
    put_sweep_flag : Proc(ISVGPathSegArcAbs*, Int16, HRESULT)
    get_sweep_flag : Proc(ISVGPathSegArcAbs*, Int16*, HRESULT)
  end

  ISVGPathSegArcAbs_GUID = "30510506-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegArcAbs = LibC::GUID.new(0x30510506_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegArcAbs
    lpVtbl : ISVGPathSegArcAbsVTbl*
  end

  struct ISVGPathSegArcRelVTbl
    query_interface : Proc(ISVGPathSegArcRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegArcRel*, UInt32)
    release : Proc(ISVGPathSegArcRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegArcRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegArcRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegArcRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegArcRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegArcRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegArcRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegArcRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegArcRel*, Float32*, HRESULT)
    put_r1 : Proc(ISVGPathSegArcRel*, Float32, HRESULT)
    get_r1 : Proc(ISVGPathSegArcRel*, Float32*, HRESULT)
    put_r2 : Proc(ISVGPathSegArcRel*, Float32, HRESULT)
    get_r2 : Proc(ISVGPathSegArcRel*, Float32*, HRESULT)
    put_angle : Proc(ISVGPathSegArcRel*, Float32, HRESULT)
    get_angle : Proc(ISVGPathSegArcRel*, Float32*, HRESULT)
    put_large_arc_flag : Proc(ISVGPathSegArcRel*, Int16, HRESULT)
    get_large_arc_flag : Proc(ISVGPathSegArcRel*, Int16*, HRESULT)
    put_sweep_flag : Proc(ISVGPathSegArcRel*, Int16, HRESULT)
    get_sweep_flag : Proc(ISVGPathSegArcRel*, Int16*, HRESULT)
  end

  ISVGPathSegArcRel_GUID = "30510507-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegArcRel = LibC::GUID.new(0x30510507_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegArcRel
    lpVtbl : ISVGPathSegArcRelVTbl*
  end

  struct ISVGPathSegClosePathVTbl
    query_interface : Proc(ISVGPathSegClosePath*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegClosePath*, UInt32)
    release : Proc(ISVGPathSegClosePath*, UInt32)
    get_type_info_count : Proc(ISVGPathSegClosePath*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegClosePath*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegClosePath*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegClosePath*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGPathSegClosePath_GUID = "305104fd-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegClosePath = LibC::GUID.new(0x305104fd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegClosePath
    lpVtbl : ISVGPathSegClosePathVTbl*
  end

  struct ISVGPathSegMovetoAbsVTbl
    query_interface : Proc(ISVGPathSegMovetoAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegMovetoAbs*, UInt32)
    release : Proc(ISVGPathSegMovetoAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegMovetoAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegMovetoAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegMovetoAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegMovetoAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegMovetoAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegMovetoAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegMovetoAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegMovetoAbs*, Float32*, HRESULT)
  end

  ISVGPathSegMovetoAbs_GUID = "305104fe-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegMovetoAbs = LibC::GUID.new(0x305104fe_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegMovetoAbs
    lpVtbl : ISVGPathSegMovetoAbsVTbl*
  end

  struct ISVGPathSegMovetoRelVTbl
    query_interface : Proc(ISVGPathSegMovetoRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegMovetoRel*, UInt32)
    release : Proc(ISVGPathSegMovetoRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegMovetoRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegMovetoRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegMovetoRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegMovetoRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegMovetoRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegMovetoRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegMovetoRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegMovetoRel*, Float32*, HRESULT)
  end

  ISVGPathSegMovetoRel_GUID = "305104ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegMovetoRel = LibC::GUID.new(0x305104ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegMovetoRel
    lpVtbl : ISVGPathSegMovetoRelVTbl*
  end

  struct ISVGPathSegLinetoAbsVTbl
    query_interface : Proc(ISVGPathSegLinetoAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoAbs*, UInt32)
    release : Proc(ISVGPathSegLinetoAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegLinetoAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegLinetoAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegLinetoAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegLinetoAbs*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoAbs_GUID = "30510500-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoAbs = LibC::GUID.new(0x30510500_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoAbs
    lpVtbl : ISVGPathSegLinetoAbsVTbl*
  end

  struct ISVGPathSegLinetoRelVTbl
    query_interface : Proc(ISVGPathSegLinetoRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoRel*, UInt32)
    release : Proc(ISVGPathSegLinetoRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegLinetoRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegLinetoRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegLinetoRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegLinetoRel*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoRel_GUID = "30510501-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoRel = LibC::GUID.new(0x30510501_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoRel
    lpVtbl : ISVGPathSegLinetoRelVTbl*
  end

  struct ISVGPathSegCurvetoCubicAbsVTbl
    query_interface : Proc(ISVGPathSegCurvetoCubicAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoCubicAbs*, UInt32)
    release : Proc(ISVGPathSegCurvetoCubicAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoCubicAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoCubicAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoCubicAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoCubicAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
    put_x1 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_x1 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
    put_y1 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_y1 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
    put_x2 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_x2 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
    put_y2 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32, HRESULT)
    get_y2 : Proc(ISVGPathSegCurvetoCubicAbs*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoCubicAbs_GUID = "30510502-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoCubicAbs = LibC::GUID.new(0x30510502_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoCubicAbs
    lpVtbl : ISVGPathSegCurvetoCubicAbsVTbl*
  end

  struct ISVGPathSegCurvetoCubicRelVTbl
    query_interface : Proc(ISVGPathSegCurvetoCubicRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoCubicRel*, UInt32)
    release : Proc(ISVGPathSegCurvetoCubicRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoCubicRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoCubicRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoCubicRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoCubicRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
    put_x1 : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_x1 : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
    put_y1 : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_y1 : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
    put_x2 : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_x2 : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
    put_y2 : Proc(ISVGPathSegCurvetoCubicRel*, Float32, HRESULT)
    get_y2 : Proc(ISVGPathSegCurvetoCubicRel*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoCubicRel_GUID = "30510503-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoCubicRel = LibC::GUID.new(0x30510503_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoCubicRel
    lpVtbl : ISVGPathSegCurvetoCubicRelVTbl*
  end

  struct ISVGPathSegCurvetoCubicSmoothAbsVTbl
    query_interface : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, UInt32)
    release : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32*, HRESULT)
    put_x2 : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32, HRESULT)
    get_x2 : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32*, HRESULT)
    put_y2 : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32, HRESULT)
    get_y2 : Proc(ISVGPathSegCurvetoCubicSmoothAbs*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoCubicSmoothAbs_GUID = "3051050c-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoCubicSmoothAbs = LibC::GUID.new(0x3051050c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoCubicSmoothAbs
    lpVtbl : ISVGPathSegCurvetoCubicSmoothAbsVTbl*
  end

  struct ISVGPathSegCurvetoCubicSmoothRelVTbl
    query_interface : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoCubicSmoothRel*, UInt32)
    release : Proc(ISVGPathSegCurvetoCubicSmoothRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoCubicSmoothRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoCubicSmoothRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32*, HRESULT)
    put_x2 : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32, HRESULT)
    get_x2 : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32*, HRESULT)
    put_y2 : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32, HRESULT)
    get_y2 : Proc(ISVGPathSegCurvetoCubicSmoothRel*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoCubicSmoothRel_GUID = "3051050d-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoCubicSmoothRel = LibC::GUID.new(0x3051050d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoCubicSmoothRel
    lpVtbl : ISVGPathSegCurvetoCubicSmoothRelVTbl*
  end

  struct ISVGPathSegCurvetoQuadraticAbsVTbl
    query_interface : Proc(ISVGPathSegCurvetoQuadraticAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoQuadraticAbs*, UInt32)
    release : Proc(ISVGPathSegCurvetoQuadraticAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoQuadraticAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoQuadraticAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoQuadraticAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoQuadraticAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32*, HRESULT)
    put_x1 : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32, HRESULT)
    get_x1 : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32*, HRESULT)
    put_y1 : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32, HRESULT)
    get_y1 : Proc(ISVGPathSegCurvetoQuadraticAbs*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoQuadraticAbs_GUID = "30510504-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoQuadraticAbs = LibC::GUID.new(0x30510504_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoQuadraticAbs
    lpVtbl : ISVGPathSegCurvetoQuadraticAbsVTbl*
  end

  struct ISVGPathSegCurvetoQuadraticRelVTbl
    query_interface : Proc(ISVGPathSegCurvetoQuadraticRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoQuadraticRel*, UInt32)
    release : Proc(ISVGPathSegCurvetoQuadraticRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoQuadraticRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoQuadraticRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoQuadraticRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoQuadraticRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32*, HRESULT)
    put_x1 : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32, HRESULT)
    get_x1 : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32*, HRESULT)
    put_y1 : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32, HRESULT)
    get_y1 : Proc(ISVGPathSegCurvetoQuadraticRel*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoQuadraticRel_GUID = "30510505-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoQuadraticRel = LibC::GUID.new(0x30510505_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoQuadraticRel
    lpVtbl : ISVGPathSegCurvetoQuadraticRelVTbl*
  end

  struct ISVGPathSegCurvetoQuadraticSmoothAbsVTbl
    query_interface : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, UInt32)
    release : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoQuadraticSmoothAbs*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoQuadraticSmoothAbs_GUID = "3051050e-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoQuadraticSmoothAbs = LibC::GUID.new(0x3051050e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoQuadraticSmoothAbs
    lpVtbl : ISVGPathSegCurvetoQuadraticSmoothAbsVTbl*
  end

  struct ISVGPathSegCurvetoQuadraticSmoothRelVTbl
    query_interface : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, UInt32)
    release : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Float32*, HRESULT)
    put_y : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegCurvetoQuadraticSmoothRel*, Float32*, HRESULT)
  end

  ISVGPathSegCurvetoQuadraticSmoothRel_GUID = "3051050f-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegCurvetoQuadraticSmoothRel = LibC::GUID.new(0x3051050f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegCurvetoQuadraticSmoothRel
    lpVtbl : ISVGPathSegCurvetoQuadraticSmoothRelVTbl*
  end

  struct ISVGPathSegLinetoHorizontalAbsVTbl
    query_interface : Proc(ISVGPathSegLinetoHorizontalAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoHorizontalAbs*, UInt32)
    release : Proc(ISVGPathSegLinetoHorizontalAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoHorizontalAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoHorizontalAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoHorizontalAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoHorizontalAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegLinetoHorizontalAbs*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegLinetoHorizontalAbs*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoHorizontalAbs_GUID = "30510508-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoHorizontalAbs = LibC::GUID.new(0x30510508_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoHorizontalAbs
    lpVtbl : ISVGPathSegLinetoHorizontalAbsVTbl*
  end

  struct ISVGPathSegLinetoHorizontalRelVTbl
    query_interface : Proc(ISVGPathSegLinetoHorizontalRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoHorizontalRel*, UInt32)
    release : Proc(ISVGPathSegLinetoHorizontalRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoHorizontalRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoHorizontalRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoHorizontalRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoHorizontalRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPathSegLinetoHorizontalRel*, Float32, HRESULT)
    get_x : Proc(ISVGPathSegLinetoHorizontalRel*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoHorizontalRel_GUID = "30510509-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoHorizontalRel = LibC::GUID.new(0x30510509_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoHorizontalRel
    lpVtbl : ISVGPathSegLinetoHorizontalRelVTbl*
  end

  struct ISVGPathSegLinetoVerticalAbsVTbl
    query_interface : Proc(ISVGPathSegLinetoVerticalAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoVerticalAbs*, UInt32)
    release : Proc(ISVGPathSegLinetoVerticalAbs*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoVerticalAbs*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoVerticalAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoVerticalAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoVerticalAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_y : Proc(ISVGPathSegLinetoVerticalAbs*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegLinetoVerticalAbs*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoVerticalAbs_GUID = "3051050a-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoVerticalAbs = LibC::GUID.new(0x3051050a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoVerticalAbs
    lpVtbl : ISVGPathSegLinetoVerticalAbsVTbl*
  end

  struct ISVGPathSegLinetoVerticalRelVTbl
    query_interface : Proc(ISVGPathSegLinetoVerticalRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegLinetoVerticalRel*, UInt32)
    release : Proc(ISVGPathSegLinetoVerticalRel*, UInt32)
    get_type_info_count : Proc(ISVGPathSegLinetoVerticalRel*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegLinetoVerticalRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegLinetoVerticalRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegLinetoVerticalRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_y : Proc(ISVGPathSegLinetoVerticalRel*, Float32, HRESULT)
    get_y : Proc(ISVGPathSegLinetoVerticalRel*, Float32*, HRESULT)
  end

  ISVGPathSegLinetoVerticalRel_GUID = "3051050b-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegLinetoVerticalRel = LibC::GUID.new(0x3051050b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegLinetoVerticalRel
    lpVtbl : ISVGPathSegLinetoVerticalRelVTbl*
  end

  struct DispSVGPathSegArcAbsVTbl
    query_interface : Proc(DispSVGPathSegArcAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegArcAbs*, UInt32)
    release : Proc(DispSVGPathSegArcAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegArcAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegArcAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegArcAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegArcAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegArcAbs_GUID = "30590013-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegArcAbs = LibC::GUID.new(0x30590013_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegArcAbs
    lpVtbl : DispSVGPathSegArcAbsVTbl*
  end

  struct DispSVGPathSegArcRelVTbl
    query_interface : Proc(DispSVGPathSegArcRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegArcRel*, UInt32)
    release : Proc(DispSVGPathSegArcRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegArcRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegArcRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegArcRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegArcRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegArcRel_GUID = "30590014-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegArcRel = LibC::GUID.new(0x30590014_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegArcRel
    lpVtbl : DispSVGPathSegArcRelVTbl*
  end

  struct DispSVGPathSegClosePathVTbl
    query_interface : Proc(DispSVGPathSegClosePath*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegClosePath*, UInt32)
    release : Proc(DispSVGPathSegClosePath*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegClosePath*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegClosePath*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegClosePath*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegClosePath*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegClosePath_GUID = "30590015-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegClosePath = LibC::GUID.new(0x30590015_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegClosePath
    lpVtbl : DispSVGPathSegClosePathVTbl*
  end

  struct DispSVGPathSegMovetoAbsVTbl
    query_interface : Proc(DispSVGPathSegMovetoAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegMovetoAbs*, UInt32)
    release : Proc(DispSVGPathSegMovetoAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegMovetoAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegMovetoAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegMovetoAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegMovetoAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegMovetoAbs_GUID = "30590024-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegMovetoAbs = LibC::GUID.new(0x30590024_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegMovetoAbs
    lpVtbl : DispSVGPathSegMovetoAbsVTbl*
  end

  struct DispSVGPathSegMovetoRelVTbl
    query_interface : Proc(DispSVGPathSegMovetoRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegMovetoRel*, UInt32)
    release : Proc(DispSVGPathSegMovetoRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegMovetoRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegMovetoRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegMovetoRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegMovetoRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegMovetoRel_GUID = "30590025-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegMovetoRel = LibC::GUID.new(0x30590025_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegMovetoRel
    lpVtbl : DispSVGPathSegMovetoRelVTbl*
  end

  struct DispSVGPathSegLinetoAbsVTbl
    query_interface : Proc(DispSVGPathSegLinetoAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoAbs*, UInt32)
    release : Proc(DispSVGPathSegLinetoAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoAbs_GUID = "3059001e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoAbs = LibC::GUID.new(0x3059001e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoAbs
    lpVtbl : DispSVGPathSegLinetoAbsVTbl*
  end

  struct DispSVGPathSegLinetoRelVTbl
    query_interface : Proc(DispSVGPathSegLinetoRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoRel*, UInt32)
    release : Proc(DispSVGPathSegLinetoRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoRel_GUID = "30590021-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoRel = LibC::GUID.new(0x30590021_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoRel
    lpVtbl : DispSVGPathSegLinetoRelVTbl*
  end

  struct DispSVGPathSegCurvetoCubicAbsVTbl
    query_interface : Proc(DispSVGPathSegCurvetoCubicAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoCubicAbs*, UInt32)
    release : Proc(DispSVGPathSegCurvetoCubicAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoCubicAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoCubicAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoCubicAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoCubicAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoCubicAbs_GUID = "30590016-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoCubicAbs = LibC::GUID.new(0x30590016_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoCubicAbs
    lpVtbl : DispSVGPathSegCurvetoCubicAbsVTbl*
  end

  struct DispSVGPathSegCurvetoCubicRelVTbl
    query_interface : Proc(DispSVGPathSegCurvetoCubicRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoCubicRel*, UInt32)
    release : Proc(DispSVGPathSegCurvetoCubicRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoCubicRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoCubicRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoCubicRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoCubicRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoCubicRel_GUID = "30590017-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoCubicRel = LibC::GUID.new(0x30590017_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoCubicRel
    lpVtbl : DispSVGPathSegCurvetoCubicRelVTbl*
  end

  struct DispSVGPathSegCurvetoCubicSmoothAbsVTbl
    query_interface : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, UInt32)
    release : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoCubicSmoothAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoCubicSmoothAbs_GUID = "30590018-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoCubicSmoothAbs = LibC::GUID.new(0x30590018_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoCubicSmoothAbs
    lpVtbl : DispSVGPathSegCurvetoCubicSmoothAbsVTbl*
  end

  struct DispSVGPathSegCurvetoCubicSmoothRelVTbl
    query_interface : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, UInt32)
    release : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoCubicSmoothRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoCubicSmoothRel_GUID = "30590019-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoCubicSmoothRel = LibC::GUID.new(0x30590019_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoCubicSmoothRel
    lpVtbl : DispSVGPathSegCurvetoCubicSmoothRelVTbl*
  end

  struct DispSVGPathSegCurvetoQuadraticAbsVTbl
    query_interface : Proc(DispSVGPathSegCurvetoQuadraticAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoQuadraticAbs*, UInt32)
    release : Proc(DispSVGPathSegCurvetoQuadraticAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoQuadraticAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoQuadraticAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoQuadraticAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoQuadraticAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoQuadraticAbs_GUID = "3059001a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoQuadraticAbs = LibC::GUID.new(0x3059001a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoQuadraticAbs
    lpVtbl : DispSVGPathSegCurvetoQuadraticAbsVTbl*
  end

  struct DispSVGPathSegCurvetoQuadraticRelVTbl
    query_interface : Proc(DispSVGPathSegCurvetoQuadraticRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoQuadraticRel*, UInt32)
    release : Proc(DispSVGPathSegCurvetoQuadraticRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoQuadraticRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoQuadraticRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoQuadraticRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoQuadraticRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoQuadraticRel_GUID = "3059001b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoQuadraticRel = LibC::GUID.new(0x3059001b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoQuadraticRel
    lpVtbl : DispSVGPathSegCurvetoQuadraticRelVTbl*
  end

  struct DispSVGPathSegCurvetoQuadraticSmoothAbsVTbl
    query_interface : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, UInt32)
    release : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoQuadraticSmoothAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoQuadraticSmoothAbs_GUID = "3059001c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoQuadraticSmoothAbs = LibC::GUID.new(0x3059001c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoQuadraticSmoothAbs
    lpVtbl : DispSVGPathSegCurvetoQuadraticSmoothAbsVTbl*
  end

  struct DispSVGPathSegCurvetoQuadraticSmoothRelVTbl
    query_interface : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, UInt32)
    release : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegCurvetoQuadraticSmoothRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegCurvetoQuadraticSmoothRel_GUID = "3059001d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegCurvetoQuadraticSmoothRel = LibC::GUID.new(0x3059001d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegCurvetoQuadraticSmoothRel
    lpVtbl : DispSVGPathSegCurvetoQuadraticSmoothRelVTbl*
  end

  struct DispSVGPathSegLinetoHorizontalAbsVTbl
    query_interface : Proc(DispSVGPathSegLinetoHorizontalAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoHorizontalAbs*, UInt32)
    release : Proc(DispSVGPathSegLinetoHorizontalAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoHorizontalAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoHorizontalAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoHorizontalAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoHorizontalAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoHorizontalAbs_GUID = "3059001f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoHorizontalAbs = LibC::GUID.new(0x3059001f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoHorizontalAbs
    lpVtbl : DispSVGPathSegLinetoHorizontalAbsVTbl*
  end

  struct DispSVGPathSegLinetoHorizontalRelVTbl
    query_interface : Proc(DispSVGPathSegLinetoHorizontalRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoHorizontalRel*, UInt32)
    release : Proc(DispSVGPathSegLinetoHorizontalRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoHorizontalRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoHorizontalRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoHorizontalRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoHorizontalRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoHorizontalRel_GUID = "30590020-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoHorizontalRel = LibC::GUID.new(0x30590020_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoHorizontalRel
    lpVtbl : DispSVGPathSegLinetoHorizontalRelVTbl*
  end

  struct DispSVGPathSegLinetoVerticalAbsVTbl
    query_interface : Proc(DispSVGPathSegLinetoVerticalAbs*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoVerticalAbs*, UInt32)
    release : Proc(DispSVGPathSegLinetoVerticalAbs*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoVerticalAbs*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoVerticalAbs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoVerticalAbs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoVerticalAbs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoVerticalAbs_GUID = "30590022-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoVerticalAbs = LibC::GUID.new(0x30590022_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoVerticalAbs
    lpVtbl : DispSVGPathSegLinetoVerticalAbsVTbl*
  end

  struct DispSVGPathSegLinetoVerticalRelVTbl
    query_interface : Proc(DispSVGPathSegLinetoVerticalRel*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathSegLinetoVerticalRel*, UInt32)
    release : Proc(DispSVGPathSegLinetoVerticalRel*, UInt32)
    get_type_info_count : Proc(DispSVGPathSegLinetoVerticalRel*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathSegLinetoVerticalRel*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathSegLinetoVerticalRel*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathSegLinetoVerticalRel*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathSegLinetoVerticalRel_GUID = "30590023-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathSegLinetoVerticalRel = LibC::GUID.new(0x30590023_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathSegLinetoVerticalRel
    lpVtbl : DispSVGPathSegLinetoVerticalRelVTbl*
  end

  struct ISVGPathSegListVTbl
    query_interface : Proc(ISVGPathSegList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathSegList*, UInt32)
    release : Proc(ISVGPathSegList*, UInt32)
    get_type_info_count : Proc(ISVGPathSegList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathSegList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathSegList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathSegList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGPathSegList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGPathSegList*, Int32*, HRESULT)
    clear : Proc(ISVGPathSegList*, HRESULT)
    initialize : Proc(ISVGPathSegList*, ISVGPathSeg, ISVGPathSeg*, HRESULT)
    get_item : Proc(ISVGPathSegList*, Int32, ISVGPathSeg*, HRESULT)
    insert_item_before : Proc(ISVGPathSegList*, ISVGPathSeg, Int32, ISVGPathSeg*, HRESULT)
    replace_item : Proc(ISVGPathSegList*, ISVGPathSeg, Int32, ISVGPathSeg*, HRESULT)
    remove_item : Proc(ISVGPathSegList*, Int32, ISVGPathSeg*, HRESULT)
    append_item : Proc(ISVGPathSegList*, ISVGPathSeg, ISVGPathSeg*, HRESULT)
  end

  ISVGPathSegList_GUID = "30510510-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathSegList = LibC::GUID.new(0x30510510_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathSegList
    lpVtbl : ISVGPathSegListVTbl*
  end

  struct ISVGPointVTbl
    query_interface : Proc(ISVGPoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPoint*, UInt32)
    release : Proc(ISVGPoint*, UInt32)
    get_type_info_count : Proc(ISVGPoint*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPoint*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPoint*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPoint*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_x : Proc(ISVGPoint*, Float32, HRESULT)
    get_x : Proc(ISVGPoint*, Float32*, HRESULT)
    put_y : Proc(ISVGPoint*, Float32, HRESULT)
    get_y : Proc(ISVGPoint*, Float32*, HRESULT)
    matrix_transform : Proc(ISVGPoint*, ISVGMatrix, ISVGPoint*, HRESULT)
  end

  ISVGPoint_GUID = "305104f4-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPoint = LibC::GUID.new(0x305104f4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPoint
    lpVtbl : ISVGPointVTbl*
  end

  struct ISVGPointListVTbl
    query_interface : Proc(ISVGPointList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPointList*, UInt32)
    release : Proc(ISVGPointList*, UInt32)
    get_type_info_count : Proc(ISVGPointList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPointList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPointList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPointList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_number_of_items : Proc(ISVGPointList*, Int32, HRESULT)
    get_number_of_items : Proc(ISVGPointList*, Int32*, HRESULT)
    clear : Proc(ISVGPointList*, HRESULT)
    initialize : Proc(ISVGPointList*, ISVGPoint, ISVGPoint*, HRESULT)
    get_item : Proc(ISVGPointList*, Int32, ISVGPoint*, HRESULT)
    insert_item_before : Proc(ISVGPointList*, ISVGPoint, Int32, ISVGPoint*, HRESULT)
    replace_item : Proc(ISVGPointList*, ISVGPoint, Int32, ISVGPoint*, HRESULT)
    remove_item : Proc(ISVGPointList*, Int32, ISVGPoint*, HRESULT)
    append_item : Proc(ISVGPointList*, ISVGPoint, ISVGPoint*, HRESULT)
  end

  ISVGPointList_GUID = "305104f5-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPointList = LibC::GUID.new(0x305104f5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPointList
    lpVtbl : ISVGPointListVTbl*
  end

  struct ISVGViewSpecVTbl
    query_interface : Proc(ISVGViewSpec*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGViewSpec*, UInt32)
    release : Proc(ISVGViewSpec*, UInt32)
    get_type_info_count : Proc(ISVGViewSpec*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGViewSpec*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGViewSpec*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGViewSpec*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGViewSpec_GUID = "305104e2-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGViewSpec = LibC::GUID.new(0x305104e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGViewSpec
    lpVtbl : ISVGViewSpecVTbl*
  end

  struct ISVGTransformVTbl
    query_interface : Proc(ISVGTransform*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTransform*, UInt32)
    release : Proc(ISVGTransform*, UInt32)
    get_type_info_count : Proc(ISVGTransform*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTransform*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTransform*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTransform*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(ISVGTransform*, Int16, HRESULT)
    get_type : Proc(ISVGTransform*, Int16*, HRESULT)
    putref_matrix : Proc(ISVGTransform*, ISVGMatrix, HRESULT)
    get_matrix : Proc(ISVGTransform*, ISVGMatrix*, HRESULT)
    put_angle : Proc(ISVGTransform*, Float32, HRESULT)
    get_angle : Proc(ISVGTransform*, Float32*, HRESULT)
    set_matrix : Proc(ISVGTransform*, ISVGMatrix, HRESULT)
    set_translate : Proc(ISVGTransform*, Float32, Float32, HRESULT)
    set_scale : Proc(ISVGTransform*, Float32, Float32, HRESULT)
    set_rotate : Proc(ISVGTransform*, Float32, Float32, Float32, HRESULT)
    set_skew_x : Proc(ISVGTransform*, Float32, HRESULT)
    set_skew_y : Proc(ISVGTransform*, Float32, HRESULT)
  end

  ISVGTransform_GUID = "305104f7-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTransform = LibC::GUID.new(0x305104f7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTransform
    lpVtbl : ISVGTransformVTbl*
  end

  struct DispSVGSVGElementVTbl
    query_interface : Proc(DispSVGSVGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGSVGElement*, UInt32)
    release : Proc(DispSVGSVGElement*, UInt32)
    get_type_info_count : Proc(DispSVGSVGElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGSVGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGSVGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGSVGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGSVGElement_GUID = "30590001-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGSVGElement = LibC::GUID.new(0x30590001_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGSVGElement
    lpVtbl : DispSVGSVGElementVTbl*
  end

  struct ISVGElementInstanceVTbl
    query_interface : Proc(ISVGElementInstance*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGElementInstance*, UInt32)
    release : Proc(ISVGElementInstance*, UInt32)
    get_type_info_count : Proc(ISVGElementInstance*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGElementInstance*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGElementInstance*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGElementInstance*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_corresponding_element : Proc(ISVGElementInstance*, ISVGElement*, HRESULT)
    get_corresponding_use_element : Proc(ISVGElementInstance*, ISVGUseElement*, HRESULT)
    get_parent_node : Proc(ISVGElementInstance*, ISVGElementInstance*, HRESULT)
    get_child_nodes : Proc(ISVGElementInstance*, ISVGElementInstanceList*, HRESULT)
    get_first_child : Proc(ISVGElementInstance*, ISVGElementInstance*, HRESULT)
    get_last_child : Proc(ISVGElementInstance*, ISVGElementInstance*, HRESULT)
    get_previous_sibling : Proc(ISVGElementInstance*, ISVGElementInstance*, HRESULT)
    get_next_sibling : Proc(ISVGElementInstance*, ISVGElementInstance*, HRESULT)
  end

  ISVGElementInstance_GUID = "305104ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGElementInstance = LibC::GUID.new(0x305104ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGElementInstance
    lpVtbl : ISVGElementInstanceVTbl*
  end

  struct ISVGUseElementVTbl
    query_interface : Proc(ISVGUseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGUseElement*, UInt32)
    release : Proc(ISVGUseElement*, UInt32)
    get_type_info_count : Proc(ISVGUseElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGUseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGUseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGUseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x : Proc(ISVGUseElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGUseElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGUseElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGUseElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGUseElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGUseElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGUseElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGUseElement*, ISVGAnimatedLength*, HRESULT)
    putref_instance_root : Proc(ISVGUseElement*, ISVGElementInstance, HRESULT)
    get_instance_root : Proc(ISVGUseElement*, ISVGElementInstance*, HRESULT)
    putref_animated_instance_root : Proc(ISVGUseElement*, ISVGElementInstance, HRESULT)
    get_animated_instance_root : Proc(ISVGUseElement*, ISVGElementInstance*, HRESULT)
  end

  ISVGUseElement_GUID = "305104ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGUseElement = LibC::GUID.new(0x305104ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGUseElement
    lpVtbl : ISVGUseElementVTbl*
  end

  struct DispSVGUseElementVTbl
    query_interface : Proc(DispSVGUseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGUseElement*, UInt32)
    release : Proc(DispSVGUseElement*, UInt32)
    get_type_info_count : Proc(DispSVGUseElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGUseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGUseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGUseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGUseElement_GUID = "30590010-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGUseElement = LibC::GUID.new(0x30590010_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGUseElement
    lpVtbl : DispSVGUseElementVTbl*
  end

  struct IHTMLStyleSheetRulesAppliedCollectionVTbl
    query_interface : Proc(IHTMLStyleSheetRulesAppliedCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt32)
    release : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt32)
    get_type_info_count : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLStyleSheetRulesAppliedCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLStyleSheetRulesAppliedCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    item : Proc(IHTMLStyleSheetRulesAppliedCollection*, Int32, IHTMLStyleSheetRule*, HRESULT)
    get_length : Proc(IHTMLStyleSheetRulesAppliedCollection*, Int32*, HRESULT)
    property_applied_by : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt8*, IHTMLStyleSheetRule*, HRESULT)
    property_applied_trace : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt8*, Int32, IHTMLStyleSheetRule*, HRESULT)
    property_applied_trace_length : Proc(IHTMLStyleSheetRulesAppliedCollection*, UInt8*, Int32*, HRESULT)
  end

  IHTMLStyleSheetRulesAppliedCollection_GUID = "305104c0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLStyleSheetRulesAppliedCollection = LibC::GUID.new(0x305104c0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLStyleSheetRulesAppliedCollection
    lpVtbl : IHTMLStyleSheetRulesAppliedCollectionVTbl*
  end

  struct IRulesAppliedVTbl
    query_interface : Proc(IRulesApplied*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRulesApplied*, UInt32)
    release : Proc(IRulesApplied*, UInt32)
    get_type_info_count : Proc(IRulesApplied*, UInt32*, HRESULT)
    get_type_info : Proc(IRulesApplied*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRulesApplied*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRulesApplied*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_element : Proc(IRulesApplied*, IHTMLElement*, HRESULT)
    get_inline_styles : Proc(IRulesApplied*, IHTMLStyle*, HRESULT)
    get_applied_rules : Proc(IRulesApplied*, IHTMLStyleSheetRulesAppliedCollection*, HRESULT)
    property_is_inline : Proc(IRulesApplied*, UInt8*, Int16*, HRESULT)
    property_is_inheritable : Proc(IRulesApplied*, UInt8*, Int16*, HRESULT)
    has_inheritable_property : Proc(IRulesApplied*, Int16*, HRESULT)
  end

  IRulesApplied_GUID = "305104bf-98b5-11cf-bb82-00aa00bdce0b"
  IID_IRulesApplied = LibC::GUID.new(0x305104bf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IRulesApplied
    lpVtbl : IRulesAppliedVTbl*
  end

  struct DispHTMLStyleSheetRulesAppliedCollectionVTbl
    query_interface : Proc(DispHTMLStyleSheetRulesAppliedCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLStyleSheetRulesAppliedCollection*, UInt32)
    release : Proc(DispHTMLStyleSheetRulesAppliedCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLStyleSheetRulesAppliedCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLStyleSheetRulesAppliedCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLStyleSheetRulesAppliedCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLStyleSheetRulesAppliedCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLStyleSheetRulesAppliedCollection_GUID = "3050f5a6-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLStyleSheetRulesAppliedCollection = LibC::GUID.new(0x3050f5a6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLStyleSheetRulesAppliedCollection
    lpVtbl : DispHTMLStyleSheetRulesAppliedCollectionVTbl*
  end

  struct DispRulesAppliedVTbl
    query_interface : Proc(DispRulesApplied*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispRulesApplied*, UInt32)
    release : Proc(DispRulesApplied*, UInt32)
    get_type_info_count : Proc(DispRulesApplied*, UInt32*, HRESULT)
    get_type_info : Proc(DispRulesApplied*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispRulesApplied*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispRulesApplied*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispRulesApplied_GUID = "3050f5a5-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispRulesApplied = LibC::GUID.new(0x3050f5a5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispRulesApplied
    lpVtbl : DispRulesAppliedVTbl*
  end

  struct DispRulesAppliedCollectionVTbl
    query_interface : Proc(DispRulesAppliedCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispRulesAppliedCollection*, UInt32)
    release : Proc(DispRulesAppliedCollection*, UInt32)
    get_type_info_count : Proc(DispRulesAppliedCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispRulesAppliedCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispRulesAppliedCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispRulesAppliedCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispRulesAppliedCollection_GUID = "3050f5a4-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispRulesAppliedCollection = LibC::GUID.new(0x3050f5a4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispRulesAppliedCollection
    lpVtbl : DispRulesAppliedCollectionVTbl*
  end

  struct DispHTMLW3CComputedStyleVTbl
    query_interface : Proc(DispHTMLW3CComputedStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLW3CComputedStyle*, UInt32)
    release : Proc(DispHTMLW3CComputedStyle*, UInt32)
    get_type_info_count : Proc(DispHTMLW3CComputedStyle*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLW3CComputedStyle*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLW3CComputedStyle*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLW3CComputedStyle*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLW3CComputedStyle_GUID = "30590070-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLW3CComputedStyle = LibC::GUID.new(0x30590070_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLW3CComputedStyle
    lpVtbl : DispHTMLW3CComputedStyleVTbl*
  end

  struct ISVGAnimatedPointsVTbl
    query_interface : Proc(ISVGAnimatedPoints*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedPoints*, UInt32)
    release : Proc(ISVGAnimatedPoints*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedPoints*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedPoints*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedPoints*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedPoints*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_points : Proc(ISVGAnimatedPoints*, ISVGPointList, HRESULT)
    get_points : Proc(ISVGAnimatedPoints*, ISVGPointList*, HRESULT)
    putref_animated_points : Proc(ISVGAnimatedPoints*, ISVGPointList, HRESULT)
    get_animated_points : Proc(ISVGAnimatedPoints*, ISVGPointList*, HRESULT)
  end

  ISVGAnimatedPoints_GUID = "30510517-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedPoints = LibC::GUID.new(0x30510517_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedPoints
    lpVtbl : ISVGAnimatedPointsVTbl*
  end

  struct ISVGCircleElementVTbl
    query_interface : Proc(ISVGCircleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGCircleElement*, UInt32)
    release : Proc(ISVGCircleElement*, UInt32)
    get_type_info_count : Proc(ISVGCircleElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGCircleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGCircleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGCircleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_cx : Proc(ISVGCircleElement*, ISVGAnimatedLength, HRESULT)
    get_cx : Proc(ISVGCircleElement*, ISVGAnimatedLength*, HRESULT)
    putref_cy : Proc(ISVGCircleElement*, ISVGAnimatedLength, HRESULT)
    get_cy : Proc(ISVGCircleElement*, ISVGAnimatedLength*, HRESULT)
    putref_r : Proc(ISVGCircleElement*, ISVGAnimatedLength, HRESULT)
    get_r : Proc(ISVGCircleElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGCircleElement_GUID = "30510514-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGCircleElement = LibC::GUID.new(0x30510514_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGCircleElement
    lpVtbl : ISVGCircleElementVTbl*
  end

  struct ISVGEllipseElementVTbl
    query_interface : Proc(ISVGEllipseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGEllipseElement*, UInt32)
    release : Proc(ISVGEllipseElement*, UInt32)
    get_type_info_count : Proc(ISVGEllipseElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGEllipseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGEllipseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGEllipseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_cx : Proc(ISVGEllipseElement*, ISVGAnimatedLength, HRESULT)
    get_cx : Proc(ISVGEllipseElement*, ISVGAnimatedLength*, HRESULT)
    putref_cy : Proc(ISVGEllipseElement*, ISVGAnimatedLength, HRESULT)
    get_cy : Proc(ISVGEllipseElement*, ISVGAnimatedLength*, HRESULT)
    putref_rx : Proc(ISVGEllipseElement*, ISVGAnimatedLength, HRESULT)
    get_rx : Proc(ISVGEllipseElement*, ISVGAnimatedLength*, HRESULT)
    putref_ry : Proc(ISVGEllipseElement*, ISVGAnimatedLength, HRESULT)
    get_ry : Proc(ISVGEllipseElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGEllipseElement_GUID = "30510515-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGEllipseElement = LibC::GUID.new(0x30510515_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGEllipseElement
    lpVtbl : ISVGEllipseElementVTbl*
  end

  struct ISVGLineElementVTbl
    query_interface : Proc(ISVGLineElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLineElement*, UInt32)
    release : Proc(ISVGLineElement*, UInt32)
    get_type_info_count : Proc(ISVGLineElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLineElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLineElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLineElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x1 : Proc(ISVGLineElement*, ISVGAnimatedLength, HRESULT)
    get_x1 : Proc(ISVGLineElement*, ISVGAnimatedLength*, HRESULT)
    putref_y1 : Proc(ISVGLineElement*, ISVGAnimatedLength, HRESULT)
    get_y1 : Proc(ISVGLineElement*, ISVGAnimatedLength*, HRESULT)
    putref_x2 : Proc(ISVGLineElement*, ISVGAnimatedLength, HRESULT)
    get_x2 : Proc(ISVGLineElement*, ISVGAnimatedLength*, HRESULT)
    putref_y2 : Proc(ISVGLineElement*, ISVGAnimatedLength, HRESULT)
    get_y2 : Proc(ISVGLineElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGLineElement_GUID = "30510516-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLineElement = LibC::GUID.new(0x30510516_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLineElement
    lpVtbl : ISVGLineElementVTbl*
  end

  struct ISVGRectElementVTbl
    query_interface : Proc(ISVGRectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGRectElement*, UInt32)
    release : Proc(ISVGRectElement*, UInt32)
    get_type_info_count : Proc(ISVGRectElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGRectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGRectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGRectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
    putref_rx : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_rx : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
    putref_ry : Proc(ISVGRectElement*, ISVGAnimatedLength, HRESULT)
    get_ry : Proc(ISVGRectElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGRectElement_GUID = "30510513-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGRectElement = LibC::GUID.new(0x30510513_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGRectElement
    lpVtbl : ISVGRectElementVTbl*
  end

  struct ISVGPolygonElementVTbl
    query_interface : Proc(ISVGPolygonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPolygonElement*, UInt32)
    release : Proc(ISVGPolygonElement*, UInt32)
    get_type_info_count : Proc(ISVGPolygonElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPolygonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPolygonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPolygonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGPolygonElement_GUID = "30510519-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPolygonElement = LibC::GUID.new(0x30510519_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPolygonElement
    lpVtbl : ISVGPolygonElementVTbl*
  end

  struct ISVGPolylineElementVTbl
    query_interface : Proc(ISVGPolylineElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPolylineElement*, UInt32)
    release : Proc(ISVGPolylineElement*, UInt32)
    get_type_info_count : Proc(ISVGPolylineElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPolylineElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPolylineElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPolylineElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGPolylineElement_GUID = "30510518-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPolylineElement = LibC::GUID.new(0x30510518_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPolylineElement
    lpVtbl : ISVGPolylineElementVTbl*
  end

  struct DispSVGCircleElementVTbl
    query_interface : Proc(DispSVGCircleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGCircleElement*, UInt32)
    release : Proc(DispSVGCircleElement*, UInt32)
    get_type_info_count : Proc(DispSVGCircleElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGCircleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGCircleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGCircleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGCircleElement_GUID = "3059000a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGCircleElement = LibC::GUID.new(0x3059000a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGCircleElement
    lpVtbl : DispSVGCircleElementVTbl*
  end

  struct DispSVGEllipseElementVTbl
    query_interface : Proc(DispSVGEllipseElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGEllipseElement*, UInt32)
    release : Proc(DispSVGEllipseElement*, UInt32)
    get_type_info_count : Proc(DispSVGEllipseElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGEllipseElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGEllipseElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGEllipseElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGEllipseElement_GUID = "3059000b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGEllipseElement = LibC::GUID.new(0x3059000b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGEllipseElement
    lpVtbl : DispSVGEllipseElementVTbl*
  end

  struct DispSVGLineElementVTbl
    query_interface : Proc(DispSVGLineElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGLineElement*, UInt32)
    release : Proc(DispSVGLineElement*, UInt32)
    get_type_info_count : Proc(DispSVGLineElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGLineElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGLineElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGLineElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGLineElement_GUID = "3059000c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGLineElement = LibC::GUID.new(0x3059000c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGLineElement
    lpVtbl : DispSVGLineElementVTbl*
  end

  struct DispSVGRectElementVTbl
    query_interface : Proc(DispSVGRectElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGRectElement*, UInt32)
    release : Proc(DispSVGRectElement*, UInt32)
    get_type_info_count : Proc(DispSVGRectElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGRectElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGRectElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGRectElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGRectElement_GUID = "30590009-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGRectElement = LibC::GUID.new(0x30590009_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGRectElement
    lpVtbl : DispSVGRectElementVTbl*
  end

  struct DispSVGPolygonElementVTbl
    query_interface : Proc(DispSVGPolygonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPolygonElement*, UInt32)
    release : Proc(DispSVGPolygonElement*, UInt32)
    get_type_info_count : Proc(DispSVGPolygonElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPolygonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPolygonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPolygonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPolygonElement_GUID = "3059000d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPolygonElement = LibC::GUID.new(0x3059000d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPolygonElement
    lpVtbl : DispSVGPolygonElementVTbl*
  end

  struct DispSVGPolylineElementVTbl
    query_interface : Proc(DispSVGPolylineElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPolylineElement*, UInt32)
    release : Proc(DispSVGPolylineElement*, UInt32)
    get_type_info_count : Proc(DispSVGPolylineElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPolylineElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPolylineElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPolylineElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPolylineElement_GUID = "3059000e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPolylineElement = LibC::GUID.new(0x3059000e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPolylineElement
    lpVtbl : DispSVGPolylineElementVTbl*
  end

  struct ISVGGElementVTbl
    query_interface : Proc(ISVGGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGGElement*, UInt32)
    release : Proc(ISVGGElement*, UInt32)
    get_type_info_count : Proc(ISVGGElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGGElement_GUID = "305104e8-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGGElement = LibC::GUID.new(0x305104e8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGGElement
    lpVtbl : ISVGGElementVTbl*
  end

  struct DispSVGGElementVTbl
    query_interface : Proc(DispSVGGElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGGElement*, UInt32)
    release : Proc(DispSVGGElement*, UInt32)
    get_type_info_count : Proc(DispSVGGElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGGElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGGElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGGElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGGElement_GUID = "30590002-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGGElement = LibC::GUID.new(0x30590002_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGGElement
    lpVtbl : DispSVGGElementVTbl*
  end

  struct ISVGSymbolElementVTbl
    query_interface : Proc(ISVGSymbolElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGSymbolElement*, UInt32)
    release : Proc(ISVGSymbolElement*, UInt32)
    get_type_info_count : Proc(ISVGSymbolElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGSymbolElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGSymbolElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGSymbolElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGSymbolElement_GUID = "305104ec-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGSymbolElement = LibC::GUID.new(0x305104ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGSymbolElement
    lpVtbl : ISVGSymbolElementVTbl*
  end

  struct DispSVGSymbolElementVTbl
    query_interface : Proc(DispSVGSymbolElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGSymbolElement*, UInt32)
    release : Proc(DispSVGSymbolElement*, UInt32)
    get_type_info_count : Proc(DispSVGSymbolElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGSymbolElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGSymbolElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGSymbolElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGSymbolElement_GUID = "30590004-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGSymbolElement = LibC::GUID.new(0x30590004_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGSymbolElement
    lpVtbl : DispSVGSymbolElementVTbl*
  end

  struct ISVGDefsElementVTbl
    query_interface : Proc(ISVGDefsElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGDefsElement*, UInt32)
    release : Proc(ISVGDefsElement*, UInt32)
    get_type_info_count : Proc(ISVGDefsElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGDefsElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGDefsElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGDefsElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGDefsElement_GUID = "305104e9-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGDefsElement = LibC::GUID.new(0x305104e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGDefsElement
    lpVtbl : ISVGDefsElementVTbl*
  end

  struct DispSVGDefsElementVTbl
    query_interface : Proc(DispSVGDefsElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGDefsElement*, UInt32)
    release : Proc(DispSVGDefsElement*, UInt32)
    get_type_info_count : Proc(DispSVGDefsElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGDefsElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGDefsElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGDefsElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGDefsElement_GUID = "30590003-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGDefsElement = LibC::GUID.new(0x30590003_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGDefsElement
    lpVtbl : DispSVGDefsElementVTbl*
  end

  struct ISVGAnimatedPathDataVTbl
    query_interface : Proc(ISVGAnimatedPathData*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAnimatedPathData*, UInt32)
    release : Proc(ISVGAnimatedPathData*, UInt32)
    get_type_info_count : Proc(ISVGAnimatedPathData*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAnimatedPathData*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAnimatedPathData*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAnimatedPathData*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList, HRESULT)
    get_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList*, HRESULT)
    putref_normalized_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList, HRESULT)
    get_normalized_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList*, HRESULT)
    putref_animated_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList, HRESULT)
    get_animated_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList*, HRESULT)
    putref_animated_normalized_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList, HRESULT)
    get_animated_normalized_path_seg_list : Proc(ISVGAnimatedPathData*, ISVGPathSegList*, HRESULT)
  end

  ISVGAnimatedPathData_GUID = "30510511-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAnimatedPathData = LibC::GUID.new(0x30510511_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAnimatedPathData
    lpVtbl : ISVGAnimatedPathDataVTbl*
  end

  struct ISVGPathElementVTbl
    query_interface : Proc(ISVGPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPathElement*, UInt32)
    release : Proc(ISVGPathElement*, UInt32)
    get_type_info_count : Proc(ISVGPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_path_length : Proc(ISVGPathElement*, ISVGAnimatedNumber, HRESULT)
    get_path_length : Proc(ISVGPathElement*, ISVGAnimatedNumber*, HRESULT)
    get_total_length : Proc(ISVGPathElement*, Float32*, HRESULT)
    get_point_at_length : Proc(ISVGPathElement*, Float32, ISVGPoint*, HRESULT)
    get_path_seg_at_length : Proc(ISVGPathElement*, Float32, Int32*, HRESULT)
    create_svg_path_seg_close_path : Proc(ISVGPathElement*, ISVGPathSegClosePath*, HRESULT)
    create_svg_path_seg_moveto_abs : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegMovetoAbs*, HRESULT)
    create_svg_path_seg_moveto_rel : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegMovetoRel*, HRESULT)
    create_svg_path_seg_lineto_abs : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegLinetoAbs*, HRESULT)
    create_svg_path_seg_lineto_rel : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegLinetoRel*, HRESULT)
    create_svg_path_seg_curveto_cubic_abs : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoCubicAbs*, HRESULT)
    create_svg_path_seg_curveto_cubic_rel : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoCubicRel*, HRESULT)
    create_svg_path_seg_curveto_quadratic_abs : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoQuadraticAbs*, HRESULT)
    create_svg_path_seg_curveto_quadratic_rel : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoQuadraticRel*, HRESULT)
    create_svg_path_seg_arc_abs : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, Float32, Int16, Int16, ISVGPathSegArcAbs*, HRESULT)
    create_svg_path_seg_arc_rel : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, Float32, Int16, Int16, ISVGPathSegArcRel*, HRESULT)
    create_svg_path_seg_lineto_horizontal_abs : Proc(ISVGPathElement*, Float32, ISVGPathSegLinetoHorizontalAbs*, HRESULT)
    create_svg_path_seg_lineto_horizontal_rel : Proc(ISVGPathElement*, Float32, ISVGPathSegLinetoHorizontalRel*, HRESULT)
    create_svg_path_seg_lineto_vertical_abs : Proc(ISVGPathElement*, Float32, ISVGPathSegLinetoVerticalAbs*, HRESULT)
    create_svg_path_seg_lineto_vertical_rel : Proc(ISVGPathElement*, Float32, ISVGPathSegLinetoVerticalRel*, HRESULT)
    create_svg_path_seg_curveto_cubic_smooth_abs : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoCubicSmoothAbs*, HRESULT)
    create_svg_path_seg_curveto_cubic_smooth_rel : Proc(ISVGPathElement*, Float32, Float32, Float32, Float32, ISVGPathSegCurvetoCubicSmoothRel*, HRESULT)
    create_svg_path_seg_curveto_quadratic_smooth_abs : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegCurvetoQuadraticSmoothAbs*, HRESULT)
    create_svg_path_seg_curveto_quadratic_smooth_rel : Proc(ISVGPathElement*, Float32, Float32, ISVGPathSegCurvetoQuadraticSmoothRel*, HRESULT)
  end

  ISVGPathElement_GUID = "30510512-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPathElement = LibC::GUID.new(0x30510512_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPathElement
    lpVtbl : ISVGPathElementVTbl*
  end

  struct DispSVGPathElementVTbl
    query_interface : Proc(DispSVGPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGPathElement*, UInt32)
    release : Proc(DispSVGPathElement*, UInt32)
    get_type_info_count : Proc(DispSVGPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGPathElement_GUID = "30590011-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGPathElement = LibC::GUID.new(0x30590011_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGPathElement
    lpVtbl : DispSVGPathElementVTbl*
  end

  struct ISVGPreserveAspectRatioVTbl
    query_interface : Proc(ISVGPreserveAspectRatio*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGPreserveAspectRatio*, UInt32)
    release : Proc(ISVGPreserveAspectRatio*, UInt32)
    get_type_info_count : Proc(ISVGPreserveAspectRatio*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGPreserveAspectRatio*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGPreserveAspectRatio*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGPreserveAspectRatio*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_align : Proc(ISVGPreserveAspectRatio*, Int16, HRESULT)
    get_align : Proc(ISVGPreserveAspectRatio*, Int16*, HRESULT)
    put_meet_or_slice : Proc(ISVGPreserveAspectRatio*, Int16, HRESULT)
    get_meet_or_slice : Proc(ISVGPreserveAspectRatio*, Int16*, HRESULT)
  end

  ISVGPreserveAspectRatio_GUID = "305104fa-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGPreserveAspectRatio = LibC::GUID.new(0x305104fa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGPreserveAspectRatio
    lpVtbl : ISVGPreserveAspectRatioVTbl*
  end

  struct ISVGTextElementVTbl
    query_interface : Proc(ISVGTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTextElement*, UInt32)
    release : Proc(ISVGTextElement*, UInt32)
    get_type_info_count : Proc(ISVGTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGTextElement_GUID = "3051051c-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTextElement = LibC::GUID.new(0x3051051c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTextElement
    lpVtbl : ISVGTextElementVTbl*
  end

  struct DispSVGTextElementVTbl
    query_interface : Proc(DispSVGTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTextElement*, UInt32)
    release : Proc(DispSVGTextElement*, UInt32)
    get_type_info_count : Proc(DispSVGTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTextElement_GUID = "30590037-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTextElement = LibC::GUID.new(0x30590037_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTextElement
    lpVtbl : DispSVGTextElementVTbl*
  end

  struct ISVGImageElementVTbl
    query_interface : Proc(ISVGImageElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGImageElement*, UInt32)
    release : Proc(ISVGImageElement*, UInt32)
    get_type_info_count : Proc(ISVGImageElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGImageElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGImageElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGImageElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x : Proc(ISVGImageElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGImageElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGImageElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGImageElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGImageElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGImageElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGImageElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGImageElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGImageElement_GUID = "305104f0-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGImageElement = LibC::GUID.new(0x305104f0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGImageElement
    lpVtbl : ISVGImageElementVTbl*
  end

  struct DispSVGImageElementVTbl
    query_interface : Proc(DispSVGImageElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGImageElement*, UInt32)
    release : Proc(DispSVGImageElement*, UInt32)
    get_type_info_count : Proc(DispSVGImageElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGImageElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGImageElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGImageElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGImageElement_GUID = "30590027-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGImageElement = LibC::GUID.new(0x30590027_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGImageElement
    lpVtbl : DispSVGImageElementVTbl*
  end

  struct ISVGStopElementVTbl
    query_interface : Proc(ISVGStopElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGStopElement*, UInt32)
    release : Proc(ISVGStopElement*, UInt32)
    get_type_info_count : Proc(ISVGStopElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGStopElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGStopElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGStopElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_offset : Proc(ISVGStopElement*, ISVGAnimatedNumber, HRESULT)
    get_offset : Proc(ISVGStopElement*, ISVGAnimatedNumber*, HRESULT)
  end

  ISVGStopElement_GUID = "3051052b-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGStopElement = LibC::GUID.new(0x3051052b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGStopElement
    lpVtbl : ISVGStopElementVTbl*
  end

  struct DispSVGStopElementVTbl
    query_interface : Proc(DispSVGStopElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGStopElement*, UInt32)
    release : Proc(DispSVGStopElement*, UInt32)
    get_type_info_count : Proc(DispSVGStopElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGStopElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGStopElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGStopElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGStopElement_GUID = "3059002d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGStopElement = LibC::GUID.new(0x3059002d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGStopElement
    lpVtbl : DispSVGStopElementVTbl*
  end

  struct ISVGGradientElementVTbl
    query_interface : Proc(ISVGGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGGradientElement*, UInt32)
    release : Proc(ISVGGradientElement*, UInt32)
    get_type_info_count : Proc(ISVGGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_gradient_units : Proc(ISVGGradientElement*, ISVGAnimatedEnumeration, HRESULT)
    get_gradient_units : Proc(ISVGGradientElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_gradient_transform : Proc(ISVGGradientElement*, ISVGAnimatedTransformList, HRESULT)
    get_gradient_transform : Proc(ISVGGradientElement*, ISVGAnimatedTransformList*, HRESULT)
    putref_spread_method : Proc(ISVGGradientElement*, ISVGAnimatedEnumeration, HRESULT)
    get_spread_method : Proc(ISVGGradientElement*, ISVGAnimatedEnumeration*, HRESULT)
  end

  ISVGGradientElement_GUID = "30510528-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGGradientElement = LibC::GUID.new(0x30510528_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGGradientElement
    lpVtbl : ISVGGradientElementVTbl*
  end

  struct DispSVGGradientElementVTbl
    query_interface : Proc(DispSVGGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGGradientElement*, UInt32)
    release : Proc(DispSVGGradientElement*, UInt32)
    get_type_info_count : Proc(DispSVGGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGGradientElement_GUID = "3059002e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGGradientElement = LibC::GUID.new(0x3059002e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGGradientElement
    lpVtbl : DispSVGGradientElementVTbl*
  end

  struct ISVGLinearGradientElementVTbl
    query_interface : Proc(ISVGLinearGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGLinearGradientElement*, UInt32)
    release : Proc(ISVGLinearGradientElement*, UInt32)
    get_type_info_count : Proc(ISVGLinearGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGLinearGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGLinearGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGLinearGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x1 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength, HRESULT)
    get_x1 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_y1 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength, HRESULT)
    get_y1 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_x2 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength, HRESULT)
    get_x2 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_y2 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength, HRESULT)
    get_y2 : Proc(ISVGLinearGradientElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGLinearGradientElement_GUID = "30510529-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGLinearGradientElement = LibC::GUID.new(0x30510529_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGLinearGradientElement
    lpVtbl : ISVGLinearGradientElementVTbl*
  end

  struct DispSVGLinearGradientElementVTbl
    query_interface : Proc(DispSVGLinearGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGLinearGradientElement*, UInt32)
    release : Proc(DispSVGLinearGradientElement*, UInt32)
    get_type_info_count : Proc(DispSVGLinearGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGLinearGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGLinearGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGLinearGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGLinearGradientElement_GUID = "3059002a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGLinearGradientElement = LibC::GUID.new(0x3059002a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGLinearGradientElement
    lpVtbl : DispSVGLinearGradientElementVTbl*
  end

  struct ISVGRadialGradientElementVTbl
    query_interface : Proc(ISVGRadialGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGRadialGradientElement*, UInt32)
    release : Proc(ISVGRadialGradientElement*, UInt32)
    get_type_info_count : Proc(ISVGRadialGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGRadialGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGRadialGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGRadialGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_cx : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength, HRESULT)
    get_cx : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_cy : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength, HRESULT)
    get_cy : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_r : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength, HRESULT)
    get_r : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_fx : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength, HRESULT)
    get_fx : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength*, HRESULT)
    putref_fy : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength, HRESULT)
    get_fy : Proc(ISVGRadialGradientElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGRadialGradientElement_GUID = "3051052a-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGRadialGradientElement = LibC::GUID.new(0x3051052a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGRadialGradientElement
    lpVtbl : ISVGRadialGradientElementVTbl*
  end

  struct DispSVGRadialGradientElementVTbl
    query_interface : Proc(DispSVGRadialGradientElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGRadialGradientElement*, UInt32)
    release : Proc(DispSVGRadialGradientElement*, UInt32)
    get_type_info_count : Proc(DispSVGRadialGradientElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGRadialGradientElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGRadialGradientElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGRadialGradientElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGRadialGradientElement_GUID = "3059002b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGRadialGradientElement = LibC::GUID.new(0x3059002b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGRadialGradientElement
    lpVtbl : DispSVGRadialGradientElementVTbl*
  end

  struct ISVGMaskElementVTbl
    query_interface : Proc(ISVGMaskElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGMaskElement*, UInt32)
    release : Proc(ISVGMaskElement*, UInt32)
    get_type_info_count : Proc(ISVGMaskElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGMaskElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGMaskElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGMaskElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_mask_units : Proc(ISVGMaskElement*, ISVGAnimatedEnumeration, HRESULT)
    get_mask_units : Proc(ISVGMaskElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_mask_content_units : Proc(ISVGMaskElement*, ISVGAnimatedEnumeration, HRESULT)
    get_mask_content_units : Proc(ISVGMaskElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_x : Proc(ISVGMaskElement*, ISVGAnimatedLength, HRESULT)
    get_x : Proc(ISVGMaskElement*, ISVGAnimatedLength*, HRESULT)
    putref_y : Proc(ISVGMaskElement*, ISVGAnimatedLength, HRESULT)
    get_y : Proc(ISVGMaskElement*, ISVGAnimatedLength*, HRESULT)
    putref_width : Proc(ISVGMaskElement*, ISVGAnimatedLength, HRESULT)
    get_width : Proc(ISVGMaskElement*, ISVGAnimatedLength*, HRESULT)
    putref_height : Proc(ISVGMaskElement*, ISVGAnimatedLength, HRESULT)
    get_height : Proc(ISVGMaskElement*, ISVGAnimatedLength*, HRESULT)
  end

  ISVGMaskElement_GUID = "3051052e-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGMaskElement = LibC::GUID.new(0x3051052e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGMaskElement
    lpVtbl : ISVGMaskElementVTbl*
  end

  struct DispSVGMaskElementVTbl
    query_interface : Proc(DispSVGMaskElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGMaskElement*, UInt32)
    release : Proc(DispSVGMaskElement*, UInt32)
    get_type_info_count : Proc(DispSVGMaskElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGMaskElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGMaskElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGMaskElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGMaskElement_GUID = "3059003c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGMaskElement = LibC::GUID.new(0x3059003c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGMaskElement
    lpVtbl : DispSVGMaskElementVTbl*
  end

  struct ISVGMarkerElementVTbl
    query_interface : Proc(ISVGMarkerElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGMarkerElement*, UInt32)
    release : Proc(ISVGMarkerElement*, UInt32)
    get_type_info_count : Proc(ISVGMarkerElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGMarkerElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGMarkerElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGMarkerElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_ref_x : Proc(ISVGMarkerElement*, ISVGAnimatedLength, HRESULT)
    get_ref_x : Proc(ISVGMarkerElement*, ISVGAnimatedLength*, HRESULT)
    putref_ref_y : Proc(ISVGMarkerElement*, ISVGAnimatedLength, HRESULT)
    get_ref_y : Proc(ISVGMarkerElement*, ISVGAnimatedLength*, HRESULT)
    putref_marker_units : Proc(ISVGMarkerElement*, ISVGAnimatedEnumeration, HRESULT)
    get_marker_units : Proc(ISVGMarkerElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_marker_width : Proc(ISVGMarkerElement*, ISVGAnimatedLength, HRESULT)
    get_marker_width : Proc(ISVGMarkerElement*, ISVGAnimatedLength*, HRESULT)
    putref_marker_height : Proc(ISVGMarkerElement*, ISVGAnimatedLength, HRESULT)
    get_marker_height : Proc(ISVGMarkerElement*, ISVGAnimatedLength*, HRESULT)
    putref_orient_type : Proc(ISVGMarkerElement*, ISVGAnimatedEnumeration, HRESULT)
    get_orient_type : Proc(ISVGMarkerElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_orient_angle : Proc(ISVGMarkerElement*, ISVGAnimatedAngle, HRESULT)
    get_orient_angle : Proc(ISVGMarkerElement*, ISVGAnimatedAngle*, HRESULT)
    set_orient_to_auto : Proc(ISVGMarkerElement*, HRESULT)
    set_orient_to_angle : Proc(ISVGMarkerElement*, ISVGAngle, HRESULT)
  end

  ISVGMarkerElement_GUID = "30510525-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGMarkerElement = LibC::GUID.new(0x30510525_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGMarkerElement
    lpVtbl : ISVGMarkerElementVTbl*
  end

  struct DispSVGMarkerElementVTbl
    query_interface : Proc(DispSVGMarkerElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGMarkerElement*, UInt32)
    release : Proc(DispSVGMarkerElement*, UInt32)
    get_type_info_count : Proc(DispSVGMarkerElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGMarkerElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGMarkerElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGMarkerElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGMarkerElement_GUID = "30590036-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGMarkerElement = LibC::GUID.new(0x30590036_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGMarkerElement
    lpVtbl : DispSVGMarkerElementVTbl*
  end

  struct ISVGZoomEventVTbl
    query_interface : Proc(ISVGZoomEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGZoomEvent*, UInt32)
    release : Proc(ISVGZoomEvent*, UInt32)
    get_type_info_count : Proc(ISVGZoomEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGZoomEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGZoomEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGZoomEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_zoom_rect_screen : Proc(ISVGZoomEvent*, ISVGRect*, HRESULT)
    get_previous_scale : Proc(ISVGZoomEvent*, Float32*, HRESULT)
    get_previous_translate : Proc(ISVGZoomEvent*, ISVGPoint*, HRESULT)
    get_new_scale : Proc(ISVGZoomEvent*, Float32*, HRESULT)
    get_new_translate : Proc(ISVGZoomEvent*, ISVGPoint*, HRESULT)
  end

  ISVGZoomEvent_GUID = "3051054e-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGZoomEvent = LibC::GUID.new(0x3051054e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGZoomEvent
    lpVtbl : ISVGZoomEventVTbl*
  end

  struct DispSVGZoomEventVTbl
    query_interface : Proc(DispSVGZoomEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGZoomEvent*, UInt32)
    release : Proc(DispSVGZoomEvent*, UInt32)
    get_type_info_count : Proc(DispSVGZoomEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGZoomEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGZoomEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGZoomEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGZoomEvent_GUID = "30590031-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGZoomEvent = LibC::GUID.new(0x30590031_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGZoomEvent
    lpVtbl : DispSVGZoomEventVTbl*
  end

  struct ISVGAElementVTbl
    query_interface : Proc(ISVGAElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGAElement*, UInt32)
    release : Proc(ISVGAElement*, UInt32)
    get_type_info_count : Proc(ISVGAElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGAElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGAElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGAElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_target : Proc(ISVGAElement*, ISVGAnimatedString, HRESULT)
    get_target : Proc(ISVGAElement*, ISVGAnimatedString*, HRESULT)
  end

  ISVGAElement_GUID = "3051054b-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGAElement = LibC::GUID.new(0x3051054b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGAElement
    lpVtbl : ISVGAElementVTbl*
  end

  struct DispSVGAElementVTbl
    query_interface : Proc(DispSVGAElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGAElement*, UInt32)
    release : Proc(DispSVGAElement*, UInt32)
    get_type_info_count : Proc(DispSVGAElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGAElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGAElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGAElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGAElement_GUID = "30590033-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGAElement = LibC::GUID.new(0x30590033_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGAElement
    lpVtbl : DispSVGAElementVTbl*
  end

  struct ISVGViewElementVTbl
    query_interface : Proc(ISVGViewElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGViewElement*, UInt32)
    release : Proc(ISVGViewElement*, UInt32)
    get_type_info_count : Proc(ISVGViewElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGViewElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGViewElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGViewElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_view_target : Proc(ISVGViewElement*, ISVGStringList, HRESULT)
    get_view_target : Proc(ISVGViewElement*, ISVGStringList*, HRESULT)
  end

  ISVGViewElement_GUID = "3051054c-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGViewElement = LibC::GUID.new(0x3051054c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGViewElement
    lpVtbl : ISVGViewElementVTbl*
  end

  struct DispSVGViewElementVTbl
    query_interface : Proc(DispSVGViewElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGViewElement*, UInt32)
    release : Proc(DispSVGViewElement*, UInt32)
    get_type_info_count : Proc(DispSVGViewElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGViewElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGViewElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGViewElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGViewElement_GUID = "30590034-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGViewElement = LibC::GUID.new(0x30590034_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGViewElement
    lpVtbl : DispSVGViewElementVTbl*
  end

  struct IHTMLMediaErrorVTbl
    query_interface : Proc(IHTMLMediaError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMediaError*, UInt32)
    release : Proc(IHTMLMediaError*, UInt32)
    get_type_info_count : Proc(IHTMLMediaError*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMediaError*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMediaError*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMediaError*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_code : Proc(IHTMLMediaError*, Int16*, HRESULT)
  end

  IHTMLMediaError_GUID = "30510704-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMediaError = LibC::GUID.new(0x30510704_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMediaError
    lpVtbl : IHTMLMediaErrorVTbl*
  end

  struct IHTMLTimeRangesVTbl
    query_interface : Proc(IHTMLTimeRanges*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTimeRanges*, UInt32)
    release : Proc(IHTMLTimeRanges*, UInt32)
    get_type_info_count : Proc(IHTMLTimeRanges*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTimeRanges*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTimeRanges*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTimeRanges*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLTimeRanges*, Int32*, HRESULT)
    start : Proc(IHTMLTimeRanges*, Int32, Float32*, HRESULT)
    end_ : Proc(IHTMLTimeRanges*, Int32, Float32*, HRESULT)
  end

  IHTMLTimeRanges_GUID = "30510705-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTimeRanges = LibC::GUID.new(0x30510705_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTimeRanges
    lpVtbl : IHTMLTimeRangesVTbl*
  end

  struct IHTMLTimeRanges2VTbl
    query_interface : Proc(IHTMLTimeRanges2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLTimeRanges2*, UInt32)
    release : Proc(IHTMLTimeRanges2*, UInt32)
    get_type_info_count : Proc(IHTMLTimeRanges2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLTimeRanges2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLTimeRanges2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLTimeRanges2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_double : Proc(IHTMLTimeRanges2*, Int32, Float64*, HRESULT)
    end_double : Proc(IHTMLTimeRanges2*, Int32, Float64*, HRESULT)
  end

  IHTMLTimeRanges2_GUID = "3051080b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLTimeRanges2 = LibC::GUID.new(0x3051080b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLTimeRanges2
    lpVtbl : IHTMLTimeRanges2VTbl*
  end

  struct IHTMLMediaElementVTbl
    query_interface : Proc(IHTMLMediaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMediaElement*, UInt32)
    release : Proc(IHTMLMediaElement*, UInt32)
    get_type_info_count : Proc(IHTMLMediaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMediaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMediaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMediaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_error : Proc(IHTMLMediaElement*, IHTMLMediaError*, HRESULT)
    put_src : Proc(IHTMLMediaElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLMediaElement*, UInt8**, HRESULT)
    get_current_src : Proc(IHTMLMediaElement*, UInt8**, HRESULT)
    get_network_state : Proc(IHTMLMediaElement*, UInt16*, HRESULT)
    put_preload : Proc(IHTMLMediaElement*, UInt8*, HRESULT)
    get_preload : Proc(IHTMLMediaElement*, UInt8**, HRESULT)
    get_buffered : Proc(IHTMLMediaElement*, IHTMLTimeRanges*, HRESULT)
    load : Proc(IHTMLMediaElement*, HRESULT)
    can_play_type : Proc(IHTMLMediaElement*, UInt8*, UInt8**, HRESULT)
    get_seeking : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_current_time : Proc(IHTMLMediaElement*, Float32, HRESULT)
    get_current_time : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    get_initial_time : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    get_duration : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    get_paused : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_default_playback_rate : Proc(IHTMLMediaElement*, Float32, HRESULT)
    get_default_playback_rate : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    put_playback_rate : Proc(IHTMLMediaElement*, Float32, HRESULT)
    get_playback_rate : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    get_played : Proc(IHTMLMediaElement*, IHTMLTimeRanges*, HRESULT)
    get_seekable : Proc(IHTMLMediaElement*, IHTMLTimeRanges*, HRESULT)
    get_ended : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_autoplay : Proc(IHTMLMediaElement*, Int16, HRESULT)
    get_autoplay : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_loop : Proc(IHTMLMediaElement*, Int16, HRESULT)
    get_loop : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    play : Proc(IHTMLMediaElement*, HRESULT)
    pause : Proc(IHTMLMediaElement*, HRESULT)
    put_controls : Proc(IHTMLMediaElement*, Int16, HRESULT)
    get_controls : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_volume : Proc(IHTMLMediaElement*, Float32, HRESULT)
    get_volume : Proc(IHTMLMediaElement*, Float32*, HRESULT)
    put_muted : Proc(IHTMLMediaElement*, Int16, HRESULT)
    get_muted : Proc(IHTMLMediaElement*, Int16*, HRESULT)
    put_autobuffer : Proc(IHTMLMediaElement*, Int16, HRESULT)
    get_autobuffer : Proc(IHTMLMediaElement*, Int16*, HRESULT)
  end

  IHTMLMediaElement_GUID = "30510706-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMediaElement = LibC::GUID.new(0x30510706_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMediaElement
    lpVtbl : IHTMLMediaElementVTbl*
  end

  struct IHTMLMediaElement2VTbl
    query_interface : Proc(IHTMLMediaElement2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMediaElement2*, UInt32)
    release : Proc(IHTMLMediaElement2*, UInt32)
    get_type_info_count : Proc(IHTMLMediaElement2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMediaElement2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMediaElement2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMediaElement2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_current_time_double : Proc(IHTMLMediaElement2*, Float64, HRESULT)
    get_current_time_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
    get_initial_time_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
    get_duration_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
    put_default_playback_rate_double : Proc(IHTMLMediaElement2*, Float64, HRESULT)
    get_default_playback_rate_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
    put_playback_rate_double : Proc(IHTMLMediaElement2*, Float64, HRESULT)
    get_playback_rate_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
    put_volume_double : Proc(IHTMLMediaElement2*, Float64, HRESULT)
    get_volume_double : Proc(IHTMLMediaElement2*, Float64*, HRESULT)
  end

  IHTMLMediaElement2_GUID = "30510809-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMediaElement2 = LibC::GUID.new(0x30510809_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMediaElement2
    lpVtbl : IHTMLMediaElement2VTbl*
  end

  struct IHTMLMSMediaElementVTbl
    query_interface : Proc(IHTMLMSMediaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLMSMediaElement*, UInt32)
    release : Proc(IHTMLMSMediaElement*, UInt32)
    get_type_info_count : Proc(IHTMLMSMediaElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLMSMediaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLMSMediaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLMSMediaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_ms_play_to_disabled : Proc(IHTMLMSMediaElement*, Int16, HRESULT)
    get_ms_play_to_disabled : Proc(IHTMLMSMediaElement*, Int16*, HRESULT)
    put_ms_play_to_primary : Proc(IHTMLMSMediaElement*, Int16, HRESULT)
    get_ms_play_to_primary : Proc(IHTMLMSMediaElement*, Int16*, HRESULT)
  end

  IHTMLMSMediaElement_GUID = "30510792-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLMSMediaElement = LibC::GUID.new(0x30510792_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLMSMediaElement
    lpVtbl : IHTMLMSMediaElementVTbl*
  end

  struct IHTMLSourceElementVTbl
    query_interface : Proc(IHTMLSourceElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLSourceElement*, UInt32)
    release : Proc(IHTMLSourceElement*, UInt32)
    get_type_info_count : Proc(IHTMLSourceElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLSourceElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLSourceElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLSourceElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_src : Proc(IHTMLSourceElement*, UInt8*, HRESULT)
    get_src : Proc(IHTMLSourceElement*, UInt8**, HRESULT)
    put_type : Proc(IHTMLSourceElement*, UInt8*, HRESULT)
    get_type : Proc(IHTMLSourceElement*, UInt8**, HRESULT)
    put_media : Proc(IHTMLSourceElement*, UInt8*, HRESULT)
    get_media : Proc(IHTMLSourceElement*, UInt8**, HRESULT)
  end

  IHTMLSourceElement_GUID = "30510707-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLSourceElement = LibC::GUID.new(0x30510707_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLSourceElement
    lpVtbl : IHTMLSourceElementVTbl*
  end

  struct IHTMLAudioElementVTbl
    query_interface : Proc(IHTMLAudioElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAudioElement*, UInt32)
    release : Proc(IHTMLAudioElement*, UInt32)
    get_type_info_count : Proc(IHTMLAudioElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAudioElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAudioElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAudioElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IHTMLAudioElement_GUID = "30510708-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAudioElement = LibC::GUID.new(0x30510708_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAudioElement
    lpVtbl : IHTMLAudioElementVTbl*
  end

  struct IHTMLVideoElementVTbl
    query_interface : Proc(IHTMLVideoElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLVideoElement*, UInt32)
    release : Proc(IHTMLVideoElement*, UInt32)
    get_type_info_count : Proc(IHTMLVideoElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLVideoElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLVideoElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLVideoElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_width : Proc(IHTMLVideoElement*, Int32, HRESULT)
    get_width : Proc(IHTMLVideoElement*, Int32*, HRESULT)
    put_height : Proc(IHTMLVideoElement*, Int32, HRESULT)
    get_height : Proc(IHTMLVideoElement*, Int32*, HRESULT)
    get_video_width : Proc(IHTMLVideoElement*, UInt32*, HRESULT)
    get_video_height : Proc(IHTMLVideoElement*, UInt32*, HRESULT)
    put_poster : Proc(IHTMLVideoElement*, UInt8*, HRESULT)
    get_poster : Proc(IHTMLVideoElement*, UInt8**, HRESULT)
  end

  IHTMLVideoElement_GUID = "30510709-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLVideoElement = LibC::GUID.new(0x30510709_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLVideoElement
    lpVtbl : IHTMLVideoElementVTbl*
  end

  struct IHTMLAudioElementFactoryVTbl
    query_interface : Proc(IHTMLAudioElementFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAudioElementFactory*, UInt32)
    release : Proc(IHTMLAudioElementFactory*, UInt32)
    get_type_info_count : Proc(IHTMLAudioElementFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAudioElementFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAudioElementFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAudioElementFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IHTMLAudioElementFactory*, VARIANT, IHTMLAudioElement*, HRESULT)
  end

  IHTMLAudioElementFactory_GUID = "305107eb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAudioElementFactory = LibC::GUID.new(0x305107eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAudioElementFactory
    lpVtbl : IHTMLAudioElementFactoryVTbl*
  end

  struct DispHTMLMediaErrorVTbl
    query_interface : Proc(DispHTMLMediaError*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMediaError*, UInt32)
    release : Proc(DispHTMLMediaError*, UInt32)
    get_type_info_count : Proc(DispHTMLMediaError*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMediaError*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMediaError*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMediaError*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMediaError_GUID = "30590086-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMediaError = LibC::GUID.new(0x30590086_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMediaError
    lpVtbl : DispHTMLMediaErrorVTbl*
  end

  struct DispHTMLTimeRangesVTbl
    query_interface : Proc(DispHTMLTimeRanges*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLTimeRanges*, UInt32)
    release : Proc(DispHTMLTimeRanges*, UInt32)
    get_type_info_count : Proc(DispHTMLTimeRanges*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLTimeRanges*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLTimeRanges*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLTimeRanges*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLTimeRanges_GUID = "30590087-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLTimeRanges = LibC::GUID.new(0x30590087_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLTimeRanges
    lpVtbl : DispHTMLTimeRangesVTbl*
  end

  struct DispHTMLMediaElementVTbl
    query_interface : Proc(DispHTMLMediaElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLMediaElement*, UInt32)
    release : Proc(DispHTMLMediaElement*, UInt32)
    get_type_info_count : Proc(DispHTMLMediaElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLMediaElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLMediaElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLMediaElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLMediaElement_GUID = "30590088-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLMediaElement = LibC::GUID.new(0x30590088_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLMediaElement
    lpVtbl : DispHTMLMediaElementVTbl*
  end

  struct DispHTMLSourceElementVTbl
    query_interface : Proc(DispHTMLSourceElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLSourceElement*, UInt32)
    release : Proc(DispHTMLSourceElement*, UInt32)
    get_type_info_count : Proc(DispHTMLSourceElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLSourceElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLSourceElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLSourceElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLSourceElement_GUID = "30590089-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLSourceElement = LibC::GUID.new(0x30590089_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLSourceElement
    lpVtbl : DispHTMLSourceElementVTbl*
  end

  struct DispHTMLAudioElementVTbl
    query_interface : Proc(DispHTMLAudioElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAudioElement*, UInt32)
    release : Proc(DispHTMLAudioElement*, UInt32)
    get_type_info_count : Proc(DispHTMLAudioElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAudioElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAudioElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAudioElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAudioElement_GUID = "3059008a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAudioElement = LibC::GUID.new(0x3059008a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAudioElement
    lpVtbl : DispHTMLAudioElementVTbl*
  end

  struct DispHTMLVideoElementVTbl
    query_interface : Proc(DispHTMLVideoElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLVideoElement*, UInt32)
    release : Proc(DispHTMLVideoElement*, UInt32)
    get_type_info_count : Proc(DispHTMLVideoElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLVideoElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLVideoElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLVideoElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLVideoElement_GUID = "3059008b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLVideoElement = LibC::GUID.new(0x3059008b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLVideoElement
    lpVtbl : DispHTMLVideoElementVTbl*
  end

  struct ISVGSwitchElementVTbl
    query_interface : Proc(ISVGSwitchElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGSwitchElement*, UInt32)
    release : Proc(ISVGSwitchElement*, UInt32)
    get_type_info_count : Proc(ISVGSwitchElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGSwitchElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGSwitchElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGSwitchElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGSwitchElement_GUID = "305104f1-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGSwitchElement = LibC::GUID.new(0x305104f1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGSwitchElement
    lpVtbl : ISVGSwitchElementVTbl*
  end

  struct DispSVGSwitchElementVTbl
    query_interface : Proc(DispSVGSwitchElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGSwitchElement*, UInt32)
    release : Proc(DispSVGSwitchElement*, UInt32)
    get_type_info_count : Proc(DispSVGSwitchElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGSwitchElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGSwitchElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGSwitchElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGSwitchElement_GUID = "30590030-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGSwitchElement = LibC::GUID.new(0x30590030_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGSwitchElement
    lpVtbl : DispSVGSwitchElementVTbl*
  end

  struct ISVGDescElementVTbl
    query_interface : Proc(ISVGDescElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGDescElement*, UInt32)
    release : Proc(ISVGDescElement*, UInt32)
    get_type_info_count : Proc(ISVGDescElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGDescElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGDescElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGDescElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGDescElement_GUID = "305104ea-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGDescElement = LibC::GUID.new(0x305104ea_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGDescElement
    lpVtbl : ISVGDescElementVTbl*
  end

  struct DispSVGDescElementVTbl
    query_interface : Proc(DispSVGDescElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGDescElement*, UInt32)
    release : Proc(DispSVGDescElement*, UInt32)
    get_type_info_count : Proc(DispSVGDescElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGDescElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGDescElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGDescElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGDescElement_GUID = "30590005-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGDescElement = LibC::GUID.new(0x30590005_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGDescElement
    lpVtbl : DispSVGDescElementVTbl*
  end

  struct ISVGTitleElementVTbl
    query_interface : Proc(ISVGTitleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTitleElement*, UInt32)
    release : Proc(ISVGTitleElement*, UInt32)
    get_type_info_count : Proc(ISVGTitleElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTitleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTitleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTitleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGTitleElement_GUID = "305104eb-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTitleElement = LibC::GUID.new(0x305104eb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTitleElement
    lpVtbl : ISVGTitleElementVTbl*
  end

  struct DispSVGTitleElementVTbl
    query_interface : Proc(DispSVGTitleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTitleElement*, UInt32)
    release : Proc(DispSVGTitleElement*, UInt32)
    get_type_info_count : Proc(DispSVGTitleElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTitleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTitleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTitleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTitleElement_GUID = "30590006-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTitleElement = LibC::GUID.new(0x30590006_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTitleElement
    lpVtbl : DispSVGTitleElementVTbl*
  end

  struct ISVGMetadataElementVTbl
    query_interface : Proc(ISVGMetadataElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGMetadataElement*, UInt32)
    release : Proc(ISVGMetadataElement*, UInt32)
    get_type_info_count : Proc(ISVGMetadataElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGMetadataElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGMetadataElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGMetadataElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGMetadataElement_GUID = "30510560-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGMetadataElement = LibC::GUID.new(0x30510560_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGMetadataElement
    lpVtbl : ISVGMetadataElementVTbl*
  end

  struct DispSVGMetadataElementVTbl
    query_interface : Proc(DispSVGMetadataElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGMetadataElement*, UInt32)
    release : Proc(DispSVGMetadataElement*, UInt32)
    get_type_info_count : Proc(DispSVGMetadataElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGMetadataElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGMetadataElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGMetadataElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGMetadataElement_GUID = "3059002f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGMetadataElement = LibC::GUID.new(0x3059002f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGMetadataElement
    lpVtbl : DispSVGMetadataElementVTbl*
  end

  struct ISVGElementInstanceListVTbl
    query_interface : Proc(ISVGElementInstanceList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGElementInstanceList*, UInt32)
    release : Proc(ISVGElementInstanceList*, UInt32)
    get_type_info_count : Proc(ISVGElementInstanceList*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGElementInstanceList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGElementInstanceList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGElementInstanceList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(ISVGElementInstanceList*, Int32*, HRESULT)
    item : Proc(ISVGElementInstanceList*, Int32, ISVGElementInstance*, HRESULT)
  end

  ISVGElementInstanceList_GUID = "305104ef-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGElementInstanceList = LibC::GUID.new(0x305104ef_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGElementInstanceList
    lpVtbl : ISVGElementInstanceListVTbl*
  end

  struct DispSVGElementInstanceVTbl
    query_interface : Proc(DispSVGElementInstance*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGElementInstance*, UInt32)
    release : Proc(DispSVGElementInstance*, UInt32)
    get_type_info_count : Proc(DispSVGElementInstance*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGElementInstance*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGElementInstance*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGElementInstance*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGElementInstance_GUID = "30590007-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGElementInstance = LibC::GUID.new(0x30590007_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGElementInstance
    lpVtbl : DispSVGElementInstanceVTbl*
  end

  struct DispSVGElementInstanceListVTbl
    query_interface : Proc(DispSVGElementInstanceList*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGElementInstanceList*, UInt32)
    release : Proc(DispSVGElementInstanceList*, UInt32)
    get_type_info_count : Proc(DispSVGElementInstanceList*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGElementInstanceList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGElementInstanceList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGElementInstanceList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGElementInstanceList_GUID = "30590008-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGElementInstanceList = LibC::GUID.new(0x30590008_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGElementInstanceList
    lpVtbl : DispSVGElementInstanceListVTbl*
  end

  struct IDOMExceptionVTbl
    query_interface : Proc(IDOMException*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMException*, UInt32)
    release : Proc(IDOMException*, UInt32)
    get_type_info_count : Proc(IDOMException*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_code : Proc(IDOMException*, Int32, HRESULT)
    get_code : Proc(IDOMException*, Int32*, HRESULT)
    get_message : Proc(IDOMException*, UInt8**, HRESULT)
  end

  IDOMException_GUID = "3051072b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMException = LibC::GUID.new(0x3051072b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMException
    lpVtbl : IDOMExceptionVTbl*
  end

  struct DispDOMExceptionVTbl
    query_interface : Proc(DispDOMException*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMException*, UInt32)
    release : Proc(DispDOMException*, UInt32)
    get_type_info_count : Proc(DispDOMException*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMException_GUID = "30590094-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMException = LibC::GUID.new(0x30590094_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMException
    lpVtbl : DispDOMExceptionVTbl*
  end

  struct IRangeExceptionVTbl
    query_interface : Proc(IRangeException*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRangeException*, UInt32)
    release : Proc(IRangeException*, UInt32)
    get_type_info_count : Proc(IRangeException*, UInt32*, HRESULT)
    get_type_info : Proc(IRangeException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRangeException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRangeException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_code : Proc(IRangeException*, Int32, HRESULT)
    get_code : Proc(IRangeException*, Int32*, HRESULT)
    get_message : Proc(IRangeException*, UInt8**, HRESULT)
  end

  IRangeException_GUID = "3051072d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IRangeException = LibC::GUID.new(0x3051072d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IRangeException
    lpVtbl : IRangeExceptionVTbl*
  end

  struct DispRangeExceptionVTbl
    query_interface : Proc(DispRangeException*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispRangeException*, UInt32)
    release : Proc(DispRangeException*, UInt32)
    get_type_info_count : Proc(DispRangeException*, UInt32*, HRESULT)
    get_type_info : Proc(DispRangeException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispRangeException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispRangeException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispRangeException_GUID = "30590095-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispRangeException = LibC::GUID.new(0x30590095_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispRangeException
    lpVtbl : DispRangeExceptionVTbl*
  end

  struct ISVGExceptionVTbl
    query_interface : Proc(ISVGException*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGException*, UInt32)
    release : Proc(ISVGException*, UInt32)
    get_type_info_count : Proc(ISVGException*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_code : Proc(ISVGException*, Int32, HRESULT)
    get_code : Proc(ISVGException*, Int32*, HRESULT)
    get_message : Proc(ISVGException*, UInt8**, HRESULT)
  end

  ISVGException_GUID = "3051072f-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGException = LibC::GUID.new(0x3051072f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGException
    lpVtbl : ISVGExceptionVTbl*
  end

  struct DispSVGExceptionVTbl
    query_interface : Proc(DispSVGException*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGException*, UInt32)
    release : Proc(DispSVGException*, UInt32)
    get_type_info_count : Proc(DispSVGException*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGException_GUID = "30590096-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGException = LibC::GUID.new(0x30590096_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGException
    lpVtbl : DispSVGExceptionVTbl*
  end

  struct IEventExceptionVTbl
    query_interface : Proc(IEventException*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEventException*, UInt32)
    release : Proc(IEventException*, UInt32)
    get_type_info_count : Proc(IEventException*, UInt32*, HRESULT)
    get_type_info : Proc(IEventException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IEventException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IEventException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_code : Proc(IEventException*, Int32, HRESULT)
    get_code : Proc(IEventException*, Int32*, HRESULT)
    get_message : Proc(IEventException*, UInt8**, HRESULT)
  end

  IEventException_GUID = "3051073a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IEventException = LibC::GUID.new(0x3051073a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IEventException
    lpVtbl : IEventExceptionVTbl*
  end

  struct DispEventExceptionVTbl
    query_interface : Proc(DispEventException*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispEventException*, UInt32)
    release : Proc(DispEventException*, UInt32)
    get_type_info_count : Proc(DispEventException*, UInt32*, HRESULT)
    get_type_info : Proc(DispEventException*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispEventException*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispEventException*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispEventException_GUID = "30590099-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispEventException = LibC::GUID.new(0x30590099_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispEventException
    lpVtbl : DispEventExceptionVTbl*
  end

  struct ISVGScriptElementVTbl
    query_interface : Proc(ISVGScriptElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGScriptElement*, UInt32)
    release : Proc(ISVGScriptElement*, UInt32)
    get_type_info_count : Proc(ISVGScriptElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGScriptElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGScriptElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGScriptElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(ISVGScriptElement*, UInt8*, HRESULT)
    get_type : Proc(ISVGScriptElement*, UInt8**, HRESULT)
  end

  ISVGScriptElement_GUID = "3051054d-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGScriptElement = LibC::GUID.new(0x3051054d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGScriptElement
    lpVtbl : ISVGScriptElementVTbl*
  end

  struct DispSVGScriptElementVTbl
    query_interface : Proc(DispSVGScriptElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGScriptElement*, UInt32)
    release : Proc(DispSVGScriptElement*, UInt32)
    get_type_info_count : Proc(DispSVGScriptElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGScriptElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGScriptElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGScriptElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGScriptElement_GUID = "30590039-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGScriptElement = LibC::GUID.new(0x30590039_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGScriptElement
    lpVtbl : DispSVGScriptElementVTbl*
  end

  struct ISVGStyleElementVTbl
    query_interface : Proc(ISVGStyleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGStyleElement*, UInt32)
    release : Proc(ISVGStyleElement*, UInt32)
    get_type_info_count : Proc(ISVGStyleElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGStyleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGStyleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGStyleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_type : Proc(ISVGStyleElement*, UInt8*, HRESULT)
    get_type : Proc(ISVGStyleElement*, UInt8**, HRESULT)
    put_media : Proc(ISVGStyleElement*, UInt8*, HRESULT)
    get_media : Proc(ISVGStyleElement*, UInt8**, HRESULT)
  end

  ISVGStyleElement_GUID = "305104f3-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGStyleElement = LibC::GUID.new(0x305104f3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGStyleElement
    lpVtbl : ISVGStyleElementVTbl*
  end

  struct DispSVGStyleElementVTbl
    query_interface : Proc(DispSVGStyleElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGStyleElement*, UInt32)
    release : Proc(DispSVGStyleElement*, UInt32)
    get_type_info_count : Proc(DispSVGStyleElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGStyleElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGStyleElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGStyleElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGStyleElement_GUID = "30590029-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGStyleElement = LibC::GUID.new(0x30590029_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGStyleElement
    lpVtbl : DispSVGStyleElementVTbl*
  end

  struct ISVGTextContentElementVTbl
    query_interface : Proc(ISVGTextContentElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTextContentElement*, UInt32)
    release : Proc(ISVGTextContentElement*, UInt32)
    get_type_info_count : Proc(ISVGTextContentElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTextContentElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTextContentElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTextContentElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_text_length : Proc(ISVGTextContentElement*, ISVGAnimatedLength, HRESULT)
    get_text_length : Proc(ISVGTextContentElement*, ISVGAnimatedLength*, HRESULT)
    putref_length_adjust : Proc(ISVGTextContentElement*, ISVGAnimatedEnumeration, HRESULT)
    get_length_adjust : Proc(ISVGTextContentElement*, ISVGAnimatedEnumeration*, HRESULT)
    get_number_of_chars : Proc(ISVGTextContentElement*, Int32*, HRESULT)
    get_computed_text_length : Proc(ISVGTextContentElement*, Float32*, HRESULT)
    get_sub_string_length : Proc(ISVGTextContentElement*, Int32, Int32, Float32*, HRESULT)
    get_start_position_of_char : Proc(ISVGTextContentElement*, Int32, ISVGPoint*, HRESULT)
    get_end_position_of_char : Proc(ISVGTextContentElement*, Int32, ISVGPoint*, HRESULT)
    get_extent_of_char : Proc(ISVGTextContentElement*, Int32, ISVGRect*, HRESULT)
    get_rotation_of_char : Proc(ISVGTextContentElement*, Int32, Float32*, HRESULT)
    get_char_num_at_position : Proc(ISVGTextContentElement*, ISVGPoint, Int32*, HRESULT)
    select_sub_string : Proc(ISVGTextContentElement*, Int32, Int32, HRESULT)
  end

  ISVGTextContentElement_GUID = "3051051a-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTextContentElement = LibC::GUID.new(0x3051051a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTextContentElement
    lpVtbl : ISVGTextContentElementVTbl*
  end

  struct DispSVGTextContentElementVTbl
    query_interface : Proc(DispSVGTextContentElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTextContentElement*, UInt32)
    release : Proc(DispSVGTextContentElement*, UInt32)
    get_type_info_count : Proc(DispSVGTextContentElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTextContentElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTextContentElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTextContentElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTextContentElement_GUID = "30590035-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTextContentElement = LibC::GUID.new(0x30590035_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTextContentElement
    lpVtbl : DispSVGTextContentElementVTbl*
  end

  struct ISVGTextPositioningElementVTbl
    query_interface : Proc(ISVGTextPositioningElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTextPositioningElement*, UInt32)
    release : Proc(ISVGTextPositioningElement*, UInt32)
    get_type_info_count : Proc(ISVGTextPositioningElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTextPositioningElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTextPositioningElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTextPositioningElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_x : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList, HRESULT)
    get_x : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList*, HRESULT)
    putref_y : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList, HRESULT)
    get_y : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList*, HRESULT)
    putref_dx : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList, HRESULT)
    get_dx : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList*, HRESULT)
    putref_dy : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList, HRESULT)
    get_dy : Proc(ISVGTextPositioningElement*, ISVGAnimatedLengthList*, HRESULT)
    putref_rotate : Proc(ISVGTextPositioningElement*, ISVGAnimatedNumberList, HRESULT)
    get_rotate : Proc(ISVGTextPositioningElement*, ISVGAnimatedNumberList*, HRESULT)
  end

  ISVGTextPositioningElement_GUID = "3051051b-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTextPositioningElement = LibC::GUID.new(0x3051051b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTextPositioningElement
    lpVtbl : ISVGTextPositioningElementVTbl*
  end

  struct DispSVGTextPositioningElementVTbl
    query_interface : Proc(DispSVGTextPositioningElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTextPositioningElement*, UInt32)
    release : Proc(DispSVGTextPositioningElement*, UInt32)
    get_type_info_count : Proc(DispSVGTextPositioningElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTextPositioningElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTextPositioningElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTextPositioningElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTextPositioningElement_GUID = "30590038-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTextPositioningElement = LibC::GUID.new(0x30590038_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTextPositioningElement
    lpVtbl : DispSVGTextPositioningElementVTbl*
  end

  struct DispDOMDocumentTypeVTbl
    query_interface : Proc(DispDOMDocumentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMDocumentType*, UInt32)
    release : Proc(DispDOMDocumentType*, UInt32)
    get_type_info_count : Proc(DispDOMDocumentType*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMDocumentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMDocumentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMDocumentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMDocumentType_GUID = "30590098-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMDocumentType = LibC::GUID.new(0x30590098_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMDocumentType
    lpVtbl : DispDOMDocumentTypeVTbl*
  end

  struct DispNodeIteratorVTbl
    query_interface : Proc(DispNodeIterator*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispNodeIterator*, UInt32)
    release : Proc(DispNodeIterator*, UInt32)
    get_type_info_count : Proc(DispNodeIterator*, UInt32*, HRESULT)
    get_type_info : Proc(DispNodeIterator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispNodeIterator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispNodeIterator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispNodeIterator_GUID = "3059009c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispNodeIterator = LibC::GUID.new(0x3059009c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispNodeIterator
    lpVtbl : DispNodeIteratorVTbl*
  end

  struct DispTreeWalkerVTbl
    query_interface : Proc(DispTreeWalker*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispTreeWalker*, UInt32)
    release : Proc(DispTreeWalker*, UInt32)
    get_type_info_count : Proc(DispTreeWalker*, UInt32*, HRESULT)
    get_type_info : Proc(DispTreeWalker*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispTreeWalker*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispTreeWalker*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispTreeWalker_GUID = "3059009d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispTreeWalker = LibC::GUID.new(0x3059009d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispTreeWalker
    lpVtbl : DispTreeWalkerVTbl*
  end

  struct DispDOMProcessingInstructionVTbl
    query_interface : Proc(DispDOMProcessingInstruction*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMProcessingInstruction*, UInt32)
    release : Proc(DispDOMProcessingInstruction*, UInt32)
    get_type_info_count : Proc(DispDOMProcessingInstruction*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMProcessingInstruction*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMProcessingInstruction*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMProcessingInstruction*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMProcessingInstruction_GUID = "3059009b-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMProcessingInstruction = LibC::GUID.new(0x3059009b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMProcessingInstruction
    lpVtbl : DispDOMProcessingInstructionVTbl*
  end

  struct IHTMLPerformanceNavigationVTbl
    query_interface : Proc(IHTMLPerformanceNavigation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPerformanceNavigation*, UInt32)
    release : Proc(IHTMLPerformanceNavigation*, UInt32)
    get_type_info_count : Proc(IHTMLPerformanceNavigation*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPerformanceNavigation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPerformanceNavigation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPerformanceNavigation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IHTMLPerformanceNavigation*, UInt32*, HRESULT)
    get_redirect_count : Proc(IHTMLPerformanceNavigation*, UInt32*, HRESULT)
    to_string : Proc(IHTMLPerformanceNavigation*, UInt8**, HRESULT)
    to_json : Proc(IHTMLPerformanceNavigation*, VARIANT*, HRESULT)
  end

  IHTMLPerformanceNavigation_GUID = "30510750-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPerformanceNavigation = LibC::GUID.new(0x30510750_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPerformanceNavigation
    lpVtbl : IHTMLPerformanceNavigationVTbl*
  end

  struct IHTMLPerformanceTimingVTbl
    query_interface : Proc(IHTMLPerformanceTiming*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPerformanceTiming*, UInt32)
    release : Proc(IHTMLPerformanceTiming*, UInt32)
    get_type_info_count : Proc(IHTMLPerformanceTiming*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPerformanceTiming*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPerformanceTiming*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPerformanceTiming*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_navigation_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_unload_event_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_unload_event_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_redirect_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_redirect_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_fetch_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_domain_lookup_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_domain_lookup_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_connect_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_connect_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_request_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_response_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_response_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_dom_loading : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_dom_interactive : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_dom_content_loaded_event_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_dom_content_loaded_event_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_dom_complete : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_load_event_start : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_load_event_end : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    get_ms_first_paint : Proc(IHTMLPerformanceTiming*, UInt64*, HRESULT)
    to_string : Proc(IHTMLPerformanceTiming*, UInt8**, HRESULT)
    to_json : Proc(IHTMLPerformanceTiming*, VARIANT*, HRESULT)
  end

  IHTMLPerformanceTiming_GUID = "30510752-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPerformanceTiming = LibC::GUID.new(0x30510752_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPerformanceTiming
    lpVtbl : IHTMLPerformanceTimingVTbl*
  end

  struct DispHTMLPerformanceVTbl
    query_interface : Proc(DispHTMLPerformance*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLPerformance*, UInt32)
    release : Proc(DispHTMLPerformance*, UInt32)
    get_type_info_count : Proc(DispHTMLPerformance*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLPerformance*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLPerformance*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLPerformance*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLPerformance_GUID = "3059009f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLPerformance = LibC::GUID.new(0x3059009f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLPerformance
    lpVtbl : DispHTMLPerformanceVTbl*
  end

  struct DispHTMLPerformanceNavigationVTbl
    query_interface : Proc(DispHTMLPerformanceNavigation*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLPerformanceNavigation*, UInt32)
    release : Proc(DispHTMLPerformanceNavigation*, UInt32)
    get_type_info_count : Proc(DispHTMLPerformanceNavigation*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLPerformanceNavigation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLPerformanceNavigation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLPerformanceNavigation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLPerformanceNavigation_GUID = "305900a0-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLPerformanceNavigation = LibC::GUID.new(0x305900a0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLPerformanceNavigation
    lpVtbl : DispHTMLPerformanceNavigationVTbl*
  end

  struct DispHTMLPerformanceTimingVTbl
    query_interface : Proc(DispHTMLPerformanceTiming*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLPerformanceTiming*, UInt32)
    release : Proc(DispHTMLPerformanceTiming*, UInt32)
    get_type_info_count : Proc(DispHTMLPerformanceTiming*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLPerformanceTiming*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLPerformanceTiming*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLPerformanceTiming*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLPerformanceTiming_GUID = "305900a1-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLPerformanceTiming = LibC::GUID.new(0x305900a1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLPerformanceTiming
    lpVtbl : DispHTMLPerformanceTimingVTbl*
  end

  struct ISVGTSpanElementVTbl
    query_interface : Proc(ISVGTSpanElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTSpanElement*, UInt32)
    release : Proc(ISVGTSpanElement*, UInt32)
    get_type_info_count : Proc(ISVGTSpanElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTSpanElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTSpanElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTSpanElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ISVGTSpanElement_GUID = "3051051d-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTSpanElement = LibC::GUID.new(0x3051051d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTSpanElement
    lpVtbl : ISVGTSpanElementVTbl*
  end

  struct DispSVGTSpanElementVTbl
    query_interface : Proc(DispSVGTSpanElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTSpanElement*, UInt32)
    release : Proc(DispSVGTSpanElement*, UInt32)
    get_type_info_count : Proc(DispSVGTSpanElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTSpanElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTSpanElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTSpanElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTSpanElement_GUID = "3059003a-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTSpanElement = LibC::GUID.new(0x3059003a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTSpanElement
    lpVtbl : DispSVGTSpanElementVTbl*
  end

  struct ITemplatePrinterVTbl
    query_interface : Proc(ITemplatePrinter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITemplatePrinter*, UInt32)
    release : Proc(ITemplatePrinter*, UInt32)
    get_type_info_count : Proc(ITemplatePrinter*, UInt32*, HRESULT)
    get_type_info : Proc(ITemplatePrinter*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITemplatePrinter*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITemplatePrinter*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_doc : Proc(ITemplatePrinter*, UInt8*, Int16*, HRESULT)
    stop_doc : Proc(ITemplatePrinter*, HRESULT)
    print_blank_page : Proc(ITemplatePrinter*, HRESULT)
    print_page : Proc(ITemplatePrinter*, IDispatch, HRESULT)
    ensure_print_dialog_defaults : Proc(ITemplatePrinter*, Int16*, HRESULT)
    show_print_dialog : Proc(ITemplatePrinter*, Int16*, HRESULT)
    show_page_setup_dialog : Proc(ITemplatePrinter*, Int16*, HRESULT)
    print_non_native : Proc(ITemplatePrinter*, IUnknown, Int16*, HRESULT)
    print_non_native_frames : Proc(ITemplatePrinter*, IUnknown, Int16, HRESULT)
    put_frameset_document : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_frameset_document : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_frame_active : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_frame_active : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_frame_as_shown : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_frame_as_shown : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_selection : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_selection : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_selected_pages : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_selected_pages : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_current_page : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_current_page : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_current_page_avail : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_current_page_avail : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_collate : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_collate : Proc(ITemplatePrinter*, Int16*, HRESULT)
    get_duplex : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_copies : Proc(ITemplatePrinter*, UInt16, HRESULT)
    get_copies : Proc(ITemplatePrinter*, UInt16*, HRESULT)
    put_page_from : Proc(ITemplatePrinter*, UInt16, HRESULT)
    get_page_from : Proc(ITemplatePrinter*, UInt16*, HRESULT)
    put_page_to : Proc(ITemplatePrinter*, UInt16, HRESULT)
    get_page_to : Proc(ITemplatePrinter*, UInt16*, HRESULT)
    put_table_of_links : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_table_of_links : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_all_linked_documents : Proc(ITemplatePrinter*, Int16, HRESULT)
    get_all_linked_documents : Proc(ITemplatePrinter*, Int16*, HRESULT)
    put_header : Proc(ITemplatePrinter*, UInt8*, HRESULT)
    get_header : Proc(ITemplatePrinter*, UInt8**, HRESULT)
    put_footer : Proc(ITemplatePrinter*, UInt8*, HRESULT)
    get_footer : Proc(ITemplatePrinter*, UInt8**, HRESULT)
    put_margin_left : Proc(ITemplatePrinter*, Int32, HRESULT)
    get_margin_left : Proc(ITemplatePrinter*, Int32*, HRESULT)
    put_margin_right : Proc(ITemplatePrinter*, Int32, HRESULT)
    get_margin_right : Proc(ITemplatePrinter*, Int32*, HRESULT)
    put_margin_top : Proc(ITemplatePrinter*, Int32, HRESULT)
    get_margin_top : Proc(ITemplatePrinter*, Int32*, HRESULT)
    put_margin_bottom : Proc(ITemplatePrinter*, Int32, HRESULT)
    get_margin_bottom : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_page_width : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_page_height : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_unprintable_left : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_unprintable_top : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_unprintable_right : Proc(ITemplatePrinter*, Int32*, HRESULT)
    get_unprintable_bottom : Proc(ITemplatePrinter*, Int32*, HRESULT)
    update_page_status : Proc(ITemplatePrinter*, Int32*, HRESULT)
  end

  ITemplatePrinter_GUID = "3050f6b4-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITemplatePrinter = LibC::GUID.new(0x3050f6b4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITemplatePrinter
    lpVtbl : ITemplatePrinterVTbl*
  end

  struct ITemplatePrinter2VTbl
    query_interface : Proc(ITemplatePrinter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITemplatePrinter2*, UInt32)
    release : Proc(ITemplatePrinter2*, UInt32)
    get_type_info_count : Proc(ITemplatePrinter2*, UInt32*, HRESULT)
    get_type_info : Proc(ITemplatePrinter2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITemplatePrinter2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITemplatePrinter2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_doc : Proc(ITemplatePrinter2*, UInt8*, Int16*, HRESULT)
    stop_doc : Proc(ITemplatePrinter2*, HRESULT)
    print_blank_page : Proc(ITemplatePrinter2*, HRESULT)
    print_page : Proc(ITemplatePrinter2*, IDispatch, HRESULT)
    ensure_print_dialog_defaults : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    show_print_dialog : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    show_page_setup_dialog : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    print_non_native : Proc(ITemplatePrinter2*, IUnknown, Int16*, HRESULT)
    print_non_native_frames : Proc(ITemplatePrinter2*, IUnknown, Int16, HRESULT)
    put_frameset_document : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_frameset_document : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_frame_active : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_frame_active : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_frame_as_shown : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_frame_as_shown : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_selection : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_selection : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_selected_pages : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_selected_pages : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_current_page : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_current_page : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_current_page_avail : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_current_page_avail : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_collate : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_collate : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    get_duplex : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_copies : Proc(ITemplatePrinter2*, UInt16, HRESULT)
    get_copies : Proc(ITemplatePrinter2*, UInt16*, HRESULT)
    put_page_from : Proc(ITemplatePrinter2*, UInt16, HRESULT)
    get_page_from : Proc(ITemplatePrinter2*, UInt16*, HRESULT)
    put_page_to : Proc(ITemplatePrinter2*, UInt16, HRESULT)
    get_page_to : Proc(ITemplatePrinter2*, UInt16*, HRESULT)
    put_table_of_links : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_table_of_links : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_all_linked_documents : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_all_linked_documents : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_header : Proc(ITemplatePrinter2*, UInt8*, HRESULT)
    get_header : Proc(ITemplatePrinter2*, UInt8**, HRESULT)
    put_footer : Proc(ITemplatePrinter2*, UInt8*, HRESULT)
    get_footer : Proc(ITemplatePrinter2*, UInt8**, HRESULT)
    put_margin_left : Proc(ITemplatePrinter2*, Int32, HRESULT)
    get_margin_left : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    put_margin_right : Proc(ITemplatePrinter2*, Int32, HRESULT)
    get_margin_right : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    put_margin_top : Proc(ITemplatePrinter2*, Int32, HRESULT)
    get_margin_top : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    put_margin_bottom : Proc(ITemplatePrinter2*, Int32, HRESULT)
    get_margin_bottom : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_page_width : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_page_height : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_unprintable_left : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_unprintable_top : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_unprintable_right : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    get_unprintable_bottom : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    update_page_status : Proc(ITemplatePrinter2*, Int32*, HRESULT)
    put_selection_enabled : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_selection_enabled : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_frame_active_enabled : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_frame_active_enabled : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    put_orientation : Proc(ITemplatePrinter2*, UInt8*, HRESULT)
    get_orientation : Proc(ITemplatePrinter2*, UInt8**, HRESULT)
    put_use_printer_copy_collate : Proc(ITemplatePrinter2*, Int16, HRESULT)
    get_use_printer_copy_collate : Proc(ITemplatePrinter2*, Int16*, HRESULT)
    device_supports : Proc(ITemplatePrinter2*, UInt8*, VARIANT*, HRESULT)
  end

  ITemplatePrinter2_GUID = "3050f83f-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITemplatePrinter2 = LibC::GUID.new(0x3050f83f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITemplatePrinter2
    lpVtbl : ITemplatePrinter2VTbl*
  end

  struct ITemplatePrinter3VTbl
    query_interface : Proc(ITemplatePrinter3*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITemplatePrinter3*, UInt32)
    release : Proc(ITemplatePrinter3*, UInt32)
    get_type_info_count : Proc(ITemplatePrinter3*, UInt32*, HRESULT)
    get_type_info : Proc(ITemplatePrinter3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITemplatePrinter3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITemplatePrinter3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_doc : Proc(ITemplatePrinter3*, UInt8*, Int16*, HRESULT)
    stop_doc : Proc(ITemplatePrinter3*, HRESULT)
    print_blank_page : Proc(ITemplatePrinter3*, HRESULT)
    print_page : Proc(ITemplatePrinter3*, IDispatch, HRESULT)
    ensure_print_dialog_defaults : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    show_print_dialog : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    show_page_setup_dialog : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    print_non_native : Proc(ITemplatePrinter3*, IUnknown, Int16*, HRESULT)
    print_non_native_frames : Proc(ITemplatePrinter3*, IUnknown, Int16, HRESULT)
    put_frameset_document : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_frameset_document : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_frame_active : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_frame_active : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_frame_as_shown : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_frame_as_shown : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_selection : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_selection : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_selected_pages : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_selected_pages : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_current_page : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_current_page : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_current_page_avail : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_current_page_avail : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_collate : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_collate : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    get_duplex : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_copies : Proc(ITemplatePrinter3*, UInt16, HRESULT)
    get_copies : Proc(ITemplatePrinter3*, UInt16*, HRESULT)
    put_page_from : Proc(ITemplatePrinter3*, UInt16, HRESULT)
    get_page_from : Proc(ITemplatePrinter3*, UInt16*, HRESULT)
    put_page_to : Proc(ITemplatePrinter3*, UInt16, HRESULT)
    get_page_to : Proc(ITemplatePrinter3*, UInt16*, HRESULT)
    put_table_of_links : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_table_of_links : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_all_linked_documents : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_all_linked_documents : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_header : Proc(ITemplatePrinter3*, UInt8*, HRESULT)
    get_header : Proc(ITemplatePrinter3*, UInt8**, HRESULT)
    put_footer : Proc(ITemplatePrinter3*, UInt8*, HRESULT)
    get_footer : Proc(ITemplatePrinter3*, UInt8**, HRESULT)
    put_margin_left : Proc(ITemplatePrinter3*, Int32, HRESULT)
    get_margin_left : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    put_margin_right : Proc(ITemplatePrinter3*, Int32, HRESULT)
    get_margin_right : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    put_margin_top : Proc(ITemplatePrinter3*, Int32, HRESULT)
    get_margin_top : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    put_margin_bottom : Proc(ITemplatePrinter3*, Int32, HRESULT)
    get_margin_bottom : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_page_width : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_page_height : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_unprintable_left : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_unprintable_top : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_unprintable_right : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    get_unprintable_bottom : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    update_page_status : Proc(ITemplatePrinter3*, Int32*, HRESULT)
    put_selection_enabled : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_selection_enabled : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_frame_active_enabled : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_frame_active_enabled : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    put_orientation : Proc(ITemplatePrinter3*, UInt8*, HRESULT)
    get_orientation : Proc(ITemplatePrinter3*, UInt8**, HRESULT)
    put_use_printer_copy_collate : Proc(ITemplatePrinter3*, Int16, HRESULT)
    get_use_printer_copy_collate : Proc(ITemplatePrinter3*, Int16*, HRESULT)
    device_supports : Proc(ITemplatePrinter3*, UInt8*, VARIANT*, HRESULT)
    put_header_footer_font : Proc(ITemplatePrinter3*, UInt8*, HRESULT)
    get_header_footer_font : Proc(ITemplatePrinter3*, UInt8**, HRESULT)
    get_page_margin_top : Proc(ITemplatePrinter3*, IDispatch, Int32, Int32, VARIANT*, HRESULT)
    get_page_margin_right : Proc(ITemplatePrinter3*, IDispatch, Int32, Int32, VARIANT*, HRESULT)
    get_page_margin_bottom : Proc(ITemplatePrinter3*, IDispatch, Int32, Int32, VARIANT*, HRESULT)
    get_page_margin_left : Proc(ITemplatePrinter3*, IDispatch, Int32, Int32, VARIANT*, HRESULT)
    get_page_margin_top_important : Proc(ITemplatePrinter3*, IDispatch, Int16*, HRESULT)
    get_page_margin_right_important : Proc(ITemplatePrinter3*, IDispatch, Int16*, HRESULT)
    get_page_margin_bottom_important : Proc(ITemplatePrinter3*, IDispatch, Int16*, HRESULT)
    get_page_margin_left_important : Proc(ITemplatePrinter3*, IDispatch, Int16*, HRESULT)
  end

  ITemplatePrinter3_GUID = "305104a3-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITemplatePrinter3 = LibC::GUID.new(0x305104a3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITemplatePrinter3
    lpVtbl : ITemplatePrinter3VTbl*
  end

  struct IPrintManagerTemplatePrinterVTbl
    query_interface : Proc(IPrintManagerTemplatePrinter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrintManagerTemplatePrinter*, UInt32)
    release : Proc(IPrintManagerTemplatePrinter*, UInt32)
    get_type_info_count : Proc(IPrintManagerTemplatePrinter*, UInt32*, HRESULT)
    get_type_info : Proc(IPrintManagerTemplatePrinter*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IPrintManagerTemplatePrinter*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IPrintManagerTemplatePrinter*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_print : Proc(IPrintManagerTemplatePrinter*, HRESULT)
    draw_preview_page : Proc(IPrintManagerTemplatePrinter*, IDispatch, Int32, HRESULT)
    set_page_count : Proc(IPrintManagerTemplatePrinter*, Int32, HRESULT)
    invalidate_preview : Proc(IPrintManagerTemplatePrinter*, HRESULT)
    get_print_task_option_value : Proc(IPrintManagerTemplatePrinter*, UInt8*, VARIANT*, HRESULT)
    end_print : Proc(IPrintManagerTemplatePrinter*, HRESULT)
  end

  IPrintManagerTemplatePrinter_GUID = "f633be14-9eff-4c4d-929e-05717b21b3e6"
  IID_IPrintManagerTemplatePrinter = LibC::GUID.new(0xf633be14_u32, 0x9eff_u16, 0x4c4d_u16, StaticArray[0x92_u8, 0x9e_u8, 0x5_u8, 0x71_u8, 0x7b_u8, 0x21_u8, 0xb3_u8, 0xe6_u8])
  struct IPrintManagerTemplatePrinter
    lpVtbl : IPrintManagerTemplatePrinterVTbl*
  end

  struct IPrintManagerTemplatePrinter2VTbl
    query_interface : Proc(IPrintManagerTemplatePrinter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrintManagerTemplatePrinter2*, UInt32)
    release : Proc(IPrintManagerTemplatePrinter2*, UInt32)
    get_type_info_count : Proc(IPrintManagerTemplatePrinter2*, UInt32*, HRESULT)
    get_type_info : Proc(IPrintManagerTemplatePrinter2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IPrintManagerTemplatePrinter2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IPrintManagerTemplatePrinter2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_print : Proc(IPrintManagerTemplatePrinter2*, HRESULT)
    draw_preview_page : Proc(IPrintManagerTemplatePrinter2*, IDispatch, Int32, HRESULT)
    set_page_count : Proc(IPrintManagerTemplatePrinter2*, Int32, HRESULT)
    invalidate_preview : Proc(IPrintManagerTemplatePrinter2*, HRESULT)
    get_print_task_option_value : Proc(IPrintManagerTemplatePrinter2*, UInt8*, VARIANT*, HRESULT)
    end_print : Proc(IPrintManagerTemplatePrinter2*, HRESULT)
    get_show_header_footer : Proc(IPrintManagerTemplatePrinter2*, Int16*, HRESULT)
    get_shrink_to_fit : Proc(IPrintManagerTemplatePrinter2*, Int16*, HRESULT)
    get_percent_scale : Proc(IPrintManagerTemplatePrinter2*, Float32*, HRESULT)
  end

  IPrintManagerTemplatePrinter2_GUID = "c6403497-7493-4f09-8016-54b03e9bda69"
  IID_IPrintManagerTemplatePrinter2 = LibC::GUID.new(0xc6403497_u32, 0x7493_u16, 0x4f09_u16, StaticArray[0x80_u8, 0x16_u8, 0x54_u8, 0xb0_u8, 0x3e_u8, 0x9b_u8, 0xda_u8, 0x69_u8])
  struct IPrintManagerTemplatePrinter2
    lpVtbl : IPrintManagerTemplatePrinter2VTbl*
  end

  struct DispCPrintManagerTemplatePrinterVTbl
    query_interface : Proc(DispCPrintManagerTemplatePrinter*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispCPrintManagerTemplatePrinter*, UInt32)
    release : Proc(DispCPrintManagerTemplatePrinter*, UInt32)
    get_type_info_count : Proc(DispCPrintManagerTemplatePrinter*, UInt32*, HRESULT)
    get_type_info : Proc(DispCPrintManagerTemplatePrinter*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispCPrintManagerTemplatePrinter*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispCPrintManagerTemplatePrinter*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispCPrintManagerTemplatePrinter_GUID = "305900e9-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispCPrintManagerTemplatePrinter = LibC::GUID.new(0x305900e9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispCPrintManagerTemplatePrinter
    lpVtbl : DispCPrintManagerTemplatePrinterVTbl*
  end

  struct ISVGTextPathElementVTbl
    query_interface : Proc(ISVGTextPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISVGTextPathElement*, UInt32)
    release : Proc(ISVGTextPathElement*, UInt32)
    get_type_info_count : Proc(ISVGTextPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(ISVGTextPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ISVGTextPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ISVGTextPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    putref_start_offset : Proc(ISVGTextPathElement*, ISVGAnimatedLength, HRESULT)
    get_start_offset : Proc(ISVGTextPathElement*, ISVGAnimatedLength*, HRESULT)
    putref_method : Proc(ISVGTextPathElement*, ISVGAnimatedEnumeration, HRESULT)
    get_method : Proc(ISVGTextPathElement*, ISVGAnimatedEnumeration*, HRESULT)
    putref_spacing : Proc(ISVGTextPathElement*, ISVGAnimatedEnumeration, HRESULT)
    get_spacing : Proc(ISVGTextPathElement*, ISVGAnimatedEnumeration*, HRESULT)
  end

  ISVGTextPathElement_GUID = "3051051f-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISVGTextPathElement = LibC::GUID.new(0x3051051f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISVGTextPathElement
    lpVtbl : ISVGTextPathElementVTbl*
  end

  struct DispSVGTextPathElementVTbl
    query_interface : Proc(DispSVGTextPathElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispSVGTextPathElement*, UInt32)
    release : Proc(DispSVGTextPathElement*, UInt32)
    get_type_info_count : Proc(DispSVGTextPathElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispSVGTextPathElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispSVGTextPathElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispSVGTextPathElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispSVGTextPathElement_GUID = "3059003d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispSVGTextPathElement = LibC::GUID.new(0x3059003d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispSVGTextPathElement
    lpVtbl : DispSVGTextPathElementVTbl*
  end

  struct IDOMXmlSerializerVTbl
    query_interface : Proc(IDOMXmlSerializer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMXmlSerializer*, UInt32)
    release : Proc(IDOMXmlSerializer*, UInt32)
    get_type_info_count : Proc(IDOMXmlSerializer*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMXmlSerializer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMXmlSerializer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMXmlSerializer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    serialize_to_string : Proc(IDOMXmlSerializer*, IHTMLDOMNode, UInt8**, HRESULT)
  end

  IDOMXmlSerializer_GUID = "3051077d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMXmlSerializer = LibC::GUID.new(0x3051077d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMXmlSerializer
    lpVtbl : IDOMXmlSerializerVTbl*
  end

  struct IDOMParserVTbl
    query_interface : Proc(IDOMParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMParser*, UInt32)
    release : Proc(IDOMParser*, UInt32)
    get_type_info_count : Proc(IDOMParser*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMParser*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMParser*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMParser*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    parse_from_string : Proc(IDOMParser*, UInt8*, UInt8*, IHTMLDocument2*, HRESULT)
  end

  IDOMParser_GUID = "30510781-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMParser = LibC::GUID.new(0x30510781_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMParser
    lpVtbl : IDOMParserVTbl*
  end

  struct DispXMLSerializerVTbl
    query_interface : Proc(DispXMLSerializer*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispXMLSerializer*, UInt32)
    release : Proc(DispXMLSerializer*, UInt32)
    get_type_info_count : Proc(DispXMLSerializer*, UInt32*, HRESULT)
    get_type_info : Proc(DispXMLSerializer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispXMLSerializer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispXMLSerializer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispXMLSerializer_GUID = "305900ad-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispXMLSerializer = LibC::GUID.new(0x305900ad_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispXMLSerializer
    lpVtbl : DispXMLSerializerVTbl*
  end

  struct DispDOMParserVTbl
    query_interface : Proc(DispDOMParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMParser*, UInt32)
    release : Proc(DispDOMParser*, UInt32)
    get_type_info_count : Proc(DispDOMParser*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMParser*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMParser*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMParser*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMParser_GUID = "305900ae-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMParser = LibC::GUID.new(0x305900ae_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMParser
    lpVtbl : DispDOMParserVTbl*
  end

  struct IDOMXmlSerializerFactoryVTbl
    query_interface : Proc(IDOMXmlSerializerFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMXmlSerializerFactory*, UInt32)
    release : Proc(IDOMXmlSerializerFactory*, UInt32)
    get_type_info_count : Proc(IDOMXmlSerializerFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMXmlSerializerFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMXmlSerializerFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMXmlSerializerFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IDOMXmlSerializerFactory*, IDOMXmlSerializer*, HRESULT)
  end

  IDOMXmlSerializerFactory_GUID = "3051077f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMXmlSerializerFactory = LibC::GUID.new(0x3051077f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMXmlSerializerFactory
    lpVtbl : IDOMXmlSerializerFactoryVTbl*
  end

  struct IDOMParserFactoryVTbl
    query_interface : Proc(IDOMParserFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMParserFactory*, UInt32)
    release : Proc(IDOMParserFactory*, UInt32)
    get_type_info_count : Proc(IDOMParserFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMParserFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMParserFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMParserFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create : Proc(IDOMParserFactory*, IDOMParser*, HRESULT)
  end

  IDOMParserFactory_GUID = "30510783-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMParserFactory = LibC::GUID.new(0x30510783_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMParserFactory
    lpVtbl : IDOMParserFactoryVTbl*
  end

  struct DispHTMLSemanticElementVTbl
    query_interface : Proc(DispHTMLSemanticElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLSemanticElement*, UInt32)
    release : Proc(DispHTMLSemanticElement*, UInt32)
    get_type_info_count : Proc(DispHTMLSemanticElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLSemanticElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLSemanticElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLSemanticElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLSemanticElement_GUID = "305900ba-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLSemanticElement = LibC::GUID.new(0x305900ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLSemanticElement
    lpVtbl : DispHTMLSemanticElementVTbl*
  end

  struct IHTMLProgressElementVTbl
    query_interface : Proc(IHTMLProgressElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLProgressElement*, UInt32)
    release : Proc(IHTMLProgressElement*, UInt32)
    get_type_info_count : Proc(IHTMLProgressElement*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLProgressElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLProgressElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLProgressElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_value : Proc(IHTMLProgressElement*, Float32, HRESULT)
    get_value : Proc(IHTMLProgressElement*, Float32*, HRESULT)
    put_max : Proc(IHTMLProgressElement*, Float32, HRESULT)
    get_max : Proc(IHTMLProgressElement*, Float32*, HRESULT)
    get_position : Proc(IHTMLProgressElement*, Float32*, HRESULT)
    get_form : Proc(IHTMLProgressElement*, IHTMLFormElement*, HRESULT)
  end

  IHTMLProgressElement_GUID = "3050f2d6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLProgressElement = LibC::GUID.new(0x3050f2d6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLProgressElement
    lpVtbl : IHTMLProgressElementVTbl*
  end

  struct DispHTMLProgressElementVTbl
    query_interface : Proc(DispHTMLProgressElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLProgressElement*, UInt32)
    release : Proc(DispHTMLProgressElement*, UInt32)
    get_type_info_count : Proc(DispHTMLProgressElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLProgressElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLProgressElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLProgressElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLProgressElement_GUID = "305900af-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLProgressElement = LibC::GUID.new(0x305900af_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLProgressElement
    lpVtbl : DispHTMLProgressElementVTbl*
  end

  struct IDOMMSTransitionEventVTbl
    query_interface : Proc(IDOMMSTransitionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMSTransitionEvent*, UInt32)
    release : Proc(IDOMMSTransitionEvent*, UInt32)
    get_type_info_count : Proc(IDOMMSTransitionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMSTransitionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMSTransitionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMSTransitionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_property_name : Proc(IDOMMSTransitionEvent*, UInt8**, HRESULT)
    get_elapsed_time : Proc(IDOMMSTransitionEvent*, Float32*, HRESULT)
    init_ms_transition_event : Proc(IDOMMSTransitionEvent*, UInt8*, Int16, Int16, UInt8*, Float32, HRESULT)
  end

  IDOMMSTransitionEvent_GUID = "305107b5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMSTransitionEvent = LibC::GUID.new(0x305107b5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMSTransitionEvent
    lpVtbl : IDOMMSTransitionEventVTbl*
  end

  struct DispDOMMSTransitionEventVTbl
    query_interface : Proc(DispDOMMSTransitionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMSTransitionEvent*, UInt32)
    release : Proc(DispDOMMSTransitionEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMSTransitionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMSTransitionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMSTransitionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMSTransitionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMSTransitionEvent_GUID = "305900bb-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMSTransitionEvent = LibC::GUID.new(0x305900bb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMSTransitionEvent
    lpVtbl : DispDOMMSTransitionEventVTbl*
  end

  struct IDOMMSAnimationEventVTbl
    query_interface : Proc(IDOMMSAnimationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMSAnimationEvent*, UInt32)
    release : Proc(IDOMMSAnimationEvent*, UInt32)
    get_type_info_count : Proc(IDOMMSAnimationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMSAnimationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMSAnimationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMSAnimationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_animation_name : Proc(IDOMMSAnimationEvent*, UInt8**, HRESULT)
    get_elapsed_time : Proc(IDOMMSAnimationEvent*, Float32*, HRESULT)
    init_ms_animation_event : Proc(IDOMMSAnimationEvent*, UInt8*, Int16, Int16, UInt8*, Float32, HRESULT)
  end

  IDOMMSAnimationEvent_GUID = "305107b7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMSAnimationEvent = LibC::GUID.new(0x305107b7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMSAnimationEvent
    lpVtbl : IDOMMSAnimationEventVTbl*
  end

  struct DispDOMMSAnimationEventVTbl
    query_interface : Proc(DispDOMMSAnimationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMSAnimationEvent*, UInt32)
    release : Proc(DispDOMMSAnimationEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMSAnimationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMSAnimationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMSAnimationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMSAnimationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMSAnimationEvent_GUID = "305900bc-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMSAnimationEvent = LibC::GUID.new(0x305900bc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMSAnimationEvent
    lpVtbl : DispDOMMSAnimationEventVTbl*
  end

  struct IWebGeocoordinatesVTbl
    query_interface : Proc(IWebGeocoordinates*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebGeocoordinates*, UInt32)
    release : Proc(IWebGeocoordinates*, UInt32)
    get_type_info_count : Proc(IWebGeocoordinates*, UInt32*, HRESULT)
    get_type_info : Proc(IWebGeocoordinates*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebGeocoordinates*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebGeocoordinates*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_latitude : Proc(IWebGeocoordinates*, Float64*, HRESULT)
    get_longitude : Proc(IWebGeocoordinates*, Float64*, HRESULT)
    get_altitude : Proc(IWebGeocoordinates*, VARIANT*, HRESULT)
    get_accuracy : Proc(IWebGeocoordinates*, Float64*, HRESULT)
    get_altitude_accuracy : Proc(IWebGeocoordinates*, VARIANT*, HRESULT)
    get_heading : Proc(IWebGeocoordinates*, VARIANT*, HRESULT)
    get_speed : Proc(IWebGeocoordinates*, VARIANT*, HRESULT)
  end

  IWebGeocoordinates_GUID = "305107c7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IWebGeocoordinates = LibC::GUID.new(0x305107c7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IWebGeocoordinates
    lpVtbl : IWebGeocoordinatesVTbl*
  end

  struct IWebGeopositionErrorVTbl
    query_interface : Proc(IWebGeopositionError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebGeopositionError*, UInt32)
    release : Proc(IWebGeopositionError*, UInt32)
    get_type_info_count : Proc(IWebGeopositionError*, UInt32*, HRESULT)
    get_type_info : Proc(IWebGeopositionError*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebGeopositionError*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebGeopositionError*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_code : Proc(IWebGeopositionError*, Int32*, HRESULT)
    get_message : Proc(IWebGeopositionError*, UInt8**, HRESULT)
  end

  IWebGeopositionError_GUID = "305107c9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IWebGeopositionError = LibC::GUID.new(0x305107c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IWebGeopositionError
    lpVtbl : IWebGeopositionErrorVTbl*
  end

  struct IWebGeopositionVTbl
    query_interface : Proc(IWebGeoposition*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebGeoposition*, UInt32)
    release : Proc(IWebGeoposition*, UInt32)
    get_type_info_count : Proc(IWebGeoposition*, UInt32*, HRESULT)
    get_type_info : Proc(IWebGeoposition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWebGeoposition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWebGeoposition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_coords : Proc(IWebGeoposition*, IWebGeocoordinates*, HRESULT)
    get_timestamp : Proc(IWebGeoposition*, UInt64*, HRESULT)
  end

  IWebGeoposition_GUID = "305107cd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IWebGeoposition = LibC::GUID.new(0x305107cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IWebGeoposition
    lpVtbl : IWebGeopositionVTbl*
  end

  struct DispWebGeolocationVTbl
    query_interface : Proc(DispWebGeolocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispWebGeolocation*, UInt32)
    release : Proc(DispWebGeolocation*, UInt32)
    get_type_info_count : Proc(DispWebGeolocation*, UInt32*, HRESULT)
    get_type_info : Proc(DispWebGeolocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispWebGeolocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispWebGeolocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispWebGeolocation_GUID = "305900bd-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispWebGeolocation = LibC::GUID.new(0x305900bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispWebGeolocation
    lpVtbl : DispWebGeolocationVTbl*
  end

  struct DispWebGeocoordinatesVTbl
    query_interface : Proc(DispWebGeocoordinates*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispWebGeocoordinates*, UInt32)
    release : Proc(DispWebGeocoordinates*, UInt32)
    get_type_info_count : Proc(DispWebGeocoordinates*, UInt32*, HRESULT)
    get_type_info : Proc(DispWebGeocoordinates*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispWebGeocoordinates*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispWebGeocoordinates*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispWebGeocoordinates_GUID = "305900be-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispWebGeocoordinates = LibC::GUID.new(0x305900be_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispWebGeocoordinates
    lpVtbl : DispWebGeocoordinatesVTbl*
  end

  struct DispWebGeopositionErrorVTbl
    query_interface : Proc(DispWebGeopositionError*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispWebGeopositionError*, UInt32)
    release : Proc(DispWebGeopositionError*, UInt32)
    get_type_info_count : Proc(DispWebGeopositionError*, UInt32*, HRESULT)
    get_type_info : Proc(DispWebGeopositionError*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispWebGeopositionError*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispWebGeopositionError*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispWebGeopositionError_GUID = "305900bf-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispWebGeopositionError = LibC::GUID.new(0x305900bf_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispWebGeopositionError
    lpVtbl : DispWebGeopositionErrorVTbl*
  end

  struct DispWebGeopositionVTbl
    query_interface : Proc(DispWebGeoposition*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispWebGeoposition*, UInt32)
    release : Proc(DispWebGeoposition*, UInt32)
    get_type_info_count : Proc(DispWebGeoposition*, UInt32*, HRESULT)
    get_type_info : Proc(DispWebGeoposition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispWebGeoposition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispWebGeoposition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispWebGeoposition_GUID = "305900c1-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispWebGeoposition = LibC::GUID.new(0x305900c1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispWebGeoposition
    lpVtbl : DispWebGeopositionVTbl*
  end

  struct IClientCapsVTbl
    query_interface : Proc(IClientCaps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IClientCaps*, UInt32)
    release : Proc(IClientCaps*, UInt32)
    get_type_info_count : Proc(IClientCaps*, UInt32*, HRESULT)
    get_type_info : Proc(IClientCaps*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IClientCaps*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IClientCaps*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_java_enabled : Proc(IClientCaps*, Int16*, HRESULT)
    get_cookie_enabled : Proc(IClientCaps*, Int16*, HRESULT)
    get_cpu_class : Proc(IClientCaps*, UInt8**, HRESULT)
    get_system_language : Proc(IClientCaps*, UInt8**, HRESULT)
    get_user_language : Proc(IClientCaps*, UInt8**, HRESULT)
    get_platform : Proc(IClientCaps*, UInt8**, HRESULT)
    get_connection_speed : Proc(IClientCaps*, Int32*, HRESULT)
    get_on_line : Proc(IClientCaps*, Int16*, HRESULT)
    get_color_depth : Proc(IClientCaps*, Int32*, HRESULT)
    get_buffer_depth : Proc(IClientCaps*, Int32*, HRESULT)
    get_width : Proc(IClientCaps*, Int32*, HRESULT)
    get_height : Proc(IClientCaps*, Int32*, HRESULT)
    get_avail_height : Proc(IClientCaps*, Int32*, HRESULT)
    get_avail_width : Proc(IClientCaps*, Int32*, HRESULT)
    get_connection_type : Proc(IClientCaps*, UInt8**, HRESULT)
    is_component_installed : Proc(IClientCaps*, UInt8*, UInt8*, UInt8*, Int16*, HRESULT)
    get_component_version : Proc(IClientCaps*, UInt8*, UInt8*, UInt8**, HRESULT)
    compare_versions : Proc(IClientCaps*, UInt8*, UInt8*, Int32*, HRESULT)
    add_component_request : Proc(IClientCaps*, UInt8*, UInt8*, UInt8*, HRESULT)
    do_component_request : Proc(IClientCaps*, Int16*, HRESULT)
    clear_component_request : Proc(IClientCaps*, HRESULT)
  end

  IClientCaps_GUID = "7e8bc44d-aeff-11d1-89c2-00c04fb6bfc4"
  IID_IClientCaps = LibC::GUID.new(0x7e8bc44d_u32, 0xaeff_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xc2_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbf_u8, 0xc4_u8])
  struct IClientCaps
    lpVtbl : IClientCapsVTbl*
  end

  struct IDOMMSManipulationEventVTbl
    query_interface : Proc(IDOMMSManipulationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMMSManipulationEvent*, UInt32)
    release : Proc(IDOMMSManipulationEvent*, UInt32)
    get_type_info_count : Proc(IDOMMSManipulationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMMSManipulationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMMSManipulationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMMSManipulationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_last_state : Proc(IDOMMSManipulationEvent*, Int32*, HRESULT)
    get_current_state : Proc(IDOMMSManipulationEvent*, Int32*, HRESULT)
    init_ms_manipulation_event : Proc(IDOMMSManipulationEvent*, UInt8*, Int16, Int16, IHTMLWindow2, Int32, Int32, Int32, HRESULT)
  end

  IDOMMSManipulationEvent_GUID = "30510816-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMMSManipulationEvent = LibC::GUID.new(0x30510816_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMMSManipulationEvent
    lpVtbl : IDOMMSManipulationEventVTbl*
  end

  struct DispDOMMSManipulationEventVTbl
    query_interface : Proc(DispDOMMSManipulationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMMSManipulationEvent*, UInt32)
    release : Proc(DispDOMMSManipulationEvent*, UInt32)
    get_type_info_count : Proc(DispDOMMSManipulationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMMSManipulationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMMSManipulationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMMSManipulationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMMSManipulationEvent_GUID = "305900e1-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMMSManipulationEvent = LibC::GUID.new(0x305900e1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMMSManipulationEvent
    lpVtbl : DispDOMMSManipulationEventVTbl*
  end

  struct IDOMCloseEventVTbl
    query_interface : Proc(IDOMCloseEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMCloseEvent*, UInt32)
    release : Proc(IDOMCloseEvent*, UInt32)
    get_type_info_count : Proc(IDOMCloseEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IDOMCloseEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDOMCloseEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDOMCloseEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_was_clean : Proc(IDOMCloseEvent*, Int16*, HRESULT)
    init_close_event : Proc(IDOMCloseEvent*, UInt8*, Int16, Int16, Int16, Int32, UInt8*, HRESULT)
  end

  IDOMCloseEvent_GUID = "305107ff-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMCloseEvent = LibC::GUID.new(0x305107ff_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMCloseEvent
    lpVtbl : IDOMCloseEventVTbl*
  end

  struct DispDOMCloseEventVTbl
    query_interface : Proc(DispDOMCloseEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispDOMCloseEvent*, UInt32)
    release : Proc(DispDOMCloseEvent*, UInt32)
    get_type_info_count : Proc(DispDOMCloseEvent*, UInt32*, HRESULT)
    get_type_info : Proc(DispDOMCloseEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispDOMCloseEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispDOMCloseEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispDOMCloseEvent_GUID = "305900dc-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispDOMCloseEvent = LibC::GUID.new(0x305900dc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispDOMCloseEvent
    lpVtbl : DispDOMCloseEventVTbl*
  end

  struct DispApplicationCacheVTbl
    query_interface : Proc(DispApplicationCache*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispApplicationCache*, UInt32)
    release : Proc(DispApplicationCache*, UInt32)
    get_type_info_count : Proc(DispApplicationCache*, UInt32*, HRESULT)
    get_type_info : Proc(DispApplicationCache*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispApplicationCache*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispApplicationCache*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispApplicationCache_GUID = "305900e4-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispApplicationCache = LibC::GUID.new(0x305900e4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispApplicationCache
    lpVtbl : DispApplicationCacheVTbl*
  end

  struct ICSSFilterSiteVTbl
    query_interface : Proc(ICSSFilterSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICSSFilterSite*, UInt32)
    release : Proc(ICSSFilterSite*, UInt32)
    get_element : Proc(ICSSFilterSite*, IHTMLElement*, HRESULT)
    fire_on_filter_change_event : Proc(ICSSFilterSite*, HRESULT)
  end

  ICSSFilterSite_GUID = "3050f3ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICSSFilterSite = LibC::GUID.new(0x3050f3ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICSSFilterSite
    lpVtbl : ICSSFilterSiteVTbl*
  end

  struct IMarkupPointerVTbl
    query_interface : Proc(IMarkupPointer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupPointer*, UInt32)
    release : Proc(IMarkupPointer*, UInt32)
    owning_doc : Proc(IMarkupPointer*, IHTMLDocument2*, HRESULT)
    gravity : Proc(IMarkupPointer*, POINTER_GRAVITY*, HRESULT)
    set_gravity : Proc(IMarkupPointer*, POINTER_GRAVITY, HRESULT)
    cling : Proc(IMarkupPointer*, LibC::BOOL*, HRESULT)
    set_cling : Proc(IMarkupPointer*, LibC::BOOL, HRESULT)
    unposition : Proc(IMarkupPointer*, HRESULT)
    is_positioned : Proc(IMarkupPointer*, LibC::BOOL*, HRESULT)
    get_container : Proc(IMarkupPointer*, IMarkupContainer*, HRESULT)
    move_adjacent_to_element : Proc(IMarkupPointer*, IHTMLElement, ELEMENT_ADJACENCY, HRESULT)
    move_to_pointer : Proc(IMarkupPointer*, IMarkupPointer, HRESULT)
    move_to_container : Proc(IMarkupPointer*, IMarkupContainer, LibC::BOOL, HRESULT)
    left : Proc(IMarkupPointer*, LibC::BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, Int32*, Char*, HRESULT)
    right : Proc(IMarkupPointer*, LibC::BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, Int32*, Char*, HRESULT)
    current_scope : Proc(IMarkupPointer*, IHTMLElement*, HRESULT)
    is_left_of : Proc(IMarkupPointer*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_left_of_or_equal_to : Proc(IMarkupPointer*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_right_of : Proc(IMarkupPointer*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_right_of_or_equal_to : Proc(IMarkupPointer*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_equal_to : Proc(IMarkupPointer*, IMarkupPointer, LibC::BOOL*, HRESULT)
    move_unit : Proc(IMarkupPointer*, MOVEUNIT_ACTION, HRESULT)
    find_text : Proc(IMarkupPointer*, LibC::LPWSTR, UInt32, IMarkupPointer, IMarkupPointer, HRESULT)
  end

  IMarkupPointer_GUID = "3050f49f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupPointer = LibC::GUID.new(0x3050f49f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupPointer
    lpVtbl : IMarkupPointerVTbl*
  end

  struct IMarkupContainerVTbl
    query_interface : Proc(IMarkupContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupContainer*, UInt32)
    release : Proc(IMarkupContainer*, UInt32)
    owning_doc : Proc(IMarkupContainer*, IHTMLDocument2*, HRESULT)
  end

  IMarkupContainer_GUID = "3050f5f9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupContainer = LibC::GUID.new(0x3050f5f9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupContainer
    lpVtbl : IMarkupContainerVTbl*
  end

  struct IMarkupContainer2VTbl
    query_interface : Proc(IMarkupContainer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupContainer2*, UInt32)
    release : Proc(IMarkupContainer2*, UInt32)
    owning_doc : Proc(IMarkupContainer2*, IHTMLDocument2*, HRESULT)
    create_change_log : Proc(IMarkupContainer2*, IHTMLChangeSink, IHTMLChangeLog*, LibC::BOOL, LibC::BOOL, HRESULT)
    register_for_dirty_range : Proc(IMarkupContainer2*, IHTMLChangeSink, UInt32*, HRESULT)
    un_register_for_dirty_range : Proc(IMarkupContainer2*, UInt32, HRESULT)
    get_and_clear_dirty_range : Proc(IMarkupContainer2*, UInt32, IMarkupPointer, IMarkupPointer, HRESULT)
    get_version_number : Proc(IMarkupContainer2*, Int32)
    get_master_element : Proc(IMarkupContainer2*, IHTMLElement*, HRESULT)
  end

  IMarkupContainer2_GUID = "3050f648-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupContainer2 = LibC::GUID.new(0x3050f648_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupContainer2
    lpVtbl : IMarkupContainer2VTbl*
  end

  struct IHTMLChangeLogVTbl
    query_interface : Proc(IHTMLChangeLog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLChangeLog*, UInt32)
    release : Proc(IHTMLChangeLog*, UInt32)
    get_next_change : Proc(IHTMLChangeLog*, UInt8*, Int32, Int32*, HRESULT)
  end

  IHTMLChangeLog_GUID = "3050f649-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLChangeLog = LibC::GUID.new(0x3050f649_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLChangeLog
    lpVtbl : IHTMLChangeLogVTbl*
  end

  struct IHTMLChangeSinkVTbl
    query_interface : Proc(IHTMLChangeSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLChangeSink*, UInt32)
    release : Proc(IHTMLChangeSink*, UInt32)
    notify : Proc(IHTMLChangeSink*, HRESULT)
  end

  IHTMLChangeSink_GUID = "3050f64a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLChangeSink = LibC::GUID.new(0x3050f64a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLChangeSink
    lpVtbl : IHTMLChangeSinkVTbl*
  end

  struct ISegmentListVTbl
    query_interface : Proc(ISegmentList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISegmentList*, UInt32)
    release : Proc(ISegmentList*, UInt32)
    create_iterator : Proc(ISegmentList*, ISegmentListIterator*, HRESULT)
    get_type : Proc(ISegmentList*, SELECTION_TYPE*, HRESULT)
    is_empty : Proc(ISegmentList*, LibC::BOOL*, HRESULT)
  end

  ISegmentList_GUID = "3050f605-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISegmentList = LibC::GUID.new(0x3050f605_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISegmentList
    lpVtbl : ISegmentListVTbl*
  end

  struct ISegmentListIteratorVTbl
    query_interface : Proc(ISegmentListIterator*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISegmentListIterator*, UInt32)
    release : Proc(ISegmentListIterator*, UInt32)
    current : Proc(ISegmentListIterator*, ISegment*, HRESULT)
    first : Proc(ISegmentListIterator*, HRESULT)
    is_done : Proc(ISegmentListIterator*, HRESULT)
    advance : Proc(ISegmentListIterator*, HRESULT)
  end

  ISegmentListIterator_GUID = "3050f692-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISegmentListIterator = LibC::GUID.new(0x3050f692_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISegmentListIterator
    lpVtbl : ISegmentListIteratorVTbl*
  end

  struct IHTMLCaretVTbl
    query_interface : Proc(IHTMLCaret*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLCaret*, UInt32)
    release : Proc(IHTMLCaret*, UInt32)
    move_caret_to_pointer : Proc(IHTMLCaret*, IDisplayPointer, LibC::BOOL, CARET_DIRECTION, HRESULT)
    move_caret_to_pointer_ex : Proc(IHTMLCaret*, IDisplayPointer, LibC::BOOL, LibC::BOOL, CARET_DIRECTION, HRESULT)
    move_markup_pointer_to_caret : Proc(IHTMLCaret*, IMarkupPointer, HRESULT)
    move_display_pointer_to_caret : Proc(IHTMLCaret*, IDisplayPointer, HRESULT)
    is_visible : Proc(IHTMLCaret*, LibC::BOOL*, HRESULT)
    show : Proc(IHTMLCaret*, LibC::BOOL, HRESULT)
    hide : Proc(IHTMLCaret*, HRESULT)
    insert_text : Proc(IHTMLCaret*, LibC::LPWSTR, Int32, HRESULT)
    scroll_into_view : Proc(IHTMLCaret*, HRESULT)
    get_location : Proc(IHTMLCaret*, POINT*, LibC::BOOL, HRESULT)
    get_caret_direction : Proc(IHTMLCaret*, CARET_DIRECTION*, HRESULT)
    set_caret_direction : Proc(IHTMLCaret*, CARET_DIRECTION, HRESULT)
  end

  IHTMLCaret_GUID = "3050f604-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLCaret = LibC::GUID.new(0x3050f604_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLCaret
    lpVtbl : IHTMLCaretVTbl*
  end

  struct ISegmentVTbl
    query_interface : Proc(ISegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISegment*, UInt32)
    release : Proc(ISegment*, UInt32)
    get_pointers : Proc(ISegment*, IMarkupPointer, IMarkupPointer, HRESULT)
  end

  ISegment_GUID = "3050f683-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISegment = LibC::GUID.new(0x3050f683_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISegment
    lpVtbl : ISegmentVTbl*
  end

  struct IElementSegmentVTbl
    query_interface : Proc(IElementSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementSegment*, UInt32)
    release : Proc(IElementSegment*, UInt32)
    get_pointers : Proc(IElementSegment*, IMarkupPointer, IMarkupPointer, HRESULT)
    get_element : Proc(IElementSegment*, IHTMLElement*, HRESULT)
    set_primary : Proc(IElementSegment*, LibC::BOOL, HRESULT)
    is_primary : Proc(IElementSegment*, LibC::BOOL*, HRESULT)
  end

  IElementSegment_GUID = "3050f68f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementSegment = LibC::GUID.new(0x3050f68f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementSegment
    lpVtbl : IElementSegmentVTbl*
  end

  struct IHighlightSegmentVTbl
    query_interface : Proc(IHighlightSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHighlightSegment*, UInt32)
    release : Proc(IHighlightSegment*, UInt32)
    get_pointers : Proc(IHighlightSegment*, IMarkupPointer, IMarkupPointer, HRESULT)
  end

  IHighlightSegment_GUID = "3050f690-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHighlightSegment = LibC::GUID.new(0x3050f690_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHighlightSegment
    lpVtbl : IHighlightSegmentVTbl*
  end

  struct IHighlightRenderingServicesVTbl
    query_interface : Proc(IHighlightRenderingServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHighlightRenderingServices*, UInt32)
    release : Proc(IHighlightRenderingServices*, UInt32)
    add_segment : Proc(IHighlightRenderingServices*, IDisplayPointer, IDisplayPointer, IHTMLRenderStyle, IHighlightSegment*, HRESULT)
    move_segment_to_pointers : Proc(IHighlightRenderingServices*, IHighlightSegment, IDisplayPointer, IDisplayPointer, HRESULT)
    remove_segment : Proc(IHighlightRenderingServices*, IHighlightSegment, HRESULT)
  end

  IHighlightRenderingServices_GUID = "3050f606-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHighlightRenderingServices = LibC::GUID.new(0x3050f606_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHighlightRenderingServices
    lpVtbl : IHighlightRenderingServicesVTbl*
  end

  struct ILineInfoVTbl
    query_interface : Proc(ILineInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILineInfo*, UInt32)
    release : Proc(ILineInfo*, UInt32)
    get_x : Proc(ILineInfo*, Int32*, HRESULT)
    get_base_line : Proc(ILineInfo*, Int32*, HRESULT)
    get_text_descent : Proc(ILineInfo*, Int32*, HRESULT)
    get_text_height : Proc(ILineInfo*, Int32*, HRESULT)
    get_line_direction : Proc(ILineInfo*, Int32*, HRESULT)
  end

  ILineInfo_GUID = "3050f7e2-98b5-11cf-bb82-00aa00bdce0b"
  IID_ILineInfo = LibC::GUID.new(0x3050f7e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ILineInfo
    lpVtbl : ILineInfoVTbl*
  end

  struct IDisplayPointerVTbl
    query_interface : Proc(IDisplayPointer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDisplayPointer*, UInt32)
    release : Proc(IDisplayPointer*, UInt32)
    move_to_point : Proc(IDisplayPointer*, POINT, COORD_SYSTEM, IHTMLElement, UInt32, UInt32*, HRESULT)
    move_unit : Proc(IDisplayPointer*, DISPLAY_MOVEUNIT, Int32, HRESULT)
    position_markup_pointer : Proc(IDisplayPointer*, IMarkupPointer, HRESULT)
    move_to_pointer : Proc(IDisplayPointer*, IDisplayPointer, HRESULT)
    set_pointer_gravity : Proc(IDisplayPointer*, POINTER_GRAVITY, HRESULT)
    get_pointer_gravity : Proc(IDisplayPointer*, POINTER_GRAVITY*, HRESULT)
    set_display_gravity : Proc(IDisplayPointer*, DISPLAY_GRAVITY, HRESULT)
    get_display_gravity : Proc(IDisplayPointer*, DISPLAY_GRAVITY*, HRESULT)
    is_positioned : Proc(IDisplayPointer*, LibC::BOOL*, HRESULT)
    unposition : Proc(IDisplayPointer*, HRESULT)
    is_equal_to : Proc(IDisplayPointer*, IDisplayPointer, LibC::BOOL*, HRESULT)
    is_left_of : Proc(IDisplayPointer*, IDisplayPointer, LibC::BOOL*, HRESULT)
    is_right_of : Proc(IDisplayPointer*, IDisplayPointer, LibC::BOOL*, HRESULT)
    is_at_bol : Proc(IDisplayPointer*, LibC::BOOL*, HRESULT)
    move_to_markup_pointer : Proc(IDisplayPointer*, IMarkupPointer, IDisplayPointer, HRESULT)
    scroll_into_view : Proc(IDisplayPointer*, HRESULT)
    get_line_info : Proc(IDisplayPointer*, ILineInfo*, HRESULT)
    get_flow_element : Proc(IDisplayPointer*, IHTMLElement*, HRESULT)
    query_breaks : Proc(IDisplayPointer*, UInt32*, HRESULT)
  end

  IDisplayPointer_GUID = "3050f69e-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDisplayPointer = LibC::GUID.new(0x3050f69e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDisplayPointer
    lpVtbl : IDisplayPointerVTbl*
  end

  struct IDisplayServicesVTbl
    query_interface : Proc(IDisplayServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDisplayServices*, UInt32)
    release : Proc(IDisplayServices*, UInt32)
    create_display_pointer : Proc(IDisplayServices*, IDisplayPointer*, HRESULT)
    transform_rect : Proc(IDisplayServices*, RECT*, COORD_SYSTEM, COORD_SYSTEM, IHTMLElement, HRESULT)
    transform_point : Proc(IDisplayServices*, POINT*, COORD_SYSTEM, COORD_SYSTEM, IHTMLElement, HRESULT)
    get_caret : Proc(IDisplayServices*, IHTMLCaret*, HRESULT)
    get_computed_style : Proc(IDisplayServices*, IMarkupPointer, IHTMLComputedStyle*, HRESULT)
    scroll_rect_into_view : Proc(IDisplayServices*, IHTMLElement, RECT, HRESULT)
    has_flow_layout : Proc(IDisplayServices*, IHTMLElement, LibC::BOOL*, HRESULT)
  end

  IDisplayServices_GUID = "3050f69d-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDisplayServices = LibC::GUID.new(0x3050f69d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDisplayServices
    lpVtbl : IDisplayServicesVTbl*
  end

  struct IHtmlDlgSafeHelperVTbl
    query_interface : Proc(IHtmlDlgSafeHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHtmlDlgSafeHelper*, UInt32)
    release : Proc(IHtmlDlgSafeHelper*, UInt32)
    get_type_info_count : Proc(IHtmlDlgSafeHelper*, UInt32*, HRESULT)
    get_type_info : Proc(IHtmlDlgSafeHelper*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHtmlDlgSafeHelper*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHtmlDlgSafeHelper*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    choosecolordlg : Proc(IHtmlDlgSafeHelper*, VARIANT, VARIANT*, HRESULT)
    get_charset : Proc(IHtmlDlgSafeHelper*, UInt8*, VARIANT*, HRESULT)
    get_fonts : Proc(IHtmlDlgSafeHelper*, IDispatch*, HRESULT)
    get_block_formats : Proc(IHtmlDlgSafeHelper*, IDispatch*, HRESULT)
  end

  IHtmlDlgSafeHelper_GUID = "3050f81a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHtmlDlgSafeHelper = LibC::GUID.new(0x3050f81a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHtmlDlgSafeHelper
    lpVtbl : IHtmlDlgSafeHelperVTbl*
  end

  struct IBlockFormatsVTbl
    query_interface : Proc(IBlockFormats*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBlockFormats*, UInt32)
    release : Proc(IBlockFormats*, UInt32)
    get_type_info_count : Proc(IBlockFormats*, UInt32*, HRESULT)
    get_type_info : Proc(IBlockFormats*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBlockFormats*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBlockFormats*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IBlockFormats*, IUnknown*, HRESULT)
    get_count : Proc(IBlockFormats*, Int32*, HRESULT)
    item : Proc(IBlockFormats*, VARIANT*, UInt8**, HRESULT)
  end

  IBlockFormats_GUID = "3050f830-98b5-11cf-bb82-00aa00bdce0b"
  IID_IBlockFormats = LibC::GUID.new(0x3050f830_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IBlockFormats
    lpVtbl : IBlockFormatsVTbl*
  end

  struct IFontNamesVTbl
    query_interface : Proc(IFontNames*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFontNames*, UInt32)
    release : Proc(IFontNames*, UInt32)
    get_type_info_count : Proc(IFontNames*, UInt32*, HRESULT)
    get_type_info : Proc(IFontNames*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFontNames*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFontNames*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IFontNames*, IUnknown*, HRESULT)
    get_count : Proc(IFontNames*, Int32*, HRESULT)
    item : Proc(IFontNames*, VARIANT*, UInt8**, HRESULT)
  end

  IFontNames_GUID = "3050f839-98b5-11cf-bb82-00aa00bdce0b"
  IID_IFontNames = LibC::GUID.new(0x3050f839_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IFontNames
    lpVtbl : IFontNamesVTbl*
  end

  struct ICSSFilterVTbl
    query_interface : Proc(ICSSFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICSSFilter*, UInt32)
    release : Proc(ICSSFilter*, UInt32)
    set_site : Proc(ICSSFilter*, ICSSFilterSite, HRESULT)
    on_ambient_property_change : Proc(ICSSFilter*, Int32, HRESULT)
  end

  ICSSFilter_GUID = "3050f3ec-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICSSFilter = LibC::GUID.new(0x3050f3ec_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICSSFilter
    lpVtbl : ICSSFilterVTbl*
  end

  struct ISecureUrlHostVTbl
    query_interface : Proc(ISecureUrlHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISecureUrlHost*, UInt32)
    release : Proc(ISecureUrlHost*, UInt32)
    validate_secure_url : Proc(ISecureUrlHost*, LibC::BOOL*, LibC::LPWSTR, UInt32, HRESULT)
  end

  ISecureUrlHost_GUID = "c81984c4-74c8-11d2-baa9-00c04fc2040e"
  IID_ISecureUrlHost = LibC::GUID.new(0xc81984c4_u32, 0x74c8_u16, 0x11d2_u16, StaticArray[0xba_u8, 0xa9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc2_u8, 0x4_u8, 0xe_u8])
  struct ISecureUrlHost
    lpVtbl : ISecureUrlHostVTbl*
  end

  struct IMarkupServicesVTbl
    query_interface : Proc(IMarkupServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupServices*, UInt32)
    release : Proc(IMarkupServices*, UInt32)
    create_markup_pointer : Proc(IMarkupServices*, IMarkupPointer*, HRESULT)
    create_markup_container : Proc(IMarkupServices*, IMarkupContainer*, HRESULT)
    create_element : Proc(IMarkupServices*, ELEMENT_TAG_ID, LibC::LPWSTR, IHTMLElement*, HRESULT)
    clone_element : Proc(IMarkupServices*, IHTMLElement, IHTMLElement*, HRESULT)
    insert_element : Proc(IMarkupServices*, IHTMLElement, IMarkupPointer, IMarkupPointer, HRESULT)
    remove_element : Proc(IMarkupServices*, IHTMLElement, HRESULT)
    remove : Proc(IMarkupServices*, IMarkupPointer, IMarkupPointer, HRESULT)
    copy : Proc(IMarkupServices*, IMarkupPointer, IMarkupPointer, IMarkupPointer, HRESULT)
    move : Proc(IMarkupServices*, IMarkupPointer, IMarkupPointer, IMarkupPointer, HRESULT)
    insert_text : Proc(IMarkupServices*, LibC::LPWSTR, Int32, IMarkupPointer, HRESULT)
    parse_string : Proc(IMarkupServices*, LibC::LPWSTR, UInt32, IMarkupContainer*, IMarkupPointer, IMarkupPointer, HRESULT)
    parse_global : Proc(IMarkupServices*, LibC::IntPtrT, UInt32, IMarkupContainer*, IMarkupPointer, IMarkupPointer, HRESULT)
    is_scoped_element : Proc(IMarkupServices*, IHTMLElement, LibC::BOOL*, HRESULT)
    get_element_tag_id : Proc(IMarkupServices*, IHTMLElement, ELEMENT_TAG_ID*, HRESULT)
    get_tag_id_for_name : Proc(IMarkupServices*, UInt8*, ELEMENT_TAG_ID*, HRESULT)
    get_name_for_tag_id : Proc(IMarkupServices*, ELEMENT_TAG_ID, UInt8**, HRESULT)
    move_pointers_to_range : Proc(IMarkupServices*, IHTMLTxtRange, IMarkupPointer, IMarkupPointer, HRESULT)
    move_range_to_pointers : Proc(IMarkupServices*, IMarkupPointer, IMarkupPointer, IHTMLTxtRange, HRESULT)
    begin_undo_unit : Proc(IMarkupServices*, LibC::LPWSTR, HRESULT)
    end_undo_unit : Proc(IMarkupServices*, HRESULT)
  end

  IMarkupServices_GUID = "3050f4a0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupServices = LibC::GUID.new(0x3050f4a0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupServices
    lpVtbl : IMarkupServicesVTbl*
  end

  struct IMarkupServices2VTbl
    query_interface : Proc(IMarkupServices2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupServices2*, UInt32)
    release : Proc(IMarkupServices2*, UInt32)
    create_markup_pointer : Proc(IMarkupServices2*, IMarkupPointer*, HRESULT)
    create_markup_container : Proc(IMarkupServices2*, IMarkupContainer*, HRESULT)
    create_element : Proc(IMarkupServices2*, ELEMENT_TAG_ID, LibC::LPWSTR, IHTMLElement*, HRESULT)
    clone_element : Proc(IMarkupServices2*, IHTMLElement, IHTMLElement*, HRESULT)
    insert_element : Proc(IMarkupServices2*, IHTMLElement, IMarkupPointer, IMarkupPointer, HRESULT)
    remove_element : Proc(IMarkupServices2*, IHTMLElement, HRESULT)
    remove : Proc(IMarkupServices2*, IMarkupPointer, IMarkupPointer, HRESULT)
    copy : Proc(IMarkupServices2*, IMarkupPointer, IMarkupPointer, IMarkupPointer, HRESULT)
    move : Proc(IMarkupServices2*, IMarkupPointer, IMarkupPointer, IMarkupPointer, HRESULT)
    insert_text : Proc(IMarkupServices2*, LibC::LPWSTR, Int32, IMarkupPointer, HRESULT)
    parse_string : Proc(IMarkupServices2*, LibC::LPWSTR, UInt32, IMarkupContainer*, IMarkupPointer, IMarkupPointer, HRESULT)
    parse_global : Proc(IMarkupServices2*, LibC::IntPtrT, UInt32, IMarkupContainer*, IMarkupPointer, IMarkupPointer, HRESULT)
    is_scoped_element : Proc(IMarkupServices2*, IHTMLElement, LibC::BOOL*, HRESULT)
    get_element_tag_id : Proc(IMarkupServices2*, IHTMLElement, ELEMENT_TAG_ID*, HRESULT)
    get_tag_id_for_name : Proc(IMarkupServices2*, UInt8*, ELEMENT_TAG_ID*, HRESULT)
    get_name_for_tag_id : Proc(IMarkupServices2*, ELEMENT_TAG_ID, UInt8**, HRESULT)
    move_pointers_to_range : Proc(IMarkupServices2*, IHTMLTxtRange, IMarkupPointer, IMarkupPointer, HRESULT)
    move_range_to_pointers : Proc(IMarkupServices2*, IMarkupPointer, IMarkupPointer, IHTMLTxtRange, HRESULT)
    begin_undo_unit : Proc(IMarkupServices2*, LibC::LPWSTR, HRESULT)
    end_undo_unit : Proc(IMarkupServices2*, HRESULT)
    parse_global_ex : Proc(IMarkupServices2*, LibC::IntPtrT, UInt32, IMarkupContainer, IMarkupContainer*, IMarkupPointer, IMarkupPointer, HRESULT)
    validate_elements : Proc(IMarkupServices2*, IMarkupPointer, IMarkupPointer, IMarkupPointer, IMarkupPointer, IHTMLElement*, IHTMLElement*, HRESULT)
    save_segments_to_clipboard : Proc(IMarkupServices2*, ISegmentList, UInt32, HRESULT)
  end

  IMarkupServices2_GUID = "3050f682-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupServices2 = LibC::GUID.new(0x3050f682_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupServices2
    lpVtbl : IMarkupServices2VTbl*
  end

  struct IHTMLChangePlaybackVTbl
    query_interface : Proc(IHTMLChangePlayback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLChangePlayback*, UInt32)
    release : Proc(IHTMLChangePlayback*, UInt32)
    exec_change : Proc(IHTMLChangePlayback*, UInt8*, LibC::BOOL, HRESULT)
  end

  IHTMLChangePlayback_GUID = "3050f6e0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLChangePlayback = LibC::GUID.new(0x3050f6e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLChangePlayback
    lpVtbl : IHTMLChangePlaybackVTbl*
  end

  struct IMarkupPointer2VTbl
    query_interface : Proc(IMarkupPointer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupPointer2*, UInt32)
    release : Proc(IMarkupPointer2*, UInt32)
    owning_doc : Proc(IMarkupPointer2*, IHTMLDocument2*, HRESULT)
    gravity : Proc(IMarkupPointer2*, POINTER_GRAVITY*, HRESULT)
    set_gravity : Proc(IMarkupPointer2*, POINTER_GRAVITY, HRESULT)
    cling : Proc(IMarkupPointer2*, LibC::BOOL*, HRESULT)
    set_cling : Proc(IMarkupPointer2*, LibC::BOOL, HRESULT)
    unposition : Proc(IMarkupPointer2*, HRESULT)
    is_positioned : Proc(IMarkupPointer2*, LibC::BOOL*, HRESULT)
    get_container : Proc(IMarkupPointer2*, IMarkupContainer*, HRESULT)
    move_adjacent_to_element : Proc(IMarkupPointer2*, IHTMLElement, ELEMENT_ADJACENCY, HRESULT)
    move_to_pointer : Proc(IMarkupPointer2*, IMarkupPointer, HRESULT)
    move_to_container : Proc(IMarkupPointer2*, IMarkupContainer, LibC::BOOL, HRESULT)
    left : Proc(IMarkupPointer2*, LibC::BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, Int32*, Char*, HRESULT)
    right : Proc(IMarkupPointer2*, LibC::BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, Int32*, Char*, HRESULT)
    current_scope : Proc(IMarkupPointer2*, IHTMLElement*, HRESULT)
    is_left_of : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_left_of_or_equal_to : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_right_of : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_right_of_or_equal_to : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    is_equal_to : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    move_unit : Proc(IMarkupPointer2*, MOVEUNIT_ACTION, HRESULT)
    find_text : Proc(IMarkupPointer2*, LibC::LPWSTR, UInt32, IMarkupPointer, IMarkupPointer, HRESULT)
    is_at_word_break : Proc(IMarkupPointer2*, LibC::BOOL*, HRESULT)
    get_markup_position : Proc(IMarkupPointer2*, Int32*, HRESULT)
    move_to_markup_position : Proc(IMarkupPointer2*, IMarkupContainer, Int32, HRESULT)
    move_unit_bounded : Proc(IMarkupPointer2*, MOVEUNIT_ACTION, IMarkupPointer, HRESULT)
    is_inside_url : Proc(IMarkupPointer2*, IMarkupPointer, LibC::BOOL*, HRESULT)
    move_to_content : Proc(IMarkupPointer2*, IHTMLElement, LibC::BOOL, HRESULT)
  end

  IMarkupPointer2_GUID = "3050f675-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupPointer2 = LibC::GUID.new(0x3050f675_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupPointer2
    lpVtbl : IMarkupPointer2VTbl*
  end

  struct IMarkupTextFragsVTbl
    query_interface : Proc(IMarkupTextFrags*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMarkupTextFrags*, UInt32)
    release : Proc(IMarkupTextFrags*, UInt32)
    get_text_frag_count : Proc(IMarkupTextFrags*, Int32*, HRESULT)
    get_text_frag : Proc(IMarkupTextFrags*, Int32, UInt8**, IMarkupPointer, HRESULT)
    remove_text_frag : Proc(IMarkupTextFrags*, Int32, HRESULT)
    insert_text_frag : Proc(IMarkupTextFrags*, Int32, UInt8*, IMarkupPointer, HRESULT)
    find_text_frag_from_markup_pointer : Proc(IMarkupTextFrags*, IMarkupPointer, Int32*, LibC::BOOL*, HRESULT)
  end

  IMarkupTextFrags_GUID = "3050f5fa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IMarkupTextFrags = LibC::GUID.new(0x3050f5fa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IMarkupTextFrags
    lpVtbl : IMarkupTextFragsVTbl*
  end

  struct IXMLGenericParseVTbl
    query_interface : Proc(IXMLGenericParse*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXMLGenericParse*, UInt32)
    release : Proc(IXMLGenericParse*, UInt32)
    set_generic_parse : Proc(IXMLGenericParse*, Int16, HRESULT)
  end

  IXMLGenericParse_GUID = "e4e23071-4d07-11d2-ae76-0080c73bc199"
  IID_IXMLGenericParse = LibC::GUID.new(0xe4e23071_u32, 0x4d07_u16, 0x11d2_u16, StaticArray[0xae_u8, 0x76_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x3b_u8, 0xc1_u8, 0x99_u8])
  struct IXMLGenericParse
    lpVtbl : IXMLGenericParseVTbl*
  end

  struct IHTMLEditHostVTbl
    query_interface : Proc(IHTMLEditHost*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEditHost*, UInt32)
    release : Proc(IHTMLEditHost*, UInt32)
    snap_rect : Proc(IHTMLEditHost*, IHTMLElement, RECT*, ELEMENT_CORNER, HRESULT)
  end

  IHTMLEditHost_GUID = "3050f6a0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEditHost = LibC::GUID.new(0x3050f6a0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEditHost
    lpVtbl : IHTMLEditHostVTbl*
  end

  struct IHTMLEditHost2VTbl
    query_interface : Proc(IHTMLEditHost2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEditHost2*, UInt32)
    release : Proc(IHTMLEditHost2*, UInt32)
    snap_rect : Proc(IHTMLEditHost2*, IHTMLElement, RECT*, ELEMENT_CORNER, HRESULT)
    pre_drag : Proc(IHTMLEditHost2*, HRESULT)
  end

  IHTMLEditHost2_GUID = "3050f848-98b5-11cf-bb82-00aa00bdce0d"
  IID_IHTMLEditHost2 = LibC::GUID.new(0x3050f848_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xd_u8])
  struct IHTMLEditHost2
    lpVtbl : IHTMLEditHost2VTbl*
  end

  struct ISequenceNumberVTbl
    query_interface : Proc(ISequenceNumber*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISequenceNumber*, UInt32)
    release : Proc(ISequenceNumber*, UInt32)
    get_sequence_number : Proc(ISequenceNumber*, Int32, Int32*, HRESULT)
  end

  ISequenceNumber_GUID = "3050f6c1-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISequenceNumber = LibC::GUID.new(0x3050f6c1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISequenceNumber
    lpVtbl : ISequenceNumberVTbl*
  end

  struct IIMEServicesVTbl
    query_interface : Proc(IIMEServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIMEServices*, UInt32)
    release : Proc(IIMEServices*, UInt32)
    get_active_imm : Proc(IIMEServices*, IActiveIMMApp*, HRESULT)
  end

  IIMEServices_GUID = "3050f6ca-98b5-11cf-bb82-00aa00bdce0b"
  IID_IIMEServices = LibC::GUID.new(0x3050f6ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IIMEServices
    lpVtbl : IIMEServicesVTbl*
  end

  struct ISelectionServicesListenerVTbl
    query_interface : Proc(ISelectionServicesListener*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISelectionServicesListener*, UInt32)
    release : Proc(ISelectionServicesListener*, UInt32)
    begin_selection_undo : Proc(ISelectionServicesListener*, HRESULT)
    end_selection_undo : Proc(ISelectionServicesListener*, HRESULT)
    on_selected_element_exit : Proc(ISelectionServicesListener*, IMarkupPointer, IMarkupPointer, IMarkupPointer, IMarkupPointer, HRESULT)
    on_change_type : Proc(ISelectionServicesListener*, SELECTION_TYPE, ISelectionServicesListener, HRESULT)
    get_type_detail : Proc(ISelectionServicesListener*, UInt8**, HRESULT)
  end

  ISelectionServicesListener_GUID = "3050f699-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISelectionServicesListener = LibC::GUID.new(0x3050f699_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISelectionServicesListener
    lpVtbl : ISelectionServicesListenerVTbl*
  end

  struct ISelectionServicesVTbl
    query_interface : Proc(ISelectionServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISelectionServices*, UInt32)
    release : Proc(ISelectionServices*, UInt32)
    set_selection_type : Proc(ISelectionServices*, SELECTION_TYPE, ISelectionServicesListener, HRESULT)
    get_markup_container : Proc(ISelectionServices*, IMarkupContainer*, HRESULT)
    add_segment : Proc(ISelectionServices*, IMarkupPointer, IMarkupPointer, ISegment*, HRESULT)
    add_element_segment : Proc(ISelectionServices*, IHTMLElement, IElementSegment*, HRESULT)
    remove_segment : Proc(ISelectionServices*, ISegment, HRESULT)
    get_selection_services_listener : Proc(ISelectionServices*, ISelectionServicesListener*, HRESULT)
  end

  ISelectionServices_GUID = "3050f684-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISelectionServices = LibC::GUID.new(0x3050f684_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISelectionServices
    lpVtbl : ISelectionServicesVTbl*
  end

  struct IHTMLEditDesignerVTbl
    query_interface : Proc(IHTMLEditDesigner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEditDesigner*, UInt32)
    release : Proc(IHTMLEditDesigner*, UInt32)
    pre_handle_event : Proc(IHTMLEditDesigner*, Int32, IHTMLEventObj, HRESULT)
    post_handle_event : Proc(IHTMLEditDesigner*, Int32, IHTMLEventObj, HRESULT)
    translate_accelerator : Proc(IHTMLEditDesigner*, Int32, IHTMLEventObj, HRESULT)
    post_editor_event_notify : Proc(IHTMLEditDesigner*, Int32, IHTMLEventObj, HRESULT)
  end

  IHTMLEditDesigner_GUID = "3050f662-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEditDesigner = LibC::GUID.new(0x3050f662_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEditDesigner
    lpVtbl : IHTMLEditDesignerVTbl*
  end

  struct IHTMLEditServicesVTbl
    query_interface : Proc(IHTMLEditServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEditServices*, UInt32)
    release : Proc(IHTMLEditServices*, UInt32)
    add_designer : Proc(IHTMLEditServices*, IHTMLEditDesigner, HRESULT)
    remove_designer : Proc(IHTMLEditServices*, IHTMLEditDesigner, HRESULT)
    get_selection_services : Proc(IHTMLEditServices*, IMarkupContainer, ISelectionServices*, HRESULT)
    move_to_selection_anchor : Proc(IHTMLEditServices*, IMarkupPointer, HRESULT)
    move_to_selection_end : Proc(IHTMLEditServices*, IMarkupPointer, HRESULT)
    select_range : Proc(IHTMLEditServices*, IMarkupPointer, IMarkupPointer, SELECTION_TYPE, HRESULT)
  end

  IHTMLEditServices_GUID = "3050f663-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEditServices = LibC::GUID.new(0x3050f663_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEditServices
    lpVtbl : IHTMLEditServicesVTbl*
  end

  struct IHTMLEditServices2VTbl
    query_interface : Proc(IHTMLEditServices2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLEditServices2*, UInt32)
    release : Proc(IHTMLEditServices2*, UInt32)
    add_designer : Proc(IHTMLEditServices2*, IHTMLEditDesigner, HRESULT)
    remove_designer : Proc(IHTMLEditServices2*, IHTMLEditDesigner, HRESULT)
    get_selection_services : Proc(IHTMLEditServices2*, IMarkupContainer, ISelectionServices*, HRESULT)
    move_to_selection_anchor : Proc(IHTMLEditServices2*, IMarkupPointer, HRESULT)
    move_to_selection_end : Proc(IHTMLEditServices2*, IMarkupPointer, HRESULT)
    select_range : Proc(IHTMLEditServices2*, IMarkupPointer, IMarkupPointer, SELECTION_TYPE, HRESULT)
    move_to_selection_anchor_ex : Proc(IHTMLEditServices2*, IDisplayPointer, HRESULT)
    move_to_selection_end_ex : Proc(IHTMLEditServices2*, IDisplayPointer, HRESULT)
    freeze_virtual_caret_pos : Proc(IHTMLEditServices2*, LibC::BOOL, HRESULT)
    un_freeze_virtual_caret_pos : Proc(IHTMLEditServices2*, LibC::BOOL, HRESULT)
  end

  IHTMLEditServices2_GUID = "3050f812-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLEditServices2 = LibC::GUID.new(0x3050f812_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLEditServices2
    lpVtbl : IHTMLEditServices2VTbl*
  end

  struct IHTMLComputedStyleVTbl
    query_interface : Proc(IHTMLComputedStyle*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLComputedStyle*, UInt32)
    release : Proc(IHTMLComputedStyle*, UInt32)
    get_bold : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_italic : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_underline : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_overline : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_strike_out : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_sub_script : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_super_script : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_explicit_face : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_font_weight : Proc(IHTMLComputedStyle*, Int32*, HRESULT)
    get_font_size : Proc(IHTMLComputedStyle*, Int32*, HRESULT)
    get_font_name : Proc(IHTMLComputedStyle*, Int8*, HRESULT)
    get_has_bg_color : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_text_color : Proc(IHTMLComputedStyle*, UInt32*, HRESULT)
    get_background_color : Proc(IHTMLComputedStyle*, UInt32*, HRESULT)
    get_pre_formatted : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_direction : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_block_direction : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    get_ol : Proc(IHTMLComputedStyle*, Int16*, HRESULT)
    is_equal : Proc(IHTMLComputedStyle*, IHTMLComputedStyle, Int16*, HRESULT)
  end

  IHTMLComputedStyle_GUID = "3050f6c3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLComputedStyle = LibC::GUID.new(0x3050f6c3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLComputedStyle
    lpVtbl : IHTMLComputedStyleVTbl*
  end

  struct IDeveloperConsoleMessageReceiverVTbl
    query_interface : Proc(IDeveloperConsoleMessageReceiver*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeveloperConsoleMessageReceiver*, UInt32)
    release : Proc(IDeveloperConsoleMessageReceiver*, UInt32)
    write : Proc(IDeveloperConsoleMessageReceiver*, LibC::LPWSTR, DEV_CONSOLE_MESSAGE_LEVEL, Int32, LibC::LPWSTR, HRESULT)
    write_with_url : Proc(IDeveloperConsoleMessageReceiver*, LibC::LPWSTR, DEV_CONSOLE_MESSAGE_LEVEL, Int32, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    write_with_url_and_line : Proc(IDeveloperConsoleMessageReceiver*, LibC::LPWSTR, DEV_CONSOLE_MESSAGE_LEVEL, Int32, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    write_with_url_line_and_column : Proc(IDeveloperConsoleMessageReceiver*, LibC::LPWSTR, DEV_CONSOLE_MESSAGE_LEVEL, Int32, LibC::LPWSTR, LibC::LPWSTR, UInt32, UInt32, HRESULT)
  end

  IDeveloperConsoleMessageReceiver_GUID = "30510808-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDeveloperConsoleMessageReceiver = LibC::GUID.new(0x30510808_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDeveloperConsoleMessageReceiver
    lpVtbl : IDeveloperConsoleMessageReceiverVTbl*
  end

  struct IScriptEventHandlerVTbl
    query_interface : Proc(IScriptEventHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptEventHandler*, UInt32)
    release : Proc(IScriptEventHandler*, UInt32)
    function_name : Proc(IScriptEventHandler*, UInt8**, HRESULT)
    debug_document_context : Proc(IScriptEventHandler*, IUnknown*, HRESULT)
    event_handler_dispatch : Proc(IScriptEventHandler*, IDispatch*, HRESULT)
    uses_capture : Proc(IScriptEventHandler*, LibC::BOOL*, HRESULT)
    cookie : Proc(IScriptEventHandler*, UInt64*, HRESULT)
  end

  IScriptEventHandler_GUID = "3051083a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IScriptEventHandler = LibC::GUID.new(0x3051083a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IScriptEventHandler
    lpVtbl : IScriptEventHandlerVTbl*
  end

  struct IDebugCallbackNotificationHandlerVTbl
    query_interface : Proc(IDebugCallbackNotificationHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDebugCallbackNotificationHandler*, UInt32)
    release : Proc(IDebugCallbackNotificationHandler*, UInt32)
    requested_callback_types : Proc(IDebugCallbackNotificationHandler*, UInt32*, HRESULT)
    before_dispatch_event : Proc(IDebugCallbackNotificationHandler*, IUnknown, HRESULT)
    dispatch_event_complete : Proc(IDebugCallbackNotificationHandler*, IUnknown, UInt32, HRESULT)
    before_invoke_dom_callback : Proc(IDebugCallbackNotificationHandler*, IUnknown, IScriptEventHandler, DOM_EVENT_PHASE, UInt32, HRESULT)
    invoke_dom_callback_complete : Proc(IDebugCallbackNotificationHandler*, IUnknown, IScriptEventHandler, DOM_EVENT_PHASE, UInt32, HRESULT)
    before_invoke_callback : Proc(IDebugCallbackNotificationHandler*, SCRIPT_TIMER_TYPE, UInt32, IDispatch, UInt64, UInt8*, UInt32, UInt32, UInt32, IUnknown, HRESULT)
    invoke_callback_complete : Proc(IDebugCallbackNotificationHandler*, SCRIPT_TIMER_TYPE, UInt32, IDispatch, UInt64, UInt8*, UInt32, UInt32, UInt32, IUnknown, HRESULT)
  end

  IDebugCallbackNotificationHandler_GUID = "30510842-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDebugCallbackNotificationHandler = LibC::GUID.new(0x30510842_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDebugCallbackNotificationHandler
    lpVtbl : IDebugCallbackNotificationHandlerVTbl*
  end

  struct IScriptEventHandlerSourceInfoVTbl
    query_interface : Proc(IScriptEventHandlerSourceInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScriptEventHandlerSourceInfo*, UInt32)
    release : Proc(IScriptEventHandlerSourceInfo*, UInt32)
    get_source_info : Proc(IScriptEventHandlerSourceInfo*, UInt8**, UInt32*, UInt32*, UInt32*, HRESULT)
  end

  IScriptEventHandlerSourceInfo_GUID = "30510841-98b5-11cf-bb82-00aa00bdce0b"
  IID_IScriptEventHandlerSourceInfo = LibC::GUID.new(0x30510841_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IScriptEventHandlerSourceInfo
    lpVtbl : IScriptEventHandlerSourceInfoVTbl*
  end

  struct IDOMEventRegistrationCallbackVTbl
    query_interface : Proc(IDOMEventRegistrationCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDOMEventRegistrationCallback*, UInt32)
    release : Proc(IDOMEventRegistrationCallback*, UInt32)
    on_dom_event_listener_added : Proc(IDOMEventRegistrationCallback*, LibC::LPWSTR, IScriptEventHandler, HRESULT)
    on_dom_event_listener_removed : Proc(IDOMEventRegistrationCallback*, UInt64, HRESULT)
  end

  IDOMEventRegistrationCallback_GUID = "3051083b-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDOMEventRegistrationCallback = LibC::GUID.new(0x3051083b_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDOMEventRegistrationCallback
    lpVtbl : IDOMEventRegistrationCallbackVTbl*
  end

  struct IEventTarget2VTbl
    query_interface : Proc(IEventTarget2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEventTarget2*, UInt32)
    release : Proc(IEventTarget2*, UInt32)
    get_registered_event_types : Proc(IEventTarget2*, SAFEARRAY**, HRESULT)
    get_listeners_for_type : Proc(IEventTarget2*, LibC::LPWSTR, SAFEARRAY**, HRESULT)
    register_for_dom_event_listeners : Proc(IEventTarget2*, IDOMEventRegistrationCallback, HRESULT)
    unregister_for_dom_event_listeners : Proc(IEventTarget2*, IDOMEventRegistrationCallback, HRESULT)
  end

  IEventTarget2_GUID = "30510839-98b5-11cf-bb82-00aa00bdce0b"
  IID_IEventTarget2 = LibC::GUID.new(0x30510839_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IEventTarget2
    lpVtbl : IEventTarget2VTbl*
  end

  struct HTMLNamespaceEventsVTbl
    query_interface : Proc(HTMLNamespaceEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(HTMLNamespaceEvents*, UInt32)
    release : Proc(HTMLNamespaceEvents*, UInt32)
    get_type_info_count : Proc(HTMLNamespaceEvents*, UInt32*, HRESULT)
    get_type_info : Proc(HTMLNamespaceEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(HTMLNamespaceEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(HTMLNamespaceEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  HTMLNamespaceEvents_GUID = "3050f6bd-98b5-11cf-bb82-00aa00bdce0b"
  IID_HTMLNamespaceEvents = LibC::GUID.new(0x3050f6bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct HTMLNamespaceEvents
    lpVtbl : HTMLNamespaceEventsVTbl*
  end

  struct IHTMLNamespaceVTbl
    query_interface : Proc(IHTMLNamespace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLNamespace*, UInt32)
    release : Proc(IHTMLNamespace*, UInt32)
    get_type_info_count : Proc(IHTMLNamespace*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLNamespace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLNamespace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLNamespace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IHTMLNamespace*, UInt8**, HRESULT)
    get_urn : Proc(IHTMLNamespace*, UInt8**, HRESULT)
    get_tag_names : Proc(IHTMLNamespace*, IDispatch*, HRESULT)
    get_ready_state : Proc(IHTMLNamespace*, VARIANT*, HRESULT)
    put_onreadystatechange : Proc(IHTMLNamespace*, VARIANT, HRESULT)
    get_onreadystatechange : Proc(IHTMLNamespace*, VARIANT*, HRESULT)
    do_import : Proc(IHTMLNamespace*, UInt8*, HRESULT)
    attach_event : Proc(IHTMLNamespace*, UInt8*, IDispatch, Int16*, HRESULT)
    detach_event : Proc(IHTMLNamespace*, UInt8*, IDispatch, HRESULT)
  end

  IHTMLNamespace_GUID = "3050f6bb-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLNamespace = LibC::GUID.new(0x3050f6bb_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLNamespace
    lpVtbl : IHTMLNamespaceVTbl*
  end

  struct IHTMLNamespaceCollectionVTbl
    query_interface : Proc(IHTMLNamespaceCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLNamespaceCollection*, UInt32)
    release : Proc(IHTMLNamespaceCollection*, UInt32)
    get_type_info_count : Proc(IHTMLNamespaceCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLNamespaceCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLNamespaceCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLNamespaceCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLNamespaceCollection*, Int32*, HRESULT)
    item : Proc(IHTMLNamespaceCollection*, VARIANT, IDispatch*, HRESULT)
    add : Proc(IHTMLNamespaceCollection*, UInt8*, UInt8*, VARIANT, IDispatch*, HRESULT)
  end

  IHTMLNamespaceCollection_GUID = "3050f6b8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLNamespaceCollection = LibC::GUID.new(0x3050f6b8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLNamespaceCollection
    lpVtbl : IHTMLNamespaceCollectionVTbl*
  end

  struct DispHTMLNamespaceVTbl
    query_interface : Proc(DispHTMLNamespace*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLNamespace*, UInt32)
    release : Proc(DispHTMLNamespace*, UInt32)
    get_type_info_count : Proc(DispHTMLNamespace*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLNamespace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLNamespace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLNamespace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLNamespace_GUID = "3050f54f-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLNamespace = LibC::GUID.new(0x3050f54f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLNamespace
    lpVtbl : DispHTMLNamespaceVTbl*
  end

  struct DispHTMLNamespaceCollectionVTbl
    query_interface : Proc(DispHTMLNamespaceCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLNamespaceCollection*, UInt32)
    release : Proc(DispHTMLNamespaceCollection*, UInt32)
    get_type_info_count : Proc(DispHTMLNamespaceCollection*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLNamespaceCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLNamespaceCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLNamespaceCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLNamespaceCollection_GUID = "3050f550-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLNamespaceCollection = LibC::GUID.new(0x3050f550_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLNamespaceCollection
    lpVtbl : DispHTMLNamespaceCollectionVTbl*
  end

  struct IHTMLPainterVTbl
    query_interface : Proc(IHTMLPainter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPainter*, UInt32)
    release : Proc(IHTMLPainter*, UInt32)
    draw : Proc(IHTMLPainter*, RECT, RECT, Int32, HDC, Void*, HRESULT)
    on_resize : Proc(IHTMLPainter*, SIZE, HRESULT)
    get_painter_info : Proc(IHTMLPainter*, HTML_PAINTER_INFO*, HRESULT)
    hit_test_point : Proc(IHTMLPainter*, POINT, LibC::BOOL*, Int32*, HRESULT)
  end

  IHTMLPainter_GUID = "3050f6a6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPainter = LibC::GUID.new(0x3050f6a6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPainter
    lpVtbl : IHTMLPainterVTbl*
  end

  struct IHTMLPaintSiteVTbl
    query_interface : Proc(IHTMLPaintSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPaintSite*, UInt32)
    release : Proc(IHTMLPaintSite*, UInt32)
    invalidate_painter_info : Proc(IHTMLPaintSite*, HRESULT)
    invalidate_rect : Proc(IHTMLPaintSite*, RECT*, HRESULT)
    invalidate_region : Proc(IHTMLPaintSite*, HRGN, HRESULT)
    get_draw_info : Proc(IHTMLPaintSite*, Int32, HTML_PAINT_DRAW_INFO*, HRESULT)
    transform_global_to_local : Proc(IHTMLPaintSite*, POINT, POINT*, HRESULT)
    transform_local_to_global : Proc(IHTMLPaintSite*, POINT, POINT*, HRESULT)
    get_hit_test_cookie : Proc(IHTMLPaintSite*, Int32*, HRESULT)
  end

  IHTMLPaintSite_GUID = "3050f6a7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPaintSite = LibC::GUID.new(0x3050f6a7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPaintSite
    lpVtbl : IHTMLPaintSiteVTbl*
  end

  struct IHTMLPainterEventInfoVTbl
    query_interface : Proc(IHTMLPainterEventInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPainterEventInfo*, UInt32)
    release : Proc(IHTMLPainterEventInfo*, UInt32)
    get_event_info_flags : Proc(IHTMLPainterEventInfo*, Int32*, HRESULT)
    get_event_target : Proc(IHTMLPainterEventInfo*, IHTMLElement*, HRESULT)
    set_cursor : Proc(IHTMLPainterEventInfo*, Int32, HRESULT)
    string_from_part_id : Proc(IHTMLPainterEventInfo*, Int32, UInt8**, HRESULT)
  end

  IHTMLPainterEventInfo_GUID = "3050f6df-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPainterEventInfo = LibC::GUID.new(0x3050f6df_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPainterEventInfo
    lpVtbl : IHTMLPainterEventInfoVTbl*
  end

  struct IHTMLPainterOverlayVTbl
    query_interface : Proc(IHTMLPainterOverlay*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPainterOverlay*, UInt32)
    release : Proc(IHTMLPainterOverlay*, UInt32)
    on_move : Proc(IHTMLPainterOverlay*, RECT, HRESULT)
  end

  IHTMLPainterOverlay_GUID = "3050f7e3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPainterOverlay = LibC::GUID.new(0x3050f7e3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPainterOverlay
    lpVtbl : IHTMLPainterOverlayVTbl*
  end

  struct IHTMLIPrintCollectionVTbl
    query_interface : Proc(IHTMLIPrintCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLIPrintCollection*, UInt32)
    release : Proc(IHTMLIPrintCollection*, UInt32)
    get_type_info_count : Proc(IHTMLIPrintCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLIPrintCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLIPrintCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLIPrintCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_length : Proc(IHTMLIPrintCollection*, Int32*, HRESULT)
    get__new_enum : Proc(IHTMLIPrintCollection*, IUnknown*, HRESULT)
    item : Proc(IHTMLIPrintCollection*, Int32, IUnknown*, HRESULT)
  end

  IHTMLIPrintCollection_GUID = "3050f6b5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLIPrintCollection = LibC::GUID.new(0x3050f6b5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLIPrintCollection
    lpVtbl : IHTMLIPrintCollectionVTbl*
  end

  struct IEnumPrivacyRecordsVTbl
    query_interface : Proc(IEnumPrivacyRecords*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPrivacyRecords*, UInt32)
    release : Proc(IEnumPrivacyRecords*, UInt32)
    reset : Proc(IEnumPrivacyRecords*, HRESULT)
    get_size : Proc(IEnumPrivacyRecords*, UInt32*, HRESULT)
    get_privacy_impacted : Proc(IEnumPrivacyRecords*, LibC::BOOL*, HRESULT)
    next : Proc(IEnumPrivacyRecords*, UInt8**, UInt8**, Int32*, UInt32*, HRESULT)
  end

  IEnumPrivacyRecords_GUID = "3050f844-98b5-11cf-bb82-00aa00bdce0b"
  IID_IEnumPrivacyRecords = LibC::GUID.new(0x3050f844_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IEnumPrivacyRecords
    lpVtbl : IEnumPrivacyRecordsVTbl*
  end

  struct IWPCBlockedUrlsVTbl
    query_interface : Proc(IWPCBlockedUrls*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWPCBlockedUrls*, UInt32)
    release : Proc(IWPCBlockedUrls*, UInt32)
    get_count : Proc(IWPCBlockedUrls*, UInt32*, HRESULT)
    get_url : Proc(IWPCBlockedUrls*, UInt32, UInt8**, HRESULT)
  end

  IWPCBlockedUrls_GUID = "30510413-98b5-11cf-bb82-00aa00bdce0b"
  IID_IWPCBlockedUrls = LibC::GUID.new(0x30510413_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IWPCBlockedUrls
    lpVtbl : IWPCBlockedUrlsVTbl*
  end

  struct IHTMLDOMConstructorCollectionVTbl
    query_interface : Proc(IHTMLDOMConstructorCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDOMConstructorCollection*, UInt32)
    release : Proc(IHTMLDOMConstructorCollection*, UInt32)
    get_type_info_count : Proc(IHTMLDOMConstructorCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDOMConstructorCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDOMConstructorCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDOMConstructorCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_attr : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_behavior_urns_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_bookmark_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_compatible_info : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_compatible_info_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_control_range_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_current_style_declaration : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_rule_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_rule_style_declaration : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_style_declaration : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_style_rule : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_css_style_sheet : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_data_transfer : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_dom_implementation : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_event : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_history : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htc_element_behavior_defaults : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_anchor_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_area_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_areas_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_base_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_base_font_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlbg_sound_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_block_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_body_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlbr_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_button_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_comment_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmldd_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_div_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_document : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmld_list_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmldt_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_embed_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_field_set_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_font_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_form_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_frame_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_frame_set_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_generic_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_head_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_heading_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlhr_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_html_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmli_frame_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_image_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_input_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_is_index_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_label_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_legend_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlli_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_link_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_map_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_marquee_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_meta_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_modeless_dialog : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_namespace_info : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_namespace_info_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_next_id_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_no_show_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_object_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlo_list_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_option_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_paragraph_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_param_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_phrase_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_plugins_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_popup : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_script_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_select_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_span_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_style_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_caption_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_cell_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_col_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_row_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_table_section_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_text_area_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_text_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_title_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_htmlu_list_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_html_unknown_element : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_image : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_location : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_named_node_map : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_navigator : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_node_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_option : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_screen : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_selection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_static_node_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_storage : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_style_sheet_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_style_sheet_page : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_style_sheet_page_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_text : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_text_range : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_text_range_collection : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_text_rectangle : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_text_rectangle_list : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_window : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_x_domain_request : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
    get_xml_http_request : Proc(IHTMLDOMConstructorCollection*, IDispatch*, HRESULT)
  end

  IHTMLDOMConstructorCollection_GUID = "3051049c-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDOMConstructorCollection = LibC::GUID.new(0x3051049c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDOMConstructorCollection
    lpVtbl : IHTMLDOMConstructorCollectionVTbl*
  end

  struct IHTMLDialogVTbl
    query_interface : Proc(IHTMLDialog*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDialog*, UInt32)
    release : Proc(IHTMLDialog*, UInt32)
    get_type_info_count : Proc(IHTMLDialog*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDialog*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDialog*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDialog*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_dialog_top : Proc(IHTMLDialog*, VARIANT, HRESULT)
    get_dialog_top : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    put_dialog_left : Proc(IHTMLDialog*, VARIANT, HRESULT)
    get_dialog_left : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    put_dialog_width : Proc(IHTMLDialog*, VARIANT, HRESULT)
    get_dialog_width : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    put_dialog_height : Proc(IHTMLDialog*, VARIANT, HRESULT)
    get_dialog_height : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    get_dialog_arguments : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    get_menu_arguments : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    put_return_value : Proc(IHTMLDialog*, VARIANT, HRESULT)
    get_return_value : Proc(IHTMLDialog*, VARIANT*, HRESULT)
    close : Proc(IHTMLDialog*, HRESULT)
    to_string : Proc(IHTMLDialog*, UInt8**, HRESULT)
  end

  IHTMLDialog_GUID = "3050f216-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDialog = LibC::GUID.new(0x3050f216_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDialog
    lpVtbl : IHTMLDialogVTbl*
  end

  struct IHTMLDialog2VTbl
    query_interface : Proc(IHTMLDialog2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDialog2*, UInt32)
    release : Proc(IHTMLDialog2*, UInt32)
    get_type_info_count : Proc(IHTMLDialog2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDialog2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDialog2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDialog2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_status : Proc(IHTMLDialog2*, UInt8*, HRESULT)
    get_status : Proc(IHTMLDialog2*, UInt8**, HRESULT)
    put_resizable : Proc(IHTMLDialog2*, UInt8*, HRESULT)
    get_resizable : Proc(IHTMLDialog2*, UInt8**, HRESULT)
  end

  IHTMLDialog2_GUID = "3050f5e0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDialog2 = LibC::GUID.new(0x3050f5e0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDialog2
    lpVtbl : IHTMLDialog2VTbl*
  end

  struct IHTMLDialog3VTbl
    query_interface : Proc(IHTMLDialog3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLDialog3*, UInt32)
    release : Proc(IHTMLDialog3*, UInt32)
    get_type_info_count : Proc(IHTMLDialog3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLDialog3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLDialog3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLDialog3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_unadorned : Proc(IHTMLDialog3*, UInt8*, HRESULT)
    get_unadorned : Proc(IHTMLDialog3*, UInt8**, HRESULT)
    put_dialog_hide : Proc(IHTMLDialog3*, UInt8*, HRESULT)
    get_dialog_hide : Proc(IHTMLDialog3*, UInt8**, HRESULT)
  end

  IHTMLDialog3_GUID = "3050f388-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLDialog3 = LibC::GUID.new(0x3050f388_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLDialog3
    lpVtbl : IHTMLDialog3VTbl*
  end

  struct IHTMLModelessInitVTbl
    query_interface : Proc(IHTMLModelessInit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLModelessInit*, UInt32)
    release : Proc(IHTMLModelessInit*, UInt32)
    get_type_info_count : Proc(IHTMLModelessInit*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLModelessInit*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLModelessInit*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLModelessInit*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_parameters : Proc(IHTMLModelessInit*, VARIANT*, HRESULT)
    get_option_string : Proc(IHTMLModelessInit*, VARIANT*, HRESULT)
    get_moniker : Proc(IHTMLModelessInit*, IUnknown*, HRESULT)
    get_document : Proc(IHTMLModelessInit*, IUnknown*, HRESULT)
  end

  IHTMLModelessInit_GUID = "3050f5e4-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLModelessInit = LibC::GUID.new(0x3050f5e4_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLModelessInit
    lpVtbl : IHTMLModelessInitVTbl*
  end

  struct IHTMLPopupVTbl
    query_interface : Proc(IHTMLPopup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPopup*, UInt32)
    release : Proc(IHTMLPopup*, UInt32)
    get_type_info_count : Proc(IHTMLPopup*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPopup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPopup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPopup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    show : Proc(IHTMLPopup*, Int32, Int32, Int32, Int32, VARIANT*, HRESULT)
    hide : Proc(IHTMLPopup*, HRESULT)
    get_document : Proc(IHTMLPopup*, IHTMLDocument*, HRESULT)
    get_is_open : Proc(IHTMLPopup*, Int16*, HRESULT)
  end

  IHTMLPopup_GUID = "3050f666-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPopup = LibC::GUID.new(0x3050f666_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPopup
    lpVtbl : IHTMLPopupVTbl*
  end

  struct DispHTMLPopupVTbl
    query_interface : Proc(DispHTMLPopup*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLPopup*, UInt32)
    release : Proc(DispHTMLPopup*, UInt32)
    get_type_info_count : Proc(DispHTMLPopup*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLPopup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLPopup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLPopup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLPopup_GUID = "3050f589-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLPopup = LibC::GUID.new(0x3050f589_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLPopup
    lpVtbl : DispHTMLPopupVTbl*
  end

  struct IHTMLAppBehaviorVTbl
    query_interface : Proc(IHTMLAppBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAppBehavior*, UInt32)
    release : Proc(IHTMLAppBehavior*, UInt32)
    get_type_info_count : Proc(IHTMLAppBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAppBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAppBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAppBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_application_name : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_application_name : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_version : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_version : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_icon : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_icon : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_single_instance : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_single_instance : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_minimize_button : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_minimize_button : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_maximize_button : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_maximize_button : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_border : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_border : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_border_style : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_border_style : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_sys_menu : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_sys_menu : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_caption : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_caption : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_window_state : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_window_state : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    put_show_in_task_bar : Proc(IHTMLAppBehavior*, UInt8*, HRESULT)
    get_show_in_task_bar : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
    get_command_line : Proc(IHTMLAppBehavior*, UInt8**, HRESULT)
  end

  IHTMLAppBehavior_GUID = "3050f5ca-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAppBehavior = LibC::GUID.new(0x3050f5ca_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAppBehavior
    lpVtbl : IHTMLAppBehaviorVTbl*
  end

  struct IHTMLAppBehavior2VTbl
    query_interface : Proc(IHTMLAppBehavior2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAppBehavior2*, UInt32)
    release : Proc(IHTMLAppBehavior2*, UInt32)
    get_type_info_count : Proc(IHTMLAppBehavior2*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAppBehavior2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAppBehavior2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAppBehavior2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_context_menu : Proc(IHTMLAppBehavior2*, UInt8*, HRESULT)
    get_context_menu : Proc(IHTMLAppBehavior2*, UInt8**, HRESULT)
    put_inner_border : Proc(IHTMLAppBehavior2*, UInt8*, HRESULT)
    get_inner_border : Proc(IHTMLAppBehavior2*, UInt8**, HRESULT)
    put_scroll : Proc(IHTMLAppBehavior2*, UInt8*, HRESULT)
    get_scroll : Proc(IHTMLAppBehavior2*, UInt8**, HRESULT)
    put_scroll_flat : Proc(IHTMLAppBehavior2*, UInt8*, HRESULT)
    get_scroll_flat : Proc(IHTMLAppBehavior2*, UInt8**, HRESULT)
    put_selection : Proc(IHTMLAppBehavior2*, UInt8*, HRESULT)
    get_selection : Proc(IHTMLAppBehavior2*, UInt8**, HRESULT)
  end

  IHTMLAppBehavior2_GUID = "3050f5c9-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAppBehavior2 = LibC::GUID.new(0x3050f5c9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAppBehavior2
    lpVtbl : IHTMLAppBehavior2VTbl*
  end

  struct IHTMLAppBehavior3VTbl
    query_interface : Proc(IHTMLAppBehavior3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLAppBehavior3*, UInt32)
    release : Proc(IHTMLAppBehavior3*, UInt32)
    get_type_info_count : Proc(IHTMLAppBehavior3*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLAppBehavior3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLAppBehavior3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLAppBehavior3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_navigable : Proc(IHTMLAppBehavior3*, UInt8*, HRESULT)
    get_navigable : Proc(IHTMLAppBehavior3*, UInt8**, HRESULT)
  end

  IHTMLAppBehavior3_GUID = "3050f5cd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLAppBehavior3 = LibC::GUID.new(0x3050f5cd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLAppBehavior3
    lpVtbl : IHTMLAppBehavior3VTbl*
  end

  struct DispHTMLAppBehaviorVTbl
    query_interface : Proc(DispHTMLAppBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispHTMLAppBehavior*, UInt32)
    release : Proc(DispHTMLAppBehavior*, UInt32)
    get_type_info_count : Proc(DispHTMLAppBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(DispHTMLAppBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispHTMLAppBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispHTMLAppBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispHTMLAppBehavior_GUID = "3050f57c-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispHTMLAppBehavior = LibC::GUID.new(0x3050f57c_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispHTMLAppBehavior
    lpVtbl : DispHTMLAppBehaviorVTbl*
  end

  struct DispIHTMLInputButtonElementVTbl
    query_interface : Proc(DispIHTMLInputButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispIHTMLInputButtonElement*, UInt32)
    release : Proc(DispIHTMLInputButtonElement*, UInt32)
    get_type_info_count : Proc(DispIHTMLInputButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispIHTMLInputButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispIHTMLInputButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispIHTMLInputButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispIHTMLInputButtonElement_GUID = "3050f51e-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispIHTMLInputButtonElement = LibC::GUID.new(0x3050f51e_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispIHTMLInputButtonElement
    lpVtbl : DispIHTMLInputButtonElementVTbl*
  end

  struct DispIHTMLInputTextElementVTbl
    query_interface : Proc(DispIHTMLInputTextElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispIHTMLInputTextElement*, UInt32)
    release : Proc(DispIHTMLInputTextElement*, UInt32)
    get_type_info_count : Proc(DispIHTMLInputTextElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispIHTMLInputTextElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispIHTMLInputTextElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispIHTMLInputTextElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispIHTMLInputTextElement_GUID = "3050f520-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispIHTMLInputTextElement = LibC::GUID.new(0x3050f520_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispIHTMLInputTextElement
    lpVtbl : DispIHTMLInputTextElementVTbl*
  end

  struct DispIHTMLInputFileElementVTbl
    query_interface : Proc(DispIHTMLInputFileElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispIHTMLInputFileElement*, UInt32)
    release : Proc(DispIHTMLInputFileElement*, UInt32)
    get_type_info_count : Proc(DispIHTMLInputFileElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispIHTMLInputFileElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispIHTMLInputFileElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispIHTMLInputFileElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispIHTMLInputFileElement_GUID = "3050f542-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispIHTMLInputFileElement = LibC::GUID.new(0x3050f542_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispIHTMLInputFileElement
    lpVtbl : DispIHTMLInputFileElementVTbl*
  end

  struct DispIHTMLOptionButtonElementVTbl
    query_interface : Proc(DispIHTMLOptionButtonElement*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispIHTMLOptionButtonElement*, UInt32)
    release : Proc(DispIHTMLOptionButtonElement*, UInt32)
    get_type_info_count : Proc(DispIHTMLOptionButtonElement*, UInt32*, HRESULT)
    get_type_info : Proc(DispIHTMLOptionButtonElement*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispIHTMLOptionButtonElement*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispIHTMLOptionButtonElement*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispIHTMLOptionButtonElement_GUID = "3050f509-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispIHTMLOptionButtonElement = LibC::GUID.new(0x3050f509_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispIHTMLOptionButtonElement
    lpVtbl : DispIHTMLOptionButtonElementVTbl*
  end

  struct DispIHTMLInputImageVTbl
    query_interface : Proc(DispIHTMLInputImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(DispIHTMLInputImage*, UInt32)
    release : Proc(DispIHTMLInputImage*, UInt32)
    get_type_info_count : Proc(DispIHTMLInputImage*, UInt32*, HRESULT)
    get_type_info : Proc(DispIHTMLInputImage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DispIHTMLInputImage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DispIHTMLInputImage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  DispIHTMLInputImage_GUID = "3050f51d-98b5-11cf-bb82-00aa00bdce0b"
  IID_DispIHTMLInputImage = LibC::GUID.new(0x3050f51d_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct DispIHTMLInputImage
    lpVtbl : DispIHTMLInputImageVTbl*
  end

  struct IElementNamespaceVTbl
    query_interface : Proc(IElementNamespace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementNamespace*, UInt32)
    release : Proc(IElementNamespace*, UInt32)
    add_tag : Proc(IElementNamespace*, UInt8*, Int32, HRESULT)
  end

  IElementNamespace_GUID = "3050f671-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementNamespace = LibC::GUID.new(0x3050f671_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementNamespace
    lpVtbl : IElementNamespaceVTbl*
  end

  struct IElementNamespaceTableVTbl
    query_interface : Proc(IElementNamespaceTable*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementNamespaceTable*, UInt32)
    release : Proc(IElementNamespaceTable*, UInt32)
    add_namespace : Proc(IElementNamespaceTable*, UInt8*, UInt8*, Int32, VARIANT*, HRESULT)
  end

  IElementNamespaceTable_GUID = "3050f670-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementNamespaceTable = LibC::GUID.new(0x3050f670_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementNamespaceTable
    lpVtbl : IElementNamespaceTableVTbl*
  end

  struct IElementNamespaceFactoryVTbl
    query_interface : Proc(IElementNamespaceFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementNamespaceFactory*, UInt32)
    release : Proc(IElementNamespaceFactory*, UInt32)
    create : Proc(IElementNamespaceFactory*, IElementNamespace, HRESULT)
  end

  IElementNamespaceFactory_GUID = "3050f672-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementNamespaceFactory = LibC::GUID.new(0x3050f672_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementNamespaceFactory
    lpVtbl : IElementNamespaceFactoryVTbl*
  end

  struct IElementNamespaceFactory2VTbl
    query_interface : Proc(IElementNamespaceFactory2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementNamespaceFactory2*, UInt32)
    release : Proc(IElementNamespaceFactory2*, UInt32)
    create : Proc(IElementNamespaceFactory2*, IElementNamespace, HRESULT)
    create_with_implementation : Proc(IElementNamespaceFactory2*, IElementNamespace, UInt8*, HRESULT)
  end

  IElementNamespaceFactory2_GUID = "3050f805-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementNamespaceFactory2 = LibC::GUID.new(0x3050f805_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementNamespaceFactory2
    lpVtbl : IElementNamespaceFactory2VTbl*
  end

  struct IElementNamespaceFactoryCallbackVTbl
    query_interface : Proc(IElementNamespaceFactoryCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementNamespaceFactoryCallback*, UInt32)
    release : Proc(IElementNamespaceFactoryCallback*, UInt32)
    resolve : Proc(IElementNamespaceFactoryCallback*, UInt8*, UInt8*, UInt8*, IElementNamespace, HRESULT)
  end

  IElementNamespaceFactoryCallback_GUID = "3050f7fd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementNamespaceFactoryCallback = LibC::GUID.new(0x3050f7fd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementNamespaceFactoryCallback
    lpVtbl : IElementNamespaceFactoryCallbackVTbl*
  end

  struct IElementBehaviorSiteOM2VTbl
    query_interface : Proc(IElementBehaviorSiteOM2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteOM2*, UInt32)
    release : Proc(IElementBehaviorSiteOM2*, UInt32)
    register_event : Proc(IElementBehaviorSiteOM2*, LibC::LPWSTR, Int32, Int32*, HRESULT)
    get_event_cookie : Proc(IElementBehaviorSiteOM2*, LibC::LPWSTR, Int32*, HRESULT)
    fire_event : Proc(IElementBehaviorSiteOM2*, Int32, IHTMLEventObj, HRESULT)
    create_event_object : Proc(IElementBehaviorSiteOM2*, IHTMLEventObj*, HRESULT)
    register_name : Proc(IElementBehaviorSiteOM2*, LibC::LPWSTR, HRESULT)
    register_urn : Proc(IElementBehaviorSiteOM2*, LibC::LPWSTR, HRESULT)
    get_defaults : Proc(IElementBehaviorSiteOM2*, IHTMLElementDefaults*, HRESULT)
  end

  IElementBehaviorSiteOM2_GUID = "3050f659-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteOM2 = LibC::GUID.new(0x3050f659_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteOM2
    lpVtbl : IElementBehaviorSiteOM2VTbl*
  end

  struct IElementBehaviorCategoryVTbl
    query_interface : Proc(IElementBehaviorCategory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorCategory*, UInt32)
    release : Proc(IElementBehaviorCategory*, UInt32)
    get_category : Proc(IElementBehaviorCategory*, LibC::LPWSTR*, HRESULT)
  end

  IElementBehaviorCategory_GUID = "3050f4ed-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorCategory = LibC::GUID.new(0x3050f4ed_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorCategory
    lpVtbl : IElementBehaviorCategoryVTbl*
  end

  struct IElementBehaviorSiteCategoryVTbl
    query_interface : Proc(IElementBehaviorSiteCategory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteCategory*, UInt32)
    release : Proc(IElementBehaviorSiteCategory*, UInt32)
    get_related_behaviors : Proc(IElementBehaviorSiteCategory*, Int32, LibC::LPWSTR, IEnumUnknown*, HRESULT)
  end

  IElementBehaviorSiteCategory_GUID = "3050f4ee-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteCategory = LibC::GUID.new(0x3050f4ee_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteCategory
    lpVtbl : IElementBehaviorSiteCategoryVTbl*
  end

  struct IElementBehaviorSubmitVTbl
    query_interface : Proc(IElementBehaviorSubmit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSubmit*, UInt32)
    release : Proc(IElementBehaviorSubmit*, UInt32)
    get_submit_info : Proc(IElementBehaviorSubmit*, IHTMLSubmitData, HRESULT)
    reset : Proc(IElementBehaviorSubmit*, HRESULT)
  end

  IElementBehaviorSubmit_GUID = "3050f646-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSubmit = LibC::GUID.new(0x3050f646_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSubmit
    lpVtbl : IElementBehaviorSubmitVTbl*
  end

  struct IElementBehaviorFocusVTbl
    query_interface : Proc(IElementBehaviorFocus*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorFocus*, UInt32)
    release : Proc(IElementBehaviorFocus*, UInt32)
    get_focus_rect : Proc(IElementBehaviorFocus*, RECT*, HRESULT)
  end

  IElementBehaviorFocus_GUID = "3050f6b6-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorFocus = LibC::GUID.new(0x3050f6b6_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorFocus
    lpVtbl : IElementBehaviorFocusVTbl*
  end

  struct IElementBehaviorLayoutVTbl
    query_interface : Proc(IElementBehaviorLayout*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorLayout*, UInt32)
    release : Proc(IElementBehaviorLayout*, UInt32)
    get_size : Proc(IElementBehaviorLayout*, Int32, SIZE, POINT*, POINT*, SIZE*, HRESULT)
    get_layout_info : Proc(IElementBehaviorLayout*, Int32*, HRESULT)
    get_position : Proc(IElementBehaviorLayout*, Int32, POINT*, HRESULT)
    map_size : Proc(IElementBehaviorLayout*, SIZE*, RECT*, HRESULT)
  end

  IElementBehaviorLayout_GUID = "3050f6ba-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorLayout = LibC::GUID.new(0x3050f6ba_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorLayout
    lpVtbl : IElementBehaviorLayoutVTbl*
  end

  struct IElementBehaviorLayout2VTbl
    query_interface : Proc(IElementBehaviorLayout2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorLayout2*, UInt32)
    release : Proc(IElementBehaviorLayout2*, UInt32)
    get_text_descent : Proc(IElementBehaviorLayout2*, Int32*, HRESULT)
  end

  IElementBehaviorLayout2_GUID = "3050f846-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorLayout2 = LibC::GUID.new(0x3050f846_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorLayout2
    lpVtbl : IElementBehaviorLayout2VTbl*
  end

  struct IElementBehaviorSiteLayoutVTbl
    query_interface : Proc(IElementBehaviorSiteLayout*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteLayout*, UInt32)
    release : Proc(IElementBehaviorSiteLayout*, UInt32)
    invalidate_layout_info : Proc(IElementBehaviorSiteLayout*, HRESULT)
    invalidate_size : Proc(IElementBehaviorSiteLayout*, HRESULT)
    get_media_resolution : Proc(IElementBehaviorSiteLayout*, SIZE*, HRESULT)
  end

  IElementBehaviorSiteLayout_GUID = "3050f6b7-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteLayout = LibC::GUID.new(0x3050f6b7_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteLayout
    lpVtbl : IElementBehaviorSiteLayoutVTbl*
  end

  struct IElementBehaviorSiteLayout2VTbl
    query_interface : Proc(IElementBehaviorSiteLayout2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IElementBehaviorSiteLayout2*, UInt32)
    release : Proc(IElementBehaviorSiteLayout2*, UInt32)
    get_font_info : Proc(IElementBehaviorSiteLayout2*, LOGFONTW*, HRESULT)
  end

  IElementBehaviorSiteLayout2_GUID = "3050f847-98b5-11cf-bb82-00aa00bdce0b"
  IID_IElementBehaviorSiteLayout2 = LibC::GUID.new(0x3050f847_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IElementBehaviorSiteLayout2
    lpVtbl : IElementBehaviorSiteLayout2VTbl*
  end

  struct IHostBehaviorInitVTbl
    query_interface : Proc(IHostBehaviorInit*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHostBehaviorInit*, UInt32)
    release : Proc(IHostBehaviorInit*, UInt32)
    populate_namespace_table : Proc(IHostBehaviorInit*, HRESULT)
  end

  IHostBehaviorInit_GUID = "3050f842-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHostBehaviorInit = LibC::GUID.new(0x3050f842_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHostBehaviorInit
    lpVtbl : IHostBehaviorInitVTbl*
  end

  struct ISurfacePresenterVTbl
    query_interface : Proc(ISurfacePresenter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISurfacePresenter*, UInt32)
    release : Proc(ISurfacePresenter*, UInt32)
    present : Proc(ISurfacePresenter*, UInt32, RECT*, HRESULT)
    get_buffer : Proc(ISurfacePresenter*, UInt32, Guid*, Void**, HRESULT)
    is_current : Proc(ISurfacePresenter*, LibC::BOOL*, HRESULT)
  end

  ISurfacePresenter_GUID = "305106e2-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISurfacePresenter = LibC::GUID.new(0x305106e2_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISurfacePresenter
    lpVtbl : ISurfacePresenterVTbl*
  end

  struct IViewObjectPresentSiteVTbl
    query_interface : Proc(IViewObjectPresentSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentSite*, UInt32)
    release : Proc(IViewObjectPresentSite*, UInt32)
    create_surface_presenter : Proc(IViewObjectPresentSite*, IUnknown, UInt32, UInt32, UInt32, DXGI_FORMAT, VIEW_OBJECT_ALPHA_MODE, ISurfacePresenter*, HRESULT)
    is_hardware_composition : Proc(IViewObjectPresentSite*, LibC::BOOL*, HRESULT)
    set_composition_mode : Proc(IViewObjectPresentSite*, VIEW_OBJECT_COMPOSITION_MODE, HRESULT)
  end

  IViewObjectPresentSite_GUID = "305106e1-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentSite = LibC::GUID.new(0x305106e1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentSite
    lpVtbl : IViewObjectPresentSiteVTbl*
  end

  struct ICanvasPixelArrayDataVTbl
    query_interface : Proc(ICanvasPixelArrayData*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICanvasPixelArrayData*, UInt32)
    release : Proc(ICanvasPixelArrayData*, UInt32)
    get_buffer_pointer : Proc(ICanvasPixelArrayData*, UInt8**, UInt32*, HRESULT)
  end

  ICanvasPixelArrayData_GUID = "305107f9-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICanvasPixelArrayData = LibC::GUID.new(0x305107f9_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICanvasPixelArrayData
    lpVtbl : ICanvasPixelArrayDataVTbl*
  end

  struct IViewObjectPrintVTbl
    query_interface : Proc(IViewObjectPrint*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPrint*, UInt32)
    release : Proc(IViewObjectPrint*, UInt32)
    get_print_bitmap : Proc(IViewObjectPrint*, IUnknown*, HRESULT)
  end

  IViewObjectPrint_GUID = "305106e3-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPrint = LibC::GUID.new(0x305106e3_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPrint
    lpVtbl : IViewObjectPrintVTbl*
  end

  struct IViewObjectPresentNotifySiteVTbl
    query_interface : Proc(IViewObjectPresentNotifySite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentNotifySite*, UInt32)
    release : Proc(IViewObjectPresentNotifySite*, UInt32)
    create_surface_presenter : Proc(IViewObjectPresentNotifySite*, IUnknown, UInt32, UInt32, UInt32, DXGI_FORMAT, VIEW_OBJECT_ALPHA_MODE, ISurfacePresenter*, HRESULT)
    is_hardware_composition : Proc(IViewObjectPresentNotifySite*, LibC::BOOL*, HRESULT)
    set_composition_mode : Proc(IViewObjectPresentNotifySite*, VIEW_OBJECT_COMPOSITION_MODE, HRESULT)
    request_frame : Proc(IViewObjectPresentNotifySite*, HRESULT)
  end

  IViewObjectPresentNotifySite_GUID = "305107fa-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentNotifySite = LibC::GUID.new(0x305107fa_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentNotifySite
    lpVtbl : IViewObjectPresentNotifySiteVTbl*
  end

  struct IViewObjectPresentNotifyVTbl
    query_interface : Proc(IViewObjectPresentNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentNotify*, UInt32)
    release : Proc(IViewObjectPresentNotify*, UInt32)
    on_pre_render : Proc(IViewObjectPresentNotify*, HRESULT)
  end

  IViewObjectPresentNotify_GUID = "305107f8-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentNotify = LibC::GUID.new(0x305107f8_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentNotify
    lpVtbl : IViewObjectPresentNotifyVTbl*
  end

  struct ITrackingProtectionVTbl
    query_interface : Proc(ITrackingProtection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITrackingProtection*, UInt32)
    release : Proc(ITrackingProtection*, UInt32)
    evaluate_url : Proc(ITrackingProtection*, UInt8*, LibC::BOOL*, HRESULT)
    get_enabled : Proc(ITrackingProtection*, LibC::BOOL*, HRESULT)
  end

  ITrackingProtection_GUID = "30510803-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITrackingProtection = LibC::GUID.new(0x30510803_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITrackingProtection
    lpVtbl : ITrackingProtectionVTbl*
  end

  struct IBFCacheableVTbl
    query_interface : Proc(IBFCacheable*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBFCacheable*, UInt32)
    release : Proc(IBFCacheable*, UInt32)
    enter_bf_cache : Proc(IBFCacheable*, HRESULT)
    exit_bf_cache : Proc(IBFCacheable*, HRESULT)
  end

  IBFCacheable_GUID = "30510861-98b5-11cf-bb82-00aa00bdce0b"
  IID_IBFCacheable = LibC::GUID.new(0x30510861_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IBFCacheable
    lpVtbl : IBFCacheableVTbl*
  end

  struct IDocObjectServiceVTbl
    query_interface : Proc(IDocObjectService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocObjectService*, UInt32)
    release : Proc(IDocObjectService*, UInt32)
    fire_before_navigate2 : Proc(IDocObjectService*, IDispatch, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt8*, UInt32, LibC::LPWSTR, LibC::BOOL, LibC::BOOL*, HRESULT)
    fire_navigate_complete2 : Proc(IDocObjectService*, IHTMLWindow2, UInt32, HRESULT)
    fire_download_begin : Proc(IDocObjectService*, HRESULT)
    fire_download_complete : Proc(IDocObjectService*, HRESULT)
    fire_document_complete : Proc(IDocObjectService*, IHTMLWindow2, UInt32, HRESULT)
    update_desktop_component : Proc(IDocObjectService*, IHTMLWindow2, HRESULT)
    get_pending_url : Proc(IDocObjectService*, UInt8**, HRESULT)
    active_element_changed : Proc(IDocObjectService*, IHTMLElement, HRESULT)
    get_url_search_component : Proc(IDocObjectService*, UInt8**, HRESULT)
    is_error_url : Proc(IDocObjectService*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
  end

  IDocObjectService_GUID = "3050f801-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocObjectService = LibC::GUID.new(0x3050f801_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocObjectService
    lpVtbl : IDocObjectServiceVTbl*
  end

  struct IDownloadManagerVTbl
    query_interface : Proc(IDownloadManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDownloadManager*, UInt32)
    release : Proc(IDownloadManager*, UInt32)
    download : Proc(IDownloadManager*, IMoniker, IBindCtx, UInt32, Int32, BINDINFO*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
  end

  IDownloadManager_GUID = "988934a4-064b-11d3-bb80-00104b35e7f9"
  IID_IDownloadManager = LibC::GUID.new(0x988934a4_u32, 0x64b_u16, 0x11d3_u16, StaticArray[0xbb_u8, 0x80_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0x35_u8, 0xe7_u8, 0xf9_u8])
  struct IDownloadManager
    lpVtbl : IDownloadManagerVTbl*
  end

  struct IExtensionValidationVTbl
    query_interface : Proc(IExtensionValidation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IExtensionValidation*, UInt32)
    release : Proc(IExtensionValidation*, UInt32)
    validate : Proc(IExtensionValidation*, Guid*, LibC::LPWSTR, UInt32, UInt32, IHTMLDocument2, IHTMLDocument2, IHTMLElement, ExtensionValidationContexts, ExtensionValidationResults*, HRESULT)
    display_name : Proc(IExtensionValidation*, LibC::LPWSTR*, HRESULT)
  end

  IExtensionValidation_GUID = "7d33f73d-8525-4e0f-87db-830288baff44"
  IID_IExtensionValidation = LibC::GUID.new(0x7d33f73d_u32, 0x8525_u16, 0x4e0f_u16, StaticArray[0x87_u8, 0xdb_u8, 0x83_u8, 0x2_u8, 0x88_u8, 0xba_u8, 0xff_u8, 0x44_u8])
  struct IExtensionValidation
    lpVtbl : IExtensionValidationVTbl*
  end

  struct IHomePageSettingVTbl
    query_interface : Proc(IHomePageSetting*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHomePageSetting*, UInt32)
    release : Proc(IHomePageSetting*, UInt32)
    set_home_page : Proc(IHomePageSetting*, LibC::HANDLE, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    is_home_page : Proc(IHomePageSetting*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    set_home_page_to_browser_default : Proc(IHomePageSetting*, HRESULT)
  end

  IHomePageSetting_GUID = "fdfc244f-18fa-4ff2-b08e-1d618f3ffbe4"
  IID_IHomePageSetting = LibC::GUID.new(0xfdfc244f_u32, 0x18fa_u16, 0x4ff2_u16, StaticArray[0xb0_u8, 0x8e_u8, 0x1d_u8, 0x61_u8, 0x8f_u8, 0x3f_u8, 0xfb_u8, 0xe4_u8])
  struct IHomePageSetting
    lpVtbl : IHomePageSettingVTbl*
  end

  struct ITargetNotifyVTbl
    query_interface : Proc(ITargetNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetNotify*, UInt32)
    release : Proc(ITargetNotify*, UInt32)
    on_create : Proc(ITargetNotify*, IUnknown, UInt32, HRESULT)
    on_reuse : Proc(ITargetNotify*, IUnknown, HRESULT)
  end

  ITargetNotify_GUID = "863a99a0-21bc-11d0-82b4-00a0c90c29c5"
  IID_ITargetNotify = LibC::GUID.new(0x863a99a0_u32, 0x21bc_u16, 0x11d0_u16, StaticArray[0x82_u8, 0xb4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc_u8, 0x29_u8, 0xc5_u8])
  struct ITargetNotify
    lpVtbl : ITargetNotifyVTbl*
  end

  struct ITargetNotify2VTbl
    query_interface : Proc(ITargetNotify2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetNotify2*, UInt32)
    release : Proc(ITargetNotify2*, UInt32)
    on_create : Proc(ITargetNotify2*, IUnknown, UInt32, HRESULT)
    on_reuse : Proc(ITargetNotify2*, IUnknown, HRESULT)
    get_option_string : Proc(ITargetNotify2*, UInt8**, HRESULT)
  end

  ITargetNotify2_GUID = "3050f6b1-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITargetNotify2 = LibC::GUID.new(0x3050f6b1_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITargetNotify2
    lpVtbl : ITargetNotify2VTbl*
  end

  struct ITargetFrame2VTbl
    query_interface : Proc(ITargetFrame2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetFrame2*, UInt32)
    release : Proc(ITargetFrame2*, UInt32)
    set_frame_name : Proc(ITargetFrame2*, LibC::LPWSTR, HRESULT)
    get_frame_name : Proc(ITargetFrame2*, LibC::LPWSTR*, HRESULT)
    get_parent_frame : Proc(ITargetFrame2*, IUnknown*, HRESULT)
    set_frame_src : Proc(ITargetFrame2*, LibC::LPWSTR, HRESULT)
    get_frame_src : Proc(ITargetFrame2*, LibC::LPWSTR*, HRESULT)
    get_frames_container : Proc(ITargetFrame2*, IOleContainer*, HRESULT)
    set_frame_options : Proc(ITargetFrame2*, UInt32, HRESULT)
    get_frame_options : Proc(ITargetFrame2*, UInt32*, HRESULT)
    set_frame_margins : Proc(ITargetFrame2*, UInt32, UInt32, HRESULT)
    get_frame_margins : Proc(ITargetFrame2*, UInt32*, UInt32*, HRESULT)
    find_frame : Proc(ITargetFrame2*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    get_target_alias : Proc(ITargetFrame2*, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
  end

  ITargetFrame2_GUID = "86d52e11-94a8-11d0-82af-00c04fd5ae38"
  IID_ITargetFrame2 = LibC::GUID.new(0x86d52e11_u32, 0x94a8_u16, 0x11d0_u16, StaticArray[0x82_u8, 0xaf_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd5_u8, 0xae_u8, 0x38_u8])
  struct ITargetFrame2
    lpVtbl : ITargetFrame2VTbl*
  end

  struct ITargetContainerVTbl
    query_interface : Proc(ITargetContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetContainer*, UInt32)
    release : Proc(ITargetContainer*, UInt32)
    get_frame_url : Proc(ITargetContainer*, LibC::LPWSTR*, HRESULT)
    get_frames_container : Proc(ITargetContainer*, IOleContainer*, HRESULT)
  end

  ITargetContainer_GUID = "7847ec01-2bec-11d0-82b4-00a0c90c29c5"
  IID_ITargetContainer = LibC::GUID.new(0x7847ec01_u32, 0x2bec_u16, 0x11d0_u16, StaticArray[0x82_u8, 0xb4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc_u8, 0x29_u8, 0xc5_u8])
  struct ITargetContainer
    lpVtbl : ITargetContainerVTbl*
  end

  struct ITargetFrameVTbl
    query_interface : Proc(ITargetFrame*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetFrame*, UInt32)
    release : Proc(ITargetFrame*, UInt32)
    set_frame_name : Proc(ITargetFrame*, LibC::LPWSTR, HRESULT)
    get_frame_name : Proc(ITargetFrame*, LibC::LPWSTR*, HRESULT)
    get_parent_frame : Proc(ITargetFrame*, IUnknown*, HRESULT)
    find_frame : Proc(ITargetFrame*, LibC::LPWSTR, IUnknown, UInt32, IUnknown*, HRESULT)
    set_frame_src : Proc(ITargetFrame*, LibC::LPWSTR, HRESULT)
    get_frame_src : Proc(ITargetFrame*, LibC::LPWSTR*, HRESULT)
    get_frames_container : Proc(ITargetFrame*, IOleContainer*, HRESULT)
    set_frame_options : Proc(ITargetFrame*, UInt32, HRESULT)
    get_frame_options : Proc(ITargetFrame*, UInt32*, HRESULT)
    set_frame_margins : Proc(ITargetFrame*, UInt32, UInt32, HRESULT)
    get_frame_margins : Proc(ITargetFrame*, UInt32*, UInt32*, HRESULT)
    remote_navigate : Proc(ITargetFrame*, UInt32, UInt32*, HRESULT)
    on_child_frame_activate : Proc(ITargetFrame*, IUnknown, HRESULT)
    on_child_frame_deactivate : Proc(ITargetFrame*, IUnknown, HRESULT)
  end

  ITargetFrame_GUID = "d5f78c80-5252-11cf-90fa-00aa0042106e"
  IID_ITargetFrame = LibC::GUID.new(0xd5f78c80_u32, 0x5252_u16, 0x11cf_u16, StaticArray[0x90_u8, 0xfa_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x42_u8, 0x10_u8, 0x6e_u8])
  struct ITargetFrame
    lpVtbl : ITargetFrameVTbl*
  end

  struct ITargetEmbeddingVTbl
    query_interface : Proc(ITargetEmbedding*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetEmbedding*, UInt32)
    release : Proc(ITargetEmbedding*, UInt32)
    get_target_frame : Proc(ITargetEmbedding*, ITargetFrame*, HRESULT)
  end

  ITargetEmbedding_GUID = "548793c0-9e74-11cf-9655-00a0c9034923"
  IID_ITargetEmbedding = LibC::GUID.new(0x548793c0_u32, 0x9e74_u16, 0x11cf_u16, StaticArray[0x96_u8, 0x55_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x3_u8, 0x49_u8, 0x23_u8])
  struct ITargetEmbedding
    lpVtbl : ITargetEmbeddingVTbl*
  end

  struct ITargetFramePrivVTbl
    query_interface : Proc(ITargetFramePriv*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetFramePriv*, UInt32)
    release : Proc(ITargetFramePriv*, UInt32)
    find_frame_downwards : Proc(ITargetFramePriv*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    find_frame_in_context : Proc(ITargetFramePriv*, LibC::LPWSTR, IUnknown, UInt32, IUnknown*, HRESULT)
    on_child_frame_activate : Proc(ITargetFramePriv*, IUnknown, HRESULT)
    on_child_frame_deactivate : Proc(ITargetFramePriv*, IUnknown, HRESULT)
    navigate_hack : Proc(ITargetFramePriv*, UInt32, IBindCtx, IBindStatusCallback, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    find_browser_by_index : Proc(ITargetFramePriv*, UInt32, IUnknown*, HRESULT)
  end

  ITargetFramePriv_GUID = "9216e421-2bf5-11d0-82b4-00a0c90c29c5"
  IID_ITargetFramePriv = LibC::GUID.new(0x9216e421_u32, 0x2bf5_u16, 0x11d0_u16, StaticArray[0x82_u8, 0xb4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc_u8, 0x29_u8, 0xc5_u8])
  struct ITargetFramePriv
    lpVtbl : ITargetFramePrivVTbl*
  end

  struct ITargetFramePriv2VTbl
    query_interface : Proc(ITargetFramePriv2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITargetFramePriv2*, UInt32)
    release : Proc(ITargetFramePriv2*, UInt32)
    find_frame_downwards : Proc(ITargetFramePriv2*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    find_frame_in_context : Proc(ITargetFramePriv2*, LibC::LPWSTR, IUnknown, UInt32, IUnknown*, HRESULT)
    on_child_frame_activate : Proc(ITargetFramePriv2*, IUnknown, HRESULT)
    on_child_frame_deactivate : Proc(ITargetFramePriv2*, IUnknown, HRESULT)
    navigate_hack : Proc(ITargetFramePriv2*, UInt32, IBindCtx, IBindStatusCallback, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    find_browser_by_index : Proc(ITargetFramePriv2*, UInt32, IUnknown*, HRESULT)
    aggregated_navigation2 : Proc(ITargetFramePriv2*, UInt32, IBindCtx, IBindStatusCallback, LibC::LPWSTR, IUri, LibC::LPWSTR, HRESULT)
  end

  ITargetFramePriv2_GUID = "b2c867e6-69d6-46f2-a611-ded9a4bd7fef"
  IID_ITargetFramePriv2 = LibC::GUID.new(0xb2c867e6_u32, 0x69d6_u16, 0x46f2_u16, StaticArray[0xa6_u8, 0x11_u8, 0xde_u8, 0xd9_u8, 0xa4_u8, 0xbd_u8, 0x7f_u8, 0xef_u8])
  struct ITargetFramePriv2
    lpVtbl : ITargetFramePriv2VTbl*
  end

  struct ISurfacePresenterFlipBufferVTbl
    query_interface : Proc(ISurfacePresenterFlipBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISurfacePresenterFlipBuffer*, UInt32)
    release : Proc(ISurfacePresenterFlipBuffer*, UInt32)
    begin_draw : Proc(ISurfacePresenterFlipBuffer*, Guid*, Void**, HRESULT)
    end_draw : Proc(ISurfacePresenterFlipBuffer*, HRESULT)
  end

  ISurfacePresenterFlipBuffer_GUID = "e43f4a08-8bbc-4665-ac92-c55ce61fd7e7"
  IID_ISurfacePresenterFlipBuffer = LibC::GUID.new(0xe43f4a08_u32, 0x8bbc_u16, 0x4665_u16, StaticArray[0xac_u8, 0x92_u8, 0xc5_u8, 0x5c_u8, 0xe6_u8, 0x1f_u8, 0xd7_u8, 0xe7_u8])
  struct ISurfacePresenterFlipBuffer
    lpVtbl : ISurfacePresenterFlipBufferVTbl*
  end

  struct ISurfacePresenterFlipVTbl
    query_interface : Proc(ISurfacePresenterFlip*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISurfacePresenterFlip*, UInt32)
    release : Proc(ISurfacePresenterFlip*, UInt32)
    present : Proc(ISurfacePresenterFlip*, HRESULT)
    get_buffer : Proc(ISurfacePresenterFlip*, UInt32, Guid*, Void**, HRESULT)
  end

  ISurfacePresenterFlip_GUID = "30510848-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISurfacePresenterFlip = LibC::GUID.new(0x30510848_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISurfacePresenterFlip
    lpVtbl : ISurfacePresenterFlipVTbl*
  end

  struct ISurfacePresenterFlip2VTbl
    query_interface : Proc(ISurfacePresenterFlip2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISurfacePresenterFlip2*, UInt32)
    release : Proc(ISurfacePresenterFlip2*, UInt32)
    set_rotation : Proc(ISurfacePresenterFlip2*, DXGI_MODE_ROTATION, HRESULT)
  end

  ISurfacePresenterFlip2_GUID = "30510865-98b5-11cf-bb82-00aa00bdce0b"
  IID_ISurfacePresenterFlip2 = LibC::GUID.new(0x30510865_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ISurfacePresenterFlip2
    lpVtbl : ISurfacePresenterFlip2VTbl*
  end

  struct IViewObjectPresentFlipSiteVTbl
    query_interface : Proc(IViewObjectPresentFlipSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentFlipSite*, UInt32)
    release : Proc(IViewObjectPresentFlipSite*, UInt32)
    create_surface_presenter_flip : Proc(IViewObjectPresentFlipSite*, IUnknown, UInt32, UInt32, UInt32, DXGI_FORMAT, VIEW_OBJECT_ALPHA_MODE, ISurfacePresenterFlip*, HRESULT)
    get_device_luid : Proc(IViewObjectPresentFlipSite*, LUID*, HRESULT)
    enter_full_screen : Proc(IViewObjectPresentFlipSite*, HRESULT)
    exit_full_screen : Proc(IViewObjectPresentFlipSite*, HRESULT)
    is_full_screen : Proc(IViewObjectPresentFlipSite*, LibC::BOOL*, HRESULT)
    get_bounding_rect : Proc(IViewObjectPresentFlipSite*, RECT*, HRESULT)
    get_metrics : Proc(IViewObjectPresentFlipSite*, POINT*, SIZE*, Float32*, Float32*, HRESULT)
    get_full_screen_size : Proc(IViewObjectPresentFlipSite*, SIZE*, HRESULT)
  end

  IViewObjectPresentFlipSite_GUID = "30510846-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentFlipSite = LibC::GUID.new(0x30510846_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentFlipSite
    lpVtbl : IViewObjectPresentFlipSiteVTbl*
  end

  struct IViewObjectPresentFlipSite2VTbl
    query_interface : Proc(IViewObjectPresentFlipSite2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentFlipSite2*, UInt32)
    release : Proc(IViewObjectPresentFlipSite2*, UInt32)
    get_rotation_for_current_output : Proc(IViewObjectPresentFlipSite2*, DXGI_MODE_ROTATION*, HRESULT)
  end

  IViewObjectPresentFlipSite2_GUID = "aad0cbf1-e7fd-4f12-8902-c78132a8e01d"
  IID_IViewObjectPresentFlipSite2 = LibC::GUID.new(0xaad0cbf1_u32, 0xe7fd_u16, 0x4f12_u16, StaticArray[0x89_u8, 0x2_u8, 0xc7_u8, 0x81_u8, 0x32_u8, 0xa8_u8, 0xe0_u8, 0x1d_u8])
  struct IViewObjectPresentFlipSite2
    lpVtbl : IViewObjectPresentFlipSite2VTbl*
  end

  struct IViewObjectPresentFlipVTbl
    query_interface : Proc(IViewObjectPresentFlip*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentFlip*, UInt32)
    release : Proc(IViewObjectPresentFlip*, UInt32)
    notify_render : Proc(IViewObjectPresentFlip*, LibC::BOOL, HRESULT)
    render_object_to_bitmap : Proc(IViewObjectPresentFlip*, IUnknown, HRESULT)
    render_object_to_shared_buffer : Proc(IViewObjectPresentFlip*, ISurfacePresenterFlipBuffer, HRESULT)
  end

  IViewObjectPresentFlip_GUID = "30510847-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentFlip = LibC::GUID.new(0x30510847_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentFlip
    lpVtbl : IViewObjectPresentFlipVTbl*
  end

  struct IViewObjectPresentFlip2VTbl
    query_interface : Proc(IViewObjectPresentFlip2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IViewObjectPresentFlip2*, UInt32)
    release : Proc(IViewObjectPresentFlip2*, UInt32)
    notify_leaving_view : Proc(IViewObjectPresentFlip2*, HRESULT)
  end

  IViewObjectPresentFlip2_GUID = "30510856-98b5-11cf-bb82-00aa00bdce0b"
  IID_IViewObjectPresentFlip2 = LibC::GUID.new(0x30510856_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IViewObjectPresentFlip2
    lpVtbl : IViewObjectPresentFlip2VTbl*
  end

  struct IActiveXUIHandlerSite2VTbl
    query_interface : Proc(IActiveXUIHandlerSite2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveXUIHandlerSite2*, UInt32)
    release : Proc(IActiveXUIHandlerSite2*, UInt32)
    add_suspension_exemption : Proc(IActiveXUIHandlerSite2*, UInt64*, HRESULT)
    remove_suspension_exemption : Proc(IActiveXUIHandlerSite2*, UInt64, HRESULT)
  end

  IActiveXUIHandlerSite2_GUID = "7e3707b2-d087-4542-ac1f-a0d2fcd080fd"
  IID_IActiveXUIHandlerSite2 = LibC::GUID.new(0x7e3707b2_u32, 0xd087_u16, 0x4542_u16, StaticArray[0xac_u8, 0x1f_u8, 0xa0_u8, 0xd2_u8, 0xfc_u8, 0xd0_u8, 0x80_u8, 0xfd_u8])
  struct IActiveXUIHandlerSite2
    lpVtbl : IActiveXUIHandlerSite2VTbl*
  end

  struct ICaretPositionProviderVTbl
    query_interface : Proc(ICaretPositionProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICaretPositionProvider*, UInt32)
    release : Proc(ICaretPositionProvider*, UInt32)
    get_caret_position : Proc(ICaretPositionProvider*, POINT*, Float32*, HRESULT)
  end

  ICaretPositionProvider_GUID = "58da43a2-108e-4d5b-9f75-e5f74f93fff5"
  IID_ICaretPositionProvider = LibC::GUID.new(0x58da43a2_u32, 0x108e_u16, 0x4d5b_u16, StaticArray[0x9f_u8, 0x75_u8, 0xe5_u8, 0xf7_u8, 0x4f_u8, 0x93_u8, 0xff_u8, 0xf5_u8])
  struct ICaretPositionProvider
    lpVtbl : ICaretPositionProviderVTbl*
  end

  struct ITridentTouchInputVTbl
    query_interface : Proc(ITridentTouchInput*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITridentTouchInput*, UInt32)
    release : Proc(ITridentTouchInput*, UInt32)
    on_pointer_message : Proc(ITridentTouchInput*, UInt32, LibC::UINT_PTR, LPARAM, LibC::BOOL*, HRESULT)
  end

  ITridentTouchInput_GUID = "30510850-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITridentTouchInput = LibC::GUID.new(0x30510850_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITridentTouchInput
    lpVtbl : ITridentTouchInputVTbl*
  end

  struct ITridentTouchInputSiteVTbl
    query_interface : Proc(ITridentTouchInputSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITridentTouchInputSite*, UInt32)
    release : Proc(ITridentTouchInputSite*, UInt32)
    set_manipulation_mode : Proc(ITridentTouchInputSite*, Stylemstouchaction, HRESULT)
    zoom_to_point : Proc(ITridentTouchInputSite*, Int32, Int32, HRESULT)
  end

  ITridentTouchInputSite_GUID = "30510849-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITridentTouchInputSite = LibC::GUID.new(0x30510849_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITridentTouchInputSite
    lpVtbl : ITridentTouchInputSiteVTbl*
  end

  struct IMediaActivityNotifySiteVTbl
    query_interface : Proc(IMediaActivityNotifySite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaActivityNotifySite*, UInt32)
    release : Proc(IMediaActivityNotifySite*, UInt32)
    on_media_activity_started : Proc(IMediaActivityNotifySite*, MediaActivityNotifyType, HRESULT)
    on_media_activity_stopped : Proc(IMediaActivityNotifySite*, MediaActivityNotifyType, HRESULT)
  end

  IMediaActivityNotifySite_GUID = "8165cfef-179d-46c2-bc71-3fa726dc1f8d"
  IID_IMediaActivityNotifySite = LibC::GUID.new(0x8165cfef_u32, 0x179d_u16, 0x46c2_u16, StaticArray[0xbc_u8, 0x71_u8, 0x3f_u8, 0xa7_u8, 0x26_u8, 0xdc_u8, 0x1f_u8, 0x8d_u8])
  struct IMediaActivityNotifySite
    lpVtbl : IMediaActivityNotifySiteVTbl*
  end

  struct IAudioSessionSiteVTbl
    query_interface : Proc(IAudioSessionSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionSite*, UInt32)
    release : Proc(IAudioSessionSite*, UInt32)
    get_audio_session_guid : Proc(IAudioSessionSite*, Guid*, HRESULT)
    on_audio_stream_created : Proc(IAudioSessionSite*, LibC::LPWSTR, HRESULT)
    on_audio_stream_destroyed : Proc(IAudioSessionSite*, LibC::LPWSTR, HRESULT)
  end

  IAudioSessionSite_GUID = "d7d8b684-d02d-4517-b6b7-19e3dfe29c45"
  IID_IAudioSessionSite = LibC::GUID.new(0xd7d8b684_u32, 0xd02d_u16, 0x4517_u16, StaticArray[0xb6_u8, 0xb7_u8, 0x19_u8, 0xe3_u8, 0xdf_u8, 0xe2_u8, 0x9c_u8, 0x45_u8])
  struct IAudioSessionSite
    lpVtbl : IAudioSessionSiteVTbl*
  end

  struct IPrintTaskRequestHandlerVTbl
    query_interface : Proc(IPrintTaskRequestHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrintTaskRequestHandler*, UInt32)
    release : Proc(IPrintTaskRequestHandler*, UInt32)
    handle_print_task_request : Proc(IPrintTaskRequestHandler*, IInspectable, HRESULT)
  end

  IPrintTaskRequestHandler_GUID = "191cd340-cf36-44ff-bd53-d1b701799d9b"
  IID_IPrintTaskRequestHandler = LibC::GUID.new(0x191cd340_u32, 0xcf36_u16, 0x44ff_u16, StaticArray[0xbd_u8, 0x53_u8, 0xd1_u8, 0xb7_u8, 0x1_u8, 0x79_u8, 0x9d_u8, 0x9b_u8])
  struct IPrintTaskRequestHandler
    lpVtbl : IPrintTaskRequestHandlerVTbl*
  end

  struct IPrintTaskRequestFactoryVTbl
    query_interface : Proc(IPrintTaskRequestFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPrintTaskRequestFactory*, UInt32)
    release : Proc(IPrintTaskRequestFactory*, UInt32)
    create_print_task_request : Proc(IPrintTaskRequestFactory*, IPrintTaskRequestHandler, HRESULT)
  end

  IPrintTaskRequestFactory_GUID = "bb516745-8c34-4f8b-9605-684dcb144be5"
  IID_IPrintTaskRequestFactory = LibC::GUID.new(0xbb516745_u32, 0x8c34_u16, 0x4f8b_u16, StaticArray[0x96_u8, 0x5_u8, 0x68_u8, 0x4d_u8, 0xcb_u8, 0x14_u8, 0x4b_u8, 0xe5_u8])
  struct IPrintTaskRequestFactory
    lpVtbl : IPrintTaskRequestFactoryVTbl*
  end

  struct IScrollableContextMenuVTbl
    query_interface : Proc(IScrollableContextMenu*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScrollableContextMenu*, UInt32)
    release : Proc(IScrollableContextMenu*, UInt32)
    add_item : Proc(IScrollableContextMenu*, LibC::LPWSTR, UInt32, HRESULT)
    show_modal : Proc(IScrollableContextMenu*, Int32, Int32, UInt32*, HRESULT)
  end

  IScrollableContextMenu_GUID = "30510854-98b5-11cf-bb82-00aa00bdce0b"
  IID_IScrollableContextMenu = LibC::GUID.new(0x30510854_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IScrollableContextMenu
    lpVtbl : IScrollableContextMenuVTbl*
  end

  struct IScrollableContextMenu2VTbl
    query_interface : Proc(IScrollableContextMenu2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScrollableContextMenu2*, UInt32)
    release : Proc(IScrollableContextMenu2*, UInt32)
    add_item : Proc(IScrollableContextMenu2*, LibC::LPWSTR, UInt32, HRESULT)
    show_modal : Proc(IScrollableContextMenu2*, Int32, Int32, UInt32*, HRESULT)
    add_separator : Proc(IScrollableContextMenu2*, HRESULT)
    set_placement : Proc(IScrollableContextMenu2*, SCROLLABLECONTEXTMENU_PLACEMENT, HRESULT)
  end

  IScrollableContextMenu2_GUID = "f77e9056-8674-4936-924c-0e4a06fa634a"
  IID_IScrollableContextMenu2 = LibC::GUID.new(0xf77e9056_u32, 0x8674_u16, 0x4936_u16, StaticArray[0x92_u8, 0x4c_u8, 0xe_u8, 0x4a_u8, 0x6_u8, 0xfa_u8, 0x63_u8, 0x4a_u8])
  struct IScrollableContextMenu2
    lpVtbl : IScrollableContextMenu2VTbl*
  end

  struct IActiveXUIHandlerSiteVTbl
    query_interface : Proc(IActiveXUIHandlerSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveXUIHandlerSite*, UInt32)
    release : Proc(IActiveXUIHandlerSite*, UInt32)
    create_scrollable_context_menu : Proc(IActiveXUIHandlerSite*, IScrollableContextMenu*, HRESULT)
    pick_file_and_get_result : Proc(IActiveXUIHandlerSite*, IUnknown, LibC::BOOL, IUnknown*, HRESULT)
  end

  IActiveXUIHandlerSite_GUID = "30510853-98b5-11cf-bb82-00aa00bdce0b"
  IID_IActiveXUIHandlerSite = LibC::GUID.new(0x30510853_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IActiveXUIHandlerSite
    lpVtbl : IActiveXUIHandlerSiteVTbl*
  end

  struct IActiveXUIHandlerSite3VTbl
    query_interface : Proc(IActiveXUIHandlerSite3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActiveXUIHandlerSite3*, UInt32)
    release : Proc(IActiveXUIHandlerSite3*, UInt32)
    message_box_w : Proc(IActiveXUIHandlerSite3*, LibC::HANDLE, LibC::LPWSTR, LibC::LPWSTR, UInt32, Int32*, HRESULT)
  end

  IActiveXUIHandlerSite3_GUID = "7904009a-1238-47f4-901c-871375c34608"
  IID_IActiveXUIHandlerSite3 = LibC::GUID.new(0x7904009a_u32, 0x1238_u16, 0x47f4_u16, StaticArray[0x90_u8, 0x1c_u8, 0x87_u8, 0x13_u8, 0x75_u8, 0xc3_u8, 0x46_u8, 0x8_u8])
  struct IActiveXUIHandlerSite3
    lpVtbl : IActiveXUIHandlerSite3VTbl*
  end

  struct IEnumManagerFramesVTbl
    query_interface : Proc(IEnumManagerFrames*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumManagerFrames*, UInt32)
    release : Proc(IEnumManagerFrames*, UInt32)
    next : Proc(IEnumManagerFrames*, UInt32, HANDLE**, UInt32*, HRESULT)
    count : Proc(IEnumManagerFrames*, UInt32*, HRESULT)
    skip : Proc(IEnumManagerFrames*, UInt32, HRESULT)
    reset : Proc(IEnumManagerFrames*, HRESULT)
    clone : Proc(IEnumManagerFrames*, IEnumManagerFrames*, HRESULT)
  end

  IEnumManagerFrames_GUID = "3caa826a-9b1f-4a79-bc81-f0430ded1648"
  IID_IEnumManagerFrames = LibC::GUID.new(0x3caa826a_u32, 0x9b1f_u16, 0x4a79_u16, StaticArray[0xbc_u8, 0x81_u8, 0xf0_u8, 0x43_u8, 0xd_u8, 0xed_u8, 0x16_u8, 0x48_u8])
  struct IEnumManagerFrames
    lpVtbl : IEnumManagerFramesVTbl*
  end

  struct IInternetExplorerManagerVTbl
    query_interface : Proc(IInternetExplorerManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInternetExplorerManager*, UInt32)
    release : Proc(IInternetExplorerManager*, UInt32)
    create_object : Proc(IInternetExplorerManager*, UInt32, LibC::LPWSTR, Guid*, Void**, HRESULT)
  end

  IInternetExplorerManager_GUID = "acc84351-04ff-44f9-b23f-655ed168c6d5"
  IID_IInternetExplorerManager = LibC::GUID.new(0xacc84351_u32, 0x4ff_u16, 0x44f9_u16, StaticArray[0xb2_u8, 0x3f_u8, 0x65_u8, 0x5e_u8, 0xd1_u8, 0x68_u8, 0xc6_u8, 0xd5_u8])
  struct IInternetExplorerManager
    lpVtbl : IInternetExplorerManagerVTbl*
  end

  struct IInternetExplorerManager2VTbl
    query_interface : Proc(IInternetExplorerManager2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IInternetExplorerManager2*, UInt32)
    release : Proc(IInternetExplorerManager2*, UInt32)
    enum_frame_windows : Proc(IInternetExplorerManager2*, IEnumManagerFrames*, HRESULT)
  end

  IInternetExplorerManager2_GUID = "dfbb5136-9259-4895-b4a7-c1934429919a"
  IID_IInternetExplorerManager2 = LibC::GUID.new(0xdfbb5136_u32, 0x9259_u16, 0x4895_u16, StaticArray[0xb4_u8, 0xa7_u8, 0xc1_u8, 0x93_u8, 0x44_u8, 0x29_u8, 0x91_u8, 0x9a_u8])
  struct IInternetExplorerManager2
    lpVtbl : IInternetExplorerManager2VTbl*
  end

  struct IIEWebDriverSiteVTbl
    query_interface : Proc(IIEWebDriverSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIEWebDriverSite*, UInt32)
    release : Proc(IIEWebDriverSite*, UInt32)
    get_type_info_count : Proc(IIEWebDriverSite*, UInt32*, HRESULT)
    get_type_info : Proc(IIEWebDriverSite*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIEWebDriverSite*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIEWebDriverSite*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    window_operation : Proc(IIEWebDriverSite*, UInt32, UInt32, HRESULT)
    detach_webdriver : Proc(IIEWebDriverSite*, IUnknown, HRESULT)
    get_capability_value : Proc(IIEWebDriverSite*, IUnknown, LibC::LPWSTR, VARIANT*, HRESULT)
  end

  IIEWebDriverSite_GUID = "ffb84444-453d-4fbc-9f9d-8db5c471ec75"
  IID_IIEWebDriverSite = LibC::GUID.new(0xffb84444_u32, 0x453d_u16, 0x4fbc_u16, StaticArray[0x9f_u8, 0x9d_u8, 0x8d_u8, 0xb5_u8, 0xc4_u8, 0x71_u8, 0xec_u8, 0x75_u8])
  struct IIEWebDriverSite
    lpVtbl : IIEWebDriverSiteVTbl*
  end

  struct IIEWebDriverManagerVTbl
    query_interface : Proc(IIEWebDriverManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIEWebDriverManager*, UInt32)
    release : Proc(IIEWebDriverManager*, UInt32)
    get_type_info_count : Proc(IIEWebDriverManager*, UInt32*, HRESULT)
    get_type_info : Proc(IIEWebDriverManager*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIEWebDriverManager*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIEWebDriverManager*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    execute_command : Proc(IIEWebDriverManager*, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
  end

  IIEWebDriverManager_GUID = "bd1dc630-6590-4ca2-a293-6bc72b2438d8"
  IID_IIEWebDriverManager = LibC::GUID.new(0xbd1dc630_u32, 0x6590_u16, 0x4ca2_u16, StaticArray[0xa2_u8, 0x93_u8, 0x6b_u8, 0xc7_u8, 0x2b_u8, 0x24_u8, 0x38_u8, 0xd8_u8])
  struct IIEWebDriverManager
    lpVtbl : IIEWebDriverManagerVTbl*
  end

  struct IPeerFactoryVTbl
    query_interface : Proc(IPeerFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPeerFactory*, UInt32)
    release : Proc(IPeerFactory*, UInt32)
  end

  IPeerFactory_GUID = "6663f9d3-b482-11d1-89c6-00c04fb6bfc4"
  IID_IPeerFactory = LibC::GUID.new(0x6663f9d3_u32, 0xb482_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xc6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbf_u8, 0xc4_u8])
  struct IPeerFactory
    lpVtbl : IPeerFactoryVTbl*
  end

  struct IHomePageVTbl
    query_interface : Proc(IHomePage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHomePage*, UInt32)
    release : Proc(IHomePage*, UInt32)
    get_type_info_count : Proc(IHomePage*, UInt32*, HRESULT)
    get_type_info : Proc(IHomePage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHomePage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHomePage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    navigate_home_page : Proc(IHomePage*, HRESULT)
    set_home_page : Proc(IHomePage*, UInt8*, HRESULT)
    is_home_page : Proc(IHomePage*, UInt8*, Int16*, HRESULT)
  end

  IHomePage_GUID = "766bf2af-d650-11d1-9811-00c04fc31d2e"
  IID_IHomePage = LibC::GUID.new(0x766bf2af_u32, 0xd650_u16, 0x11d1_u16, StaticArray[0x98_u8, 0x11_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1d_u8, 0x2e_u8])
  struct IHomePage
    lpVtbl : IHomePageVTbl*
  end

  struct IIntelliFormsVTbl
    query_interface : Proc(IIntelliForms*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIntelliForms*, UInt32)
    release : Proc(IIntelliForms*, UInt32)
    get_type_info_count : Proc(IIntelliForms*, UInt32*, HRESULT)
    get_type_info : Proc(IIntelliForms*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIntelliForms*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIntelliForms*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_enabled : Proc(IIntelliForms*, Int16*, HRESULT)
    put_enabled : Proc(IIntelliForms*, Int16, HRESULT)
  end

  IIntelliForms_GUID = "9b9f68e6-1aaa-11d2-bca5-00c04fd929db"
  IID_IIntelliForms = LibC::GUID.new(0x9b9f68e6_u32, 0x1aaa_u16, 0x11d2_u16, StaticArray[0xbc_u8, 0xa5_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x29_u8, 0xdb_u8])
  struct IIntelliForms
    lpVtbl : IIntelliFormsVTbl*
  end

  struct IwfoldersVTbl
    query_interface : Proc(Iwfolders*, Guid*, Void**, HRESULT)
    add_ref : Proc(Iwfolders*, UInt32)
    release : Proc(Iwfolders*, UInt32)
    get_type_info_count : Proc(Iwfolders*, UInt32*, HRESULT)
    get_type_info : Proc(Iwfolders*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(Iwfolders*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(Iwfolders*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    navigate : Proc(Iwfolders*, UInt8*, UInt8**, HRESULT)
    navigate_frame : Proc(Iwfolders*, UInt8*, UInt8*, UInt8**, HRESULT)
    navigate_no_site : Proc(Iwfolders*, UInt8*, UInt8*, UInt32, IUnknown, HRESULT)
  end

  Iwfolders_GUID = "bae31f98-1b81-11d2-a97a-00c04f8ecb02"
  IID_Iwfolders = LibC::GUID.new(0xbae31f98_u32, 0x1b81_u16, 0x11d2_u16, StaticArray[0xa9_u8, 0x7a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xcb_u8, 0x2_u8])
  struct Iwfolders
    lpVtbl : IwfoldersVTbl*
  end

  struct IAnchorClickVTbl
    query_interface : Proc(IAnchorClick*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnchorClick*, UInt32)
    release : Proc(IAnchorClick*, UInt32)
    get_type_info_count : Proc(IAnchorClick*, UInt32*, HRESULT)
    get_type_info : Proc(IAnchorClick*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnchorClick*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnchorClick*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    proc_on_click : Proc(IAnchorClick*, HRESULT)
  end

  IAnchorClick_GUID = "13d5413b-33b9-11d2-95a7-00c04f8ecb02"
  IID_IAnchorClick = LibC::GUID.new(0x13d5413b_u32, 0x33b9_u16, 0x11d2_u16, StaticArray[0x95_u8, 0xa7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xcb_u8, 0x2_u8])
  struct IAnchorClick
    lpVtbl : IAnchorClickVTbl*
  end

  struct IHTMLUserDataOMVTbl
    query_interface : Proc(IHTMLUserDataOM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLUserDataOM*, UInt32)
    release : Proc(IHTMLUserDataOM*, UInt32)
    get_type_info_count : Proc(IHTMLUserDataOM*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLUserDataOM*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLUserDataOM*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLUserDataOM*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_xml_document : Proc(IHTMLUserDataOM*, IDispatch*, HRESULT)
    save : Proc(IHTMLUserDataOM*, UInt8*, HRESULT)
    load : Proc(IHTMLUserDataOM*, UInt8*, HRESULT)
    get_attribute : Proc(IHTMLUserDataOM*, UInt8*, VARIANT*, HRESULT)
    set_attribute : Proc(IHTMLUserDataOM*, UInt8*, VARIANT, HRESULT)
    remove_attribute : Proc(IHTMLUserDataOM*, UInt8*, HRESULT)
    put_expires : Proc(IHTMLUserDataOM*, UInt8*, HRESULT)
    get_expires : Proc(IHTMLUserDataOM*, UInt8**, HRESULT)
  end

  IHTMLUserDataOM_GUID = "3050f48f-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLUserDataOM = LibC::GUID.new(0x3050f48f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLUserDataOM
    lpVtbl : IHTMLUserDataOMVTbl*
  end

  struct IHTMLPersistDataOMVTbl
    query_interface : Proc(IHTMLPersistDataOM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPersistDataOM*, UInt32)
    release : Proc(IHTMLPersistDataOM*, UInt32)
    get_type_info_count : Proc(IHTMLPersistDataOM*, UInt32*, HRESULT)
    get_type_info : Proc(IHTMLPersistDataOM*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHTMLPersistDataOM*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHTMLPersistDataOM*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_xml_document : Proc(IHTMLPersistDataOM*, IDispatch*, HRESULT)
    get_attribute : Proc(IHTMLPersistDataOM*, UInt8*, VARIANT*, HRESULT)
    set_attribute : Proc(IHTMLPersistDataOM*, UInt8*, VARIANT, HRESULT)
    remove_attribute : Proc(IHTMLPersistDataOM*, UInt8*, HRESULT)
  end

  IHTMLPersistDataOM_GUID = "3050f4c0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPersistDataOM = LibC::GUID.new(0x3050f4c0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPersistDataOM
    lpVtbl : IHTMLPersistDataOMVTbl*
  end

  struct IHTMLPersistDataVTbl
    query_interface : Proc(IHTMLPersistData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLPersistData*, UInt32)
    release : Proc(IHTMLPersistData*, UInt32)
    save : Proc(IHTMLPersistData*, IUnknown, Int32, Int16*, HRESULT)
    load : Proc(IHTMLPersistData*, IUnknown, Int32, Int16*, HRESULT)
    query_type : Proc(IHTMLPersistData*, Int32, Int16*, HRESULT)
  end

  IHTMLPersistData_GUID = "3050f4c5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLPersistData = LibC::GUID.new(0x3050f4c5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLPersistData
    lpVtbl : IHTMLPersistDataVTbl*
  end

  struct IDownloadBehaviorVTbl
    query_interface : Proc(IDownloadBehavior*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDownloadBehavior*, UInt32)
    release : Proc(IDownloadBehavior*, UInt32)
    get_type_info_count : Proc(IDownloadBehavior*, UInt32*, HRESULT)
    get_type_info : Proc(IDownloadBehavior*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDownloadBehavior*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDownloadBehavior*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_download : Proc(IDownloadBehavior*, UInt8*, IDispatch, HRESULT)
  end

  IDownloadBehavior_GUID = "3050f5bd-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDownloadBehavior = LibC::GUID.new(0x3050f5bd_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDownloadBehavior
    lpVtbl : IDownloadBehaviorVTbl*
  end

  struct ILayoutRectVTbl
    query_interface : Proc(ILayoutRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILayoutRect*, UInt32)
    release : Proc(ILayoutRect*, UInt32)
    get_type_info_count : Proc(ILayoutRect*, UInt32*, HRESULT)
    get_type_info : Proc(ILayoutRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ILayoutRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ILayoutRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_next_rect : Proc(ILayoutRect*, UInt8*, HRESULT)
    get_next_rect : Proc(ILayoutRect*, UInt8**, HRESULT)
    put_content_src : Proc(ILayoutRect*, VARIANT, HRESULT)
    get_content_src : Proc(ILayoutRect*, VARIANT*, HRESULT)
    put_honor_page_breaks : Proc(ILayoutRect*, Int16, HRESULT)
    get_honor_page_breaks : Proc(ILayoutRect*, Int16*, HRESULT)
    put_honor_page_rules : Proc(ILayoutRect*, Int16, HRESULT)
    get_honor_page_rules : Proc(ILayoutRect*, Int16*, HRESULT)
    put_next_rect_element : Proc(ILayoutRect*, IDispatch, HRESULT)
    get_next_rect_element : Proc(ILayoutRect*, IDispatch*, HRESULT)
    get_content_document : Proc(ILayoutRect*, IDispatch*, HRESULT)
  end

  ILayoutRect_GUID = "3050f665-98b5-11cf-bb82-00aa00bdce0b"
  IID_ILayoutRect = LibC::GUID.new(0x3050f665_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ILayoutRect
    lpVtbl : ILayoutRectVTbl*
  end

  struct IDeviceRectVTbl
    query_interface : Proc(IDeviceRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeviceRect*, UInt32)
    release : Proc(IDeviceRect*, UInt32)
    get_type_info_count : Proc(IDeviceRect*, UInt32*, HRESULT)
    get_type_info : Proc(IDeviceRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDeviceRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDeviceRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IDeviceRect_GUID = "3050f6d5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDeviceRect = LibC::GUID.new(0x3050f6d5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDeviceRect
    lpVtbl : IDeviceRectVTbl*
  end

  struct IHeaderFooterVTbl
    query_interface : Proc(IHeaderFooter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHeaderFooter*, UInt32)
    release : Proc(IHeaderFooter*, UInt32)
    get_type_info_count : Proc(IHeaderFooter*, UInt32*, HRESULT)
    get_type_info : Proc(IHeaderFooter*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHeaderFooter*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHeaderFooter*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_html_head : Proc(IHeaderFooter*, UInt8**, HRESULT)
    get_html_foot : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_text_head : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_text_head : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_text_foot : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_text_foot : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_page : Proc(IHeaderFooter*, UInt32, HRESULT)
    get_page : Proc(IHeaderFooter*, UInt32*, HRESULT)
    put_page_total : Proc(IHeaderFooter*, UInt32, HRESULT)
    get_page_total : Proc(IHeaderFooter*, UInt32*, HRESULT)
    put_url : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_url : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_title : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_title : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_date_short : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_date_short : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_date_long : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_date_long : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_time_short : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_time_short : Proc(IHeaderFooter*, UInt8**, HRESULT)
    put_time_long : Proc(IHeaderFooter*, UInt8*, HRESULT)
    get_time_long : Proc(IHeaderFooter*, UInt8**, HRESULT)
  end

  IHeaderFooter_GUID = "3050f6ce-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHeaderFooter = LibC::GUID.new(0x3050f6ce_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHeaderFooter
    lpVtbl : IHeaderFooterVTbl*
  end

  struct IHeaderFooter2VTbl
    query_interface : Proc(IHeaderFooter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHeaderFooter2*, UInt32)
    release : Proc(IHeaderFooter2*, UInt32)
    get_type_info_count : Proc(IHeaderFooter2*, UInt32*, HRESULT)
    get_type_info : Proc(IHeaderFooter2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IHeaderFooter2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IHeaderFooter2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_html_head : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    get_html_foot : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_text_head : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_text_head : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_text_foot : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_text_foot : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_page : Proc(IHeaderFooter2*, UInt32, HRESULT)
    get_page : Proc(IHeaderFooter2*, UInt32*, HRESULT)
    put_page_total : Proc(IHeaderFooter2*, UInt32, HRESULT)
    get_page_total : Proc(IHeaderFooter2*, UInt32*, HRESULT)
    put_url : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_url : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_title : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_title : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_date_short : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_date_short : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_date_long : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_date_long : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_time_short : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_time_short : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_time_long : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_time_long : Proc(IHeaderFooter2*, UInt8**, HRESULT)
    put_font : Proc(IHeaderFooter2*, UInt8*, HRESULT)
    get_font : Proc(IHeaderFooter2*, UInt8**, HRESULT)
  end

  IHeaderFooter2_GUID = "305104a5-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHeaderFooter2 = LibC::GUID.new(0x305104a5_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHeaderFooter2
    lpVtbl : IHeaderFooter2VTbl*
  end

  struct IHostDialogHelperVTbl
    query_interface : Proc(IHostDialogHelper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHostDialogHelper*, UInt32)
    release : Proc(IHostDialogHelper*, UInt32)
    show_html_dialog : Proc(IHostDialogHelper*, LibC::HANDLE, IMoniker, VARIANT*, LibC::LPWSTR, VARIANT*, IUnknown, HRESULT)
  end

  IHostDialogHelper_GUID = "53dec138-a51e-11d2-861e-00c04fa35c89"
  IID_IHostDialogHelper = LibC::GUID.new(0x53dec138_u32, 0xa51e_u16, 0x11d2_u16, StaticArray[0x86_u8, 0x1e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x5c_u8, 0x89_u8])
  struct IHostDialogHelper
    lpVtbl : IHostDialogHelperVTbl*
  end

  struct IDocHostUIHandlerVTbl
    query_interface : Proc(IDocHostUIHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocHostUIHandler*, UInt32)
    release : Proc(IDocHostUIHandler*, UInt32)
    show_context_menu : Proc(IDocHostUIHandler*, UInt32, POINT*, IUnknown, IDispatch, HRESULT)
    get_host_info : Proc(IDocHostUIHandler*, DOCHOSTUIINFO*, HRESULT)
    show_ui : Proc(IDocHostUIHandler*, UInt32, IOleInPlaceActiveObject, IOleCommandTarget, IOleInPlaceFrame, IOleInPlaceUIWindow, HRESULT)
    hide_ui : Proc(IDocHostUIHandler*, HRESULT)
    update_ui : Proc(IDocHostUIHandler*, HRESULT)
    enable_modeless : Proc(IDocHostUIHandler*, LibC::BOOL, HRESULT)
    on_doc_window_activate : Proc(IDocHostUIHandler*, LibC::BOOL, HRESULT)
    on_frame_window_activate : Proc(IDocHostUIHandler*, LibC::BOOL, HRESULT)
    resize_border : Proc(IDocHostUIHandler*, RECT*, IOleInPlaceUIWindow, LibC::BOOL, HRESULT)
    translate_accelerator : Proc(IDocHostUIHandler*, MSG*, Guid*, UInt32, HRESULT)
    get_option_key_path : Proc(IDocHostUIHandler*, LibC::LPWSTR*, UInt32, HRESULT)
    get_drop_target : Proc(IDocHostUIHandler*, IDropTarget, IDropTarget*, HRESULT)
    get_external : Proc(IDocHostUIHandler*, IDispatch*, HRESULT)
    translate_url : Proc(IDocHostUIHandler*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
    filter_data_object : Proc(IDocHostUIHandler*, IDataObject, IDataObject*, HRESULT)
  end

  IDocHostUIHandler_GUID = "bd3f23c0-d43e-11cf-893b-00aa00bdce1a"
  IID_IDocHostUIHandler = LibC::GUID.new(0xbd3f23c0_u32, 0xd43e_u16, 0x11cf_u16, StaticArray[0x89_u8, 0x3b_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0x1a_u8])
  struct IDocHostUIHandler
    lpVtbl : IDocHostUIHandlerVTbl*
  end

  struct IDocHostUIHandler2VTbl
    query_interface : Proc(IDocHostUIHandler2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocHostUIHandler2*, UInt32)
    release : Proc(IDocHostUIHandler2*, UInt32)
    show_context_menu : Proc(IDocHostUIHandler2*, UInt32, POINT*, IUnknown, IDispatch, HRESULT)
    get_host_info : Proc(IDocHostUIHandler2*, DOCHOSTUIINFO*, HRESULT)
    show_ui : Proc(IDocHostUIHandler2*, UInt32, IOleInPlaceActiveObject, IOleCommandTarget, IOleInPlaceFrame, IOleInPlaceUIWindow, HRESULT)
    hide_ui : Proc(IDocHostUIHandler2*, HRESULT)
    update_ui : Proc(IDocHostUIHandler2*, HRESULT)
    enable_modeless : Proc(IDocHostUIHandler2*, LibC::BOOL, HRESULT)
    on_doc_window_activate : Proc(IDocHostUIHandler2*, LibC::BOOL, HRESULT)
    on_frame_window_activate : Proc(IDocHostUIHandler2*, LibC::BOOL, HRESULT)
    resize_border : Proc(IDocHostUIHandler2*, RECT*, IOleInPlaceUIWindow, LibC::BOOL, HRESULT)
    translate_accelerator : Proc(IDocHostUIHandler2*, MSG*, Guid*, UInt32, HRESULT)
    get_option_key_path : Proc(IDocHostUIHandler2*, LibC::LPWSTR*, UInt32, HRESULT)
    get_drop_target : Proc(IDocHostUIHandler2*, IDropTarget, IDropTarget*, HRESULT)
    get_external : Proc(IDocHostUIHandler2*, IDispatch*, HRESULT)
    translate_url : Proc(IDocHostUIHandler2*, UInt32, LibC::LPWSTR, LibC::LPWSTR*, HRESULT)
    filter_data_object : Proc(IDocHostUIHandler2*, IDataObject, IDataObject*, HRESULT)
    get_override_key_path : Proc(IDocHostUIHandler2*, LibC::LPWSTR*, UInt32, HRESULT)
  end

  IDocHostUIHandler2_GUID = "3050f6d0-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDocHostUIHandler2 = LibC::GUID.new(0x3050f6d0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDocHostUIHandler2
    lpVtbl : IDocHostUIHandler2VTbl*
  end

  struct ICustomDocVTbl
    query_interface : Proc(ICustomDoc*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICustomDoc*, UInt32)
    release : Proc(ICustomDoc*, UInt32)
    set_ui_handler : Proc(ICustomDoc*, IDocHostUIHandler, HRESULT)
  end

  ICustomDoc_GUID = "3050f3f0-98b5-11cf-bb82-00aa00bdce0b"
  IID_ICustomDoc = LibC::GUID.new(0x3050f3f0_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ICustomDoc
    lpVtbl : ICustomDocVTbl*
  end

  struct IDocHostShowUIVTbl
    query_interface : Proc(IDocHostShowUI*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDocHostShowUI*, UInt32)
    release : Proc(IDocHostShowUI*, UInt32)
    show_message : Proc(IDocHostShowUI*, LibC::HANDLE, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::LPWSTR, UInt32, LRESULT*, HRESULT)
    show_help : Proc(IDocHostShowUI*, LibC::HANDLE, LibC::LPWSTR, UInt32, UInt32, POINT, IDispatch, HRESULT)
  end

  IDocHostShowUI_GUID = "c4d244b0-d43e-11cf-893b-00aa00bdce1a"
  IID_IDocHostShowUI = LibC::GUID.new(0xc4d244b0_u32, 0xd43e_u16, 0x11cf_u16, StaticArray[0x89_u8, 0x3b_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0x1a_u8])
  struct IDocHostShowUI
    lpVtbl : IDocHostShowUIVTbl*
  end

  struct IClassFactoryExVTbl
    query_interface : Proc(IClassFactoryEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IClassFactoryEx*, UInt32)
    release : Proc(IClassFactoryEx*, UInt32)
    create_instance : Proc(IClassFactoryEx*, IUnknown, Guid*, Void**, HRESULT)
    lock_server : Proc(IClassFactoryEx*, LibC::BOOL, HRESULT)
    create_instance_with_context : Proc(IClassFactoryEx*, IUnknown, IUnknown, Guid*, Void**, HRESULT)
  end

  IClassFactoryEx_GUID = "342d1ea0-ae25-11d1-89c5-006008c3fbfc"
  IID_IClassFactoryEx = LibC::GUID.new(0x342d1ea0_u32, 0xae25_u16, 0x11d1_u16, StaticArray[0x89_u8, 0xc5_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xc3_u8, 0xfb_u8, 0xfc_u8])
  struct IClassFactoryEx
    lpVtbl : IClassFactoryExVTbl*
  end

  struct IHTMLOMWindowServicesVTbl
    query_interface : Proc(IHTMLOMWindowServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IHTMLOMWindowServices*, UInt32)
    release : Proc(IHTMLOMWindowServices*, UInt32)
    move_to : Proc(IHTMLOMWindowServices*, Int32, Int32, HRESULT)
    move_by : Proc(IHTMLOMWindowServices*, Int32, Int32, HRESULT)
    resize_to : Proc(IHTMLOMWindowServices*, Int32, Int32, HRESULT)
    resize_by : Proc(IHTMLOMWindowServices*, Int32, Int32, HRESULT)
  end

  IHTMLOMWindowServices_GUID = "3050f5fc-98b5-11cf-bb82-00aa00bdce0b"
  IID_IHTMLOMWindowServices = LibC::GUID.new(0x3050f5fc_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IHTMLOMWindowServices
    lpVtbl : IHTMLOMWindowServicesVTbl*
  end

  struct IDiagnosticsScriptEngineSiteVTbl
    query_interface : Proc(IDiagnosticsScriptEngineSite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiagnosticsScriptEngineSite*, UInt32)
    release : Proc(IDiagnosticsScriptEngineSite*, UInt32)
    on_message : Proc(IDiagnosticsScriptEngineSite*, LibC::LPWSTR*, UInt32, HRESULT)
    on_script_error : Proc(IDiagnosticsScriptEngineSite*, IActiveScriptError, HRESULT)
  end

  IDiagnosticsScriptEngineSite_GUID = "30510858-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDiagnosticsScriptEngineSite = LibC::GUID.new(0x30510858_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDiagnosticsScriptEngineSite
    lpVtbl : IDiagnosticsScriptEngineSiteVTbl*
  end

  struct IDiagnosticsScriptEngineVTbl
    query_interface : Proc(IDiagnosticsScriptEngine*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiagnosticsScriptEngine*, UInt32)
    release : Proc(IDiagnosticsScriptEngine*, UInt32)
    evaluate_script : Proc(IDiagnosticsScriptEngine*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    fire_script_message_event : Proc(IDiagnosticsScriptEngine*, LibC::LPWSTR*, LibC::LPWSTR*, UInt32, HRESULT)
    detach : Proc(IDiagnosticsScriptEngine*, HRESULT)
  end

  IDiagnosticsScriptEngine_GUID = "30510859-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDiagnosticsScriptEngine = LibC::GUID.new(0x30510859_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDiagnosticsScriptEngine
    lpVtbl : IDiagnosticsScriptEngineVTbl*
  end

  struct IDiagnosticsScriptEngineProviderVTbl
    query_interface : Proc(IDiagnosticsScriptEngineProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiagnosticsScriptEngineProvider*, UInt32)
    release : Proc(IDiagnosticsScriptEngineProvider*, UInt32)
    create_diagnostics_script_engine : Proc(IDiagnosticsScriptEngineProvider*, IDiagnosticsScriptEngineSite, LibC::BOOL, UInt32, IDiagnosticsScriptEngine*, HRESULT)
  end

  IDiagnosticsScriptEngineProvider_GUID = "3051085a-98b5-11cf-bb82-00aa00bdce0b"
  IID_IDiagnosticsScriptEngineProvider = LibC::GUID.new(0x3051085a_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct IDiagnosticsScriptEngineProvider
    lpVtbl : IDiagnosticsScriptEngineProviderVTbl*
  end

  struct IOpenServiceActivityInputVTbl
    query_interface : Proc(IOpenServiceActivityInput*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceActivityInput*, UInt32)
    release : Proc(IOpenServiceActivityInput*, UInt32)
    get_variable : Proc(IOpenServiceActivityInput*, LibC::LPWSTR, LibC::LPWSTR, UInt8**, HRESULT)
    has_variable : Proc(IOpenServiceActivityInput*, LibC::LPWSTR, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    get_type : Proc(IOpenServiceActivityInput*, OpenServiceActivityContentType*, HRESULT)
  end

  IOpenServiceActivityInput_GUID = "75cb4db9-6da0-4da3-83ce-422b6a433346"
  IID_IOpenServiceActivityInput = LibC::GUID.new(0x75cb4db9_u32, 0x6da0_u16, 0x4da3_u16, StaticArray[0x83_u8, 0xce_u8, 0x42_u8, 0x2b_u8, 0x6a_u8, 0x43_u8, 0x33_u8, 0x46_u8])
  struct IOpenServiceActivityInput
    lpVtbl : IOpenServiceActivityInputVTbl*
  end

  struct IOpenServiceActivityOutputContextVTbl
    query_interface : Proc(IOpenServiceActivityOutputContext*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceActivityOutputContext*, UInt32)
    release : Proc(IOpenServiceActivityOutputContext*, UInt32)
    navigate : Proc(IOpenServiceActivityOutputContext*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IStream, HRESULT)
    can_navigate : Proc(IOpenServiceActivityOutputContext*, LibC::LPWSTR, LibC::LPWSTR, LibC::LPWSTR, IStream, LibC::BOOL*, HRESULT)
  end

  IOpenServiceActivityOutputContext_GUID = "e289deab-f709-49a9-b99e-282364074571"
  IID_IOpenServiceActivityOutputContext = LibC::GUID.new(0xe289deab_u32, 0xf709_u16, 0x49a9_u16, StaticArray[0xb9_u8, 0x9e_u8, 0x28_u8, 0x23_u8, 0x64_u8, 0x7_u8, 0x45_u8, 0x71_u8])
  struct IOpenServiceActivityOutputContext
    lpVtbl : IOpenServiceActivityOutputContextVTbl*
  end

  struct IOpenServiceVTbl
    query_interface : Proc(IOpenService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenService*, UInt32)
    release : Proc(IOpenService*, UInt32)
    is_default : Proc(IOpenService*, LibC::BOOL*, HRESULT)
    set_default : Proc(IOpenService*, LibC::BOOL, LibC::HANDLE, HRESULT)
    get_id : Proc(IOpenService*, UInt8**, HRESULT)
  end

  IOpenService_GUID = "c2952ed1-6a89-4606-925f-1ed8b4be0630"
  IID_IOpenService = LibC::GUID.new(0xc2952ed1_u32, 0x6a89_u16, 0x4606_u16, StaticArray[0x92_u8, 0x5f_u8, 0x1e_u8, 0xd8_u8, 0xb4_u8, 0xbe_u8, 0x6_u8, 0x30_u8])
  struct IOpenService
    lpVtbl : IOpenServiceVTbl*
  end

  struct IOpenServiceManagerVTbl
    query_interface : Proc(IOpenServiceManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceManager*, UInt32)
    release : Proc(IOpenServiceManager*, UInt32)
    install_service : Proc(IOpenServiceManager*, LibC::LPWSTR, IOpenService*, HRESULT)
    uninstall_service : Proc(IOpenServiceManager*, IOpenService, HRESULT)
    get_service_by_id : Proc(IOpenServiceManager*, LibC::LPWSTR, IOpenService*, HRESULT)
  end

  IOpenServiceManager_GUID = "5664125f-4e10-4e90-98e4-e4513d955a14"
  IID_IOpenServiceManager = LibC::GUID.new(0x5664125f_u32, 0x4e10_u16, 0x4e90_u16, StaticArray[0x98_u8, 0xe4_u8, 0xe4_u8, 0x51_u8, 0x3d_u8, 0x95_u8, 0x5a_u8, 0x14_u8])
  struct IOpenServiceManager
    lpVtbl : IOpenServiceManagerVTbl*
  end

  struct IOpenServiceActivityVTbl
    query_interface : Proc(IOpenServiceActivity*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceActivity*, UInt32)
    release : Proc(IOpenServiceActivity*, UInt32)
    is_default : Proc(IOpenServiceActivity*, LibC::BOOL*, HRESULT)
    set_default : Proc(IOpenServiceActivity*, LibC::BOOL, LibC::HANDLE, HRESULT)
    get_id : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    execute : Proc(IOpenServiceActivity*, IOpenServiceActivityInput, IOpenServiceActivityOutputContext, HRESULT)
    can_execute : Proc(IOpenServiceActivity*, IOpenServiceActivityInput, IOpenServiceActivityOutputContext, LibC::BOOL*, HRESULT)
    can_execute_type : Proc(IOpenServiceActivity*, OpenServiceActivityContentType, LibC::BOOL*, HRESULT)
    preview : Proc(IOpenServiceActivity*, IOpenServiceActivityInput, IOpenServiceActivityOutputContext, HRESULT)
    can_preview : Proc(IOpenServiceActivity*, IOpenServiceActivityInput, IOpenServiceActivityOutputContext, LibC::BOOL*, HRESULT)
    can_preview_type : Proc(IOpenServiceActivity*, OpenServiceActivityContentType, LibC::BOOL*, HRESULT)
    get_status_text : Proc(IOpenServiceActivity*, IOpenServiceActivityInput, UInt8**, HRESULT)
    get_homepage_url : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_display_name : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_description : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_category_name : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_icon_path : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_icon : Proc(IOpenServiceActivity*, LibC::BOOL, HANDLE*, HRESULT)
    get_description_file_path : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_download_url : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    get_install_url : Proc(IOpenServiceActivity*, UInt8**, HRESULT)
    is_enabled : Proc(IOpenServiceActivity*, LibC::BOOL*, HRESULT)
    set_enabled : Proc(IOpenServiceActivity*, LibC::BOOL, HRESULT)
  end

  IOpenServiceActivity_GUID = "13645c88-221a-4905-8ed1-4f5112cfc108"
  IID_IOpenServiceActivity = LibC::GUID.new(0x13645c88_u32, 0x221a_u16, 0x4905_u16, StaticArray[0x8e_u8, 0xd1_u8, 0x4f_u8, 0x51_u8, 0x12_u8, 0xcf_u8, 0xc1_u8, 0x8_u8])
  struct IOpenServiceActivity
    lpVtbl : IOpenServiceActivityVTbl*
  end

  struct IEnumOpenServiceActivityVTbl
    query_interface : Proc(IEnumOpenServiceActivity*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumOpenServiceActivity*, UInt32)
    release : Proc(IEnumOpenServiceActivity*, UInt32)
    next : Proc(IEnumOpenServiceActivity*, UInt32, IOpenServiceActivity*, UInt32*, HRESULT)
    skip : Proc(IEnumOpenServiceActivity*, UInt32, HRESULT)
    reset : Proc(IEnumOpenServiceActivity*, HRESULT)
    clone : Proc(IEnumOpenServiceActivity*, IEnumOpenServiceActivity*, HRESULT)
  end

  IEnumOpenServiceActivity_GUID = "a436d7d2-17c3-4ef4-a1e8-5c86faff26c0"
  IID_IEnumOpenServiceActivity = LibC::GUID.new(0xa436d7d2_u32, 0x17c3_u16, 0x4ef4_u16, StaticArray[0xa1_u8, 0xe8_u8, 0x5c_u8, 0x86_u8, 0xfa_u8, 0xff_u8, 0x26_u8, 0xc0_u8])
  struct IEnumOpenServiceActivity
    lpVtbl : IEnumOpenServiceActivityVTbl*
  end

  struct IOpenServiceActivityCategoryVTbl
    query_interface : Proc(IOpenServiceActivityCategory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceActivityCategory*, UInt32)
    release : Proc(IOpenServiceActivityCategory*, UInt32)
    has_default_activity : Proc(IOpenServiceActivityCategory*, LibC::BOOL*, HRESULT)
    get_default_activity : Proc(IOpenServiceActivityCategory*, IOpenServiceActivity*, HRESULT)
    set_default_activity : Proc(IOpenServiceActivityCategory*, IOpenServiceActivity, LibC::HANDLE, HRESULT)
    get_name : Proc(IOpenServiceActivityCategory*, UInt8**, HRESULT)
    get_activity_enumerator : Proc(IOpenServiceActivityCategory*, IOpenServiceActivityInput, IOpenServiceActivityOutputContext, IEnumOpenServiceActivity*, HRESULT)
  end

  IOpenServiceActivityCategory_GUID = "850af9d6-7309-40b5-bdb8-786c106b2153"
  IID_IOpenServiceActivityCategory = LibC::GUID.new(0x850af9d6_u32, 0x7309_u16, 0x40b5_u16, StaticArray[0xbd_u8, 0xb8_u8, 0x78_u8, 0x6c_u8, 0x10_u8, 0x6b_u8, 0x21_u8, 0x53_u8])
  struct IOpenServiceActivityCategory
    lpVtbl : IOpenServiceActivityCategoryVTbl*
  end

  struct IEnumOpenServiceActivityCategoryVTbl
    query_interface : Proc(IEnumOpenServiceActivityCategory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumOpenServiceActivityCategory*, UInt32)
    release : Proc(IEnumOpenServiceActivityCategory*, UInt32)
    next : Proc(IEnumOpenServiceActivityCategory*, UInt32, IOpenServiceActivityCategory*, UInt32*, HRESULT)
    skip : Proc(IEnumOpenServiceActivityCategory*, UInt32, HRESULT)
    reset : Proc(IEnumOpenServiceActivityCategory*, HRESULT)
    clone : Proc(IEnumOpenServiceActivityCategory*, IEnumOpenServiceActivityCategory*, HRESULT)
  end

  IEnumOpenServiceActivityCategory_GUID = "33627a56-8c9a-4430-8fd1-b5f5c771afb6"
  IID_IEnumOpenServiceActivityCategory = LibC::GUID.new(0x33627a56_u32, 0x8c9a_u16, 0x4430_u16, StaticArray[0x8f_u8, 0xd1_u8, 0xb5_u8, 0xf5_u8, 0xc7_u8, 0x71_u8, 0xaf_u8, 0xb6_u8])
  struct IEnumOpenServiceActivityCategory
    lpVtbl : IEnumOpenServiceActivityCategoryVTbl*
  end

  struct IOpenServiceActivityManagerVTbl
    query_interface : Proc(IOpenServiceActivityManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOpenServiceActivityManager*, UInt32)
    release : Proc(IOpenServiceActivityManager*, UInt32)
    get_category_enumerator : Proc(IOpenServiceActivityManager*, OpenServiceActivityContentType, IEnumOpenServiceActivityCategory*, HRESULT)
    get_activity_by_id : Proc(IOpenServiceActivityManager*, LibC::LPWSTR, IOpenServiceActivity*, HRESULT)
    get_activity_by_homepage_and_category : Proc(IOpenServiceActivityManager*, LibC::LPWSTR, LibC::LPWSTR, IOpenServiceActivity*, HRESULT)
    get_version_cookie : Proc(IOpenServiceActivityManager*, UInt32*, HRESULT)
  end

  IOpenServiceActivityManager_GUID = "8a2d0a9d-e920-4bdc-a291-d30f650bc4f1"
  IID_IOpenServiceActivityManager = LibC::GUID.new(0x8a2d0a9d_u32, 0xe920_u16, 0x4bdc_u16, StaticArray[0xa2_u8, 0x91_u8, 0xd3_u8, 0xf_u8, 0x65_u8, 0xb_u8, 0xc4_u8, 0xf1_u8])
  struct IOpenServiceActivityManager
    lpVtbl : IOpenServiceActivityManagerVTbl*
  end

  struct IPersistHistoryVTbl
    query_interface : Proc(IPersistHistory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistHistory*, UInt32)
    release : Proc(IPersistHistory*, UInt32)
    get_class_id : Proc(IPersistHistory*, Guid*, HRESULT)
    load_history : Proc(IPersistHistory*, IStream, IBindCtx, HRESULT)
    save_history : Proc(IPersistHistory*, IStream, HRESULT)
    set_position_cookie : Proc(IPersistHistory*, UInt32, HRESULT)
    get_position_cookie : Proc(IPersistHistory*, UInt32*, HRESULT)
  end

  IPersistHistory_GUID = "91a565c1-e38f-11d0-94bf-00a0c9055cbf"
  IID_IPersistHistory = LibC::GUID.new(0x91a565c1_u32, 0xe38f_u16, 0x11d0_u16, StaticArray[0x94_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0x5c_u8, 0xbf_u8])
  struct IPersistHistory
    lpVtbl : IPersistHistoryVTbl*
  end

  struct IEnumSTATURLVTbl
    query_interface : Proc(IEnumSTATURL*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSTATURL*, UInt32)
    release : Proc(IEnumSTATURL*, UInt32)
    next : Proc(IEnumSTATURL*, UInt32, STATURL*, UInt32*, HRESULT)
    skip : Proc(IEnumSTATURL*, UInt32, HRESULT)
    reset : Proc(IEnumSTATURL*, HRESULT)
    clone : Proc(IEnumSTATURL*, IEnumSTATURL*, HRESULT)
    set_filter : Proc(IEnumSTATURL*, LibC::LPWSTR, UInt32, HRESULT)
  end

  IEnumSTATURL_GUID = "3c374a42-bae4-11cf-bf7d-00aa006946ee"
  IID_IEnumSTATURL = LibC::GUID.new(0x3c374a42_u32, 0xbae4_u16, 0x11cf_u16, StaticArray[0xbf_u8, 0x7d_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x69_u8, 0x46_u8, 0xee_u8])
  struct IEnumSTATURL
    lpVtbl : IEnumSTATURLVTbl*
  end

  struct IUrlHistoryStgVTbl
    query_interface : Proc(IUrlHistoryStg*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUrlHistoryStg*, UInt32)
    release : Proc(IUrlHistoryStg*, UInt32)
    add_url : Proc(IUrlHistoryStg*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    delete_url : Proc(IUrlHistoryStg*, LibC::LPWSTR, UInt32, HRESULT)
    query_url : Proc(IUrlHistoryStg*, LibC::LPWSTR, UInt32, STATURL*, HRESULT)
    bind_to_object : Proc(IUrlHistoryStg*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    enum_urls : Proc(IUrlHistoryStg*, IEnumSTATURL*, HRESULT)
  end

  IUrlHistoryStg_GUID = "3c374a41-bae4-11cf-bf7d-00aa006946ee"
  IID_IUrlHistoryStg = LibC::GUID.new(0x3c374a41_u32, 0xbae4_u16, 0x11cf_u16, StaticArray[0xbf_u8, 0x7d_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x69_u8, 0x46_u8, 0xee_u8])
  struct IUrlHistoryStg
    lpVtbl : IUrlHistoryStgVTbl*
  end

  struct IUrlHistoryStg2VTbl
    query_interface : Proc(IUrlHistoryStg2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUrlHistoryStg2*, UInt32)
    release : Proc(IUrlHistoryStg2*, UInt32)
    add_url : Proc(IUrlHistoryStg2*, LibC::LPWSTR, LibC::LPWSTR, UInt32, HRESULT)
    delete_url : Proc(IUrlHistoryStg2*, LibC::LPWSTR, UInt32, HRESULT)
    query_url : Proc(IUrlHistoryStg2*, LibC::LPWSTR, UInt32, STATURL*, HRESULT)
    bind_to_object : Proc(IUrlHistoryStg2*, LibC::LPWSTR, Guid*, Void**, HRESULT)
    enum_urls : Proc(IUrlHistoryStg2*, IEnumSTATURL*, HRESULT)
    add_url_and_notify : Proc(IUrlHistoryStg2*, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL, IOleCommandTarget, IUnknown, HRESULT)
    clear_history : Proc(IUrlHistoryStg2*, HRESULT)
  end

  IUrlHistoryStg2_GUID = "afa0dc11-c313-11d0-831a-00c04fd5ae38"
  IID_IUrlHistoryStg2 = LibC::GUID.new(0xafa0dc11_u32, 0xc313_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x1a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd5_u8, 0xae_u8, 0x38_u8])
  struct IUrlHistoryStg2
    lpVtbl : IUrlHistoryStg2VTbl*
  end

  struct IUrlHistoryNotifyVTbl
    query_interface : Proc(IUrlHistoryNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUrlHistoryNotify*, UInt32)
    release : Proc(IUrlHistoryNotify*, UInt32)
    query_status : Proc(IUrlHistoryNotify*, Guid*, UInt32, OLECMD*, OLECMDTEXT*, HRESULT)
    exec : Proc(IUrlHistoryNotify*, Guid*, UInt32, UInt32, VARIANT*, VARIANT*, HRESULT)
  end

  IUrlHistoryNotify_GUID = "bc40bec1-c493-11d0-831b-00c04fd5ae38"
  IID_IUrlHistoryNotify = LibC::GUID.new(0xbc40bec1_u32, 0xc493_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x1b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd5_u8, 0xae_u8, 0x38_u8])
  struct IUrlHistoryNotify
    lpVtbl : IUrlHistoryNotifyVTbl*
  end

  struct IWebBrowserEventsServiceVTbl
    query_interface : Proc(IWebBrowserEventsService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBrowserEventsService*, UInt32)
    release : Proc(IWebBrowserEventsService*, UInt32)
    fire_before_navigate2_event : Proc(IWebBrowserEventsService*, Int16*, HRESULT)
    fire_navigate_complete2_event : Proc(IWebBrowserEventsService*, HRESULT)
    fire_download_begin_event : Proc(IWebBrowserEventsService*, HRESULT)
    fire_download_complete_event : Proc(IWebBrowserEventsService*, HRESULT)
    fire_document_complete_event : Proc(IWebBrowserEventsService*, HRESULT)
  end

  IWebBrowserEventsService_GUID = "54a8f188-9ebd-4795-ad16-9b4945119636"
  IID_IWebBrowserEventsService = LibC::GUID.new(0x54a8f188_u32, 0x9ebd_u16, 0x4795_u16, StaticArray[0xad_u8, 0x16_u8, 0x9b_u8, 0x49_u8, 0x45_u8, 0x11_u8, 0x96_u8, 0x36_u8])
  struct IWebBrowserEventsService
    lpVtbl : IWebBrowserEventsServiceVTbl*
  end

  struct IWebBrowserEventsUrlServiceVTbl
    query_interface : Proc(IWebBrowserEventsUrlService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWebBrowserEventsUrlService*, UInt32)
    release : Proc(IWebBrowserEventsUrlService*, UInt32)
    get_url_for_events : Proc(IWebBrowserEventsUrlService*, UInt8**, HRESULT)
  end

  IWebBrowserEventsUrlService_GUID = "87cc5d04-eafa-4833-9820-8f986530cc00"
  IID_IWebBrowserEventsUrlService = LibC::GUID.new(0x87cc5d04_u32, 0xeafa_u16, 0x4833_u16, StaticArray[0x98_u8, 0x20_u8, 0x8f_u8, 0x98_u8, 0x65_u8, 0x30_u8, 0xcc_u8, 0x0_u8])
  struct IWebBrowserEventsUrlService
    lpVtbl : IWebBrowserEventsUrlServiceVTbl*
  end

  struct ITimerServiceVTbl
    query_interface : Proc(ITimerService*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITimerService*, UInt32)
    release : Proc(ITimerService*, UInt32)
    create_timer : Proc(ITimerService*, ITimer, ITimer*, HRESULT)
    get_named_timer : Proc(ITimerService*, Guid*, ITimer*, HRESULT)
    set_named_timer_reference : Proc(ITimerService*, Guid*, ITimer, HRESULT)
  end

  ITimerService_GUID = "3050f35f-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITimerService = LibC::GUID.new(0x3050f35f_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITimerService
    lpVtbl : ITimerServiceVTbl*
  end

  struct ITimerVTbl
    query_interface : Proc(ITimer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITimer*, UInt32)
    release : Proc(ITimer*, UInt32)
    advise : Proc(ITimer*, VARIANT, VARIANT, VARIANT, UInt32, ITimerSink, UInt32*, HRESULT)
    unadvise : Proc(ITimer*, UInt32, HRESULT)
    freeze : Proc(ITimer*, LibC::BOOL, HRESULT)
    get_time : Proc(ITimer*, VARIANT*, HRESULT)
  end

  ITimer_GUID = "3050f360-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITimer = LibC::GUID.new(0x3050f360_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITimer
    lpVtbl : ITimerVTbl*
  end

  struct ITimerExVTbl
    query_interface : Proc(ITimerEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITimerEx*, UInt32)
    release : Proc(ITimerEx*, UInt32)
    advise : Proc(ITimerEx*, VARIANT, VARIANT, VARIANT, UInt32, ITimerSink, UInt32*, HRESULT)
    unadvise : Proc(ITimerEx*, UInt32, HRESULT)
    freeze : Proc(ITimerEx*, LibC::BOOL, HRESULT)
    get_time : Proc(ITimerEx*, VARIANT*, HRESULT)
    set_mode : Proc(ITimerEx*, UInt32, HRESULT)
  end

  ITimerEx_GUID = "30510414-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITimerEx = LibC::GUID.new(0x30510414_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITimerEx
    lpVtbl : ITimerExVTbl*
  end

  struct ITimerSinkVTbl
    query_interface : Proc(ITimerSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITimerSink*, UInt32)
    release : Proc(ITimerSink*, UInt32)
    on_timer : Proc(ITimerSink*, VARIANT, HRESULT)
  end

  ITimerSink_GUID = "3050f361-98b5-11cf-bb82-00aa00bdce0b"
  IID_ITimerSink = LibC::GUID.new(0x3050f361_u32, 0x98b5_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0x82_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0xce_u8, 0xb_u8])
  struct ITimerSink
    lpVtbl : ITimerSinkVTbl*
  end

  struct IMapMIMEToCLSIDVTbl
    query_interface : Proc(IMapMIMEToCLSID*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMapMIMEToCLSID*, UInt32)
    release : Proc(IMapMIMEToCLSID*, UInt32)
    enable_default_mappings : Proc(IMapMIMEToCLSID*, LibC::BOOL, HRESULT)
    map_mime_to_clsid : Proc(IMapMIMEToCLSID*, LibC::LPWSTR, Guid*, HRESULT)
    set_mapping : Proc(IMapMIMEToCLSID*, LibC::LPWSTR, UInt32, Guid*, HRESULT)
  end

  IMapMIMEToCLSID_GUID = "d9e89500-30fa-11d0-b724-00aa006c1a01"
  IID_IMapMIMEToCLSID = LibC::GUID.new(0xd9e89500_u32, 0x30fa_u16, 0x11d0_u16, StaticArray[0xb7_u8, 0x24_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6c_u8, 0x1a_u8, 0x1_u8])
  struct IMapMIMEToCLSID
    lpVtbl : IMapMIMEToCLSIDVTbl*
  end

  struct IImageDecodeFilterVTbl
    query_interface : Proc(IImageDecodeFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IImageDecodeFilter*, UInt32)
    release : Proc(IImageDecodeFilter*, UInt32)
    initialize : Proc(IImageDecodeFilter*, IImageDecodeEventSink, HRESULT)
    process : Proc(IImageDecodeFilter*, IStream, HRESULT)
    terminate : Proc(IImageDecodeFilter*, HRESULT, HRESULT)
  end

  IImageDecodeFilter_GUID = "a3ccedf3-2de2-11d0-86f4-00a0c913f750"
  IID_IImageDecodeFilter = LibC::GUID.new(0xa3ccedf3_u32, 0x2de2_u16, 0x11d0_u16, StaticArray[0x86_u8, 0xf4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x13_u8, 0xf7_u8, 0x50_u8])
  struct IImageDecodeFilter
    lpVtbl : IImageDecodeFilterVTbl*
  end

  struct IImageDecodeEventSinkVTbl
    query_interface : Proc(IImageDecodeEventSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IImageDecodeEventSink*, UInt32)
    release : Proc(IImageDecodeEventSink*, UInt32)
    get_surface : Proc(IImageDecodeEventSink*, Int32, Int32, Guid*, UInt32, UInt32, IUnknown*, HRESULT)
    on_begin_decode : Proc(IImageDecodeEventSink*, UInt32*, UInt32*, Guid**, HRESULT)
    on_bits_complete : Proc(IImageDecodeEventSink*, HRESULT)
    on_decode_complete : Proc(IImageDecodeEventSink*, HRESULT, HRESULT)
    on_palette : Proc(IImageDecodeEventSink*, HRESULT)
    on_progress : Proc(IImageDecodeEventSink*, RECT*, LibC::BOOL, HRESULT)
  end

  IImageDecodeEventSink_GUID = "baa342a0-2ded-11d0-86f4-00a0c913f750"
  IID_IImageDecodeEventSink = LibC::GUID.new(0xbaa342a0_u32, 0x2ded_u16, 0x11d0_u16, StaticArray[0x86_u8, 0xf4_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x13_u8, 0xf7_u8, 0x50_u8])
  struct IImageDecodeEventSink
    lpVtbl : IImageDecodeEventSinkVTbl*
  end

  struct IImageDecodeEventSink2VTbl
    query_interface : Proc(IImageDecodeEventSink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IImageDecodeEventSink2*, UInt32)
    release : Proc(IImageDecodeEventSink2*, UInt32)
    get_surface : Proc(IImageDecodeEventSink2*, Int32, Int32, Guid*, UInt32, UInt32, IUnknown*, HRESULT)
    on_begin_decode : Proc(IImageDecodeEventSink2*, UInt32*, UInt32*, Guid**, HRESULT)
    on_bits_complete : Proc(IImageDecodeEventSink2*, HRESULT)
    on_decode_complete : Proc(IImageDecodeEventSink2*, HRESULT, HRESULT)
    on_palette : Proc(IImageDecodeEventSink2*, HRESULT)
    on_progress : Proc(IImageDecodeEventSink2*, RECT*, LibC::BOOL, HRESULT)
    is_alpha_premult_required : Proc(IImageDecodeEventSink2*, LibC::BOOL*, HRESULT)
  end

  IImageDecodeEventSink2_GUID = "8ebd8a57-8a96-48c9-84a6-962e2db9c931"
  IID_IImageDecodeEventSink2 = LibC::GUID.new(0x8ebd8a57_u32, 0x8a96_u16, 0x48c9_u16, StaticArray[0x84_u8, 0xa6_u8, 0x96_u8, 0x2e_u8, 0x2d_u8, 0xb9_u8, 0xc9_u8, 0x31_u8])
  struct IImageDecodeEventSink2
    lpVtbl : IImageDecodeEventSink2VTbl*
  end

  struct ISniffStreamVTbl
    query_interface : Proc(ISniffStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISniffStream*, UInt32)
    release : Proc(ISniffStream*, UInt32)
    init : Proc(ISniffStream*, IStream, HRESULT)
    peek : Proc(ISniffStream*, Void*, UInt32, UInt32*, HRESULT)
  end

  ISniffStream_GUID = "4ef17940-30e0-11d0-b724-00aa006c1a01"
  IID_ISniffStream = LibC::GUID.new(0x4ef17940_u32, 0x30e0_u16, 0x11d0_u16, StaticArray[0xb7_u8, 0x24_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6c_u8, 0x1a_u8, 0x1_u8])
  struct ISniffStream
    lpVtbl : ISniffStreamVTbl*
  end

  struct IDithererImplVTbl
    query_interface : Proc(IDithererImpl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDithererImpl*, UInt32)
    release : Proc(IDithererImpl*, UInt32)
    set_dest_color_table : Proc(IDithererImpl*, UInt32, RGBQUAD*, HRESULT)
    set_event_sink : Proc(IDithererImpl*, IImageDecodeEventSink, HRESULT)
  end

  IDithererImpl_GUID = "7c48e840-3910-11d0-86fc-00a0c913f750"
  IID_IDithererImpl = LibC::GUID.new(0x7c48e840_u32, 0x3910_u16, 0x11d0_u16, StaticArray[0x86_u8, 0xfc_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x13_u8, 0xf7_u8, 0x50_u8])
  struct IDithererImpl
    lpVtbl : IDithererImplVTbl*
  end


  # Params # hwndparent : LibC::HANDLE [In],pszusername : PSTR [In],fenable : LibC::BOOL [In]
  fun RatingEnable(hwndparent : LibC::HANDLE, pszusername : PSTR, fenable : LibC::BOOL) : HRESULT

  # Params # hwndparent : LibC::HANDLE [In],pszusername : LibC::LPWSTR [In],fenable : LibC::BOOL [In]
  fun RatingEnableW(hwndparent : LibC::HANDLE, pszusername : LibC::LPWSTR, fenable : LibC::BOOL) : HRESULT

  # Params # pszusername : PSTR [In],pszurl : PSTR [In],pszratinginfo : PSTR [In],pdata : UInt8* [In],cbdata : UInt32 [In],ppratingdetails : Void** [In]
  fun RatingCheckUserAccess(pszusername : PSTR, pszurl : PSTR, pszratinginfo : PSTR, pdata : UInt8*, cbdata : UInt32, ppratingdetails : Void**) : HRESULT

  # Params # pszusername : LibC::LPWSTR [In],pszurl : LibC::LPWSTR [In],pszratinginfo : LibC::LPWSTR [In],pdata : UInt8* [In],cbdata : UInt32 [In],ppratingdetails : Void** [In]
  fun RatingCheckUserAccessW(pszusername : LibC::LPWSTR, pszurl : LibC::LPWSTR, pszratinginfo : LibC::LPWSTR, pdata : UInt8*, cbdata : UInt32, ppratingdetails : Void**) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : PSTR [In],pszcontentdescription : PSTR [In],pratingdetails : Void* [In]
  fun RatingAccessDeniedDialog(hdlg : LibC::HANDLE, pszusername : PSTR, pszcontentdescription : PSTR, pratingdetails : Void*) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : LibC::LPWSTR [In],pszcontentdescription : LibC::LPWSTR [In],pratingdetails : Void* [In]
  fun RatingAccessDeniedDialogW(hdlg : LibC::HANDLE, pszusername : LibC::LPWSTR, pszcontentdescription : LibC::LPWSTR, pratingdetails : Void*) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : PSTR [In],pratingdetails : Void* [In]
  fun RatingAccessDeniedDialog2(hdlg : LibC::HANDLE, pszusername : PSTR, pratingdetails : Void*) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : LibC::LPWSTR [In],pratingdetails : Void* [In]
  fun RatingAccessDeniedDialog2W(hdlg : LibC::HANDLE, pszusername : LibC::LPWSTR, pratingdetails : Void*) : HRESULT

  # Params # pratingdetails : Void* [In]
  fun RatingFreeDetails(pratingdetails : Void*) : HRESULT

  # Params # hratingobtainquery : LibC::HANDLE [In]
  fun RatingObtainCancel(hratingobtainquery : LibC::HANDLE) : HRESULT

  # Params # psztargeturl : PSTR [In],dwuserdata : UInt32 [In],fcallback : LibC::IntPtrT [In],phratingobtainquery : LibC::HANDLE* [In]
  fun RatingObtainQuery(psztargeturl : PSTR, dwuserdata : UInt32, fcallback : LibC::IntPtrT, phratingobtainquery : LibC::HANDLE*) : HRESULT

  # Params # psztargeturl : LibC::LPWSTR [In],dwuserdata : UInt32 [In],fcallback : LibC::IntPtrT [In],phratingobtainquery : LibC::HANDLE* [In]
  fun RatingObtainQueryW(psztargeturl : LibC::LPWSTR, dwuserdata : UInt32, fcallback : LibC::IntPtrT, phratingobtainquery : LibC::HANDLE*) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : PSTR [In]
  fun RatingSetupUI(hdlg : LibC::HANDLE, pszusername : PSTR) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],pszusername : LibC::LPWSTR [In]
  fun RatingSetupUIW(hdlg : LibC::HANDLE, pszusername : LibC::LPWSTR) : HRESULT

  # Params # hdlg : LibC::HANDLE [In],cbpasswordblob : UInt32 [In],pbpasswordblob : UInt8* [In],lpszurl : LibC::LPWSTR [In],falwaysnever : LibC::BOOL [In],fsitepage : LibC::BOOL [In],fapprovedsitesenforced : LibC::BOOL [In]
  fun RatingAddToApprovedSites(hdlg : LibC::HANDLE, cbpasswordblob : UInt32, pbpasswordblob : UInt8*, lpszurl : LibC::LPWSTR, falwaysnever : LibC::BOOL, fsitepage : LibC::BOOL, fapprovedsitesenforced : LibC::BOOL) : HRESULT

  # Params # hwndowner : LibC::HANDLE [In],param1 : HINSTANCE [In],lpszfilename : PSTR [In],nshow : Int32 [In]
  fun RatingClickedOnPRFInternal(hwndowner : LibC::HANDLE, param1 : HINSTANCE, lpszfilename : PSTR, nshow : Int32) : HRESULT

  # Params # hwndowner : LibC::HANDLE [In],param1 : HINSTANCE [In],lpszfilename : PSTR [In],nshow : Int32 [In]
  fun RatingClickedOnRATInternal(hwndowner : LibC::HANDLE, param1 : HINSTANCE, lpszfilename : PSTR, nshow : Int32) : HRESULT

  # Params # 
  fun RatingEnabledQuery : HRESULT

  # Params # 
  fun RatingInit : HRESULT

  # Params # ppmap : IMapMIMEToCLSID* [In]
  fun CreateMIMEMap(ppmap : IMapMIMEToCLSID*) : HRESULT

  # Params # pstream : IStream [In],pmap : IMapMIMEToCLSID [In],peventsink : IUnknown [In]
  fun DecodeImage(pstream : IStream, pmap : IMapMIMEToCLSID, peventsink : IUnknown) : HRESULT

  # Params # pinstream : IStream [In],pnformat : UInt32* [In],ppoutstream : IStream* [In]
  fun SniffStream(pinstream : IStream, pnformat : UInt32*, ppoutstream : IStream*) : HRESULT

  # Params # pnmaxbytes : UInt32* [In]
  fun GetMaxMIMEIDBytes(pnmaxbytes : UInt32*) : HRESULT

  # Params # pbbytes : UInt8* [In],nbytes : UInt32 [In],pnformat : UInt32* [In]
  fun IdentifyMIMEType(pbbytes : UInt8*, nbytes : UInt32, pnformat : UInt32*) : HRESULT

  # Params # prgbcolors : RGBQUAD* [In],ncolors : UInt32 [In],pinvtable : UInt8* [In],cbtable : UInt32 [In]
  fun ComputeInvCMAP(prgbcolors : RGBQUAD*, ncolors : UInt32, pinvtable : UInt8*, cbtable : UInt32) : HRESULT

  # Params # pdestbits : UInt8* [In],ndestpitch : Int32 [In],psrcbits : UInt8* [In],nsrcpitch : Int32 [In],bfidsrc : Guid* [In],prgbdestcolors : RGBQUAD* [In],prgbsrccolors : RGBQUAD* [In],pbdestinvmap : UInt8* [In],x : Int32 [In],y : Int32 [In],cx : Int32 [In],cy : Int32 [In],ldesttrans : Int32 [In],lsrctrans : Int32 [In]
  fun DitherTo8(pdestbits : UInt8*, ndestpitch : Int32, psrcbits : UInt8*, nsrcpitch : Int32, bfidsrc : Guid*, prgbdestcolors : RGBQUAD*, prgbsrccolors : RGBQUAD*, pbdestinvmap : UInt8*, x : Int32, y : Int32, cx : Int32, cy : Int32, ldesttrans : Int32, lsrctrans : Int32) : HRESULT

  # Params # hbmdib : HBITMAP [In],ppsurface : IDirectDrawSurface* [In]
  fun CreateDDrawSurfaceOnDIB(hbmdib : HBITMAP, ppsurface : IDirectDrawSurface*) : HRESULT

  # Params # pstream : IStream [In],pmap : IMapMIMEToCLSID [In],peventsink : IUnknown [In],pszmimetypeparam : LibC::LPWSTR [In]
  fun DecodeImageEx(pstream : IStream, pmap : IMapMIMEToCLSID, peventsink : IUnknown, pszmimetypeparam : LibC::LPWSTR) : HRESULT

  # Params # hwndowner : LibC::HANDLE [In],pszurl : LibC::LPWSTR [In],pprivacyenum : IEnumPrivacyRecords [In],freportallsites : LibC::BOOL [In]
  fun DoPrivacyDlg(hwndowner : LibC::HANDLE, pszurl : LibC::LPWSTR, pprivacyenum : IEnumPrivacyRecords, freportallsites : LibC::BOOL) : HRESULT
end
struct LibWin32::IHTMLFiltersCollection
  def query_interface(this : IHTMLFiltersCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFiltersCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFiltersCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFiltersCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFiltersCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFiltersCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFiltersCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLFiltersCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLFiltersCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLFiltersCollection*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
end
struct LibWin32::IIE70DispatchEx
  def query_interface(this : IIE70DispatchEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIE70DispatchEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIE70DispatchEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIE70DispatchEx*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIE70DispatchEx*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIE70DispatchEx*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIE70DispatchEx*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_disp_id(this : IIE70DispatchEx*, bstrname : UInt8*, grfdex : UInt32, pid : Int32*) : HRESULT
    @lpVtbl.value.get_disp_id.call(this, bstrname, grfdex, pid)
  end
  def invoke_ex(this : IIE70DispatchEx*, id : Int32, lcid : UInt32, wflags : UInt16, pdp : DISPPARAMS*, pvarres : VARIANT*, pei : EXCEPINFO*, pspcaller : IServiceProvider) : HRESULT
    @lpVtbl.value.invoke_ex.call(this, id, lcid, wflags, pdp, pvarres, pei, pspcaller)
  end
  def delete_member_by_name(this : IIE70DispatchEx*, bstrname : UInt8*, grfdex : UInt32) : HRESULT
    @lpVtbl.value.delete_member_by_name.call(this, bstrname, grfdex)
  end
  def delete_member_by_disp_id(this : IIE70DispatchEx*, id : Int32) : HRESULT
    @lpVtbl.value.delete_member_by_disp_id.call(this, id)
  end
  def get_member_properties(this : IIE70DispatchEx*, id : Int32, grfdexfetch : UInt32, pgrfdex : UInt32*) : HRESULT
    @lpVtbl.value.get_member_properties.call(this, id, grfdexfetch, pgrfdex)
  end
  def get_member_name(this : IIE70DispatchEx*, id : Int32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_member_name.call(this, id, pbstrname)
  end
  def get_next_disp_id(this : IIE70DispatchEx*, grfdex : UInt32, id : Int32, pid : Int32*) : HRESULT
    @lpVtbl.value.get_next_disp_id.call(this, grfdex, id, pid)
  end
  def get_name_space_parent(this : IIE70DispatchEx*, ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_name_space_parent.call(this, ppunk)
  end
end
struct LibWin32::IIE80DispatchEx
  def query_interface(this : IIE80DispatchEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIE80DispatchEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIE80DispatchEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIE80DispatchEx*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIE80DispatchEx*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIE80DispatchEx*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIE80DispatchEx*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_disp_id(this : IIE80DispatchEx*, bstrname : UInt8*, grfdex : UInt32, pid : Int32*) : HRESULT
    @lpVtbl.value.get_disp_id.call(this, bstrname, grfdex, pid)
  end
  def invoke_ex(this : IIE80DispatchEx*, id : Int32, lcid : UInt32, wflags : UInt16, pdp : DISPPARAMS*, pvarres : VARIANT*, pei : EXCEPINFO*, pspcaller : IServiceProvider) : HRESULT
    @lpVtbl.value.invoke_ex.call(this, id, lcid, wflags, pdp, pvarres, pei, pspcaller)
  end
  def delete_member_by_name(this : IIE80DispatchEx*, bstrname : UInt8*, grfdex : UInt32) : HRESULT
    @lpVtbl.value.delete_member_by_name.call(this, bstrname, grfdex)
  end
  def delete_member_by_disp_id(this : IIE80DispatchEx*, id : Int32) : HRESULT
    @lpVtbl.value.delete_member_by_disp_id.call(this, id)
  end
  def get_member_properties(this : IIE80DispatchEx*, id : Int32, grfdexfetch : UInt32, pgrfdex : UInt32*) : HRESULT
    @lpVtbl.value.get_member_properties.call(this, id, grfdexfetch, pgrfdex)
  end
  def get_member_name(this : IIE80DispatchEx*, id : Int32, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_member_name.call(this, id, pbstrname)
  end
  def get_next_disp_id(this : IIE80DispatchEx*, grfdex : UInt32, id : Int32, pid : Int32*) : HRESULT
    @lpVtbl.value.get_next_disp_id.call(this, grfdex, id, pid)
  end
  def get_name_space_parent(this : IIE80DispatchEx*, ppunk : IUnknown*) : HRESULT
    @lpVtbl.value.get_name_space_parent.call(this, ppunk)
  end
end
struct LibWin32::IHTMLEventObj
  def query_interface(this : IHTMLEventObj*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_src_element(this : IHTMLEventObj*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_src_element.call(this, p)
  end
  def get_alt_key(this : IHTMLEventObj*, p : Int16*) : HRESULT
    @lpVtbl.value.get_alt_key.call(this, p)
  end
  def get_ctrl_key(this : IHTMLEventObj*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ctrl_key.call(this, p)
  end
  def get_shift_key(this : IHTMLEventObj*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shift_key.call(this, p)
  end
  def put_return_value(this : IHTMLEventObj*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_return_value.call(this, v)
  end
  def get_return_value(this : IHTMLEventObj*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_return_value.call(this, p)
  end
  def put_cancel_bubble(this : IHTMLEventObj*, v : Int16) : HRESULT
    @lpVtbl.value.put_cancel_bubble.call(this, v)
  end
  def get_cancel_bubble(this : IHTMLEventObj*, p : Int16*) : HRESULT
    @lpVtbl.value.get_cancel_bubble.call(this, p)
  end
  def get_from_element(this : IHTMLEventObj*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_from_element.call(this, p)
  end
  def get_to_element(this : IHTMLEventObj*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_to_element.call(this, p)
  end
  def put_key_code(this : IHTMLEventObj*, v : Int32) : HRESULT
    @lpVtbl.value.put_key_code.call(this, v)
  end
  def get_key_code(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_key_code.call(this, p)
  end
  def get_button(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_button.call(this, p)
  end
  def get_type(this : IHTMLEventObj*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_qualifier(this : IHTMLEventObj*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_qualifier.call(this, p)
  end
  def get_reason(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_reason.call(this, p)
  end
  def get_x(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def get_y(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def get_client_x(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_x.call(this, p)
  end
  def get_client_y(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_y.call(this, p)
  end
  def get_offset_x(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_x.call(this, p)
  end
  def get_offset_y(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_y.call(this, p)
  end
  def get_screen_x(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_x.call(this, p)
  end
  def get_screen_y(this : IHTMLEventObj*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_y.call(this, p)
  end
  def get_src_filter(this : IHTMLEventObj*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_src_filter.call(this, p)
  end
end
struct LibWin32::IElementBehaviorSite
  def query_interface(this : IElementBehaviorSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_element(this : IElementBehaviorSite*, ppelement : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, ppelement)
  end
  def register_notification(this : IElementBehaviorSite*, levent : Int32) : HRESULT
    @lpVtbl.value.register_notification.call(this, levent)
  end
end
struct LibWin32::IElementBehavior
  def query_interface(this : IElementBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : IElementBehavior*, pbehaviorsite : IElementBehaviorSite) : HRESULT
    @lpVtbl.value.init.call(this, pbehaviorsite)
  end
  def notify(this : IElementBehavior*, levent : Int32, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.notify.call(this, levent, pvar)
  end
  def detach(this : IElementBehavior*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
end
struct LibWin32::IElementBehaviorFactory
  def query_interface(this : IElementBehaviorFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def find_behavior(this : IElementBehaviorFactory*, bstrbehavior : UInt8*, bstrbehaviorurl : UInt8*, psite : IElementBehaviorSite, ppbehavior : IElementBehavior*) : HRESULT
    @lpVtbl.value.find_behavior.call(this, bstrbehavior, bstrbehaviorurl, psite, ppbehavior)
  end
end
struct LibWin32::IElementBehaviorSiteOM
  def query_interface(this : IElementBehaviorSiteOM*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteOM*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteOM*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_event(this : IElementBehaviorSiteOM*, pchevent : LibC::LPWSTR, lflags : Int32, plcookie : Int32*) : HRESULT
    @lpVtbl.value.register_event.call(this, pchevent, lflags, plcookie)
  end
  def get_event_cookie(this : IElementBehaviorSiteOM*, pchevent : LibC::LPWSTR, plcookie : Int32*) : HRESULT
    @lpVtbl.value.get_event_cookie.call(this, pchevent, plcookie)
  end
  def fire_event(this : IElementBehaviorSiteOM*, lcookie : Int32, peventobject : IHTMLEventObj) : HRESULT
    @lpVtbl.value.fire_event.call(this, lcookie, peventobject)
  end
  def create_event_object(this : IElementBehaviorSiteOM*, ppeventobject : IHTMLEventObj*) : HRESULT
    @lpVtbl.value.create_event_object.call(this, ppeventobject)
  end
  def register_name(this : IElementBehaviorSiteOM*, pchname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_name.call(this, pchname)
  end
  def register_urn(this : IElementBehaviorSiteOM*, pchurn : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_urn.call(this, pchurn)
  end
end
struct LibWin32::IElementBehaviorRender
  def query_interface(this : IElementBehaviorRender*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorRender*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorRender*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def draw(this : IElementBehaviorRender*, hdc : HDC, llayer : Int32, prect : RECT*, preserved : IUnknown) : HRESULT
    @lpVtbl.value.draw.call(this, hdc, llayer, prect, preserved)
  end
  def get_render_info(this : IElementBehaviorRender*, plrenderinfo : Int32*) : HRESULT
    @lpVtbl.value.get_render_info.call(this, plrenderinfo)
  end
  def hit_test_point(this : IElementBehaviorRender*, ppoint : POINT*, preserved : IUnknown, pbhit : LibC::BOOL*) : HRESULT
    @lpVtbl.value.hit_test_point.call(this, ppoint, preserved, pbhit)
  end
end
struct LibWin32::IElementBehaviorSiteRender
  def query_interface(this : IElementBehaviorSiteRender*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteRender*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteRender*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invalidate(this : IElementBehaviorSiteRender*, prect : RECT*) : HRESULT
    @lpVtbl.value.invalidate.call(this, prect)
  end
  def invalidate_render_info(this : IElementBehaviorSiteRender*) : HRESULT
    @lpVtbl.value.invalidate_render_info.call(this)
  end
  def invalidate_style(this : IElementBehaviorSiteRender*) : HRESULT
    @lpVtbl.value.invalidate_style.call(this)
  end
end
struct LibWin32::IDOMEvent
  def query_interface(this : IDOMEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_bubbles(this : IDOMEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_bubbles.call(this, p)
  end
  def get_cancelable(this : IDOMEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_cancelable.call(this, p)
  end
  def get_current_target(this : IDOMEvent*, p : IEventTarget*) : HRESULT
    @lpVtbl.value.get_current_target.call(this, p)
  end
  def get_default_prevented(this : IDOMEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_default_prevented.call(this, p)
  end
  def get_event_phase(this : IDOMEvent*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_event_phase.call(this, p)
  end
  def get_target(this : IDOMEvent*, p : IEventTarget*) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
  def get_time_stamp(this : IDOMEvent*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_time_stamp.call(this, p)
  end
  def get_type(this : IDOMEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def init_event(this : IDOMEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16) : HRESULT
    @lpVtbl.value.init_event.call(this, eventtype, canbubble, cancelable)
  end
  def prevent_default(this : IDOMEvent*) : HRESULT
    @lpVtbl.value.prevent_default.call(this)
  end
  def stop_propagation(this : IDOMEvent*) : HRESULT
    @lpVtbl.value.stop_propagation.call(this)
  end
  def stop_immediate_propagation(this : IDOMEvent*) : HRESULT
    @lpVtbl.value.stop_immediate_propagation.call(this)
  end
  def get_is_trusted(this : IDOMEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_trusted.call(this, p)
  end
  def put_cancel_bubble(this : IDOMEvent*, v : Int16) : HRESULT
    @lpVtbl.value.put_cancel_bubble.call(this, v)
  end
  def get_cancel_bubble(this : IDOMEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_cancel_bubble.call(this, p)
  end
  def get_src_element(this : IDOMEvent*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_src_element.call(this, p)
  end
end
struct LibWin32::IHTMLDOMConstructor
  def query_interface(this : IHTMLDOMConstructor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMConstructor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMConstructor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMConstructor*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMConstructor*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMConstructor*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMConstructor*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_constructor(this : IHTMLDOMConstructor*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_constructor.call(this, p)
  end
  def lookup_getter(this : IHTMLDOMConstructor*, propname : UInt8*, ppdisphandler : VARIANT*) : HRESULT
    @lpVtbl.value.lookup_getter.call(this, propname, ppdisphandler)
  end
  def lookup_setter(this : IHTMLDOMConstructor*, propname : UInt8*, ppdisphandler : VARIANT*) : HRESULT
    @lpVtbl.value.lookup_setter.call(this, propname, ppdisphandler)
  end
  def define_getter(this : IHTMLDOMConstructor*, propname : UInt8*, pdisphandler : VARIANT*) : HRESULT
    @lpVtbl.value.define_getter.call(this, propname, pdisphandler)
  end
  def define_setter(this : IHTMLDOMConstructor*, propname : UInt8*, pdisphandler : VARIANT*) : HRESULT
    @lpVtbl.value.define_setter.call(this, propname, pdisphandler)
  end
end
struct LibWin32::IHTMLStyleSheetRule
  def query_interface(this : IHTMLStyleSheetRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selector_text(this : IHTMLStyleSheetRule*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_selector_text.call(this, v)
  end
  def get_selector_text(this : IHTMLStyleSheetRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_selector_text.call(this, p)
  end
  def get_style(this : IHTMLStyleSheetRule*, p : IHTMLRuleStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
  def get_read_only(this : IHTMLStyleSheetRule*, p : Int16*) : HRESULT
    @lpVtbl.value.get_read_only.call(this, p)
  end
end
struct LibWin32::IHTMLCSSStyleDeclaration
  def query_interface(this : IHTMLCSSStyleDeclaration*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSStyleDeclaration*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSStyleDeclaration*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSStyleDeclaration*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSStyleDeclaration*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSStyleDeclaration*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSStyleDeclaration*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLCSSStyleDeclaration*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get_parent_rule(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_parent_rule.call(this, p)
  end
  def get_property_value(this : IHTMLCSSStyleDeclaration*, bstrpropertyname : UInt8*, pbstrpropertyvalue : UInt8**) : HRESULT
    @lpVtbl.value.get_property_value.call(this, bstrpropertyname, pbstrpropertyvalue)
  end
  def get_property_priority(this : IHTMLCSSStyleDeclaration*, bstrpropertyname : UInt8*, pbstrpropertypriority : UInt8**) : HRESULT
    @lpVtbl.value.get_property_priority.call(this, bstrpropertyname, pbstrpropertypriority)
  end
  def remove_property(this : IHTMLCSSStyleDeclaration*, bstrpropertyname : UInt8*, pbstrpropertyvalue : UInt8**) : HRESULT
    @lpVtbl.value.remove_property.call(this, bstrpropertyname, pbstrpropertyvalue)
  end
  def set_property(this : IHTMLCSSStyleDeclaration*, bstrpropertyname : UInt8*, pvarpropertyvalue : VARIANT*, pvarpropertypriority : VARIANT*) : HRESULT
    @lpVtbl.value.set_property.call(this, bstrpropertyname, pvarpropertyvalue, pvarpropertypriority)
  end
  def item(this : IHTMLCSSStyleDeclaration*, index : Int32, pbstrpropertyname : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, index, pbstrpropertyname)
  end
  def put_font_family(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_family.call(this, v)
  end
  def get_font_family(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_family.call(this, p)
  end
  def put_font_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_style.call(this, v)
  end
  def get_font_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_style.call(this, p)
  end
  def put_font_variant(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_variant.call(this, v)
  end
  def get_font_variant(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_variant.call(this, p)
  end
  def put_font_weight(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_weight.call(this, v)
  end
  def get_font_weight(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_weight.call(this, p)
  end
  def put_font_size(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_font_size.call(this, v)
  end
  def get_font_size(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, p)
  end
  def put_font(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font.call(this, v)
  end
  def get_font(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font.call(this, p)
  end
  def put_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_background(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_background_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_color.call(this, v)
  end
  def get_background_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, p)
  end
  def put_background_image(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_image.call(this, v)
  end
  def get_background_image(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_image.call(this, p)
  end
  def put_background_repeat(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_repeat.call(this, v)
  end
  def get_background_repeat(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_repeat.call(this, p)
  end
  def put_background_attachment(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_attachment.call(this, v)
  end
  def get_background_attachment(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_attachment.call(this, p)
  end
  def put_background_position(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_position.call(this, v)
  end
  def get_background_position(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_position.call(this, p)
  end
  def put_background_position_x(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_x.call(this, v)
  end
  def get_background_position_x(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_x.call(this, p)
  end
  def put_background_position_y(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_y.call(this, v)
  end
  def get_background_position_y(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_y.call(this, p)
  end
  def put_word_spacing(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_word_spacing.call(this, v)
  end
  def get_word_spacing(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_word_spacing.call(this, p)
  end
  def put_letter_spacing(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_letter_spacing.call(this, v)
  end
  def get_letter_spacing(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_letter_spacing.call(this, p)
  end
  def put_text_decoration(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_decoration.call(this, v)
  end
  def get_text_decoration(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, p)
  end
  def put_vertical_align(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_vertical_align.call(this, v)
  end
  def get_vertical_align(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_vertical_align.call(this, p)
  end
  def put_text_transform(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_transform.call(this, v)
  end
  def get_text_transform(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_transform.call(this, p)
  end
  def put_text_align(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align.call(this, v)
  end
  def get_text_align(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align.call(this, p)
  end
  def put_text_indent(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_indent.call(this, v)
  end
  def get_text_indent(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_indent.call(this, p)
  end
  def put_line_height(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_line_height.call(this, v)
  end
  def get_line_height(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_line_height.call(this, p)
  end
  def put_margin_top(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_right(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_bottom(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def put_margin_left(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_margin.call(this, v)
  end
  def get_margin(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_margin.call(this, p)
  end
  def put_padding_top(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_top.call(this, v)
  end
  def get_padding_top(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_top.call(this, p)
  end
  def put_padding_right(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_right.call(this, v)
  end
  def get_padding_right(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_right.call(this, p)
  end
  def put_padding_bottom(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_bottom.call(this, v)
  end
  def get_padding_bottom(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_bottom.call(this, p)
  end
  def put_padding_left(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_left.call(this, v)
  end
  def get_padding_left(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_left.call(this, p)
  end
  def put_padding(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_padding.call(this, v)
  end
  def get_padding(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_padding.call(this, p)
  end
  def put_border(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_border_top(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top.call(this, v)
  end
  def get_border_top(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top.call(this, p)
  end
  def put_border_right(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right.call(this, v)
  end
  def get_border_right(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right.call(this, p)
  end
  def put_border_bottom(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom.call(this, v)
  end
  def get_border_bottom(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom.call(this, p)
  end
  def put_border_left(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left.call(this, v)
  end
  def get_border_left(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left.call(this, p)
  end
  def put_border_color(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_top_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_color.call(this, v)
  end
  def get_border_top_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_color.call(this, p)
  end
  def put_border_right_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_color.call(this, v)
  end
  def get_border_right_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_color.call(this, p)
  end
  def put_border_bottom_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_color.call(this, v)
  end
  def get_border_bottom_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_color.call(this, p)
  end
  def put_border_left_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_color.call(this, v)
  end
  def get_border_left_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_color.call(this, p)
  end
  def put_border_width(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_width.call(this, v)
  end
  def get_border_width(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_width.call(this, p)
  end
  def put_border_top_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_width.call(this, v)
  end
  def get_border_top_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_width.call(this, p)
  end
  def put_border_right_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_width.call(this, v)
  end
  def get_border_right_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_width.call(this, p)
  end
  def put_border_bottom_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_width.call(this, v)
  end
  def get_border_bottom_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_width.call(this, p)
  end
  def put_border_left_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_width.call(this, v)
  end
  def get_border_left_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_width.call(this, p)
  end
  def put_border_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_style.call(this, v)
  end
  def get_border_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_style.call(this, p)
  end
  def put_border_top_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top_style.call(this, v)
  end
  def get_border_top_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_style.call(this, p)
  end
  def put_border_right_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right_style.call(this, v)
  end
  def get_border_right_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right_style.call(this, p)
  end
  def put_border_bottom_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom_style.call(this, v)
  end
  def get_border_bottom_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_style.call(this, p)
  end
  def put_border_left_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left_style.call(this, v)
  end
  def get_border_left_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left_style.call(this, p)
  end
  def put_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_style_float(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_style_float.call(this, v)
  end
  def get_style_float(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_style_float.call(this, p)
  end
  def put_clear(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clear.call(this, v)
  end
  def get_clear(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
  def put_display(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_display.call(this, v)
  end
  def get_display(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_display.call(this, p)
  end
  def put_visibility(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_visibility.call(this, v)
  end
  def get_visibility(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_visibility.call(this, p)
  end
  def put_list_style_type(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_type.call(this, v)
  end
  def get_list_style_type(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_type.call(this, p)
  end
  def put_list_style_position(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_position.call(this, v)
  end
  def get_list_style_position(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_position.call(this, p)
  end
  def put_list_style_image(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_image.call(this, v)
  end
  def get_list_style_image(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_image.call(this, p)
  end
  def put_list_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style.call(this, v)
  end
  def get_list_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style.call(this, p)
  end
  def put_white_space(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_white_space.call(this, v)
  end
  def get_white_space(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_white_space.call(this, p)
  end
  def put_top(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_top.call(this, v)
  end
  def get_top(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def put_left(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_left.call(this, v)
  end
  def get_left(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_left.call(this, p)
  end
  def put_z_index(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_z_index.call(this, v)
  end
  def get_z_index(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_z_index.call(this, p)
  end
  def put_overflow(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow.call(this, v)
  end
  def get_overflow(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow.call(this, p)
  end
  def put_page_break_before(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_before.call(this, v)
  end
  def get_page_break_before(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_before.call(this, p)
  end
  def put_page_break_after(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_after.call(this, v)
  end
  def get_page_break_after(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_after.call(this, p)
  end
  def put_css_text(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_text.call(this, v)
  end
  def get_css_text(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_text.call(this, p)
  end
  def put_cursor(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cursor.call(this, v)
  end
  def get_cursor(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cursor.call(this, p)
  end
  def put_clip(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clip.call(this, v)
  end
  def get_clip(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clip.call(this, p)
  end
  def put_filter(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_filter.call(this, v)
  end
  def get_filter(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def put_table_layout(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_table_layout.call(this, v)
  end
  def get_table_layout(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_table_layout.call(this, p)
  end
  def put_border_collapse(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_collapse.call(this, v)
  end
  def get_border_collapse(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_collapse.call(this, p)
  end
  def put_direction(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_direction.call(this, v)
  end
  def get_direction(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def put_behavior(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_behavior.call(this, v)
  end
  def get_behavior(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_behavior.call(this, p)
  end
  def put_position(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_position.call(this, v)
  end
  def get_position(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def put_unicode_bidi(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_unicode_bidi.call(this, v)
  end
  def get_unicode_bidi(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unicode_bidi.call(this, p)
  end
  def put_bottom(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bottom.call(this, v)
  end
  def get_bottom(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bottom.call(this, p)
  end
  def put_right(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_right.call(this, v)
  end
  def get_right(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_right.call(this, p)
  end
  def put_ime_mode(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ime_mode.call(this, v)
  end
  def get_ime_mode(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ime_mode.call(this, p)
  end
  def put_ruby_align(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_align.call(this, v)
  end
  def get_ruby_align(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_align.call(this, p)
  end
  def put_ruby_position(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_position.call(this, v)
  end
  def get_ruby_position(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_position.call(this, p)
  end
  def put_ruby_overhang(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_overhang.call(this, v)
  end
  def get_ruby_overhang(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_overhang.call(this, p)
  end
  def put_layout_grid_char(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_char.call(this, v)
  end
  def get_layout_grid_char(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_char.call(this, p)
  end
  def put_layout_grid_line(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_line.call(this, v)
  end
  def get_layout_grid_line(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_line.call(this, p)
  end
  def put_layout_grid_mode(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_mode.call(this, v)
  end
  def get_layout_grid_mode(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_mode.call(this, p)
  end
  def put_layout_grid_type(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_type.call(this, v)
  end
  def get_layout_grid_type(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_type.call(this, p)
  end
  def put_layout_grid(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid.call(this, v)
  end
  def get_layout_grid(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid.call(this, p)
  end
  def put_text_autospace(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_autospace.call(this, v)
  end
  def get_text_autospace(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_autospace.call(this, p)
  end
  def put_word_break(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_break.call(this, v)
  end
  def get_word_break(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_break.call(this, p)
  end
  def put_line_break(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_line_break.call(this, v)
  end
  def get_line_break(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_break.call(this, p)
  end
  def put_text_justify(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify.call(this, v)
  end
  def get_text_justify(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify.call(this, p)
  end
  def put_text_justify_trim(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify_trim.call(this, v)
  end
  def get_text_justify_trim(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify_trim.call(this, p)
  end
  def put_text_kashida(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida.call(this, v)
  end
  def get_text_kashida(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida.call(this, p)
  end
  def put_overflow_x(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_x.call(this, v)
  end
  def get_overflow_x(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_x.call(this, p)
  end
  def put_overflow_y(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_y.call(this, v)
  end
  def get_overflow_y(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_y.call(this, p)
  end
  def put_accelerator(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_accelerator.call(this, v)
  end
  def get_accelerator(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accelerator.call(this, p)
  end
  def put_layout_flow(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_flow.call(this, v)
  end
  def get_layout_flow(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_flow.call(this, p)
  end
  def put_zoom(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_zoom.call(this, v)
  end
  def get_zoom(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_zoom.call(this, p)
  end
  def put_word_wrap(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_wrap.call(this, v)
  end
  def get_word_wrap(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_wrap.call(this, p)
  end
  def put_text_underline_position(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_underline_position.call(this, v)
  end
  def get_text_underline_position(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_underline_position.call(this, p)
  end
  def put_scrollbar_base_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_base_color.call(this, v)
  end
  def get_scrollbar_base_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_base_color.call(this, p)
  end
  def put_scrollbar_face_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_face_color.call(this, v)
  end
  def get_scrollbar_face_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_face_color.call(this, p)
  end
  def put_scrollbar3d_light_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar3d_light_color.call(this, v)
  end
  def get_scrollbar3d_light_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar3d_light_color.call(this, p)
  end
  def put_scrollbar_shadow_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_shadow_color.call(this, v)
  end
  def get_scrollbar_shadow_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_shadow_color.call(this, p)
  end
  def put_scrollbar_highlight_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_highlight_color.call(this, v)
  end
  def get_scrollbar_highlight_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_highlight_color.call(this, p)
  end
  def put_scrollbar_dark_shadow_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_dark_shadow_color.call(this, v)
  end
  def get_scrollbar_dark_shadow_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_dark_shadow_color.call(this, p)
  end
  def put_scrollbar_arrow_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_arrow_color.call(this, v)
  end
  def get_scrollbar_arrow_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_arrow_color.call(this, p)
  end
  def put_scrollbar_track_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_track_color.call(this, v)
  end
  def get_scrollbar_track_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_track_color.call(this, p)
  end
  def put_writing_mode(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_writing_mode.call(this, v)
  end
  def get_writing_mode(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_writing_mode.call(this, p)
  end
  def put_text_align_last(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align_last.call(this, v)
  end
  def get_text_align_last(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align_last.call(this, p)
  end
  def put_text_kashida_space(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida_space.call(this, v)
  end
  def get_text_kashida_space(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida_space.call(this, p)
  end
  def put_text_overflow(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_overflow.call(this, v)
  end
  def get_text_overflow(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_overflow.call(this, p)
  end
  def put_min_height(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_height.call(this, v)
  end
  def get_min_height(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_height.call(this, p)
  end
  def put_ms_interpolation_mode(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_interpolation_mode.call(this, v)
  end
  def get_ms_interpolation_mode(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_interpolation_mode.call(this, p)
  end
  def put_max_height(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_height.call(this, v)
  end
  def get_max_height(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_height.call(this, p)
  end
  def put_min_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_width.call(this, v)
  end
  def get_min_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_width.call(this, p)
  end
  def put_max_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_width.call(this, v)
  end
  def get_max_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_width.call(this, p)
  end
  def put_content(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content.call(this, v)
  end
  def get_content(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content.call(this, p)
  end
  def put_caption_side(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_caption_side.call(this, v)
  end
  def get_caption_side(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_caption_side.call(this, p)
  end
  def put_counter_increment(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_increment.call(this, v)
  end
  def get_counter_increment(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_increment.call(this, p)
  end
  def put_counter_reset(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_reset.call(this, v)
  end
  def get_counter_reset(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_reset.call(this, p)
  end
  def put_outline(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline.call(this, v)
  end
  def get_outline(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline.call(this, p)
  end
  def put_outline_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_width.call(this, v)
  end
  def get_outline_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_width.call(this, p)
  end
  def put_outline_style(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline_style.call(this, v)
  end
  def get_outline_style(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline_style.call(this, p)
  end
  def put_outline_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_color.call(this, v)
  end
  def get_outline_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_color.call(this, p)
  end
  def put_box_sizing(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_box_sizing.call(this, v)
  end
  def get_box_sizing(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_box_sizing.call(this, p)
  end
  def put_border_spacing(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_spacing.call(this, v)
  end
  def get_border_spacing(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_spacing.call(this, p)
  end
  def put_orphans(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_orphans.call(this, v)
  end
  def get_orphans(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_orphans.call(this, p)
  end
  def put_widows(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_widows.call(this, v)
  end
  def get_widows(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_widows.call(this, p)
  end
  def put_page_break_inside(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_inside.call(this, v)
  end
  def get_page_break_inside(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_inside.call(this, p)
  end
  def put_empty_cells(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_empty_cells.call(this, v)
  end
  def get_empty_cells(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_empty_cells.call(this, p)
  end
  def put_ms_block_progression(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_block_progression.call(this, v)
  end
  def get_ms_block_progression(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_block_progression.call(this, p)
  end
  def put_quotes(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_quotes.call(this, v)
  end
  def get_quotes(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_quotes.call(this, p)
  end
  def put_alignment_baseline(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alignment_baseline.call(this, v)
  end
  def get_alignment_baseline(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alignment_baseline.call(this, p)
  end
  def put_baseline_shift(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_baseline_shift.call(this, v)
  end
  def get_baseline_shift(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_baseline_shift.call(this, p)
  end
  def put_dominant_baseline(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dominant_baseline.call(this, v)
  end
  def get_dominant_baseline(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dominant_baseline.call(this, p)
  end
  def put_font_size_adjust(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_font_size_adjust.call(this, v)
  end
  def get_font_size_adjust(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_size_adjust.call(this, p)
  end
  def put_font_stretch(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_stretch.call(this, v)
  end
  def get_font_stretch(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_stretch.call(this, p)
  end
  def put_opacity(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_opacity.call(this, v)
  end
  def get_opacity(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_opacity.call(this, p)
  end
  def put_clip_path(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clip_path.call(this, v)
  end
  def get_clip_path(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clip_path.call(this, p)
  end
  def put_clip_rule(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clip_rule.call(this, v)
  end
  def get_clip_rule(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clip_rule.call(this, p)
  end
  def put_fill(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_fill.call(this, v)
  end
  def get_fill(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_fill.call(this, p)
  end
  def put_fill_opacity(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_fill_opacity.call(this, v)
  end
  def get_fill_opacity(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_fill_opacity.call(this, p)
  end
  def put_fill_rule(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_fill_rule.call(this, v)
  end
  def get_fill_rule(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_fill_rule.call(this, p)
  end
  def put_kerning(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_kerning.call(this, v)
  end
  def get_kerning(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_kerning.call(this, p)
  end
  def put_marker(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_marker.call(this, v)
  end
  def get_marker(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_marker.call(this, p)
  end
  def put_marker_end(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_marker_end.call(this, v)
  end
  def get_marker_end(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_end.call(this, p)
  end
  def put_marker_mid(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_marker_mid.call(this, v)
  end
  def get_marker_mid(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_mid.call(this, p)
  end
  def put_marker_start(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_marker_start.call(this, v)
  end
  def get_marker_start(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_marker_start.call(this, p)
  end
  def put_mask(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_mask.call(this, v)
  end
  def get_mask(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_mask.call(this, p)
  end
  def put_pointer_events(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_pointer_events.call(this, v)
  end
  def get_pointer_events(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pointer_events.call(this, p)
  end
  def put_stop_color(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stop_color.call(this, v)
  end
  def get_stop_color(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stop_color.call(this, p)
  end
  def put_stop_opacity(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stop_opacity.call(this, v)
  end
  def get_stop_opacity(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stop_opacity.call(this, p)
  end
  def put_stroke(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_stroke.call(this, v)
  end
  def get_stroke(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_stroke.call(this, p)
  end
  def put_stroke_dasharray(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_stroke_dasharray.call(this, v)
  end
  def get_stroke_dasharray(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_stroke_dasharray.call(this, p)
  end
  def put_stroke_dashoffset(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stroke_dashoffset.call(this, v)
  end
  def get_stroke_dashoffset(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stroke_dashoffset.call(this, p)
  end
  def put_stroke_linecap(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_stroke_linecap.call(this, v)
  end
  def get_stroke_linecap(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_stroke_linecap.call(this, p)
  end
  def put_stroke_linejoin(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_stroke_linejoin.call(this, v)
  end
  def get_stroke_linejoin(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_stroke_linejoin.call(this, p)
  end
  def put_stroke_miterlimit(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stroke_miterlimit.call(this, v)
  end
  def get_stroke_miterlimit(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stroke_miterlimit.call(this, p)
  end
  def put_stroke_opacity(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stroke_opacity.call(this, v)
  end
  def get_stroke_opacity(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stroke_opacity.call(this, p)
  end
  def put_stroke_width(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stroke_width.call(this, v)
  end
  def get_stroke_width(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stroke_width.call(this, p)
  end
  def put_text_anchor(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_anchor.call(this, v)
  end
  def get_text_anchor(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_anchor.call(this, p)
  end
  def put_glyph_orientation_horizontal(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_glyph_orientation_horizontal.call(this, v)
  end
  def get_glyph_orientation_horizontal(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_glyph_orientation_horizontal.call(this, p)
  end
  def put_glyph_orientation_vertical(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_glyph_orientation_vertical.call(this, v)
  end
  def get_glyph_orientation_vertical(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_glyph_orientation_vertical.call(this, p)
  end
  def put_border_radius(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_radius.call(this, v)
  end
  def get_border_radius(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_radius.call(this, p)
  end
  def put_border_top_left_radius(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top_left_radius.call(this, v)
  end
  def get_border_top_left_radius(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_left_radius.call(this, p)
  end
  def put_border_top_right_radius(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top_right_radius.call(this, v)
  end
  def get_border_top_right_radius(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_right_radius.call(this, p)
  end
  def put_border_bottom_right_radius(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom_right_radius.call(this, v)
  end
  def get_border_bottom_right_radius(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_right_radius.call(this, p)
  end
  def put_border_bottom_left_radius(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom_left_radius.call(this, v)
  end
  def get_border_bottom_left_radius(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_left_radius.call(this, p)
  end
  def put_clip_top(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_clip_top.call(this, v)
  end
  def get_clip_top(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_top.call(this, p)
  end
  def put_clip_right(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_clip_right.call(this, v)
  end
  def get_clip_right(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_right.call(this, p)
  end
  def get_clip_bottom(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_bottom.call(this, p)
  end
  def put_clip_left(this : IHTMLCSSStyleDeclaration*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_clip_left.call(this, v)
  end
  def get_clip_left(this : IHTMLCSSStyleDeclaration*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_left.call(this, p)
  end
  def put_css_float(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_float.call(this, v)
  end
  def get_css_float(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_float.call(this, p)
  end
  def put_background_clip(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_clip.call(this, v)
  end
  def get_background_clip(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_clip.call(this, p)
  end
  def put_background_origin(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_origin.call(this, v)
  end
  def get_background_origin(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_origin.call(this, p)
  end
  def put_background_size(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_size.call(this, v)
  end
  def get_background_size(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_size.call(this, p)
  end
  def put_box_shadow(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_box_shadow.call(this, v)
  end
  def get_box_shadow(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_box_shadow.call(this, p)
  end
  def put_ms_transform(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transform.call(this, v)
  end
  def get_ms_transform(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transform.call(this, p)
  end
  def put_ms_transform_origin(this : IHTMLCSSStyleDeclaration*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transform_origin.call(this, v)
  end
  def get_ms_transform_origin(this : IHTMLCSSStyleDeclaration*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transform_origin.call(this, p)
  end
end
struct LibWin32::IHTMLCSSStyleDeclaration2
  def query_interface(this : IHTMLCSSStyleDeclaration2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSStyleDeclaration2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSStyleDeclaration2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSStyleDeclaration2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSStyleDeclaration2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSStyleDeclaration2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSStyleDeclaration2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ms_scroll_chaining(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_chaining.call(this, v)
  end
  def get_ms_scroll_chaining(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_chaining.call(this, p)
  end
  def put_ms_content_zooming(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zooming.call(this, v)
  end
  def get_ms_content_zooming(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zooming.call(this, p)
  end
  def put_ms_content_zoom_snap_type(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_snap_type.call(this, v)
  end
  def get_ms_content_zoom_snap_type(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_snap_type.call(this, p)
  end
  def put_ms_scroll_rails(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_rails.call(this, v)
  end
  def get_ms_scroll_rails(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_rails.call(this, p)
  end
  def put_ms_content_zoom_chaining(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_chaining.call(this, v)
  end
  def get_ms_content_zoom_chaining(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_chaining.call(this, p)
  end
  def put_ms_scroll_snap_type(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_snap_type.call(this, v)
  end
  def get_ms_scroll_snap_type(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_snap_type.call(this, p)
  end
  def put_ms_content_zoom_limit(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_limit.call(this, v)
  end
  def get_ms_content_zoom_limit(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_limit.call(this, p)
  end
  def put_ms_content_zoom_snap(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_snap.call(this, v)
  end
  def get_ms_content_zoom_snap(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_snap.call(this, p)
  end
  def put_ms_content_zoom_snap_points(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_snap_points.call(this, v)
  end
  def get_ms_content_zoom_snap_points(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_snap_points.call(this, p)
  end
  def put_ms_content_zoom_limit_min(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_limit_min.call(this, v)
  end
  def get_ms_content_zoom_limit_min(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_limit_min.call(this, p)
  end
  def put_ms_content_zoom_limit_max(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_content_zoom_limit_max.call(this, v)
  end
  def get_ms_content_zoom_limit_max(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_content_zoom_limit_max.call(this, p)
  end
  def put_ms_scroll_snap_x(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_snap_x.call(this, v)
  end
  def get_ms_scroll_snap_x(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_snap_x.call(this, p)
  end
  def put_ms_scroll_snap_y(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_snap_y.call(this, v)
  end
  def get_ms_scroll_snap_y(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_snap_y.call(this, p)
  end
  def put_ms_scroll_snap_points_x(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_snap_points_x.call(this, v)
  end
  def get_ms_scroll_snap_points_x(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_snap_points_x.call(this, p)
  end
  def put_ms_scroll_snap_points_y(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_snap_points_y.call(this, v)
  end
  def get_ms_scroll_snap_points_y(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_snap_points_y.call(this, p)
  end
  def put_ms_grid_column(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_grid_column.call(this, v)
  end
  def get_ms_grid_column(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_grid_column.call(this, p)
  end
  def put_ms_grid_column_align(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_grid_column_align.call(this, v)
  end
  def get_ms_grid_column_align(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_grid_column_align.call(this, p)
  end
  def put_ms_grid_columns(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_grid_columns.call(this, v)
  end
  def get_ms_grid_columns(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_grid_columns.call(this, p)
  end
  def put_ms_grid_column_span(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_grid_column_span.call(this, v)
  end
  def get_ms_grid_column_span(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_grid_column_span.call(this, p)
  end
  def put_ms_grid_row(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_grid_row.call(this, v)
  end
  def get_ms_grid_row(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_grid_row.call(this, p)
  end
  def put_ms_grid_row_align(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_grid_row_align.call(this, v)
  end
  def get_ms_grid_row_align(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_grid_row_align.call(this, p)
  end
  def put_ms_grid_rows(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_grid_rows.call(this, v)
  end
  def get_ms_grid_rows(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_grid_rows.call(this, p)
  end
  def put_ms_grid_row_span(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_grid_row_span.call(this, v)
  end
  def get_ms_grid_row_span(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_grid_row_span.call(this, p)
  end
  def put_ms_wrap_through(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_wrap_through.call(this, v)
  end
  def get_ms_wrap_through(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_wrap_through.call(this, p)
  end
  def put_ms_wrap_margin(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_wrap_margin.call(this, v)
  end
  def get_ms_wrap_margin(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_wrap_margin.call(this, p)
  end
  def put_ms_wrap_flow(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_wrap_flow.call(this, v)
  end
  def get_ms_wrap_flow(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_wrap_flow.call(this, p)
  end
  def put_ms_animation_name(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_name.call(this, v)
  end
  def get_ms_animation_name(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_name.call(this, p)
  end
  def put_ms_animation_duration(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_duration.call(this, v)
  end
  def get_ms_animation_duration(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_duration.call(this, p)
  end
  def put_ms_animation_timing_function(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_timing_function.call(this, v)
  end
  def get_ms_animation_timing_function(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_timing_function.call(this, p)
  end
  def put_ms_animation_delay(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_delay.call(this, v)
  end
  def get_ms_animation_delay(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_delay.call(this, p)
  end
  def put_ms_animation_direction(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_direction.call(this, v)
  end
  def get_ms_animation_direction(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_direction.call(this, p)
  end
  def put_ms_animation_play_state(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_play_state.call(this, v)
  end
  def get_ms_animation_play_state(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_play_state.call(this, p)
  end
  def put_ms_animation_iteration_count(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_iteration_count.call(this, v)
  end
  def get_ms_animation_iteration_count(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_iteration_count.call(this, p)
  end
  def put_ms_animation(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation.call(this, v)
  end
  def get_ms_animation(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation.call(this, p)
  end
  def put_ms_animation_fill_mode(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_animation_fill_mode.call(this, v)
  end
  def get_ms_animation_fill_mode(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_animation_fill_mode.call(this, p)
  end
  def put_color_interpolation_filters(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_color_interpolation_filters.call(this, v)
  end
  def get_color_interpolation_filters(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_color_interpolation_filters.call(this, p)
  end
  def put_column_count(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_column_count.call(this, v)
  end
  def get_column_count(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_column_count.call(this, p)
  end
  def put_column_width(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_column_width.call(this, v)
  end
  def get_column_width(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_column_width.call(this, p)
  end
  def put_column_gap(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_column_gap.call(this, v)
  end
  def get_column_gap(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_column_gap.call(this, p)
  end
  def put_column_fill(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_column_fill.call(this, v)
  end
  def get_column_fill(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_column_fill.call(this, p)
  end
  def put_column_span(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_column_span.call(this, v)
  end
  def get_column_span(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_column_span.call(this, p)
  end
  def put_columns(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_columns.call(this, v)
  end
  def get_columns(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_columns.call(this, p)
  end
  def put_column_rule(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_column_rule.call(this, v)
  end
  def get_column_rule(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_column_rule.call(this, p)
  end
  def put_column_rule_color(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_column_rule_color.call(this, v)
  end
  def get_column_rule_color(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_column_rule_color.call(this, p)
  end
  def put_column_rule_style(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_column_rule_style.call(this, v)
  end
  def get_column_rule_style(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_column_rule_style.call(this, p)
  end
  def put_column_rule_width(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_column_rule_width.call(this, v)
  end
  def get_column_rule_width(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_column_rule_width.call(this, p)
  end
  def put_break_before(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_break_before.call(this, v)
  end
  def get_break_before(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_break_before.call(this, p)
  end
  def put_break_after(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_break_after.call(this, v)
  end
  def get_break_after(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_break_after.call(this, p)
  end
  def put_break_inside(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_break_inside.call(this, v)
  end
  def get_break_inside(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_break_inside.call(this, p)
  end
  def put_flood_color(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_flood_color.call(this, v)
  end
  def get_flood_color(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_flood_color.call(this, p)
  end
  def put_flood_opacity(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_flood_opacity.call(this, v)
  end
  def get_flood_opacity(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_flood_opacity.call(this, p)
  end
  def put_lighting_color(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_lighting_color.call(this, v)
  end
  def get_lighting_color(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_lighting_color.call(this, p)
  end
  def put_ms_scroll_limit_x_min(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_scroll_limit_x_min.call(this, v)
  end
  def get_ms_scroll_limit_x_min(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_scroll_limit_x_min.call(this, p)
  end
  def put_ms_scroll_limit_y_min(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_scroll_limit_y_min.call(this, v)
  end
  def get_ms_scroll_limit_y_min(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_scroll_limit_y_min.call(this, p)
  end
  def put_ms_scroll_limit_x_max(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_scroll_limit_x_max.call(this, v)
  end
  def get_ms_scroll_limit_x_max(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_scroll_limit_x_max.call(this, p)
  end
  def put_ms_scroll_limit_y_max(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_scroll_limit_y_max.call(this, v)
  end
  def get_ms_scroll_limit_y_max(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_scroll_limit_y_max.call(this, p)
  end
  def put_ms_scroll_limit(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_limit.call(this, v)
  end
  def get_ms_scroll_limit(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_limit.call(this, p)
  end
  def put_text_shadow(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_shadow.call(this, v)
  end
  def get_text_shadow(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_shadow.call(this, p)
  end
  def put_ms_flow_from(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flow_from.call(this, v)
  end
  def get_ms_flow_from(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flow_from.call(this, p)
  end
  def put_ms_flow_into(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flow_into.call(this, v)
  end
  def get_ms_flow_into(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flow_into.call(this, p)
  end
  def put_ms_hyphens(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_hyphens.call(this, v)
  end
  def get_ms_hyphens(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_hyphens.call(this, p)
  end
  def put_ms_hyphenate_limit_zone(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_hyphenate_limit_zone.call(this, v)
  end
  def get_ms_hyphenate_limit_zone(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_hyphenate_limit_zone.call(this, p)
  end
  def put_ms_hyphenate_limit_chars(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_hyphenate_limit_chars.call(this, v)
  end
  def get_ms_hyphenate_limit_chars(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_hyphenate_limit_chars.call(this, p)
  end
  def put_ms_hyphenate_limit_lines(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_hyphenate_limit_lines.call(this, v)
  end
  def get_ms_hyphenate_limit_lines(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_hyphenate_limit_lines.call(this, p)
  end
  def put_ms_high_contrast_adjust(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_high_contrast_adjust.call(this, v)
  end
  def get_ms_high_contrast_adjust(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_high_contrast_adjust.call(this, p)
  end
  def put_enable_background(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_enable_background.call(this, v)
  end
  def get_enable_background(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_enable_background.call(this, p)
  end
  def put_ms_font_feature_settings(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_font_feature_settings.call(this, v)
  end
  def get_ms_font_feature_settings(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_font_feature_settings.call(this, p)
  end
  def put_ms_user_select(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_user_select.call(this, v)
  end
  def get_ms_user_select(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_user_select.call(this, p)
  end
  def put_ms_overflow_style(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_overflow_style.call(this, v)
  end
  def get_ms_overflow_style(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_overflow_style.call(this, p)
  end
  def put_ms_transform_style(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transform_style.call(this, v)
  end
  def get_ms_transform_style(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transform_style.call(this, p)
  end
  def put_ms_backface_visibility(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_backface_visibility.call(this, v)
  end
  def get_ms_backface_visibility(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_backface_visibility.call(this, p)
  end
  def put_ms_perspective(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_perspective.call(this, v)
  end
  def get_ms_perspective(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_perspective.call(this, p)
  end
  def put_ms_perspective_origin(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_perspective_origin.call(this, v)
  end
  def get_ms_perspective_origin(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_perspective_origin.call(this, p)
  end
  def put_ms_transition_property(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transition_property.call(this, v)
  end
  def get_ms_transition_property(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transition_property.call(this, p)
  end
  def put_ms_transition_duration(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transition_duration.call(this, v)
  end
  def get_ms_transition_duration(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transition_duration.call(this, p)
  end
  def put_ms_transition_timing_function(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transition_timing_function.call(this, v)
  end
  def get_ms_transition_timing_function(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transition_timing_function.call(this, p)
  end
  def put_ms_transition_delay(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transition_delay.call(this, v)
  end
  def get_ms_transition_delay(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transition_delay.call(this, p)
  end
  def put_ms_transition(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_transition.call(this, v)
  end
  def get_ms_transition(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_transition.call(this, p)
  end
  def put_ms_touch_action(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_touch_action.call(this, v)
  end
  def get_ms_touch_action(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_touch_action.call(this, p)
  end
  def put_ms_scroll_translation(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_scroll_translation.call(this, v)
  end
  def get_ms_scroll_translation(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_scroll_translation.call(this, p)
  end
  def put_ms_flex(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex.call(this, v)
  end
  def get_ms_flex(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex.call(this, p)
  end
  def put_ms_flex_positive(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_flex_positive.call(this, v)
  end
  def get_ms_flex_positive(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_flex_positive.call(this, p)
  end
  def put_ms_flex_negative(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_flex_negative.call(this, v)
  end
  def get_ms_flex_negative(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_flex_negative.call(this, p)
  end
  def put_ms_flex_preferred_size(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_flex_preferred_size.call(this, v)
  end
  def get_ms_flex_preferred_size(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_flex_preferred_size.call(this, p)
  end
  def put_ms_flex_flow(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_flow.call(this, v)
  end
  def get_ms_flex_flow(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_flow.call(this, p)
  end
  def put_ms_flex_direction(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_direction.call(this, v)
  end
  def get_ms_flex_direction(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_direction.call(this, p)
  end
  def put_ms_flex_wrap(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_wrap.call(this, v)
  end
  def get_ms_flex_wrap(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_wrap.call(this, p)
  end
  def put_ms_flex_align(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_align.call(this, v)
  end
  def get_ms_flex_align(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_align.call(this, p)
  end
  def put_ms_flex_item_align(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_item_align.call(this, v)
  end
  def get_ms_flex_item_align(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_item_align.call(this, p)
  end
  def put_ms_flex_pack(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_pack.call(this, v)
  end
  def get_ms_flex_pack(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_pack.call(this, p)
  end
  def put_ms_flex_line_pack(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_flex_line_pack.call(this, v)
  end
  def get_ms_flex_line_pack(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_flex_line_pack.call(this, p)
  end
  def put_ms_flex_order(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_flex_order.call(this, v)
  end
  def get_ms_flex_order(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_flex_order.call(this, p)
  end
  def put_ms_touch_select(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_touch_select.call(this, v)
  end
  def get_ms_touch_select(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_touch_select.call(this, p)
  end
  def put_transform(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transform.call(this, v)
  end
  def get_transform(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transform.call(this, p)
  end
  def put_transform_origin(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transform_origin.call(this, v)
  end
  def get_transform_origin(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transform_origin.call(this, p)
  end
  def put_transform_style(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transform_style.call(this, v)
  end
  def get_transform_style(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transform_style.call(this, p)
  end
  def put_backface_visibility(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_backface_visibility.call(this, v)
  end
  def get_backface_visibility(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_backface_visibility.call(this, p)
  end
  def put_perspective(this : IHTMLCSSStyleDeclaration2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_perspective.call(this, v)
  end
  def get_perspective(this : IHTMLCSSStyleDeclaration2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_perspective.call(this, p)
  end
  def put_perspective_origin(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_perspective_origin.call(this, v)
  end
  def get_perspective_origin(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_perspective_origin.call(this, p)
  end
  def put_transition_property(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transition_property.call(this, v)
  end
  def get_transition_property(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transition_property.call(this, p)
  end
  def put_transition_duration(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transition_duration.call(this, v)
  end
  def get_transition_duration(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transition_duration.call(this, p)
  end
  def put_transition_timing_function(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transition_timing_function.call(this, v)
  end
  def get_transition_timing_function(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transition_timing_function.call(this, p)
  end
  def put_transition_delay(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transition_delay.call(this, v)
  end
  def get_transition_delay(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transition_delay.call(this, p)
  end
  def put_transition(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_transition.call(this, v)
  end
  def get_transition(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_transition.call(this, p)
  end
  def put_font_feature_settings(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_feature_settings.call(this, v)
  end
  def get_font_feature_settings(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_feature_settings.call(this, p)
  end
  def put_animation_name(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_name.call(this, v)
  end
  def get_animation_name(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_name.call(this, p)
  end
  def put_animation_duration(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_duration.call(this, v)
  end
  def get_animation_duration(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_duration.call(this, p)
  end
  def put_animation_timing_function(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_timing_function.call(this, v)
  end
  def get_animation_timing_function(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_timing_function.call(this, p)
  end
  def put_animation_delay(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_delay.call(this, v)
  end
  def get_animation_delay(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_delay.call(this, p)
  end
  def put_animation_direction(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_direction.call(this, v)
  end
  def get_animation_direction(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_direction.call(this, p)
  end
  def put_animation_play_state(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_play_state.call(this, v)
  end
  def get_animation_play_state(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_play_state.call(this, p)
  end
  def put_animation_iteration_count(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_iteration_count.call(this, v)
  end
  def get_animation_iteration_count(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_iteration_count.call(this, p)
  end
  def put_animation(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation.call(this, v)
  end
  def get_animation(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation.call(this, p)
  end
  def put_animation_fill_mode(this : IHTMLCSSStyleDeclaration2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_animation_fill_mode.call(this, v)
  end
  def get_animation_fill_mode(this : IHTMLCSSStyleDeclaration2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_fill_mode.call(this, p)
  end
end
struct LibWin32::IHTMLCSSStyleDeclaration3
  def query_interface(this : IHTMLCSSStyleDeclaration3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSStyleDeclaration3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSStyleDeclaration3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSStyleDeclaration3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSStyleDeclaration3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSStyleDeclaration3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSStyleDeclaration3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_flex(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_flex.call(this, v)
  end
  def get_flex(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_flex.call(this, p)
  end
  def put_flex_direction(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_flex_direction.call(this, v)
  end
  def get_flex_direction(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_flex_direction.call(this, p)
  end
  def put_flex_wrap(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_flex_wrap.call(this, v)
  end
  def get_flex_wrap(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_flex_wrap.call(this, p)
  end
  def put_flex_flow(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_flex_flow.call(this, v)
  end
  def get_flex_flow(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_flex_flow.call(this, p)
  end
  def put_flex_grow(this : IHTMLCSSStyleDeclaration3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_flex_grow.call(this, v)
  end
  def get_flex_grow(this : IHTMLCSSStyleDeclaration3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_flex_grow.call(this, p)
  end
  def put_flex_shrink(this : IHTMLCSSStyleDeclaration3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_flex_shrink.call(this, v)
  end
  def get_flex_shrink(this : IHTMLCSSStyleDeclaration3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_flex_shrink.call(this, p)
  end
  def put_flex_basis(this : IHTMLCSSStyleDeclaration3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_flex_basis.call(this, v)
  end
  def get_flex_basis(this : IHTMLCSSStyleDeclaration3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_flex_basis.call(this, p)
  end
  def put_justify_content(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_justify_content.call(this, v)
  end
  def get_justify_content(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_justify_content.call(this, p)
  end
  def put_align_items(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align_items.call(this, v)
  end
  def get_align_items(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align_items.call(this, p)
  end
  def put_align_self(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align_self.call(this, v)
  end
  def get_align_self(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align_self.call(this, p)
  end
  def put_align_content(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align_content.call(this, v)
  end
  def get_align_content(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align_content.call(this, p)
  end
  def put_border_image(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image.call(this, v)
  end
  def get_border_image(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image.call(this, p)
  end
  def put_border_image_source(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image_source.call(this, v)
  end
  def get_border_image_source(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image_source.call(this, p)
  end
  def put_border_image_slice(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image_slice.call(this, v)
  end
  def get_border_image_slice(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image_slice.call(this, p)
  end
  def put_border_image_width(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image_width.call(this, v)
  end
  def get_border_image_width(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image_width.call(this, p)
  end
  def put_border_image_outset(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image_outset.call(this, v)
  end
  def get_border_image_outset(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image_outset.call(this, p)
  end
  def put_border_image_repeat(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_image_repeat.call(this, v)
  end
  def get_border_image_repeat(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_image_repeat.call(this, p)
  end
  def put_ms_ime_align(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_ime_align.call(this, v)
  end
  def get_ms_ime_align(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_ime_align.call(this, p)
  end
  def put_ms_text_combine_horizontal(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_text_combine_horizontal.call(this, v)
  end
  def get_ms_text_combine_horizontal(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_text_combine_horizontal.call(this, p)
  end
  def put_touch_action(this : IHTMLCSSStyleDeclaration3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_touch_action.call(this, v)
  end
  def get_touch_action(this : IHTMLCSSStyleDeclaration3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_touch_action.call(this, p)
  end
end
struct LibWin32::IHTMLCSSStyleDeclaration4
  def query_interface(this : IHTMLCSSStyleDeclaration4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSStyleDeclaration4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSStyleDeclaration4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSStyleDeclaration4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSStyleDeclaration4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSStyleDeclaration4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSStyleDeclaration4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_webkit_appearance(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_appearance.call(this, v)
  end
  def get_webkit_appearance(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_appearance.call(this, p)
  end
  def put_webkit_user_select(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_user_select.call(this, v)
  end
  def get_webkit_user_select(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_user_select.call(this, p)
  end
  def put_webkit_box_align(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_box_align.call(this, v)
  end
  def get_webkit_box_align(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_box_align.call(this, p)
  end
  def put_webkit_box_ordinal_group(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_box_ordinal_group.call(this, v)
  end
  def get_webkit_box_ordinal_group(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_box_ordinal_group.call(this, p)
  end
  def put_webkit_box_pack(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_box_pack.call(this, v)
  end
  def get_webkit_box_pack(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_box_pack.call(this, p)
  end
  def put_webkit_box_flex(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_box_flex.call(this, v)
  end
  def get_webkit_box_flex(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_box_flex.call(this, p)
  end
  def put_webkit_box_orient(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_box_orient.call(this, v)
  end
  def get_webkit_box_orient(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_box_orient.call(this, p)
  end
  def put_webkit_box_direction(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_box_direction.call(this, v)
  end
  def get_webkit_box_direction(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_box_direction.call(this, p)
  end
  def put_webkit_transform(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transform.call(this, v)
  end
  def get_webkit_transform(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transform.call(this, p)
  end
  def put_webkit_background_size(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_size.call(this, v)
  end
  def get_webkit_background_size(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_size.call(this, p)
  end
  def put_webkit_backface_visibility(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_backface_visibility.call(this, v)
  end
  def get_webkit_backface_visibility(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_backface_visibility.call(this, p)
  end
  def put_webkit_animation(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation.call(this, v)
  end
  def get_webkit_animation(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation.call(this, p)
  end
  def put_webkit_transition(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transition.call(this, v)
  end
  def get_webkit_transition(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transition.call(this, p)
  end
  def put_webkit_animation_name(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_name.call(this, v)
  end
  def get_webkit_animation_name(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_name.call(this, p)
  end
  def put_webkit_animation_duration(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_duration.call(this, v)
  end
  def get_webkit_animation_duration(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_duration.call(this, p)
  end
  def put_webkit_animation_timing_function(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_timing_function.call(this, v)
  end
  def get_webkit_animation_timing_function(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_timing_function.call(this, p)
  end
  def put_webkit_animation_delay(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_delay.call(this, v)
  end
  def get_webkit_animation_delay(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_delay.call(this, p)
  end
  def put_webkit_animation_iteration_count(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_iteration_count.call(this, v)
  end
  def get_webkit_animation_iteration_count(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_iteration_count.call(this, p)
  end
  def put_webkit_animation_direction(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_direction.call(this, v)
  end
  def get_webkit_animation_direction(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_direction.call(this, p)
  end
  def put_webkit_animation_play_state(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_play_state.call(this, v)
  end
  def get_webkit_animation_play_state(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_play_state.call(this, p)
  end
  def put_webkit_transition_property(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transition_property.call(this, v)
  end
  def get_webkit_transition_property(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transition_property.call(this, p)
  end
  def put_webkit_transition_duration(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transition_duration.call(this, v)
  end
  def get_webkit_transition_duration(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transition_duration.call(this, p)
  end
  def put_webkit_transition_timing_function(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transition_timing_function.call(this, v)
  end
  def get_webkit_transition_timing_function(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transition_timing_function.call(this, p)
  end
  def put_webkit_transition_delay(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transition_delay.call(this, v)
  end
  def get_webkit_transition_delay(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transition_delay.call(this, p)
  end
  def put_webkit_background_attachment(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_attachment.call(this, v)
  end
  def get_webkit_background_attachment(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_attachment.call(this, p)
  end
  def put_webkit_background_color(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_background_color.call(this, v)
  end
  def get_webkit_background_color(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_background_color.call(this, p)
  end
  def put_webkit_background_clip(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_clip.call(this, v)
  end
  def get_webkit_background_clip(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_clip.call(this, p)
  end
  def put_webkit_background_image(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_image.call(this, v)
  end
  def get_webkit_background_image(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_image.call(this, p)
  end
  def put_webkit_background_repeat(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_repeat.call(this, v)
  end
  def get_webkit_background_repeat(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_repeat.call(this, p)
  end
  def put_webkit_background_origin(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_origin.call(this, v)
  end
  def get_webkit_background_origin(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_origin.call(this, p)
  end
  def put_webkit_background_position(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background_position.call(this, v)
  end
  def get_webkit_background_position(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background_position.call(this, p)
  end
  def put_webkit_background_position_x(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_background_position_x.call(this, v)
  end
  def get_webkit_background_position_x(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_background_position_x.call(this, p)
  end
  def put_webkit_background_position_y(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_background_position_y.call(this, v)
  end
  def get_webkit_background_position_y(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_background_position_y.call(this, p)
  end
  def put_webkit_background(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_background.call(this, v)
  end
  def get_webkit_background(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_background.call(this, p)
  end
  def put_webkit_transform_origin(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_transform_origin.call(this, v)
  end
  def get_webkit_transform_origin(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_transform_origin.call(this, p)
  end
  def put_ms_text_size_adjust(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ms_text_size_adjust.call(this, v)
  end
  def get_ms_text_size_adjust(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ms_text_size_adjust.call(this, p)
  end
  def put_webkit_text_size_adjust(this : IHTMLCSSStyleDeclaration4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_webkit_text_size_adjust.call(this, v)
  end
  def get_webkit_text_size_adjust(this : IHTMLCSSStyleDeclaration4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_webkit_text_size_adjust.call(this, p)
  end
  def put_webkit_border_image(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image.call(this, v)
  end
  def get_webkit_border_image(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image.call(this, p)
  end
  def put_webkit_border_image_source(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image_source.call(this, v)
  end
  def get_webkit_border_image_source(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image_source.call(this, p)
  end
  def put_webkit_border_image_slice(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image_slice.call(this, v)
  end
  def get_webkit_border_image_slice(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image_slice.call(this, p)
  end
  def put_webkit_border_image_width(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image_width.call(this, v)
  end
  def get_webkit_border_image_width(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image_width.call(this, p)
  end
  def put_webkit_border_image_outset(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image_outset.call(this, v)
  end
  def get_webkit_border_image_outset(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image_outset.call(this, p)
  end
  def put_webkit_border_image_repeat(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_border_image_repeat.call(this, v)
  end
  def get_webkit_border_image_repeat(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_border_image_repeat.call(this, p)
  end
  def put_webkit_box_sizing(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_box_sizing.call(this, v)
  end
  def get_webkit_box_sizing(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_box_sizing.call(this, p)
  end
  def put_webkit_animation_fill_mode(this : IHTMLCSSStyleDeclaration4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_webkit_animation_fill_mode.call(this, v)
  end
  def get_webkit_animation_fill_mode(this : IHTMLCSSStyleDeclaration4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_webkit_animation_fill_mode.call(this, p)
  end
end
struct LibWin32::IHTMLStyleEnabled
  def query_interface(this : IHTMLStyleEnabled*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleEnabled*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleEnabled*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleEnabled*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleEnabled*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleEnabled*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleEnabled*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def ms_get_property_enabled(this : IHTMLStyleEnabled*, name : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.ms_get_property_enabled.call(this, name, p)
  end
  def ms_put_property_enabled(this : IHTMLStyleEnabled*, name : UInt8*, b : Int16) : HRESULT
    @lpVtbl.value.ms_put_property_enabled.call(this, name, b)
  end
end
struct LibWin32::DispHTMLCSSStyleDeclaration
  def query_interface(this : DispHTMLCSSStyleDeclaration*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSStyleDeclaration*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSStyleDeclaration*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSStyleDeclaration*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSStyleDeclaration*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSStyleDeclaration*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSStyleDeclaration*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyle
  def query_interface(this : IHTMLStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_font_family(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_family.call(this, v)
  end
  def get_font_family(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_family.call(this, p)
  end
  def put_font_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_style.call(this, v)
  end
  def get_font_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_style.call(this, p)
  end
  def put_font_variant(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_variant.call(this, v)
  end
  def get_font_variant(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_variant.call(this, p)
  end
  def put_font_weight(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_weight.call(this, v)
  end
  def get_font_weight(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_weight.call(this, p)
  end
  def put_font_size(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_font_size.call(this, v)
  end
  def get_font_size(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, p)
  end
  def put_font(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font.call(this, v)
  end
  def get_font(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font.call(this, p)
  end
  def put_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_background(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_background_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_color.call(this, v)
  end
  def get_background_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, p)
  end
  def put_background_image(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_image.call(this, v)
  end
  def get_background_image(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_image.call(this, p)
  end
  def put_background_repeat(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_repeat.call(this, v)
  end
  def get_background_repeat(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_repeat.call(this, p)
  end
  def put_background_attachment(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_attachment.call(this, v)
  end
  def get_background_attachment(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_attachment.call(this, p)
  end
  def put_background_position(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_position.call(this, v)
  end
  def get_background_position(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_position.call(this, p)
  end
  def put_background_position_x(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_x.call(this, v)
  end
  def get_background_position_x(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_x.call(this, p)
  end
  def put_background_position_y(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_y.call(this, v)
  end
  def get_background_position_y(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_y.call(this, p)
  end
  def put_word_spacing(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_word_spacing.call(this, v)
  end
  def get_word_spacing(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_word_spacing.call(this, p)
  end
  def put_letter_spacing(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_letter_spacing.call(this, v)
  end
  def get_letter_spacing(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_letter_spacing.call(this, p)
  end
  def put_text_decoration(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_decoration.call(this, v)
  end
  def get_text_decoration(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, p)
  end
  def put_text_decoration_none(this : IHTMLStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_none.call(this, v)
  end
  def get_text_decoration_none(this : IHTMLStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_none.call(this, p)
  end
  def put_text_decoration_underline(this : IHTMLStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_underline.call(this, v)
  end
  def get_text_decoration_underline(this : IHTMLStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_underline.call(this, p)
  end
  def put_text_decoration_overline(this : IHTMLStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_overline.call(this, v)
  end
  def get_text_decoration_overline(this : IHTMLStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_overline.call(this, p)
  end
  def put_text_decoration_line_through(this : IHTMLStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_line_through.call(this, v)
  end
  def get_text_decoration_line_through(this : IHTMLStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_line_through.call(this, p)
  end
  def put_text_decoration_blink(this : IHTMLStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_blink.call(this, v)
  end
  def get_text_decoration_blink(this : IHTMLStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_blink.call(this, p)
  end
  def put_vertical_align(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_vertical_align.call(this, v)
  end
  def get_vertical_align(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_vertical_align.call(this, p)
  end
  def put_text_transform(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_transform.call(this, v)
  end
  def get_text_transform(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_transform.call(this, p)
  end
  def put_text_align(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align.call(this, v)
  end
  def get_text_align(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align.call(this, p)
  end
  def put_text_indent(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_indent.call(this, v)
  end
  def get_text_indent(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_indent.call(this, p)
  end
  def put_line_height(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_line_height.call(this, v)
  end
  def get_line_height(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_line_height.call(this, p)
  end
  def put_margin_top(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_right(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_bottom(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def put_margin_left(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_margin.call(this, v)
  end
  def get_margin(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_margin.call(this, p)
  end
  def put_padding_top(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_top.call(this, v)
  end
  def get_padding_top(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_top.call(this, p)
  end
  def put_padding_right(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_right.call(this, v)
  end
  def get_padding_right(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_right.call(this, p)
  end
  def put_padding_bottom(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_bottom.call(this, v)
  end
  def get_padding_bottom(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_bottom.call(this, p)
  end
  def put_padding_left(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_left.call(this, v)
  end
  def get_padding_left(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_left.call(this, p)
  end
  def put_padding(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_padding.call(this, v)
  end
  def get_padding(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_padding.call(this, p)
  end
  def put_border(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_border_top(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top.call(this, v)
  end
  def get_border_top(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top.call(this, p)
  end
  def put_border_right(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right.call(this, v)
  end
  def get_border_right(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right.call(this, p)
  end
  def put_border_bottom(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom.call(this, v)
  end
  def get_border_bottom(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom.call(this, p)
  end
  def put_border_left(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left.call(this, v)
  end
  def get_border_left(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left.call(this, p)
  end
  def put_border_color(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_top_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_color.call(this, v)
  end
  def get_border_top_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_color.call(this, p)
  end
  def put_border_right_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_color.call(this, v)
  end
  def get_border_right_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_color.call(this, p)
  end
  def put_border_bottom_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_color.call(this, v)
  end
  def get_border_bottom_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_color.call(this, p)
  end
  def put_border_left_color(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_color.call(this, v)
  end
  def get_border_left_color(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_color.call(this, p)
  end
  def put_border_width(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_width.call(this, v)
  end
  def get_border_width(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_width.call(this, p)
  end
  def put_border_top_width(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_width.call(this, v)
  end
  def get_border_top_width(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_width.call(this, p)
  end
  def put_border_right_width(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_width.call(this, v)
  end
  def get_border_right_width(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_width.call(this, p)
  end
  def put_border_bottom_width(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_width.call(this, v)
  end
  def get_border_bottom_width(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_width.call(this, p)
  end
  def put_border_left_width(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_width.call(this, v)
  end
  def get_border_left_width(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_width.call(this, p)
  end
  def put_border_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_style.call(this, v)
  end
  def get_border_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_style.call(this, p)
  end
  def put_border_top_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top_style.call(this, v)
  end
  def get_border_top_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_style.call(this, p)
  end
  def put_border_right_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right_style.call(this, v)
  end
  def get_border_right_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right_style.call(this, p)
  end
  def put_border_bottom_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom_style.call(this, v)
  end
  def get_border_bottom_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_style.call(this, p)
  end
  def put_border_left_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left_style.call(this, v)
  end
  def get_border_left_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left_style.call(this, p)
  end
  def put_width(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_style_float(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_style_float.call(this, v)
  end
  def get_style_float(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_style_float.call(this, p)
  end
  def put_clear(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clear.call(this, v)
  end
  def get_clear(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
  def put_display(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_display.call(this, v)
  end
  def get_display(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_display.call(this, p)
  end
  def put_visibility(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_visibility.call(this, v)
  end
  def get_visibility(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_visibility.call(this, p)
  end
  def put_list_style_type(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_type.call(this, v)
  end
  def get_list_style_type(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_type.call(this, p)
  end
  def put_list_style_position(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_position.call(this, v)
  end
  def get_list_style_position(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_position.call(this, p)
  end
  def put_list_style_image(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_image.call(this, v)
  end
  def get_list_style_image(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_image.call(this, p)
  end
  def put_list_style(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style.call(this, v)
  end
  def get_list_style(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style.call(this, p)
  end
  def put_white_space(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_white_space.call(this, v)
  end
  def get_white_space(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_white_space.call(this, p)
  end
  def put_top(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_top.call(this, v)
  end
  def get_top(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def put_left(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_left.call(this, v)
  end
  def get_left(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_left.call(this, p)
  end
  def get_position(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def put_z_index(this : IHTMLStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_z_index.call(this, v)
  end
  def get_z_index(this : IHTMLStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_z_index.call(this, p)
  end
  def put_overflow(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow.call(this, v)
  end
  def get_overflow(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow.call(this, p)
  end
  def put_page_break_before(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_before.call(this, v)
  end
  def get_page_break_before(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_before.call(this, p)
  end
  def put_page_break_after(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_after.call(this, v)
  end
  def get_page_break_after(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_after.call(this, p)
  end
  def put_css_text(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_text.call(this, v)
  end
  def get_css_text(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_text.call(this, p)
  end
  def put_pixel_top(this : IHTMLStyle*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_top.call(this, v)
  end
  def get_pixel_top(this : IHTMLStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_top.call(this, p)
  end
  def put_pixel_left(this : IHTMLStyle*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_left.call(this, v)
  end
  def get_pixel_left(this : IHTMLStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_left.call(this, p)
  end
  def put_pixel_width(this : IHTMLStyle*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_width.call(this, v)
  end
  def get_pixel_width(this : IHTMLStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_width.call(this, p)
  end
  def put_pixel_height(this : IHTMLStyle*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_height.call(this, v)
  end
  def get_pixel_height(this : IHTMLStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_height.call(this, p)
  end
  def put_pos_top(this : IHTMLStyle*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_top.call(this, v)
  end
  def get_pos_top(this : IHTMLStyle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_top.call(this, p)
  end
  def put_pos_left(this : IHTMLStyle*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_left.call(this, v)
  end
  def get_pos_left(this : IHTMLStyle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_left.call(this, p)
  end
  def put_pos_width(this : IHTMLStyle*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_width.call(this, v)
  end
  def get_pos_width(this : IHTMLStyle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_width.call(this, p)
  end
  def put_pos_height(this : IHTMLStyle*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_height.call(this, v)
  end
  def get_pos_height(this : IHTMLStyle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_height.call(this, p)
  end
  def put_cursor(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cursor.call(this, v)
  end
  def get_cursor(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cursor.call(this, p)
  end
  def put_clip(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clip.call(this, v)
  end
  def get_clip(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clip.call(this, p)
  end
  def put_filter(this : IHTMLStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_filter.call(this, v)
  end
  def get_filter(this : IHTMLStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def set_attribute(this : IHTMLStyle*, strattributename : UInt8*, attributevalue : VARIANT, lflags : Int32) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, attributevalue, lflags)
  end
  def get_attribute(this : IHTMLStyle*, strattributename : UInt8*, lflags : Int32, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, lflags, attributevalue)
  end
  def remove_attribute(this : IHTMLStyle*, strattributename : UInt8*, lflags : Int32, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename, lflags, pfsuccess)
  end
  def to_string(this : IHTMLStyle*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
end
struct LibWin32::IHTMLStyle2
  def query_interface(this : IHTMLStyle2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_table_layout(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_table_layout.call(this, v)
  end
  def get_table_layout(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_table_layout.call(this, p)
  end
  def put_border_collapse(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_collapse.call(this, v)
  end
  def get_border_collapse(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_collapse.call(this, p)
  end
  def put_direction(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_direction.call(this, v)
  end
  def get_direction(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def put_behavior(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_behavior.call(this, v)
  end
  def get_behavior(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_behavior.call(this, p)
  end
  def set_expression(this : IHTMLStyle2*, propname : UInt8*, expression : UInt8*, language : UInt8*) : HRESULT
    @lpVtbl.value.set_expression.call(this, propname, expression, language)
  end
  def get_expression(this : IHTMLStyle2*, propname : UInt8*, expression : VARIANT*) : HRESULT
    @lpVtbl.value.get_expression.call(this, propname, expression)
  end
  def remove_expression(this : IHTMLStyle2*, propname : UInt8*, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_expression.call(this, propname, pfsuccess)
  end
  def put_position(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_position.call(this, v)
  end
  def get_position(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def put_unicode_bidi(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_unicode_bidi.call(this, v)
  end
  def get_unicode_bidi(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unicode_bidi.call(this, p)
  end
  def put_bottom(this : IHTMLStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bottom.call(this, v)
  end
  def get_bottom(this : IHTMLStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bottom.call(this, p)
  end
  def put_right(this : IHTMLStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_right.call(this, v)
  end
  def get_right(this : IHTMLStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_right.call(this, p)
  end
  def put_pixel_bottom(this : IHTMLStyle2*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_bottom.call(this, v)
  end
  def get_pixel_bottom(this : IHTMLStyle2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_bottom.call(this, p)
  end
  def put_pixel_right(this : IHTMLStyle2*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_right.call(this, v)
  end
  def get_pixel_right(this : IHTMLStyle2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_right.call(this, p)
  end
  def put_pos_bottom(this : IHTMLStyle2*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_bottom.call(this, v)
  end
  def get_pos_bottom(this : IHTMLStyle2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_bottom.call(this, p)
  end
  def put_pos_right(this : IHTMLStyle2*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_right.call(this, v)
  end
  def get_pos_right(this : IHTMLStyle2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_right.call(this, p)
  end
  def put_ime_mode(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ime_mode.call(this, v)
  end
  def get_ime_mode(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ime_mode.call(this, p)
  end
  def put_ruby_align(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_align.call(this, v)
  end
  def get_ruby_align(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_align.call(this, p)
  end
  def put_ruby_position(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_position.call(this, v)
  end
  def get_ruby_position(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_position.call(this, p)
  end
  def put_ruby_overhang(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_overhang.call(this, v)
  end
  def get_ruby_overhang(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_overhang.call(this, p)
  end
  def put_layout_grid_char(this : IHTMLStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_char.call(this, v)
  end
  def get_layout_grid_char(this : IHTMLStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_char.call(this, p)
  end
  def put_layout_grid_line(this : IHTMLStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_line.call(this, v)
  end
  def get_layout_grid_line(this : IHTMLStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_line.call(this, p)
  end
  def put_layout_grid_mode(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_mode.call(this, v)
  end
  def get_layout_grid_mode(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_mode.call(this, p)
  end
  def put_layout_grid_type(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_type.call(this, v)
  end
  def get_layout_grid_type(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_type.call(this, p)
  end
  def put_layout_grid(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid.call(this, v)
  end
  def get_layout_grid(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid.call(this, p)
  end
  def put_word_break(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_break.call(this, v)
  end
  def get_word_break(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_break.call(this, p)
  end
  def put_line_break(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_line_break.call(this, v)
  end
  def get_line_break(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_break.call(this, p)
  end
  def put_text_justify(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify.call(this, v)
  end
  def get_text_justify(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify.call(this, p)
  end
  def put_text_justify_trim(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify_trim.call(this, v)
  end
  def get_text_justify_trim(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify_trim.call(this, p)
  end
  def put_text_kashida(this : IHTMLStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida.call(this, v)
  end
  def get_text_kashida(this : IHTMLStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida.call(this, p)
  end
  def put_text_autospace(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_autospace.call(this, v)
  end
  def get_text_autospace(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_autospace.call(this, p)
  end
  def put_overflow_x(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_x.call(this, v)
  end
  def get_overflow_x(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_x.call(this, p)
  end
  def put_overflow_y(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_y.call(this, v)
  end
  def get_overflow_y(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_y.call(this, p)
  end
  def put_accelerator(this : IHTMLStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_accelerator.call(this, v)
  end
  def get_accelerator(this : IHTMLStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accelerator.call(this, p)
  end
end
struct LibWin32::IHTMLStyle3
  def query_interface(this : IHTMLStyle3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_layout_flow(this : IHTMLStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_flow.call(this, v)
  end
  def get_layout_flow(this : IHTMLStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_flow.call(this, p)
  end
  def put_zoom(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_zoom.call(this, v)
  end
  def get_zoom(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_zoom.call(this, p)
  end
  def put_word_wrap(this : IHTMLStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_wrap.call(this, v)
  end
  def get_word_wrap(this : IHTMLStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_wrap.call(this, p)
  end
  def put_text_underline_position(this : IHTMLStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_underline_position.call(this, v)
  end
  def get_text_underline_position(this : IHTMLStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_underline_position.call(this, p)
  end
  def put_scrollbar_base_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_base_color.call(this, v)
  end
  def get_scrollbar_base_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_base_color.call(this, p)
  end
  def put_scrollbar_face_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_face_color.call(this, v)
  end
  def get_scrollbar_face_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_face_color.call(this, p)
  end
  def put_scrollbar3d_light_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar3d_light_color.call(this, v)
  end
  def get_scrollbar3d_light_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar3d_light_color.call(this, p)
  end
  def put_scrollbar_shadow_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_shadow_color.call(this, v)
  end
  def get_scrollbar_shadow_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_shadow_color.call(this, p)
  end
  def put_scrollbar_highlight_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_highlight_color.call(this, v)
  end
  def get_scrollbar_highlight_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_highlight_color.call(this, p)
  end
  def put_scrollbar_dark_shadow_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_dark_shadow_color.call(this, v)
  end
  def get_scrollbar_dark_shadow_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_dark_shadow_color.call(this, p)
  end
  def put_scrollbar_arrow_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_arrow_color.call(this, v)
  end
  def get_scrollbar_arrow_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_arrow_color.call(this, p)
  end
  def put_scrollbar_track_color(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_track_color.call(this, v)
  end
  def get_scrollbar_track_color(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_track_color.call(this, p)
  end
  def put_writing_mode(this : IHTMLStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_writing_mode.call(this, v)
  end
  def get_writing_mode(this : IHTMLStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_writing_mode.call(this, p)
  end
  def put_text_align_last(this : IHTMLStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align_last.call(this, v)
  end
  def get_text_align_last(this : IHTMLStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align_last.call(this, p)
  end
  def put_text_kashida_space(this : IHTMLStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida_space.call(this, v)
  end
  def get_text_kashida_space(this : IHTMLStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida_space.call(this, p)
  end
end
struct LibWin32::IHTMLStyle4
  def query_interface(this : IHTMLStyle4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_text_overflow(this : IHTMLStyle4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_overflow.call(this, v)
  end
  def get_text_overflow(this : IHTMLStyle4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_overflow.call(this, p)
  end
  def put_min_height(this : IHTMLStyle4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_height.call(this, v)
  end
  def get_min_height(this : IHTMLStyle4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_height.call(this, p)
  end
end
struct LibWin32::IHTMLStyle5
  def query_interface(this : IHTMLStyle5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ms_interpolation_mode(this : IHTMLStyle5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_interpolation_mode.call(this, v)
  end
  def get_ms_interpolation_mode(this : IHTMLStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_interpolation_mode.call(this, p)
  end
  def put_max_height(this : IHTMLStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_height.call(this, v)
  end
  def get_max_height(this : IHTMLStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_height.call(this, p)
  end
  def put_min_width(this : IHTMLStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_width.call(this, v)
  end
  def get_min_width(this : IHTMLStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_width.call(this, p)
  end
  def put_max_width(this : IHTMLStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_width.call(this, v)
  end
  def get_max_width(this : IHTMLStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_width.call(this, p)
  end
end
struct LibWin32::IHTMLStyle6
  def query_interface(this : IHTMLStyle6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyle6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyle6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyle6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyle6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyle6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyle6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_content(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content.call(this, v)
  end
  def get_content(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content.call(this, p)
  end
  def put_caption_side(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_caption_side.call(this, v)
  end
  def get_caption_side(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_caption_side.call(this, p)
  end
  def put_counter_increment(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_increment.call(this, v)
  end
  def get_counter_increment(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_increment.call(this, p)
  end
  def put_counter_reset(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_reset.call(this, v)
  end
  def get_counter_reset(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_reset.call(this, p)
  end
  def put_outline(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline.call(this, v)
  end
  def get_outline(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline.call(this, p)
  end
  def put_outline_width(this : IHTMLStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_width.call(this, v)
  end
  def get_outline_width(this : IHTMLStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_width.call(this, p)
  end
  def put_outline_style(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline_style.call(this, v)
  end
  def get_outline_style(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline_style.call(this, p)
  end
  def put_outline_color(this : IHTMLStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_color.call(this, v)
  end
  def get_outline_color(this : IHTMLStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_color.call(this, p)
  end
  def put_box_sizing(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_box_sizing.call(this, v)
  end
  def get_box_sizing(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_box_sizing.call(this, p)
  end
  def put_border_spacing(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_spacing.call(this, v)
  end
  def get_border_spacing(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_spacing.call(this, p)
  end
  def put_orphans(this : IHTMLStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_orphans.call(this, v)
  end
  def get_orphans(this : IHTMLStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_orphans.call(this, p)
  end
  def put_widows(this : IHTMLStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_widows.call(this, v)
  end
  def get_widows(this : IHTMLStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_widows.call(this, p)
  end
  def put_page_break_inside(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_inside.call(this, v)
  end
  def get_page_break_inside(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_inside.call(this, p)
  end
  def put_empty_cells(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_empty_cells.call(this, v)
  end
  def get_empty_cells(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_empty_cells.call(this, p)
  end
  def put_ms_block_progression(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_block_progression.call(this, v)
  end
  def get_ms_block_progression(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_block_progression.call(this, p)
  end
  def put_quotes(this : IHTMLStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_quotes.call(this, v)
  end
  def get_quotes(this : IHTMLStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_quotes.call(this, p)
  end
end
struct LibWin32::IHTMLRuleStyle
  def query_interface(this : IHTMLRuleStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_font_family(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_family.call(this, v)
  end
  def get_font_family(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_family.call(this, p)
  end
  def put_font_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_style.call(this, v)
  end
  def get_font_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_style.call(this, p)
  end
  def put_font_variant(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_variant.call(this, v)
  end
  def get_font_variant(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_variant.call(this, p)
  end
  def put_font_weight(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font_weight.call(this, v)
  end
  def get_font_weight(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_weight.call(this, p)
  end
  def put_font_size(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_font_size.call(this, v)
  end
  def get_font_size(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, p)
  end
  def put_font(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font.call(this, v)
  end
  def get_font(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font.call(this, p)
  end
  def put_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_background(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_background_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_color.call(this, v)
  end
  def get_background_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, p)
  end
  def put_background_image(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_image.call(this, v)
  end
  def get_background_image(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_image.call(this, p)
  end
  def put_background_repeat(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_repeat.call(this, v)
  end
  def get_background_repeat(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_repeat.call(this, p)
  end
  def put_background_attachment(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_attachment.call(this, v)
  end
  def get_background_attachment(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_attachment.call(this, p)
  end
  def put_background_position(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background_position.call(this, v)
  end
  def get_background_position(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_position.call(this, p)
  end
  def put_background_position_x(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_x.call(this, v)
  end
  def get_background_position_x(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_x.call(this, p)
  end
  def put_background_position_y(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_background_position_y.call(this, v)
  end
  def get_background_position_y(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_y.call(this, p)
  end
  def put_word_spacing(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_word_spacing.call(this, v)
  end
  def get_word_spacing(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_word_spacing.call(this, p)
  end
  def put_letter_spacing(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_letter_spacing.call(this, v)
  end
  def get_letter_spacing(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_letter_spacing.call(this, p)
  end
  def put_text_decoration(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_decoration.call(this, v)
  end
  def get_text_decoration(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, p)
  end
  def put_text_decoration_none(this : IHTMLRuleStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_none.call(this, v)
  end
  def get_text_decoration_none(this : IHTMLRuleStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_none.call(this, p)
  end
  def put_text_decoration_underline(this : IHTMLRuleStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_underline.call(this, v)
  end
  def get_text_decoration_underline(this : IHTMLRuleStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_underline.call(this, p)
  end
  def put_text_decoration_overline(this : IHTMLRuleStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_overline.call(this, v)
  end
  def get_text_decoration_overline(this : IHTMLRuleStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_overline.call(this, p)
  end
  def put_text_decoration_line_through(this : IHTMLRuleStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_line_through.call(this, v)
  end
  def get_text_decoration_line_through(this : IHTMLRuleStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_line_through.call(this, p)
  end
  def put_text_decoration_blink(this : IHTMLRuleStyle*, v : Int16) : HRESULT
    @lpVtbl.value.put_text_decoration_blink.call(this, v)
  end
  def get_text_decoration_blink(this : IHTMLRuleStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_text_decoration_blink.call(this, p)
  end
  def put_vertical_align(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_vertical_align.call(this, v)
  end
  def get_vertical_align(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_vertical_align.call(this, p)
  end
  def put_text_transform(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_transform.call(this, v)
  end
  def get_text_transform(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_transform.call(this, p)
  end
  def put_text_align(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align.call(this, v)
  end
  def get_text_align(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align.call(this, p)
  end
  def put_text_indent(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_indent.call(this, v)
  end
  def get_text_indent(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_indent.call(this, p)
  end
  def put_line_height(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_line_height.call(this, v)
  end
  def get_line_height(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_line_height.call(this, p)
  end
  def put_margin_top(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_right(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_bottom(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def put_margin_left(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_margin.call(this, v)
  end
  def get_margin(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_margin.call(this, p)
  end
  def put_padding_top(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_top.call(this, v)
  end
  def get_padding_top(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_top.call(this, p)
  end
  def put_padding_right(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_right.call(this, v)
  end
  def get_padding_right(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_right.call(this, p)
  end
  def put_padding_bottom(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_bottom.call(this, v)
  end
  def get_padding_bottom(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_bottom.call(this, p)
  end
  def put_padding_left(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_padding_left.call(this, v)
  end
  def get_padding_left(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_left.call(this, p)
  end
  def put_padding(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_padding.call(this, v)
  end
  def get_padding(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_padding.call(this, p)
  end
  def put_border(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_border_top(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top.call(this, v)
  end
  def get_border_top(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top.call(this, p)
  end
  def put_border_right(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right.call(this, v)
  end
  def get_border_right(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right.call(this, p)
  end
  def put_border_bottom(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom.call(this, v)
  end
  def get_border_bottom(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom.call(this, p)
  end
  def put_border_left(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left.call(this, v)
  end
  def get_border_left(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left.call(this, p)
  end
  def put_border_color(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_top_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_color.call(this, v)
  end
  def get_border_top_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_color.call(this, p)
  end
  def put_border_right_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_color.call(this, v)
  end
  def get_border_right_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_color.call(this, p)
  end
  def put_border_bottom_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_color.call(this, v)
  end
  def get_border_bottom_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_color.call(this, p)
  end
  def put_border_left_color(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_color.call(this, v)
  end
  def get_border_left_color(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_color.call(this, p)
  end
  def put_border_width(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_width.call(this, v)
  end
  def get_border_width(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_width.call(this, p)
  end
  def put_border_top_width(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_top_width.call(this, v)
  end
  def get_border_top_width(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_width.call(this, p)
  end
  def put_border_right_width(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_right_width.call(this, v)
  end
  def get_border_right_width(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_width.call(this, p)
  end
  def put_border_bottom_width(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_bottom_width.call(this, v)
  end
  def get_border_bottom_width(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_width.call(this, p)
  end
  def put_border_left_width(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_left_width.call(this, v)
  end
  def get_border_left_width(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_width.call(this, p)
  end
  def put_border_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_style.call(this, v)
  end
  def get_border_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_style.call(this, p)
  end
  def put_border_top_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_top_style.call(this, v)
  end
  def get_border_top_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_style.call(this, p)
  end
  def put_border_right_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_right_style.call(this, v)
  end
  def get_border_right_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right_style.call(this, p)
  end
  def put_border_bottom_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_bottom_style.call(this, v)
  end
  def get_border_bottom_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_style.call(this, p)
  end
  def put_border_left_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_left_style.call(this, v)
  end
  def get_border_left_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left_style.call(this, p)
  end
  def put_width(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_style_float(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_style_float.call(this, v)
  end
  def get_style_float(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_style_float.call(this, p)
  end
  def put_clear(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clear.call(this, v)
  end
  def get_clear(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
  def put_display(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_display.call(this, v)
  end
  def get_display(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_display.call(this, p)
  end
  def put_visibility(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_visibility.call(this, v)
  end
  def get_visibility(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_visibility.call(this, p)
  end
  def put_list_style_type(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_type.call(this, v)
  end
  def get_list_style_type(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_type.call(this, p)
  end
  def put_list_style_position(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_position.call(this, v)
  end
  def get_list_style_position(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_position.call(this, p)
  end
  def put_list_style_image(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style_image.call(this, v)
  end
  def get_list_style_image(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_image.call(this, p)
  end
  def put_list_style(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_list_style.call(this, v)
  end
  def get_list_style(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style.call(this, p)
  end
  def put_white_space(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_white_space.call(this, v)
  end
  def get_white_space(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_white_space.call(this, p)
  end
  def put_top(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_top.call(this, v)
  end
  def get_top(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def put_left(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_left.call(this, v)
  end
  def get_left(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_left.call(this, p)
  end
  def get_position(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def put_z_index(this : IHTMLRuleStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_z_index.call(this, v)
  end
  def get_z_index(this : IHTMLRuleStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_z_index.call(this, p)
  end
  def put_overflow(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow.call(this, v)
  end
  def get_overflow(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow.call(this, p)
  end
  def put_page_break_before(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_before.call(this, v)
  end
  def get_page_break_before(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_before.call(this, p)
  end
  def put_page_break_after(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_after.call(this, v)
  end
  def get_page_break_after(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_after.call(this, p)
  end
  def put_css_text(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_text.call(this, v)
  end
  def get_css_text(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_text.call(this, p)
  end
  def put_cursor(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cursor.call(this, v)
  end
  def get_cursor(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cursor.call(this, p)
  end
  def put_clip(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clip.call(this, v)
  end
  def get_clip(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clip.call(this, p)
  end
  def put_filter(this : IHTMLRuleStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_filter.call(this, v)
  end
  def get_filter(this : IHTMLRuleStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def set_attribute(this : IHTMLRuleStyle*, strattributename : UInt8*, attributevalue : VARIANT, lflags : Int32) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, attributevalue, lflags)
  end
  def get_attribute(this : IHTMLRuleStyle*, strattributename : UInt8*, lflags : Int32, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, lflags, attributevalue)
  end
  def remove_attribute(this : IHTMLRuleStyle*, strattributename : UInt8*, lflags : Int32, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename, lflags, pfsuccess)
  end
end
struct LibWin32::IHTMLRuleStyle2
  def query_interface(this : IHTMLRuleStyle2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_table_layout(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_table_layout.call(this, v)
  end
  def get_table_layout(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_table_layout.call(this, p)
  end
  def put_border_collapse(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_collapse.call(this, v)
  end
  def get_border_collapse(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_collapse.call(this, p)
  end
  def put_direction(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_direction.call(this, v)
  end
  def get_direction(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def put_behavior(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_behavior.call(this, v)
  end
  def get_behavior(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_behavior.call(this, p)
  end
  def put_position(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_position.call(this, v)
  end
  def get_position(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def put_unicode_bidi(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_unicode_bidi.call(this, v)
  end
  def get_unicode_bidi(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unicode_bidi.call(this, p)
  end
  def put_bottom(this : IHTMLRuleStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bottom.call(this, v)
  end
  def get_bottom(this : IHTMLRuleStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bottom.call(this, p)
  end
  def put_right(this : IHTMLRuleStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_right.call(this, v)
  end
  def get_right(this : IHTMLRuleStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_right.call(this, p)
  end
  def put_pixel_bottom(this : IHTMLRuleStyle2*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_bottom.call(this, v)
  end
  def get_pixel_bottom(this : IHTMLRuleStyle2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_bottom.call(this, p)
  end
  def put_pixel_right(this : IHTMLRuleStyle2*, v : Int32) : HRESULT
    @lpVtbl.value.put_pixel_right.call(this, v)
  end
  def get_pixel_right(this : IHTMLRuleStyle2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_right.call(this, p)
  end
  def put_pos_bottom(this : IHTMLRuleStyle2*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_bottom.call(this, v)
  end
  def get_pos_bottom(this : IHTMLRuleStyle2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_bottom.call(this, p)
  end
  def put_pos_right(this : IHTMLRuleStyle2*, v : Float32) : HRESULT
    @lpVtbl.value.put_pos_right.call(this, v)
  end
  def get_pos_right(this : IHTMLRuleStyle2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pos_right.call(this, p)
  end
  def put_ime_mode(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ime_mode.call(this, v)
  end
  def get_ime_mode(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ime_mode.call(this, p)
  end
  def put_ruby_align(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_align.call(this, v)
  end
  def get_ruby_align(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_align.call(this, p)
  end
  def put_ruby_position(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_position.call(this, v)
  end
  def get_ruby_position(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_position.call(this, p)
  end
  def put_ruby_overhang(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ruby_overhang.call(this, v)
  end
  def get_ruby_overhang(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_overhang.call(this, p)
  end
  def put_layout_grid_char(this : IHTMLRuleStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_char.call(this, v)
  end
  def get_layout_grid_char(this : IHTMLRuleStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_char.call(this, p)
  end
  def put_layout_grid_line(this : IHTMLRuleStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_layout_grid_line.call(this, v)
  end
  def get_layout_grid_line(this : IHTMLRuleStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_line.call(this, p)
  end
  def put_layout_grid_mode(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_mode.call(this, v)
  end
  def get_layout_grid_mode(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_mode.call(this, p)
  end
  def put_layout_grid_type(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid_type.call(this, v)
  end
  def get_layout_grid_type(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_type.call(this, p)
  end
  def put_layout_grid(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_grid.call(this, v)
  end
  def get_layout_grid(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid.call(this, p)
  end
  def put_text_autospace(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_autospace.call(this, v)
  end
  def get_text_autospace(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_autospace.call(this, p)
  end
  def put_word_break(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_break.call(this, v)
  end
  def get_word_break(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_break.call(this, p)
  end
  def put_line_break(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_line_break.call(this, v)
  end
  def get_line_break(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_break.call(this, p)
  end
  def put_text_justify(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify.call(this, v)
  end
  def get_text_justify(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify.call(this, p)
  end
  def put_text_justify_trim(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_justify_trim.call(this, v)
  end
  def get_text_justify_trim(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify_trim.call(this, p)
  end
  def put_text_kashida(this : IHTMLRuleStyle2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida.call(this, v)
  end
  def get_text_kashida(this : IHTMLRuleStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida.call(this, p)
  end
  def put_overflow_x(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_x.call(this, v)
  end
  def get_overflow_x(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_x.call(this, p)
  end
  def put_overflow_y(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_overflow_y.call(this, v)
  end
  def get_overflow_y(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_y.call(this, p)
  end
  def put_accelerator(this : IHTMLRuleStyle2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_accelerator.call(this, v)
  end
  def get_accelerator(this : IHTMLRuleStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accelerator.call(this, p)
  end
end
struct LibWin32::IHTMLRuleStyle3
  def query_interface(this : IHTMLRuleStyle3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_layout_flow(this : IHTMLRuleStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_layout_flow.call(this, v)
  end
  def get_layout_flow(this : IHTMLRuleStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_flow.call(this, p)
  end
  def put_zoom(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_zoom.call(this, v)
  end
  def get_zoom(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_zoom.call(this, p)
  end
  def put_word_wrap(this : IHTMLRuleStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_word_wrap.call(this, v)
  end
  def get_word_wrap(this : IHTMLRuleStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_wrap.call(this, p)
  end
  def put_text_underline_position(this : IHTMLRuleStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_underline_position.call(this, v)
  end
  def get_text_underline_position(this : IHTMLRuleStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_underline_position.call(this, p)
  end
  def put_scrollbar_base_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_base_color.call(this, v)
  end
  def get_scrollbar_base_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_base_color.call(this, p)
  end
  def put_scrollbar_face_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_face_color.call(this, v)
  end
  def get_scrollbar_face_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_face_color.call(this, p)
  end
  def put_scrollbar3d_light_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar3d_light_color.call(this, v)
  end
  def get_scrollbar3d_light_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar3d_light_color.call(this, p)
  end
  def put_scrollbar_shadow_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_shadow_color.call(this, v)
  end
  def get_scrollbar_shadow_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_shadow_color.call(this, p)
  end
  def put_scrollbar_highlight_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_highlight_color.call(this, v)
  end
  def get_scrollbar_highlight_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_highlight_color.call(this, p)
  end
  def put_scrollbar_dark_shadow_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_dark_shadow_color.call(this, v)
  end
  def get_scrollbar_dark_shadow_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_dark_shadow_color.call(this, p)
  end
  def put_scrollbar_arrow_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_arrow_color.call(this, v)
  end
  def get_scrollbar_arrow_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_arrow_color.call(this, p)
  end
  def put_scrollbar_track_color(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_scrollbar_track_color.call(this, v)
  end
  def get_scrollbar_track_color(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_track_color.call(this, p)
  end
  def put_writing_mode(this : IHTMLRuleStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_writing_mode.call(this, v)
  end
  def get_writing_mode(this : IHTMLRuleStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_writing_mode.call(this, p)
  end
  def put_text_align_last(this : IHTMLRuleStyle3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align_last.call(this, v)
  end
  def get_text_align_last(this : IHTMLRuleStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align_last.call(this, p)
  end
  def put_text_kashida_space(this : IHTMLRuleStyle3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_kashida_space.call(this, v)
  end
  def get_text_kashida_space(this : IHTMLRuleStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida_space.call(this, p)
  end
end
struct LibWin32::IHTMLRuleStyle4
  def query_interface(this : IHTMLRuleStyle4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_text_overflow(this : IHTMLRuleStyle4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_overflow.call(this, v)
  end
  def get_text_overflow(this : IHTMLRuleStyle4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_overflow.call(this, p)
  end
  def put_min_height(this : IHTMLRuleStyle4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_height.call(this, v)
  end
  def get_min_height(this : IHTMLRuleStyle4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_height.call(this, p)
  end
end
struct LibWin32::IHTMLRuleStyle5
  def query_interface(this : IHTMLRuleStyle5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ms_interpolation_mode(this : IHTMLRuleStyle5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_interpolation_mode.call(this, v)
  end
  def get_ms_interpolation_mode(this : IHTMLRuleStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_interpolation_mode.call(this, p)
  end
  def put_max_height(this : IHTMLRuleStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_height.call(this, v)
  end
  def get_max_height(this : IHTMLRuleStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_height.call(this, p)
  end
  def put_min_width(this : IHTMLRuleStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_min_width.call(this, v)
  end
  def get_min_width(this : IHTMLRuleStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_width.call(this, p)
  end
  def put_max_width(this : IHTMLRuleStyle5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_max_width.call(this, v)
  end
  def get_max_width(this : IHTMLRuleStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_width.call(this, p)
  end
end
struct LibWin32::IHTMLRuleStyle6
  def query_interface(this : IHTMLRuleStyle6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRuleStyle6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRuleStyle6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRuleStyle6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRuleStyle6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRuleStyle6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRuleStyle6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_content(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content.call(this, v)
  end
  def get_content(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content.call(this, p)
  end
  def put_caption_side(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_caption_side.call(this, v)
  end
  def get_caption_side(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_caption_side.call(this, p)
  end
  def put_counter_increment(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_increment.call(this, v)
  end
  def get_counter_increment(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_increment.call(this, p)
  end
  def put_counter_reset(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_counter_reset.call(this, v)
  end
  def get_counter_reset(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_counter_reset.call(this, p)
  end
  def put_outline(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline.call(this, v)
  end
  def get_outline(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline.call(this, p)
  end
  def put_outline_width(this : IHTMLRuleStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_width.call(this, v)
  end
  def get_outline_width(this : IHTMLRuleStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_width.call(this, p)
  end
  def put_outline_style(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outline_style.call(this, v)
  end
  def get_outline_style(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline_style.call(this, p)
  end
  def put_outline_color(this : IHTMLRuleStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_outline_color.call(this, v)
  end
  def get_outline_color(this : IHTMLRuleStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_color.call(this, p)
  end
  def put_box_sizing(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_box_sizing.call(this, v)
  end
  def get_box_sizing(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_box_sizing.call(this, p)
  end
  def put_border_spacing(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_spacing.call(this, v)
  end
  def get_border_spacing(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_spacing.call(this, p)
  end
  def put_orphans(this : IHTMLRuleStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_orphans.call(this, v)
  end
  def get_orphans(this : IHTMLRuleStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_orphans.call(this, p)
  end
  def put_widows(this : IHTMLRuleStyle6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_widows.call(this, v)
  end
  def get_widows(this : IHTMLRuleStyle6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_widows.call(this, p)
  end
  def put_page_break_inside(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_page_break_inside.call(this, v)
  end
  def get_page_break_inside(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_inside.call(this, p)
  end
  def put_empty_cells(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_empty_cells.call(this, v)
  end
  def get_empty_cells(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_empty_cells.call(this, p)
  end
  def put_ms_block_progression(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ms_block_progression.call(this, v)
  end
  def get_ms_block_progression(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_block_progression.call(this, p)
  end
  def put_quotes(this : IHTMLRuleStyle6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_quotes.call(this, v)
  end
  def get_quotes(this : IHTMLRuleStyle6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_quotes.call(this, p)
  end
end
struct LibWin32::DispHTMLStyle
  def query_interface(this : DispHTMLStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLRuleStyle
  def query_interface(this : DispHTMLRuleStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLRuleStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLRuleStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLRuleStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLRuleStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLRuleStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLRuleStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetRulesCollection
  def query_interface(this : IHTMLStyleSheetRulesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRulesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRulesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRulesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRulesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRulesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRulesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLStyleSheetRulesCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLStyleSheetRulesCollection*, index : Int32, pphtmlstylesheetrule : IHTMLStyleSheetRule*) : HRESULT
    @lpVtbl.value.item.call(this, index, pphtmlstylesheetrule)
  end
end
struct LibWin32::IHTMLStyleSheet
  def query_interface(this : IHTMLStyleSheet*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheet*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheet*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheet*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheet*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheet*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheet*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_title(this : IHTMLStyleSheet*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, v)
  end
  def get_title(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def get_parent_style_sheet(this : IHTMLStyleSheet*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_parent_style_sheet.call(this, p)
  end
  def get_owning_element(this : IHTMLStyleSheet*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_owning_element.call(this, p)
  end
  def put_disabled(this : IHTMLStyleSheet*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLStyleSheet*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_read_only(this : IHTMLStyleSheet*, p : Int16*) : HRESULT
    @lpVtbl.value.get_read_only.call(this, p)
  end
  def get_imports(this : IHTMLStyleSheet*, p : IHTMLStyleSheetsCollection*) : HRESULT
    @lpVtbl.value.get_imports.call(this, p)
  end
  def put_href(this : IHTMLStyleSheet*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def get_type(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_id(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_id.call(this, p)
  end
  def add_import(this : IHTMLStyleSheet*, bstrurl : UInt8*, lindex : Int32, plindex : Int32*) : HRESULT
    @lpVtbl.value.add_import.call(this, bstrurl, lindex, plindex)
  end
  def add_rule(this : IHTMLStyleSheet*, bstrselector : UInt8*, bstrstyle : UInt8*, lindex : Int32, plnewindex : Int32*) : HRESULT
    @lpVtbl.value.add_rule.call(this, bstrselector, bstrstyle, lindex, plnewindex)
  end
  def remove_import(this : IHTMLStyleSheet*, lindex : Int32) : HRESULT
    @lpVtbl.value.remove_import.call(this, lindex)
  end
  def remove_rule(this : IHTMLStyleSheet*, lindex : Int32) : HRESULT
    @lpVtbl.value.remove_rule.call(this, lindex)
  end
  def put_media(this : IHTMLStyleSheet*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
  def put_css_text(this : IHTMLStyleSheet*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_text.call(this, v)
  end
  def get_css_text(this : IHTMLStyleSheet*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_text.call(this, p)
  end
  def get_rules(this : IHTMLStyleSheet*, p : IHTMLStyleSheetRulesCollection*) : HRESULT
    @lpVtbl.value.get_rules.call(this, p)
  end
end
struct LibWin32::IHTMLCSSRule
  def query_interface(this : IHTMLCSSRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLCSSRule*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_css_text(this : IHTMLCSSRule*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_css_text.call(this, v)
  end
  def get_css_text(this : IHTMLCSSRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_css_text.call(this, p)
  end
  def get_parent_rule(this : IHTMLCSSRule*, p : IHTMLCSSRule*) : HRESULT
    @lpVtbl.value.get_parent_rule.call(this, p)
  end
  def get_parent_style_sheet(this : IHTMLCSSRule*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_parent_style_sheet.call(this, p)
  end
end
struct LibWin32::IHTMLCSSImportRule
  def query_interface(this : IHTMLCSSImportRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSImportRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSImportRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSImportRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSImportRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSImportRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSImportRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_href(this : IHTMLCSSImportRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_media(this : IHTMLCSSImportRule*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLCSSImportRule*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
  def get_style_sheet(this : IHTMLCSSImportRule*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_style_sheet.call(this, p)
  end
end
struct LibWin32::IHTMLCSSMediaRule
  def query_interface(this : IHTMLCSSMediaRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSMediaRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSMediaRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSMediaRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSMediaRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSMediaRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSMediaRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_media(this : IHTMLCSSMediaRule*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLCSSMediaRule*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
  def get_css_rules(this : IHTMLCSSMediaRule*, p : IHTMLStyleSheetRulesCollection*) : HRESULT
    @lpVtbl.value.get_css_rules.call(this, p)
  end
  def insert_rule(this : IHTMLCSSMediaRule*, bstrrule : UInt8*, lindex : Int32, plnewindex : Int32*) : HRESULT
    @lpVtbl.value.insert_rule.call(this, bstrrule, lindex, plnewindex)
  end
  def delete_rule(this : IHTMLCSSMediaRule*, lindex : Int32) : HRESULT
    @lpVtbl.value.delete_rule.call(this, lindex)
  end
end
struct LibWin32::IHTMLCSSMediaList
  def query_interface(this : IHTMLCSSMediaList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSMediaList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSMediaList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSMediaList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSMediaList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSMediaList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSMediaList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_media_text(this : IHTMLCSSMediaList*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media_text.call(this, v)
  end
  def get_media_text(this : IHTMLCSSMediaList*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media_text.call(this, p)
  end
  def get_length(this : IHTMLCSSMediaList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLCSSMediaList*, index : Int32, pbstrmedium : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, index, pbstrmedium)
  end
  def append_medium(this : IHTMLCSSMediaList*, bstrmedium : UInt8*) : HRESULT
    @lpVtbl.value.append_medium.call(this, bstrmedium)
  end
  def delete_medium(this : IHTMLCSSMediaList*, bstrmedium : UInt8*) : HRESULT
    @lpVtbl.value.delete_medium.call(this, bstrmedium)
  end
end
struct LibWin32::IHTMLCSSNamespaceRule
  def query_interface(this : IHTMLCSSNamespaceRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCSSNamespaceRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCSSNamespaceRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCSSNamespaceRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCSSNamespaceRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCSSNamespaceRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCSSNamespaceRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_namespace_uri(this : IHTMLCSSNamespaceRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_namespace_uri.call(this, p)
  end
  def get_prefix(this : IHTMLCSSNamespaceRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_prefix.call(this, p)
  end
end
struct LibWin32::IHTMLMSCSSKeyframeRule
  def query_interface(this : IHTMLMSCSSKeyframeRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMSCSSKeyframeRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMSCSSKeyframeRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMSCSSKeyframeRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMSCSSKeyframeRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMSCSSKeyframeRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMSCSSKeyframeRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_key_text(this : IHTMLMSCSSKeyframeRule*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_key_text.call(this, v)
  end
  def get_key_text(this : IHTMLMSCSSKeyframeRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_key_text.call(this, p)
  end
  def get_style(this : IHTMLMSCSSKeyframeRule*, p : IHTMLRuleStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
end
struct LibWin32::IHTMLMSCSSKeyframesRule
  def query_interface(this : IHTMLMSCSSKeyframesRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMSCSSKeyframesRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMSCSSKeyframesRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMSCSSKeyframesRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMSCSSKeyframesRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMSCSSKeyframesRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMSCSSKeyframesRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_name(this : IHTMLMSCSSKeyframesRule*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLMSCSSKeyframesRule*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def get_css_rules(this : IHTMLMSCSSKeyframesRule*, p : IHTMLStyleSheetRulesCollection*) : HRESULT
    @lpVtbl.value.get_css_rules.call(this, p)
  end
  def append_rule(this : IHTMLMSCSSKeyframesRule*, bstrrule : UInt8*) : HRESULT
    @lpVtbl.value.append_rule.call(this, bstrrule)
  end
  def delete_rule(this : IHTMLMSCSSKeyframesRule*, bstrkey : UInt8*) : HRESULT
    @lpVtbl.value.delete_rule.call(this, bstrkey)
  end
  def find_rule(this : IHTMLMSCSSKeyframesRule*, bstrkey : UInt8*, ppmskeyframerule : IHTMLMSCSSKeyframeRule*) : HRESULT
    @lpVtbl.value.find_rule.call(this, bstrkey, ppmskeyframerule)
  end
end
struct LibWin32::DispHTMLCSSRule
  def query_interface(this : DispHTMLCSSRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLCSSImportRule
  def query_interface(this : DispHTMLCSSImportRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSImportRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSImportRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSImportRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSImportRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSImportRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSImportRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLCSSMediaRule
  def query_interface(this : DispHTMLCSSMediaRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSMediaRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSMediaRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSMediaRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSMediaRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSMediaRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSMediaRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLCSSMediaList
  def query_interface(this : DispHTMLCSSMediaList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSMediaList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSMediaList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSMediaList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSMediaList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSMediaList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSMediaList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLCSSNamespaceRule
  def query_interface(this : DispHTMLCSSNamespaceRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCSSNamespaceRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCSSNamespaceRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCSSNamespaceRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCSSNamespaceRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCSSNamespaceRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCSSNamespaceRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLMSCSSKeyframeRule
  def query_interface(this : DispHTMLMSCSSKeyframeRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMSCSSKeyframeRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMSCSSKeyframeRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMSCSSKeyframeRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMSCSSKeyframeRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMSCSSKeyframeRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMSCSSKeyframeRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLMSCSSKeyframesRule
  def query_interface(this : DispHTMLMSCSSKeyframesRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMSCSSKeyframesRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMSCSSKeyframesRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMSCSSKeyframesRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMSCSSKeyframesRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMSCSSKeyframesRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMSCSSKeyframesRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLRenderStyle
  def query_interface(this : IHTMLRenderStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRenderStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRenderStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRenderStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRenderStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRenderStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRenderStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_text_line_through_style(this : IHTMLRenderStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_line_through_style.call(this, v)
  end
  def get_text_line_through_style(this : IHTMLRenderStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_line_through_style.call(this, p)
  end
  def put_text_underline_style(this : IHTMLRenderStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_underline_style.call(this, v)
  end
  def get_text_underline_style(this : IHTMLRenderStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_underline_style.call(this, p)
  end
  def put_text_effect(this : IHTMLRenderStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_effect.call(this, v)
  end
  def get_text_effect(this : IHTMLRenderStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_effect.call(this, p)
  end
  def put_text_color(this : IHTMLRenderStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_color.call(this, v)
  end
  def get_text_color(this : IHTMLRenderStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_color.call(this, p)
  end
  def put_text_background_color(this : IHTMLRenderStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_background_color.call(this, v)
  end
  def get_text_background_color(this : IHTMLRenderStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_background_color.call(this, p)
  end
  def put_text_decoration_color(this : IHTMLRenderStyle*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_decoration_color.call(this, v)
  end
  def get_text_decoration_color(this : IHTMLRenderStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_decoration_color.call(this, p)
  end
  def put_rendering_priority(this : IHTMLRenderStyle*, v : Int32) : HRESULT
    @lpVtbl.value.put_rendering_priority.call(this, v)
  end
  def get_rendering_priority(this : IHTMLRenderStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_rendering_priority.call(this, p)
  end
  def put_default_text_selection(this : IHTMLRenderStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_text_selection.call(this, v)
  end
  def get_default_text_selection(this : IHTMLRenderStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_text_selection.call(this, p)
  end
  def put_text_decoration(this : IHTMLRenderStyle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_decoration.call(this, v)
  end
  def get_text_decoration(this : IHTMLRenderStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, p)
  end
end
struct LibWin32::DispHTMLRenderStyle
  def query_interface(this : DispHTMLRenderStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLRenderStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLRenderStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLRenderStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLRenderStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLRenderStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLRenderStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLCurrentStyle
  def query_interface(this : IHTMLCurrentStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCurrentStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCurrentStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCurrentStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCurrentStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCurrentStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCurrentStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_position(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def get_style_float(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_style_float.call(this, p)
  end
  def get_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def get_background_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, p)
  end
  def get_font_family(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_family.call(this, p)
  end
  def get_font_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_style.call(this, p)
  end
  def get_font_variant(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font_variant.call(this, p)
  end
  def get_font_weight(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_weight.call(this, p)
  end
  def get_font_size(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, p)
  end
  def get_background_image(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_image.call(this, p)
  end
  def get_background_position_x(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_x.call(this, p)
  end
  def get_background_position_y(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_background_position_y.call(this, p)
  end
  def get_background_repeat(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_repeat.call(this, p)
  end
  def get_border_left_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_color.call(this, p)
  end
  def get_border_top_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_color.call(this, p)
  end
  def get_border_right_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_color.call(this, p)
  end
  def get_border_bottom_color(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_color.call(this, p)
  end
  def get_border_top_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_top_style.call(this, p)
  end
  def get_border_right_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_right_style.call(this, p)
  end
  def get_border_bottom_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_bottom_style.call(this, p)
  end
  def get_border_left_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_left_style.call(this, p)
  end
  def get_border_top_width(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_top_width.call(this, p)
  end
  def get_border_right_width(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_right_width.call(this, p)
  end
  def get_border_bottom_width(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_bottom_width.call(this, p)
  end
  def get_border_left_width(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_left_width.call(this, p)
  end
  def get_left(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_left.call(this, p)
  end
  def get_top(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def get_width(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def get_height(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_padding_left(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_left.call(this, p)
  end
  def get_padding_top(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_top.call(this, p)
  end
  def get_padding_right(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_right.call(this, p)
  end
  def get_padding_bottom(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_padding_bottom.call(this, p)
  end
  def get_text_align(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align.call(this, p)
  end
  def get_text_decoration(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_decoration.call(this, p)
  end
  def get_display(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_display.call(this, p)
  end
  def get_visibility(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_visibility.call(this, p)
  end
  def get_z_index(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_z_index.call(this, p)
  end
  def get_letter_spacing(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_letter_spacing.call(this, p)
  end
  def get_line_height(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_line_height.call(this, p)
  end
  def get_text_indent(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_indent.call(this, p)
  end
  def get_vertical_align(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_vertical_align.call(this, p)
  end
  def get_background_attachment(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background_attachment.call(this, p)
  end
  def get_margin_top(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def get_margin_right(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def get_margin_bottom(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def get_margin_left(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def get_clear(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
  def get_list_style_type(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_type.call(this, p)
  end
  def get_list_style_position(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_position.call(this, p)
  end
  def get_list_style_image(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_list_style_image.call(this, p)
  end
  def get_clip_top(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_top.call(this, p)
  end
  def get_clip_right(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_right.call(this, p)
  end
  def get_clip_bottom(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_bottom.call(this, p)
  end
  def get_clip_left(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_clip_left.call(this, p)
  end
  def get_overflow(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow.call(this, p)
  end
  def get_page_break_before(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_before.call(this, p)
  end
  def get_page_break_after(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_after.call(this, p)
  end
  def get_cursor(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cursor.call(this, p)
  end
  def get_table_layout(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_table_layout.call(this, p)
  end
  def get_border_collapse(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_collapse.call(this, p)
  end
  def get_direction(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def get_behavior(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_behavior.call(this, p)
  end
  def get_attribute(this : IHTMLCurrentStyle*, strattributename : UInt8*, lflags : Int32, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, lflags, attributevalue)
  end
  def get_unicode_bidi(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unicode_bidi.call(this, p)
  end
  def get_right(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_right.call(this, p)
  end
  def get_bottom(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bottom.call(this, p)
  end
  def get_ime_mode(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ime_mode.call(this, p)
  end
  def get_ruby_align(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_align.call(this, p)
  end
  def get_ruby_position(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_position.call(this, p)
  end
  def get_ruby_overhang(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ruby_overhang.call(this, p)
  end
  def get_text_autospace(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_autospace.call(this, p)
  end
  def get_line_break(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_break.call(this, p)
  end
  def get_word_break(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_break.call(this, p)
  end
  def get_text_justify(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify.call(this, p)
  end
  def get_text_justify_trim(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_justify_trim.call(this, p)
  end
  def get_text_kashida(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida.call(this, p)
  end
  def get_block_direction(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_block_direction.call(this, p)
  end
  def get_layout_grid_char(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_char.call(this, p)
  end
  def get_layout_grid_line(this : IHTMLCurrentStyle*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_layout_grid_line.call(this, p)
  end
  def get_layout_grid_mode(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_mode.call(this, p)
  end
  def get_layout_grid_type(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_grid_type.call(this, p)
  end
  def get_border_style(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_style.call(this, p)
  end
  def get_border_color(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def get_border_width(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_width.call(this, p)
  end
  def get_padding(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_padding.call(this, p)
  end
  def get_margin(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_margin.call(this, p)
  end
  def get_accelerator(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accelerator.call(this, p)
  end
  def get_overflow_x(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_x.call(this, p)
  end
  def get_overflow_y(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_overflow_y.call(this, p)
  end
  def get_text_transform(this : IHTMLCurrentStyle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_transform.call(this, p)
  end
end
struct LibWin32::IHTMLCurrentStyle2
  def query_interface(this : IHTMLCurrentStyle2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCurrentStyle2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCurrentStyle2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCurrentStyle2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCurrentStyle2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCurrentStyle2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCurrentStyle2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_layout_flow(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_layout_flow.call(this, p)
  end
  def get_word_wrap(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_word_wrap.call(this, p)
  end
  def get_text_underline_position(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_underline_position.call(this, p)
  end
  def get_has_layout(this : IHTMLCurrentStyle2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_has_layout.call(this, p)
  end
  def get_scrollbar_base_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_base_color.call(this, p)
  end
  def get_scrollbar_face_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_face_color.call(this, p)
  end
  def get_scrollbar3d_light_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar3d_light_color.call(this, p)
  end
  def get_scrollbar_shadow_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_shadow_color.call(this, p)
  end
  def get_scrollbar_highlight_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_highlight_color.call(this, p)
  end
  def get_scrollbar_dark_shadow_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_dark_shadow_color.call(this, p)
  end
  def get_scrollbar_arrow_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_arrow_color.call(this, p)
  end
  def get_scrollbar_track_color(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_scrollbar_track_color.call(this, p)
  end
  def get_writing_mode(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_writing_mode.call(this, p)
  end
  def get_zoom(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_zoom.call(this, p)
  end
  def get_filter(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def get_text_align_last(this : IHTMLCurrentStyle2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align_last.call(this, p)
  end
  def get_text_kashida_space(this : IHTMLCurrentStyle2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_kashida_space.call(this, p)
  end
  def get_is_block(this : IHTMLCurrentStyle2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_block.call(this, p)
  end
end
struct LibWin32::IHTMLCurrentStyle3
  def query_interface(this : IHTMLCurrentStyle3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCurrentStyle3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCurrentStyle3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCurrentStyle3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCurrentStyle3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCurrentStyle3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCurrentStyle3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_text_overflow(this : IHTMLCurrentStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_overflow.call(this, p)
  end
  def get_min_height(this : IHTMLCurrentStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_height.call(this, p)
  end
  def get_word_spacing(this : IHTMLCurrentStyle3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_word_spacing.call(this, p)
  end
  def get_white_space(this : IHTMLCurrentStyle3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_white_space.call(this, p)
  end
end
struct LibWin32::IHTMLCurrentStyle4
  def query_interface(this : IHTMLCurrentStyle4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCurrentStyle4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCurrentStyle4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCurrentStyle4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCurrentStyle4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCurrentStyle4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCurrentStyle4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ms_interpolation_mode(this : IHTMLCurrentStyle4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_interpolation_mode.call(this, p)
  end
  def get_max_height(this : IHTMLCurrentStyle4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_height.call(this, p)
  end
  def get_min_width(this : IHTMLCurrentStyle4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_min_width.call(this, p)
  end
  def get_max_width(this : IHTMLCurrentStyle4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_max_width.call(this, p)
  end
end
struct LibWin32::IHTMLCurrentStyle5
  def query_interface(this : IHTMLCurrentStyle5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCurrentStyle5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCurrentStyle5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCurrentStyle5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCurrentStyle5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCurrentStyle5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCurrentStyle5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_caption_side(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_caption_side.call(this, p)
  end
  def get_outline(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline.call(this, p)
  end
  def get_outline_width(this : IHTMLCurrentStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_width.call(this, p)
  end
  def get_outline_style(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outline_style.call(this, p)
  end
  def get_outline_color(this : IHTMLCurrentStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_outline_color.call(this, p)
  end
  def get_box_sizing(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_box_sizing.call(this, p)
  end
  def get_border_spacing(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_spacing.call(this, p)
  end
  def get_orphans(this : IHTMLCurrentStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_orphans.call(this, p)
  end
  def get_widows(this : IHTMLCurrentStyle5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_widows.call(this, p)
  end
  def get_page_break_inside(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_page_break_inside.call(this, p)
  end
  def get_empty_cells(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_empty_cells.call(this, p)
  end
  def get_ms_block_progression(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_block_progression.call(this, p)
  end
  def get_quotes(this : IHTMLCurrentStyle5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_quotes.call(this, p)
  end
end
struct LibWin32::DispHTMLCurrentStyle
  def query_interface(this : DispHTMLCurrentStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCurrentStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCurrentStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCurrentStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCurrentStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCurrentStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCurrentStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLElement
  def query_interface(this : IHTMLElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_attribute(this : IHTMLElement*, strattributename : UInt8*, attributevalue : VARIANT, lflags : Int32) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, attributevalue, lflags)
  end
  def get_attribute(this : IHTMLElement*, strattributename : UInt8*, lflags : Int32, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, lflags, attributevalue)
  end
  def remove_attribute(this : IHTMLElement*, strattributename : UInt8*, lflags : Int32, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename, lflags, pfsuccess)
  end
  def put_class_name(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_class_name.call(this, v)
  end
  def get_class_name(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_class_name.call(this, p)
  end
  def put_id(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_id.call(this, v)
  end
  def get_id(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_id.call(this, p)
  end
  def get_tag_name(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_tag_name.call(this, p)
  end
  def get_parent_element(this : IHTMLElement*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_parent_element.call(this, p)
  end
  def get_style(this : IHTMLElement*, p : IHTMLStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
  def put_onhelp(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhelp.call(this, v)
  end
  def get_onhelp(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhelp.call(this, p)
  end
  def put_onclick(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onclick.call(this, v)
  end
  def get_onclick(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onclick.call(this, p)
  end
  def put_ondblclick(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondblclick.call(this, v)
  end
  def get_ondblclick(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondblclick.call(this, p)
  end
  def put_onkeydown(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeydown.call(this, v)
  end
  def get_onkeydown(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeydown.call(this, p)
  end
  def put_onkeyup(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeyup.call(this, v)
  end
  def get_onkeyup(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeyup.call(this, p)
  end
  def put_onkeypress(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeypress.call(this, v)
  end
  def get_onkeypress(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeypress.call(this, p)
  end
  def put_onmouseout(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseout.call(this, v)
  end
  def get_onmouseout(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseout.call(this, p)
  end
  def put_onmouseover(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseover.call(this, v)
  end
  def get_onmouseover(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseover.call(this, p)
  end
  def put_onmousemove(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousemove.call(this, v)
  end
  def get_onmousemove(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousemove.call(this, p)
  end
  def put_onmousedown(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousedown.call(this, v)
  end
  def get_onmousedown(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousedown.call(this, p)
  end
  def put_onmouseup(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseup.call(this, v)
  end
  def get_onmouseup(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseup.call(this, p)
  end
  def get_document(this : IHTMLElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
  def put_title(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, v)
  end
  def get_title(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def put_language(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_language.call(this, v)
  end
  def get_language(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_language.call(this, p)
  end
  def put_onselectstart(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselectstart.call(this, v)
  end
  def get_onselectstart(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselectstart.call(this, p)
  end
  def scroll_into_view(this : IHTMLElement*, varargstart : VARIANT) : HRESULT
    @lpVtbl.value.scroll_into_view.call(this, varargstart)
  end
  def contains(this : IHTMLElement*, pchild : IHTMLElement, pfresult : Int16*) : HRESULT
    @lpVtbl.value.contains.call(this, pchild, pfresult)
  end
  def get_source_index(this : IHTMLElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_source_index.call(this, p)
  end
  def get_record_number(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_record_number.call(this, p)
  end
  def put_lang(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lang.call(this, v)
  end
  def get_lang(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lang.call(this, p)
  end
  def get_offset_left(this : IHTMLElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_left.call(this, p)
  end
  def get_offset_top(this : IHTMLElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_top.call(this, p)
  end
  def get_offset_width(this : IHTMLElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_width.call(this, p)
  end
  def get_offset_height(this : IHTMLElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_height.call(this, p)
  end
  def get_offset_parent(this : IHTMLElement*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_offset_parent.call(this, p)
  end
  def put_inner_html(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_inner_html.call(this, v)
  end
  def get_inner_html(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_inner_html.call(this, p)
  end
  def put_inner_text(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_inner_text.call(this, v)
  end
  def get_inner_text(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_inner_text.call(this, p)
  end
  def put_outer_html(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outer_html.call(this, v)
  end
  def get_outer_html(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outer_html.call(this, p)
  end
  def put_outer_text(this : IHTMLElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_outer_text.call(this, v)
  end
  def get_outer_text(this : IHTMLElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_outer_text.call(this, p)
  end
  def insert_adjacent_html(this : IHTMLElement*, where : UInt8*, html : UInt8*) : HRESULT
    @lpVtbl.value.insert_adjacent_html.call(this, where, html)
  end
  def insert_adjacent_text(this : IHTMLElement*, where : UInt8*, text : UInt8*) : HRESULT
    @lpVtbl.value.insert_adjacent_text.call(this, where, text)
  end
  def get_parent_text_edit(this : IHTMLElement*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_parent_text_edit.call(this, p)
  end
  def get_is_text_edit(this : IHTMLElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_text_edit.call(this, p)
  end
  def click(this : IHTMLElement*) : HRESULT
    @lpVtbl.value.click.call(this)
  end
  def get_filters(this : IHTMLElement*, p : IHTMLFiltersCollection*) : HRESULT
    @lpVtbl.value.get_filters.call(this, p)
  end
  def put_ondragstart(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragstart.call(this, v)
  end
  def get_ondragstart(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragstart.call(this, p)
  end
  def to_string(this : IHTMLElement*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def put_onbeforeupdate(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeupdate.call(this, v)
  end
  def get_onbeforeupdate(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeupdate.call(this, p)
  end
  def put_onafterupdate(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onafterupdate.call(this, v)
  end
  def get_onafterupdate(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onafterupdate.call(this, p)
  end
  def put_onerrorupdate(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerrorupdate.call(this, v)
  end
  def get_onerrorupdate(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerrorupdate.call(this, p)
  end
  def put_onrowexit(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowexit.call(this, v)
  end
  def get_onrowexit(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowexit.call(this, p)
  end
  def put_onrowenter(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowenter.call(this, v)
  end
  def get_onrowenter(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowenter.call(this, p)
  end
  def put_ondatasetchanged(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondatasetchanged.call(this, v)
  end
  def get_ondatasetchanged(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondatasetchanged.call(this, p)
  end
  def put_ondataavailable(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondataavailable.call(this, v)
  end
  def get_ondataavailable(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondataavailable.call(this, p)
  end
  def put_ondatasetcomplete(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondatasetcomplete.call(this, v)
  end
  def get_ondatasetcomplete(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondatasetcomplete.call(this, p)
  end
  def put_onfilterchange(this : IHTMLElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfilterchange.call(this, v)
  end
  def get_onfilterchange(this : IHTMLElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfilterchange.call(this, p)
  end
  def get_children(this : IHTMLElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_children.call(this, p)
  end
  def get_all(this : IHTMLElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_all.call(this, p)
  end
end
struct LibWin32::IHTMLRect
  def query_interface(this : IHTMLRect*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRect*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRect*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRect*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRect*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRect*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRect*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_left(this : IHTMLRect*, v : Int32) : HRESULT
    @lpVtbl.value.put_left.call(this, v)
  end
  def get_left(this : IHTMLRect*, p : Int32*) : HRESULT
    @lpVtbl.value.get_left.call(this, p)
  end
  def put_top(this : IHTMLRect*, v : Int32) : HRESULT
    @lpVtbl.value.put_top.call(this, v)
  end
  def get_top(this : IHTMLRect*, p : Int32*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def put_right(this : IHTMLRect*, v : Int32) : HRESULT
    @lpVtbl.value.put_right.call(this, v)
  end
  def get_right(this : IHTMLRect*, p : Int32*) : HRESULT
    @lpVtbl.value.get_right.call(this, p)
  end
  def put_bottom(this : IHTMLRect*, v : Int32) : HRESULT
    @lpVtbl.value.put_bottom.call(this, v)
  end
  def get_bottom(this : IHTMLRect*, p : Int32*) : HRESULT
    @lpVtbl.value.get_bottom.call(this, p)
  end
end
struct LibWin32::IHTMLRect2
  def query_interface(this : IHTMLRect2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRect2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRect2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRect2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRect2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRect2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRect2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_width(this : IHTMLRect2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def get_height(this : IHTMLRect2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::IHTMLRectCollection
  def query_interface(this : IHTMLRectCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLRectCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLRectCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLRectCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLRectCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLRectCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLRectCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLRectCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLRectCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLRectCollection*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
end
struct LibWin32::IHTMLElementCollection
  def query_interface(this : IHTMLElementCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def to_string(this : IHTMLElementCollection*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def put_length(this : IHTMLElementCollection*, v : Int32) : HRESULT
    @lpVtbl.value.put_length.call(this, v)
  end
  def get_length(this : IHTMLElementCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLElementCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLElementCollection*, name : VARIANT, index : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, name, index, pdisp)
  end
  def tags(this : IHTMLElementCollection*, tagname : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.tags.call(this, tagname, pdisp)
  end
end
struct LibWin32::IHTMLElement2
  def query_interface(this : IHTMLElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_scope_name(this : IHTMLElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scope_name.call(this, p)
  end
  def set_capture(this : IHTMLElement2*, containercapture : Int16) : HRESULT
    @lpVtbl.value.set_capture.call(this, containercapture)
  end
  def release_capture(this : IHTMLElement2*) : HRESULT
    @lpVtbl.value.release_capture.call(this)
  end
  def put_onlosecapture(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onlosecapture.call(this, v)
  end
  def get_onlosecapture(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onlosecapture.call(this, p)
  end
  def component_from_point(this : IHTMLElement2*, x : Int32, y : Int32, component : UInt8**) : HRESULT
    @lpVtbl.value.component_from_point.call(this, x, y, component)
  end
  def do_scroll(this : IHTMLElement2*, component : VARIANT) : HRESULT
    @lpVtbl.value.do_scroll.call(this, component)
  end
  def put_onscroll(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onscroll.call(this, v)
  end
  def get_onscroll(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onscroll.call(this, p)
  end
  def put_ondrag(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrag.call(this, v)
  end
  def get_ondrag(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrag.call(this, p)
  end
  def put_ondragend(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragend.call(this, v)
  end
  def get_ondragend(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragend.call(this, p)
  end
  def put_ondragenter(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragenter.call(this, v)
  end
  def get_ondragenter(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragenter.call(this, p)
  end
  def put_ondragover(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragover.call(this, v)
  end
  def get_ondragover(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragover.call(this, p)
  end
  def put_ondragleave(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragleave.call(this, v)
  end
  def get_ondragleave(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragleave.call(this, p)
  end
  def put_ondrop(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrop.call(this, v)
  end
  def get_ondrop(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrop.call(this, p)
  end
  def put_onbeforecut(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforecut.call(this, v)
  end
  def get_onbeforecut(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforecut.call(this, p)
  end
  def put_oncut(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncut.call(this, v)
  end
  def get_oncut(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncut.call(this, p)
  end
  def put_onbeforecopy(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforecopy.call(this, v)
  end
  def get_onbeforecopy(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforecopy.call(this, p)
  end
  def put_oncopy(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncopy.call(this, v)
  end
  def get_oncopy(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncopy.call(this, p)
  end
  def put_onbeforepaste(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforepaste.call(this, v)
  end
  def get_onbeforepaste(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforepaste.call(this, p)
  end
  def put_onpaste(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpaste.call(this, v)
  end
  def get_onpaste(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpaste.call(this, p)
  end
  def get_current_style(this : IHTMLElement2*, p : IHTMLCurrentStyle*) : HRESULT
    @lpVtbl.value.get_current_style.call(this, p)
  end
  def put_onpropertychange(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpropertychange.call(this, v)
  end
  def get_onpropertychange(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpropertychange.call(this, p)
  end
  def get_client_rects(this : IHTMLElement2*, prectcol : IHTMLRectCollection*) : HRESULT
    @lpVtbl.value.get_client_rects.call(this, prectcol)
  end
  def get_bounding_client_rect(this : IHTMLElement2*, prect : IHTMLRect*) : HRESULT
    @lpVtbl.value.get_bounding_client_rect.call(this, prect)
  end
  def set_expression(this : IHTMLElement2*, propname : UInt8*, expression : UInt8*, language : UInt8*) : HRESULT
    @lpVtbl.value.set_expression.call(this, propname, expression, language)
  end
  def get_expression(this : IHTMLElement2*, propname : UInt8*, expression : VARIANT*) : HRESULT
    @lpVtbl.value.get_expression.call(this, propname, expression)
  end
  def remove_expression(this : IHTMLElement2*, propname : UInt8*, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_expression.call(this, propname, pfsuccess)
  end
  def put_tab_index(this : IHTMLElement2*, v : Int16) : HRESULT
    @lpVtbl.value.put_tab_index.call(this, v)
  end
  def get_tab_index(this : IHTMLElement2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_tab_index.call(this, p)
  end
  def focus(this : IHTMLElement2*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def put_access_key(this : IHTMLElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_access_key.call(this, v)
  end
  def get_access_key(this : IHTMLElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_access_key.call(this, p)
  end
  def put_onblur(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_onfocus(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_onresize(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onresize.call(this, v)
  end
  def get_onresize(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onresize.call(this, p)
  end
  def blur(this : IHTMLElement2*) : HRESULT
    @lpVtbl.value.blur.call(this)
  end
  def add_filter(this : IHTMLElement2*, punk : IUnknown) : HRESULT
    @lpVtbl.value.add_filter.call(this, punk)
  end
  def remove_filter(this : IHTMLElement2*, punk : IUnknown) : HRESULT
    @lpVtbl.value.remove_filter.call(this, punk)
  end
  def get_client_height(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_height.call(this, p)
  end
  def get_client_width(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_width.call(this, p)
  end
  def get_client_top(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_top.call(this, p)
  end
  def get_client_left(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_left.call(this, p)
  end
  def attach_event(this : IHTMLElement2*, event : UInt8*, pdisp : IDispatch, pfresult : Int16*) : HRESULT
    @lpVtbl.value.attach_event.call(this, event, pdisp, pfresult)
  end
  def detach_event(this : IHTMLElement2*, event : UInt8*, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.detach_event.call(this, event, pdisp)
  end
  def get_ready_state(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onrowsdelete(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowsdelete.call(this, v)
  end
  def get_onrowsdelete(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowsdelete.call(this, p)
  end
  def put_onrowsinserted(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowsinserted.call(this, v)
  end
  def get_onrowsinserted(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowsinserted.call(this, p)
  end
  def put_oncellchange(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncellchange.call(this, v)
  end
  def get_oncellchange(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncellchange.call(this, p)
  end
  def put_dir(this : IHTMLElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dir.call(this, v)
  end
  def get_dir(this : IHTMLElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dir.call(this, p)
  end
  def create_control_range(this : IHTMLElement2*, range : IDispatch*) : HRESULT
    @lpVtbl.value.create_control_range.call(this, range)
  end
  def get_scroll_height(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_height.call(this, p)
  end
  def get_scroll_width(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_width.call(this, p)
  end
  def put_scroll_top(this : IHTMLElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_top.call(this, v)
  end
  def get_scroll_top(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_top.call(this, p)
  end
  def put_scroll_left(this : IHTMLElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_left.call(this, v)
  end
  def get_scroll_left(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_left.call(this, p)
  end
  def clear_attributes(this : IHTMLElement2*) : HRESULT
    @lpVtbl.value.clear_attributes.call(this)
  end
  def merge_attributes(this : IHTMLElement2*, mergethis : IHTMLElement) : HRESULT
    @lpVtbl.value.merge_attributes.call(this, mergethis)
  end
  def put_oncontextmenu(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncontextmenu.call(this, v)
  end
  def get_oncontextmenu(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncontextmenu.call(this, p)
  end
  def insert_adjacent_element(this : IHTMLElement2*, where : UInt8*, insertedelement : IHTMLElement, inserted : IHTMLElement*) : HRESULT
    @lpVtbl.value.insert_adjacent_element.call(this, where, insertedelement, inserted)
  end
  def apply_element(this : IHTMLElement2*, apply : IHTMLElement, where : UInt8*, applied : IHTMLElement*) : HRESULT
    @lpVtbl.value.apply_element.call(this, apply, where, applied)
  end
  def get_adjacent_text(this : IHTMLElement2*, where : UInt8*, text : UInt8**) : HRESULT
    @lpVtbl.value.get_adjacent_text.call(this, where, text)
  end
  def replace_adjacent_text(this : IHTMLElement2*, where : UInt8*, newtext : UInt8*, oldtext : UInt8**) : HRESULT
    @lpVtbl.value.replace_adjacent_text.call(this, where, newtext, oldtext)
  end
  def get_can_have_children(this : IHTMLElement2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_can_have_children.call(this, p)
  end
  def add_behavior(this : IHTMLElement2*, bstrurl : UInt8*, pvarfactory : VARIANT*, pcookie : Int32*) : HRESULT
    @lpVtbl.value.add_behavior.call(this, bstrurl, pvarfactory, pcookie)
  end
  def remove_behavior(this : IHTMLElement2*, cookie : Int32, pfresult : Int16*) : HRESULT
    @lpVtbl.value.remove_behavior.call(this, cookie, pfresult)
  end
  def get_runtime_style(this : IHTMLElement2*, p : IHTMLStyle*) : HRESULT
    @lpVtbl.value.get_runtime_style.call(this, p)
  end
  def get_behavior_urns(this : IHTMLElement2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_behavior_urns.call(this, p)
  end
  def put_tag_urn(this : IHTMLElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_tag_urn.call(this, v)
  end
  def get_tag_urn(this : IHTMLElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_tag_urn.call(this, p)
  end
  def put_onbeforeeditfocus(this : IHTMLElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeeditfocus.call(this, v)
  end
  def get_onbeforeeditfocus(this : IHTMLElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeeditfocus.call(this, p)
  end
  def get_ready_state_value(this : IHTMLElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_ready_state_value.call(this, p)
  end
  def get_elements_by_tag_name(this : IHTMLElement2*, v : UInt8*, pelcoll : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_tag_name.call(this, v, pelcoll)
  end
end
struct LibWin32::IHTMLAttributeCollection3
  def query_interface(this : IHTMLAttributeCollection3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAttributeCollection3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAttributeCollection3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAttributeCollection3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAttributeCollection3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAttributeCollection3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAttributeCollection3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_named_item(this : IHTMLAttributeCollection3*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.get_named_item.call(this, bstrname, ppnodeout)
  end
  def set_named_item(this : IHTMLAttributeCollection3*, pnodein : IHTMLDOMAttribute, ppnodeout : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.set_named_item.call(this, pnodein, ppnodeout)
  end
  def remove_named_item(this : IHTMLAttributeCollection3*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.remove_named_item.call(this, bstrname, ppnodeout)
  end
  def item(this : IHTMLAttributeCollection3*, index : Int32, ppnodeout : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppnodeout)
  end
  def get_length(this : IHTMLAttributeCollection3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::IDOMDocumentType
  def query_interface(this : IDOMDocumentType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMDocumentType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMDocumentType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMDocumentType*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMDocumentType*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMDocumentType*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMDocumentType*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IDOMDocumentType*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def get_entities(this : IDOMDocumentType*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_entities.call(this, p)
  end
  def get_notations(this : IDOMDocumentType*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_notations.call(this, p)
  end
  def get_public_id(this : IDOMDocumentType*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_public_id.call(this, p)
  end
  def get_system_id(this : IDOMDocumentType*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_system_id.call(this, p)
  end
  def get_internal_subset(this : IDOMDocumentType*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_internal_subset.call(this, p)
  end
end
struct LibWin32::IHTMLDocument7
  def query_interface(this : IHTMLDocument7*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument7*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument7*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument7*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument7*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument7*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument7*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_default_view(this : IHTMLDocument7*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_default_view.call(this, p)
  end
  def create_cdata_section(this : IHTMLDocument7*, text : UInt8*, newcdatasectionnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.create_cdata_section.call(this, text, newcdatasectionnode)
  end
  def get_selection(this : IHTMLDocument7*, ppihtmlselection : IHTMLSelection*) : HRESULT
    @lpVtbl.value.get_selection.call(this, ppihtmlselection)
  end
  def get_elements_by_tag_name_ns(this : IHTMLDocument7*, pvarns : VARIANT*, bstrlocalname : UInt8*, pelcoll : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_tag_name_ns.call(this, pvarns, bstrlocalname, pelcoll)
  end
  def create_element_ns(this : IHTMLDocument7*, pvarns : VARIANT*, bstrtag : UInt8*, newelem : IHTMLElement*) : HRESULT
    @lpVtbl.value.create_element_ns.call(this, pvarns, bstrtag, newelem)
  end
  def create_attribute_ns(this : IHTMLDocument7*, pvarns : VARIANT*, bstrattrname : UInt8*, ppattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.create_attribute_ns.call(this, pvarns, bstrattrname, ppattribute)
  end
  def put_onmsthumbnailclick(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsthumbnailclick.call(this, v)
  end
  def get_onmsthumbnailclick(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsthumbnailclick.call(this, p)
  end
  def get_character_set(this : IHTMLDocument7*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_character_set.call(this, p)
  end
  def create_element(this : IHTMLDocument7*, bstrtag : UInt8*, newelem : IHTMLElement*) : HRESULT
    @lpVtbl.value.create_element.call(this, bstrtag, newelem)
  end
  def create_attribute(this : IHTMLDocument7*, bstrattrname : UInt8*, ppattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.create_attribute.call(this, bstrattrname, ppattribute)
  end
  def get_elements_by_class_name(this : IHTMLDocument7*, v : UInt8*, pel : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_class_name.call(this, v, pel)
  end
  def create_processing_instruction(this : IHTMLDocument7*, bstrtarget : UInt8*, bstrdata : UInt8*, newprocessinginstruction : IDOMProcessingInstruction*) : HRESULT
    @lpVtbl.value.create_processing_instruction.call(this, bstrtarget, bstrdata, newprocessinginstruction)
  end
  def adopt_node(this : IHTMLDocument7*, pnodesource : IHTMLDOMNode, ppnodedest : IHTMLDOMNode3*) : HRESULT
    @lpVtbl.value.adopt_node.call(this, pnodesource, ppnodedest)
  end
  def put_onmssitemodejumplistitemremoved(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmssitemodejumplistitemremoved.call(this, v)
  end
  def get_onmssitemodejumplistitemremoved(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmssitemodejumplistitemremoved.call(this, p)
  end
  def get_all(this : IHTMLDocument7*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_all.call(this, p)
  end
  def get_input_encoding(this : IHTMLDocument7*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_input_encoding.call(this, p)
  end
  def get_xml_encoding(this : IHTMLDocument7*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xml_encoding.call(this, p)
  end
  def put_xml_standalone(this : IHTMLDocument7*, v : Int16) : HRESULT
    @lpVtbl.value.put_xml_standalone.call(this, v)
  end
  def get_xml_standalone(this : IHTMLDocument7*, p : Int16*) : HRESULT
    @lpVtbl.value.get_xml_standalone.call(this, p)
  end
  def put_xml_version(this : IHTMLDocument7*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_xml_version.call(this, v)
  end
  def get_xml_version(this : IHTMLDocument7*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xml_version.call(this, p)
  end
  def has_attributes(this : IHTMLDocument7*, pfhasattributes : Int16*) : HRESULT
    @lpVtbl.value.has_attributes.call(this, pfhasattributes)
  end
  def put_onabort(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_onblur(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_oncanplay(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplay.call(this, v)
  end
  def get_oncanplay(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplay.call(this, p)
  end
  def put_oncanplaythrough(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplaythrough.call(this, v)
  end
  def get_oncanplaythrough(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplaythrough.call(this, p)
  end
  def put_onchange(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_ondrag(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrag.call(this, v)
  end
  def get_ondrag(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrag.call(this, p)
  end
  def put_ondragend(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragend.call(this, v)
  end
  def get_ondragend(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragend.call(this, p)
  end
  def put_ondragenter(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragenter.call(this, v)
  end
  def get_ondragenter(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragenter.call(this, p)
  end
  def put_ondragleave(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragleave.call(this, v)
  end
  def get_ondragleave(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragleave.call(this, p)
  end
  def put_ondragover(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragover.call(this, v)
  end
  def get_ondragover(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragover.call(this, p)
  end
  def put_ondrop(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrop.call(this, v)
  end
  def get_ondrop(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrop.call(this, p)
  end
  def put_ondurationchange(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondurationchange.call(this, v)
  end
  def get_ondurationchange(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondurationchange.call(this, p)
  end
  def put_onemptied(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onemptied.call(this, v)
  end
  def get_onemptied(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onemptied.call(this, p)
  end
  def put_onended(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onended.call(this, v)
  end
  def get_onended(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onended.call(this, p)
  end
  def put_onerror(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onfocus(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_oninput(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oninput.call(this, v)
  end
  def get_oninput(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oninput.call(this, p)
  end
  def put_onload(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onloadeddata(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadeddata.call(this, v)
  end
  def get_onloadeddata(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadeddata.call(this, p)
  end
  def put_onloadedmetadata(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadedmetadata.call(this, v)
  end
  def get_onloadedmetadata(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadedmetadata.call(this, p)
  end
  def put_onloadstart(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadstart.call(this, v)
  end
  def get_onloadstart(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadstart.call(this, p)
  end
  def put_onpause(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpause.call(this, v)
  end
  def get_onpause(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpause.call(this, p)
  end
  def put_onplay(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplay.call(this, v)
  end
  def get_onplay(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplay.call(this, p)
  end
  def put_onplaying(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplaying.call(this, v)
  end
  def get_onplaying(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplaying.call(this, p)
  end
  def put_onprogress(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onprogress.call(this, v)
  end
  def get_onprogress(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onprogress.call(this, p)
  end
  def put_onratechange(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onratechange.call(this, v)
  end
  def get_onratechange(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onratechange.call(this, p)
  end
  def put_onreset(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreset.call(this, v)
  end
  def get_onreset(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreset.call(this, p)
  end
  def put_onscroll(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onscroll.call(this, v)
  end
  def get_onscroll(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onscroll.call(this, p)
  end
  def put_onseeked(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeked.call(this, v)
  end
  def get_onseeked(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeked.call(this, p)
  end
  def put_onseeking(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeking.call(this, v)
  end
  def get_onseeking(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeking.call(this, p)
  end
  def put_onselect(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_onstalled(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstalled.call(this, v)
  end
  def get_onstalled(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstalled.call(this, p)
  end
  def put_onsubmit(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsubmit.call(this, v)
  end
  def get_onsubmit(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsubmit.call(this, p)
  end
  def put_onsuspend(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsuspend.call(this, v)
  end
  def get_onsuspend(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsuspend.call(this, p)
  end
  def put_ontimeupdate(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ontimeupdate.call(this, v)
  end
  def get_ontimeupdate(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ontimeupdate.call(this, p)
  end
  def put_onvolumechange(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onvolumechange.call(this, v)
  end
  def get_onvolumechange(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onvolumechange.call(this, p)
  end
  def put_onwaiting(this : IHTMLDocument7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onwaiting.call(this, v)
  end
  def get_onwaiting(this : IHTMLDocument7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onwaiting.call(this, p)
  end
  def normalize(this : IHTMLDocument7*) : HRESULT
    @lpVtbl.value.normalize.call(this)
  end
  def import_node(this : IHTMLDocument7*, pnodesource : IHTMLDOMNode, fdeep : Int16, ppnodedest : IHTMLDOMNode3*) : HRESULT
    @lpVtbl.value.import_node.call(this, pnodesource, fdeep, ppnodedest)
  end
  def get_parent_window(this : IHTMLDocument7*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_parent_window.call(this, p)
  end
  def putref_body(this : IHTMLDocument7*, v : IHTMLElement) : HRESULT
    @lpVtbl.value.putref_body.call(this, v)
  end
  def get_body(this : IHTMLDocument7*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_body.call(this, p)
  end
  def get_head(this : IHTMLDocument7*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_head.call(this, p)
  end
end
struct LibWin32::IHTMLDOMNode
  def query_interface(this : IHTMLDOMNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMNode*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMNode*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMNode*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMNode*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_node_type(this : IHTMLDOMNode*, p : Int32*) : HRESULT
    @lpVtbl.value.get_node_type.call(this, p)
  end
  def get_parent_node(this : IHTMLDOMNode*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_parent_node.call(this, p)
  end
  def has_child_nodes(this : IHTMLDOMNode*, fchildren : Int16*) : HRESULT
    @lpVtbl.value.has_child_nodes.call(this, fchildren)
  end
  def get_child_nodes(this : IHTMLDOMNode*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_child_nodes.call(this, p)
  end
  def get_attributes(this : IHTMLDOMNode*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_attributes.call(this, p)
  end
  def insert_before(this : IHTMLDOMNode*, newchild : IHTMLDOMNode, refchild : VARIANT, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.insert_before.call(this, newchild, refchild, node)
  end
  def remove_child(this : IHTMLDOMNode*, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.remove_child.call(this, oldchild, node)
  end
  def replace_child(this : IHTMLDOMNode*, newchild : IHTMLDOMNode, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.replace_child.call(this, newchild, oldchild, node)
  end
  def clone_node(this : IHTMLDOMNode*, fdeep : Int16, clonednode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.clone_node.call(this, fdeep, clonednode)
  end
  def remove_node(this : IHTMLDOMNode*, fdeep : Int16, removed : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.remove_node.call(this, fdeep, removed)
  end
  def swap_node(this : IHTMLDOMNode*, othernode : IHTMLDOMNode, swappednode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.swap_node.call(this, othernode, swappednode)
  end
  def replace_node(this : IHTMLDOMNode*, replacement : IHTMLDOMNode, replaced : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.replace_node.call(this, replacement, replaced)
  end
  def append_child(this : IHTMLDOMNode*, newchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.append_child.call(this, newchild, node)
  end
  def get_node_name(this : IHTMLDOMNode*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_node_name.call(this, p)
  end
  def put_node_value(this : IHTMLDOMNode*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_node_value.call(this, v)
  end
  def get_node_value(this : IHTMLDOMNode*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_node_value.call(this, p)
  end
  def get_first_child(this : IHTMLDOMNode*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_first_child.call(this, p)
  end
  def get_last_child(this : IHTMLDOMNode*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_last_child.call(this, p)
  end
  def get_previous_sibling(this : IHTMLDOMNode*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_previous_sibling.call(this, p)
  end
  def get_next_sibling(this : IHTMLDOMNode*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_next_sibling.call(this, p)
  end
end
struct LibWin32::IHTMLDOMNode2
  def query_interface(this : IHTMLDOMNode2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMNode2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMNode2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMNode2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMNode2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMNode2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMNode2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_owner_document(this : IHTMLDOMNode2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_owner_document.call(this, p)
  end
end
struct LibWin32::IHTMLDOMNode3
  def query_interface(this : IHTMLDOMNode3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMNode3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMNode3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMNode3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMNode3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMNode3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMNode3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_prefix(this : IHTMLDOMNode3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_prefix.call(this, v)
  end
  def get_prefix(this : IHTMLDOMNode3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_prefix.call(this, p)
  end
  def get_local_name(this : IHTMLDOMNode3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_local_name.call(this, p)
  end
  def get_namespace_uri(this : IHTMLDOMNode3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_namespace_uri.call(this, p)
  end
  def put_text_content(this : IHTMLDOMNode3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text_content.call(this, v)
  end
  def get_text_content(this : IHTMLDOMNode3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text_content.call(this, p)
  end
  def is_equal_node(this : IHTMLDOMNode3*, othernode : IHTMLDOMNode3, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal_node.call(this, othernode, isequal)
  end
  def lookup_namespace_uri(this : IHTMLDOMNode3*, pvarprefix : VARIANT*, pvarnamespaceuri : VARIANT*) : HRESULT
    @lpVtbl.value.lookup_namespace_uri.call(this, pvarprefix, pvarnamespaceuri)
  end
  def lookup_prefix(this : IHTMLDOMNode3*, pvarnamespaceuri : VARIANT*, pvarprefix : VARIANT*) : HRESULT
    @lpVtbl.value.lookup_prefix.call(this, pvarnamespaceuri, pvarprefix)
  end
  def is_default_namespace(this : IHTMLDOMNode3*, pvarnamespace : VARIANT*, pfdefaultnamespace : Int16*) : HRESULT
    @lpVtbl.value.is_default_namespace.call(this, pvarnamespace, pfdefaultnamespace)
  end
  def append_child(this : IHTMLDOMNode3*, newchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.append_child.call(this, newchild, node)
  end
  def insert_before(this : IHTMLDOMNode3*, newchild : IHTMLDOMNode, refchild : VARIANT, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.insert_before.call(this, newchild, refchild, node)
  end
  def remove_child(this : IHTMLDOMNode3*, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.remove_child.call(this, oldchild, node)
  end
  def replace_child(this : IHTMLDOMNode3*, newchild : IHTMLDOMNode, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.replace_child.call(this, newchild, oldchild, node)
  end
  def is_same_node(this : IHTMLDOMNode3*, othernode : IHTMLDOMNode3, issame : Int16*) : HRESULT
    @lpVtbl.value.is_same_node.call(this, othernode, issame)
  end
  def compare_document_position(this : IHTMLDOMNode3*, othernode : IHTMLDOMNode, flags : UInt16*) : HRESULT
    @lpVtbl.value.compare_document_position.call(this, othernode, flags)
  end
  def is_supported(this : IHTMLDOMNode3*, feature : UInt8*, version : VARIANT, pfissupported : Int16*) : HRESULT
    @lpVtbl.value.is_supported.call(this, feature, version, pfissupported)
  end
end
struct LibWin32::IHTMLDOMAttribute
  def query_interface(this : IHTMLDOMAttribute*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMAttribute*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMAttribute*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMAttribute*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMAttribute*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMAttribute*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMAttribute*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_node_name(this : IHTMLDOMAttribute*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_node_name.call(this, p)
  end
  def put_node_value(this : IHTMLDOMAttribute*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_node_value.call(this, v)
  end
  def get_node_value(this : IHTMLDOMAttribute*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_node_value.call(this, p)
  end
  def get_specified(this : IHTMLDOMAttribute*, p : Int16*) : HRESULT
    @lpVtbl.value.get_specified.call(this, p)
  end
end
struct LibWin32::IHTMLDOMAttribute2
  def query_interface(this : IHTMLDOMAttribute2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMAttribute2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMAttribute2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMAttribute2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMAttribute2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMAttribute2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMAttribute2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IHTMLDOMAttribute2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_value(this : IHTMLDOMAttribute2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLDOMAttribute2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def get_expando(this : IHTMLDOMAttribute2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_expando.call(this, p)
  end
  def get_node_type(this : IHTMLDOMAttribute2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_node_type.call(this, p)
  end
  def get_parent_node(this : IHTMLDOMAttribute2*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_parent_node.call(this, p)
  end
  def get_child_nodes(this : IHTMLDOMAttribute2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_child_nodes.call(this, p)
  end
  def get_first_child(this : IHTMLDOMAttribute2*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_first_child.call(this, p)
  end
  def get_last_child(this : IHTMLDOMAttribute2*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_last_child.call(this, p)
  end
  def get_previous_sibling(this : IHTMLDOMAttribute2*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_previous_sibling.call(this, p)
  end
  def get_next_sibling(this : IHTMLDOMAttribute2*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_next_sibling.call(this, p)
  end
  def get_attributes(this : IHTMLDOMAttribute2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_attributes.call(this, p)
  end
  def get_owner_document(this : IHTMLDOMAttribute2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_owner_document.call(this, p)
  end
  def insert_before(this : IHTMLDOMAttribute2*, newchild : IHTMLDOMNode, refchild : VARIANT, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.insert_before.call(this, newchild, refchild, node)
  end
  def replace_child(this : IHTMLDOMAttribute2*, newchild : IHTMLDOMNode, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.replace_child.call(this, newchild, oldchild, node)
  end
  def remove_child(this : IHTMLDOMAttribute2*, oldchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.remove_child.call(this, oldchild, node)
  end
  def append_child(this : IHTMLDOMAttribute2*, newchild : IHTMLDOMNode, node : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.append_child.call(this, newchild, node)
  end
  def has_child_nodes(this : IHTMLDOMAttribute2*, fchildren : Int16*) : HRESULT
    @lpVtbl.value.has_child_nodes.call(this, fchildren)
  end
  def clone_node(this : IHTMLDOMAttribute2*, fdeep : Int16, clonednode : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.clone_node.call(this, fdeep, clonednode)
  end
end
struct LibWin32::IHTMLDOMAttribute3
  def query_interface(this : IHTMLDOMAttribute3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMAttribute3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMAttribute3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMAttribute3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMAttribute3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMAttribute3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMAttribute3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_node_value(this : IHTMLDOMAttribute3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_node_value.call(this, v)
  end
  def get_node_value(this : IHTMLDOMAttribute3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_node_value.call(this, p)
  end
  def put_value(this : IHTMLDOMAttribute3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLDOMAttribute3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def get_specified(this : IHTMLDOMAttribute3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_specified.call(this, p)
  end
  def get_owner_element(this : IHTMLDOMAttribute3*, p : IHTMLElement2*) : HRESULT
    @lpVtbl.value.get_owner_element.call(this, p)
  end
end
struct LibWin32::IHTMLDOMAttribute4
  def query_interface(this : IHTMLDOMAttribute4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMAttribute4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMAttribute4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMAttribute4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMAttribute4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMAttribute4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMAttribute4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_node_value(this : IHTMLDOMAttribute4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_node_value.call(this, v)
  end
  def get_node_value(this : IHTMLDOMAttribute4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_node_value.call(this, p)
  end
  def get_node_name(this : IHTMLDOMAttribute4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_node_name.call(this, p)
  end
  def get_name(this : IHTMLDOMAttribute4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_value(this : IHTMLDOMAttribute4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLDOMAttribute4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def get_first_child(this : IHTMLDOMAttribute4*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_first_child.call(this, p)
  end
  def get_last_child(this : IHTMLDOMAttribute4*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_last_child.call(this, p)
  end
  def get_child_nodes(this : IHTMLDOMAttribute4*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_child_nodes.call(this, p)
  end
  def has_attributes(this : IHTMLDOMAttribute4*, pfhasattributes : Int16*) : HRESULT
    @lpVtbl.value.has_attributes.call(this, pfhasattributes)
  end
  def has_child_nodes(this : IHTMLDOMAttribute4*, fchildren : Int16*) : HRESULT
    @lpVtbl.value.has_child_nodes.call(this, fchildren)
  end
  def normalize(this : IHTMLDOMAttribute4*) : HRESULT
    @lpVtbl.value.normalize.call(this)
  end
  def get_specified(this : IHTMLDOMAttribute4*, p : Int16*) : HRESULT
    @lpVtbl.value.get_specified.call(this, p)
  end
end
struct LibWin32::IHTMLDOMTextNode
  def query_interface(this : IHTMLDOMTextNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMTextNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMTextNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMTextNode*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMTextNode*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMTextNode*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMTextNode*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_data(this : IHTMLDOMTextNode*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IHTMLDOMTextNode*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def to_string(this : IHTMLDOMTextNode*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def get_length(this : IHTMLDOMTextNode*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def split_text(this : IHTMLDOMTextNode*, offset : Int32, pretnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.split_text.call(this, offset, pretnode)
  end
end
struct LibWin32::IHTMLDOMTextNode2
  def query_interface(this : IHTMLDOMTextNode2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMTextNode2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMTextNode2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMTextNode2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMTextNode2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMTextNode2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMTextNode2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def substring_data(this : IHTMLDOMTextNode2*, offset : Int32, count : Int32, pbstrsubstring : UInt8**) : HRESULT
    @lpVtbl.value.substring_data.call(this, offset, count, pbstrsubstring)
  end
  def append_data(this : IHTMLDOMTextNode2*, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.append_data.call(this, bstrstring)
  end
  def insert_data(this : IHTMLDOMTextNode2*, offset : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.insert_data.call(this, offset, bstrstring)
  end
  def delete_data(this : IHTMLDOMTextNode2*, offset : Int32, count : Int32) : HRESULT
    @lpVtbl.value.delete_data.call(this, offset, count)
  end
  def replace_data(this : IHTMLDOMTextNode2*, offset : Int32, count : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.replace_data.call(this, offset, count, bstrstring)
  end
end
struct LibWin32::IHTMLDOMTextNode3
  def query_interface(this : IHTMLDOMTextNode3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMTextNode3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMTextNode3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMTextNode3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMTextNode3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMTextNode3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMTextNode3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def substring_data(this : IHTMLDOMTextNode3*, offset : Int32, count : Int32, pbstrsubstring : UInt8**) : HRESULT
    @lpVtbl.value.substring_data.call(this, offset, count, pbstrsubstring)
  end
  def insert_data(this : IHTMLDOMTextNode3*, offset : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.insert_data.call(this, offset, bstrstring)
  end
  def delete_data(this : IHTMLDOMTextNode3*, offset : Int32, count : Int32) : HRESULT
    @lpVtbl.value.delete_data.call(this, offset, count)
  end
  def replace_data(this : IHTMLDOMTextNode3*, offset : Int32, count : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.replace_data.call(this, offset, count, bstrstring)
  end
  def split_text(this : IHTMLDOMTextNode3*, offset : Int32, pretnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.split_text.call(this, offset, pretnode)
  end
  def get_whole_text(this : IHTMLDOMTextNode3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_whole_text.call(this, p)
  end
  def replace_whole_text(this : IHTMLDOMTextNode3*, bstrtext : UInt8*, ppretnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.replace_whole_text.call(this, bstrtext, ppretnode)
  end
  def has_attributes(this : IHTMLDOMTextNode3*, pfhasattributes : Int16*) : HRESULT
    @lpVtbl.value.has_attributes.call(this, pfhasattributes)
  end
  def normalize(this : IHTMLDOMTextNode3*) : HRESULT
    @lpVtbl.value.normalize.call(this)
  end
end
struct LibWin32::IHTMLDOMImplementation
  def query_interface(this : IHTMLDOMImplementation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMImplementation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMImplementation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMImplementation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMImplementation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMImplementation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMImplementation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def has_feature(this : IHTMLDOMImplementation*, bstrfeature : UInt8*, version : VARIANT, pfhasfeature : Int16*) : HRESULT
    @lpVtbl.value.has_feature.call(this, bstrfeature, version, pfhasfeature)
  end
end
struct LibWin32::IHTMLDOMImplementation2
  def query_interface(this : IHTMLDOMImplementation2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMImplementation2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMImplementation2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMImplementation2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMImplementation2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMImplementation2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMImplementation2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_document_type(this : IHTMLDOMImplementation2*, bstrqualifiedname : UInt8*, pvarpublicid : VARIANT*, pvarsystemid : VARIANT*, newdocumenttype : IDOMDocumentType*) : HRESULT
    @lpVtbl.value.create_document_type.call(this, bstrqualifiedname, pvarpublicid, pvarsystemid, newdocumenttype)
  end
  def create_document(this : IHTMLDOMImplementation2*, pvarns : VARIANT*, pvartagname : VARIANT*, pdocumenttype : IDOMDocumentType, ppnewdocument : IHTMLDocument7*) : HRESULT
    @lpVtbl.value.create_document.call(this, pvarns, pvartagname, pdocumenttype, ppnewdocument)
  end
  def create_html_document(this : IHTMLDOMImplementation2*, bstrtitle : UInt8*, ppnewdocument : IHTMLDocument7*) : HRESULT
    @lpVtbl.value.create_html_document.call(this, bstrtitle, ppnewdocument)
  end
  def has_feature(this : IHTMLDOMImplementation2*, bstrfeature : UInt8*, version : VARIANT, pfhasfeature : Int16*) : HRESULT
    @lpVtbl.value.has_feature.call(this, bstrfeature, version, pfhasfeature)
  end
end
struct LibWin32::DispHTMLDOMAttribute
  def query_interface(this : DispHTMLDOMAttribute*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDOMAttribute*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDOMAttribute*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDOMAttribute*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDOMAttribute*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDOMAttribute*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDOMAttribute*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLDOMTextNode
  def query_interface(this : DispHTMLDOMTextNode*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDOMTextNode*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDOMTextNode*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDOMTextNode*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDOMTextNode*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDOMTextNode*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDOMTextNode*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLDOMImplementation
  def query_interface(this : DispHTMLDOMImplementation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDOMImplementation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDOMImplementation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDOMImplementation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDOMImplementation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDOMImplementation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDOMImplementation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLAttributeCollection
  def query_interface(this : IHTMLAttributeCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAttributeCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAttributeCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAttributeCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAttributeCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAttributeCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAttributeCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLAttributeCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLAttributeCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLAttributeCollection*, name : VARIANT*, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, name, pdisp)
  end
end
struct LibWin32::IHTMLAttributeCollection2
  def query_interface(this : IHTMLAttributeCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAttributeCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAttributeCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAttributeCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAttributeCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAttributeCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAttributeCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_named_item(this : IHTMLAttributeCollection2*, bstrname : UInt8*, newretnode : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.get_named_item.call(this, bstrname, newretnode)
  end
  def set_named_item(this : IHTMLAttributeCollection2*, ppnode : IHTMLDOMAttribute, newretnode : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.set_named_item.call(this, ppnode, newretnode)
  end
  def remove_named_item(this : IHTMLAttributeCollection2*, bstrname : UInt8*, newretnode : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.remove_named_item.call(this, bstrname, newretnode)
  end
end
struct LibWin32::IHTMLAttributeCollection4
  def query_interface(this : IHTMLAttributeCollection4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAttributeCollection4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAttributeCollection4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAttributeCollection4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAttributeCollection4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAttributeCollection4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAttributeCollection4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_named_item_ns(this : IHTMLAttributeCollection4*, pvarns : VARIANT*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.get_named_item_ns.call(this, pvarns, bstrname, ppnodeout)
  end
  def set_named_item_ns(this : IHTMLAttributeCollection4*, pnodein : IHTMLDOMAttribute2, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.set_named_item_ns.call(this, pnodein, ppnodeout)
  end
  def remove_named_item_ns(this : IHTMLAttributeCollection4*, pvarns : VARIANT*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.remove_named_item_ns.call(this, pvarns, bstrname, ppnodeout)
  end
  def get_named_item(this : IHTMLAttributeCollection4*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.get_named_item.call(this, bstrname, ppnodeout)
  end
  def set_named_item(this : IHTMLAttributeCollection4*, pnodein : IHTMLDOMAttribute2, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.set_named_item.call(this, pnodein, ppnodeout)
  end
  def remove_named_item(this : IHTMLAttributeCollection4*, bstrname : UInt8*, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.remove_named_item.call(this, bstrname, ppnodeout)
  end
  def item(this : IHTMLAttributeCollection4*, index : Int32, ppnodeout : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppnodeout)
  end
  def get_length(this : IHTMLAttributeCollection4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::IHTMLDOMChildrenCollection
  def query_interface(this : IHTMLDOMChildrenCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMChildrenCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMChildrenCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMChildrenCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMChildrenCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMChildrenCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMChildrenCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLDOMChildrenCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLDOMChildrenCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLDOMChildrenCollection*, index : Int32, ppitem : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppitem)
  end
end
struct LibWin32::IHTMLDOMChildrenCollection2
  def query_interface(this : IHTMLDOMChildrenCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMChildrenCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMChildrenCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMChildrenCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMChildrenCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMChildrenCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMChildrenCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IHTMLDOMChildrenCollection2*, index : Int32, ppitem : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppitem)
  end
end
struct LibWin32::DispHTMLAttributeCollection
  def query_interface(this : DispHTMLAttributeCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAttributeCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAttributeCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAttributeCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAttributeCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAttributeCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAttributeCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispStaticNodeList
  def query_interface(this : DispStaticNodeList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispStaticNodeList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispStaticNodeList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispStaticNodeList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispStaticNodeList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispStaticNodeList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispStaticNodeList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispDOMChildrenCollection
  def query_interface(this : DispDOMChildrenCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMChildrenCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMChildrenCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMChildrenCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMChildrenCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMChildrenCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMChildrenCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLElementEvents4
  def query_interface(this : HTMLElementEvents4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLElementEvents4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLElementEvents4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLElementEvents4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLElementEvents4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLElementEvents4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLElementEvents4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLElementEvents3
  def query_interface(this : HTMLElementEvents3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLElementEvents3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLElementEvents3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLElementEvents3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLElementEvents3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLElementEvents3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLElementEvents3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLElementEvents2
  def query_interface(this : HTMLElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLElementEvents
  def query_interface(this : HTMLElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IRulesAppliedCollection
  def query_interface(this : IRulesAppliedCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRulesAppliedCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRulesAppliedCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IRulesAppliedCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IRulesAppliedCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IRulesAppliedCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IRulesAppliedCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IRulesAppliedCollection*, index : Int32, pprulesapplied : IRulesApplied*) : HRESULT
    @lpVtbl.value.item.call(this, index, pprulesapplied)
  end
  def get_length(this : IRulesAppliedCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get_element(this : IRulesAppliedCollection*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, p)
  end
  def property_inherited_from(this : IRulesAppliedCollection*, name : UInt8*, pprulesapplied : IRulesApplied*) : HRESULT
    @lpVtbl.value.property_inherited_from.call(this, name, pprulesapplied)
  end
  def get_property_count(this : IRulesAppliedCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_property_count.call(this, p)
  end
  def property(this : IRulesAppliedCollection*, index : Int32, pbstrproperty : UInt8**) : HRESULT
    @lpVtbl.value.property.call(this, index, pbstrproperty)
  end
  def property_inherited_trace(this : IRulesAppliedCollection*, name : UInt8*, index : Int32, pprulesapplied : IRulesApplied*) : HRESULT
    @lpVtbl.value.property_inherited_trace.call(this, name, index, pprulesapplied)
  end
  def property_inherited_trace_length(this : IRulesAppliedCollection*, name : UInt8*, plength : Int32*) : HRESULT
    @lpVtbl.value.property_inherited_trace_length.call(this, name, plength)
  end
end
struct LibWin32::IHTMLElement3
  def query_interface(this : IHTMLElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def merge_attributes(this : IHTMLElement3*, mergethis : IHTMLElement, pvarflags : VARIANT*) : HRESULT
    @lpVtbl.value.merge_attributes.call(this, mergethis, pvarflags)
  end
  def get_is_multi_line(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_multi_line.call(this, p)
  end
  def get_can_have_html(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_can_have_html.call(this, p)
  end
  def put_onlayoutcomplete(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onlayoutcomplete.call(this, v)
  end
  def get_onlayoutcomplete(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onlayoutcomplete.call(this, p)
  end
  def put_onpage(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpage.call(this, v)
  end
  def get_onpage(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpage.call(this, p)
  end
  def put_inflate_block(this : IHTMLElement3*, v : Int16) : HRESULT
    @lpVtbl.value.put_inflate_block.call(this, v)
  end
  def get_inflate_block(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_inflate_block.call(this, p)
  end
  def put_onbeforedeactivate(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforedeactivate.call(this, v)
  end
  def get_onbeforedeactivate(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforedeactivate.call(this, p)
  end
  def set_active(this : IHTMLElement3*) : HRESULT
    @lpVtbl.value.set_active.call(this)
  end
  def put_content_editable(this : IHTMLElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content_editable.call(this, v)
  end
  def get_content_editable(this : IHTMLElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content_editable.call(this, p)
  end
  def get_is_content_editable(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_content_editable.call(this, p)
  end
  def put_hide_focus(this : IHTMLElement3*, v : Int16) : HRESULT
    @lpVtbl.value.put_hide_focus.call(this, v)
  end
  def get_hide_focus(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_hide_focus.call(this, p)
  end
  def put_disabled(this : IHTMLElement3*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_is_disabled(this : IHTMLElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_disabled.call(this, p)
  end
  def put_onmove(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmove.call(this, v)
  end
  def get_onmove(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmove.call(this, p)
  end
  def put_oncontrolselect(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncontrolselect.call(this, v)
  end
  def get_oncontrolselect(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncontrolselect.call(this, p)
  end
  def fire_event(this : IHTMLElement3*, bstreventname : UInt8*, pvareventobject : VARIANT*, pfcancelled : Int16*) : HRESULT
    @lpVtbl.value.fire_event.call(this, bstreventname, pvareventobject, pfcancelled)
  end
  def put_onresizestart(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onresizestart.call(this, v)
  end
  def get_onresizestart(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onresizestart.call(this, p)
  end
  def put_onresizeend(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onresizeend.call(this, v)
  end
  def get_onresizeend(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onresizeend.call(this, p)
  end
  def put_onmovestart(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmovestart.call(this, v)
  end
  def get_onmovestart(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmovestart.call(this, p)
  end
  def put_onmoveend(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmoveend.call(this, v)
  end
  def get_onmoveend(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmoveend.call(this, p)
  end
  def put_onmouseenter(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseenter.call(this, v)
  end
  def get_onmouseenter(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseenter.call(this, p)
  end
  def put_onmouseleave(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseleave.call(this, v)
  end
  def get_onmouseleave(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseleave.call(this, p)
  end
  def put_onactivate(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onactivate.call(this, v)
  end
  def get_onactivate(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onactivate.call(this, p)
  end
  def put_ondeactivate(this : IHTMLElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondeactivate.call(this, v)
  end
  def get_ondeactivate(this : IHTMLElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondeactivate.call(this, p)
  end
  def drag_drop(this : IHTMLElement3*, pfret : Int16*) : HRESULT
    @lpVtbl.value.drag_drop.call(this, pfret)
  end
  def get_glyph_mode(this : IHTMLElement3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_glyph_mode.call(this, p)
  end
end
struct LibWin32::IHTMLElement4
  def query_interface(this : IHTMLElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmousewheel(this : IHTMLElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousewheel.call(this, v)
  end
  def get_onmousewheel(this : IHTMLElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousewheel.call(this, p)
  end
  def normalize(this : IHTMLElement4*) : HRESULT
    @lpVtbl.value.normalize.call(this)
  end
  def get_attribute_node(this : IHTMLElement4*, bstrname : UInt8*, ppattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.get_attribute_node.call(this, bstrname, ppattribute)
  end
  def set_attribute_node(this : IHTMLElement4*, pattr : IHTMLDOMAttribute, ppretattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.set_attribute_node.call(this, pattr, ppretattribute)
  end
  def remove_attribute_node(this : IHTMLElement4*, pattr : IHTMLDOMAttribute, ppretattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.remove_attribute_node.call(this, pattr, ppretattribute)
  end
  def put_onbeforeactivate(this : IHTMLElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeactivate.call(this, v)
  end
  def get_onbeforeactivate(this : IHTMLElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeactivate.call(this, p)
  end
  def put_onfocusin(this : IHTMLElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusin.call(this, v)
  end
  def get_onfocusin(this : IHTMLElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusin.call(this, p)
  end
  def put_onfocusout(this : IHTMLElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusout.call(this, v)
  end
  def get_onfocusout(this : IHTMLElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusout.call(this, p)
  end
end
struct LibWin32::IElementSelector
  def query_interface(this : IElementSelector*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementSelector*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementSelector*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IElementSelector*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IElementSelector*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IElementSelector*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IElementSelector*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def query_selector(this : IElementSelector*, v : UInt8*, pel : IHTMLElement*) : HRESULT
    @lpVtbl.value.query_selector.call(this, v, pel)
  end
  def query_selector_all(this : IElementSelector*, v : UInt8*, pel : IHTMLDOMChildrenCollection*) : HRESULT
    @lpVtbl.value.query_selector_all.call(this, v, pel)
  end
end
struct LibWin32::IHTMLElementRender
  def query_interface(this : IHTMLElementRender*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementRender*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementRender*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def draw_to_dc(this : IHTMLElementRender*, hdc : HDC) : HRESULT
    @lpVtbl.value.draw_to_dc.call(this, hdc)
  end
  def set_document_printer(this : IHTMLElementRender*, bstrprintername : UInt8*, hdc : HDC) : HRESULT
    @lpVtbl.value.set_document_printer.call(this, bstrprintername, hdc)
  end
end
struct LibWin32::IHTMLUniqueName
  def query_interface(this : IHTMLUniqueName*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLUniqueName*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLUniqueName*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLUniqueName*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLUniqueName*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLUniqueName*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLUniqueName*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_unique_number(this : IHTMLUniqueName*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unique_number.call(this, p)
  end
  def get_unique_id(this : IHTMLUniqueName*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_id.call(this, p)
  end
end
struct LibWin32::IHTMLElement5
  def query_interface(this : IHTMLElement5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_attribute_node(this : IHTMLElement5*, bstrname : UInt8*, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.get_attribute_node.call(this, bstrname, ppretattribute)
  end
  def set_attribute_node(this : IHTMLElement5*, pattr : IHTMLDOMAttribute2, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.set_attribute_node.call(this, pattr, ppretattribute)
  end
  def remove_attribute_node(this : IHTMLElement5*, pattr : IHTMLDOMAttribute2, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.remove_attribute_node.call(this, pattr, ppretattribute)
  end
  def has_attribute(this : IHTMLElement5*, name : UInt8*, pfhasattribute : Int16*) : HRESULT
    @lpVtbl.value.has_attribute.call(this, name, pfhasattribute)
  end
  def put_role(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_role.call(this, v)
  end
  def get_role(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_role.call(this, p)
  end
  def put_aria_busy(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_busy.call(this, v)
  end
  def get_aria_busy(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_busy.call(this, p)
  end
  def put_aria_checked(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_checked.call(this, v)
  end
  def get_aria_checked(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_checked.call(this, p)
  end
  def put_aria_disabled(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_disabled.call(this, v)
  end
  def get_aria_disabled(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_disabled.call(this, p)
  end
  def put_aria_expanded(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_expanded.call(this, v)
  end
  def get_aria_expanded(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_expanded.call(this, p)
  end
  def put_aria_haspopup(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_haspopup.call(this, v)
  end
  def get_aria_haspopup(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_haspopup.call(this, p)
  end
  def put_aria_hidden(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_hidden.call(this, v)
  end
  def get_aria_hidden(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_hidden.call(this, p)
  end
  def put_aria_invalid(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_invalid.call(this, v)
  end
  def get_aria_invalid(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_invalid.call(this, p)
  end
  def put_aria_multiselectable(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_multiselectable.call(this, v)
  end
  def get_aria_multiselectable(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_multiselectable.call(this, p)
  end
  def put_aria_pressed(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_pressed.call(this, v)
  end
  def get_aria_pressed(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_pressed.call(this, p)
  end
  def put_aria_readonly(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_readonly.call(this, v)
  end
  def get_aria_readonly(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_readonly.call(this, p)
  end
  def put_aria_required(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_required.call(this, v)
  end
  def get_aria_required(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_required.call(this, p)
  end
  def put_aria_secret(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_secret.call(this, v)
  end
  def get_aria_secret(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_secret.call(this, p)
  end
  def put_aria_selected(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_selected.call(this, v)
  end
  def get_aria_selected(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_selected.call(this, p)
  end
  def get_attribute(this : IHTMLElement5*, strattributename : UInt8*, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, attributevalue)
  end
  def set_attribute(this : IHTMLElement5*, strattributename : UInt8*, attributevalue : VARIANT) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, attributevalue)
  end
  def remove_attribute(this : IHTMLElement5*, strattributename : UInt8*, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename, pfsuccess)
  end
  def get_attributes(this : IHTMLElement5*, p : IHTMLAttributeCollection3*) : HRESULT
    @lpVtbl.value.get_attributes.call(this, p)
  end
  def put_aria_valuenow(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_valuenow.call(this, v)
  end
  def get_aria_valuenow(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_valuenow.call(this, p)
  end
  def put_aria_posinset(this : IHTMLElement5*, v : Int16) : HRESULT
    @lpVtbl.value.put_aria_posinset.call(this, v)
  end
  def get_aria_posinset(this : IHTMLElement5*, p : Int16*) : HRESULT
    @lpVtbl.value.get_aria_posinset.call(this, p)
  end
  def put_aria_setsize(this : IHTMLElement5*, v : Int16) : HRESULT
    @lpVtbl.value.put_aria_setsize.call(this, v)
  end
  def get_aria_setsize(this : IHTMLElement5*, p : Int16*) : HRESULT
    @lpVtbl.value.get_aria_setsize.call(this, p)
  end
  def put_aria_level(this : IHTMLElement5*, v : Int16) : HRESULT
    @lpVtbl.value.put_aria_level.call(this, v)
  end
  def get_aria_level(this : IHTMLElement5*, p : Int16*) : HRESULT
    @lpVtbl.value.get_aria_level.call(this, p)
  end
  def put_aria_valuemin(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_valuemin.call(this, v)
  end
  def get_aria_valuemin(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_valuemin.call(this, p)
  end
  def put_aria_valuemax(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_valuemax.call(this, v)
  end
  def get_aria_valuemax(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_valuemax.call(this, p)
  end
  def put_aria_controls(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_controls.call(this, v)
  end
  def get_aria_controls(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_controls.call(this, p)
  end
  def put_aria_describedby(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_describedby.call(this, v)
  end
  def get_aria_describedby(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_describedby.call(this, p)
  end
  def put_aria_flowto(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_flowto.call(this, v)
  end
  def get_aria_flowto(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_flowto.call(this, p)
  end
  def put_aria_labelledby(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_labelledby.call(this, v)
  end
  def get_aria_labelledby(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_labelledby.call(this, p)
  end
  def put_aria_activedescendant(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_activedescendant.call(this, v)
  end
  def get_aria_activedescendant(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_activedescendant.call(this, p)
  end
  def put_aria_owns(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_owns.call(this, v)
  end
  def get_aria_owns(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_owns.call(this, p)
  end
  def has_attributes(this : IHTMLElement5*, pfhasattributes : Int16*) : HRESULT
    @lpVtbl.value.has_attributes.call(this, pfhasattributes)
  end
  def put_aria_live(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_live.call(this, v)
  end
  def get_aria_live(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_live.call(this, p)
  end
  def put_aria_relevant(this : IHTMLElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_aria_relevant.call(this, v)
  end
  def get_aria_relevant(this : IHTMLElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_aria_relevant.call(this, p)
  end
end
struct LibWin32::IHTMLElement6
  def query_interface(this : IHTMLElement6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_attribute_ns(this : IHTMLElement6*, pvarns : VARIANT*, strattributename : UInt8*, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute_ns.call(this, pvarns, strattributename, attributevalue)
  end
  def set_attribute_ns(this : IHTMLElement6*, pvarns : VARIANT*, strattributename : UInt8*, pvarattributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_attribute_ns.call(this, pvarns, strattributename, pvarattributevalue)
  end
  def remove_attribute_ns(this : IHTMLElement6*, pvarns : VARIANT*, strattributename : UInt8*) : HRESULT
    @lpVtbl.value.remove_attribute_ns.call(this, pvarns, strattributename)
  end
  def get_attribute_node_ns(this : IHTMLElement6*, pvarns : VARIANT*, bstrname : UInt8*, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.get_attribute_node_ns.call(this, pvarns, bstrname, ppretattribute)
  end
  def set_attribute_node_ns(this : IHTMLElement6*, pattr : IHTMLDOMAttribute2, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.set_attribute_node_ns.call(this, pattr, ppretattribute)
  end
  def has_attribute_ns(this : IHTMLElement6*, pvarns : VARIANT*, name : UInt8*, pfhasattribute : Int16*) : HRESULT
    @lpVtbl.value.has_attribute_ns.call(this, pvarns, name, pfhasattribute)
  end
  def get_attribute(this : IHTMLElement6*, strattributename : UInt8*, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, attributevalue)
  end
  def set_attribute(this : IHTMLElement6*, strattributename : UInt8*, pvarattributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, pvarattributevalue)
  end
  def remove_attribute(this : IHTMLElement6*, strattributename : UInt8*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename)
  end
  def get_attribute_node(this : IHTMLElement6*, strattributename : UInt8*, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.get_attribute_node.call(this, strattributename, ppretattribute)
  end
  def set_attribute_node(this : IHTMLElement6*, pattr : IHTMLDOMAttribute2, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.set_attribute_node.call(this, pattr, ppretattribute)
  end
  def remove_attribute_node(this : IHTMLElement6*, pattr : IHTMLDOMAttribute2, ppretattribute : IHTMLDOMAttribute2*) : HRESULT
    @lpVtbl.value.remove_attribute_node.call(this, pattr, ppretattribute)
  end
  def has_attribute(this : IHTMLElement6*, name : UInt8*, pfhasattribute : Int16*) : HRESULT
    @lpVtbl.value.has_attribute.call(this, name, pfhasattribute)
  end
  def get_elements_by_tag_name_ns(this : IHTMLElement6*, varns : VARIANT*, bstrlocalname : UInt8*, pelcoll : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_tag_name_ns.call(this, varns, bstrlocalname, pelcoll)
  end
  def get_tag_name(this : IHTMLElement6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_tag_name.call(this, p)
  end
  def get_node_name(this : IHTMLElement6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_node_name.call(this, p)
  end
  def get_elements_by_class_name(this : IHTMLElement6*, v : UInt8*, pel : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_class_name.call(this, v, pel)
  end
  def ms_matches_selector(this : IHTMLElement6*, v : UInt8*, pfmatches : Int16*) : HRESULT
    @lpVtbl.value.ms_matches_selector.call(this, v, pfmatches)
  end
  def put_onabort(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_oncanplay(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplay.call(this, v)
  end
  def get_oncanplay(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplay.call(this, p)
  end
  def put_oncanplaythrough(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplaythrough.call(this, v)
  end
  def get_oncanplaythrough(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplaythrough.call(this, p)
  end
  def put_onchange(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_ondurationchange(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondurationchange.call(this, v)
  end
  def get_ondurationchange(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondurationchange.call(this, p)
  end
  def put_onemptied(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onemptied.call(this, v)
  end
  def get_onemptied(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onemptied.call(this, p)
  end
  def put_onended(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onended.call(this, v)
  end
  def get_onended(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onended.call(this, p)
  end
  def put_onerror(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_oninput(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oninput.call(this, v)
  end
  def get_oninput(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oninput.call(this, p)
  end
  def put_onload(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onloadeddata(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadeddata.call(this, v)
  end
  def get_onloadeddata(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadeddata.call(this, p)
  end
  def put_onloadedmetadata(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadedmetadata.call(this, v)
  end
  def get_onloadedmetadata(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadedmetadata.call(this, p)
  end
  def put_onloadstart(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadstart.call(this, v)
  end
  def get_onloadstart(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadstart.call(this, p)
  end
  def put_onpause(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpause.call(this, v)
  end
  def get_onpause(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpause.call(this, p)
  end
  def put_onplay(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplay.call(this, v)
  end
  def get_onplay(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplay.call(this, p)
  end
  def put_onplaying(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplaying.call(this, v)
  end
  def get_onplaying(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplaying.call(this, p)
  end
  def put_onprogress(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onprogress.call(this, v)
  end
  def get_onprogress(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onprogress.call(this, p)
  end
  def put_onratechange(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onratechange.call(this, v)
  end
  def get_onratechange(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onratechange.call(this, p)
  end
  def put_onreset(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreset.call(this, v)
  end
  def get_onreset(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreset.call(this, p)
  end
  def put_onseeked(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeked.call(this, v)
  end
  def get_onseeked(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeked.call(this, p)
  end
  def put_onseeking(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeking.call(this, v)
  end
  def get_onseeking(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeking.call(this, p)
  end
  def put_onselect(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_onstalled(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstalled.call(this, v)
  end
  def get_onstalled(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstalled.call(this, p)
  end
  def put_onsubmit(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsubmit.call(this, v)
  end
  def get_onsubmit(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsubmit.call(this, p)
  end
  def put_onsuspend(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsuspend.call(this, v)
  end
  def get_onsuspend(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsuspend.call(this, p)
  end
  def put_ontimeupdate(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ontimeupdate.call(this, v)
  end
  def get_ontimeupdate(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ontimeupdate.call(this, p)
  end
  def put_onvolumechange(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onvolumechange.call(this, v)
  end
  def get_onvolumechange(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onvolumechange.call(this, p)
  end
  def put_onwaiting(this : IHTMLElement6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onwaiting.call(this, v)
  end
  def get_onwaiting(this : IHTMLElement6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onwaiting.call(this, p)
  end
  def has_attributes(this : IHTMLElement6*, pfhasattributes : Int16*) : HRESULT
    @lpVtbl.value.has_attributes.call(this, pfhasattributes)
  end
end
struct LibWin32::IHTMLElement7
  def query_interface(this : IHTMLElement7*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElement7*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElement7*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElement7*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElement7*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElement7*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElement7*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmspointerdown(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerdown.call(this, v)
  end
  def get_onmspointerdown(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerdown.call(this, p)
  end
  def put_onmspointermove(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointermove.call(this, v)
  end
  def get_onmspointermove(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointermove.call(this, p)
  end
  def put_onmspointerup(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerup.call(this, v)
  end
  def get_onmspointerup(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerup.call(this, p)
  end
  def put_onmspointerover(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerover.call(this, v)
  end
  def get_onmspointerover(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerover.call(this, p)
  end
  def put_onmspointerout(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerout.call(this, v)
  end
  def get_onmspointerout(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerout.call(this, p)
  end
  def put_onmspointercancel(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointercancel.call(this, v)
  end
  def get_onmspointercancel(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointercancel.call(this, p)
  end
  def put_onmspointerhover(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerhover.call(this, v)
  end
  def get_onmspointerhover(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerhover.call(this, p)
  end
  def put_onmslostpointercapture(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmslostpointercapture.call(this, v)
  end
  def get_onmslostpointercapture(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmslostpointercapture.call(this, p)
  end
  def put_onmsgotpointercapture(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgotpointercapture.call(this, v)
  end
  def get_onmsgotpointercapture(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgotpointercapture.call(this, p)
  end
  def put_onmsgesturestart(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturestart.call(this, v)
  end
  def get_onmsgesturestart(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturestart.call(this, p)
  end
  def put_onmsgesturechange(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturechange.call(this, v)
  end
  def get_onmsgesturechange(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturechange.call(this, p)
  end
  def put_onmsgestureend(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgestureend.call(this, v)
  end
  def get_onmsgestureend(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgestureend.call(this, p)
  end
  def put_onmsgesturehold(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturehold.call(this, v)
  end
  def get_onmsgesturehold(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturehold.call(this, p)
  end
  def put_onmsgesturetap(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturetap.call(this, v)
  end
  def get_onmsgesturetap(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturetap.call(this, p)
  end
  def put_onmsgesturedoubletap(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturedoubletap.call(this, v)
  end
  def get_onmsgesturedoubletap(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturedoubletap.call(this, p)
  end
  def put_onmsinertiastart(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsinertiastart.call(this, v)
  end
  def get_onmsinertiastart(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsinertiastart.call(this, p)
  end
  def ms_set_pointer_capture(this : IHTMLElement7*, pointerid : Int32) : HRESULT
    @lpVtbl.value.ms_set_pointer_capture.call(this, pointerid)
  end
  def ms_release_pointer_capture(this : IHTMLElement7*, pointerid : Int32) : HRESULT
    @lpVtbl.value.ms_release_pointer_capture.call(this, pointerid)
  end
  def put_onmstransitionstart(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmstransitionstart.call(this, v)
  end
  def get_onmstransitionstart(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmstransitionstart.call(this, p)
  end
  def put_onmstransitionend(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmstransitionend.call(this, v)
  end
  def get_onmstransitionend(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmstransitionend.call(this, p)
  end
  def put_onmsanimationstart(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsanimationstart.call(this, v)
  end
  def get_onmsanimationstart(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsanimationstart.call(this, p)
  end
  def put_onmsanimationend(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsanimationend.call(this, v)
  end
  def get_onmsanimationend(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsanimationend.call(this, p)
  end
  def put_onmsanimationiteration(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsanimationiteration.call(this, v)
  end
  def get_onmsanimationiteration(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsanimationiteration.call(this, p)
  end
  def put_oninvalid(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oninvalid.call(this, v)
  end
  def get_oninvalid(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oninvalid.call(this, p)
  end
  def put_xms_accelerator_key(this : IHTMLElement7*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_xms_accelerator_key.call(this, v)
  end
  def get_xms_accelerator_key(this : IHTMLElement7*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xms_accelerator_key.call(this, p)
  end
  def put_spellcheck(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_spellcheck.call(this, v)
  end
  def get_spellcheck(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_spellcheck.call(this, p)
  end
  def put_onmsmanipulationstatechanged(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsmanipulationstatechanged.call(this, v)
  end
  def get_onmsmanipulationstatechanged(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsmanipulationstatechanged.call(this, p)
  end
  def put_oncuechange(this : IHTMLElement7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncuechange.call(this, v)
  end
  def get_oncuechange(this : IHTMLElement7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncuechange.call(this, p)
  end
end
struct LibWin32::IHTMLElementAppliedStyles
  def query_interface(this : IHTMLElementAppliedStyles*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementAppliedStyles*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementAppliedStyles*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementAppliedStyles*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementAppliedStyles*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementAppliedStyles*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementAppliedStyles*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def ms_get_rules_applied(this : IHTMLElementAppliedStyles*, pprulesappliedcollection : IRulesAppliedCollection*) : HRESULT
    @lpVtbl.value.ms_get_rules_applied.call(this, pprulesappliedcollection)
  end
  def ms_get_rules_applied_with_ancestor(this : IHTMLElementAppliedStyles*, varcontext : VARIANT, pprulesappliedcollection : IRulesAppliedCollection*) : HRESULT
    @lpVtbl.value.ms_get_rules_applied_with_ancestor.call(this, varcontext, pprulesappliedcollection)
  end
end
struct LibWin32::IElementTraversal
  def query_interface(this : IElementTraversal*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementTraversal*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementTraversal*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IElementTraversal*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IElementTraversal*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IElementTraversal*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IElementTraversal*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_first_element_child(this : IElementTraversal*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_first_element_child.call(this, p)
  end
  def get_last_element_child(this : IElementTraversal*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_last_element_child.call(this, p)
  end
  def get_previous_element_sibling(this : IElementTraversal*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_previous_element_sibling.call(this, p)
  end
  def get_next_element_sibling(this : IElementTraversal*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_next_element_sibling.call(this, p)
  end
  def get_child_element_count(this : IElementTraversal*, p : Int32*) : HRESULT
    @lpVtbl.value.get_child_element_count.call(this, p)
  end
end
struct LibWin32::IHTMLDatabinding
  def query_interface(this : IHTMLDatabinding*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDatabinding*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDatabinding*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDatabinding*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDatabinding*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDatabinding*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDatabinding*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_data_fld(this : IHTMLDatabinding*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data_fld.call(this, v)
  end
  def get_data_fld(this : IHTMLDatabinding*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data_fld.call(this, p)
  end
  def put_data_src(this : IHTMLDatabinding*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data_src.call(this, v)
  end
  def get_data_src(this : IHTMLDatabinding*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data_src.call(this, p)
  end
  def put_data_format_as(this : IHTMLDatabinding*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data_format_as.call(this, v)
  end
  def get_data_format_as(this : IHTMLDatabinding*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data_format_as.call(this, p)
  end
end
struct LibWin32::IHTMLDocument
  def query_interface(this : IHTMLDocument*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_script(this : IHTMLDocument*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_script.call(this, p)
  end
end
struct LibWin32::IHTMLElementDefaults
  def query_interface(this : IHTMLElementDefaults*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementDefaults*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementDefaults*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementDefaults*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementDefaults*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementDefaults*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementDefaults*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_style(this : IHTMLElementDefaults*, p : IHTMLStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
  def put_tab_stop(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_tab_stop.call(this, v)
  end
  def get_tab_stop(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_tab_stop.call(this, p)
  end
  def put_view_inherit_style(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_view_inherit_style.call(this, v)
  end
  def get_view_inherit_style(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_view_inherit_style.call(this, p)
  end
  def put_view_master_tab(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_view_master_tab.call(this, v)
  end
  def get_view_master_tab(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_view_master_tab.call(this, p)
  end
  def put_scroll_segment_x(this : IHTMLElementDefaults*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_segment_x.call(this, v)
  end
  def get_scroll_segment_x(this : IHTMLElementDefaults*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_segment_x.call(this, p)
  end
  def put_scroll_segment_y(this : IHTMLElementDefaults*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_segment_y.call(this, v)
  end
  def get_scroll_segment_y(this : IHTMLElementDefaults*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_segment_y.call(this, p)
  end
  def put_is_multi_line(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_is_multi_line.call(this, v)
  end
  def get_is_multi_line(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_multi_line.call(this, p)
  end
  def put_content_editable(this : IHTMLElementDefaults*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content_editable.call(this, v)
  end
  def get_content_editable(this : IHTMLElementDefaults*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content_editable.call(this, p)
  end
  def put_can_have_html(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_can_have_html.call(this, v)
  end
  def get_can_have_html(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_can_have_html.call(this, p)
  end
  def putref_view_link(this : IHTMLElementDefaults*, v : IHTMLDocument) : HRESULT
    @lpVtbl.value.putref_view_link.call(this, v)
  end
  def get_view_link(this : IHTMLElementDefaults*, p : IHTMLDocument*) : HRESULT
    @lpVtbl.value.get_view_link.call(this, p)
  end
  def put_frozen(this : IHTMLElementDefaults*, v : Int16) : HRESULT
    @lpVtbl.value.put_frozen.call(this, v)
  end
  def get_frozen(this : IHTMLElementDefaults*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frozen.call(this, p)
  end
end
struct LibWin32::DispHTMLDefaults
  def query_interface(this : DispHTMLDefaults*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDefaults*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDefaults*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDefaults*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDefaults*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDefaults*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDefaults*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTCDefaultDispatch
  def query_interface(this : IHTCDefaultDispatch*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCDefaultDispatch*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCDefaultDispatch*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCDefaultDispatch*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCDefaultDispatch*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCDefaultDispatch*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCDefaultDispatch*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_element(this : IHTCDefaultDispatch*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, p)
  end
  def create_event_object(this : IHTCDefaultDispatch*, eventobj : IHTMLEventObj*) : HRESULT
    @lpVtbl.value.create_event_object.call(this, eventobj)
  end
  def get_defaults(this : IHTCDefaultDispatch*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_defaults.call(this, p)
  end
  def get_document(this : IHTCDefaultDispatch*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
end
struct LibWin32::IHTCPropertyBehavior
  def query_interface(this : IHTCPropertyBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCPropertyBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCPropertyBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCPropertyBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCPropertyBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCPropertyBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCPropertyBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def fire_change(this : IHTCPropertyBehavior*) : HRESULT
    @lpVtbl.value.fire_change.call(this)
  end
  def put_value(this : IHTCPropertyBehavior*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTCPropertyBehavior*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::IHTCMethodBehavior
  def query_interface(this : IHTCMethodBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCMethodBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCMethodBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCMethodBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCMethodBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCMethodBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCMethodBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTCEventBehavior
  def query_interface(this : IHTCEventBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCEventBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCEventBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCEventBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCEventBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCEventBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCEventBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def fire(this : IHTCEventBehavior*, pvar : IHTMLEventObj) : HRESULT
    @lpVtbl.value.fire.call(this, pvar)
  end
end
struct LibWin32::IHTCAttachBehavior
  def query_interface(this : IHTCAttachBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCAttachBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCAttachBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCAttachBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCAttachBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCAttachBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCAttachBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def fire_event(this : IHTCAttachBehavior*, evt : IDispatch) : HRESULT
    @lpVtbl.value.fire_event.call(this, evt)
  end
  def detach_event(this : IHTCAttachBehavior*) : HRESULT
    @lpVtbl.value.detach_event.call(this)
  end
end
struct LibWin32::IHTCAttachBehavior2
  def query_interface(this : IHTCAttachBehavior2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCAttachBehavior2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCAttachBehavior2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCAttachBehavior2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCAttachBehavior2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCAttachBehavior2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCAttachBehavior2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def fire_event(this : IHTCAttachBehavior2*, evt : VARIANT) : HRESULT
    @lpVtbl.value.fire_event.call(this, evt)
  end
end
struct LibWin32::IHTCDescBehavior
  def query_interface(this : IHTCDescBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTCDescBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTCDescBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTCDescBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTCDescBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTCDescBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTCDescBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_urn(this : IHTCDescBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_urn.call(this, p)
  end
  def get_name(this : IHTCDescBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
end
struct LibWin32::DispHTCDefaultDispatch
  def query_interface(this : DispHTCDefaultDispatch*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCDefaultDispatch*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCDefaultDispatch*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCDefaultDispatch*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCDefaultDispatch*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCDefaultDispatch*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCDefaultDispatch*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTCPropertyBehavior
  def query_interface(this : DispHTCPropertyBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCPropertyBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCPropertyBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCPropertyBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCPropertyBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCPropertyBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCPropertyBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTCMethodBehavior
  def query_interface(this : DispHTCMethodBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCMethodBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCMethodBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCMethodBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCMethodBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCMethodBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCMethodBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTCEventBehavior
  def query_interface(this : DispHTCEventBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCEventBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCEventBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCEventBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCEventBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCEventBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCEventBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTCAttachBehavior
  def query_interface(this : DispHTCAttachBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCAttachBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCAttachBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCAttachBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCAttachBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCAttachBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCAttachBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTCDescBehavior
  def query_interface(this : DispHTCDescBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTCDescBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTCDescBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTCDescBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTCDescBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTCDescBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTCDescBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLUrnCollection
  def query_interface(this : IHTMLUrnCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLUrnCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLUrnCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLUrnCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLUrnCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLUrnCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLUrnCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLUrnCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLUrnCollection*, index : Int32, ppurn : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, index, ppurn)
  end
end
struct LibWin32::DispHTMLUrnCollection
  def query_interface(this : DispHTMLUrnCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLUrnCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLUrnCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLUrnCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLUrnCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLUrnCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLUrnCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLGenericElement
  def query_interface(this : IHTMLGenericElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLGenericElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLGenericElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLGenericElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLGenericElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLGenericElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLGenericElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_recordset(this : IHTMLGenericElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_recordset.call(this, p)
  end
  def named_recordset(this : IHTMLGenericElement*, datamember : UInt8*, hierarchy : VARIANT*, pprecordset : IDispatch*) : HRESULT
    @lpVtbl.value.named_recordset.call(this, datamember, hierarchy, pprecordset)
  end
end
struct LibWin32::DispHTMLGenericElement
  def query_interface(this : DispHTMLGenericElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLGenericElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLGenericElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLGenericElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLGenericElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLGenericElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLGenericElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetRuleApplied
  def query_interface(this : IHTMLStyleSheetRuleApplied*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRuleApplied*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRuleApplied*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRuleApplied*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRuleApplied*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRuleApplied*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRuleApplied*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ms_specificity(this : IHTMLStyleSheetRuleApplied*, p : Int32*) : HRESULT
    @lpVtbl.value.get_ms_specificity.call(this, p)
  end
  def ms_get_specificity(this : IHTMLStyleSheetRuleApplied*, index : Int32, p : Int32*) : HRESULT
    @lpVtbl.value.ms_get_specificity.call(this, index, p)
  end
end
struct LibWin32::IHTMLStyleSheetRule2
  def query_interface(this : IHTMLStyleSheetRule2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRule2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRule2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRule2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRule2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRule2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRule2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selector_text(this : IHTMLStyleSheetRule2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_selector_text.call(this, v)
  end
  def get_selector_text(this : IHTMLStyleSheetRule2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_selector_text.call(this, p)
  end
end
struct LibWin32::IHTMLStyleSheetRulesCollection2
  def query_interface(this : IHTMLStyleSheetRulesCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRulesCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRulesCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRulesCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRulesCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRulesCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRulesCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLStyleSheetRulesCollection2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLStyleSheetRulesCollection2*, index : Int32, pphtmlcssrule : IHTMLCSSRule*) : HRESULT
    @lpVtbl.value.item.call(this, index, pphtmlcssrule)
  end
end
struct LibWin32::DispHTMLStyleSheetRule
  def query_interface(this : DispHTMLStyleSheetRule*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetRule*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetRule*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetRule*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetRule*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetRule*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetRule*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLStyleSheetRulesCollection
  def query_interface(this : DispHTMLStyleSheetRulesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetRulesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetRulesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetRulesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetRulesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetRulesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetRulesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetPage
  def query_interface(this : IHTMLStyleSheetPage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetPage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetPage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetPage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetPage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetPage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetPage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_selector(this : IHTMLStyleSheetPage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_selector.call(this, p)
  end
  def get_pseudo_class(this : IHTMLStyleSheetPage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pseudo_class.call(this, p)
  end
end
struct LibWin32::IHTMLStyleSheetPage2
  def query_interface(this : IHTMLStyleSheetPage2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetPage2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetPage2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetPage2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetPage2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetPage2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetPage2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selector_text(this : IHTMLStyleSheetPage2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_selector_text.call(this, v)
  end
  def get_selector_text(this : IHTMLStyleSheetPage2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_selector_text.call(this, p)
  end
  def get_style(this : IHTMLStyleSheetPage2*, p : IHTMLRuleStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
end
struct LibWin32::IHTMLStyleSheetPagesCollection
  def query_interface(this : IHTMLStyleSheetPagesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetPagesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetPagesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetPagesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetPagesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetPagesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetPagesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLStyleSheetPagesCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLStyleSheetPagesCollection*, index : Int32, pphtmlstylesheetpage : IHTMLStyleSheetPage*) : HRESULT
    @lpVtbl.value.item.call(this, index, pphtmlstylesheetpage)
  end
end
struct LibWin32::DispHTMLStyleSheetPage
  def query_interface(this : DispHTMLStyleSheetPage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetPage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetPage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetPage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetPage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetPage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetPage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLStyleSheetPagesCollection
  def query_interface(this : DispHTMLStyleSheetPagesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetPagesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetPagesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetPagesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetPagesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetPagesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetPagesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetsCollection
  def query_interface(this : IHTMLStyleSheetsCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetsCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetsCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetsCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetsCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetsCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetsCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLStyleSheetsCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLStyleSheetsCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLStyleSheetsCollection*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
end
struct LibWin32::IHTMLStyleSheet2
  def query_interface(this : IHTMLStyleSheet2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheet2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheet2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheet2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheet2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheet2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheet2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_pages(this : IHTMLStyleSheet2*, p : IHTMLStyleSheetPagesCollection*) : HRESULT
    @lpVtbl.value.get_pages.call(this, p)
  end
  def add_page_rule(this : IHTMLStyleSheet2*, bstrselector : UInt8*, bstrstyle : UInt8*, lindex : Int32, plnewindex : Int32*) : HRESULT
    @lpVtbl.value.add_page_rule.call(this, bstrselector, bstrstyle, lindex, plnewindex)
  end
end
struct LibWin32::IHTMLStyleSheet3
  def query_interface(this : IHTMLStyleSheet3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheet3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheet3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheet3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheet3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheet3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheet3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLStyleSheet3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLStyleSheet3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def get_is_alternate(this : IHTMLStyleSheet3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_alternate.call(this, p)
  end
  def get_is_pref_alternate(this : IHTMLStyleSheet3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_pref_alternate.call(this, p)
  end
end
struct LibWin32::IHTMLStyleSheet4
  def query_interface(this : IHTMLStyleSheet4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheet4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheet4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheet4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheet4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheet4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheet4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLStyleSheet4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_href(this : IHTMLStyleSheet4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def get_title(this : IHTMLStyleSheet4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def get_owner_node(this : IHTMLStyleSheet4*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_owner_node.call(this, p)
  end
  def get_owner_rule(this : IHTMLStyleSheet4*, p : IHTMLCSSRule*) : HRESULT
    @lpVtbl.value.get_owner_rule.call(this, p)
  end
  def get_css_rules(this : IHTMLStyleSheet4*, p : IHTMLStyleSheetRulesCollection*) : HRESULT
    @lpVtbl.value.get_css_rules.call(this, p)
  end
  def get_media(this : IHTMLStyleSheet4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
  def insert_rule(this : IHTMLStyleSheet4*, bstrrule : UInt8*, lindex : Int32, plnewindex : Int32*) : HRESULT
    @lpVtbl.value.insert_rule.call(this, bstrrule, lindex, plnewindex)
  end
  def delete_rule(this : IHTMLStyleSheet4*, lindex : Int32) : HRESULT
    @lpVtbl.value.delete_rule.call(this, lindex)
  end
end
struct LibWin32::DispHTMLStyleSheet
  def query_interface(this : DispHTMLStyleSheet*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheet*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheet*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheet*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheet*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheet*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheet*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetsCollection2
  def query_interface(this : IHTMLStyleSheetsCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetsCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetsCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetsCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetsCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetsCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetsCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IHTMLStyleSheetsCollection2*, index : Int32, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, index, pvarresult)
  end
end
struct LibWin32::DispHTMLStyleSheetsCollection
  def query_interface(this : DispHTMLStyleSheetsCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetsCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetsCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetsCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetsCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetsCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetsCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLLinkElementEvents2
  def query_interface(this : HTMLLinkElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLLinkElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLLinkElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLLinkElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLLinkElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLLinkElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLLinkElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLLinkElementEvents
  def query_interface(this : HTMLLinkElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLLinkElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLLinkElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLLinkElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLLinkElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLLinkElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLLinkElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLLinkElement
  def query_interface(this : IHTMLLinkElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLinkElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLinkElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLinkElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLinkElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLinkElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLinkElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLLinkElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_rel(this : IHTMLLinkElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rel.call(this, v)
  end
  def get_rel(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rel.call(this, p)
  end
  def put_rev(this : IHTMLLinkElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rev.call(this, v)
  end
  def get_rev(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rev.call(this, p)
  end
  def put_type(this : IHTMLLinkElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_ready_state(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLLinkElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLLinkElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onload(this : IHTMLLinkElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLLinkElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onerror(this : IHTMLLinkElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLLinkElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def get_style_sheet(this : IHTMLLinkElement*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_style_sheet.call(this, p)
  end
  def put_disabled(this : IHTMLLinkElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLLinkElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def put_media(this : IHTMLLinkElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLLinkElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
end
struct LibWin32::IHTMLLinkElement2
  def query_interface(this : IHTMLLinkElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLinkElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLinkElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLinkElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLinkElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLinkElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLinkElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_target(this : IHTMLLinkElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_target.call(this, v)
  end
  def get_target(this : IHTMLLinkElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
end
struct LibWin32::IHTMLLinkElement3
  def query_interface(this : IHTMLLinkElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLinkElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLinkElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLinkElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLinkElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLinkElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLinkElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_charset(this : IHTMLLinkElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_charset.call(this, v)
  end
  def get_charset(this : IHTMLLinkElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_charset.call(this, p)
  end
  def put_hreflang(this : IHTMLLinkElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hreflang.call(this, v)
  end
  def get_hreflang(this : IHTMLLinkElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hreflang.call(this, p)
  end
end
struct LibWin32::IHTMLLinkElement4
  def query_interface(this : IHTMLLinkElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLinkElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLinkElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLinkElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLinkElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLinkElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLinkElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLLinkElement4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLLinkElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
end
struct LibWin32::IHTMLLinkElement5
  def query_interface(this : IHTMLLinkElement5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLinkElement5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLinkElement5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLinkElement5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLinkElement5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLinkElement5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLinkElement5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_sheet(this : IHTMLLinkElement5*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_sheet.call(this, p)
  end
end
struct LibWin32::DispHTMLLinkElement
  def query_interface(this : DispHTMLLinkElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLLinkElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLLinkElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLLinkElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLLinkElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLLinkElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLLinkElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLTxtRange
  def query_interface(this : IHTMLTxtRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTxtRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTxtRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTxtRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTxtRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTxtRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTxtRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_html_text(this : IHTMLTxtRange*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_text.call(this, p)
  end
  def put_text(this : IHTMLTxtRange*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLTxtRange*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def parent_element(this : IHTMLTxtRange*, parent : IHTMLElement*) : HRESULT
    @lpVtbl.value.parent_element.call(this, parent)
  end
  def duplicate(this : IHTMLTxtRange*, duplicate : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.duplicate.call(this, duplicate)
  end
  def in_range(this : IHTMLTxtRange*, range : IHTMLTxtRange, inrange : Int16*) : HRESULT
    @lpVtbl.value.in_range.call(this, range, inrange)
  end
  def is_equal(this : IHTMLTxtRange*, range : IHTMLTxtRange, isequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal.call(this, range, isequal)
  end
  def scroll_into_view(this : IHTMLTxtRange*, fstart : Int16) : HRESULT
    @lpVtbl.value.scroll_into_view.call(this, fstart)
  end
  def collapse(this : IHTMLTxtRange*, start : Int16) : HRESULT
    @lpVtbl.value.collapse.call(this, start)
  end
  def expand(this : IHTMLTxtRange*, unit : UInt8*, success : Int16*) : HRESULT
    @lpVtbl.value.expand.call(this, unit, success)
  end
  def move(this : IHTMLTxtRange*, unit : UInt8*, count : Int32, actualcount : Int32*) : HRESULT
    @lpVtbl.value.move.call(this, unit, count, actualcount)
  end
  def move_start(this : IHTMLTxtRange*, unit : UInt8*, count : Int32, actualcount : Int32*) : HRESULT
    @lpVtbl.value.move_start.call(this, unit, count, actualcount)
  end
  def move_end(this : IHTMLTxtRange*, unit : UInt8*, count : Int32, actualcount : Int32*) : HRESULT
    @lpVtbl.value.move_end.call(this, unit, count, actualcount)
  end
  def select(this : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def paste_html(this : IHTMLTxtRange*, html : UInt8*) : HRESULT
    @lpVtbl.value.paste_html.call(this, html)
  end
  def move_to_element_text(this : IHTMLTxtRange*, element : IHTMLElement) : HRESULT
    @lpVtbl.value.move_to_element_text.call(this, element)
  end
  def set_end_point(this : IHTMLTxtRange*, how : UInt8*, sourcerange : IHTMLTxtRange) : HRESULT
    @lpVtbl.value.set_end_point.call(this, how, sourcerange)
  end
  def compare_end_points(this : IHTMLTxtRange*, how : UInt8*, sourcerange : IHTMLTxtRange, ret : Int32*) : HRESULT
    @lpVtbl.value.compare_end_points.call(this, how, sourcerange, ret)
  end
  def find_text(this : IHTMLTxtRange*, string : UInt8*, count : Int32, flags : Int32, success : Int16*) : HRESULT
    @lpVtbl.value.find_text.call(this, string, count, flags, success)
  end
  def move_to_point(this : IHTMLTxtRange*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.move_to_point.call(this, x, y)
  end
  def get_bookmark(this : IHTMLTxtRange*, boolmark : UInt8**) : HRESULT
    @lpVtbl.value.get_bookmark.call(this, boolmark)
  end
  def move_to_bookmark(this : IHTMLTxtRange*, bookmark : UInt8*, success : Int16*) : HRESULT
    @lpVtbl.value.move_to_bookmark.call(this, bookmark, success)
  end
  def query_command_supported(this : IHTMLTxtRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_supported.call(this, cmdid, pfret)
  end
  def query_command_enabled(this : IHTMLTxtRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_enabled.call(this, cmdid, pfret)
  end
  def query_command_state(this : IHTMLTxtRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_state.call(this, cmdid, pfret)
  end
  def query_command_indeterm(this : IHTMLTxtRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_indeterm.call(this, cmdid, pfret)
  end
  def query_command_text(this : IHTMLTxtRange*, cmdid : UInt8*, pcmdtext : UInt8**) : HRESULT
    @lpVtbl.value.query_command_text.call(this, cmdid, pcmdtext)
  end
  def query_command_value(this : IHTMLTxtRange*, cmdid : UInt8*, pcmdvalue : VARIANT*) : HRESULT
    @lpVtbl.value.query_command_value.call(this, cmdid, pcmdvalue)
  end
  def exec_command(this : IHTMLTxtRange*, cmdid : UInt8*, showui : Int16, value : VARIANT, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command.call(this, cmdid, showui, value, pfret)
  end
  def exec_command_show_help(this : IHTMLTxtRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command_show_help.call(this, cmdid, pfret)
  end
end
struct LibWin32::IHTMLTextRangeMetrics
  def query_interface(this : IHTMLTextRangeMetrics*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextRangeMetrics*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextRangeMetrics*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextRangeMetrics*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextRangeMetrics*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextRangeMetrics*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextRangeMetrics*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_offset_top(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_top.call(this, p)
  end
  def get_offset_left(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_left.call(this, p)
  end
  def get_bounding_top(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_bounding_top.call(this, p)
  end
  def get_bounding_left(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_bounding_left.call(this, p)
  end
  def get_bounding_width(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_bounding_width.call(this, p)
  end
  def get_bounding_height(this : IHTMLTextRangeMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_bounding_height.call(this, p)
  end
end
struct LibWin32::IHTMLTextRangeMetrics2
  def query_interface(this : IHTMLTextRangeMetrics2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextRangeMetrics2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextRangeMetrics2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextRangeMetrics2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextRangeMetrics2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextRangeMetrics2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextRangeMetrics2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_client_rects(this : IHTMLTextRangeMetrics2*, prectcol : IHTMLRectCollection*) : HRESULT
    @lpVtbl.value.get_client_rects.call(this, prectcol)
  end
  def get_bounding_client_rect(this : IHTMLTextRangeMetrics2*, prect : IHTMLRect*) : HRESULT
    @lpVtbl.value.get_bounding_client_rect.call(this, prect)
  end
end
struct LibWin32::IHTMLTxtRangeCollection
  def query_interface(this : IHTMLTxtRangeCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTxtRangeCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTxtRangeCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTxtRangeCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTxtRangeCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTxtRangeCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTxtRangeCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLTxtRangeCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLTxtRangeCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLTxtRangeCollection*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
end
struct LibWin32::IHTMLDOMRange
  def query_interface(this : IHTMLDOMRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_container(this : IHTMLDOMRange*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_start_container.call(this, p)
  end
  def get_start_offset(this : IHTMLDOMRange*, p : Int32*) : HRESULT
    @lpVtbl.value.get_start_offset.call(this, p)
  end
  def get_end_container(this : IHTMLDOMRange*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_end_container.call(this, p)
  end
  def get_end_offset(this : IHTMLDOMRange*, p : Int32*) : HRESULT
    @lpVtbl.value.get_end_offset.call(this, p)
  end
  def get_collapsed(this : IHTMLDOMRange*, p : Int16*) : HRESULT
    @lpVtbl.value.get_collapsed.call(this, p)
  end
  def get_common_ancestor_container(this : IHTMLDOMRange*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_common_ancestor_container.call(this, p)
  end
  def set_start(this : IHTMLDOMRange*, refnode : IDispatch, offset : Int32) : HRESULT
    @lpVtbl.value.set_start.call(this, refnode, offset)
  end
  def set_end(this : IHTMLDOMRange*, refnode : IDispatch, offset : Int32) : HRESULT
    @lpVtbl.value.set_end.call(this, refnode, offset)
  end
  def set_start_before(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.set_start_before.call(this, refnode)
  end
  def set_start_after(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.set_start_after.call(this, refnode)
  end
  def set_end_before(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.set_end_before.call(this, refnode)
  end
  def set_end_after(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.set_end_after.call(this, refnode)
  end
  def collapse(this : IHTMLDOMRange*, tostart : Int16) : HRESULT
    @lpVtbl.value.collapse.call(this, tostart)
  end
  def select_node(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.select_node.call(this, refnode)
  end
  def select_node_contents(this : IHTMLDOMRange*, refnode : IDispatch) : HRESULT
    @lpVtbl.value.select_node_contents.call(this, refnode)
  end
  def compare_boundary_points(this : IHTMLDOMRange*, how : Int16, sourcerange : IDispatch, compareresult : Int32*) : HRESULT
    @lpVtbl.value.compare_boundary_points.call(this, how, sourcerange, compareresult)
  end
  def delete_contents(this : IHTMLDOMRange*) : HRESULT
    @lpVtbl.value.delete_contents.call(this)
  end
  def extract_contents(this : IHTMLDOMRange*, ppdocumentfragment : IDispatch*) : HRESULT
    @lpVtbl.value.extract_contents.call(this, ppdocumentfragment)
  end
  def clone_contents(this : IHTMLDOMRange*, ppdocumentfragment : IDispatch*) : HRESULT
    @lpVtbl.value.clone_contents.call(this, ppdocumentfragment)
  end
  def insert_node(this : IHTMLDOMRange*, newnode : IDispatch) : HRESULT
    @lpVtbl.value.insert_node.call(this, newnode)
  end
  def surround_contents(this : IHTMLDOMRange*, newparent : IDispatch) : HRESULT
    @lpVtbl.value.surround_contents.call(this, newparent)
  end
  def clone_range(this : IHTMLDOMRange*, ppclonedrange : IHTMLDOMRange*) : HRESULT
    @lpVtbl.value.clone_range.call(this, ppclonedrange)
  end
  def to_string(this : IHTMLDOMRange*, prangestring : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, prangestring)
  end
  def detach(this : IHTMLDOMRange*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
  def get_client_rects(this : IHTMLDOMRange*, pprectcol : IHTMLRectCollection*) : HRESULT
    @lpVtbl.value.get_client_rects.call(this, pprectcol)
  end
  def get_bounding_client_rect(this : IHTMLDOMRange*, pprect : IHTMLRect*) : HRESULT
    @lpVtbl.value.get_bounding_client_rect.call(this, pprect)
  end
end
struct LibWin32::DispHTMLDOMRange
  def query_interface(this : DispHTMLDOMRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDOMRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDOMRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDOMRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDOMRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDOMRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDOMRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLFormElementEvents2
  def query_interface(this : HTMLFormElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLFormElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLFormElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLFormElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLFormElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLFormElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLFormElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLFormElementEvents
  def query_interface(this : HTMLFormElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLFormElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLFormElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLFormElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLFormElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLFormElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLFormElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFormElement
  def query_interface(this : IHTMLFormElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFormElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFormElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFormElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFormElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFormElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFormElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_action(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_action.call(this, v)
  end
  def get_action(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_action.call(this, p)
  end
  def put_dir(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dir.call(this, v)
  end
  def get_dir(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dir.call(this, p)
  end
  def put_encoding(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_encoding.call(this, v)
  end
  def get_encoding(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_encoding.call(this, p)
  end
  def put_method(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_method.call(this, v)
  end
  def get_method(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_method.call(this, p)
  end
  def get_elements(this : IHTMLFormElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_elements.call(this, p)
  end
  def put_target(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_target.call(this, v)
  end
  def get_target(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
  def put_name(this : IHTMLFormElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLFormElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_onsubmit(this : IHTMLFormElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsubmit.call(this, v)
  end
  def get_onsubmit(this : IHTMLFormElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsubmit.call(this, p)
  end
  def put_onreset(this : IHTMLFormElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreset.call(this, v)
  end
  def get_onreset(this : IHTMLFormElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreset.call(this, p)
  end
  def submit(this : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.submit.call(this)
  end
  def reset(this : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def put_length(this : IHTMLFormElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_length.call(this, v)
  end
  def get_length(this : IHTMLFormElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLFormElement*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLFormElement*, name : VARIANT, index : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, name, index, pdisp)
  end
  def tags(this : IHTMLFormElement*, tagname : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.tags.call(this, tagname, pdisp)
  end
end
struct LibWin32::IHTMLFormElement2
  def query_interface(this : IHTMLFormElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFormElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFormElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFormElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFormElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFormElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFormElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_accept_charset(this : IHTMLFormElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_accept_charset.call(this, v)
  end
  def get_accept_charset(this : IHTMLFormElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accept_charset.call(this, p)
  end
  def urns(this : IHTMLFormElement2*, urn : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.urns.call(this, urn, pdisp)
  end
end
struct LibWin32::IHTMLFormElement3
  def query_interface(this : IHTMLFormElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFormElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFormElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFormElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFormElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFormElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFormElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def named_item(this : IHTMLFormElement3*, name : UInt8*, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pdisp)
  end
end
struct LibWin32::IHTMLSubmitData
  def query_interface(this : IHTMLSubmitData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSubmitData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSubmitData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSubmitData*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSubmitData*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSubmitData*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSubmitData*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def append_name_value_pair(this : IHTMLSubmitData*, name : UInt8*, value : UInt8*) : HRESULT
    @lpVtbl.value.append_name_value_pair.call(this, name, value)
  end
  def append_name_file_pair(this : IHTMLSubmitData*, name : UInt8*, filename : UInt8*) : HRESULT
    @lpVtbl.value.append_name_file_pair.call(this, name, filename)
  end
  def append_item_separator(this : IHTMLSubmitData*) : HRESULT
    @lpVtbl.value.append_item_separator.call(this)
  end
end
struct LibWin32::IHTMLFormElement4
  def query_interface(this : IHTMLFormElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFormElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFormElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFormElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFormElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFormElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFormElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_action(this : IHTMLFormElement4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_action.call(this, v)
  end
  def get_action(this : IHTMLFormElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_action.call(this, p)
  end
end
struct LibWin32::DispHTMLFormElement
  def query_interface(this : DispHTMLFormElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFormElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFormElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFormElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFormElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFormElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFormElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLControlElementEvents2
  def query_interface(this : HTMLControlElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLControlElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLControlElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLControlElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLControlElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLControlElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLControlElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLControlElementEvents
  def query_interface(this : HTMLControlElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLControlElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLControlElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLControlElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLControlElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLControlElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLControlElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLControlElement
  def query_interface(this : IHTMLControlElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLControlElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLControlElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLControlElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLControlElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLControlElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLControlElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_tab_index(this : IHTMLControlElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_tab_index.call(this, v)
  end
  def get_tab_index(this : IHTMLControlElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_tab_index.call(this, p)
  end
  def focus(this : IHTMLControlElement*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def put_access_key(this : IHTMLControlElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_access_key.call(this, v)
  end
  def get_access_key(this : IHTMLControlElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_access_key.call(this, p)
  end
  def put_onblur(this : IHTMLControlElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLControlElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_onfocus(this : IHTMLControlElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLControlElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_onresize(this : IHTMLControlElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onresize.call(this, v)
  end
  def get_onresize(this : IHTMLControlElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onresize.call(this, p)
  end
  def blur(this : IHTMLControlElement*) : HRESULT
    @lpVtbl.value.blur.call(this)
  end
  def add_filter(this : IHTMLControlElement*, punk : IUnknown) : HRESULT
    @lpVtbl.value.add_filter.call(this, punk)
  end
  def remove_filter(this : IHTMLControlElement*, punk : IUnknown) : HRESULT
    @lpVtbl.value.remove_filter.call(this, punk)
  end
  def get_client_height(this : IHTMLControlElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_height.call(this, p)
  end
  def get_client_width(this : IHTMLControlElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_width.call(this, p)
  end
  def get_client_top(this : IHTMLControlElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_top.call(this, p)
  end
  def get_client_left(this : IHTMLControlElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_left.call(this, p)
  end
end
struct LibWin32::IHTMLTextElement
  def query_interface(this : IHTMLTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTextElement
  def query_interface(this : DispHTMLTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLTextContainerEvents2
  def query_interface(this : HTMLTextContainerEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLTextContainerEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLTextContainerEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLTextContainerEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLTextContainerEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLTextContainerEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLTextContainerEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLTextContainerEvents
  def query_interface(this : HTMLTextContainerEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLTextContainerEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLTextContainerEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLTextContainerEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLTextContainerEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLTextContainerEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLTextContainerEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLTextContainer
  def query_interface(this : IHTMLTextContainer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextContainer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextContainer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextContainer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextContainer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextContainer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextContainer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_control_range(this : IHTMLTextContainer*, range : IDispatch*) : HRESULT
    @lpVtbl.value.create_control_range.call(this, range)
  end
  def get_scroll_height(this : IHTMLTextContainer*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_height.call(this, p)
  end
  def get_scroll_width(this : IHTMLTextContainer*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_width.call(this, p)
  end
  def put_scroll_top(this : IHTMLTextContainer*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_top.call(this, v)
  end
  def get_scroll_top(this : IHTMLTextContainer*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_top.call(this, p)
  end
  def put_scroll_left(this : IHTMLTextContainer*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_left.call(this, v)
  end
  def get_scroll_left(this : IHTMLTextContainer*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_left.call(this, p)
  end
  def put_onscroll(this : IHTMLTextContainer*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onscroll.call(this, v)
  end
  def get_onscroll(this : IHTMLTextContainer*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onscroll.call(this, p)
  end
end
struct LibWin32::IHTMLControlRange
  def query_interface(this : IHTMLControlRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLControlRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLControlRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLControlRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLControlRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLControlRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLControlRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def select(this : IHTMLControlRange*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def add(this : IHTMLControlRange*, item : IHTMLControlElement) : HRESULT
    @lpVtbl.value.add.call(this, item)
  end
  def remove(this : IHTMLControlRange*, index : Int32) : HRESULT
    @lpVtbl.value.remove.call(this, index)
  end
  def item(this : IHTMLControlRange*, index : Int32, pdisp : IHTMLElement*) : HRESULT
    @lpVtbl.value.item.call(this, index, pdisp)
  end
  def scroll_into_view(this : IHTMLControlRange*, varargstart : VARIANT) : HRESULT
    @lpVtbl.value.scroll_into_view.call(this, varargstart)
  end
  def query_command_supported(this : IHTMLControlRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_supported.call(this, cmdid, pfret)
  end
  def query_command_enabled(this : IHTMLControlRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_enabled.call(this, cmdid, pfret)
  end
  def query_command_state(this : IHTMLControlRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_state.call(this, cmdid, pfret)
  end
  def query_command_indeterm(this : IHTMLControlRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_indeterm.call(this, cmdid, pfret)
  end
  def query_command_text(this : IHTMLControlRange*, cmdid : UInt8*, pcmdtext : UInt8**) : HRESULT
    @lpVtbl.value.query_command_text.call(this, cmdid, pcmdtext)
  end
  def query_command_value(this : IHTMLControlRange*, cmdid : UInt8*, pcmdvalue : VARIANT*) : HRESULT
    @lpVtbl.value.query_command_value.call(this, cmdid, pcmdvalue)
  end
  def exec_command(this : IHTMLControlRange*, cmdid : UInt8*, showui : Int16, value : VARIANT, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command.call(this, cmdid, showui, value, pfret)
  end
  def exec_command_show_help(this : IHTMLControlRange*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command_show_help.call(this, cmdid, pfret)
  end
  def common_parent_element(this : IHTMLControlRange*, parent : IHTMLElement*) : HRESULT
    @lpVtbl.value.common_parent_element.call(this, parent)
  end
  def get_length(this : IHTMLControlRange*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::IHTMLControlRange2
  def query_interface(this : IHTMLControlRange2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLControlRange2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLControlRange2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLControlRange2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLControlRange2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLControlRange2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLControlRange2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_element(this : IHTMLControlRange2*, item : IHTMLElement) : HRESULT
    @lpVtbl.value.add_element.call(this, item)
  end
end
struct LibWin32::HTMLImgEvents2
  def query_interface(this : HTMLImgEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLImgEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLImgEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLImgEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLImgEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLImgEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLImgEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLImgEvents
  def query_interface(this : HTMLImgEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLImgEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLImgEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLImgEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLImgEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLImgEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLImgEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLImgElement
  def query_interface(this : IHTMLImgElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLImgElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLImgElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLImgElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLImgElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLImgElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLImgElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_is_map(this : IHTMLImgElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_is_map.call(this, v)
  end
  def get_is_map(this : IHTMLImgElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_map.call(this, p)
  end
  def put_use_map(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_use_map.call(this, v)
  end
  def get_use_map(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_use_map.call(this, p)
  end
  def get_mime_type(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_mime_type.call(this, p)
  end
  def get_file_size(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_size.call(this, p)
  end
  def get_file_created_date(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_created_date.call(this, p)
  end
  def get_file_modified_date(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_modified_date.call(this, p)
  end
  def get_file_updated_date(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_updated_date.call(this, p)
  end
  def get_protocol(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol.call(this, p)
  end
  def get_href(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def get_name_prop(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name_prop.call(this, p)
  end
  def put_border(this : IHTMLImgElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLImgElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_vspace(this : IHTMLImgElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLImgElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLImgElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLImgElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
  def put_alt(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_src(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_lowsrc(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lowsrc.call(this, v)
  end
  def get_lowsrc(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lowsrc.call(this, p)
  end
  def put_vrml(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_vrml.call(this, v)
  end
  def get_vrml(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_vrml.call(this, p)
  end
  def put_dynsrc(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dynsrc.call(this, v)
  end
  def get_dynsrc(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dynsrc.call(this, p)
  end
  def get_ready_state(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def get_complete(this : IHTMLImgElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_complete.call(this, p)
  end
  def put_loop(this : IHTMLImgElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLImgElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def put_align(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_onload(this : IHTMLImgElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLImgElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onerror(this : IHTMLImgElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLImgElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onabort(this : IHTMLImgElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLImgElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_name(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_width(this : IHTMLImgElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLImgElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLImgElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLImgElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_start(this : IHTMLImgElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_start.call(this, v)
  end
  def get_start(this : IHTMLImgElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_start.call(this, p)
  end
end
struct LibWin32::IHTMLImgElement2
  def query_interface(this : IHTMLImgElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLImgElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLImgElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLImgElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLImgElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLImgElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLImgElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_long_desc(this : IHTMLImgElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_long_desc.call(this, v)
  end
  def get_long_desc(this : IHTMLImgElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_long_desc.call(this, p)
  end
end
struct LibWin32::IHTMLImgElement3
  def query_interface(this : IHTMLImgElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLImgElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLImgElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLImgElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLImgElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLImgElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLImgElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_long_desc(this : IHTMLImgElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_long_desc.call(this, v)
  end
  def get_long_desc(this : IHTMLImgElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_long_desc.call(this, p)
  end
  def put_vrml(this : IHTMLImgElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_vrml.call(this, v)
  end
  def get_vrml(this : IHTMLImgElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_vrml.call(this, p)
  end
  def put_lowsrc(this : IHTMLImgElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lowsrc.call(this, v)
  end
  def get_lowsrc(this : IHTMLImgElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lowsrc.call(this, p)
  end
  def put_dynsrc(this : IHTMLImgElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dynsrc.call(this, v)
  end
  def get_dynsrc(this : IHTMLImgElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dynsrc.call(this, p)
  end
end
struct LibWin32::IHTMLImgElement4
  def query_interface(this : IHTMLImgElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLImgElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLImgElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLImgElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLImgElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLImgElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLImgElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_natural_width(this : IHTMLImgElement4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_natural_width.call(this, p)
  end
  def get_natural_height(this : IHTMLImgElement4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_natural_height.call(this, p)
  end
end
struct LibWin32::IHTMLMSImgElement
  def query_interface(this : IHTMLMSImgElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMSImgElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMSImgElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMSImgElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMSImgElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMSImgElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMSImgElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ms_play_to_disabled(this : IHTMLMSImgElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_ms_play_to_disabled.call(this, v)
  end
  def get_ms_play_to_disabled(this : IHTMLMSImgElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ms_play_to_disabled.call(this, p)
  end
  def put_ms_play_to_primary(this : IHTMLMSImgElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_ms_play_to_primary.call(this, v)
  end
  def get_ms_play_to_primary(this : IHTMLMSImgElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ms_play_to_primary.call(this, p)
  end
end
struct LibWin32::IHTMLImageElementFactory
  def query_interface(this : IHTMLImageElementFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLImageElementFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLImageElementFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLImageElementFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLImageElementFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLImageElementFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLImageElementFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IHTMLImageElementFactory*, width : VARIANT, height : VARIANT, midl__ihtmlimageelementfactory0000 : IHTMLImgElement*) : HRESULT
    @lpVtbl.value.create.call(this, width, height, midl__ihtmlimageelementfactory0000)
  end
end
struct LibWin32::DispHTMLImg
  def query_interface(this : DispHTMLImg*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLImg*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLImg*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLImg*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLImg*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLImg*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLImg*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBodyElement
  def query_interface(this : IHTMLBodyElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBodyElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBodyElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBodyElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBodyElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBodyElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBodyElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_background(this : IHTMLBodyElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLBodyElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_bg_properties(this : IHTMLBodyElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_bg_properties.call(this, v)
  end
  def get_bg_properties(this : IHTMLBodyElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_bg_properties.call(this, p)
  end
  def put_left_margin(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_left_margin.call(this, v)
  end
  def get_left_margin(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_left_margin.call(this, p)
  end
  def put_top_margin(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_top_margin.call(this, v)
  end
  def get_top_margin(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_top_margin.call(this, p)
  end
  def put_right_margin(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_right_margin.call(this, v)
  end
  def get_right_margin(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_right_margin.call(this, p)
  end
  def put_bottom_margin(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bottom_margin.call(this, v)
  end
  def get_bottom_margin(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bottom_margin.call(this, p)
  end
  def put_no_wrap(this : IHTMLBodyElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_wrap.call(this, v)
  end
  def get_no_wrap(this : IHTMLBodyElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_wrap.call(this, p)
  end
  def put_bg_color(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_text(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def put_link(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_link.call(this, v)
  end
  def get_link(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_link.call(this, p)
  end
  def put_v_link(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_v_link.call(this, v)
  end
  def get_v_link(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_v_link.call(this, p)
  end
  def put_a_link(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_a_link.call(this, v)
  end
  def get_a_link(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_a_link.call(this, p)
  end
  def put_onload(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onunload(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onunload.call(this, v)
  end
  def get_onunload(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onunload.call(this, p)
  end
  def put_scroll(this : IHTMLBodyElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scroll.call(this, v)
  end
  def get_scroll(this : IHTMLBodyElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scroll.call(this, p)
  end
  def put_onselect(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_onbeforeunload(this : IHTMLBodyElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeunload.call(this, v)
  end
  def get_onbeforeunload(this : IHTMLBodyElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeunload.call(this, p)
  end
  def create_text_range(this : IHTMLBodyElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLBodyElement2
  def query_interface(this : IHTMLBodyElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBodyElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBodyElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBodyElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBodyElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBodyElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBodyElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onbeforeprint(this : IHTMLBodyElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeprint.call(this, v)
  end
  def get_onbeforeprint(this : IHTMLBodyElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeprint.call(this, p)
  end
  def put_onafterprint(this : IHTMLBodyElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onafterprint.call(this, v)
  end
  def get_onafterprint(this : IHTMLBodyElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onafterprint.call(this, p)
  end
end
struct LibWin32::IHTMLBodyElement3
  def query_interface(this : IHTMLBodyElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBodyElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBodyElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBodyElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBodyElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBodyElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBodyElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_background(this : IHTMLBodyElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLBodyElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_ononline(this : IHTMLBodyElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ononline.call(this, v)
  end
  def get_ononline(this : IHTMLBodyElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ononline.call(this, p)
  end
  def put_onoffline(this : IHTMLBodyElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onoffline.call(this, v)
  end
  def get_onoffline(this : IHTMLBodyElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onoffline.call(this, p)
  end
  def put_onhashchange(this : IHTMLBodyElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhashchange.call(this, v)
  end
  def get_onhashchange(this : IHTMLBodyElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhashchange.call(this, p)
  end
end
struct LibWin32::IHTMLBodyElement4
  def query_interface(this : IHTMLBodyElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBodyElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBodyElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBodyElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBodyElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBodyElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBodyElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmessage(this : IHTMLBodyElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmessage.call(this, v)
  end
  def get_onmessage(this : IHTMLBodyElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmessage.call(this, p)
  end
  def put_onstorage(this : IHTMLBodyElement4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstorage.call(this, v)
  end
  def get_onstorage(this : IHTMLBodyElement4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstorage.call(this, p)
  end
end
struct LibWin32::IHTMLBodyElement5
  def query_interface(this : IHTMLBodyElement5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBodyElement5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBodyElement5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBodyElement5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBodyElement5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBodyElement5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBodyElement5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onpopstate(this : IHTMLBodyElement5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpopstate.call(this, v)
  end
  def get_onpopstate(this : IHTMLBodyElement5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpopstate.call(this, p)
  end
end
struct LibWin32::DispHTMLBody
  def query_interface(this : DispHTMLBody*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBody*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBody*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBody*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBody*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBody*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBody*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFontElement
  def query_interface(this : IHTMLFontElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFontElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFontElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFontElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFontElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFontElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFontElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_color(this : IHTMLFontElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLFontElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_face(this : IHTMLFontElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_face.call(this, v)
  end
  def get_face(this : IHTMLFontElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_face.call(this, p)
  end
  def put_size(this : IHTMLFontElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLFontElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
end
struct LibWin32::DispHTMLFontElement
  def query_interface(this : DispHTMLFontElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFontElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFontElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFontElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFontElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFontElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFontElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLAnchorEvents2
  def query_interface(this : HTMLAnchorEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLAnchorEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLAnchorEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLAnchorEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLAnchorEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLAnchorEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLAnchorEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLAnchorEvents
  def query_interface(this : HTMLAnchorEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLAnchorEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLAnchorEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLAnchorEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLAnchorEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLAnchorEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLAnchorEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLAnchorElement
  def query_interface(this : IHTMLAnchorElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAnchorElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAnchorElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAnchorElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAnchorElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAnchorElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAnchorElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_target(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_target.call(this, v)
  end
  def get_target(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
  def put_rel(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rel.call(this, v)
  end
  def get_rel(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rel.call(this, p)
  end
  def put_rev(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rev.call(this, v)
  end
  def get_rev(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rev.call(this, p)
  end
  def put_urn(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_urn.call(this, v)
  end
  def get_urn(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_urn.call(this, p)
  end
  def put_methods(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_methods.call(this, v)
  end
  def get_methods(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_methods.call(this, p)
  end
  def put_name(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_host(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_host.call(this, v)
  end
  def get_host(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_host.call(this, p)
  end
  def put_hostname(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hostname.call(this, v)
  end
  def get_hostname(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hostname.call(this, p)
  end
  def put_pathname(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_pathname.call(this, v)
  end
  def get_pathname(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pathname.call(this, p)
  end
  def put_port(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_port.call(this, v)
  end
  def get_port(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_port.call(this, p)
  end
  def put_protocol(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_protocol.call(this, v)
  end
  def get_protocol(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol.call(this, p)
  end
  def put_search(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_search.call(this, v)
  end
  def get_search(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_search.call(this, p)
  end
  def put_hash(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hash.call(this, v)
  end
  def get_hash(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hash.call(this, p)
  end
  def put_onblur(this : IHTMLAnchorElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLAnchorElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_onfocus(this : IHTMLAnchorElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLAnchorElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_access_key(this : IHTMLAnchorElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_access_key.call(this, v)
  end
  def get_access_key(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_access_key.call(this, p)
  end
  def get_protocol_long(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol_long.call(this, p)
  end
  def get_mime_type(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_mime_type.call(this, p)
  end
  def get_name_prop(this : IHTMLAnchorElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name_prop.call(this, p)
  end
  def put_tab_index(this : IHTMLAnchorElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_tab_index.call(this, v)
  end
  def get_tab_index(this : IHTMLAnchorElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_tab_index.call(this, p)
  end
  def focus(this : IHTMLAnchorElement*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def blur(this : IHTMLAnchorElement*) : HRESULT
    @lpVtbl.value.blur.call(this)
  end
end
struct LibWin32::IHTMLAnchorElement2
  def query_interface(this : IHTMLAnchorElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAnchorElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAnchorElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAnchorElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAnchorElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAnchorElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAnchorElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_charset(this : IHTMLAnchorElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_charset.call(this, v)
  end
  def get_charset(this : IHTMLAnchorElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_charset.call(this, p)
  end
  def put_coords(this : IHTMLAnchorElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_coords.call(this, v)
  end
  def get_coords(this : IHTMLAnchorElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_coords.call(this, p)
  end
  def put_hreflang(this : IHTMLAnchorElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hreflang.call(this, v)
  end
  def get_hreflang(this : IHTMLAnchorElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hreflang.call(this, p)
  end
  def put_shape(this : IHTMLAnchorElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_shape.call(this, v)
  end
  def get_shape(this : IHTMLAnchorElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_shape.call(this, p)
  end
  def put_type(this : IHTMLAnchorElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLAnchorElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::IHTMLAnchorElement3
  def query_interface(this : IHTMLAnchorElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAnchorElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAnchorElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAnchorElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAnchorElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAnchorElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAnchorElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_shape(this : IHTMLAnchorElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_shape.call(this, v)
  end
  def get_shape(this : IHTMLAnchorElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_shape.call(this, p)
  end
  def put_coords(this : IHTMLAnchorElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_coords.call(this, v)
  end
  def get_coords(this : IHTMLAnchorElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_coords.call(this, p)
  end
  def put_href(this : IHTMLAnchorElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLAnchorElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
end
struct LibWin32::DispHTMLAnchorElement
  def query_interface(this : DispHTMLAnchorElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAnchorElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAnchorElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAnchorElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAnchorElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAnchorElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAnchorElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLLabelEvents2
  def query_interface(this : HTMLLabelEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLLabelEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLLabelEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLLabelEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLLabelEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLLabelEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLLabelEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLLabelEvents
  def query_interface(this : HTMLLabelEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLLabelEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLLabelEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLLabelEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLLabelEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLLabelEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLLabelEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLLabelElement
  def query_interface(this : IHTMLLabelElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLabelElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLabelElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLabelElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLabelElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLabelElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLabelElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_html_for(this : IHTMLLabelElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_html_for.call(this, v)
  end
  def get_html_for(this : IHTMLLabelElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_for.call(this, p)
  end
  def put_access_key(this : IHTMLLabelElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_access_key.call(this, v)
  end
  def get_access_key(this : IHTMLLabelElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_access_key.call(this, p)
  end
end
struct LibWin32::IHTMLLabelElement2
  def query_interface(this : IHTMLLabelElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLabelElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLabelElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLabelElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLabelElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLabelElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLabelElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_form(this : IHTMLLabelElement2*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::DispHTMLLabelElement
  def query_interface(this : DispHTMLLabelElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLLabelElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLLabelElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLLabelElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLLabelElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLLabelElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLLabelElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLListElement
  def query_interface(this : IHTMLListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLListElement2
  def query_interface(this : IHTMLListElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLListElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLListElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLListElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLListElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLListElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLListElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_compact(this : IHTMLListElement2*, v : Int16) : HRESULT
    @lpVtbl.value.put_compact.call(this, v)
  end
  def get_compact(this : IHTMLListElement2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_compact.call(this, p)
  end
end
struct LibWin32::DispHTMLListElement
  def query_interface(this : DispHTMLListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLUListElement
  def query_interface(this : IHTMLUListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLUListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLUListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLUListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLUListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLUListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLUListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_compact(this : IHTMLUListElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_compact.call(this, v)
  end
  def get_compact(this : IHTMLUListElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_compact.call(this, p)
  end
  def put_type(this : IHTMLUListElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLUListElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::DispHTMLUListElement
  def query_interface(this : DispHTMLUListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLUListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLUListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLUListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLUListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLUListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLUListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLOListElement
  def query_interface(this : IHTMLOListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_compact(this : IHTMLOListElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_compact.call(this, v)
  end
  def get_compact(this : IHTMLOListElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_compact.call(this, p)
  end
  def put_start(this : IHTMLOListElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_start.call(this, v)
  end
  def get_start(this : IHTMLOListElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_start.call(this, p)
  end
  def put_type(this : IHTMLOListElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLOListElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::DispHTMLOListElement
  def query_interface(this : DispHTMLOListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLOListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLOListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLOListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLOListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLOListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLOListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLLIElement
  def query_interface(this : IHTMLLIElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLIElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLIElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLIElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLIElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLIElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLIElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : IHTMLLIElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLLIElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLLIElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLLIElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::DispHTMLLIElement
  def query_interface(this : DispHTMLLIElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLLIElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLLIElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLLIElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLLIElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLLIElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLLIElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBlockElement
  def query_interface(this : IHTMLBlockElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBlockElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBlockElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBlockElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBlockElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBlockElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBlockElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_clear(this : IHTMLBlockElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clear.call(this, v)
  end
  def get_clear(this : IHTMLBlockElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
end
struct LibWin32::IHTMLBlockElement2
  def query_interface(this : IHTMLBlockElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBlockElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBlockElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBlockElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBlockElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBlockElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBlockElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_cite(this : IHTMLBlockElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cite.call(this, v)
  end
  def get_cite(this : IHTMLBlockElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cite.call(this, p)
  end
  def put_width(this : IHTMLBlockElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLBlockElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
end
struct LibWin32::IHTMLBlockElement3
  def query_interface(this : IHTMLBlockElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBlockElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBlockElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBlockElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBlockElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBlockElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBlockElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_cite(this : IHTMLBlockElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cite.call(this, v)
  end
  def get_cite(this : IHTMLBlockElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cite.call(this, p)
  end
end
struct LibWin32::DispHTMLBlockElement
  def query_interface(this : DispHTMLBlockElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBlockElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBlockElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBlockElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBlockElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBlockElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBlockElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDivElement
  def query_interface(this : IHTMLDivElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDivElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDivElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDivElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDivElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDivElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDivElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLDivElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLDivElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_no_wrap(this : IHTMLDivElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_wrap.call(this, v)
  end
  def get_no_wrap(this : IHTMLDivElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_wrap.call(this, p)
  end
end
struct LibWin32::DispHTMLDivElement
  def query_interface(this : DispHTMLDivElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDivElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDivElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDivElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDivElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDivElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDivElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDDElement
  def query_interface(this : IHTMLDDElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDDElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDDElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDDElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDDElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDDElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDDElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_no_wrap(this : IHTMLDDElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_wrap.call(this, v)
  end
  def get_no_wrap(this : IHTMLDDElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_wrap.call(this, p)
  end
end
struct LibWin32::DispHTMLDDElement
  def query_interface(this : DispHTMLDDElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDDElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDDElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDDElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDDElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDDElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDDElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDTElement
  def query_interface(this : IHTMLDTElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDTElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDTElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDTElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDTElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDTElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDTElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_no_wrap(this : IHTMLDTElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_wrap.call(this, v)
  end
  def get_no_wrap(this : IHTMLDTElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_wrap.call(this, p)
  end
end
struct LibWin32::DispHTMLDTElement
  def query_interface(this : DispHTMLDTElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDTElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDTElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDTElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDTElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDTElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDTElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBRElement
  def query_interface(this : IHTMLBRElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBRElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBRElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBRElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBRElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBRElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBRElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_clear(this : IHTMLBRElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_clear.call(this, v)
  end
  def get_clear(this : IHTMLBRElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_clear.call(this, p)
  end
end
struct LibWin32::DispHTMLBRElement
  def query_interface(this : DispHTMLBRElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBRElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBRElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBRElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBRElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBRElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBRElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDListElement
  def query_interface(this : IHTMLDListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_compact(this : IHTMLDListElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_compact.call(this, v)
  end
  def get_compact(this : IHTMLDListElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_compact.call(this, p)
  end
end
struct LibWin32::DispHTMLDListElement
  def query_interface(this : DispHTMLDListElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDListElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDListElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDListElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDListElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDListElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDListElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLHRElement
  def query_interface(this : IHTMLHRElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLHRElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLHRElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLHRElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLHRElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLHRElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLHRElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLHRElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLHRElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_color(this : IHTMLHRElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLHRElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_no_shade(this : IHTMLHRElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_shade.call(this, v)
  end
  def get_no_shade(this : IHTMLHRElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_shade.call(this, p)
  end
  def put_width(this : IHTMLHRElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLHRElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_size(this : IHTMLHRElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLHRElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
end
struct LibWin32::DispHTMLHRElement
  def query_interface(this : DispHTMLHRElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLHRElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLHRElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLHRElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLHRElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLHRElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLHRElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLParaElement
  def query_interface(this : IHTMLParaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLParaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLParaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLParaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLParaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLParaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLParaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLParaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLParaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::DispHTMLParaElement
  def query_interface(this : DispHTMLParaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLParaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLParaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLParaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLParaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLParaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLParaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLElementCollection2
  def query_interface(this : IHTMLElementCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def urns(this : IHTMLElementCollection2*, urn : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.urns.call(this, urn, pdisp)
  end
end
struct LibWin32::IHTMLElementCollection3
  def query_interface(this : IHTMLElementCollection3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementCollection3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementCollection3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementCollection3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementCollection3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementCollection3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementCollection3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def named_item(this : IHTMLElementCollection3*, name : UInt8*, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pdisp)
  end
end
struct LibWin32::IHTMLElementCollection4
  def query_interface(this : IHTMLElementCollection4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLElementCollection4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLElementCollection4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLElementCollection4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLElementCollection4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLElementCollection4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLElementCollection4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLElementCollection4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLElementCollection4*, index : Int32, pnode : IHTMLElement2*) : HRESULT
    @lpVtbl.value.item.call(this, index, pnode)
  end
  def named_item(this : IHTMLElementCollection4*, name : UInt8*, pnode : IHTMLElement2*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pnode)
  end
end
struct LibWin32::DispHTMLElementCollection
  def query_interface(this : DispHTMLElementCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLElementCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLElementCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLElementCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLElementCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLElementCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLElementCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLHeaderElement
  def query_interface(this : IHTMLHeaderElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLHeaderElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLHeaderElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLHeaderElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLHeaderElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLHeaderElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLHeaderElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLHeaderElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLHeaderElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::DispHTMLHeaderElement
  def query_interface(this : DispHTMLHeaderElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLHeaderElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLHeaderElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLHeaderElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLHeaderElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLHeaderElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLHeaderElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLSelectElementEvents2
  def query_interface(this : HTMLSelectElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLSelectElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLSelectElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLSelectElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLSelectElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLSelectElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLSelectElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLSelectElementEvents
  def query_interface(this : HTMLSelectElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLSelectElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLSelectElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLSelectElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLSelectElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLSelectElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLSelectElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLOptionElement
  def query_interface(this : IHTMLOptionElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selected(this : IHTMLOptionElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_selected.call(this, v)
  end
  def get_selected(this : IHTMLOptionElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selected.call(this, p)
  end
  def put_value(this : IHTMLOptionElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLOptionElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_default_selected(this : IHTMLOptionElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_default_selected.call(this, v)
  end
  def get_default_selected(this : IHTMLOptionElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_default_selected.call(this, p)
  end
  def put_index(this : IHTMLOptionElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_index.call(this, v)
  end
  def get_index(this : IHTMLOptionElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_index.call(this, p)
  end
  def put_text(this : IHTMLOptionElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLOptionElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def get_form(this : IHTMLOptionElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::IHTMLSelectElementEx
  def query_interface(this : IHTMLSelectElementEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElementEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElementEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def show_dropdown(this : IHTMLSelectElementEx*, fshow : LibC::BOOL) : HRESULT
    @lpVtbl.value.show_dropdown.call(this, fshow)
  end
  def set_select_ex_flags(this : IHTMLSelectElementEx*, lflags : UInt32) : HRESULT
    @lpVtbl.value.set_select_ex_flags.call(this, lflags)
  end
  def get_select_ex_flags(this : IHTMLSelectElementEx*, pflags : UInt32*) : HRESULT
    @lpVtbl.value.get_select_ex_flags.call(this, pflags)
  end
  def get_dropdown_open(this : IHTMLSelectElementEx*, pfopen : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_dropdown_open.call(this, pfopen)
  end
end
struct LibWin32::IHTMLSelectElement
  def query_interface(this : IHTMLSelectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_size(this : IHTMLSelectElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLSelectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
  def put_multiple(this : IHTMLSelectElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_multiple.call(this, v)
  end
  def get_multiple(this : IHTMLSelectElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_multiple.call(this, p)
  end
  def put_name(this : IHTMLSelectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLSelectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def get_options(this : IHTMLSelectElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_options.call(this, p)
  end
  def put_onchange(this : IHTMLSelectElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLSelectElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_selected_index(this : IHTMLSelectElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_selected_index.call(this, v)
  end
  def get_selected_index(this : IHTMLSelectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_selected_index.call(this, p)
  end
  def get_type(this : IHTMLSelectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLSelectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLSelectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_disabled(this : IHTMLSelectElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLSelectElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLSelectElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def add(this : IHTMLSelectElement*, element : IHTMLElement, before : VARIANT) : HRESULT
    @lpVtbl.value.add.call(this, element, before)
  end
  def remove(this : IHTMLSelectElement*, index : Int32) : HRESULT
    @lpVtbl.value.remove.call(this, index)
  end
  def put_length(this : IHTMLSelectElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_length.call(this, v)
  end
  def get_length(this : IHTMLSelectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLSelectElement*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLSelectElement*, name : VARIANT, index : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, name, index, pdisp)
  end
  def tags(this : IHTMLSelectElement*, tagname : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.tags.call(this, tagname, pdisp)
  end
end
struct LibWin32::IHTMLSelectElement2
  def query_interface(this : IHTMLSelectElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def urns(this : IHTMLSelectElement2*, urn : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.urns.call(this, urn, pdisp)
  end
end
struct LibWin32::IHTMLSelectElement4
  def query_interface(this : IHTMLSelectElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def named_item(this : IHTMLSelectElement4*, name : UInt8*, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pdisp)
  end
end
struct LibWin32::IHTMLSelectElement5
  def query_interface(this : IHTMLSelectElement5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElement5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElement5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectElement5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectElement5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectElement5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectElement5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add(this : IHTMLSelectElement5*, pelem : IHTMLOptionElement, pvarbefore : VARIANT*) : HRESULT
    @lpVtbl.value.add.call(this, pelem, pvarbefore)
  end
end
struct LibWin32::IHTMLSelectElement6
  def query_interface(this : IHTMLSelectElement6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectElement6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectElement6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectElement6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectElement6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectElement6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectElement6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add(this : IHTMLSelectElement6*, pelem : IHTMLOptionElement, pvarbefore : VARIANT*) : HRESULT
    @lpVtbl.value.add.call(this, pelem, pvarbefore)
  end
  def put_value(this : IHTMLSelectElement6*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLSelectElement6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::DispHTMLSelectElement
  def query_interface(this : DispHTMLSelectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLSelectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLSelectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLSelectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLSelectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLSelectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLSelectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLWndSelectElement
  def query_interface(this : DispHTMLWndSelectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLWndSelectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLWndSelectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLWndSelectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLWndSelectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLWndSelectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLWndSelectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLSelectionObject
  def query_interface(this : IHTMLSelectionObject*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectionObject*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectionObject*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectionObject*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectionObject*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectionObject*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectionObject*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_range(this : IHTMLSelectionObject*, range : IDispatch*) : HRESULT
    @lpVtbl.value.create_range.call(this, range)
  end
  def empty(this : IHTMLSelectionObject*) : HRESULT
    @lpVtbl.value.empty.call(this)
  end
  def clear(this : IHTMLSelectionObject*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def get_type(this : IHTMLSelectionObject*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::IHTMLSelectionObject2
  def query_interface(this : IHTMLSelectionObject2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelectionObject2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelectionObject2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelectionObject2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelectionObject2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelectionObject2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelectionObject2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_range_collection(this : IHTMLSelectionObject2*, rangecollection : IDispatch*) : HRESULT
    @lpVtbl.value.create_range_collection.call(this, rangecollection)
  end
  def get_type_detail(this : IHTMLSelectionObject2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type_detail.call(this, p)
  end
end
struct LibWin32::IHTMLSelection
  def query_interface(this : IHTMLSelection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSelection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSelection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSelection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSelection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSelection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSelection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_anchor_node(this : IHTMLSelection*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_anchor_node.call(this, p)
  end
  def get_anchor_offset(this : IHTMLSelection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_anchor_offset.call(this, p)
  end
  def get_focus_node(this : IHTMLSelection*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_focus_node.call(this, p)
  end
  def get_focus_offset(this : IHTMLSelection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_focus_offset.call(this, p)
  end
  def get_is_collapsed(this : IHTMLSelection*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_collapsed.call(this, p)
  end
  def collapse(this : IHTMLSelection*, parentnode : IDispatch, offfset : Int32) : HRESULT
    @lpVtbl.value.collapse.call(this, parentnode, offfset)
  end
  def collapse_to_start(this : IHTMLSelection*) : HRESULT
    @lpVtbl.value.collapse_to_start.call(this)
  end
  def collapse_to_end(this : IHTMLSelection*) : HRESULT
    @lpVtbl.value.collapse_to_end.call(this)
  end
  def select_all_children(this : IHTMLSelection*, parentnode : IDispatch) : HRESULT
    @lpVtbl.value.select_all_children.call(this, parentnode)
  end
  def delete_from_document(this : IHTMLSelection*) : HRESULT
    @lpVtbl.value.delete_from_document.call(this)
  end
  def get_range_count(this : IHTMLSelection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_range_count.call(this, p)
  end
  def get_range_at(this : IHTMLSelection*, index : Int32, pprange : IHTMLDOMRange*) : HRESULT
    @lpVtbl.value.get_range_at.call(this, index, pprange)
  end
  def add_range(this : IHTMLSelection*, range : IDispatch) : HRESULT
    @lpVtbl.value.add_range.call(this, range)
  end
  def remove_range(this : IHTMLSelection*, range : IDispatch) : HRESULT
    @lpVtbl.value.remove_range.call(this, range)
  end
  def remove_all_ranges(this : IHTMLSelection*) : HRESULT
    @lpVtbl.value.remove_all_ranges.call(this)
  end
  def to_string(this : IHTMLSelection*, pselectionstring : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, pselectionstring)
  end
end
struct LibWin32::IHTMLOptionElement3
  def query_interface(this : IHTMLOptionElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_label(this : IHTMLOptionElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_label.call(this, v)
  end
  def get_label(this : IHTMLOptionElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_label.call(this, p)
  end
end
struct LibWin32::IHTMLOptionElement4
  def query_interface(this : IHTMLOptionElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_value(this : IHTMLOptionElement4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLOptionElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::IHTMLOptionElementFactory
  def query_interface(this : IHTMLOptionElementFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionElementFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionElementFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionElementFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionElementFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionElementFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionElementFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IHTMLOptionElementFactory*, text : VARIANT, value : VARIANT, defaultselected : VARIANT, selected : VARIANT, midl__ihtmloptionelementfactory0000 : IHTMLOptionElement*) : HRESULT
    @lpVtbl.value.create.call(this, text, value, defaultselected, selected, midl__ihtmloptionelementfactory0000)
  end
end
struct LibWin32::DispHTMLOptionElement
  def query_interface(this : DispHTMLOptionElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLOptionElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLOptionElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLOptionElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLOptionElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLOptionElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLOptionElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLWndOptionElement
  def query_interface(this : DispHTMLWndOptionElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLWndOptionElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLWndOptionElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLWndOptionElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLWndOptionElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLWndOptionElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLWndOptionElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLButtonElementEvents2
  def query_interface(this : HTMLButtonElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLButtonElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLButtonElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLButtonElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLButtonElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLButtonElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLButtonElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLButtonElementEvents
  def query_interface(this : HTMLButtonElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLButtonElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLButtonElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLButtonElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLButtonElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLButtonElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLButtonElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputTextElementEvents2
  def query_interface(this : HTMLInputTextElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputTextElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputTextElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputTextElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputTextElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputTextElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputTextElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLOptionButtonElementEvents2
  def query_interface(this : HTMLOptionButtonElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLOptionButtonElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLOptionButtonElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLOptionButtonElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLOptionButtonElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLOptionButtonElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLOptionButtonElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputFileElementEvents2
  def query_interface(this : HTMLInputFileElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputFileElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputFileElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputFileElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputFileElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputFileElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputFileElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputImageEvents2
  def query_interface(this : HTMLInputImageEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputImageEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputImageEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputImageEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputImageEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputImageEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputImageEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputTextElementEvents
  def query_interface(this : HTMLInputTextElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputTextElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputTextElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputTextElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputTextElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputTextElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputTextElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLOptionButtonElementEvents
  def query_interface(this : HTMLOptionButtonElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLOptionButtonElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLOptionButtonElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLOptionButtonElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLOptionButtonElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLOptionButtonElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLOptionButtonElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputFileElementEvents
  def query_interface(this : HTMLInputFileElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputFileElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputFileElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputFileElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputFileElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputFileElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputFileElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLInputImageEvents
  def query_interface(this : HTMLInputImageEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLInputImageEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLInputImageEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLInputImageEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLInputImageEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLInputImageEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLInputImageEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLInputElement
  def query_interface(this : IHTMLInputElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLInputElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def put_size(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
  def put_max_length(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_max_length.call(this, v)
  end
  def get_max_length(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_max_length.call(this, p)
  end
  def select(this : IHTMLInputElement*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def put_onchange(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_onselect(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_default_value(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_value.call(this, v)
  end
  def get_default_value(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_value.call(this, p)
  end
  def put_read_only(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_read_only.call(this, v)
  end
  def get_read_only(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_read_only.call(this, p)
  end
  def create_text_range(this : IHTMLInputElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
  def put_indeterminate(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_indeterminate.call(this, v)
  end
  def get_indeterminate(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_indeterminate.call(this, p)
  end
  def put_default_checked(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_default_checked.call(this, v)
  end
  def get_default_checked(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_default_checked.call(this, p)
  end
  def put_checked(this : IHTMLInputElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_checked.call(this, v)
  end
  def get_checked(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_checked.call(this, p)
  end
  def put_border(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_vspace(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
  def put_alt(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_src(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_lowsrc(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lowsrc.call(this, v)
  end
  def get_lowsrc(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lowsrc.call(this, p)
  end
  def put_vrml(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_vrml.call(this, v)
  end
  def get_vrml(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_vrml.call(this, p)
  end
  def put_dynsrc(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dynsrc.call(this, v)
  end
  def get_dynsrc(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dynsrc.call(this, p)
  end
  def get_ready_state(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def get_complete(this : IHTMLInputElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_complete.call(this, p)
  end
  def put_loop(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def put_align(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_onload(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onerror(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onabort(this : IHTMLInputElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLInputElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_width(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLInputElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLInputElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_start(this : IHTMLInputElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_start.call(this, v)
  end
  def get_start(this : IHTMLInputElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_start.call(this, p)
  end
end
struct LibWin32::IHTMLInputElement2
  def query_interface(this : IHTMLInputElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_accept(this : IHTMLInputElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_accept.call(this, v)
  end
  def get_accept(this : IHTMLInputElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_accept.call(this, p)
  end
  def put_use_map(this : IHTMLInputElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_use_map.call(this, v)
  end
  def get_use_map(this : IHTMLInputElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_use_map.call(this, p)
  end
end
struct LibWin32::IHTMLInputElement3
  def query_interface(this : IHTMLInputElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLInputElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLInputElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_lowsrc(this : IHTMLInputElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lowsrc.call(this, v)
  end
  def get_lowsrc(this : IHTMLInputElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lowsrc.call(this, p)
  end
  def put_vrml(this : IHTMLInputElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_vrml.call(this, v)
  end
  def get_vrml(this : IHTMLInputElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_vrml.call(this, p)
  end
  def put_dynsrc(this : IHTMLInputElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dynsrc.call(this, v)
  end
  def get_dynsrc(this : IHTMLInputElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dynsrc.call(this, p)
  end
end
struct LibWin32::IHTMLInputButtonElement
  def query_interface(this : IHTMLInputButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLInputButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLInputButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLInputButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLInputButtonElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLInputButtonElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLInputButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLInputButtonElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def create_text_range(this : IHTMLInputButtonElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLInputHiddenElement
  def query_interface(this : IHTMLInputHiddenElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputHiddenElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputHiddenElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputHiddenElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputHiddenElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputHiddenElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputHiddenElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLInputHiddenElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLInputHiddenElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputHiddenElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLInputHiddenElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputHiddenElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLInputHiddenElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLInputHiddenElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLInputHiddenElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputHiddenElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLInputHiddenElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def create_text_range(this : IHTMLInputHiddenElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLInputTextElement
  def query_interface(this : IHTMLInputTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLInputTextElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLInputTextElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputTextElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLInputTextElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputTextElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLInputTextElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLInputTextElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLInputTextElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputTextElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLInputTextElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def put_default_value(this : IHTMLInputTextElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_value.call(this, v)
  end
  def get_default_value(this : IHTMLInputTextElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_value.call(this, p)
  end
  def put_size(this : IHTMLInputTextElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLInputTextElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
  def put_max_length(this : IHTMLInputTextElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_max_length.call(this, v)
  end
  def get_max_length(this : IHTMLInputTextElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_max_length.call(this, p)
  end
  def select(this : IHTMLInputTextElement*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def put_onchange(this : IHTMLInputTextElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLInputTextElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_onselect(this : IHTMLInputTextElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLInputTextElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_read_only(this : IHTMLInputTextElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_read_only.call(this, v)
  end
  def get_read_only(this : IHTMLInputTextElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_read_only.call(this, p)
  end
  def create_text_range(this : IHTMLInputTextElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLInputTextElement2
  def query_interface(this : IHTMLInputTextElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputTextElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputTextElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputTextElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputTextElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputTextElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputTextElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selection_start(this : IHTMLInputTextElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_selection_start.call(this, v)
  end
  def get_selection_start(this : IHTMLInputTextElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_selection_start.call(this, p)
  end
  def put_selection_end(this : IHTMLInputTextElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_selection_end.call(this, v)
  end
  def get_selection_end(this : IHTMLInputTextElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_selection_end.call(this, p)
  end
  def set_selection_range(this : IHTMLInputTextElement2*, start : Int32, end_ : Int32) : HRESULT
    @lpVtbl.value.set_selection_range.call(this, start, end_)
  end
end
struct LibWin32::IHTMLInputFileElement
  def query_interface(this : IHTMLInputFileElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputFileElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputFileElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputFileElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputFileElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputFileElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputFileElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLInputFileElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_name(this : IHTMLInputFileElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputFileElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLInputFileElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLInputFileElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLInputFileElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputFileElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLInputFileElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def put_size(this : IHTMLInputFileElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLInputFileElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
  def put_max_length(this : IHTMLInputFileElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_max_length.call(this, v)
  end
  def get_max_length(this : IHTMLInputFileElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_max_length.call(this, p)
  end
  def select(this : IHTMLInputFileElement*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def put_onchange(this : IHTMLInputFileElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLInputFileElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_onselect(this : IHTMLInputFileElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLInputFileElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_value(this : IHTMLInputFileElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputFileElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::IHTMLOptionButtonElement
  def query_interface(this : IHTMLOptionButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_value(this : IHTMLOptionButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLOptionButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def get_type(this : IHTMLOptionButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_name(this : IHTMLOptionButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLOptionButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_checked(this : IHTMLOptionButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_checked.call(this, v)
  end
  def get_checked(this : IHTMLOptionButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_checked.call(this, p)
  end
  def put_default_checked(this : IHTMLOptionButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_default_checked.call(this, v)
  end
  def get_default_checked(this : IHTMLOptionButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_default_checked.call(this, p)
  end
  def put_onchange(this : IHTMLOptionButtonElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLOptionButtonElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_disabled(this : IHTMLOptionButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLOptionButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def put_status(this : IHTMLOptionButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLOptionButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_indeterminate(this : IHTMLOptionButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_indeterminate.call(this, v)
  end
  def get_indeterminate(this : IHTMLOptionButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_indeterminate.call(this, p)
  end
  def get_form(this : IHTMLOptionButtonElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::IHTMLInputImage
  def query_interface(this : IHTMLInputImage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputImage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputImage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputImage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputImage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputImage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputImage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_disabled(this : IHTMLInputImage*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputImage*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def put_border(this : IHTMLInputImage*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLInputImage*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_vspace(this : IHTMLInputImage*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLInputImage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLInputImage*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLInputImage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
  def put_alt(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_src(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_lowsrc(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_lowsrc.call(this, v)
  end
  def get_lowsrc(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_lowsrc.call(this, p)
  end
  def put_vrml(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_vrml.call(this, v)
  end
  def get_vrml(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_vrml.call(this, p)
  end
  def put_dynsrc(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dynsrc.call(this, v)
  end
  def get_dynsrc(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dynsrc.call(this, p)
  end
  def get_ready_state(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def get_complete(this : IHTMLInputImage*, p : Int16*) : HRESULT
    @lpVtbl.value.get_complete.call(this, p)
  end
  def put_loop(this : IHTMLInputImage*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLInputImage*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def put_align(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_onload(this : IHTMLInputImage*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLInputImage*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onerror(this : IHTMLInputImage*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLInputImage*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onabort(this : IHTMLInputImage*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLInputImage*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_name(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_width(this : IHTMLInputImage*, v : Int32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLInputImage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLInputImage*, v : Int32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLInputImage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_start(this : IHTMLInputImage*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_start.call(this, v)
  end
  def get_start(this : IHTMLInputImage*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_start.call(this, p)
  end
end
struct LibWin32::IHTMLInputRangeElement
  def query_interface(this : IHTMLInputRangeElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLInputRangeElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLInputRangeElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLInputRangeElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLInputRangeElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLInputRangeElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLInputRangeElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_disabled(this : IHTMLInputRangeElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLInputRangeElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_type(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_alt(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_name(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_value(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_min(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_min.call(this, v)
  end
  def get_min(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_min.call(this, p)
  end
  def put_max(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_max.call(this, v)
  end
  def get_max(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_max.call(this, p)
  end
  def put_step(this : IHTMLInputRangeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_step.call(this, v)
  end
  def get_step(this : IHTMLInputRangeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_step.call(this, p)
  end
  def put_value_as_number(this : IHTMLInputRangeElement*, v : Float64) : HRESULT
    @lpVtbl.value.put_value_as_number.call(this, v)
  end
  def get_value_as_number(this : IHTMLInputRangeElement*, p : Float64*) : HRESULT
    @lpVtbl.value.get_value_as_number.call(this, p)
  end
  def step_up(this : IHTMLInputRangeElement*, n : Int32) : HRESULT
    @lpVtbl.value.step_up.call(this, n)
  end
  def step_down(this : IHTMLInputRangeElement*, n : Int32) : HRESULT
    @lpVtbl.value.step_down.call(this, n)
  end
end
struct LibWin32::DispHTMLInputElement
  def query_interface(this : DispHTMLInputElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLInputElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLInputElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLInputElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLInputElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLInputElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLInputElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLTextAreaElement
  def query_interface(this : IHTMLTextAreaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextAreaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextAreaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextAreaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextAreaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextAreaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextAreaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLTextAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLTextAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLTextAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLTextAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLTextAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLTextAreaElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLTextAreaElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLTextAreaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLTextAreaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLTextAreaElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def put_default_value(this : IHTMLTextAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_value.call(this, v)
  end
  def get_default_value(this : IHTMLTextAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_value.call(this, p)
  end
  def select(this : IHTMLTextAreaElement*) : HRESULT
    @lpVtbl.value.select.call(this)
  end
  def put_onchange(this : IHTMLTextAreaElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLTextAreaElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_onselect(this : IHTMLTextAreaElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLTextAreaElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_read_only(this : IHTMLTextAreaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_read_only.call(this, v)
  end
  def get_read_only(this : IHTMLTextAreaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_read_only.call(this, p)
  end
  def put_rows(this : IHTMLTextAreaElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_rows.call(this, v)
  end
  def get_rows(this : IHTMLTextAreaElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_rows.call(this, p)
  end
  def put_cols(this : IHTMLTextAreaElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_cols.call(this, v)
  end
  def get_cols(this : IHTMLTextAreaElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_cols.call(this, p)
  end
  def put_wrap(this : IHTMLTextAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_wrap.call(this, v)
  end
  def get_wrap(this : IHTMLTextAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_wrap.call(this, p)
  end
  def create_text_range(this : IHTMLTextAreaElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLTextAreaElement2
  def query_interface(this : IHTMLTextAreaElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTextAreaElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTextAreaElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTextAreaElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTextAreaElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTextAreaElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTextAreaElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_selection_start(this : IHTMLTextAreaElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_selection_start.call(this, v)
  end
  def get_selection_start(this : IHTMLTextAreaElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_selection_start.call(this, p)
  end
  def put_selection_end(this : IHTMLTextAreaElement2*, v : Int32) : HRESULT
    @lpVtbl.value.put_selection_end.call(this, v)
  end
  def get_selection_end(this : IHTMLTextAreaElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_selection_end.call(this, p)
  end
  def set_selection_range(this : IHTMLTextAreaElement2*, start : Int32, end_ : Int32) : HRESULT
    @lpVtbl.value.set_selection_range.call(this, start, end_)
  end
end
struct LibWin32::DispHTMLTextAreaElement
  def query_interface(this : DispHTMLTextAreaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTextAreaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTextAreaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTextAreaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTextAreaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTextAreaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTextAreaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLRichtextElement
  def query_interface(this : DispHTMLRichtextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLRichtextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLRichtextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLRichtextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLRichtextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLRichtextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLRichtextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLButtonElement
  def query_interface(this : IHTMLButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_name(this : IHTMLButtonElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLButtonElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_status(this : IHTMLButtonElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLButtonElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_disabled(this : IHTMLButtonElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLButtonElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def get_form(this : IHTMLButtonElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def create_text_range(this : IHTMLButtonElement*, range : IHTMLTxtRange*) : HRESULT
    @lpVtbl.value.create_text_range.call(this, range)
  end
end
struct LibWin32::IHTMLButtonElement2
  def query_interface(this : IHTMLButtonElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLButtonElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLButtonElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLButtonElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLButtonElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLButtonElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLButtonElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : IHTMLButtonElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLButtonElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::DispHTMLButtonElement
  def query_interface(this : DispHTMLButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLMarqueeElementEvents2
  def query_interface(this : HTMLMarqueeElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLMarqueeElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLMarqueeElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLMarqueeElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLMarqueeElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLMarqueeElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLMarqueeElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLMarqueeElementEvents
  def query_interface(this : HTMLMarqueeElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLMarqueeElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLMarqueeElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLMarqueeElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLMarqueeElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLMarqueeElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLMarqueeElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLMarqueeElement
  def query_interface(this : IHTMLMarqueeElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMarqueeElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMarqueeElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMarqueeElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMarqueeElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMarqueeElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMarqueeElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_bg_color(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_scroll_delay(this : IHTMLMarqueeElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_delay.call(this, v)
  end
  def get_scroll_delay(this : IHTMLMarqueeElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_delay.call(this, p)
  end
  def put_direction(this : IHTMLMarqueeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_direction.call(this, v)
  end
  def get_direction(this : IHTMLMarqueeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def put_behavior(this : IHTMLMarqueeElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_behavior.call(this, v)
  end
  def get_behavior(this : IHTMLMarqueeElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_behavior.call(this, p)
  end
  def put_scroll_amount(this : IHTMLMarqueeElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_scroll_amount.call(this, v)
  end
  def get_scroll_amount(this : IHTMLMarqueeElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_scroll_amount.call(this, p)
  end
  def put_loop(this : IHTMLMarqueeElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLMarqueeElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def put_vspace(this : IHTMLMarqueeElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLMarqueeElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLMarqueeElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLMarqueeElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
  def put_onfinish(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfinish.call(this, v)
  end
  def get_onfinish(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfinish.call(this, p)
  end
  def put_onstart(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstart.call(this, v)
  end
  def get_onstart(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstart.call(this, p)
  end
  def put_onbounce(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbounce.call(this, v)
  end
  def get_onbounce(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbounce.call(this, p)
  end
  def put_width(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLMarqueeElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLMarqueeElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_true_speed(this : IHTMLMarqueeElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_true_speed.call(this, v)
  end
  def get_true_speed(this : IHTMLMarqueeElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_true_speed.call(this, p)
  end
  def start(this : IHTMLMarqueeElement*) : HRESULT
    @lpVtbl.value.start.call(this)
  end
  def stop(this : IHTMLMarqueeElement*) : HRESULT
    @lpVtbl.value.stop.call(this)
  end
end
struct LibWin32::DispHTMLMarqueeElement
  def query_interface(this : DispHTMLMarqueeElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMarqueeElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMarqueeElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMarqueeElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMarqueeElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMarqueeElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMarqueeElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLHtmlElement
  def query_interface(this : IHTMLHtmlElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLHtmlElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLHtmlElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLHtmlElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLHtmlElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLHtmlElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLHtmlElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_version(this : IHTMLHtmlElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_version.call(this, v)
  end
  def get_version(this : IHTMLHtmlElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, p)
  end
end
struct LibWin32::IHTMLHeadElement
  def query_interface(this : IHTMLHeadElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLHeadElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLHeadElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLHeadElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLHeadElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLHeadElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLHeadElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_profile(this : IHTMLHeadElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_profile.call(this, v)
  end
  def get_profile(this : IHTMLHeadElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_profile.call(this, p)
  end
end
struct LibWin32::IHTMLHeadElement2
  def query_interface(this : IHTMLHeadElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLHeadElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLHeadElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLHeadElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLHeadElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLHeadElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLHeadElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_profile(this : IHTMLHeadElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_profile.call(this, v)
  end
  def get_profile(this : IHTMLHeadElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_profile.call(this, p)
  end
end
struct LibWin32::IHTMLTitleElement
  def query_interface(this : IHTMLTitleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTitleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTitleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTitleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTitleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTitleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTitleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_text(this : IHTMLTitleElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLTitleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
end
struct LibWin32::IHTMLMetaElement
  def query_interface(this : IHTMLMetaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMetaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMetaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMetaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMetaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMetaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMetaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_http_equiv(this : IHTMLMetaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_http_equiv.call(this, v)
  end
  def get_http_equiv(this : IHTMLMetaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_http_equiv.call(this, p)
  end
  def put_content(this : IHTMLMetaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content.call(this, v)
  end
  def get_content(this : IHTMLMetaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content.call(this, p)
  end
  def put_name(this : IHTMLMetaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLMetaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_url(this : IHTMLMetaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHTMLMetaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_charset(this : IHTMLMetaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_charset.call(this, v)
  end
  def get_charset(this : IHTMLMetaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_charset.call(this, p)
  end
end
struct LibWin32::IHTMLMetaElement2
  def query_interface(this : IHTMLMetaElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMetaElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMetaElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMetaElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMetaElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMetaElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMetaElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_scheme(this : IHTMLMetaElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scheme.call(this, v)
  end
  def get_scheme(this : IHTMLMetaElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scheme.call(this, p)
  end
end
struct LibWin32::IHTMLMetaElement3
  def query_interface(this : IHTMLMetaElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMetaElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMetaElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMetaElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMetaElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMetaElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMetaElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_url(this : IHTMLMetaElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHTMLMetaElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
end
struct LibWin32::IHTMLBaseElement
  def query_interface(this : IHTMLBaseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBaseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBaseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBaseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBaseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBaseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBaseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLBaseElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLBaseElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_target(this : IHTMLBaseElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_target.call(this, v)
  end
  def get_target(this : IHTMLBaseElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
end
struct LibWin32::IHTMLBaseElement2
  def query_interface(this : IHTMLBaseElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBaseElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBaseElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBaseElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBaseElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBaseElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBaseElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLBaseElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLBaseElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
end
struct LibWin32::DispHTMLHtmlElement
  def query_interface(this : DispHTMLHtmlElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLHtmlElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLHtmlElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLHtmlElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLHtmlElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLHtmlElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLHtmlElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLHeadElement
  def query_interface(this : DispHTMLHeadElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLHeadElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLHeadElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLHeadElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLHeadElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLHeadElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLHeadElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTitleElement
  def query_interface(this : DispHTMLTitleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTitleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTitleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTitleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTitleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTitleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTitleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLMetaElement
  def query_interface(this : DispHTMLMetaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMetaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMetaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMetaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMetaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMetaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMetaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLBaseElement
  def query_interface(this : DispHTMLBaseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBaseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBaseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBaseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBaseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBaseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBaseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLIsIndexElement
  def query_interface(this : IHTMLIsIndexElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIsIndexElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIsIndexElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIsIndexElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIsIndexElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIsIndexElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIsIndexElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_prompt(this : IHTMLIsIndexElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_prompt.call(this, v)
  end
  def get_prompt(this : IHTMLIsIndexElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_prompt.call(this, p)
  end
  def put_action(this : IHTMLIsIndexElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_action.call(this, v)
  end
  def get_action(this : IHTMLIsIndexElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_action.call(this, p)
  end
end
struct LibWin32::IHTMLIsIndexElement2
  def query_interface(this : IHTMLIsIndexElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIsIndexElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIsIndexElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIsIndexElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIsIndexElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIsIndexElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIsIndexElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_form(this : IHTMLIsIndexElement2*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::IHTMLNextIdElement
  def query_interface(this : IHTMLNextIdElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLNextIdElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLNextIdElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLNextIdElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLNextIdElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLNextIdElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLNextIdElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_n(this : IHTMLNextIdElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_n.call(this, v)
  end
  def get_n(this : IHTMLNextIdElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_n.call(this, p)
  end
end
struct LibWin32::DispHTMLIsIndexElement
  def query_interface(this : DispHTMLIsIndexElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLIsIndexElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLIsIndexElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLIsIndexElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLIsIndexElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLIsIndexElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLIsIndexElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLNextIdElement
  def query_interface(this : DispHTMLNextIdElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLNextIdElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLNextIdElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLNextIdElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLNextIdElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLNextIdElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLNextIdElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBaseFontElement
  def query_interface(this : IHTMLBaseFontElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBaseFontElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBaseFontElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBaseFontElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBaseFontElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBaseFontElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBaseFontElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_color(this : IHTMLBaseFontElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_color.call(this, v)
  end
  def get_color(this : IHTMLBaseFontElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_color.call(this, p)
  end
  def put_face(this : IHTMLBaseFontElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_face.call(this, v)
  end
  def get_face(this : IHTMLBaseFontElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_face.call(this, p)
  end
  def put_size(this : IHTMLBaseFontElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_size.call(this, v)
  end
  def get_size(this : IHTMLBaseFontElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_size.call(this, p)
  end
end
struct LibWin32::DispHTMLBaseFontElement
  def query_interface(this : DispHTMLBaseFontElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBaseFontElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBaseFontElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBaseFontElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBaseFontElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBaseFontElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBaseFontElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLUnknownElement
  def query_interface(this : IHTMLUnknownElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLUnknownElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLUnknownElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLUnknownElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLUnknownElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLUnknownElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLUnknownElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLUnknownElement
  def query_interface(this : DispHTMLUnknownElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLUnknownElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLUnknownElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLUnknownElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLUnknownElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLUnknownElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLUnknownElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IWebGeolocation
  def query_interface(this : IWebGeolocation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebGeolocation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebGeolocation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWebGeolocation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWebGeolocation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWebGeolocation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWebGeolocation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_current_position(this : IWebGeolocation*, successcallback : IDispatch, errorcallback : IDispatch, options : IDispatch) : HRESULT
    @lpVtbl.value.get_current_position.call(this, successcallback, errorcallback, options)
  end
  def watch_position(this : IWebGeolocation*, successcallback : IDispatch, errorcallback : IDispatch, options : IDispatch, watchid : Int32*) : HRESULT
    @lpVtbl.value.watch_position.call(this, successcallback, errorcallback, options, watchid)
  end
  def clear_watch(this : IWebGeolocation*, watchid : Int32) : HRESULT
    @lpVtbl.value.clear_watch.call(this, watchid)
  end
end
struct LibWin32::IHTMLMimeTypesCollection
  def query_interface(this : IHTMLMimeTypesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMimeTypesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMimeTypesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMimeTypesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMimeTypesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMimeTypesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMimeTypesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLMimeTypesCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::IHTMLPluginsCollection
  def query_interface(this : IHTMLPluginsCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPluginsCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPluginsCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPluginsCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPluginsCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPluginsCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPluginsCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLPluginsCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def refresh(this : IHTMLPluginsCollection*, reload : Int16) : HRESULT
    @lpVtbl.value.refresh.call(this, reload)
  end
end
struct LibWin32::IOmHistory
  def query_interface(this : IOmHistory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOmHistory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOmHistory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IOmHistory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IOmHistory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IOmHistory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IOmHistory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IOmHistory*, p : Int16*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def back(this : IOmHistory*, pvargdistance : VARIANT*) : HRESULT
    @lpVtbl.value.back.call(this, pvargdistance)
  end
  def forward(this : IOmHistory*, pvargdistance : VARIANT*) : HRESULT
    @lpVtbl.value.forward.call(this, pvargdistance)
  end
  def go(this : IOmHistory*, pvargdistance : VARIANT*) : HRESULT
    @lpVtbl.value.go.call(this, pvargdistance)
  end
end
struct LibWin32::IHTMLOpsProfile
  def query_interface(this : IHTMLOpsProfile*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOpsProfile*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOpsProfile*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOpsProfile*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOpsProfile*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOpsProfile*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOpsProfile*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_request(this : IHTMLOpsProfile*, name : UInt8*, reserved : VARIANT, success : Int16*) : HRESULT
    @lpVtbl.value.add_request.call(this, name, reserved, success)
  end
  def clear_request(this : IHTMLOpsProfile*) : HRESULT
    @lpVtbl.value.clear_request.call(this)
  end
  def do_request(this : IHTMLOpsProfile*, usage : VARIANT, fname : VARIANT, domain : VARIANT, path : VARIANT, expire : VARIANT, reserved : VARIANT) : HRESULT
    @lpVtbl.value.do_request.call(this, usage, fname, domain, path, expire, reserved)
  end
  def get_attribute(this : IHTMLOpsProfile*, name : UInt8*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_attribute.call(this, name, value)
  end
  def set_attribute(this : IHTMLOpsProfile*, name : UInt8*, value : UInt8*, prefs : VARIANT, success : Int16*) : HRESULT
    @lpVtbl.value.set_attribute.call(this, name, value, prefs, success)
  end
  def commit_changes(this : IHTMLOpsProfile*, success : Int16*) : HRESULT
    @lpVtbl.value.commit_changes.call(this, success)
  end
  def add_read_request(this : IHTMLOpsProfile*, name : UInt8*, reserved : VARIANT, success : Int16*) : HRESULT
    @lpVtbl.value.add_read_request.call(this, name, reserved, success)
  end
  def do_read_request(this : IHTMLOpsProfile*, usage : VARIANT, fname : VARIANT, domain : VARIANT, path : VARIANT, expire : VARIANT, reserved : VARIANT) : HRESULT
    @lpVtbl.value.do_read_request.call(this, usage, fname, domain, path, expire, reserved)
  end
  def do_write_request(this : IHTMLOpsProfile*, success : Int16*) : HRESULT
    @lpVtbl.value.do_write_request.call(this, success)
  end
end
struct LibWin32::IOmNavigator
  def query_interface(this : IOmNavigator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOmNavigator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOmNavigator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IOmNavigator*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IOmNavigator*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IOmNavigator*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IOmNavigator*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_app_code_name(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_app_code_name.call(this, p)
  end
  def get_app_name(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_app_name.call(this, p)
  end
  def get_app_version(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_app_version.call(this, p)
  end
  def get_user_agent(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_user_agent.call(this, p)
  end
  def java_enabled(this : IOmNavigator*, enabled : Int16*) : HRESULT
    @lpVtbl.value.java_enabled.call(this, enabled)
  end
  def taint_enabled(this : IOmNavigator*, enabled : Int16*) : HRESULT
    @lpVtbl.value.taint_enabled.call(this, enabled)
  end
  def get_mime_types(this : IOmNavigator*, p : IHTMLMimeTypesCollection*) : HRESULT
    @lpVtbl.value.get_mime_types.call(this, p)
  end
  def get_plugins(this : IOmNavigator*, p : IHTMLPluginsCollection*) : HRESULT
    @lpVtbl.value.get_plugins.call(this, p)
  end
  def get_cookie_enabled(this : IOmNavigator*, p : Int16*) : HRESULT
    @lpVtbl.value.get_cookie_enabled.call(this, p)
  end
  def get_ops_profile(this : IOmNavigator*, p : IHTMLOpsProfile*) : HRESULT
    @lpVtbl.value.get_ops_profile.call(this, p)
  end
  def to_string(this : IOmNavigator*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def get_cpu_class(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cpu_class.call(this, p)
  end
  def get_system_language(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_system_language.call(this, p)
  end
  def get_browser_language(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_browser_language.call(this, p)
  end
  def get_user_language(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_user_language.call(this, p)
  end
  def get_platform(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_platform.call(this, p)
  end
  def get_app_minor_version(this : IOmNavigator*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_app_minor_version.call(this, p)
  end
  def get_connection_speed(this : IOmNavigator*, p : Int32*) : HRESULT
    @lpVtbl.value.get_connection_speed.call(this, p)
  end
  def get_on_line(this : IOmNavigator*, p : Int16*) : HRESULT
    @lpVtbl.value.get_on_line.call(this, p)
  end
  def get_user_profile(this : IOmNavigator*, p : IHTMLOpsProfile*) : HRESULT
    @lpVtbl.value.get_user_profile.call(this, p)
  end
end
struct LibWin32::INavigatorGeolocation
  def query_interface(this : INavigatorGeolocation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : INavigatorGeolocation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : INavigatorGeolocation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : INavigatorGeolocation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : INavigatorGeolocation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : INavigatorGeolocation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : INavigatorGeolocation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_geolocation(this : INavigatorGeolocation*, p : IWebGeolocation*) : HRESULT
    @lpVtbl.value.get_geolocation.call(this, p)
  end
end
struct LibWin32::INavigatorDoNotTrack
  def query_interface(this : INavigatorDoNotTrack*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : INavigatorDoNotTrack*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : INavigatorDoNotTrack*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : INavigatorDoNotTrack*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : INavigatorDoNotTrack*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : INavigatorDoNotTrack*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : INavigatorDoNotTrack*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ms_do_not_track(this : INavigatorDoNotTrack*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ms_do_not_track.call(this, p)
  end
end
struct LibWin32::IHTMLLocation
  def query_interface(this : IHTMLLocation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLocation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLocation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLocation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLocation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLocation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLocation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_href(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_protocol(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_protocol.call(this, v)
  end
  def get_protocol(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol.call(this, p)
  end
  def put_host(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_host.call(this, v)
  end
  def get_host(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_host.call(this, p)
  end
  def put_hostname(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hostname.call(this, v)
  end
  def get_hostname(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hostname.call(this, p)
  end
  def put_port(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_port.call(this, v)
  end
  def get_port(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_port.call(this, p)
  end
  def put_pathname(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_pathname.call(this, v)
  end
  def get_pathname(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pathname.call(this, p)
  end
  def put_search(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_search.call(this, v)
  end
  def get_search(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_search.call(this, p)
  end
  def put_hash(this : IHTMLLocation*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hash.call(this, v)
  end
  def get_hash(this : IHTMLLocation*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hash.call(this, p)
  end
  def reload(this : IHTMLLocation*, flag : Int16) : HRESULT
    @lpVtbl.value.reload.call(this, flag)
  end
  def replace(this : IHTMLLocation*, bstr : UInt8*) : HRESULT
    @lpVtbl.value.replace.call(this, bstr)
  end
  def assign(this : IHTMLLocation*, bstr : UInt8*) : HRESULT
    @lpVtbl.value.assign.call(this, bstr)
  end
  def to_string(this : IHTMLLocation*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
end
struct LibWin32::DispHTMLHistory
  def query_interface(this : DispHTMLHistory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLHistory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLHistory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLHistory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLHistory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLHistory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLHistory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLNavigator
  def query_interface(this : DispHTMLNavigator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLNavigator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLNavigator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLNavigator*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLNavigator*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLNavigator*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLNavigator*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLLocation
  def query_interface(this : DispHTMLLocation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLLocation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLLocation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLLocation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLLocation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLLocation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLLocation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispCPlugins
  def query_interface(this : DispCPlugins*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCPlugins*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCPlugins*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCPlugins*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCPlugins*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCPlugins*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCPlugins*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBookmarkCollection
  def query_interface(this : IHTMLBookmarkCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBookmarkCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBookmarkCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBookmarkCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBookmarkCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBookmarkCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBookmarkCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLBookmarkCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLBookmarkCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLBookmarkCollection*, index : Int32, pvarbookmark : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, index, pvarbookmark)
  end
end
struct LibWin32::IHTMLDataTransfer
  def query_interface(this : IHTMLDataTransfer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDataTransfer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDataTransfer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDataTransfer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDataTransfer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDataTransfer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDataTransfer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_data(this : IHTMLDataTransfer*, format : UInt8*, data : VARIANT*, pret : Int16*) : HRESULT
    @lpVtbl.value.set_data.call(this, format, data, pret)
  end
  def get_data(this : IHTMLDataTransfer*, format : UInt8*, pvarret : VARIANT*) : HRESULT
    @lpVtbl.value.get_data.call(this, format, pvarret)
  end
  def clear_data(this : IHTMLDataTransfer*, format : UInt8*, pret : Int16*) : HRESULT
    @lpVtbl.value.clear_data.call(this, format, pret)
  end
  def put_drop_effect(this : IHTMLDataTransfer*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_drop_effect.call(this, v)
  end
  def get_drop_effect(this : IHTMLDataTransfer*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_drop_effect.call(this, p)
  end
  def put_effect_allowed(this : IHTMLDataTransfer*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_effect_allowed.call(this, v)
  end
  def get_effect_allowed(this : IHTMLDataTransfer*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_effect_allowed.call(this, p)
  end
end
struct LibWin32::IHTMLEventObj2
  def query_interface(this : IHTMLEventObj2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_attribute(this : IHTMLEventObj2*, strattributename : UInt8*, attributevalue : VARIANT, lflags : Int32) : HRESULT
    @lpVtbl.value.set_attribute.call(this, strattributename, attributevalue, lflags)
  end
  def get_attribute(this : IHTMLEventObj2*, strattributename : UInt8*, lflags : Int32, attributevalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, strattributename, lflags, attributevalue)
  end
  def remove_attribute(this : IHTMLEventObj2*, strattributename : UInt8*, lflags : Int32, pfsuccess : Int16*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, strattributename, lflags, pfsuccess)
  end
  def put_property_name(this : IHTMLEventObj2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_property_name.call(this, v)
  end
  def get_property_name(this : IHTMLEventObj2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_property_name.call(this, p)
  end
  def putref_bookmarks(this : IHTMLEventObj2*, v : IHTMLBookmarkCollection) : HRESULT
    @lpVtbl.value.putref_bookmarks.call(this, v)
  end
  def get_bookmarks(this : IHTMLEventObj2*, p : IHTMLBookmarkCollection*) : HRESULT
    @lpVtbl.value.get_bookmarks.call(this, p)
  end
  def putref_recordset(this : IHTMLEventObj2*, v : IDispatch) : HRESULT
    @lpVtbl.value.putref_recordset.call(this, v)
  end
  def get_recordset(this : IHTMLEventObj2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_recordset.call(this, p)
  end
  def put_data_fld(this : IHTMLEventObj2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data_fld.call(this, v)
  end
  def get_data_fld(this : IHTMLEventObj2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data_fld.call(this, p)
  end
  def putref_bound_elements(this : IHTMLEventObj2*, v : IHTMLElementCollection) : HRESULT
    @lpVtbl.value.putref_bound_elements.call(this, v)
  end
  def get_bound_elements(this : IHTMLEventObj2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_bound_elements.call(this, p)
  end
  def put_repeat(this : IHTMLEventObj2*, v : Int16) : HRESULT
    @lpVtbl.value.put_repeat.call(this, v)
  end
  def get_repeat(this : IHTMLEventObj2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_repeat.call(this, p)
  end
  def put_src_urn(this : IHTMLEventObj2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src_urn.call(this, v)
  end
  def get_src_urn(this : IHTMLEventObj2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src_urn.call(this, p)
  end
  def putref_src_element(this : IHTMLEventObj2*, v : IHTMLElement) : HRESULT
    @lpVtbl.value.putref_src_element.call(this, v)
  end
  def get_src_element(this : IHTMLEventObj2*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_src_element.call(this, p)
  end
  def put_alt_key(this : IHTMLEventObj2*, v : Int16) : HRESULT
    @lpVtbl.value.put_alt_key.call(this, v)
  end
  def get_alt_key(this : IHTMLEventObj2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_alt_key.call(this, p)
  end
  def put_ctrl_key(this : IHTMLEventObj2*, v : Int16) : HRESULT
    @lpVtbl.value.put_ctrl_key.call(this, v)
  end
  def get_ctrl_key(this : IHTMLEventObj2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ctrl_key.call(this, p)
  end
  def put_shift_key(this : IHTMLEventObj2*, v : Int16) : HRESULT
    @lpVtbl.value.put_shift_key.call(this, v)
  end
  def get_shift_key(this : IHTMLEventObj2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shift_key.call(this, p)
  end
  def putref_from_element(this : IHTMLEventObj2*, v : IHTMLElement) : HRESULT
    @lpVtbl.value.putref_from_element.call(this, v)
  end
  def get_from_element(this : IHTMLEventObj2*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_from_element.call(this, p)
  end
  def putref_to_element(this : IHTMLEventObj2*, v : IHTMLElement) : HRESULT
    @lpVtbl.value.putref_to_element.call(this, v)
  end
  def get_to_element(this : IHTMLEventObj2*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_to_element.call(this, p)
  end
  def put_button(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_button.call(this, v)
  end
  def get_button(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_button.call(this, p)
  end
  def put_type(this : IHTMLEventObj2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLEventObj2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_qualifier(this : IHTMLEventObj2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_qualifier.call(this, v)
  end
  def get_qualifier(this : IHTMLEventObj2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_qualifier.call(this, p)
  end
  def put_reason(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_reason.call(this, v)
  end
  def get_reason(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_reason.call(this, p)
  end
  def put_x(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_client_x(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_client_x.call(this, v)
  end
  def get_client_x(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_x.call(this, p)
  end
  def put_client_y(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_client_y.call(this, v)
  end
  def get_client_y(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_y.call(this, p)
  end
  def put_offset_x(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_offset_x.call(this, v)
  end
  def get_offset_x(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_x.call(this, p)
  end
  def put_offset_y(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_offset_y.call(this, v)
  end
  def get_offset_y(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_y.call(this, p)
  end
  def put_screen_x(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_screen_x.call(this, v)
  end
  def get_screen_x(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_x.call(this, p)
  end
  def put_screen_y(this : IHTMLEventObj2*, v : Int32) : HRESULT
    @lpVtbl.value.put_screen_y.call(this, v)
  end
  def get_screen_y(this : IHTMLEventObj2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_y.call(this, p)
  end
  def putref_src_filter(this : IHTMLEventObj2*, v : IDispatch) : HRESULT
    @lpVtbl.value.putref_src_filter.call(this, v)
  end
  def get_src_filter(this : IHTMLEventObj2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_src_filter.call(this, p)
  end
  def get_data_transfer(this : IHTMLEventObj2*, p : IHTMLDataTransfer*) : HRESULT
    @lpVtbl.value.get_data_transfer.call(this, p)
  end
end
struct LibWin32::IHTMLEventObj3
  def query_interface(this : IHTMLEventObj3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_content_overflow(this : IHTMLEventObj3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_content_overflow.call(this, p)
  end
  def put_shift_left(this : IHTMLEventObj3*, v : Int16) : HRESULT
    @lpVtbl.value.put_shift_left.call(this, v)
  end
  def get_shift_left(this : IHTMLEventObj3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shift_left.call(this, p)
  end
  def put_alt_left(this : IHTMLEventObj3*, v : Int16) : HRESULT
    @lpVtbl.value.put_alt_left.call(this, v)
  end
  def get_alt_left(this : IHTMLEventObj3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_alt_left.call(this, p)
  end
  def put_ctrl_left(this : IHTMLEventObj3*, v : Int16) : HRESULT
    @lpVtbl.value.put_ctrl_left.call(this, v)
  end
  def get_ctrl_left(this : IHTMLEventObj3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ctrl_left.call(this, p)
  end
  def get_ime_composition_change(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_ime_composition_change.call(this, p)
  end
  def get_ime_notify_command(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_ime_notify_command.call(this, p)
  end
  def get_ime_notify_data(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_ime_notify_data.call(this, p)
  end
  def get_ime_request(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_ime_request.call(this, p)
  end
  def get_ime_request_data(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_ime_request_data.call(this, p)
  end
  def get_keyboard_layout(this : IHTMLEventObj3*, p : LibC::IntPtrT*) : HRESULT
    @lpVtbl.value.get_keyboard_layout.call(this, p)
  end
  def get_behavior_cookie(this : IHTMLEventObj3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_behavior_cookie.call(this, p)
  end
  def get_behavior_part(this : IHTMLEventObj3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_behavior_part.call(this, p)
  end
  def get_next_page(this : IHTMLEventObj3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_next_page.call(this, p)
  end
end
struct LibWin32::IHTMLEventObj4
  def query_interface(this : IHTMLEventObj4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_wheel_delta(this : IHTMLEventObj4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_wheel_delta.call(this, p)
  end
end
struct LibWin32::IHTMLEventObj5
  def query_interface(this : IHTMLEventObj5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_url(this : IHTMLEventObj5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHTMLEventObj5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_data(this : IHTMLEventObj5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IHTMLEventObj5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def get_source(this : IHTMLEventObj5*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_source.call(this, p)
  end
  def put_origin(this : IHTMLEventObj5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_origin.call(this, v)
  end
  def get_origin(this : IHTMLEventObj5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_origin.call(this, p)
  end
  def put_issession(this : IHTMLEventObj5*, v : Int16) : HRESULT
    @lpVtbl.value.put_issession.call(this, v)
  end
  def get_issession(this : IHTMLEventObj5*, p : Int16*) : HRESULT
    @lpVtbl.value.get_issession.call(this, p)
  end
end
struct LibWin32::IHTMLEventObj6
  def query_interface(this : IHTMLEventObj6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEventObj6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEventObj6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEventObj6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEventObj6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEventObj6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEventObj6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_action_url(this : IHTMLEventObj6*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_action_url.call(this, p)
  end
  def get_button_id(this : IHTMLEventObj6*, p : Int32*) : HRESULT
    @lpVtbl.value.get_button_id.call(this, p)
  end
end
struct LibWin32::DispCEventObj
  def query_interface(this : DispCEventObj*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCEventObj*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCEventObj*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCEventObj*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCEventObj*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCEventObj*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCEventObj*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleMedia
  def query_interface(this : IHTMLStyleMedia*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleMedia*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleMedia*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleMedia*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleMedia*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleMedia*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleMedia*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLStyleMedia*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def match_medium(this : IHTMLStyleMedia*, mediaquery : UInt8*, matches : Int16*) : HRESULT
    @lpVtbl.value.match_medium.call(this, mediaquery, matches)
  end
end
struct LibWin32::DispHTMLStyleMedia
  def query_interface(this : DispHTMLStyleMedia*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleMedia*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleMedia*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleMedia*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleMedia*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleMedia*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleMedia*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFramesCollection2
  def query_interface(this : IHTMLFramesCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFramesCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFramesCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFramesCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFramesCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFramesCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFramesCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IHTMLFramesCollection2*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
  def get_length(this : IHTMLFramesCollection2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::HTMLWindowEvents3
  def query_interface(this : HTMLWindowEvents3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLWindowEvents3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLWindowEvents3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLWindowEvents3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLWindowEvents3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLWindowEvents3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLWindowEvents3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLWindowEvents2
  def query_interface(this : HTMLWindowEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLWindowEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLWindowEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLWindowEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLWindowEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLWindowEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLWindowEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLWindowEvents
  def query_interface(this : HTMLWindowEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLWindowEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLWindowEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLWindowEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLWindowEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLWindowEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLWindowEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDocument2
  def query_interface(this : IHTMLDocument2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_script(this : IHTMLDocument2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_script.call(this, p)
  end
  def get_all(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_all.call(this, p)
  end
  def get_body(this : IHTMLDocument2*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_body.call(this, p)
  end
  def get_active_element(this : IHTMLDocument2*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_active_element.call(this, p)
  end
  def get_images(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_images.call(this, p)
  end
  def get_applets(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_applets.call(this, p)
  end
  def get_links(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_links.call(this, p)
  end
  def get_forms(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_forms.call(this, p)
  end
  def get_anchors(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_anchors.call(this, p)
  end
  def put_title(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, v)
  end
  def get_title(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def get_scripts(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_scripts.call(this, p)
  end
  def put_design_mode(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_design_mode.call(this, v)
  end
  def get_design_mode(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_design_mode.call(this, p)
  end
  def get_selection(this : IHTMLDocument2*, p : IHTMLSelectionObject*) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
  def get_ready_state(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def get_frames(this : IHTMLDocument2*, p : IHTMLFramesCollection2*) : HRESULT
    @lpVtbl.value.get_frames.call(this, p)
  end
  def get_embeds(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_embeds.call(this, p)
  end
  def get_plugins(this : IHTMLDocument2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_plugins.call(this, p)
  end
  def put_alink_color(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_alink_color.call(this, v)
  end
  def get_alink_color(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_alink_color.call(this, p)
  end
  def put_bg_color(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_fg_color(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_fg_color.call(this, v)
  end
  def get_fg_color(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_fg_color.call(this, p)
  end
  def put_link_color(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_link_color.call(this, v)
  end
  def get_link_color(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_link_color.call(this, p)
  end
  def put_vlink_color(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_vlink_color.call(this, v)
  end
  def get_vlink_color(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_vlink_color.call(this, p)
  end
  def get_referrer(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_referrer.call(this, p)
  end
  def get_location(this : IHTMLDocument2*, p : IHTMLLocation*) : HRESULT
    @lpVtbl.value.get_location.call(this, p)
  end
  def get_last_modified(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_last_modified.call(this, p)
  end
  def put_url(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_domain(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_domain.call(this, v)
  end
  def get_domain(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_domain.call(this, p)
  end
  def put_cookie(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cookie.call(this, v)
  end
  def get_cookie(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cookie.call(this, p)
  end
  def put_expando(this : IHTMLDocument2*, v : Int16) : HRESULT
    @lpVtbl.value.put_expando.call(this, v)
  end
  def get_expando(this : IHTMLDocument2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_expando.call(this, p)
  end
  def put_charset(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_charset.call(this, v)
  end
  def get_charset(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_charset.call(this, p)
  end
  def put_default_charset(this : IHTMLDocument2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_charset.call(this, v)
  end
  def get_default_charset(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_charset.call(this, p)
  end
  def get_mime_type(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_mime_type.call(this, p)
  end
  def get_file_size(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_size.call(this, p)
  end
  def get_file_created_date(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_created_date.call(this, p)
  end
  def get_file_modified_date(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_modified_date.call(this, p)
  end
  def get_file_updated_date(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_file_updated_date.call(this, p)
  end
  def get_security(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_security.call(this, p)
  end
  def get_protocol(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol.call(this, p)
  end
  def get_name_prop(this : IHTMLDocument2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name_prop.call(this, p)
  end
  def write(this : IHTMLDocument2*, psarray : SAFEARRAY*) : HRESULT
    @lpVtbl.value.write.call(this, psarray)
  end
  def writeln(this : IHTMLDocument2*, psarray : SAFEARRAY*) : HRESULT
    @lpVtbl.value.writeln.call(this, psarray)
  end
  def open(this : IHTMLDocument2*, url : UInt8*, name : VARIANT, features : VARIANT, replace : VARIANT, pomwindowresult : IDispatch*) : HRESULT
    @lpVtbl.value.open.call(this, url, name, features, replace, pomwindowresult)
  end
  def close(this : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def clear(this : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def query_command_supported(this : IHTMLDocument2*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_supported.call(this, cmdid, pfret)
  end
  def query_command_enabled(this : IHTMLDocument2*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_enabled.call(this, cmdid, pfret)
  end
  def query_command_state(this : IHTMLDocument2*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_state.call(this, cmdid, pfret)
  end
  def query_command_indeterm(this : IHTMLDocument2*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.query_command_indeterm.call(this, cmdid, pfret)
  end
  def query_command_text(this : IHTMLDocument2*, cmdid : UInt8*, pcmdtext : UInt8**) : HRESULT
    @lpVtbl.value.query_command_text.call(this, cmdid, pcmdtext)
  end
  def query_command_value(this : IHTMLDocument2*, cmdid : UInt8*, pcmdvalue : VARIANT*) : HRESULT
    @lpVtbl.value.query_command_value.call(this, cmdid, pcmdvalue)
  end
  def exec_command(this : IHTMLDocument2*, cmdid : UInt8*, showui : Int16, value : VARIANT, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command.call(this, cmdid, showui, value, pfret)
  end
  def exec_command_show_help(this : IHTMLDocument2*, cmdid : UInt8*, pfret : Int16*) : HRESULT
    @lpVtbl.value.exec_command_show_help.call(this, cmdid, pfret)
  end
  def create_element(this : IHTMLDocument2*, etag : UInt8*, newelem : IHTMLElement*) : HRESULT
    @lpVtbl.value.create_element.call(this, etag, newelem)
  end
  def put_onhelp(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhelp.call(this, v)
  end
  def get_onhelp(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhelp.call(this, p)
  end
  def put_onclick(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onclick.call(this, v)
  end
  def get_onclick(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onclick.call(this, p)
  end
  def put_ondblclick(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondblclick.call(this, v)
  end
  def get_ondblclick(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondblclick.call(this, p)
  end
  def put_onkeyup(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeyup.call(this, v)
  end
  def get_onkeyup(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeyup.call(this, p)
  end
  def put_onkeydown(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeydown.call(this, v)
  end
  def get_onkeydown(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeydown.call(this, p)
  end
  def put_onkeypress(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeypress.call(this, v)
  end
  def get_onkeypress(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeypress.call(this, p)
  end
  def put_onmouseup(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseup.call(this, v)
  end
  def get_onmouseup(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseup.call(this, p)
  end
  def put_onmousedown(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousedown.call(this, v)
  end
  def get_onmousedown(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousedown.call(this, p)
  end
  def put_onmousemove(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousemove.call(this, v)
  end
  def get_onmousemove(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousemove.call(this, p)
  end
  def put_onmouseout(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseout.call(this, v)
  end
  def get_onmouseout(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseout.call(this, p)
  end
  def put_onmouseover(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseover.call(this, v)
  end
  def get_onmouseover(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseover.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onafterupdate(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onafterupdate.call(this, v)
  end
  def get_onafterupdate(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onafterupdate.call(this, p)
  end
  def put_onrowexit(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowexit.call(this, v)
  end
  def get_onrowexit(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowexit.call(this, p)
  end
  def put_onrowenter(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowenter.call(this, v)
  end
  def get_onrowenter(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowenter.call(this, p)
  end
  def put_ondragstart(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragstart.call(this, v)
  end
  def get_ondragstart(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragstart.call(this, p)
  end
  def put_onselectstart(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselectstart.call(this, v)
  end
  def get_onselectstart(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselectstart.call(this, p)
  end
  def element_from_point(this : IHTMLDocument2*, x : Int32, y : Int32, elementhit : IHTMLElement*) : HRESULT
    @lpVtbl.value.element_from_point.call(this, x, y, elementhit)
  end
  def get_parent_window(this : IHTMLDocument2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_parent_window.call(this, p)
  end
  def get_style_sheets(this : IHTMLDocument2*, p : IHTMLStyleSheetsCollection*) : HRESULT
    @lpVtbl.value.get_style_sheets.call(this, p)
  end
  def put_onbeforeupdate(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeupdate.call(this, v)
  end
  def get_onbeforeupdate(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeupdate.call(this, p)
  end
  def put_onerrorupdate(this : IHTMLDocument2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerrorupdate.call(this, v)
  end
  def get_onerrorupdate(this : IHTMLDocument2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerrorupdate.call(this, p)
  end
  def to_string(this : IHTMLDocument2*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def create_style_sheet(this : IHTMLDocument2*, bstrhref : UInt8*, lindex : Int32, ppnewstylesheet : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.create_style_sheet.call(this, bstrhref, lindex, ppnewstylesheet)
  end
end
struct LibWin32::IHTMLWindow2
  def query_interface(this : IHTMLWindow2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IHTMLWindow2*, pvarindex : VARIANT*, pvarresult : VARIANT*) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pvarresult)
  end
  def get_length(this : IHTMLWindow2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get_frames(this : IHTMLWindow2*, p : IHTMLFramesCollection2*) : HRESULT
    @lpVtbl.value.get_frames.call(this, p)
  end
  def put_default_status(this : IHTMLWindow2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_default_status.call(this, v)
  end
  def get_default_status(this : IHTMLWindow2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_default_status.call(this, p)
  end
  def put_status(this : IHTMLWindow2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLWindow2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def set_timeout(this : IHTMLWindow2*, expression : UInt8*, msec : Int32, language : VARIANT*, timerid : Int32*) : HRESULT
    @lpVtbl.value.set_timeout.call(this, expression, msec, language, timerid)
  end
  def clear_timeout(this : IHTMLWindow2*, timerid : Int32) : HRESULT
    @lpVtbl.value.clear_timeout.call(this, timerid)
  end
  def alert(this : IHTMLWindow2*, message : UInt8*) : HRESULT
    @lpVtbl.value.alert.call(this, message)
  end
  def confirm(this : IHTMLWindow2*, message : UInt8*, confirmed : Int16*) : HRESULT
    @lpVtbl.value.confirm.call(this, message, confirmed)
  end
  def prompt(this : IHTMLWindow2*, message : UInt8*, defstr : UInt8*, textdata : VARIANT*) : HRESULT
    @lpVtbl.value.prompt.call(this, message, defstr, textdata)
  end
  def get_image(this : IHTMLWindow2*, p : IHTMLImageElementFactory*) : HRESULT
    @lpVtbl.value.get_image.call(this, p)
  end
  def get_location(this : IHTMLWindow2*, p : IHTMLLocation*) : HRESULT
    @lpVtbl.value.get_location.call(this, p)
  end
  def get_history(this : IHTMLWindow2*, p : IOmHistory*) : HRESULT
    @lpVtbl.value.get_history.call(this, p)
  end
  def close(this : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def put_opener(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_opener.call(this, v)
  end
  def get_opener(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_opener.call(this, p)
  end
  def get_navigator(this : IHTMLWindow2*, p : IOmNavigator*) : HRESULT
    @lpVtbl.value.get_navigator.call(this, p)
  end
  def put_name(this : IHTMLWindow2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLWindow2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def get_parent(this : IHTMLWindow2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_parent.call(this, p)
  end
  def open(this : IHTMLWindow2*, url : UInt8*, name : UInt8*, features : UInt8*, replace : Int16, pomwindowresult : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.open.call(this, url, name, features, replace, pomwindowresult)
  end
  def get_self(this : IHTMLWindow2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_self.call(this, p)
  end
  def get_top(this : IHTMLWindow2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_top.call(this, p)
  end
  def get_window(this : IHTMLWindow2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_window.call(this, p)
  end
  def navigate(this : IHTMLWindow2*, url : UInt8*) : HRESULT
    @lpVtbl.value.navigate.call(this, url)
  end
  def put_onfocus(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_onblur(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_onload(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onbeforeunload(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeunload.call(this, v)
  end
  def get_onbeforeunload(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeunload.call(this, p)
  end
  def put_onunload(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onunload.call(this, v)
  end
  def get_onunload(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onunload.call(this, p)
  end
  def put_onhelp(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhelp.call(this, v)
  end
  def get_onhelp(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhelp.call(this, p)
  end
  def put_onerror(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onresize(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onresize.call(this, v)
  end
  def get_onresize(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onresize.call(this, p)
  end
  def put_onscroll(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onscroll.call(this, v)
  end
  def get_onscroll(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onscroll.call(this, p)
  end
  def get_document(this : IHTMLWindow2*, p : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
  def get_event(this : IHTMLWindow2*, p : IHTMLEventObj*) : HRESULT
    @lpVtbl.value.get_event.call(this, p)
  end
  def get__new_enum(this : IHTMLWindow2*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def show_modal_dialog(this : IHTMLWindow2*, dialog : UInt8*, varargin : VARIANT*, varoptions : VARIANT*, varargout : VARIANT*) : HRESULT
    @lpVtbl.value.show_modal_dialog.call(this, dialog, varargin, varoptions, varargout)
  end
  def show_help(this : IHTMLWindow2*, helpurl : UInt8*, helparg : VARIANT, features : UInt8*) : HRESULT
    @lpVtbl.value.show_help.call(this, helpurl, helparg, features)
  end
  def get_screen(this : IHTMLWindow2*, p : IHTMLScreen*) : HRESULT
    @lpVtbl.value.get_screen.call(this, p)
  end
  def get_option(this : IHTMLWindow2*, p : IHTMLOptionElementFactory*) : HRESULT
    @lpVtbl.value.get_option.call(this, p)
  end
  def focus(this : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def get_closed(this : IHTMLWindow2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_closed.call(this, p)
  end
  def blur(this : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.blur.call(this)
  end
  def scroll(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.scroll.call(this, x, y)
  end
  def get_client_information(this : IHTMLWindow2*, p : IOmNavigator*) : HRESULT
    @lpVtbl.value.get_client_information.call(this, p)
  end
  def set_interval(this : IHTMLWindow2*, expression : UInt8*, msec : Int32, language : VARIANT*, timerid : Int32*) : HRESULT
    @lpVtbl.value.set_interval.call(this, expression, msec, language, timerid)
  end
  def clear_interval(this : IHTMLWindow2*, timerid : Int32) : HRESULT
    @lpVtbl.value.clear_interval.call(this, timerid)
  end
  def put_offscreen_buffering(this : IHTMLWindow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_offscreen_buffering.call(this, v)
  end
  def get_offscreen_buffering(this : IHTMLWindow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_offscreen_buffering.call(this, p)
  end
  def exec_script(this : IHTMLWindow2*, code : UInt8*, language : UInt8*, pvarret : VARIANT*) : HRESULT
    @lpVtbl.value.exec_script.call(this, code, language, pvarret)
  end
  def to_string(this : IHTMLWindow2*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def scroll_by(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.scroll_by.call(this, x, y)
  end
  def scroll_to(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.scroll_to.call(this, x, y)
  end
  def move_to(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.move_to.call(this, x, y)
  end
  def move_by(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.move_by.call(this, x, y)
  end
  def resize_to(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.resize_to.call(this, x, y)
  end
  def resize_by(this : IHTMLWindow2*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.resize_by.call(this, x, y)
  end
  def get_external(this : IHTMLWindow2*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_external.call(this, p)
  end
end
struct LibWin32::IHTMLWindow3
  def query_interface(this : IHTMLWindow3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_screen_left(this : IHTMLWindow3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_left.call(this, p)
  end
  def get_screen_top(this : IHTMLWindow3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_top.call(this, p)
  end
  def attach_event(this : IHTMLWindow3*, event : UInt8*, pdisp : IDispatch, pfresult : Int16*) : HRESULT
    @lpVtbl.value.attach_event.call(this, event, pdisp, pfresult)
  end
  def detach_event(this : IHTMLWindow3*, event : UInt8*, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.detach_event.call(this, event, pdisp)
  end
  def set_timeout(this : IHTMLWindow3*, expression : VARIANT*, msec : Int32, language : VARIANT*, timerid : Int32*) : HRESULT
    @lpVtbl.value.set_timeout.call(this, expression, msec, language, timerid)
  end
  def set_interval(this : IHTMLWindow3*, expression : VARIANT*, msec : Int32, language : VARIANT*, timerid : Int32*) : HRESULT
    @lpVtbl.value.set_interval.call(this, expression, msec, language, timerid)
  end
  def print(this : IHTMLWindow3*) : HRESULT
    @lpVtbl.value.print.call(this)
  end
  def put_onbeforeprint(this : IHTMLWindow3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeprint.call(this, v)
  end
  def get_onbeforeprint(this : IHTMLWindow3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeprint.call(this, p)
  end
  def put_onafterprint(this : IHTMLWindow3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onafterprint.call(this, v)
  end
  def get_onafterprint(this : IHTMLWindow3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onafterprint.call(this, p)
  end
  def get_clipboard_data(this : IHTMLWindow3*, p : IHTMLDataTransfer*) : HRESULT
    @lpVtbl.value.get_clipboard_data.call(this, p)
  end
  def show_modeless_dialog(this : IHTMLWindow3*, url : UInt8*, varargin : VARIANT*, options : VARIANT*, pdialog : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.show_modeless_dialog.call(this, url, varargin, options, pdialog)
  end
end
struct LibWin32::IHTMLFrameBase
  def query_interface(this : IHTMLFrameBase*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameBase*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameBase*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameBase*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameBase*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameBase*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameBase*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLFrameBase*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLFrameBase*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_name(this : IHTMLFrameBase*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLFrameBase*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_border(this : IHTMLFrameBase*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLFrameBase*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_frame_border(this : IHTMLFrameBase*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_frame_border.call(this, v)
  end
  def get_frame_border(this : IHTMLFrameBase*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_frame_border.call(this, p)
  end
  def put_frame_spacing(this : IHTMLFrameBase*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_frame_spacing.call(this, v)
  end
  def get_frame_spacing(this : IHTMLFrameBase*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_frame_spacing.call(this, p)
  end
  def put_margin_width(this : IHTMLFrameBase*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_width.call(this, v)
  end
  def get_margin_width(this : IHTMLFrameBase*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_width.call(this, p)
  end
  def put_margin_height(this : IHTMLFrameBase*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_margin_height.call(this, v)
  end
  def get_margin_height(this : IHTMLFrameBase*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_margin_height.call(this, p)
  end
  def put_no_resize(this : IHTMLFrameBase*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_resize.call(this, v)
  end
  def get_no_resize(this : IHTMLFrameBase*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_resize.call(this, p)
  end
  def put_scrolling(this : IHTMLFrameBase*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scrolling.call(this, v)
  end
  def get_scrolling(this : IHTMLFrameBase*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scrolling.call(this, p)
  end
end
struct LibWin32::IHTMLStorage
  def query_interface(this : IHTMLStorage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStorage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStorage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStorage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStorage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStorage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStorage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLStorage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get_remaining_space(this : IHTMLStorage*, p : Int32*) : HRESULT
    @lpVtbl.value.get_remaining_space.call(this, p)
  end
  def key(this : IHTMLStorage*, lindex : Int32, midl__ihtmlstorage0000 : UInt8**) : HRESULT
    @lpVtbl.value.key.call(this, lindex, midl__ihtmlstorage0000)
  end
  def get_item(this : IHTMLStorage*, bstrkey : UInt8*, midl__ihtmlstorage0001 : VARIANT*) : HRESULT
    @lpVtbl.value.get_item.call(this, bstrkey, midl__ihtmlstorage0001)
  end
  def set_item(this : IHTMLStorage*, bstrkey : UInt8*, bstrvalue : UInt8*) : HRESULT
    @lpVtbl.value.set_item.call(this, bstrkey, bstrvalue)
  end
  def remove_item(this : IHTMLStorage*, bstrkey : UInt8*) : HRESULT
    @lpVtbl.value.remove_item.call(this, bstrkey)
  end
  def clear(this : IHTMLStorage*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
end
struct LibWin32::IHTMLPerformance
  def query_interface(this : IHTMLPerformance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPerformance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPerformance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPerformance*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPerformance*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPerformance*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPerformance*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_navigation(this : IHTMLPerformance*, p : IHTMLPerformanceNavigation*) : HRESULT
    @lpVtbl.value.get_navigation.call(this, p)
  end
  def get_timing(this : IHTMLPerformance*, p : IHTMLPerformanceTiming*) : HRESULT
    @lpVtbl.value.get_timing.call(this, p)
  end
  def to_string(this : IHTMLPerformance*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def to_json(this : IHTMLPerformance*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.to_json.call(this, pvar)
  end
end
struct LibWin32::IHTMLApplicationCache
  def query_interface(this : IHTMLApplicationCache*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLApplicationCache*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLApplicationCache*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLApplicationCache*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLApplicationCache*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLApplicationCache*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLApplicationCache*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_status(this : IHTMLApplicationCache*, p : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_onchecking(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchecking.call(this, v)
  end
  def get_onchecking(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchecking.call(this, p)
  end
  def put_onerror(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_onnoupdate(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onnoupdate.call(this, v)
  end
  def get_onnoupdate(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onnoupdate.call(this, p)
  end
  def put_ondownloading(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondownloading.call(this, v)
  end
  def get_ondownloading(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondownloading.call(this, p)
  end
  def put_onprogress(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onprogress.call(this, v)
  end
  def get_onprogress(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onprogress.call(this, p)
  end
  def put_onupdateready(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onupdateready.call(this, v)
  end
  def get_onupdateready(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onupdateready.call(this, p)
  end
  def put_oncached(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncached.call(this, v)
  end
  def get_oncached(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncached.call(this, p)
  end
  def put_onobsolete(this : IHTMLApplicationCache*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onobsolete.call(this, v)
  end
  def get_onobsolete(this : IHTMLApplicationCache*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onobsolete.call(this, p)
  end
  def update(this : IHTMLApplicationCache*) : HRESULT
    @lpVtbl.value.update.call(this)
  end
  def swap_cache(this : IHTMLApplicationCache*) : HRESULT
    @lpVtbl.value.swap_cache.call(this)
  end
  def abort(this : IHTMLApplicationCache*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
end
struct LibWin32::IHTMLScreen
  def query_interface(this : IHTMLScreen*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScreen*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScreen*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScreen*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScreen*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScreen*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScreen*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_color_depth(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_color_depth.call(this, p)
  end
  def put_buffer_depth(this : IHTMLScreen*, v : Int32) : HRESULT
    @lpVtbl.value.put_buffer_depth.call(this, v)
  end
  def get_buffer_depth(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_buffer_depth.call(this, p)
  end
  def get_width(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def get_height(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_update_interval(this : IHTMLScreen*, v : Int32) : HRESULT
    @lpVtbl.value.put_update_interval.call(this, v)
  end
  def get_update_interval(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_update_interval.call(this, p)
  end
  def get_avail_height(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_avail_height.call(this, p)
  end
  def get_avail_width(this : IHTMLScreen*, p : Int32*) : HRESULT
    @lpVtbl.value.get_avail_width.call(this, p)
  end
  def get_font_smoothing_enabled(this : IHTMLScreen*, p : Int16*) : HRESULT
    @lpVtbl.value.get_font_smoothing_enabled.call(this, p)
  end
end
struct LibWin32::IHTMLScreen2
  def query_interface(this : IHTMLScreen2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScreen2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScreen2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScreen2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScreen2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScreen2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScreen2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_logical_xdpi(this : IHTMLScreen2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_logical_xdpi.call(this, p)
  end
  def get_logical_ydpi(this : IHTMLScreen2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_logical_ydpi.call(this, p)
  end
  def get_device_xdpi(this : IHTMLScreen2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_device_xdpi.call(this, p)
  end
  def get_device_ydpi(this : IHTMLScreen2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_device_ydpi.call(this, p)
  end
end
struct LibWin32::IHTMLScreen3
  def query_interface(this : IHTMLScreen3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScreen3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScreen3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScreen3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScreen3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScreen3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScreen3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_system_xdpi(this : IHTMLScreen3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_system_xdpi.call(this, p)
  end
  def get_system_ydpi(this : IHTMLScreen3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_system_ydpi.call(this, p)
  end
end
struct LibWin32::IHTMLScreen4
  def query_interface(this : IHTMLScreen4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScreen4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScreen4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScreen4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScreen4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScreen4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScreen4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_pixel_depth(this : IHTMLScreen4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_pixel_depth.call(this, p)
  end
end
struct LibWin32::IHTMLWindow4
  def query_interface(this : IHTMLWindow4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_popup(this : IHTMLWindow4*, varargin : VARIANT*, pppopup : IDispatch*) : HRESULT
    @lpVtbl.value.create_popup.call(this, varargin, pppopup)
  end
  def get_frame_element(this : IHTMLWindow4*, p : IHTMLFrameBase*) : HRESULT
    @lpVtbl.value.get_frame_element.call(this, p)
  end
end
struct LibWin32::IHTMLWindow5
  def query_interface(this : IHTMLWindow5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_xml_http_request(this : IHTMLWindow5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_xml_http_request.call(this, v)
  end
  def get_xml_http_request(this : IHTMLWindow5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_xml_http_request.call(this, p)
  end
end
struct LibWin32::IHTMLWindow6
  def query_interface(this : IHTMLWindow6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x_domain_request(this : IHTMLWindow6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_x_domain_request.call(this, v)
  end
  def get_x_domain_request(this : IHTMLWindow6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_x_domain_request.call(this, p)
  end
  def get_session_storage(this : IHTMLWindow6*, p : IHTMLStorage*) : HRESULT
    @lpVtbl.value.get_session_storage.call(this, p)
  end
  def get_local_storage(this : IHTMLWindow6*, p : IHTMLStorage*) : HRESULT
    @lpVtbl.value.get_local_storage.call(this, p)
  end
  def put_onhashchange(this : IHTMLWindow6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhashchange.call(this, v)
  end
  def get_onhashchange(this : IHTMLWindow6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhashchange.call(this, p)
  end
  def get_max_connections_per_server(this : IHTMLWindow6*, p : Int32*) : HRESULT
    @lpVtbl.value.get_max_connections_per_server.call(this, p)
  end
  def post_message(this : IHTMLWindow6*, msg : UInt8*, targetorigin : VARIANT) : HRESULT
    @lpVtbl.value.post_message.call(this, msg, targetorigin)
  end
  def to_static_html(this : IHTMLWindow6*, bstrhtml : UInt8*, pbstrstatichtml : UInt8**) : HRESULT
    @lpVtbl.value.to_static_html.call(this, bstrhtml, pbstrstatichtml)
  end
  def put_onmessage(this : IHTMLWindow6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmessage.call(this, v)
  end
  def get_onmessage(this : IHTMLWindow6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmessage.call(this, p)
  end
  def ms_write_profiler_mark(this : IHTMLWindow6*, bstrprofilermarkname : UInt8*) : HRESULT
    @lpVtbl.value.ms_write_profiler_mark.call(this, bstrprofilermarkname)
  end
end
struct LibWin32::IHTMLWindow7
  def query_interface(this : IHTMLWindow7*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow7*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow7*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow7*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow7*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow7*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow7*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_selection(this : IHTMLWindow7*, ppihtmlselection : IHTMLSelection*) : HRESULT
    @lpVtbl.value.get_selection.call(this, ppihtmlselection)
  end
  def get_computed_style(this : IHTMLWindow7*, varargin : IHTMLDOMNode, bstrpseudoelt : UInt8*, ppcomputedstyle : IHTMLCSSStyleDeclaration*) : HRESULT
    @lpVtbl.value.get_computed_style.call(this, varargin, bstrpseudoelt, ppcomputedstyle)
  end
  def get_style_media(this : IHTMLWindow7*, p : IHTMLStyleMedia*) : HRESULT
    @lpVtbl.value.get_style_media.call(this, p)
  end
  def put_performance(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_performance.call(this, v)
  end
  def get_performance(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_performance.call(this, p)
  end
  def get_inner_width(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_inner_width.call(this, p)
  end
  def get_inner_height(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_inner_height.call(this, p)
  end
  def get_page_x_offset(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_x_offset.call(this, p)
  end
  def get_page_y_offset(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_y_offset.call(this, p)
  end
  def get_screen_x(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_x.call(this, p)
  end
  def get_screen_y(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_y.call(this, p)
  end
  def get_outer_width(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_outer_width.call(this, p)
  end
  def get_outer_height(this : IHTMLWindow7*, p : Int32*) : HRESULT
    @lpVtbl.value.get_outer_height.call(this, p)
  end
  def put_onabort(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onabort.call(this, v)
  end
  def get_onabort(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onabort.call(this, p)
  end
  def put_oncanplay(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplay.call(this, v)
  end
  def get_oncanplay(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplay.call(this, p)
  end
  def put_oncanplaythrough(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncanplaythrough.call(this, v)
  end
  def get_oncanplaythrough(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncanplaythrough.call(this, p)
  end
  def put_onchange(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onchange.call(this, v)
  end
  def get_onchange(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onchange.call(this, p)
  end
  def put_onclick(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onclick.call(this, v)
  end
  def get_onclick(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onclick.call(this, p)
  end
  def put_oncontextmenu(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncontextmenu.call(this, v)
  end
  def get_oncontextmenu(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncontextmenu.call(this, p)
  end
  def put_ondblclick(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondblclick.call(this, v)
  end
  def get_ondblclick(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondblclick.call(this, p)
  end
  def put_ondrag(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrag.call(this, v)
  end
  def get_ondrag(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrag.call(this, p)
  end
  def put_ondragend(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragend.call(this, v)
  end
  def get_ondragend(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragend.call(this, p)
  end
  def put_ondragenter(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragenter.call(this, v)
  end
  def get_ondragenter(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragenter.call(this, p)
  end
  def put_ondragleave(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragleave.call(this, v)
  end
  def get_ondragleave(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragleave.call(this, p)
  end
  def put_ondragover(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragover.call(this, v)
  end
  def get_ondragover(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragover.call(this, p)
  end
  def put_ondragstart(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondragstart.call(this, v)
  end
  def get_ondragstart(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondragstart.call(this, p)
  end
  def put_ondrop(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondrop.call(this, v)
  end
  def get_ondrop(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondrop.call(this, p)
  end
  def put_ondurationchange(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondurationchange.call(this, v)
  end
  def get_ondurationchange(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondurationchange.call(this, p)
  end
  def put_onfocusin(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusin.call(this, v)
  end
  def get_onfocusin(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusin.call(this, p)
  end
  def put_onfocusout(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusout.call(this, v)
  end
  def get_onfocusout(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusout.call(this, p)
  end
  def put_oninput(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oninput.call(this, v)
  end
  def get_oninput(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oninput.call(this, p)
  end
  def put_onemptied(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onemptied.call(this, v)
  end
  def get_onemptied(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onemptied.call(this, p)
  end
  def put_onended(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onended.call(this, v)
  end
  def get_onended(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onended.call(this, p)
  end
  def put_onkeydown(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeydown.call(this, v)
  end
  def get_onkeydown(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeydown.call(this, p)
  end
  def put_onkeypress(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeypress.call(this, v)
  end
  def get_onkeypress(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeypress.call(this, p)
  end
  def put_onkeyup(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onkeyup.call(this, v)
  end
  def get_onkeyup(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onkeyup.call(this, p)
  end
  def put_onloadeddata(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadeddata.call(this, v)
  end
  def get_onloadeddata(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadeddata.call(this, p)
  end
  def put_onloadedmetadata(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadedmetadata.call(this, v)
  end
  def get_onloadedmetadata(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadedmetadata.call(this, p)
  end
  def put_onloadstart(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onloadstart.call(this, v)
  end
  def get_onloadstart(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onloadstart.call(this, p)
  end
  def put_onmousedown(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousedown.call(this, v)
  end
  def get_onmousedown(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousedown.call(this, p)
  end
  def put_onmouseenter(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseenter.call(this, v)
  end
  def get_onmouseenter(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseenter.call(this, p)
  end
  def put_onmouseleave(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseleave.call(this, v)
  end
  def get_onmouseleave(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseleave.call(this, p)
  end
  def put_onmousemove(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousemove.call(this, v)
  end
  def get_onmousemove(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousemove.call(this, p)
  end
  def put_onmouseout(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseout.call(this, v)
  end
  def get_onmouseout(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseout.call(this, p)
  end
  def put_onmouseover(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseover.call(this, v)
  end
  def get_onmouseover(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseover.call(this, p)
  end
  def put_onmouseup(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmouseup.call(this, v)
  end
  def get_onmouseup(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmouseup.call(this, p)
  end
  def put_onmousewheel(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousewheel.call(this, v)
  end
  def get_onmousewheel(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousewheel.call(this, p)
  end
  def put_onoffline(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onoffline.call(this, v)
  end
  def get_onoffline(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onoffline.call(this, p)
  end
  def put_ononline(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ononline.call(this, v)
  end
  def get_ononline(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ononline.call(this, p)
  end
  def put_onprogress(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onprogress.call(this, v)
  end
  def get_onprogress(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onprogress.call(this, p)
  end
  def put_onratechange(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onratechange.call(this, v)
  end
  def get_onratechange(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onratechange.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onreset(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreset.call(this, v)
  end
  def get_onreset(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreset.call(this, p)
  end
  def put_onseeked(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeked.call(this, v)
  end
  def get_onseeked(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeked.call(this, p)
  end
  def put_onseeking(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onseeking.call(this, v)
  end
  def get_onseeking(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onseeking.call(this, p)
  end
  def put_onselect(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselect.call(this, v)
  end
  def get_onselect(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselect.call(this, p)
  end
  def put_onstalled(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstalled.call(this, v)
  end
  def get_onstalled(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstalled.call(this, p)
  end
  def put_onstorage(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstorage.call(this, v)
  end
  def get_onstorage(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstorage.call(this, p)
  end
  def put_onsubmit(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsubmit.call(this, v)
  end
  def get_onsubmit(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsubmit.call(this, p)
  end
  def put_onsuspend(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onsuspend.call(this, v)
  end
  def get_onsuspend(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onsuspend.call(this, p)
  end
  def put_ontimeupdate(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ontimeupdate.call(this, v)
  end
  def get_ontimeupdate(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ontimeupdate.call(this, p)
  end
  def put_onpause(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpause.call(this, v)
  end
  def get_onpause(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpause.call(this, p)
  end
  def put_onplay(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplay.call(this, v)
  end
  def get_onplay(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplay.call(this, p)
  end
  def put_onplaying(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onplaying.call(this, v)
  end
  def get_onplaying(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onplaying.call(this, p)
  end
  def put_onvolumechange(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onvolumechange.call(this, v)
  end
  def get_onvolumechange(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onvolumechange.call(this, p)
  end
  def put_onwaiting(this : IHTMLWindow7*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onwaiting.call(this, v)
  end
  def get_onwaiting(this : IHTMLWindow7*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onwaiting.call(this, p)
  end
end
struct LibWin32::IHTMLWindow8
  def query_interface(this : IHTMLWindow8*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLWindow8*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLWindow8*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLWindow8*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLWindow8*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLWindow8*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLWindow8*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmspointerdown(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerdown.call(this, v)
  end
  def get_onmspointerdown(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerdown.call(this, p)
  end
  def put_onmspointermove(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointermove.call(this, v)
  end
  def get_onmspointermove(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointermove.call(this, p)
  end
  def put_onmspointerup(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerup.call(this, v)
  end
  def get_onmspointerup(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerup.call(this, p)
  end
  def put_onmspointerover(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerover.call(this, v)
  end
  def get_onmspointerover(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerover.call(this, p)
  end
  def put_onmspointerout(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerout.call(this, v)
  end
  def get_onmspointerout(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerout.call(this, p)
  end
  def put_onmspointercancel(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointercancel.call(this, v)
  end
  def get_onmspointercancel(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointercancel.call(this, p)
  end
  def put_onmspointerhover(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerhover.call(this, v)
  end
  def get_onmspointerhover(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerhover.call(this, p)
  end
  def put_onmsgesturestart(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturestart.call(this, v)
  end
  def get_onmsgesturestart(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturestart.call(this, p)
  end
  def put_onmsgesturechange(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturechange.call(this, v)
  end
  def get_onmsgesturechange(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturechange.call(this, p)
  end
  def put_onmsgestureend(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgestureend.call(this, v)
  end
  def get_onmsgestureend(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgestureend.call(this, p)
  end
  def put_onmsgesturehold(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturehold.call(this, v)
  end
  def get_onmsgesturehold(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturehold.call(this, p)
  end
  def put_onmsgesturetap(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturetap.call(this, v)
  end
  def get_onmsgesturetap(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturetap.call(this, p)
  end
  def put_onmsgesturedoubletap(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturedoubletap.call(this, v)
  end
  def get_onmsgesturedoubletap(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturedoubletap.call(this, p)
  end
  def put_onmsinertiastart(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsinertiastart.call(this, v)
  end
  def get_onmsinertiastart(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsinertiastart.call(this, p)
  end
  def get_application_cache(this : IHTMLWindow8*, p : IHTMLApplicationCache*) : HRESULT
    @lpVtbl.value.get_application_cache.call(this, p)
  end
  def put_onpopstate(this : IHTMLWindow8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpopstate.call(this, v)
  end
  def get_onpopstate(this : IHTMLWindow8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpopstate.call(this, p)
  end
end
struct LibWin32::DispHTMLScreen
  def query_interface(this : DispHTMLScreen*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLScreen*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLScreen*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLScreen*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLScreen*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLScreen*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLScreen*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLWindow2
  def query_interface(this : DispHTMLWindow2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLWindow2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLWindow2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLWindow2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLWindow2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLWindow2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLWindow2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLWindowProxy
  def query_interface(this : DispHTMLWindowProxy*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLWindowProxy*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLWindowProxy*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLWindowProxy*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLWindowProxy*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLWindowProxy*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLWindowProxy*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDocumentCompatibleInfo
  def query_interface(this : IHTMLDocumentCompatibleInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocumentCompatibleInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocumentCompatibleInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocumentCompatibleInfo*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocumentCompatibleInfo*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocumentCompatibleInfo*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocumentCompatibleInfo*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_user_agent(this : IHTMLDocumentCompatibleInfo*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_user_agent.call(this, p)
  end
  def get_version(this : IHTMLDocumentCompatibleInfo*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, p)
  end
end
struct LibWin32::IHTMLDocumentCompatibleInfoCollection
  def query_interface(this : IHTMLDocumentCompatibleInfoCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocumentCompatibleInfoCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocumentCompatibleInfoCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocumentCompatibleInfoCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocumentCompatibleInfoCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocumentCompatibleInfoCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocumentCompatibleInfoCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLDocumentCompatibleInfoCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLDocumentCompatibleInfoCollection*, index : Int32, compatibleinfo : IHTMLDocumentCompatibleInfo*) : HRESULT
    @lpVtbl.value.item.call(this, index, compatibleinfo)
  end
end
struct LibWin32::DispHTMLDocumentCompatibleInfo
  def query_interface(this : DispHTMLDocumentCompatibleInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDocumentCompatibleInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDocumentCompatibleInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDocumentCompatibleInfo*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDocumentCompatibleInfo*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDocumentCompatibleInfo*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDocumentCompatibleInfo*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLDocumentCompatibleInfoCollection
  def query_interface(this : DispHTMLDocumentCompatibleInfoCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDocumentCompatibleInfoCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDocumentCompatibleInfoCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDocumentCompatibleInfoCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDocumentCompatibleInfoCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDocumentCompatibleInfoCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDocumentCompatibleInfoCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLDocumentEvents4
  def query_interface(this : HTMLDocumentEvents4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLDocumentEvents4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLDocumentEvents4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLDocumentEvents4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLDocumentEvents4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLDocumentEvents4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLDocumentEvents4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLDocumentEvents3
  def query_interface(this : HTMLDocumentEvents3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLDocumentEvents3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLDocumentEvents3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLDocumentEvents3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLDocumentEvents3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLDocumentEvents3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLDocumentEvents3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLDocumentEvents2
  def query_interface(this : HTMLDocumentEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLDocumentEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLDocumentEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLDocumentEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLDocumentEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLDocumentEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLDocumentEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLDocumentEvents
  def query_interface(this : HTMLDocumentEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLDocumentEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLDocumentEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLDocumentEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLDocumentEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLDocumentEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLDocumentEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGSVGElement
  def query_interface(this : ISVGSVGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGSVGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGSVGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGSVGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGSVGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGSVGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGSVGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x(this : ISVGSVGElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGSVGElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGSVGElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGSVGElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGSVGElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGSVGElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGSVGElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGSVGElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_content_script_type(this : ISVGSVGElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content_script_type.call(this, v)
  end
  def get_content_script_type(this : ISVGSVGElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content_script_type.call(this, p)
  end
  def put_content_style_type(this : ISVGSVGElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_content_style_type.call(this, v)
  end
  def get_content_style_type(this : ISVGSVGElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content_style_type.call(this, p)
  end
  def putref_viewport(this : ISVGSVGElement*, v : ISVGRect) : HRESULT
    @lpVtbl.value.putref_viewport.call(this, v)
  end
  def get_viewport(this : ISVGSVGElement*, p : ISVGRect*) : HRESULT
    @lpVtbl.value.get_viewport.call(this, p)
  end
  def put_pixel_unit_to_millimeter_x(this : ISVGSVGElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_pixel_unit_to_millimeter_x.call(this, v)
  end
  def get_pixel_unit_to_millimeter_x(this : ISVGSVGElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pixel_unit_to_millimeter_x.call(this, p)
  end
  def put_pixel_unit_to_millimeter_y(this : ISVGSVGElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_pixel_unit_to_millimeter_y.call(this, v)
  end
  def get_pixel_unit_to_millimeter_y(this : ISVGSVGElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_pixel_unit_to_millimeter_y.call(this, p)
  end
  def put_screen_pixel_to_millimeter_x(this : ISVGSVGElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_screen_pixel_to_millimeter_x.call(this, v)
  end
  def get_screen_pixel_to_millimeter_x(this : ISVGSVGElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_screen_pixel_to_millimeter_x.call(this, p)
  end
  def put_screen_pixel_to_millimeter_y(this : ISVGSVGElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_screen_pixel_to_millimeter_y.call(this, v)
  end
  def get_screen_pixel_to_millimeter_y(this : ISVGSVGElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_screen_pixel_to_millimeter_y.call(this, p)
  end
  def put_use_current_view(this : ISVGSVGElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_use_current_view.call(this, v)
  end
  def get_use_current_view(this : ISVGSVGElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_use_current_view.call(this, p)
  end
  def putref_current_view(this : ISVGSVGElement*, v : ISVGViewSpec) : HRESULT
    @lpVtbl.value.putref_current_view.call(this, v)
  end
  def get_current_view(this : ISVGSVGElement*, p : ISVGViewSpec*) : HRESULT
    @lpVtbl.value.get_current_view.call(this, p)
  end
  def put_current_scale(this : ISVGSVGElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_current_scale.call(this, v)
  end
  def get_current_scale(this : ISVGSVGElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_current_scale.call(this, p)
  end
  def putref_current_translate(this : ISVGSVGElement*, v : ISVGPoint) : HRESULT
    @lpVtbl.value.putref_current_translate.call(this, v)
  end
  def get_current_translate(this : ISVGSVGElement*, p : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_current_translate.call(this, p)
  end
  def suspend_redraw(this : ISVGSVGElement*, maxwaitmilliseconds : UInt32, presult : UInt32*) : HRESULT
    @lpVtbl.value.suspend_redraw.call(this, maxwaitmilliseconds, presult)
  end
  def unsuspend_redraw(this : ISVGSVGElement*, suspendhandeid : UInt32) : HRESULT
    @lpVtbl.value.unsuspend_redraw.call(this, suspendhandeid)
  end
  def unsuspend_redraw_all(this : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.unsuspend_redraw_all.call(this)
  end
  def force_redraw(this : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.force_redraw.call(this)
  end
  def pause_animations(this : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.pause_animations.call(this)
  end
  def unpause_animations(this : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.unpause_animations.call(this)
  end
  def animations_paused(this : ISVGSVGElement*, presult : Int16*) : HRESULT
    @lpVtbl.value.animations_paused.call(this, presult)
  end
  def get_current_time(this : ISVGSVGElement*, presult : Float32*) : HRESULT
    @lpVtbl.value.get_current_time.call(this, presult)
  end
  def set_current_time(this : ISVGSVGElement*, seconds : Float32) : HRESULT
    @lpVtbl.value.set_current_time.call(this, seconds)
  end
  def get_intersection_list(this : ISVGSVGElement*, rect : ISVGRect, referenceelement : ISVGElement, presult : VARIANT*) : HRESULT
    @lpVtbl.value.get_intersection_list.call(this, rect, referenceelement, presult)
  end
  def get_enclosure_list(this : ISVGSVGElement*, rect : ISVGRect, referenceelement : ISVGElement, presult : VARIANT*) : HRESULT
    @lpVtbl.value.get_enclosure_list.call(this, rect, referenceelement, presult)
  end
  def check_intersection(this : ISVGSVGElement*, element : ISVGElement, rect : ISVGRect, presult : Int16*) : HRESULT
    @lpVtbl.value.check_intersection.call(this, element, rect, presult)
  end
  def check_enclosure(this : ISVGSVGElement*, element : ISVGElement, rect : ISVGRect, presult : Int16*) : HRESULT
    @lpVtbl.value.check_enclosure.call(this, element, rect, presult)
  end
  def deselect_all(this : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.deselect_all.call(this)
  end
  def create_svg_number(this : ISVGSVGElement*, presult : ISVGNumber*) : HRESULT
    @lpVtbl.value.create_svg_number.call(this, presult)
  end
  def create_svg_length(this : ISVGSVGElement*, presult : ISVGLength*) : HRESULT
    @lpVtbl.value.create_svg_length.call(this, presult)
  end
  def create_svg_angle(this : ISVGSVGElement*, presult : ISVGAngle*) : HRESULT
    @lpVtbl.value.create_svg_angle.call(this, presult)
  end
  def create_svg_point(this : ISVGSVGElement*, presult : ISVGPoint*) : HRESULT
    @lpVtbl.value.create_svg_point.call(this, presult)
  end
  def create_svg_matrix(this : ISVGSVGElement*, presult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.create_svg_matrix.call(this, presult)
  end
  def create_svg_rect(this : ISVGSVGElement*, presult : ISVGRect*) : HRESULT
    @lpVtbl.value.create_svg_rect.call(this, presult)
  end
  def create_svg_transform(this : ISVGSVGElement*, presult : ISVGTransform*) : HRESULT
    @lpVtbl.value.create_svg_transform.call(this, presult)
  end
  def create_svg_transform_from_matrix(this : ISVGSVGElement*, matrix : ISVGMatrix, presult : ISVGTransform*) : HRESULT
    @lpVtbl.value.create_svg_transform_from_matrix.call(this, matrix, presult)
  end
  def get_element_by_id(this : ISVGSVGElement*, elementid : UInt8*, presult : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element_by_id.call(this, elementid, presult)
  end
end
struct LibWin32::IDOMNodeIterator
  def query_interface(this : IDOMNodeIterator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMNodeIterator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMNodeIterator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMNodeIterator*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMNodeIterator*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMNodeIterator*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMNodeIterator*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root(this : IDOMNodeIterator*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_root.call(this, p)
  end
  def get_what_to_show(this : IDOMNodeIterator*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_what_to_show.call(this, p)
  end
  def get_filter(this : IDOMNodeIterator*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def get_expand_entity_references(this : IDOMNodeIterator*, p : Int16*) : HRESULT
    @lpVtbl.value.get_expand_entity_references.call(this, p)
  end
  def next_node(this : IDOMNodeIterator*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.next_node.call(this, ppretnode)
  end
  def previous_node(this : IDOMNodeIterator*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.previous_node.call(this, ppretnode)
  end
  def detach(this : IDOMNodeIterator*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
end
struct LibWin32::IDOMTreeWalker
  def query_interface(this : IDOMTreeWalker*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMTreeWalker*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMTreeWalker*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMTreeWalker*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMTreeWalker*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMTreeWalker*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMTreeWalker*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root(this : IDOMTreeWalker*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_root.call(this, p)
  end
  def get_what_to_show(this : IDOMTreeWalker*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_what_to_show.call(this, p)
  end
  def get_filter(this : IDOMTreeWalker*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_filter.call(this, p)
  end
  def get_expand_entity_references(this : IDOMTreeWalker*, p : Int16*) : HRESULT
    @lpVtbl.value.get_expand_entity_references.call(this, p)
  end
  def putref_current_node(this : IDOMTreeWalker*, v : IDispatch) : HRESULT
    @lpVtbl.value.putref_current_node.call(this, v)
  end
  def get_current_node(this : IDOMTreeWalker*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_current_node.call(this, p)
  end
  def parent_node(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.parent_node.call(this, ppretnode)
  end
  def first_child(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.first_child.call(this, ppretnode)
  end
  def last_child(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.last_child.call(this, ppretnode)
  end
  def previous_sibling(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.previous_sibling.call(this, ppretnode)
  end
  def next_sibling(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.next_sibling.call(this, ppretnode)
  end
  def previous_node(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.previous_node.call(this, ppretnode)
  end
  def next_node(this : IDOMTreeWalker*, ppretnode : IDispatch*) : HRESULT
    @lpVtbl.value.next_node.call(this, ppretnode)
  end
end
struct LibWin32::IDOMProcessingInstruction
  def query_interface(this : IDOMProcessingInstruction*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMProcessingInstruction*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMProcessingInstruction*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMProcessingInstruction*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMProcessingInstruction*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMProcessingInstruction*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMProcessingInstruction*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_target(this : IDOMProcessingInstruction*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
  def put_data(this : IDOMProcessingInstruction*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IDOMProcessingInstruction*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
end
struct LibWin32::IHTMLDocument3
  def query_interface(this : IHTMLDocument3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def release_capture(this : IHTMLDocument3*) : HRESULT
    @lpVtbl.value.release_capture.call(this)
  end
  def recalc(this : IHTMLDocument3*, fforce : Int16) : HRESULT
    @lpVtbl.value.recalc.call(this, fforce)
  end
  def create_text_node(this : IHTMLDocument3*, text : UInt8*, newtextnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.create_text_node.call(this, text, newtextnode)
  end
  def get_document_element(this : IHTMLDocument3*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_document_element.call(this, p)
  end
  def get_unique_id(this : IHTMLDocument3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unique_id.call(this, p)
  end
  def attach_event(this : IHTMLDocument3*, event : UInt8*, pdisp : IDispatch, pfresult : Int16*) : HRESULT
    @lpVtbl.value.attach_event.call(this, event, pdisp, pfresult)
  end
  def detach_event(this : IHTMLDocument3*, event : UInt8*, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.detach_event.call(this, event, pdisp)
  end
  def put_onrowsdelete(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowsdelete.call(this, v)
  end
  def get_onrowsdelete(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowsdelete.call(this, p)
  end
  def put_onrowsinserted(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onrowsinserted.call(this, v)
  end
  def get_onrowsinserted(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onrowsinserted.call(this, p)
  end
  def put_oncellchange(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncellchange.call(this, v)
  end
  def get_oncellchange(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncellchange.call(this, p)
  end
  def put_ondatasetchanged(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondatasetchanged.call(this, v)
  end
  def get_ondatasetchanged(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondatasetchanged.call(this, p)
  end
  def put_ondataavailable(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondataavailable.call(this, v)
  end
  def get_ondataavailable(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondataavailable.call(this, p)
  end
  def put_ondatasetcomplete(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondatasetcomplete.call(this, v)
  end
  def get_ondatasetcomplete(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondatasetcomplete.call(this, p)
  end
  def put_onpropertychange(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onpropertychange.call(this, v)
  end
  def get_onpropertychange(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onpropertychange.call(this, p)
  end
  def put_dir(this : IHTMLDocument3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dir.call(this, v)
  end
  def get_dir(this : IHTMLDocument3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dir.call(this, p)
  end
  def put_oncontextmenu(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncontextmenu.call(this, v)
  end
  def get_oncontextmenu(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncontextmenu.call(this, p)
  end
  def put_onstop(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstop.call(this, v)
  end
  def get_onstop(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstop.call(this, p)
  end
  def create_document_fragment(this : IHTMLDocument3*, pnewdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.create_document_fragment.call(this, pnewdoc)
  end
  def get_parent_document(this : IHTMLDocument3*, p : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.get_parent_document.call(this, p)
  end
  def put_enable_download(this : IHTMLDocument3*, v : Int16) : HRESULT
    @lpVtbl.value.put_enable_download.call(this, v)
  end
  def get_enable_download(this : IHTMLDocument3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_enable_download.call(this, p)
  end
  def put_base_url(this : IHTMLDocument3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_base_url.call(this, v)
  end
  def get_base_url(this : IHTMLDocument3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_base_url.call(this, p)
  end
  def get_child_nodes(this : IHTMLDocument3*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_child_nodes.call(this, p)
  end
  def put_inherit_style_sheets(this : IHTMLDocument3*, v : Int16) : HRESULT
    @lpVtbl.value.put_inherit_style_sheets.call(this, v)
  end
  def get_inherit_style_sheets(this : IHTMLDocument3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_inherit_style_sheets.call(this, p)
  end
  def put_onbeforeeditfocus(this : IHTMLDocument3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeeditfocus.call(this, v)
  end
  def get_onbeforeeditfocus(this : IHTMLDocument3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeeditfocus.call(this, p)
  end
  def get_elements_by_name(this : IHTMLDocument3*, v : UInt8*, pelcoll : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_name.call(this, v, pelcoll)
  end
  def get_element_by_id(this : IHTMLDocument3*, v : UInt8*, pel : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element_by_id.call(this, v, pel)
  end
  def get_elements_by_tag_name(this : IHTMLDocument3*, v : UInt8*, pelcoll : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_elements_by_tag_name.call(this, v, pelcoll)
  end
end
struct LibWin32::IHTMLDocument4
  def query_interface(this : IHTMLDocument4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def focus(this : IHTMLDocument4*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def has_focus(this : IHTMLDocument4*, pffocus : Int16*) : HRESULT
    @lpVtbl.value.has_focus.call(this, pffocus)
  end
  def put_onselectionchange(this : IHTMLDocument4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onselectionchange.call(this, v)
  end
  def get_onselectionchange(this : IHTMLDocument4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onselectionchange.call(this, p)
  end
  def get_namespaces(this : IHTMLDocument4*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_namespaces.call(this, p)
  end
  def create_document_from_url(this : IHTMLDocument4*, bstrurl : UInt8*, bstroptions : UInt8*, newdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.create_document_from_url.call(this, bstrurl, bstroptions, newdoc)
  end
  def put_media(this : IHTMLDocument4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLDocument4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
  def create_event_object(this : IHTMLDocument4*, pvareventobject : VARIANT*, ppeventobj : IHTMLEventObj*) : HRESULT
    @lpVtbl.value.create_event_object.call(this, pvareventobject, ppeventobj)
  end
  def fire_event(this : IHTMLDocument4*, bstreventname : UInt8*, pvareventobject : VARIANT*, pfcancelled : Int16*) : HRESULT
    @lpVtbl.value.fire_event.call(this, bstreventname, pvareventobject, pfcancelled)
  end
  def create_render_style(this : IHTMLDocument4*, v : UInt8*, ppihtmlrenderstyle : IHTMLRenderStyle*) : HRESULT
    @lpVtbl.value.create_render_style.call(this, v, ppihtmlrenderstyle)
  end
  def put_oncontrolselect(this : IHTMLDocument4*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_oncontrolselect.call(this, v)
  end
  def get_oncontrolselect(this : IHTMLDocument4*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_oncontrolselect.call(this, p)
  end
  def get_url_unencoded(this : IHTMLDocument4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url_unencoded.call(this, p)
  end
end
struct LibWin32::IHTMLDocument5
  def query_interface(this : IHTMLDocument5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmousewheel(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmousewheel.call(this, v)
  end
  def get_onmousewheel(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmousewheel.call(this, p)
  end
  def get_doctype(this : IHTMLDocument5*, p : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.get_doctype.call(this, p)
  end
  def get_implementation(this : IHTMLDocument5*, p : IHTMLDOMImplementation*) : HRESULT
    @lpVtbl.value.get_implementation.call(this, p)
  end
  def create_attribute(this : IHTMLDocument5*, bstrattrname : UInt8*, ppattribute : IHTMLDOMAttribute*) : HRESULT
    @lpVtbl.value.create_attribute.call(this, bstrattrname, ppattribute)
  end
  def create_comment(this : IHTMLDocument5*, bstrdata : UInt8*, ppretnode : IHTMLDOMNode*) : HRESULT
    @lpVtbl.value.create_comment.call(this, bstrdata, ppretnode)
  end
  def put_onfocusin(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusin.call(this, v)
  end
  def get_onfocusin(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusin.call(this, p)
  end
  def put_onfocusout(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocusout.call(this, v)
  end
  def get_onfocusout(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocusout.call(this, p)
  end
  def put_onactivate(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onactivate.call(this, v)
  end
  def get_onactivate(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onactivate.call(this, p)
  end
  def put_ondeactivate(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ondeactivate.call(this, v)
  end
  def get_ondeactivate(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ondeactivate.call(this, p)
  end
  def put_onbeforeactivate(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeactivate.call(this, v)
  end
  def get_onbeforeactivate(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeactivate.call(this, p)
  end
  def put_onbeforedeactivate(this : IHTMLDocument5*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforedeactivate.call(this, v)
  end
  def get_onbeforedeactivate(this : IHTMLDocument5*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforedeactivate.call(this, p)
  end
  def get_compat_mode(this : IHTMLDocument5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_compat_mode.call(this, p)
  end
end
struct LibWin32::IHTMLDocument6
  def query_interface(this : IHTMLDocument6*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument6*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument6*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument6*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument6*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument6*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument6*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_compatible(this : IHTMLDocument6*, p : IHTMLDocumentCompatibleInfoCollection*) : HRESULT
    @lpVtbl.value.get_compatible.call(this, p)
  end
  def get_document_mode(this : IHTMLDocument6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_document_mode.call(this, p)
  end
  def put_onstorage(this : IHTMLDocument6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstorage.call(this, v)
  end
  def get_onstorage(this : IHTMLDocument6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstorage.call(this, p)
  end
  def put_onstoragecommit(this : IHTMLDocument6*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstoragecommit.call(this, v)
  end
  def get_onstoragecommit(this : IHTMLDocument6*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstoragecommit.call(this, p)
  end
  def get_element_by_id(this : IHTMLDocument6*, bstrid : UInt8*, ppretelement : IHTMLElement2*) : HRESULT
    @lpVtbl.value.get_element_by_id.call(this, bstrid, ppretelement)
  end
  def update_settings(this : IHTMLDocument6*) : HRESULT
    @lpVtbl.value.update_settings.call(this)
  end
end
struct LibWin32::IHTMLDocument8
  def query_interface(this : IHTMLDocument8*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDocument8*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDocument8*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDocument8*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDocument8*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDocument8*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDocument8*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onmscontentzoom(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmscontentzoom.call(this, v)
  end
  def get_onmscontentzoom(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmscontentzoom.call(this, p)
  end
  def put_onmspointerdown(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerdown.call(this, v)
  end
  def get_onmspointerdown(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerdown.call(this, p)
  end
  def put_onmspointermove(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointermove.call(this, v)
  end
  def get_onmspointermove(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointermove.call(this, p)
  end
  def put_onmspointerup(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerup.call(this, v)
  end
  def get_onmspointerup(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerup.call(this, p)
  end
  def put_onmspointerover(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerover.call(this, v)
  end
  def get_onmspointerover(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerover.call(this, p)
  end
  def put_onmspointerout(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerout.call(this, v)
  end
  def get_onmspointerout(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerout.call(this, p)
  end
  def put_onmspointercancel(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointercancel.call(this, v)
  end
  def get_onmspointercancel(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointercancel.call(this, p)
  end
  def put_onmspointerhover(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmspointerhover.call(this, v)
  end
  def get_onmspointerhover(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmspointerhover.call(this, p)
  end
  def put_onmsgesturestart(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturestart.call(this, v)
  end
  def get_onmsgesturestart(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturestart.call(this, p)
  end
  def put_onmsgesturechange(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturechange.call(this, v)
  end
  def get_onmsgesturechange(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturechange.call(this, p)
  end
  def put_onmsgestureend(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgestureend.call(this, v)
  end
  def get_onmsgestureend(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgestureend.call(this, p)
  end
  def put_onmsgesturehold(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturehold.call(this, v)
  end
  def get_onmsgesturehold(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturehold.call(this, p)
  end
  def put_onmsgesturetap(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturetap.call(this, v)
  end
  def get_onmsgesturetap(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturetap.call(this, p)
  end
  def put_onmsgesturedoubletap(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsgesturedoubletap.call(this, v)
  end
  def get_onmsgesturedoubletap(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsgesturedoubletap.call(this, p)
  end
  def put_onmsinertiastart(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsinertiastart.call(this, v)
  end
  def get_onmsinertiastart(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsinertiastart.call(this, p)
  end
  def elements_from_point(this : IHTMLDocument8*, x : Float32, y : Float32, elementshit : IHTMLDOMChildrenCollection*) : HRESULT
    @lpVtbl.value.elements_from_point.call(this, x, y, elementshit)
  end
  def elements_from_rect(this : IHTMLDocument8*, left : Float32, top : Float32, width : Float32, height : Float32, elementshit : IHTMLDOMChildrenCollection*) : HRESULT
    @lpVtbl.value.elements_from_rect.call(this, left, top, width, height, elementshit)
  end
  def put_onmsmanipulationstatechanged(this : IHTMLDocument8*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmsmanipulationstatechanged.call(this, v)
  end
  def get_onmsmanipulationstatechanged(this : IHTMLDocument8*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmsmanipulationstatechanged.call(this, p)
  end
  def put_ms_caps_lock_warning_off(this : IHTMLDocument8*, v : Int16) : HRESULT
    @lpVtbl.value.put_ms_caps_lock_warning_off.call(this, v)
  end
  def get_ms_caps_lock_warning_off(this : IHTMLDocument8*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ms_caps_lock_warning_off.call(this, p)
  end
end
struct LibWin32::IDocumentEvent
  def query_interface(this : IDocumentEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocumentEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocumentEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDocumentEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDocumentEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDocumentEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDocumentEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_event(this : IDocumentEvent*, eventtype : UInt8*, ppevent : IDOMEvent*) : HRESULT
    @lpVtbl.value.create_event.call(this, eventtype, ppevent)
  end
end
struct LibWin32::IDocumentRange
  def query_interface(this : IDocumentRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocumentRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocumentRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDocumentRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDocumentRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDocumentRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDocumentRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_range(this : IDocumentRange*, ppihtmldomrange : IHTMLDOMRange*) : HRESULT
    @lpVtbl.value.create_range.call(this, ppihtmldomrange)
  end
end
struct LibWin32::IDocumentSelector
  def query_interface(this : IDocumentSelector*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocumentSelector*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocumentSelector*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDocumentSelector*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDocumentSelector*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDocumentSelector*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDocumentSelector*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def query_selector(this : IDocumentSelector*, v : UInt8*, pel : IHTMLElement*) : HRESULT
    @lpVtbl.value.query_selector.call(this, v, pel)
  end
  def query_selector_all(this : IDocumentSelector*, v : UInt8*, pel : IHTMLDOMChildrenCollection*) : HRESULT
    @lpVtbl.value.query_selector_all.call(this, v, pel)
  end
end
struct LibWin32::IDocumentTraversal
  def query_interface(this : IDocumentTraversal*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocumentTraversal*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocumentTraversal*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDocumentTraversal*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDocumentTraversal*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDocumentTraversal*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDocumentTraversal*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_node_iterator(this : IDocumentTraversal*, prootnode : IDispatch, ulwhattoshow : Int32, pfilter : VARIANT*, fentityreferenceexpansion : Int16, ppnodeiterator : IDOMNodeIterator*) : HRESULT
    @lpVtbl.value.create_node_iterator.call(this, prootnode, ulwhattoshow, pfilter, fentityreferenceexpansion, ppnodeiterator)
  end
  def create_tree_walker(this : IDocumentTraversal*, prootnode : IDispatch, ulwhattoshow : Int32, pfilter : VARIANT*, fentityreferenceexpansion : Int16, pptreewalker : IDOMTreeWalker*) : HRESULT
    @lpVtbl.value.create_tree_walker.call(this, prootnode, ulwhattoshow, pfilter, fentityreferenceexpansion, pptreewalker)
  end
end
struct LibWin32::DispHTMLDocument
  def query_interface(this : DispHTMLDocument*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDocument*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDocument*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDocument*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDocument*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDocument*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDocument*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DWebBridgeEvents
  def query_interface(this : DWebBridgeEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DWebBridgeEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DWebBridgeEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DWebBridgeEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DWebBridgeEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DWebBridgeEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DWebBridgeEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IWebBridge
  def query_interface(this : IWebBridge*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebBridge*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebBridge*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWebBridge*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWebBridge*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWebBridge*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWebBridge*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_url(this : IWebBridge*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IWebBridge*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_scrollbar(this : IWebBridge*, v : Int16) : HRESULT
    @lpVtbl.value.put_scrollbar.call(this, v)
  end
  def get_scrollbar(this : IWebBridge*, p : Int16*) : HRESULT
    @lpVtbl.value.get_scrollbar.call(this, p)
  end
  def put_embed(this : IWebBridge*, v : Int16) : HRESULT
    @lpVtbl.value.put_embed.call(this, v)
  end
  def get_embed(this : IWebBridge*, p : Int16*) : HRESULT
    @lpVtbl.value.get_embed.call(this, p)
  end
  def get_event(this : IWebBridge*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_event.call(this, p)
  end
  def get_ready_state(this : IWebBridge*, p : Int32*) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def about_box(this : IWebBridge*) : HRESULT
    @lpVtbl.value.about_box.call(this)
  end
end
struct LibWin32::IWBScriptControl
  def query_interface(this : IWBScriptControl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWBScriptControl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWBScriptControl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWBScriptControl*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWBScriptControl*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWBScriptControl*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWBScriptControl*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def raise_event(this : IWBScriptControl*, name : UInt8*, eventdata : VARIANT) : HRESULT
    @lpVtbl.value.raise_event.call(this, name, eventdata)
  end
  def bubble_event(this : IWBScriptControl*) : HRESULT
    @lpVtbl.value.bubble_event.call(this)
  end
  def set_context_menu(this : IWBScriptControl*, menuitempairs : VARIANT) : HRESULT
    @lpVtbl.value.set_context_menu.call(this, menuitempairs)
  end
  def put_selectable_content(this : IWBScriptControl*, v : Int16) : HRESULT
    @lpVtbl.value.put_selectable_content.call(this, v)
  end
  def get_selectable_content(this : IWBScriptControl*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selectable_content.call(this, p)
  end
  def get_frozen(this : IWBScriptControl*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frozen.call(this, p)
  end
  def put_scrollbar(this : IWBScriptControl*, v : Int16) : HRESULT
    @lpVtbl.value.put_scrollbar.call(this, v)
  end
  def get_scrollbar(this : IWBScriptControl*, p : Int16*) : HRESULT
    @lpVtbl.value.get_scrollbar.call(this, p)
  end
  def get_version(this : IWBScriptControl*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, p)
  end
  def get_visibility(this : IWBScriptControl*, p : Int16*) : HRESULT
    @lpVtbl.value.get_visibility.call(this, p)
  end
  def put_onvisibilitychange(this : IWBScriptControl*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onvisibilitychange.call(this, v)
  end
  def get_onvisibilitychange(this : IWBScriptControl*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onvisibilitychange.call(this, p)
  end
end
struct LibWin32::IHTMLEmbedElement
  def query_interface(this : IHTMLEmbedElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEmbedElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEmbedElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEmbedElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEmbedElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEmbedElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEmbedElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_hidden(this : IHTMLEmbedElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hidden.call(this, v)
  end
  def get_hidden(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hidden.call(this, p)
  end
  def get_palette(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_palette.call(this, p)
  end
  def get_pluginspage(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pluginspage.call(this, p)
  end
  def put_src(this : IHTMLEmbedElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_units(this : IHTMLEmbedElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_units.call(this, v)
  end
  def get_units(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_units.call(this, p)
  end
  def put_name(this : IHTMLEmbedElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLEmbedElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_width(this : IHTMLEmbedElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLEmbedElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLEmbedElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLEmbedElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::IHTMLEmbedElement2
  def query_interface(this : IHTMLEmbedElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEmbedElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEmbedElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLEmbedElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLEmbedElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLEmbedElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLEmbedElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLEmbedElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLEmbedElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def get_pluginspage(this : IHTMLEmbedElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pluginspage.call(this, p)
  end
end
struct LibWin32::DispHTMLEmbed
  def query_interface(this : DispHTMLEmbed*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLEmbed*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLEmbed*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLEmbed*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLEmbed*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLEmbed*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLEmbed*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLMapEvents2
  def query_interface(this : HTMLMapEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLMapEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLMapEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLMapEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLMapEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLMapEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLMapEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLMapEvents
  def query_interface(this : HTMLMapEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLMapEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLMapEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLMapEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLMapEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLMapEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLMapEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLAreasCollection
  def query_interface(this : IHTMLAreasCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreasCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreasCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreasCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreasCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreasCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreasCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_length(this : IHTMLAreasCollection*, v : Int32) : HRESULT
    @lpVtbl.value.put_length.call(this, v)
  end
  def get_length(this : IHTMLAreasCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLAreasCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLAreasCollection*, name : VARIANT, index : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, name, index, pdisp)
  end
  def tags(this : IHTMLAreasCollection*, tagname : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.tags.call(this, tagname, pdisp)
  end
  def add(this : IHTMLAreasCollection*, element : IHTMLElement, before : VARIANT) : HRESULT
    @lpVtbl.value.add.call(this, element, before)
  end
  def remove(this : IHTMLAreasCollection*, index : Int32) : HRESULT
    @lpVtbl.value.remove.call(this, index)
  end
end
struct LibWin32::IHTMLAreasCollection2
  def query_interface(this : IHTMLAreasCollection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreasCollection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreasCollection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreasCollection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreasCollection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreasCollection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreasCollection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def urns(this : IHTMLAreasCollection2*, urn : VARIANT, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.urns.call(this, urn, pdisp)
  end
end
struct LibWin32::IHTMLAreasCollection3
  def query_interface(this : IHTMLAreasCollection3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreasCollection3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreasCollection3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreasCollection3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreasCollection3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreasCollection3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreasCollection3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def named_item(this : IHTMLAreasCollection3*, name : UInt8*, pdisp : IDispatch*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pdisp)
  end
end
struct LibWin32::IHTMLAreasCollection4
  def query_interface(this : IHTMLAreasCollection4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreasCollection4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreasCollection4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreasCollection4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreasCollection4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreasCollection4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreasCollection4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLAreasCollection4*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLAreasCollection4*, index : Int32, pnode : IHTMLElement2*) : HRESULT
    @lpVtbl.value.item.call(this, index, pnode)
  end
  def named_item(this : IHTMLAreasCollection4*, name : UInt8*, pnode : IHTMLElement2*) : HRESULT
    @lpVtbl.value.named_item.call(this, name, pnode)
  end
end
struct LibWin32::IHTMLMapElement
  def query_interface(this : IHTMLMapElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMapElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMapElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMapElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMapElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMapElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMapElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_areas(this : IHTMLMapElement*, p : IHTMLAreasCollection*) : HRESULT
    @lpVtbl.value.get_areas.call(this, p)
  end
  def put_name(this : IHTMLMapElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLMapElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
end
struct LibWin32::DispHTMLAreasCollection
  def query_interface(this : DispHTMLAreasCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAreasCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAreasCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAreasCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAreasCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAreasCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAreasCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLMapElement
  def query_interface(this : DispHTMLMapElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMapElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMapElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMapElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMapElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMapElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMapElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLAreaEvents2
  def query_interface(this : HTMLAreaEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLAreaEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLAreaEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLAreaEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLAreaEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLAreaEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLAreaEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLAreaEvents
  def query_interface(this : HTMLAreaEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLAreaEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLAreaEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLAreaEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLAreaEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLAreaEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLAreaEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLAreaElement
  def query_interface(this : IHTMLAreaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_shape(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_shape.call(this, v)
  end
  def get_shape(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_shape.call(this, p)
  end
  def put_coords(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_coords.call(this, v)
  end
  def get_coords(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_coords.call(this, p)
  end
  def put_href(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
  def put_target(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_target.call(this, v)
  end
  def get_target(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
  def put_alt(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_no_href(this : IHTMLAreaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_href.call(this, v)
  end
  def get_no_href(this : IHTMLAreaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_href.call(this, p)
  end
  def put_host(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_host.call(this, v)
  end
  def get_host(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_host.call(this, p)
  end
  def put_hostname(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hostname.call(this, v)
  end
  def get_hostname(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hostname.call(this, p)
  end
  def put_pathname(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_pathname.call(this, v)
  end
  def get_pathname(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_pathname.call(this, p)
  end
  def put_port(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_port.call(this, v)
  end
  def get_port(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_port.call(this, p)
  end
  def put_protocol(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_protocol.call(this, v)
  end
  def get_protocol(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_protocol.call(this, p)
  end
  def put_search(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_search.call(this, v)
  end
  def get_search(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_search.call(this, p)
  end
  def put_hash(this : IHTMLAreaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_hash.call(this, v)
  end
  def get_hash(this : IHTMLAreaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_hash.call(this, p)
  end
  def put_onblur(this : IHTMLAreaElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onblur.call(this, v)
  end
  def get_onblur(this : IHTMLAreaElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onblur.call(this, p)
  end
  def put_onfocus(this : IHTMLAreaElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onfocus.call(this, v)
  end
  def get_onfocus(this : IHTMLAreaElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onfocus.call(this, p)
  end
  def put_tab_index(this : IHTMLAreaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_tab_index.call(this, v)
  end
  def get_tab_index(this : IHTMLAreaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_tab_index.call(this, p)
  end
  def focus(this : IHTMLAreaElement*) : HRESULT
    @lpVtbl.value.focus.call(this)
  end
  def blur(this : IHTMLAreaElement*) : HRESULT
    @lpVtbl.value.blur.call(this)
  end
end
struct LibWin32::IHTMLAreaElement2
  def query_interface(this : IHTMLAreaElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAreaElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAreaElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAreaElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAreaElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAreaElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAreaElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_shape(this : IHTMLAreaElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_shape.call(this, v)
  end
  def get_shape(this : IHTMLAreaElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_shape.call(this, p)
  end
  def put_coords(this : IHTMLAreaElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_coords.call(this, v)
  end
  def get_coords(this : IHTMLAreaElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_coords.call(this, p)
  end
  def put_href(this : IHTMLAreaElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_href.call(this, v)
  end
  def get_href(this : IHTMLAreaElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
end
struct LibWin32::DispHTMLAreaElement
  def query_interface(this : DispHTMLAreaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAreaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAreaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAreaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAreaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAreaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAreaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLTableCaption
  def query_interface(this : IHTMLTableCaption*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCaption*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCaption*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCaption*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCaption*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCaption*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCaption*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLTableCaption*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTableCaption*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_v_align(this : IHTMLTableCaption*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_v_align.call(this, v)
  end
  def get_v_align(this : IHTMLTableCaption*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_v_align.call(this, p)
  end
end
struct LibWin32::DispHTMLTableCaption
  def query_interface(this : DispHTMLTableCaption*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTableCaption*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTableCaption*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTableCaption*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTableCaption*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTableCaption*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTableCaption*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLCommentElement
  def query_interface(this : IHTMLCommentElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCommentElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCommentElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCommentElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCommentElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCommentElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCommentElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_text(this : IHTMLCommentElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLCommentElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def put_atomic(this : IHTMLCommentElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_atomic.call(this, v)
  end
  def get_atomic(this : IHTMLCommentElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_atomic.call(this, p)
  end
end
struct LibWin32::IHTMLCommentElement2
  def query_interface(this : IHTMLCommentElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCommentElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCommentElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCommentElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCommentElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCommentElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCommentElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_data(this : IHTMLCommentElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IHTMLCommentElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def get_length(this : IHTMLCommentElement2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def substring_data(this : IHTMLCommentElement2*, offset : Int32, count : Int32, pbstrsubstring : UInt8**) : HRESULT
    @lpVtbl.value.substring_data.call(this, offset, count, pbstrsubstring)
  end
  def append_data(this : IHTMLCommentElement2*, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.append_data.call(this, bstrstring)
  end
  def insert_data(this : IHTMLCommentElement2*, offset : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.insert_data.call(this, offset, bstrstring)
  end
  def delete_data(this : IHTMLCommentElement2*, offset : Int32, count : Int32) : HRESULT
    @lpVtbl.value.delete_data.call(this, offset, count)
  end
  def replace_data(this : IHTMLCommentElement2*, offset : Int32, count : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.replace_data.call(this, offset, count, bstrstring)
  end
end
struct LibWin32::IHTMLCommentElement3
  def query_interface(this : IHTMLCommentElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCommentElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCommentElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCommentElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCommentElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCommentElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCommentElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def substring_data(this : IHTMLCommentElement3*, offset : Int32, count : Int32, pbstrsubstring : UInt8**) : HRESULT
    @lpVtbl.value.substring_data.call(this, offset, count, pbstrsubstring)
  end
  def insert_data(this : IHTMLCommentElement3*, offset : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.insert_data.call(this, offset, bstrstring)
  end
  def delete_data(this : IHTMLCommentElement3*, offset : Int32, count : Int32) : HRESULT
    @lpVtbl.value.delete_data.call(this, offset, count)
  end
  def replace_data(this : IHTMLCommentElement3*, offset : Int32, count : Int32, bstrstring : UInt8*) : HRESULT
    @lpVtbl.value.replace_data.call(this, offset, count, bstrstring)
  end
end
struct LibWin32::DispHTMLCommentElement
  def query_interface(this : DispHTMLCommentElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCommentElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCommentElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCommentElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCommentElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCommentElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCommentElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLPhraseElement
  def query_interface(this : IHTMLPhraseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPhraseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPhraseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPhraseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPhraseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPhraseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPhraseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLPhraseElement2
  def query_interface(this : IHTMLPhraseElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPhraseElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPhraseElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPhraseElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPhraseElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPhraseElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPhraseElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_cite(this : IHTMLPhraseElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cite.call(this, v)
  end
  def get_cite(this : IHTMLPhraseElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cite.call(this, p)
  end
  def put_date_time(this : IHTMLPhraseElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_date_time.call(this, v)
  end
  def get_date_time(this : IHTMLPhraseElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_date_time.call(this, p)
  end
end
struct LibWin32::IHTMLPhraseElement3
  def query_interface(this : IHTMLPhraseElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPhraseElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPhraseElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPhraseElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPhraseElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPhraseElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPhraseElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_cite(this : IHTMLPhraseElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cite.call(this, v)
  end
  def get_cite(this : IHTMLPhraseElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cite.call(this, p)
  end
end
struct LibWin32::IHTMLSpanElement
  def query_interface(this : IHTMLSpanElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSpanElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSpanElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSpanElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSpanElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSpanElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSpanElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLPhraseElement
  def query_interface(this : DispHTMLPhraseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLPhraseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLPhraseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLPhraseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLPhraseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLPhraseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLPhraseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLSpanElement
  def query_interface(this : DispHTMLSpanElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLSpanElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLSpanElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLSpanElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLSpanElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLSpanElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLSpanElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLTableEvents2
  def query_interface(this : HTMLTableEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLTableEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLTableEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLTableEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLTableEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLTableEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLTableEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLTableEvents
  def query_interface(this : HTMLTableEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLTableEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLTableEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLTableEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLTableEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLTableEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLTableEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLTableSection
  def query_interface(this : IHTMLTableSection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableSection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableSection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableSection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableSection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableSection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableSection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLTableSection*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTableSection*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_v_align(this : IHTMLTableSection*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_v_align.call(this, v)
  end
  def get_v_align(this : IHTMLTableSection*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_v_align.call(this, p)
  end
  def put_bg_color(this : IHTMLTableSection*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLTableSection*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def get_rows(this : IHTMLTableSection*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_rows.call(this, p)
  end
  def insert_row(this : IHTMLTableSection*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_row.call(this, index, row)
  end
  def delete_row(this : IHTMLTableSection*, index : Int32) : HRESULT
    @lpVtbl.value.delete_row.call(this, index)
  end
end
struct LibWin32::IHTMLTable
  def query_interface(this : IHTMLTable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTable*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTable*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTable*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTable*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_cols(this : IHTMLTable*, v : Int32) : HRESULT
    @lpVtbl.value.put_cols.call(this, v)
  end
  def get_cols(this : IHTMLTable*, p : Int32*) : HRESULT
    @lpVtbl.value.get_cols.call(this, p)
  end
  def put_border(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_frame(this : IHTMLTable*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_frame.call(this, v)
  end
  def get_frame(this : IHTMLTable*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_frame.call(this, p)
  end
  def put_rules(this : IHTMLTable*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rules.call(this, v)
  end
  def get_rules(this : IHTMLTable*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rules.call(this, p)
  end
  def put_cell_spacing(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_cell_spacing.call(this, v)
  end
  def get_cell_spacing(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_cell_spacing.call(this, p)
  end
  def put_cell_padding(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_cell_padding.call(this, v)
  end
  def get_cell_padding(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_cell_padding.call(this, p)
  end
  def put_background(this : IHTMLTable*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLTable*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_bg_color(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_border_color(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_color_light(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_light.call(this, v)
  end
  def get_border_color_light(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_light.call(this, p)
  end
  def put_border_color_dark(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_dark.call(this, v)
  end
  def get_border_color_dark(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_dark.call(this, p)
  end
  def put_align(this : IHTMLTable*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTable*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def refresh(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.refresh.call(this)
  end
  def get_rows(this : IHTMLTable*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_rows.call(this, p)
  end
  def put_width(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_data_page_size(this : IHTMLTable*, v : Int32) : HRESULT
    @lpVtbl.value.put_data_page_size.call(this, v)
  end
  def get_data_page_size(this : IHTMLTable*, p : Int32*) : HRESULT
    @lpVtbl.value.get_data_page_size.call(this, p)
  end
  def next_page(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.next_page.call(this)
  end
  def previous_page(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.previous_page.call(this)
  end
  def get_t_head(this : IHTMLTable*, p : IHTMLTableSection*) : HRESULT
    @lpVtbl.value.get_t_head.call(this, p)
  end
  def get_t_foot(this : IHTMLTable*, p : IHTMLTableSection*) : HRESULT
    @lpVtbl.value.get_t_foot.call(this, p)
  end
  def get_t_bodies(this : IHTMLTable*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_t_bodies.call(this, p)
  end
  def get_caption(this : IHTMLTable*, p : IHTMLTableCaption*) : HRESULT
    @lpVtbl.value.get_caption.call(this, p)
  end
  def create_t_head(this : IHTMLTable*, head : IDispatch*) : HRESULT
    @lpVtbl.value.create_t_head.call(this, head)
  end
  def delete_t_head(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.delete_t_head.call(this)
  end
  def create_t_foot(this : IHTMLTable*, foot : IDispatch*) : HRESULT
    @lpVtbl.value.create_t_foot.call(this, foot)
  end
  def delete_t_foot(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.delete_t_foot.call(this)
  end
  def create_caption(this : IHTMLTable*, caption : IHTMLTableCaption*) : HRESULT
    @lpVtbl.value.create_caption.call(this, caption)
  end
  def delete_caption(this : IHTMLTable*) : HRESULT
    @lpVtbl.value.delete_caption.call(this)
  end
  def insert_row(this : IHTMLTable*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_row.call(this, index, row)
  end
  def delete_row(this : IHTMLTable*, index : Int32) : HRESULT
    @lpVtbl.value.delete_row.call(this, index)
  end
  def get_ready_state(this : IHTMLTable*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLTable*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLTable*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
end
struct LibWin32::IHTMLTable2
  def query_interface(this : IHTMLTable2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTable2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTable2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTable2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTable2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTable2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTable2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def first_page(this : IHTMLTable2*) : HRESULT
    @lpVtbl.value.first_page.call(this)
  end
  def last_page(this : IHTMLTable2*) : HRESULT
    @lpVtbl.value.last_page.call(this)
  end
  def get_cells(this : IHTMLTable2*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_cells.call(this, p)
  end
  def move_row(this : IHTMLTable2*, indexfrom : Int32, indexto : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.move_row.call(this, indexfrom, indexto, row)
  end
end
struct LibWin32::IHTMLTable3
  def query_interface(this : IHTMLTable3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTable3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTable3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTable3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTable3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTable3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTable3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_summary(this : IHTMLTable3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_summary.call(this, v)
  end
  def get_summary(this : IHTMLTable3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_summary.call(this, p)
  end
end
struct LibWin32::IHTMLTable4
  def query_interface(this : IHTMLTable4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTable4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTable4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTable4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTable4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTable4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTable4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_t_head(this : IHTMLTable4*, v : IHTMLTableSection) : HRESULT
    @lpVtbl.value.putref_t_head.call(this, v)
  end
  def get_t_head(this : IHTMLTable4*, p : IHTMLTableSection*) : HRESULT
    @lpVtbl.value.get_t_head.call(this, p)
  end
  def putref_t_foot(this : IHTMLTable4*, v : IHTMLTableSection) : HRESULT
    @lpVtbl.value.putref_t_foot.call(this, v)
  end
  def get_t_foot(this : IHTMLTable4*, p : IHTMLTableSection*) : HRESULT
    @lpVtbl.value.get_t_foot.call(this, p)
  end
  def putref_caption(this : IHTMLTable4*, v : IHTMLTableCaption) : HRESULT
    @lpVtbl.value.putref_caption.call(this, v)
  end
  def get_caption(this : IHTMLTable4*, p : IHTMLTableCaption*) : HRESULT
    @lpVtbl.value.get_caption.call(this, p)
  end
  def insert_row(this : IHTMLTable4*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_row.call(this, index, row)
  end
  def delete_row(this : IHTMLTable4*, index : Int32) : HRESULT
    @lpVtbl.value.delete_row.call(this, index)
  end
  def create_t_body(this : IHTMLTable4*, tbody : IHTMLTableSection*) : HRESULT
    @lpVtbl.value.create_t_body.call(this, tbody)
  end
end
struct LibWin32::IHTMLTableCol
  def query_interface(this : IHTMLTableCol*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCol*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCol*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCol*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCol*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCol*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCol*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_span(this : IHTMLTableCol*, v : Int32) : HRESULT
    @lpVtbl.value.put_span.call(this, v)
  end
  def get_span(this : IHTMLTableCol*, p : Int32*) : HRESULT
    @lpVtbl.value.get_span.call(this, p)
  end
  def put_width(this : IHTMLTableCol*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLTableCol*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_align(this : IHTMLTableCol*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTableCol*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_v_align(this : IHTMLTableCol*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_v_align.call(this, v)
  end
  def get_v_align(this : IHTMLTableCol*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_v_align.call(this, p)
  end
end
struct LibWin32::IHTMLTableCol2
  def query_interface(this : IHTMLTableCol2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCol2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCol2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCol2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCol2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCol2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCol2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableCol2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableCol2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableCol2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableCol2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
end
struct LibWin32::IHTMLTableCol3
  def query_interface(this : IHTMLTableCol3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCol3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCol3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCol3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCol3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCol3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCol3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableCol3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableCol3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableCol3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableCol3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
end
struct LibWin32::IHTMLTableSection2
  def query_interface(this : IHTMLTableSection2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableSection2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableSection2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableSection2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableSection2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableSection2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableSection2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def move_row(this : IHTMLTableSection2*, indexfrom : Int32, indexto : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.move_row.call(this, indexfrom, indexto, row)
  end
end
struct LibWin32::IHTMLTableSection3
  def query_interface(this : IHTMLTableSection3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableSection3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableSection3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableSection3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableSection3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableSection3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableSection3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableSection3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableSection3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableSection3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableSection3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
end
struct LibWin32::IHTMLTableSection4
  def query_interface(this : IHTMLTableSection4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableSection4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableSection4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableSection4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableSection4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableSection4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableSection4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableSection4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableSection4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableSection4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableSection4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
  def insert_row(this : IHTMLTableSection4*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_row.call(this, index, row)
  end
  def delete_row(this : IHTMLTableSection4*, index : Int32) : HRESULT
    @lpVtbl.value.delete_row.call(this, index)
  end
end
struct LibWin32::IHTMLTableRow
  def query_interface(this : IHTMLTableRow*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableRow*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableRow*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableRow*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableRow*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableRow*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableRow*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLTableRow*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTableRow*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_v_align(this : IHTMLTableRow*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_v_align.call(this, v)
  end
  def get_v_align(this : IHTMLTableRow*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_v_align.call(this, p)
  end
  def put_bg_color(this : IHTMLTableRow*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLTableRow*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_border_color(this : IHTMLTableRow*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLTableRow*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_color_light(this : IHTMLTableRow*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_light.call(this, v)
  end
  def get_border_color_light(this : IHTMLTableRow*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_light.call(this, p)
  end
  def put_border_color_dark(this : IHTMLTableRow*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_dark.call(this, v)
  end
  def get_border_color_dark(this : IHTMLTableRow*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_dark.call(this, p)
  end
  def get_row_index(this : IHTMLTableRow*, p : Int32*) : HRESULT
    @lpVtbl.value.get_row_index.call(this, p)
  end
  def get_section_row_index(this : IHTMLTableRow*, p : Int32*) : HRESULT
    @lpVtbl.value.get_section_row_index.call(this, p)
  end
  def get_cells(this : IHTMLTableRow*, p : IHTMLElementCollection*) : HRESULT
    @lpVtbl.value.get_cells.call(this, p)
  end
  def insert_cell(this : IHTMLTableRow*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_cell.call(this, index, row)
  end
  def delete_cell(this : IHTMLTableRow*, index : Int32) : HRESULT
    @lpVtbl.value.delete_cell.call(this, index)
  end
end
struct LibWin32::IHTMLTableRow2
  def query_interface(this : IHTMLTableRow2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableRow2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableRow2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableRow2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableRow2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableRow2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableRow2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_height(this : IHTMLTableRow2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLTableRow2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::IHTMLTableRow3
  def query_interface(this : IHTMLTableRow3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableRow3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableRow3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableRow3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableRow3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableRow3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableRow3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableRow3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableRow3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableRow3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableRow3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
end
struct LibWin32::IHTMLTableRow4
  def query_interface(this : IHTMLTableRow4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableRow4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableRow4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableRow4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableRow4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableRow4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableRow4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableRow4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableRow4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableRow4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableRow4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
  def insert_cell(this : IHTMLTableRow4*, index : Int32, row : IDispatch*) : HRESULT
    @lpVtbl.value.insert_cell.call(this, index, row)
  end
  def delete_cell(this : IHTMLTableRow4*, index : Int32) : HRESULT
    @lpVtbl.value.delete_cell.call(this, index)
  end
end
struct LibWin32::IHTMLTableRowMetrics
  def query_interface(this : IHTMLTableRowMetrics*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableRowMetrics*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableRowMetrics*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableRowMetrics*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableRowMetrics*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableRowMetrics*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableRowMetrics*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_client_height(this : IHTMLTableRowMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_height.call(this, p)
  end
  def get_client_width(this : IHTMLTableRowMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_width.call(this, p)
  end
  def get_client_top(this : IHTMLTableRowMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_top.call(this, p)
  end
  def get_client_left(this : IHTMLTableRowMetrics*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_left.call(this, p)
  end
end
struct LibWin32::IHTMLTableCell
  def query_interface(this : IHTMLTableCell*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCell*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCell*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCell*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCell*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCell*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCell*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_row_span(this : IHTMLTableCell*, v : Int32) : HRESULT
    @lpVtbl.value.put_row_span.call(this, v)
  end
  def get_row_span(this : IHTMLTableCell*, p : Int32*) : HRESULT
    @lpVtbl.value.get_row_span.call(this, p)
  end
  def put_col_span(this : IHTMLTableCell*, v : Int32) : HRESULT
    @lpVtbl.value.put_col_span.call(this, v)
  end
  def get_col_span(this : IHTMLTableCell*, p : Int32*) : HRESULT
    @lpVtbl.value.get_col_span.call(this, p)
  end
  def put_align(this : IHTMLTableCell*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLTableCell*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_v_align(this : IHTMLTableCell*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_v_align.call(this, v)
  end
  def get_v_align(this : IHTMLTableCell*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_v_align.call(this, p)
  end
  def put_bg_color(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_bg_color.call(this, v)
  end
  def get_bg_color(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_bg_color.call(this, p)
  end
  def put_no_wrap(this : IHTMLTableCell*, v : Int16) : HRESULT
    @lpVtbl.value.put_no_wrap.call(this, v)
  end
  def get_no_wrap(this : IHTMLTableCell*, p : Int16*) : HRESULT
    @lpVtbl.value.get_no_wrap.call(this, p)
  end
  def put_background(this : IHTMLTableCell*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_background.call(this, v)
  end
  def get_background(this : IHTMLTableCell*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_background.call(this, p)
  end
  def put_border_color(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_border_color_light(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_light.call(this, v)
  end
  def get_border_color_light(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_light.call(this, p)
  end
  def put_border_color_dark(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color_dark.call(this, v)
  end
  def get_border_color_dark(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color_dark.call(this, p)
  end
  def put_width(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLTableCell*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLTableCell*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_cell_index(this : IHTMLTableCell*, p : Int32*) : HRESULT
    @lpVtbl.value.get_cell_index.call(this, p)
  end
end
struct LibWin32::IHTMLTableCell2
  def query_interface(this : IHTMLTableCell2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCell2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCell2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCell2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCell2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCell2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCell2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_abbr(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_abbr.call(this, v)
  end
  def get_abbr(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_abbr.call(this, p)
  end
  def put_axis(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_axis.call(this, v)
  end
  def get_axis(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_axis.call(this, p)
  end
  def put_ch(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
  def put_headers(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_headers.call(this, v)
  end
  def get_headers(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_headers.call(this, p)
  end
  def put_scope(this : IHTMLTableCell2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scope.call(this, v)
  end
  def get_scope(this : IHTMLTableCell2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scope.call(this, p)
  end
end
struct LibWin32::IHTMLTableCell3
  def query_interface(this : IHTMLTableCell3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTableCell3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTableCell3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTableCell3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTableCell3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTableCell3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTableCell3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ch(this : IHTMLTableCell3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch.call(this, v)
  end
  def get_ch(this : IHTMLTableCell3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch.call(this, p)
  end
  def put_ch_off(this : IHTMLTableCell3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_ch_off.call(this, v)
  end
  def get_ch_off(this : IHTMLTableCell3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ch_off.call(this, p)
  end
end
struct LibWin32::DispHTMLTable
  def query_interface(this : DispHTMLTable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTable*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTable*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTable*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTable*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTableCol
  def query_interface(this : DispHTMLTableCol*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTableCol*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTableCol*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTableCol*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTableCol*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTableCol*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTableCol*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTableSection
  def query_interface(this : DispHTMLTableSection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTableSection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTableSection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTableSection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTableSection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTableSection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTableSection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTableRow
  def query_interface(this : DispHTMLTableRow*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTableRow*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTableRow*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTableRow*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTableRow*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTableRow*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTableRow*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTableCell
  def query_interface(this : DispHTMLTableCell*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTableCell*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTableCell*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTableCell*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTableCell*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTableCell*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTableCell*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLScriptEvents2
  def query_interface(this : HTMLScriptEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLScriptEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLScriptEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLScriptEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLScriptEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLScriptEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLScriptEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLScriptEvents
  def query_interface(this : HTMLScriptEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLScriptEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLScriptEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLScriptEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLScriptEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLScriptEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLScriptEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLScriptElement
  def query_interface(this : IHTMLScriptElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScriptElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScriptElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScriptElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScriptElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScriptElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScriptElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_html_for(this : IHTMLScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_html_for.call(this, v)
  end
  def get_html_for(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_for.call(this, p)
  end
  def put_event(this : IHTMLScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_event.call(this, v)
  end
  def get_event(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_event.call(this, p)
  end
  def put_text(this : IHTMLScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text.call(this, v)
  end
  def get_text(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def put_defer(this : IHTMLScriptElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_defer.call(this, v)
  end
  def get_defer(this : IHTMLScriptElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_defer.call(this, p)
  end
  def get_ready_state(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onerror(this : IHTMLScriptElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLScriptElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_type(this : IHTMLScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::IHTMLScriptElement2
  def query_interface(this : IHTMLScriptElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScriptElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScriptElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScriptElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScriptElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScriptElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScriptElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_charset(this : IHTMLScriptElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_charset.call(this, v)
  end
  def get_charset(this : IHTMLScriptElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_charset.call(this, p)
  end
end
struct LibWin32::IHTMLScriptElement3
  def query_interface(this : IHTMLScriptElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScriptElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScriptElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScriptElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScriptElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScriptElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScriptElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLScriptElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLScriptElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
end
struct LibWin32::IHTMLScriptElement4
  def query_interface(this : IHTMLScriptElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLScriptElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLScriptElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLScriptElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLScriptElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLScriptElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLScriptElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_used_charset(this : IHTMLScriptElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_used_charset.call(this, p)
  end
end
struct LibWin32::DispHTMLScriptElement
  def query_interface(this : DispHTMLScriptElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLScriptElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLScriptElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLScriptElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLScriptElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLScriptElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLScriptElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLNoShowElement
  def query_interface(this : IHTMLNoShowElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLNoShowElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLNoShowElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLNoShowElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLNoShowElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLNoShowElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLNoShowElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLNoShowElement
  def query_interface(this : DispHTMLNoShowElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLNoShowElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLNoShowElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLNoShowElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLNoShowElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLNoShowElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLNoShowElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLObjectElementEvents2
  def query_interface(this : HTMLObjectElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLObjectElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLObjectElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLObjectElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLObjectElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLObjectElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLObjectElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLObjectElementEvents
  def query_interface(this : HTMLObjectElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLObjectElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLObjectElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLObjectElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLObjectElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLObjectElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLObjectElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLObjectElement
  def query_interface(this : IHTMLObjectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLObjectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLObjectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLObjectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLObjectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLObjectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLObjectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_object(this : IHTMLObjectElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_object.call(this, p)
  end
  def get_classid(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_classid.call(this, p)
  end
  def get_data(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def putref_recordset(this : IHTMLObjectElement*, v : IDispatch) : HRESULT
    @lpVtbl.value.putref_recordset.call(this, v)
  end
  def get_recordset(this : IHTMLObjectElement*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_recordset.call(this, p)
  end
  def put_align(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_name(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_code_base(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_code_base.call(this, v)
  end
  def get_code_base(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_code_base.call(this, p)
  end
  def put_code_type(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_code_type.call(this, v)
  end
  def get_code_type(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_code_type.call(this, p)
  end
  def put_code(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_code.call(this, v)
  end
  def get_code(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_base_href(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_base_href.call(this, p)
  end
  def put_type(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_form(this : IHTMLObjectElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
  def put_width(this : IHTMLObjectElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLObjectElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLObjectElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLObjectElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_ready_state(this : IHTMLObjectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLObjectElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLObjectElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onerror(this : IHTMLObjectElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLObjectElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_alt_html(this : IHTMLObjectElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt_html.call(this, v)
  end
  def get_alt_html(this : IHTMLObjectElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt_html.call(this, p)
  end
  def put_vspace(this : IHTMLObjectElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLObjectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLObjectElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLObjectElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
end
struct LibWin32::IHTMLObjectElement2
  def query_interface(this : IHTMLObjectElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLObjectElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLObjectElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLObjectElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLObjectElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLObjectElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLObjectElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def named_recordset(this : IHTMLObjectElement2*, datamember : UInt8*, hierarchy : VARIANT*, pprecordset : IDispatch*) : HRESULT
    @lpVtbl.value.named_recordset.call(this, datamember, hierarchy, pprecordset)
  end
  def put_classid(this : IHTMLObjectElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_classid.call(this, v)
  end
  def get_classid(this : IHTMLObjectElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_classid.call(this, p)
  end
  def put_data(this : IHTMLObjectElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IHTMLObjectElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
end
struct LibWin32::IHTMLObjectElement3
  def query_interface(this : IHTMLObjectElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLObjectElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLObjectElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLObjectElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLObjectElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLObjectElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLObjectElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_archive(this : IHTMLObjectElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_archive.call(this, v)
  end
  def get_archive(this : IHTMLObjectElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_archive.call(this, p)
  end
  def put_alt(this : IHTMLObjectElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_alt.call(this, v)
  end
  def get_alt(this : IHTMLObjectElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_alt.call(this, p)
  end
  def put_declare(this : IHTMLObjectElement3*, v : Int16) : HRESULT
    @lpVtbl.value.put_declare.call(this, v)
  end
  def get_declare(this : IHTMLObjectElement3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_declare.call(this, p)
  end
  def put_standby(this : IHTMLObjectElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_standby.call(this, v)
  end
  def get_standby(this : IHTMLObjectElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_standby.call(this, p)
  end
  def put_border(this : IHTMLObjectElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLObjectElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_use_map(this : IHTMLObjectElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_use_map.call(this, v)
  end
  def get_use_map(this : IHTMLObjectElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_use_map.call(this, p)
  end
end
struct LibWin32::IHTMLObjectElement4
  def query_interface(this : IHTMLObjectElement4*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLObjectElement4*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLObjectElement4*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLObjectElement4*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLObjectElement4*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLObjectElement4*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLObjectElement4*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_content_document(this : IHTMLObjectElement4*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_content_document.call(this, p)
  end
  def put_code_base(this : IHTMLObjectElement4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_code_base.call(this, v)
  end
  def get_code_base(this : IHTMLObjectElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_code_base.call(this, p)
  end
  def put_data(this : IHTMLObjectElement4*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_data.call(this, v)
  end
  def get_data(this : IHTMLObjectElement4*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
end
struct LibWin32::IHTMLObjectElement5
  def query_interface(this : IHTMLObjectElement5*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLObjectElement5*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLObjectElement5*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLObjectElement5*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLObjectElement5*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLObjectElement5*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLObjectElement5*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_object(this : IHTMLObjectElement5*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_object.call(this, v)
  end
  def get_object(this : IHTMLObjectElement5*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_object.call(this, p)
  end
end
struct LibWin32::IHTMLParamElement
  def query_interface(this : IHTMLParamElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLParamElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLParamElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLParamElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLParamElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLParamElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLParamElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_name(this : IHTMLParamElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLParamElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_value(this : IHTMLParamElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLParamElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_type(this : IHTMLParamElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLParamElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value_type(this : IHTMLParamElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value_type.call(this, v)
  end
  def get_value_type(this : IHTMLParamElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value_type.call(this, p)
  end
end
struct LibWin32::IHTMLParamElement2
  def query_interface(this : IHTMLParamElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLParamElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLParamElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLParamElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLParamElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLParamElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLParamElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_name(this : IHTMLParamElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLParamElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_type(this : IHTMLParamElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLParamElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_value(this : IHTMLParamElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLParamElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_value_type(this : IHTMLParamElement2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value_type.call(this, v)
  end
  def get_value_type(this : IHTMLParamElement2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value_type.call(this, p)
  end
end
struct LibWin32::DispHTMLObjectElement
  def query_interface(this : DispHTMLObjectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLObjectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLObjectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLObjectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLObjectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLObjectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLObjectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLParamElement
  def query_interface(this : DispHTMLParamElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLParamElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLParamElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLParamElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLParamElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLParamElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLParamElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLFrameSiteEvents2
  def query_interface(this : HTMLFrameSiteEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLFrameSiteEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLFrameSiteEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLFrameSiteEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLFrameSiteEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLFrameSiteEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLFrameSiteEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLFrameSiteEvents
  def query_interface(this : HTMLFrameSiteEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLFrameSiteEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLFrameSiteEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLFrameSiteEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLFrameSiteEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLFrameSiteEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLFrameSiteEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFrameBase2
  def query_interface(this : IHTMLFrameBase2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameBase2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameBase2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameBase2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameBase2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameBase2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameBase2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_content_window(this : IHTMLFrameBase2*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_content_window.call(this, p)
  end
  def put_onload(this : IHTMLFrameBase2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLFrameBase2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLFrameBase2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLFrameBase2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def get_ready_state(this : IHTMLFrameBase2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_allow_transparency(this : IHTMLFrameBase2*, v : Int16) : HRESULT
    @lpVtbl.value.put_allow_transparency.call(this, v)
  end
  def get_allow_transparency(this : IHTMLFrameBase2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_allow_transparency.call(this, p)
  end
end
struct LibWin32::IHTMLFrameBase3
  def query_interface(this : IHTMLFrameBase3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameBase3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameBase3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameBase3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameBase3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameBase3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameBase3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_long_desc(this : IHTMLFrameBase3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_long_desc.call(this, v)
  end
  def get_long_desc(this : IHTMLFrameBase3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_long_desc.call(this, p)
  end
end
struct LibWin32::DispHTMLFrameBase
  def query_interface(this : DispHTMLFrameBase*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFrameBase*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFrameBase*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFrameBase*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFrameBase*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFrameBase*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFrameBase*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFrameElement
  def query_interface(this : IHTMLFrameElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_border_color(this : IHTMLFrameElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLFrameElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
end
struct LibWin32::IHTMLFrameElement2
  def query_interface(this : IHTMLFrameElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_height(this : IHTMLFrameElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLFrameElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_width(this : IHTMLFrameElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLFrameElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
end
struct LibWin32::IHTMLFrameElement3
  def query_interface(this : IHTMLFrameElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_content_document(this : IHTMLFrameElement3*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_content_document.call(this, p)
  end
  def put_src(this : IHTMLFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_long_desc(this : IHTMLFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_long_desc.call(this, v)
  end
  def get_long_desc(this : IHTMLFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_long_desc.call(this, p)
  end
  def put_frame_border(this : IHTMLFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_frame_border.call(this, v)
  end
  def get_frame_border(this : IHTMLFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_frame_border.call(this, p)
  end
end
struct LibWin32::DispHTMLFrameElement
  def query_interface(this : DispHTMLFrameElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFrameElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFrameElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFrameElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFrameElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFrameElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFrameElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLIFrameElement
  def query_interface(this : IHTMLIFrameElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIFrameElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIFrameElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIFrameElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIFrameElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIFrameElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIFrameElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_vspace(this : IHTMLIFrameElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_vspace.call(this, v)
  end
  def get_vspace(this : IHTMLIFrameElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_vspace.call(this, p)
  end
  def put_hspace(this : IHTMLIFrameElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_hspace.call(this, v)
  end
  def get_hspace(this : IHTMLIFrameElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_hspace.call(this, p)
  end
  def put_align(this : IHTMLIFrameElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLIFrameElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::IHTMLIFrameElement2
  def query_interface(this : IHTMLIFrameElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIFrameElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIFrameElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIFrameElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIFrameElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIFrameElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIFrameElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_height(this : IHTMLIFrameElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLIFrameElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def put_width(this : IHTMLIFrameElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLIFrameElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
end
struct LibWin32::IHTMLIFrameElement3
  def query_interface(this : IHTMLIFrameElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIFrameElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIFrameElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIFrameElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIFrameElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIFrameElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIFrameElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_content_document(this : IHTMLIFrameElement3*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_content_document.call(this, p)
  end
  def put_src(this : IHTMLIFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLIFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_long_desc(this : IHTMLIFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_long_desc.call(this, v)
  end
  def get_long_desc(this : IHTMLIFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_long_desc.call(this, p)
  end
  def put_frame_border(this : IHTMLIFrameElement3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_frame_border.call(this, v)
  end
  def get_frame_border(this : IHTMLIFrameElement3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_frame_border.call(this, p)
  end
end
struct LibWin32::DispHTMLIFrame
  def query_interface(this : DispHTMLIFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLIFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLIFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLIFrame*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLIFrame*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLIFrame*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLIFrame*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLDivPosition
  def query_interface(this : IHTMLDivPosition*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDivPosition*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDivPosition*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDivPosition*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDivPosition*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDivPosition*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDivPosition*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLDivPosition*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLDivPosition*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::IHTMLFieldSetElement
  def query_interface(this : IHTMLFieldSetElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFieldSetElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFieldSetElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFieldSetElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFieldSetElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFieldSetElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFieldSetElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLFieldSetElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLFieldSetElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::IHTMLFieldSetElement2
  def query_interface(this : IHTMLFieldSetElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFieldSetElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFieldSetElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFieldSetElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFieldSetElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFieldSetElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFieldSetElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_form(this : IHTMLFieldSetElement2*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::IHTMLLegendElement
  def query_interface(this : IHTMLLegendElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLegendElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLegendElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLegendElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLegendElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLegendElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLegendElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLLegendElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLLegendElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::IHTMLLegendElement2
  def query_interface(this : IHTMLLegendElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLLegendElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLLegendElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLLegendElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLLegendElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLLegendElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLLegendElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_form(this : IHTMLLegendElement2*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::DispHTMLDivPosition
  def query_interface(this : DispHTMLDivPosition*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLDivPosition*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLDivPosition*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLDivPosition*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLDivPosition*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLDivPosition*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLDivPosition*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLFieldSetElement
  def query_interface(this : DispHTMLFieldSetElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFieldSetElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFieldSetElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFieldSetElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFieldSetElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFieldSetElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFieldSetElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLLegendElement
  def query_interface(this : DispHTMLLegendElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLLegendElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLLegendElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLLegendElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLLegendElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLLegendElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLLegendElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLSpanFlow
  def query_interface(this : IHTMLSpanFlow*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSpanFlow*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSpanFlow*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSpanFlow*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSpanFlow*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSpanFlow*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSpanFlow*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : IHTMLSpanFlow*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : IHTMLSpanFlow*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
end
struct LibWin32::DispHTMLSpanFlow
  def query_interface(this : DispHTMLSpanFlow*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLSpanFlow*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLSpanFlow*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLSpanFlow*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLSpanFlow*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLSpanFlow*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLSpanFlow*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFrameSetElement
  def query_interface(this : IHTMLFrameSetElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameSetElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameSetElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameSetElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameSetElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameSetElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameSetElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_rows(this : IHTMLFrameSetElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_rows.call(this, v)
  end
  def get_rows(this : IHTMLFrameSetElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_rows.call(this, p)
  end
  def put_cols(this : IHTMLFrameSetElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_cols.call(this, v)
  end
  def get_cols(this : IHTMLFrameSetElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cols.call(this, p)
  end
  def put_border(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_border_color(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_border_color.call(this, v)
  end
  def get_border_color(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_border_color.call(this, p)
  end
  def put_frame_border(this : IHTMLFrameSetElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_frame_border.call(this, v)
  end
  def get_frame_border(this : IHTMLFrameSetElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_frame_border.call(this, p)
  end
  def put_frame_spacing(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_frame_spacing.call(this, v)
  end
  def get_frame_spacing(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_frame_spacing.call(this, p)
  end
  def put_name(this : IHTMLFrameSetElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_name.call(this, v)
  end
  def get_name(this : IHTMLFrameSetElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def put_onload(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onunload(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onunload.call(this, v)
  end
  def get_onunload(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onunload.call(this, p)
  end
  def put_onbeforeunload(this : IHTMLFrameSetElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeunload.call(this, v)
  end
  def get_onbeforeunload(this : IHTMLFrameSetElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeunload.call(this, p)
  end
end
struct LibWin32::IHTMLFrameSetElement2
  def query_interface(this : IHTMLFrameSetElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameSetElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameSetElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameSetElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameSetElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameSetElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameSetElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onbeforeprint(this : IHTMLFrameSetElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onbeforeprint.call(this, v)
  end
  def get_onbeforeprint(this : IHTMLFrameSetElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onbeforeprint.call(this, p)
  end
  def put_onafterprint(this : IHTMLFrameSetElement2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onafterprint.call(this, v)
  end
  def get_onafterprint(this : IHTMLFrameSetElement2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onafterprint.call(this, p)
  end
end
struct LibWin32::IHTMLFrameSetElement3
  def query_interface(this : IHTMLFrameSetElement3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFrameSetElement3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFrameSetElement3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFrameSetElement3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFrameSetElement3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFrameSetElement3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFrameSetElement3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_onhashchange(this : IHTMLFrameSetElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onhashchange.call(this, v)
  end
  def get_onhashchange(this : IHTMLFrameSetElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onhashchange.call(this, p)
  end
  def put_onmessage(this : IHTMLFrameSetElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onmessage.call(this, v)
  end
  def get_onmessage(this : IHTMLFrameSetElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onmessage.call(this, p)
  end
  def put_onoffline(this : IHTMLFrameSetElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onoffline.call(this, v)
  end
  def get_onoffline(this : IHTMLFrameSetElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onoffline.call(this, p)
  end
  def put_ononline(this : IHTMLFrameSetElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ononline.call(this, v)
  end
  def get_ononline(this : IHTMLFrameSetElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ononline.call(this, p)
  end
  def put_onstorage(this : IHTMLFrameSetElement3*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onstorage.call(this, v)
  end
  def get_onstorage(this : IHTMLFrameSetElement3*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onstorage.call(this, p)
  end
end
struct LibWin32::DispHTMLFrameSetSite
  def query_interface(this : DispHTMLFrameSetSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLFrameSetSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLFrameSetSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLFrameSetSite*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLFrameSetSite*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLFrameSetSite*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLFrameSetSite*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLBGsound
  def query_interface(this : IHTMLBGsound*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLBGsound*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLBGsound*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLBGsound*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLBGsound*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLBGsound*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLBGsound*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLBGsound*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLBGsound*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_loop(this : IHTMLBGsound*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLBGsound*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def put_volume(this : IHTMLBGsound*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_volume.call(this, v)
  end
  def get_volume(this : IHTMLBGsound*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_volume.call(this, p)
  end
  def put_balance(this : IHTMLBGsound*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_balance.call(this, v)
  end
  def get_balance(this : IHTMLBGsound*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_balance.call(this, p)
  end
end
struct LibWin32::DispHTMLBGsound
  def query_interface(this : DispHTMLBGsound*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLBGsound*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLBGsound*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLBGsound*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLBGsound*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLBGsound*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLBGsound*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLFontNamesCollection
  def query_interface(this : IHTMLFontNamesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFontNamesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFontNamesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFontNamesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFontNamesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFontNamesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFontNamesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLFontNamesCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLFontNamesCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLFontNamesCollection*, index : Int32, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, index, pbstr)
  end
end
struct LibWin32::IHTMLFontSizesCollection
  def query_interface(this : IHTMLFontSizesCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLFontSizesCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLFontSizesCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLFontSizesCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLFontSizesCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLFontSizesCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLFontSizesCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLFontSizesCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLFontSizesCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def get_for_font(this : IHTMLFontSizesCollection*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_for_font.call(this, p)
  end
  def item(this : IHTMLFontSizesCollection*, index : Int32, plsize : Int32*) : HRESULT
    @lpVtbl.value.item.call(this, index, plsize)
  end
end
struct LibWin32::IHTMLOptionsHolder
  def query_interface(this : IHTMLOptionsHolder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOptionsHolder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOptionsHolder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLOptionsHolder*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLOptionsHolder*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLOptionsHolder*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLOptionsHolder*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_document(this : IHTMLOptionsHolder*, p : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
  def get_fonts(this : IHTMLOptionsHolder*, p : IHTMLFontNamesCollection*) : HRESULT
    @lpVtbl.value.get_fonts.call(this, p)
  end
  def put_exec_arg(this : IHTMLOptionsHolder*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_exec_arg.call(this, v)
  end
  def get_exec_arg(this : IHTMLOptionsHolder*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_exec_arg.call(this, p)
  end
  def put_error_line(this : IHTMLOptionsHolder*, v : Int32) : HRESULT
    @lpVtbl.value.put_error_line.call(this, v)
  end
  def get_error_line(this : IHTMLOptionsHolder*, p : Int32*) : HRESULT
    @lpVtbl.value.get_error_line.call(this, p)
  end
  def put_error_character(this : IHTMLOptionsHolder*, v : Int32) : HRESULT
    @lpVtbl.value.put_error_character.call(this, v)
  end
  def get_error_character(this : IHTMLOptionsHolder*, p : Int32*) : HRESULT
    @lpVtbl.value.get_error_character.call(this, p)
  end
  def put_error_code(this : IHTMLOptionsHolder*, v : Int32) : HRESULT
    @lpVtbl.value.put_error_code.call(this, v)
  end
  def get_error_code(this : IHTMLOptionsHolder*, p : Int32*) : HRESULT
    @lpVtbl.value.get_error_code.call(this, p)
  end
  def put_error_message(this : IHTMLOptionsHolder*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_error_message.call(this, v)
  end
  def get_error_message(this : IHTMLOptionsHolder*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_error_message.call(this, p)
  end
  def put_error_debug(this : IHTMLOptionsHolder*, v : Int16) : HRESULT
    @lpVtbl.value.put_error_debug.call(this, v)
  end
  def get_error_debug(this : IHTMLOptionsHolder*, p : Int16*) : HRESULT
    @lpVtbl.value.get_error_debug.call(this, p)
  end
  def get_unsecured_window_of_document(this : IHTMLOptionsHolder*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_unsecured_window_of_document.call(this, p)
  end
  def put_find_text(this : IHTMLOptionsHolder*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_find_text.call(this, v)
  end
  def get_find_text(this : IHTMLOptionsHolder*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_find_text.call(this, p)
  end
  def put_anything_after_frameset(this : IHTMLOptionsHolder*, v : Int16) : HRESULT
    @lpVtbl.value.put_anything_after_frameset.call(this, v)
  end
  def get_anything_after_frameset(this : IHTMLOptionsHolder*, p : Int16*) : HRESULT
    @lpVtbl.value.get_anything_after_frameset.call(this, p)
  end
  def sizes(this : IHTMLOptionsHolder*, fontname : UInt8*, psizescollection : IHTMLFontSizesCollection*) : HRESULT
    @lpVtbl.value.sizes.call(this, fontname, psizescollection)
  end
  def openfiledlg(this : IHTMLOptionsHolder*, initfile : VARIANT, initdir : VARIANT, filter : VARIANT, title : VARIANT, pathname : UInt8**) : HRESULT
    @lpVtbl.value.openfiledlg.call(this, initfile, initdir, filter, title, pathname)
  end
  def savefiledlg(this : IHTMLOptionsHolder*, initfile : VARIANT, initdir : VARIANT, filter : VARIANT, title : VARIANT, pathname : UInt8**) : HRESULT
    @lpVtbl.value.savefiledlg.call(this, initfile, initdir, filter, title, pathname)
  end
  def choosecolordlg(this : IHTMLOptionsHolder*, initcolor : VARIANT, rgbcolor : Int32*) : HRESULT
    @lpVtbl.value.choosecolordlg.call(this, initcolor, rgbcolor)
  end
  def show_security_info(this : IHTMLOptionsHolder*) : HRESULT
    @lpVtbl.value.show_security_info.call(this)
  end
  def is_apartment_model(this : IHTMLOptionsHolder*, object : IHTMLObjectElement, fapartment : Int16*) : HRESULT
    @lpVtbl.value.is_apartment_model.call(this, object, fapartment)
  end
  def get_charset(this : IHTMLOptionsHolder*, fontname : UInt8*, charset : Int32*) : HRESULT
    @lpVtbl.value.get_charset.call(this, fontname, charset)
  end
  def get_secure_connection_info(this : IHTMLOptionsHolder*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_secure_connection_info.call(this, p)
  end
end
struct LibWin32::HTMLStyleElementEvents2
  def query_interface(this : HTMLStyleElementEvents2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLStyleElementEvents2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLStyleElementEvents2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLStyleElementEvents2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLStyleElementEvents2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLStyleElementEvents2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLStyleElementEvents2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLStyleElementEvents
  def query_interface(this : HTMLStyleElementEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLStyleElementEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLStyleElementEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLStyleElementEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLStyleElementEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLStyleElementEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLStyleElementEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleElement
  def query_interface(this : IHTMLStyleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : IHTMLStyleElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLStyleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_ready_state(this : IHTMLStyleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLStyleElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLStyleElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def put_onload(this : IHTMLStyleElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLStyleElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def put_onerror(this : IHTMLStyleElement*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLStyleElement*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def get_style_sheet(this : IHTMLStyleElement*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_style_sheet.call(this, p)
  end
  def put_disabled(this : IHTMLStyleElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_disabled.call(this, v)
  end
  def get_disabled(this : IHTMLStyleElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_disabled.call(this, p)
  end
  def put_media(this : IHTMLStyleElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLStyleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
end
struct LibWin32::IHTMLStyleElement2
  def query_interface(this : IHTMLStyleElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_sheet(this : IHTMLStyleElement2*, p : IHTMLStyleSheet*) : HRESULT
    @lpVtbl.value.get_sheet.call(this, p)
  end
end
struct LibWin32::DispHTMLStyleElement
  def query_interface(this : DispHTMLStyleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleFontFace
  def query_interface(this : IHTMLStyleFontFace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleFontFace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleFontFace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleFontFace*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleFontFace*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleFontFace*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleFontFace*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_fontsrc(this : IHTMLStyleFontFace*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_fontsrc.call(this, v)
  end
  def get_fontsrc(this : IHTMLStyleFontFace*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_fontsrc.call(this, p)
  end
end
struct LibWin32::IHTMLStyleFontFace2
  def query_interface(this : IHTMLStyleFontFace2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleFontFace2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleFontFace2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleFontFace2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleFontFace2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleFontFace2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleFontFace2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_style(this : IHTMLStyleFontFace2*, p : IHTMLRuleStyle*) : HRESULT
    @lpVtbl.value.get_style.call(this, p)
  end
end
struct LibWin32::DispHTMLStyleFontFace
  def query_interface(this : DispHTMLStyleFontFace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleFontFace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleFontFace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleFontFace*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleFontFace*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleFontFace*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleFontFace*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLXDomainRequest
  def query_interface(this : IHTMLXDomainRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLXDomainRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLXDomainRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLXDomainRequest*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLXDomainRequest*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLXDomainRequest*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLXDomainRequest*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_response_text(this : IHTMLXDomainRequest*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_response_text.call(this, p)
  end
  def put_timeout(this : IHTMLXDomainRequest*, v : Int32) : HRESULT
    @lpVtbl.value.put_timeout.call(this, v)
  end
  def get_timeout(this : IHTMLXDomainRequest*, p : Int32*) : HRESULT
    @lpVtbl.value.get_timeout.call(this, p)
  end
  def get_content_type(this : IHTMLXDomainRequest*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_content_type.call(this, p)
  end
  def put_onprogress(this : IHTMLXDomainRequest*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onprogress.call(this, v)
  end
  def get_onprogress(this : IHTMLXDomainRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onprogress.call(this, p)
  end
  def put_onerror(this : IHTMLXDomainRequest*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onerror.call(this, v)
  end
  def get_onerror(this : IHTMLXDomainRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onerror.call(this, p)
  end
  def put_ontimeout(this : IHTMLXDomainRequest*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ontimeout.call(this, v)
  end
  def get_ontimeout(this : IHTMLXDomainRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ontimeout.call(this, p)
  end
  def put_onload(this : IHTMLXDomainRequest*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onload.call(this, v)
  end
  def get_onload(this : IHTMLXDomainRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onload.call(this, p)
  end
  def abort(this : IHTMLXDomainRequest*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
  def open(this : IHTMLXDomainRequest*, bstrmethod : UInt8*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.open.call(this, bstrmethod, bstrurl)
  end
  def send(this : IHTMLXDomainRequest*, varbody : VARIANT) : HRESULT
    @lpVtbl.value.send.call(this, varbody)
  end
end
struct LibWin32::IHTMLXDomainRequestFactory
  def query_interface(this : IHTMLXDomainRequestFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLXDomainRequestFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLXDomainRequestFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLXDomainRequestFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLXDomainRequestFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLXDomainRequestFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLXDomainRequestFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IHTMLXDomainRequestFactory*, midl__ihtmlxdomainrequestfactory0000 : IHTMLXDomainRequest*) : HRESULT
    @lpVtbl.value.create.call(this, midl__ihtmlxdomainrequestfactory0000)
  end
end
struct LibWin32::DispXDomainRequest
  def query_interface(this : DispXDomainRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispXDomainRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispXDomainRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispXDomainRequest*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispXDomainRequest*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispXDomainRequest*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispXDomainRequest*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStorage2
  def query_interface(this : IHTMLStorage2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStorage2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStorage2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStorage2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStorage2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStorage2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStorage2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def set_item(this : IHTMLStorage2*, bstrkey : UInt8*, bstrvalue : UInt8*) : HRESULT
    @lpVtbl.value.set_item.call(this, bstrkey, bstrvalue)
  end
end
struct LibWin32::DispHTMLStorage
  def query_interface(this : DispHTMLStorage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStorage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStorage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStorage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStorage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStorage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStorage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IEventTarget
  def query_interface(this : IEventTarget*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEventTarget*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEventTarget*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IEventTarget*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IEventTarget*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IEventTarget*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IEventTarget*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_event_listener(this : IEventTarget*, type : UInt8*, listener : IDispatch, usecapture : Int16) : HRESULT
    @lpVtbl.value.add_event_listener.call(this, type, listener, usecapture)
  end
  def remove_event_listener(this : IEventTarget*, type : UInt8*, listener : IDispatch, usecapture : Int16) : HRESULT
    @lpVtbl.value.remove_event_listener.call(this, type, listener, usecapture)
  end
  def dispatch_event(this : IEventTarget*, evt : IDOMEvent, pfresult : Int16*) : HRESULT
    @lpVtbl.value.dispatch_event.call(this, evt, pfresult)
  end
end
struct LibWin32::DispDOMEvent
  def query_interface(this : DispDOMEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMUIEvent
  def query_interface(this : IDOMUIEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMUIEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMUIEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMUIEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMUIEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMUIEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMUIEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_view(this : IDOMUIEvent*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_view.call(this, p)
  end
  def get_detail(this : IDOMUIEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_detail.call(this, p)
  end
  def init_ui_event(this : IDOMUIEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, view : IHTMLWindow2, detail : Int32) : HRESULT
    @lpVtbl.value.init_ui_event.call(this, eventtype, canbubble, cancelable, view, detail)
  end
end
struct LibWin32::DispDOMUIEvent
  def query_interface(this : DispDOMUIEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMUIEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMUIEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMUIEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMUIEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMUIEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMUIEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMouseEvent
  def query_interface(this : IDOMMouseEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMouseEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMouseEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMouseEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMouseEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMouseEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMouseEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_screen_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_x.call(this, p)
  end
  def get_screen_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_screen_y.call(this, p)
  end
  def get_client_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_x.call(this, p)
  end
  def get_client_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_client_y.call(this, p)
  end
  def get_ctrl_key(this : IDOMMouseEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ctrl_key.call(this, p)
  end
  def get_shift_key(this : IDOMMouseEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shift_key.call(this, p)
  end
  def get_alt_key(this : IDOMMouseEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_alt_key.call(this, p)
  end
  def get_meta_key(this : IDOMMouseEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_meta_key.call(this, p)
  end
  def get_button(this : IDOMMouseEvent*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_button.call(this, p)
  end
  def get_related_target(this : IDOMMouseEvent*, p : IEventTarget*) : HRESULT
    @lpVtbl.value.get_related_target.call(this, p)
  end
  def init_mouse_event(this : IDOMMouseEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, detailarg : Int32, screenxarg : Int32, screenyarg : Int32, clientxarg : Int32, clientyarg : Int32, ctrlkeyarg : Int16, altkeyarg : Int16, shiftkeyarg : Int16, metakeyarg : Int16, buttonarg : UInt16, relatedtargetarg : IEventTarget) : HRESULT
    @lpVtbl.value.init_mouse_event.call(this, eventtype, canbubble, cancelable, viewarg, detailarg, screenxarg, screenyarg, clientxarg, clientyarg, ctrlkeyarg, altkeyarg, shiftkeyarg, metakeyarg, buttonarg, relatedtargetarg)
  end
  def get_modifier_state(this : IDOMMouseEvent*, keyarg : UInt8*, activated : Int16*) : HRESULT
    @lpVtbl.value.get_modifier_state.call(this, keyarg, activated)
  end
  def get_buttons(this : IDOMMouseEvent*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_buttons.call(this, p)
  end
  def get_from_element(this : IDOMMouseEvent*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_from_element.call(this, p)
  end
  def get_to_element(this : IDOMMouseEvent*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_to_element.call(this, p)
  end
  def get_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def get_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def get_offset_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_x.call(this, p)
  end
  def get_offset_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_offset_y.call(this, p)
  end
  def get_page_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_x.call(this, p)
  end
  def get_page_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_y.call(this, p)
  end
  def get_layer_x(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_layer_x.call(this, p)
  end
  def get_layer_y(this : IDOMMouseEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_layer_y.call(this, p)
  end
  def get_which(this : IDOMMouseEvent*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_which.call(this, p)
  end
end
struct LibWin32::DispDOMMouseEvent
  def query_interface(this : DispDOMMouseEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMouseEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMouseEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMouseEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMouseEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMouseEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMouseEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMDragEvent
  def query_interface(this : IDOMDragEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMDragEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMDragEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMDragEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMDragEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMDragEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMDragEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_data_transfer(this : IDOMDragEvent*, p : IHTMLDataTransfer*) : HRESULT
    @lpVtbl.value.get_data_transfer.call(this, p)
  end
  def init_drag_event(this : IDOMDragEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, detailarg : Int32, screenxarg : Int32, screenyarg : Int32, clientxarg : Int32, clientyarg : Int32, ctrlkeyarg : Int16, altkeyarg : Int16, shiftkeyarg : Int16, metakeyarg : Int16, buttonarg : UInt16, relatedtargetarg : IEventTarget, datatransferarg : IHTMLDataTransfer) : HRESULT
    @lpVtbl.value.init_drag_event.call(this, eventtype, canbubble, cancelable, viewarg, detailarg, screenxarg, screenyarg, clientxarg, clientyarg, ctrlkeyarg, altkeyarg, shiftkeyarg, metakeyarg, buttonarg, relatedtargetarg, datatransferarg)
  end
end
struct LibWin32::DispDOMDragEvent
  def query_interface(this : DispDOMDragEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMDragEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMDragEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMDragEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMDragEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMDragEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMDragEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMouseWheelEvent
  def query_interface(this : IDOMMouseWheelEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMouseWheelEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMouseWheelEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMouseWheelEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMouseWheelEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMouseWheelEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMouseWheelEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_wheel_delta(this : IDOMMouseWheelEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_wheel_delta.call(this, p)
  end
  def init_mouse_wheel_event(this : IDOMMouseWheelEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, detailarg : Int32, screenxarg : Int32, screenyarg : Int32, clientxarg : Int32, clientyarg : Int32, buttonarg : UInt16, relatedtargetarg : IEventTarget, modifierslistarg : UInt8*, wheeldeltaarg : Int32) : HRESULT
    @lpVtbl.value.init_mouse_wheel_event.call(this, eventtype, canbubble, cancelable, viewarg, detailarg, screenxarg, screenyarg, clientxarg, clientyarg, buttonarg, relatedtargetarg, modifierslistarg, wheeldeltaarg)
  end
end
struct LibWin32::DispDOMMouseWheelEvent
  def query_interface(this : DispDOMMouseWheelEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMouseWheelEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMouseWheelEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMouseWheelEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMouseWheelEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMouseWheelEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMouseWheelEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMWheelEvent
  def query_interface(this : IDOMWheelEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMWheelEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMWheelEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMWheelEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMWheelEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMWheelEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMWheelEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_delta_x(this : IDOMWheelEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_delta_x.call(this, p)
  end
  def get_delta_y(this : IDOMWheelEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_delta_y.call(this, p)
  end
  def get_delta_z(this : IDOMWheelEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_delta_z.call(this, p)
  end
  def get_delta_mode(this : IDOMWheelEvent*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_delta_mode.call(this, p)
  end
  def init_wheel_event(this : IDOMWheelEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, detailarg : Int32, screenxarg : Int32, screenyarg : Int32, clientxarg : Int32, clientyarg : Int32, buttonarg : UInt16, relatedtargetarg : IEventTarget, modifierslistarg : UInt8*, deltax : Int32, deltay : Int32, deltaz : Int32, deltamode : UInt32) : HRESULT
    @lpVtbl.value.init_wheel_event.call(this, eventtype, canbubble, cancelable, viewarg, detailarg, screenxarg, screenyarg, clientxarg, clientyarg, buttonarg, relatedtargetarg, modifierslistarg, deltax, deltay, deltaz, deltamode)
  end
end
struct LibWin32::DispDOMWheelEvent
  def query_interface(this : DispDOMWheelEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMWheelEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMWheelEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMWheelEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMWheelEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMWheelEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMWheelEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMTextEvent
  def query_interface(this : IDOMTextEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMTextEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMTextEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMTextEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMTextEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMTextEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMTextEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_data(this : IDOMTextEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def get_input_method(this : IDOMTextEvent*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_input_method.call(this, p)
  end
  def init_text_event(this : IDOMTextEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, dataarg : UInt8*, inputmethod : UInt32, locale : UInt8*) : HRESULT
    @lpVtbl.value.init_text_event.call(this, eventtype, canbubble, cancelable, viewarg, dataarg, inputmethod, locale)
  end
  def get_locale(this : IDOMTextEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_locale.call(this, p)
  end
end
struct LibWin32::DispDOMTextEvent
  def query_interface(this : DispDOMTextEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMTextEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMTextEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMTextEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMTextEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMTextEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMTextEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMKeyboardEvent
  def query_interface(this : IDOMKeyboardEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMKeyboardEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMKeyboardEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMKeyboardEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMKeyboardEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMKeyboardEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMKeyboardEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_key(this : IDOMKeyboardEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_key.call(this, p)
  end
  def get_location(this : IDOMKeyboardEvent*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_location.call(this, p)
  end
  def get_ctrl_key(this : IDOMKeyboardEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ctrl_key.call(this, p)
  end
  def get_shift_key(this : IDOMKeyboardEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shift_key.call(this, p)
  end
  def get_alt_key(this : IDOMKeyboardEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_alt_key.call(this, p)
  end
  def get_meta_key(this : IDOMKeyboardEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_meta_key.call(this, p)
  end
  def get_repeat(this : IDOMKeyboardEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_repeat.call(this, p)
  end
  def get_modifier_state(this : IDOMKeyboardEvent*, keyarg : UInt8*, state : Int16*) : HRESULT
    @lpVtbl.value.get_modifier_state.call(this, keyarg, state)
  end
  def init_keyboard_event(this : IDOMKeyboardEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, keyarg : UInt8*, locationarg : UInt32, modifierslistarg : UInt8*, repeat : Int16, locale : UInt8*) : HRESULT
    @lpVtbl.value.init_keyboard_event.call(this, eventtype, canbubble, cancelable, viewarg, keyarg, locationarg, modifierslistarg, repeat, locale)
  end
  def get_key_code(this : IDOMKeyboardEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_key_code.call(this, p)
  end
  def get_char_code(this : IDOMKeyboardEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_char_code.call(this, p)
  end
  def get_which(this : IDOMKeyboardEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_which.call(this, p)
  end
  def get_ie9_char(this : IDOMKeyboardEvent*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ie9_char.call(this, p)
  end
  def get_locale(this : IDOMKeyboardEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_locale.call(this, p)
  end
end
struct LibWin32::DispDOMKeyboardEvent
  def query_interface(this : DispDOMKeyboardEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMKeyboardEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMKeyboardEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMKeyboardEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMKeyboardEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMKeyboardEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMKeyboardEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMCompositionEvent
  def query_interface(this : IDOMCompositionEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMCompositionEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMCompositionEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMCompositionEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMCompositionEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMCompositionEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMCompositionEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_data(this : IDOMCompositionEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def init_composition_event(this : IDOMCompositionEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, data : UInt8*, locale : UInt8*) : HRESULT
    @lpVtbl.value.init_composition_event.call(this, eventtype, canbubble, cancelable, viewarg, data, locale)
  end
  def get_locale(this : IDOMCompositionEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_locale.call(this, p)
  end
end
struct LibWin32::DispDOMCompositionEvent
  def query_interface(this : DispDOMCompositionEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMCompositionEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMCompositionEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMCompositionEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMCompositionEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMCompositionEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMCompositionEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMutationEvent
  def query_interface(this : IDOMMutationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMutationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMutationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMutationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMutationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMutationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMutationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_related_node(this : IDOMMutationEvent*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_related_node.call(this, p)
  end
  def get_prev_value(this : IDOMMutationEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_prev_value.call(this, p)
  end
  def get_new_value(this : IDOMMutationEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_new_value.call(this, p)
  end
  def get_attr_name(this : IDOMMutationEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_attr_name.call(this, p)
  end
  def get_attr_change(this : IDOMMutationEvent*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_attr_change.call(this, p)
  end
  def init_mutation_event(this : IDOMMutationEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, relatednodearg : IDispatch, prevvaluearg : UInt8*, newvaluearg : UInt8*, attrnamearg : UInt8*, attrchangearg : UInt16) : HRESULT
    @lpVtbl.value.init_mutation_event.call(this, eventtype, canbubble, cancelable, relatednodearg, prevvaluearg, newvaluearg, attrnamearg, attrchangearg)
  end
end
struct LibWin32::DispDOMMutationEvent
  def query_interface(this : DispDOMMutationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMutationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMutationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMutationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMutationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMutationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMutationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMBeforeUnloadEvent
  def query_interface(this : IDOMBeforeUnloadEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMBeforeUnloadEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMBeforeUnloadEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMBeforeUnloadEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMBeforeUnloadEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMBeforeUnloadEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMBeforeUnloadEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_return_value(this : IDOMBeforeUnloadEvent*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_return_value.call(this, v)
  end
  def get_return_value(this : IDOMBeforeUnloadEvent*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_return_value.call(this, p)
  end
end
struct LibWin32::DispDOMBeforeUnloadEvent
  def query_interface(this : DispDOMBeforeUnloadEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMBeforeUnloadEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMBeforeUnloadEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMBeforeUnloadEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMBeforeUnloadEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMBeforeUnloadEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMBeforeUnloadEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMFocusEvent
  def query_interface(this : IDOMFocusEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMFocusEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMFocusEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMFocusEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMFocusEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMFocusEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMFocusEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_related_target(this : IDOMFocusEvent*, p : IEventTarget*) : HRESULT
    @lpVtbl.value.get_related_target.call(this, p)
  end
  def init_focus_event(this : IDOMFocusEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, view : IHTMLWindow2, detail : Int32, relatedtargetarg : IEventTarget) : HRESULT
    @lpVtbl.value.init_focus_event.call(this, eventtype, canbubble, cancelable, view, detail, relatedtargetarg)
  end
end
struct LibWin32::DispDOMFocusEvent
  def query_interface(this : DispDOMFocusEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMFocusEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMFocusEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMFocusEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMFocusEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMFocusEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMFocusEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMCustomEvent
  def query_interface(this : IDOMCustomEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMCustomEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMCustomEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMCustomEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMCustomEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMCustomEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMCustomEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_detail(this : IDOMCustomEvent*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_detail.call(this, p)
  end
  def init_custom_event(this : IDOMCustomEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, detail : VARIANT*) : HRESULT
    @lpVtbl.value.init_custom_event.call(this, eventtype, canbubble, cancelable, detail)
  end
end
struct LibWin32::DispDOMCustomEvent
  def query_interface(this : DispDOMCustomEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMCustomEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMCustomEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMCustomEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMCustomEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMCustomEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMCustomEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ICanvasGradient
  def query_interface(this : ICanvasGradient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasGradient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasGradient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasGradient*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasGradient*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasGradient*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasGradient*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def add_color_stop(this : ICanvasGradient*, offset : Float32, color : UInt8*) : HRESULT
    @lpVtbl.value.add_color_stop.call(this, offset, color)
  end
end
struct LibWin32::ICanvasPattern
  def query_interface(this : ICanvasPattern*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasPattern*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasPattern*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasPattern*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasPattern*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasPattern*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasPattern*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ICanvasTextMetrics
  def query_interface(this : ICanvasTextMetrics*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasTextMetrics*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasTextMetrics*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasTextMetrics*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasTextMetrics*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasTextMetrics*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasTextMetrics*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_width(this : ICanvasTextMetrics*, p : Float32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
end
struct LibWin32::ICanvasImageData
  def query_interface(this : ICanvasImageData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasImageData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasImageData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasImageData*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasImageData*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasImageData*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasImageData*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_width(this : ICanvasImageData*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def get_height(this : ICanvasImageData*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_data(this : ICanvasImageData*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
end
struct LibWin32::ICanvasPixelArray
  def query_interface(this : ICanvasPixelArray*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasPixelArray*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasPixelArray*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasPixelArray*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasPixelArray*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasPixelArray*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasPixelArray*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : ICanvasPixelArray*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
end
struct LibWin32::IHTMLCanvasElement
  def query_interface(this : IHTMLCanvasElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCanvasElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCanvasElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLCanvasElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLCanvasElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLCanvasElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLCanvasElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_width(this : IHTMLCanvasElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLCanvasElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLCanvasElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLCanvasElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_context(this : IHTMLCanvasElement*, contextid : UInt8*, ppcontext : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.get_context.call(this, contextid, ppcontext)
  end
  def to_data_url(this : IHTMLCanvasElement*, type : UInt8*, jpegquality : VARIANT, purl : UInt8**) : HRESULT
    @lpVtbl.value.to_data_url.call(this, type, jpegquality, purl)
  end
end
struct LibWin32::ICanvasRenderingContext2D
  def query_interface(this : ICanvasRenderingContext2D*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasRenderingContext2D*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasRenderingContext2D*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ICanvasRenderingContext2D*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ICanvasRenderingContext2D*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ICanvasRenderingContext2D*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ICanvasRenderingContext2D*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_canvas(this : ICanvasRenderingContext2D*, p : IHTMLCanvasElement*) : HRESULT
    @lpVtbl.value.get_canvas.call(this, p)
  end
  def restore(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.restore.call(this)
  end
  def save(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.save.call(this)
  end
  def rotate(this : ICanvasRenderingContext2D*, angle : Float32) : HRESULT
    @lpVtbl.value.rotate.call(this, angle)
  end
  def scale(this : ICanvasRenderingContext2D*, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.scale.call(this, x, y)
  end
  def set_transform(this : ICanvasRenderingContext2D*, m11 : Float32, m12 : Float32, m21 : Float32, m22 : Float32, dx : Float32, dy : Float32) : HRESULT
    @lpVtbl.value.set_transform.call(this, m11, m12, m21, m22, dx, dy)
  end
  def transform(this : ICanvasRenderingContext2D*, m11 : Float32, m12 : Float32, m21 : Float32, m22 : Float32, dx : Float32, dy : Float32) : HRESULT
    @lpVtbl.value.transform.call(this, m11, m12, m21, m22, dx, dy)
  end
  def translate(this : ICanvasRenderingContext2D*, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.translate.call(this, x, y)
  end
  def put_global_alpha(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_global_alpha.call(this, v)
  end
  def get_global_alpha(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_global_alpha.call(this, p)
  end
  def put_global_composite_operation(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_global_composite_operation.call(this, v)
  end
  def get_global_composite_operation(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_global_composite_operation.call(this, p)
  end
  def put_fill_style(this : ICanvasRenderingContext2D*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_fill_style.call(this, v)
  end
  def get_fill_style(this : ICanvasRenderingContext2D*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_fill_style.call(this, p)
  end
  def put_stroke_style(this : ICanvasRenderingContext2D*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_stroke_style.call(this, v)
  end
  def get_stroke_style(this : ICanvasRenderingContext2D*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_stroke_style.call(this, p)
  end
  def create_linear_gradient(this : ICanvasRenderingContext2D*, x0 : Float32, y0 : Float32, x1 : Float32, y1 : Float32, ppcanvasgradient : ICanvasGradient*) : HRESULT
    @lpVtbl.value.create_linear_gradient.call(this, x0, y0, x1, y1, ppcanvasgradient)
  end
  def create_radial_gradient(this : ICanvasRenderingContext2D*, x0 : Float32, y0 : Float32, r0 : Float32, x1 : Float32, y1 : Float32, r1 : Float32, ppcanvasgradient : ICanvasGradient*) : HRESULT
    @lpVtbl.value.create_radial_gradient.call(this, x0, y0, r0, x1, y1, r1, ppcanvasgradient)
  end
  def create_pattern(this : ICanvasRenderingContext2D*, image : IDispatch, repetition : VARIANT, ppcanvaspattern : ICanvasPattern*) : HRESULT
    @lpVtbl.value.create_pattern.call(this, image, repetition, ppcanvaspattern)
  end
  def put_line_cap(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_line_cap.call(this, v)
  end
  def get_line_cap(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_cap.call(this, p)
  end
  def put_line_join(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_line_join.call(this, v)
  end
  def get_line_join(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_line_join.call(this, p)
  end
  def put_line_width(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_line_width.call(this, v)
  end
  def get_line_width(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_line_width.call(this, p)
  end
  def put_miter_limit(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_miter_limit.call(this, v)
  end
  def get_miter_limit(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_miter_limit.call(this, p)
  end
  def put_shadow_blur(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_shadow_blur.call(this, v)
  end
  def get_shadow_blur(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_shadow_blur.call(this, p)
  end
  def put_shadow_color(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_shadow_color.call(this, v)
  end
  def get_shadow_color(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_shadow_color.call(this, p)
  end
  def put_shadow_offset_x(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_shadow_offset_x.call(this, v)
  end
  def get_shadow_offset_x(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_shadow_offset_x.call(this, p)
  end
  def put_shadow_offset_y(this : ICanvasRenderingContext2D*, v : Float32) : HRESULT
    @lpVtbl.value.put_shadow_offset_y.call(this, v)
  end
  def get_shadow_offset_y(this : ICanvasRenderingContext2D*, p : Float32*) : HRESULT
    @lpVtbl.value.get_shadow_offset_y.call(this, p)
  end
  def clear_rect(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, w : Float32, h : Float32) : HRESULT
    @lpVtbl.value.clear_rect.call(this, x, y, w, h)
  end
  def fill_rect(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, w : Float32, h : Float32) : HRESULT
    @lpVtbl.value.fill_rect.call(this, x, y, w, h)
  end
  def stroke_rect(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, w : Float32, h : Float32) : HRESULT
    @lpVtbl.value.stroke_rect.call(this, x, y, w, h)
  end
  def arc(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, radius : Float32, startangle : Float32, endangle : Float32, anticlockwise : LibC::BOOL) : HRESULT
    @lpVtbl.value.arc.call(this, x, y, radius, startangle, endangle, anticlockwise)
  end
  def arc_to(this : ICanvasRenderingContext2D*, x1 : Float32, y1 : Float32, x2 : Float32, y2 : Float32, radius : Float32) : HRESULT
    @lpVtbl.value.arc_to.call(this, x1, y1, x2, y2, radius)
  end
  def begin_path(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.begin_path.call(this)
  end
  def bezier_curve_to(this : ICanvasRenderingContext2D*, cp1x : Float32, cp1y : Float32, cp2x : Float32, cp2y : Float32, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.bezier_curve_to.call(this, cp1x, cp1y, cp2x, cp2y, x, y)
  end
  def clip(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.clip.call(this)
  end
  def close_path(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.close_path.call(this)
  end
  def fill(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.fill.call(this)
  end
  def line_to(this : ICanvasRenderingContext2D*, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.line_to.call(this, x, y)
  end
  def move_to(this : ICanvasRenderingContext2D*, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.move_to.call(this, x, y)
  end
  def quadratic_curve_to(this : ICanvasRenderingContext2D*, cpx : Float32, cpy : Float32, x : Float32, y : Float32) : HRESULT
    @lpVtbl.value.quadratic_curve_to.call(this, cpx, cpy, x, y)
  end
  def rect(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, w : Float32, h : Float32) : HRESULT
    @lpVtbl.value.rect.call(this, x, y, w, h)
  end
  def stroke(this : ICanvasRenderingContext2D*) : HRESULT
    @lpVtbl.value.stroke.call(this)
  end
  def is_point_in_path(this : ICanvasRenderingContext2D*, x : Float32, y : Float32, presult : Int16*) : HRESULT
    @lpVtbl.value.is_point_in_path.call(this, x, y, presult)
  end
  def put_font(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font.call(this, v)
  end
  def get_font(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font.call(this, p)
  end
  def put_text_align(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_align.call(this, v)
  end
  def get_text_align(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_align.call(this, p)
  end
  def put_text_baseline(this : ICanvasRenderingContext2D*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_baseline.call(this, v)
  end
  def get_text_baseline(this : ICanvasRenderingContext2D*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_baseline.call(this, p)
  end
  def fill_text(this : ICanvasRenderingContext2D*, text : UInt8*, x : Float32, y : Float32, maxwidth : VARIANT) : HRESULT
    @lpVtbl.value.fill_text.call(this, text, x, y, maxwidth)
  end
  def measure_text(this : ICanvasRenderingContext2D*, text : UInt8*, ppcanvastextmetrics : ICanvasTextMetrics*) : HRESULT
    @lpVtbl.value.measure_text.call(this, text, ppcanvastextmetrics)
  end
  def stroke_text(this : ICanvasRenderingContext2D*, text : UInt8*, x : Float32, y : Float32, maxwidth : VARIANT) : HRESULT
    @lpVtbl.value.stroke_text.call(this, text, x, y, maxwidth)
  end
  def draw_image(this : ICanvasRenderingContext2D*, psrc : IDispatch, a1 : VARIANT, a2 : VARIANT, a3 : VARIANT, a4 : VARIANT, a5 : VARIANT, a6 : VARIANT, a7 : VARIANT, a8 : VARIANT) : HRESULT
    @lpVtbl.value.draw_image.call(this, psrc, a1, a2, a3, a4, a5, a6, a7, a8)
  end
  def create_image_data(this : ICanvasRenderingContext2D*, a1 : VARIANT, a2 : VARIANT, ppcanvasimagedata : ICanvasImageData*) : HRESULT
    @lpVtbl.value.create_image_data.call(this, a1, a2, ppcanvasimagedata)
  end
  def get_image_data(this : ICanvasRenderingContext2D*, sx : Float32, sy : Float32, sw : Float32, sh : Float32, ppcanvasimagedata : ICanvasImageData*) : HRESULT
    @lpVtbl.value.get_image_data.call(this, sx, sy, sw, sh, ppcanvasimagedata)
  end
  def put_image_data(this : ICanvasRenderingContext2D*, imagedata : ICanvasImageData, dx : Float32, dy : Float32, dirtyx : VARIANT, dirtyy : VARIANT, dirtywidth : VARIANT, dirtyheight : VARIANT) : HRESULT
    @lpVtbl.value.put_image_data.call(this, imagedata, dx, dy, dirtyx, dirtyy, dirtywidth, dirtyheight)
  end
end
struct LibWin32::DispCanvasGradient
  def query_interface(this : DispCanvasGradient*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCanvasGradient*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCanvasGradient*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCanvasGradient*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCanvasGradient*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCanvasGradient*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCanvasGradient*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispCanvasPattern
  def query_interface(this : DispCanvasPattern*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCanvasPattern*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCanvasPattern*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCanvasPattern*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCanvasPattern*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCanvasPattern*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCanvasPattern*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispCanvasTextMetrics
  def query_interface(this : DispCanvasTextMetrics*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCanvasTextMetrics*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCanvasTextMetrics*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCanvasTextMetrics*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCanvasTextMetrics*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCanvasTextMetrics*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCanvasTextMetrics*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispCanvasImageData
  def query_interface(this : DispCanvasImageData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCanvasImageData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCanvasImageData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCanvasImageData*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCanvasImageData*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCanvasImageData*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCanvasImageData*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispCanvasRenderingContext2D
  def query_interface(this : DispCanvasRenderingContext2D*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCanvasRenderingContext2D*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCanvasRenderingContext2D*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCanvasRenderingContext2D*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCanvasRenderingContext2D*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCanvasRenderingContext2D*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCanvasRenderingContext2D*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLCanvasElement
  def query_interface(this : DispHTMLCanvasElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLCanvasElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLCanvasElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLCanvasElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLCanvasElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLCanvasElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLCanvasElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMProgressEvent
  def query_interface(this : IDOMProgressEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMProgressEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMProgressEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMProgressEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMProgressEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMProgressEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMProgressEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length_computable(this : IDOMProgressEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_length_computable.call(this, p)
  end
  def get_loaded(this : IDOMProgressEvent*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_loaded.call(this, p)
  end
  def get_total(this : IDOMProgressEvent*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_total.call(this, p)
  end
  def init_progress_event(this : IDOMProgressEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, lengthcomputablearg : Int16, loadedarg : UInt64, totalarg : UInt64) : HRESULT
    @lpVtbl.value.init_progress_event.call(this, eventtype, canbubble, cancelable, lengthcomputablearg, loadedarg, totalarg)
  end
end
struct LibWin32::DispDOMProgressEvent
  def query_interface(this : DispDOMProgressEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMProgressEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMProgressEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMProgressEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMProgressEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMProgressEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMProgressEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMessageEvent
  def query_interface(this : IDOMMessageEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMessageEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMessageEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMessageEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMessageEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMessageEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMessageEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_data(this : IDOMMessageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_data.call(this, p)
  end
  def get_origin(this : IDOMMessageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_origin.call(this, p)
  end
  def get_source(this : IDOMMessageEvent*, p : IHTMLWindow2*) : HRESULT
    @lpVtbl.value.get_source.call(this, p)
  end
  def init_message_event(this : IDOMMessageEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, data : UInt8*, origin : UInt8*, lasteventid : UInt8*, source : IHTMLWindow2) : HRESULT
    @lpVtbl.value.init_message_event.call(this, eventtype, canbubble, cancelable, data, origin, lasteventid, source)
  end
end
struct LibWin32::DispDOMMessageEvent
  def query_interface(this : DispDOMMessageEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMessageEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMessageEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMessageEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMessageEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMessageEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMessageEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMSiteModeEvent
  def query_interface(this : IDOMSiteModeEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMSiteModeEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMSiteModeEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMSiteModeEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMSiteModeEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMSiteModeEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMSiteModeEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_button_id(this : IDOMSiteModeEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_button_id.call(this, p)
  end
  def get_action_url(this : IDOMSiteModeEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_action_url.call(this, p)
  end
end
struct LibWin32::DispDOMSiteModeEvent
  def query_interface(this : DispDOMSiteModeEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMSiteModeEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMSiteModeEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMSiteModeEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMSiteModeEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMSiteModeEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMSiteModeEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMStorageEvent
  def query_interface(this : IDOMStorageEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMStorageEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMStorageEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMStorageEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMStorageEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMStorageEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMStorageEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_key(this : IDOMStorageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_key.call(this, p)
  end
  def get_old_value(this : IDOMStorageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_old_value.call(this, p)
  end
  def get_new_value(this : IDOMStorageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_new_value.call(this, p)
  end
  def get_url(this : IDOMStorageEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def get_storage_area(this : IDOMStorageEvent*, p : IHTMLStorage*) : HRESULT
    @lpVtbl.value.get_storage_area.call(this, p)
  end
  def init_storage_event(this : IDOMStorageEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, keyarg : UInt8*, oldvaluearg : UInt8*, newvaluearg : UInt8*, urlarg : UInt8*, storageareaarg : IHTMLStorage) : HRESULT
    @lpVtbl.value.init_storage_event.call(this, eventtype, canbubble, cancelable, keyarg, oldvaluearg, newvaluearg, urlarg, storageareaarg)
  end
end
struct LibWin32::DispDOMStorageEvent
  def query_interface(this : DispDOMStorageEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMStorageEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMStorageEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMStorageEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMStorageEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMStorageEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMStorageEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IXMLHttpRequestEventTarget
  def query_interface(this : IXMLHttpRequestEventTarget*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXMLHttpRequestEventTarget*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXMLHttpRequestEventTarget*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IXMLHttpRequestEventTarget*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IXMLHttpRequestEventTarget*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IXMLHttpRequestEventTarget*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IXMLHttpRequestEventTarget*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispXMLHttpRequestEventTarget
  def query_interface(this : DispXMLHttpRequestEventTarget*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispXMLHttpRequestEventTarget*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispXMLHttpRequestEventTarget*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispXMLHttpRequestEventTarget*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispXMLHttpRequestEventTarget*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispXMLHttpRequestEventTarget*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispXMLHttpRequestEventTarget*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::HTMLXMLHttpRequestEvents
  def query_interface(this : HTMLXMLHttpRequestEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLXMLHttpRequestEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLXMLHttpRequestEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLXMLHttpRequestEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLXMLHttpRequestEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLXMLHttpRequestEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLXMLHttpRequestEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLXMLHttpRequest
  def query_interface(this : IHTMLXMLHttpRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLXMLHttpRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLXMLHttpRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLXMLHttpRequest*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLXMLHttpRequest*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLXMLHttpRequest*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLXMLHttpRequest*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_ready_state(this : IHTMLXMLHttpRequest*, p : Int32*) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def get_response_body(this : IHTMLXMLHttpRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_response_body.call(this, p)
  end
  def get_response_text(this : IHTMLXMLHttpRequest*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_response_text.call(this, p)
  end
  def get_response_xml(this : IHTMLXMLHttpRequest*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_response_xml.call(this, p)
  end
  def get_status(this : IHTMLXMLHttpRequest*, p : Int32*) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def get_status_text(this : IHTMLXMLHttpRequest*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_status_text.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLXMLHttpRequest*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLXMLHttpRequest*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def abort(this : IHTMLXMLHttpRequest*) : HRESULT
    @lpVtbl.value.abort.call(this)
  end
  def open(this : IHTMLXMLHttpRequest*, bstrmethod : UInt8*, bstrurl : UInt8*, varasync : VARIANT, varuser : VARIANT, varpassword : VARIANT) : HRESULT
    @lpVtbl.value.open.call(this, bstrmethod, bstrurl, varasync, varuser, varpassword)
  end
  def send(this : IHTMLXMLHttpRequest*, varbody : VARIANT) : HRESULT
    @lpVtbl.value.send.call(this, varbody)
  end
  def get_all_response_headers(this : IHTMLXMLHttpRequest*, midl__ihtmlxmlhttprequest0000 : UInt8**) : HRESULT
    @lpVtbl.value.get_all_response_headers.call(this, midl__ihtmlxmlhttprequest0000)
  end
  def get_response_header(this : IHTMLXMLHttpRequest*, bstrheader : UInt8*, midl__ihtmlxmlhttprequest0001 : UInt8**) : HRESULT
    @lpVtbl.value.get_response_header.call(this, bstrheader, midl__ihtmlxmlhttprequest0001)
  end
  def set_request_header(this : IHTMLXMLHttpRequest*, bstrheader : UInt8*, bstrvalue : UInt8*) : HRESULT
    @lpVtbl.value.set_request_header.call(this, bstrheader, bstrvalue)
  end
end
struct LibWin32::IHTMLXMLHttpRequest2
  def query_interface(this : IHTMLXMLHttpRequest2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLXMLHttpRequest2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLXMLHttpRequest2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLXMLHttpRequest2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLXMLHttpRequest2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLXMLHttpRequest2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLXMLHttpRequest2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_timeout(this : IHTMLXMLHttpRequest2*, v : Int32) : HRESULT
    @lpVtbl.value.put_timeout.call(this, v)
  end
  def get_timeout(this : IHTMLXMLHttpRequest2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_timeout.call(this, p)
  end
  def put_ontimeout(this : IHTMLXMLHttpRequest2*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_ontimeout.call(this, v)
  end
  def get_ontimeout(this : IHTMLXMLHttpRequest2*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ontimeout.call(this, p)
  end
end
struct LibWin32::IHTMLXMLHttpRequestFactory
  def query_interface(this : IHTMLXMLHttpRequestFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLXMLHttpRequestFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLXMLHttpRequestFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLXMLHttpRequestFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLXMLHttpRequestFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLXMLHttpRequestFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLXMLHttpRequestFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IHTMLXMLHttpRequestFactory*, midl__ihtmlxmlhttprequestfactory0000 : IHTMLXMLHttpRequest*) : HRESULT
    @lpVtbl.value.create.call(this, midl__ihtmlxmlhttprequestfactory0000)
  end
end
struct LibWin32::DispHTMLXMLHttpRequest
  def query_interface(this : DispHTMLXMLHttpRequest*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLXMLHttpRequest*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLXMLHttpRequest*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLXMLHttpRequest*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLXMLHttpRequest*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLXMLHttpRequest*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLXMLHttpRequest*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGAngle
  def query_interface(this : ISVGAngle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAngle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAngle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAngle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAngle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAngle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAngle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_unit_type(this : ISVGAngle*, v : Int16) : HRESULT
    @lpVtbl.value.put_unit_type.call(this, v)
  end
  def get_unit_type(this : ISVGAngle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_unit_type.call(this, p)
  end
  def put_value(this : ISVGAngle*, v : Float32) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : ISVGAngle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_value_in_specified_units(this : ISVGAngle*, v : Float32) : HRESULT
    @lpVtbl.value.put_value_in_specified_units.call(this, v)
  end
  def get_value_in_specified_units(this : ISVGAngle*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value_in_specified_units.call(this, p)
  end
  def put_value_as_string(this : ISVGAngle*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value_as_string.call(this, v)
  end
  def get_value_as_string(this : ISVGAngle*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value_as_string.call(this, p)
  end
  def new_value_specified_units(this : ISVGAngle*, unittype : Int16, valueinspecifiedunits : Float32) : HRESULT
    @lpVtbl.value.new_value_specified_units.call(this, unittype, valueinspecifiedunits)
  end
  def convert_to_specified_units(this : ISVGAngle*, unittype : Int16) : HRESULT
    @lpVtbl.value.convert_to_specified_units.call(this, unittype)
  end
end
struct LibWin32::ISVGElement
  def query_interface(this : ISVGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_xmlbase(this : ISVGElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_xmlbase.call(this, v)
  end
  def get_xmlbase(this : ISVGElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xmlbase.call(this, p)
  end
  def putref_owner_svg_element(this : ISVGElement*, v : ISVGSVGElement) : HRESULT
    @lpVtbl.value.putref_owner_svg_element.call(this, v)
  end
  def get_owner_svg_element(this : ISVGElement*, p : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.get_owner_svg_element.call(this, p)
  end
  def putref_viewport_element(this : ISVGElement*, v : ISVGElement) : HRESULT
    @lpVtbl.value.putref_viewport_element.call(this, v)
  end
  def get_viewport_element(this : ISVGElement*, p : ISVGElement*) : HRESULT
    @lpVtbl.value.get_viewport_element.call(this, p)
  end
  def putref_focusable(this : ISVGElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_focusable.call(this, v)
  end
  def get_focusable(this : ISVGElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_focusable.call(this, p)
  end
end
struct LibWin32::ISVGRect
  def query_interface(this : ISVGRect*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGRect*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGRect*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGRect*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGRect*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGRect*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGRect*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGRect*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGRect*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGRect*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGRect*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_width(this : ISVGRect*, v : Float32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : ISVGRect*, p : Float32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : ISVGRect*, v : Float32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : ISVGRect*, p : Float32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::ISVGMatrix
  def query_interface(this : ISVGMatrix*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGMatrix*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGMatrix*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGMatrix*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGMatrix*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGMatrix*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGMatrix*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_a(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_a.call(this, v)
  end
  def get_a(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_a.call(this, p)
  end
  def put_b(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_b.call(this, v)
  end
  def get_b(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_b.call(this, p)
  end
  def put_c(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_c.call(this, v)
  end
  def get_c(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_c.call(this, p)
  end
  def put_d(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_d.call(this, v)
  end
  def get_d(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_d.call(this, p)
  end
  def put_e(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_e.call(this, v)
  end
  def get_e(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_e.call(this, p)
  end
  def put_f(this : ISVGMatrix*, v : Float32) : HRESULT
    @lpVtbl.value.put_f.call(this, v)
  end
  def get_f(this : ISVGMatrix*, p : Float32*) : HRESULT
    @lpVtbl.value.get_f.call(this, p)
  end
  def multiply(this : ISVGMatrix*, secondmatrix : ISVGMatrix, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.multiply.call(this, secondmatrix, ppresult)
  end
  def inverse(this : ISVGMatrix*, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.inverse.call(this, ppresult)
  end
  def translate(this : ISVGMatrix*, x : Float32, y : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.translate.call(this, x, y, ppresult)
  end
  def scale(this : ISVGMatrix*, scalefactor : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.scale.call(this, scalefactor, ppresult)
  end
  def scale_non_uniform(this : ISVGMatrix*, scalefactorx : Float32, scalefactory : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.scale_non_uniform.call(this, scalefactorx, scalefactory, ppresult)
  end
  def rotate(this : ISVGMatrix*, angle : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.rotate.call(this, angle, ppresult)
  end
  def rotate_from_vector(this : ISVGMatrix*, x : Float32, y : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.rotate_from_vector.call(this, x, y, ppresult)
  end
  def flip_x(this : ISVGMatrix*, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.flip_x.call(this, ppresult)
  end
  def flip_y(this : ISVGMatrix*, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.flip_y.call(this, ppresult)
  end
  def skew_x(this : ISVGMatrix*, angle : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.skew_x.call(this, angle, ppresult)
  end
  def skew_y(this : ISVGMatrix*, angle : Float32, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.skew_y.call(this, angle, ppresult)
  end
end
struct LibWin32::ISVGStringList
  def query_interface(this : ISVGStringList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGStringList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGStringList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGStringList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGStringList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGStringList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGStringList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGStringList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGStringList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGStringList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGStringList*, newitem : UInt8*, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.initialize.call(this, newitem, ppresult)
  end
  def get_item(this : ISVGStringList*, index : Int32, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGStringList*, newitem : UInt8*, index : Int32, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, newitem, index, ppresult)
  end
  def replace_item(this : ISVGStringList*, newitem : UInt8*, index : Int32, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.replace_item.call(this, newitem, index, ppresult)
  end
  def remove_item(this : ISVGStringList*, index : Int32, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGStringList*, newitem : UInt8*, ppresult : UInt8**) : HRESULT
    @lpVtbl.value.append_item.call(this, newitem, ppresult)
  end
end
struct LibWin32::ISVGAnimatedRect
  def query_interface(this : ISVGAnimatedRect*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedRect*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedRect*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedRect*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedRect*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedRect*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedRect*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedRect*, v : ISVGRect) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedRect*, p : ISVGRect*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedRect*, v : ISVGRect) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedRect*, p : ISVGRect*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedString
  def query_interface(this : ISVGAnimatedString*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedString*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedString*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedString*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedString*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedString*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedString*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_base_val(this : ISVGAnimatedString*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedString*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def get_anim_val(this : ISVGAnimatedString*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedBoolean
  def query_interface(this : ISVGAnimatedBoolean*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedBoolean*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedBoolean*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedBoolean*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedBoolean*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedBoolean*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedBoolean*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_base_val(this : ISVGAnimatedBoolean*, v : Int16) : HRESULT
    @lpVtbl.value.put_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedBoolean*, p : Int16*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def put_anim_val(this : ISVGAnimatedBoolean*, v : Int16) : HRESULT
    @lpVtbl.value.put_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedBoolean*, p : Int16*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedTransformList
  def query_interface(this : ISVGAnimatedTransformList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedTransformList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedTransformList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedTransformList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedTransformList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedTransformList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedTransformList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedTransformList*, v : ISVGTransformList) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedTransformList*, p : ISVGTransformList*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedTransformList*, v : ISVGTransformList) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedTransformList*, p : ISVGTransformList*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedPreserveAspectRatio
  def query_interface(this : ISVGAnimatedPreserveAspectRatio*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedPreserveAspectRatio*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedPreserveAspectRatio*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedPreserveAspectRatio*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedPreserveAspectRatio*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedPreserveAspectRatio*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedPreserveAspectRatio*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedPreserveAspectRatio*, v : ISVGPreserveAspectRatio) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedPreserveAspectRatio*, p : ISVGPreserveAspectRatio*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedPreserveAspectRatio*, v : ISVGPreserveAspectRatio) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedPreserveAspectRatio*, p : ISVGPreserveAspectRatio*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGStylable
  def query_interface(this : ISVGStylable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGStylable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGStylable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGStylable*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGStylable*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGStylable*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGStylable*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_class_name(this : ISVGStylable*, p : ISVGAnimatedString*) : HRESULT
    @lpVtbl.value.get_class_name.call(this, p)
  end
end
struct LibWin32::ISVGLocatable
  def query_interface(this : ISVGLocatable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLocatable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLocatable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLocatable*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLocatable*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLocatable*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLocatable*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_nearest_viewport_element(this : ISVGLocatable*, p : ISVGElement*) : HRESULT
    @lpVtbl.value.get_nearest_viewport_element.call(this, p)
  end
  def get_farthest_viewport_element(this : ISVGLocatable*, p : ISVGElement*) : HRESULT
    @lpVtbl.value.get_farthest_viewport_element.call(this, p)
  end
  def get_b_box(this : ISVGLocatable*, ppresult : ISVGRect*) : HRESULT
    @lpVtbl.value.get_b_box.call(this, ppresult)
  end
  def get_ctm(this : ISVGLocatable*, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.get_ctm.call(this, ppresult)
  end
  def get_screen_ctm(this : ISVGLocatable*, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.get_screen_ctm.call(this, ppresult)
  end
  def get_transform_to_element(this : ISVGLocatable*, pelement : ISVGElement, ppresult : ISVGMatrix*) : HRESULT
    @lpVtbl.value.get_transform_to_element.call(this, pelement, ppresult)
  end
end
struct LibWin32::ISVGTransformable
  def query_interface(this : ISVGTransformable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTransformable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTransformable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTransformable*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTransformable*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTransformable*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTransformable*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_transform(this : ISVGTransformable*, p : ISVGAnimatedTransformList*) : HRESULT
    @lpVtbl.value.get_transform.call(this, p)
  end
end
struct LibWin32::ISVGTests
  def query_interface(this : ISVGTests*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTests*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTests*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTests*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTests*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTests*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTests*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_required_features(this : ISVGTests*, p : ISVGStringList*) : HRESULT
    @lpVtbl.value.get_required_features.call(this, p)
  end
  def get_required_extensions(this : ISVGTests*, p : ISVGStringList*) : HRESULT
    @lpVtbl.value.get_required_extensions.call(this, p)
  end
  def get_system_language(this : ISVGTests*, p : ISVGStringList*) : HRESULT
    @lpVtbl.value.get_system_language.call(this, p)
  end
  def has_extension(this : ISVGTests*, extension : UInt8*, presult : Int16*) : HRESULT
    @lpVtbl.value.has_extension.call(this, extension, presult)
  end
end
struct LibWin32::ISVGLangSpace
  def query_interface(this : ISVGLangSpace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLangSpace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLangSpace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLangSpace*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLangSpace*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLangSpace*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLangSpace*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_xmllang(this : ISVGLangSpace*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_xmllang.call(this, v)
  end
  def get_xmllang(this : ISVGLangSpace*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xmllang.call(this, p)
  end
  def put_xmlspace(this : ISVGLangSpace*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_xmlspace.call(this, v)
  end
  def get_xmlspace(this : ISVGLangSpace*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_xmlspace.call(this, p)
  end
end
struct LibWin32::ISVGExternalResourcesRequired
  def query_interface(this : ISVGExternalResourcesRequired*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGExternalResourcesRequired*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGExternalResourcesRequired*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGExternalResourcesRequired*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGExternalResourcesRequired*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGExternalResourcesRequired*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGExternalResourcesRequired*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_external_resources_required(this : ISVGExternalResourcesRequired*, p : ISVGAnimatedBoolean*) : HRESULT
    @lpVtbl.value.get_external_resources_required.call(this, p)
  end
end
struct LibWin32::ISVGFitToViewBox
  def query_interface(this : ISVGFitToViewBox*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGFitToViewBox*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGFitToViewBox*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGFitToViewBox*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGFitToViewBox*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGFitToViewBox*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGFitToViewBox*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_view_box(this : ISVGFitToViewBox*, p : ISVGAnimatedRect*) : HRESULT
    @lpVtbl.value.get_view_box.call(this, p)
  end
  def putref_preserve_aspect_ratio(this : ISVGFitToViewBox*, v : ISVGAnimatedPreserveAspectRatio) : HRESULT
    @lpVtbl.value.putref_preserve_aspect_ratio.call(this, v)
  end
  def get_preserve_aspect_ratio(this : ISVGFitToViewBox*, p : ISVGAnimatedPreserveAspectRatio*) : HRESULT
    @lpVtbl.value.get_preserve_aspect_ratio.call(this, p)
  end
end
struct LibWin32::ISVGZoomAndPan
  def query_interface(this : ISVGZoomAndPan*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGZoomAndPan*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGZoomAndPan*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGZoomAndPan*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGZoomAndPan*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGZoomAndPan*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGZoomAndPan*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_zoom_and_pan(this : ISVGZoomAndPan*, p : Int16*) : HRESULT
    @lpVtbl.value.get_zoom_and_pan.call(this, p)
  end
end
struct LibWin32::ISVGURIReference
  def query_interface(this : ISVGURIReference*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGURIReference*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGURIReference*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGURIReference*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGURIReference*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGURIReference*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGURIReference*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_href(this : ISVGURIReference*, p : ISVGAnimatedString*) : HRESULT
    @lpVtbl.value.get_href.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedAngle
  def query_interface(this : ISVGAnimatedAngle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedAngle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedAngle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedAngle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedAngle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedAngle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedAngle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedAngle*, v : ISVGAngle) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedAngle*, p : ISVGAngle*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedAngle*, v : ISVGAngle) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedAngle*, p : ISVGAngle*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGTransformList
  def query_interface(this : ISVGTransformList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTransformList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTransformList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTransformList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTransformList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTransformList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTransformList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGTransformList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGTransformList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGTransformList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGTransformList*, newitem : ISVGTransform, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.initialize.call(this, newitem, ppresult)
  end
  def get_item(this : ISVGTransformList*, index : Int32, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGTransformList*, newitem : ISVGTransform, index : Int32, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, newitem, index, ppresult)
  end
  def replace_item(this : ISVGTransformList*, newitem : ISVGTransform, index : Int32, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.replace_item.call(this, newitem, index, ppresult)
  end
  def remove_item(this : ISVGTransformList*, index : Int32, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGTransformList*, newitem : ISVGTransform, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.append_item.call(this, newitem, ppresult)
  end
  def create_svg_transform_from_matrix(this : ISVGTransformList*, newitem : ISVGMatrix, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.create_svg_transform_from_matrix.call(this, newitem, ppresult)
  end
  def consolidate(this : ISVGTransformList*, ppresult : ISVGTransform*) : HRESULT
    @lpVtbl.value.consolidate.call(this, ppresult)
  end
end
struct LibWin32::ISVGAnimatedEnumeration
  def query_interface(this : ISVGAnimatedEnumeration*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedEnumeration*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedEnumeration*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedEnumeration*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedEnumeration*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedEnumeration*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedEnumeration*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_base_val(this : ISVGAnimatedEnumeration*, v : UInt16) : HRESULT
    @lpVtbl.value.put_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedEnumeration*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def put_anim_val(this : ISVGAnimatedEnumeration*, v : UInt16) : HRESULT
    @lpVtbl.value.put_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedEnumeration*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedInteger
  def query_interface(this : ISVGAnimatedInteger*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedInteger*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedInteger*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedInteger*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedInteger*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedInteger*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedInteger*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_base_val(this : ISVGAnimatedInteger*, v : Int32) : HRESULT
    @lpVtbl.value.put_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedInteger*, p : Int32*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def put_anim_val(this : ISVGAnimatedInteger*, v : Int32) : HRESULT
    @lpVtbl.value.put_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedInteger*, p : Int32*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGLength
  def query_interface(this : ISVGLength*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLength*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLength*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLength*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLength*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLength*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLength*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_unit_type(this : ISVGLength*, v : Int16) : HRESULT
    @lpVtbl.value.put_unit_type.call(this, v)
  end
  def get_unit_type(this : ISVGLength*, p : Int16*) : HRESULT
    @lpVtbl.value.get_unit_type.call(this, p)
  end
  def put_value(this : ISVGLength*, v : Float32) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : ISVGLength*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_value_in_specified_units(this : ISVGLength*, v : Float32) : HRESULT
    @lpVtbl.value.put_value_in_specified_units.call(this, v)
  end
  def get_value_in_specified_units(this : ISVGLength*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value_in_specified_units.call(this, p)
  end
  def put_value_as_string(this : ISVGLength*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_value_as_string.call(this, v)
  end
  def get_value_as_string(this : ISVGLength*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_value_as_string.call(this, p)
  end
  def new_value_specified_units(this : ISVGLength*, unittype : Int16, valueinspecifiedunits : Float32) : HRESULT
    @lpVtbl.value.new_value_specified_units.call(this, unittype, valueinspecifiedunits)
  end
  def convert_to_specified_units(this : ISVGLength*, unittype : Int16) : HRESULT
    @lpVtbl.value.convert_to_specified_units.call(this, unittype)
  end
end
struct LibWin32::ISVGAnimatedLength
  def query_interface(this : ISVGAnimatedLength*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedLength*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedLength*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedLength*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedLength*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedLength*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedLength*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedLength*, v : ISVGLength) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedLength*, p : ISVGLength*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedLength*, v : ISVGLength) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedLength*, p : ISVGLength*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGLengthList
  def query_interface(this : ISVGLengthList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLengthList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLengthList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLengthList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLengthList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLengthList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLengthList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGLengthList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGLengthList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGLengthList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGLengthList*, newitem : ISVGLength, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.initialize.call(this, newitem, ppresult)
  end
  def get_item(this : ISVGLengthList*, index : Int32, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGLengthList*, newitem : ISVGLength, index : Int32, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, newitem, index, ppresult)
  end
  def replace_item(this : ISVGLengthList*, newitem : ISVGLength, index : Int32, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.replace_item.call(this, newitem, index, ppresult)
  end
  def remove_item(this : ISVGLengthList*, index : Int32, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGLengthList*, newitem : ISVGLength, ppresult : ISVGLength*) : HRESULT
    @lpVtbl.value.append_item.call(this, newitem, ppresult)
  end
end
struct LibWin32::ISVGAnimatedLengthList
  def query_interface(this : ISVGAnimatedLengthList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedLengthList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedLengthList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedLengthList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedLengthList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedLengthList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedLengthList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedLengthList*, v : ISVGLengthList) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedLengthList*, p : ISVGLengthList*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedLengthList*, v : ISVGLengthList) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedLengthList*, p : ISVGLengthList*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGNumber
  def query_interface(this : ISVGNumber*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGNumber*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGNumber*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGNumber*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGNumber*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGNumber*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGNumber*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_value(this : ISVGNumber*, v : Float32) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : ISVGNumber*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
end
struct LibWin32::ISVGAnimatedNumber
  def query_interface(this : ISVGAnimatedNumber*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedNumber*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedNumber*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedNumber*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedNumber*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedNumber*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedNumber*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_base_val(this : ISVGAnimatedNumber*, v : Float32) : HRESULT
    @lpVtbl.value.put_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedNumber*, p : Float32*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def put_anim_val(this : ISVGAnimatedNumber*, v : Float32) : HRESULT
    @lpVtbl.value.put_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedNumber*, p : Float32*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGNumberList
  def query_interface(this : ISVGNumberList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGNumberList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGNumberList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGNumberList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGNumberList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGNumberList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGNumberList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGNumberList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGNumberList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGNumberList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGNumberList*, newitem : ISVGNumber, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.initialize.call(this, newitem, ppresult)
  end
  def get_item(this : ISVGNumberList*, index : Int32, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGNumberList*, newitem : ISVGNumber, index : Int32, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, newitem, index, ppresult)
  end
  def replace_item(this : ISVGNumberList*, newitem : ISVGNumber, index : Int32, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.replace_item.call(this, newitem, index, ppresult)
  end
  def remove_item(this : ISVGNumberList*, index : Int32, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGNumberList*, newitem : ISVGNumber, ppresult : ISVGNumber*) : HRESULT
    @lpVtbl.value.append_item.call(this, newitem, ppresult)
  end
end
struct LibWin32::ISVGAnimatedNumberList
  def query_interface(this : ISVGAnimatedNumberList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedNumberList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedNumberList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedNumberList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedNumberList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedNumberList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedNumberList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_base_val(this : ISVGAnimatedNumberList*, v : ISVGNumberList) : HRESULT
    @lpVtbl.value.putref_base_val.call(this, v)
  end
  def get_base_val(this : ISVGAnimatedNumberList*, p : ISVGNumberList*) : HRESULT
    @lpVtbl.value.get_base_val.call(this, p)
  end
  def putref_anim_val(this : ISVGAnimatedNumberList*, v : ISVGNumberList) : HRESULT
    @lpVtbl.value.putref_anim_val.call(this, v)
  end
  def get_anim_val(this : ISVGAnimatedNumberList*, p : ISVGNumberList*) : HRESULT
    @lpVtbl.value.get_anim_val.call(this, p)
  end
end
struct LibWin32::ISVGClipPathElement
  def query_interface(this : ISVGClipPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGClipPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGClipPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGClipPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGClipPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGClipPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGClipPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_clip_path_units(this : ISVGClipPathElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_clip_path_units.call(this, v)
  end
  def get_clip_path_units(this : ISVGClipPathElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_clip_path_units.call(this, p)
  end
end
struct LibWin32::DispSVGClipPathElement
  def query_interface(this : DispSVGClipPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGClipPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGClipPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGClipPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGClipPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGClipPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGClipPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGDocument
  def query_interface(this : ISVGDocument*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGDocument*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGDocument*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGDocument*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGDocument*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGDocument*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGDocument*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root_element(this : ISVGDocument*, p : ISVGSVGElement*) : HRESULT
    @lpVtbl.value.get_root_element.call(this, p)
  end
end
struct LibWin32::IGetSVGDocument
  def query_interface(this : IGetSVGDocument*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IGetSVGDocument*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IGetSVGDocument*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IGetSVGDocument*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IGetSVGDocument*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IGetSVGDocument*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IGetSVGDocument*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_svg_document(this : IGetSVGDocument*, ppsvgdocument : IDispatch*) : HRESULT
    @lpVtbl.value.get_svg_document.call(this, ppsvgdocument)
  end
end
struct LibWin32::DispSVGElement
  def query_interface(this : DispSVGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IICCSVGColor
  def query_interface(this : IICCSVGColor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IICCSVGColor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IICCSVGColor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IICCSVGColor*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IICCSVGColor*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IICCSVGColor*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IICCSVGColor*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPaint
  def query_interface(this : ISVGPaint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPaint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPaint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPaint*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPaint*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPaint*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPaint*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPatternElement
  def query_interface(this : ISVGPatternElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPatternElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPatternElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPatternElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPatternElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPatternElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPatternElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_pattern_units(this : ISVGPatternElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_pattern_units.call(this, v)
  end
  def get_pattern_units(this : ISVGPatternElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_pattern_units.call(this, p)
  end
  def putref_pattern_content_units(this : ISVGPatternElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_pattern_content_units.call(this, v)
  end
  def get_pattern_content_units(this : ISVGPatternElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_pattern_content_units.call(this, p)
  end
  def putref_pattern_transform(this : ISVGPatternElement*, v : ISVGAnimatedTransformList) : HRESULT
    @lpVtbl.value.putref_pattern_transform.call(this, v)
  end
  def get_pattern_transform(this : ISVGPatternElement*, p : ISVGAnimatedTransformList*) : HRESULT
    @lpVtbl.value.get_pattern_transform.call(this, p)
  end
  def putref_x(this : ISVGPatternElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGPatternElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGPatternElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGPatternElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGPatternElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGPatternElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGPatternElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGPatternElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::DispSVGPatternElement
  def query_interface(this : DispSVGPatternElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPatternElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPatternElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPatternElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPatternElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPatternElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPatternElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPathSeg
  def query_interface(this : ISVGPathSeg*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSeg*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSeg*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSeg*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSeg*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSeg*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSeg*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_path_seg_type(this : ISVGPathSeg*, v : Int16) : HRESULT
    @lpVtbl.value.put_path_seg_type.call(this, v)
  end
  def get_path_seg_type(this : ISVGPathSeg*, p : Int16*) : HRESULT
    @lpVtbl.value.get_path_seg_type.call(this, p)
  end
  def get_path_seg_type_as_letter(this : ISVGPathSeg*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_path_seg_type_as_letter.call(this, p)
  end
end
struct LibWin32::ISVGPathSegArcAbs
  def query_interface(this : ISVGPathSegArcAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegArcAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegArcAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegArcAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegArcAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegArcAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegArcAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegArcAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegArcAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegArcAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegArcAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_r1(this : ISVGPathSegArcAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_r1.call(this, v)
  end
  def get_r1(this : ISVGPathSegArcAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_r1.call(this, p)
  end
  def put_r2(this : ISVGPathSegArcAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_r2.call(this, v)
  end
  def get_r2(this : ISVGPathSegArcAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_r2.call(this, p)
  end
  def put_angle(this : ISVGPathSegArcAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_angle.call(this, v)
  end
  def get_angle(this : ISVGPathSegArcAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_angle.call(this, p)
  end
  def put_large_arc_flag(this : ISVGPathSegArcAbs*, v : Int16) : HRESULT
    @lpVtbl.value.put_large_arc_flag.call(this, v)
  end
  def get_large_arc_flag(this : ISVGPathSegArcAbs*, p : Int16*) : HRESULT
    @lpVtbl.value.get_large_arc_flag.call(this, p)
  end
  def put_sweep_flag(this : ISVGPathSegArcAbs*, v : Int16) : HRESULT
    @lpVtbl.value.put_sweep_flag.call(this, v)
  end
  def get_sweep_flag(this : ISVGPathSegArcAbs*, p : Int16*) : HRESULT
    @lpVtbl.value.get_sweep_flag.call(this, p)
  end
end
struct LibWin32::ISVGPathSegArcRel
  def query_interface(this : ISVGPathSegArcRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegArcRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegArcRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegArcRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegArcRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegArcRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegArcRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegArcRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegArcRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegArcRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegArcRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_r1(this : ISVGPathSegArcRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_r1.call(this, v)
  end
  def get_r1(this : ISVGPathSegArcRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_r1.call(this, p)
  end
  def put_r2(this : ISVGPathSegArcRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_r2.call(this, v)
  end
  def get_r2(this : ISVGPathSegArcRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_r2.call(this, p)
  end
  def put_angle(this : ISVGPathSegArcRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_angle.call(this, v)
  end
  def get_angle(this : ISVGPathSegArcRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_angle.call(this, p)
  end
  def put_large_arc_flag(this : ISVGPathSegArcRel*, v : Int16) : HRESULT
    @lpVtbl.value.put_large_arc_flag.call(this, v)
  end
  def get_large_arc_flag(this : ISVGPathSegArcRel*, p : Int16*) : HRESULT
    @lpVtbl.value.get_large_arc_flag.call(this, p)
  end
  def put_sweep_flag(this : ISVGPathSegArcRel*, v : Int16) : HRESULT
    @lpVtbl.value.put_sweep_flag.call(this, v)
  end
  def get_sweep_flag(this : ISVGPathSegArcRel*, p : Int16*) : HRESULT
    @lpVtbl.value.get_sweep_flag.call(this, p)
  end
end
struct LibWin32::ISVGPathSegClosePath
  def query_interface(this : ISVGPathSegClosePath*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegClosePath*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegClosePath*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegClosePath*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegClosePath*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegClosePath*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegClosePath*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPathSegMovetoAbs
  def query_interface(this : ISVGPathSegMovetoAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegMovetoAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegMovetoAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegMovetoAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegMovetoAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegMovetoAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegMovetoAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegMovetoAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegMovetoAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegMovetoAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegMovetoAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegMovetoRel
  def query_interface(this : ISVGPathSegMovetoRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegMovetoRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegMovetoRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegMovetoRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegMovetoRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegMovetoRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegMovetoRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegMovetoRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegMovetoRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegMovetoRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegMovetoRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoAbs
  def query_interface(this : ISVGPathSegLinetoAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegLinetoAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegLinetoAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegLinetoAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegLinetoAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoRel
  def query_interface(this : ISVGPathSegLinetoRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegLinetoRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegLinetoRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegLinetoRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegLinetoRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoCubicAbs
  def query_interface(this : ISVGPathSegCurvetoCubicAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoCubicAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoCubicAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoCubicAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoCubicAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoCubicAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoCubicAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x1(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x1.call(this, v)
  end
  def get_x1(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def put_y1(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y1.call(this, v)
  end
  def get_y1(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
  def put_x2(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x2.call(this, v)
  end
  def get_x2(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def put_y2(this : ISVGPathSegCurvetoCubicAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y2.call(this, v)
  end
  def get_y2(this : ISVGPathSegCurvetoCubicAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoCubicRel
  def query_interface(this : ISVGPathSegCurvetoCubicRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoCubicRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoCubicRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoCubicRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoCubicRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoCubicRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoCubicRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x1(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x1.call(this, v)
  end
  def get_x1(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def put_y1(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y1.call(this, v)
  end
  def get_y1(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
  def put_x2(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x2.call(this, v)
  end
  def get_x2(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def put_y2(this : ISVGPathSegCurvetoCubicRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y2.call(this, v)
  end
  def get_y2(this : ISVGPathSegCurvetoCubicRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoCubicSmoothAbs
  def query_interface(this : ISVGPathSegCurvetoCubicSmoothAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoCubicSmoothAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoCubicSmoothAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoCubicSmoothAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoCubicSmoothAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoCubicSmoothAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoCubicSmoothAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoCubicSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoCubicSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoCubicSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoCubicSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x2(this : ISVGPathSegCurvetoCubicSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x2.call(this, v)
  end
  def get_x2(this : ISVGPathSegCurvetoCubicSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def put_y2(this : ISVGPathSegCurvetoCubicSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y2.call(this, v)
  end
  def get_y2(this : ISVGPathSegCurvetoCubicSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoCubicSmoothRel
  def query_interface(this : ISVGPathSegCurvetoCubicSmoothRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoCubicSmoothRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoCubicSmoothRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoCubicSmoothRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoCubicSmoothRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoCubicSmoothRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoCubicSmoothRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoCubicSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoCubicSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoCubicSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoCubicSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x2(this : ISVGPathSegCurvetoCubicSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x2.call(this, v)
  end
  def get_x2(this : ISVGPathSegCurvetoCubicSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def put_y2(this : ISVGPathSegCurvetoCubicSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y2.call(this, v)
  end
  def get_y2(this : ISVGPathSegCurvetoCubicSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoQuadraticAbs
  def query_interface(this : ISVGPathSegCurvetoQuadraticAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoQuadraticAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoQuadraticAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoQuadraticAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoQuadraticAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoQuadraticAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoQuadraticAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoQuadraticAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoQuadraticAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoQuadraticAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoQuadraticAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x1(this : ISVGPathSegCurvetoQuadraticAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x1.call(this, v)
  end
  def get_x1(this : ISVGPathSegCurvetoQuadraticAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def put_y1(this : ISVGPathSegCurvetoQuadraticAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y1.call(this, v)
  end
  def get_y1(this : ISVGPathSegCurvetoQuadraticAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoQuadraticRel
  def query_interface(this : ISVGPathSegCurvetoQuadraticRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoQuadraticRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoQuadraticRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoQuadraticRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoQuadraticRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoQuadraticRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoQuadraticRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoQuadraticRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoQuadraticRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoQuadraticRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoQuadraticRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def put_x1(this : ISVGPathSegCurvetoQuadraticRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x1.call(this, v)
  end
  def get_x1(this : ISVGPathSegCurvetoQuadraticRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def put_y1(this : ISVGPathSegCurvetoQuadraticRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y1.call(this, v)
  end
  def get_y1(this : ISVGPathSegCurvetoQuadraticRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoQuadraticSmoothAbs
  def query_interface(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoQuadraticSmoothAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoQuadraticSmoothAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoQuadraticSmoothAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegCurvetoQuadraticSmoothRel
  def query_interface(this : ISVGPathSegCurvetoQuadraticSmoothRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegCurvetoQuadraticSmoothRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegCurvetoQuadraticSmoothRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegCurvetoQuadraticSmoothRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegCurvetoQuadraticSmoothRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegCurvetoQuadraticSmoothRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegCurvetoQuadraticSmoothRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegCurvetoQuadraticSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegCurvetoQuadraticSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPathSegCurvetoQuadraticSmoothRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegCurvetoQuadraticSmoothRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoHorizontalAbs
  def query_interface(this : ISVGPathSegLinetoHorizontalAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoHorizontalAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoHorizontalAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoHorizontalAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoHorizontalAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoHorizontalAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoHorizontalAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegLinetoHorizontalAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegLinetoHorizontalAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoHorizontalRel
  def query_interface(this : ISVGPathSegLinetoHorizontalRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoHorizontalRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoHorizontalRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoHorizontalRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoHorizontalRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoHorizontalRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoHorizontalRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPathSegLinetoHorizontalRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPathSegLinetoHorizontalRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoVerticalAbs
  def query_interface(this : ISVGPathSegLinetoVerticalAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoVerticalAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoVerticalAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoVerticalAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoVerticalAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoVerticalAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoVerticalAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_y(this : ISVGPathSegLinetoVerticalAbs*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegLinetoVerticalAbs*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::ISVGPathSegLinetoVerticalRel
  def query_interface(this : ISVGPathSegLinetoVerticalRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegLinetoVerticalRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegLinetoVerticalRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegLinetoVerticalRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegLinetoVerticalRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegLinetoVerticalRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegLinetoVerticalRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_y(this : ISVGPathSegLinetoVerticalRel*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPathSegLinetoVerticalRel*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
end
struct LibWin32::DispSVGPathSegArcAbs
  def query_interface(this : DispSVGPathSegArcAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegArcAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegArcAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegArcAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegArcAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegArcAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegArcAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegArcRel
  def query_interface(this : DispSVGPathSegArcRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegArcRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegArcRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegArcRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegArcRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegArcRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegArcRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegClosePath
  def query_interface(this : DispSVGPathSegClosePath*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegClosePath*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegClosePath*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegClosePath*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegClosePath*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegClosePath*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegClosePath*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegMovetoAbs
  def query_interface(this : DispSVGPathSegMovetoAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegMovetoAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegMovetoAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegMovetoAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegMovetoAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegMovetoAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegMovetoAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegMovetoRel
  def query_interface(this : DispSVGPathSegMovetoRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegMovetoRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegMovetoRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegMovetoRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegMovetoRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegMovetoRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegMovetoRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoAbs
  def query_interface(this : DispSVGPathSegLinetoAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoRel
  def query_interface(this : DispSVGPathSegLinetoRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoCubicAbs
  def query_interface(this : DispSVGPathSegCurvetoCubicAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoCubicAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoCubicAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoCubicAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoCubicAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoCubicAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoCubicAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoCubicRel
  def query_interface(this : DispSVGPathSegCurvetoCubicRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoCubicRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoCubicRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoCubicRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoCubicRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoCubicRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoCubicRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoCubicSmoothAbs
  def query_interface(this : DispSVGPathSegCurvetoCubicSmoothAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoCubicSmoothAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoCubicSmoothAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoCubicSmoothAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoCubicSmoothAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoCubicSmoothAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoCubicSmoothAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoCubicSmoothRel
  def query_interface(this : DispSVGPathSegCurvetoCubicSmoothRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoCubicSmoothRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoCubicSmoothRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoCubicSmoothRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoCubicSmoothRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoCubicSmoothRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoCubicSmoothRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoQuadraticAbs
  def query_interface(this : DispSVGPathSegCurvetoQuadraticAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoQuadraticAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoQuadraticAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoQuadraticAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoQuadraticAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoQuadraticAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoQuadraticAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoQuadraticRel
  def query_interface(this : DispSVGPathSegCurvetoQuadraticRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoQuadraticRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoQuadraticRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoQuadraticRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoQuadraticRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoQuadraticRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoQuadraticRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoQuadraticSmoothAbs
  def query_interface(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoQuadraticSmoothAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegCurvetoQuadraticSmoothRel
  def query_interface(this : DispSVGPathSegCurvetoQuadraticSmoothRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegCurvetoQuadraticSmoothRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegCurvetoQuadraticSmoothRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegCurvetoQuadraticSmoothRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegCurvetoQuadraticSmoothRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegCurvetoQuadraticSmoothRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegCurvetoQuadraticSmoothRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoHorizontalAbs
  def query_interface(this : DispSVGPathSegLinetoHorizontalAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoHorizontalAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoHorizontalAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoHorizontalAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoHorizontalAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoHorizontalAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoHorizontalAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoHorizontalRel
  def query_interface(this : DispSVGPathSegLinetoHorizontalRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoHorizontalRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoHorizontalRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoHorizontalRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoHorizontalRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoHorizontalRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoHorizontalRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoVerticalAbs
  def query_interface(this : DispSVGPathSegLinetoVerticalAbs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoVerticalAbs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoVerticalAbs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoVerticalAbs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoVerticalAbs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoVerticalAbs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoVerticalAbs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPathSegLinetoVerticalRel
  def query_interface(this : DispSVGPathSegLinetoVerticalRel*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathSegLinetoVerticalRel*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathSegLinetoVerticalRel*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathSegLinetoVerticalRel*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathSegLinetoVerticalRel*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathSegLinetoVerticalRel*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathSegLinetoVerticalRel*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPathSegList
  def query_interface(this : ISVGPathSegList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathSegList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathSegList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathSegList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathSegList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathSegList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathSegList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGPathSegList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGPathSegList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGPathSegList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGPathSegList*, newitem : ISVGPathSeg, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.initialize.call(this, newitem, ppresult)
  end
  def get_item(this : ISVGPathSegList*, index : Int32, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGPathSegList*, newitem : ISVGPathSeg, index : Int32, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, newitem, index, ppresult)
  end
  def replace_item(this : ISVGPathSegList*, newitem : ISVGPathSeg, index : Int32, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.replace_item.call(this, newitem, index, ppresult)
  end
  def remove_item(this : ISVGPathSegList*, index : Int32, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGPathSegList*, newitem : ISVGPathSeg, ppresult : ISVGPathSeg*) : HRESULT
    @lpVtbl.value.append_item.call(this, newitem, ppresult)
  end
end
struct LibWin32::ISVGPoint
  def query_interface(this : ISVGPoint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPoint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPoint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPoint*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPoint*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPoint*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPoint*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_x(this : ISVGPoint*, v : Float32) : HRESULT
    @lpVtbl.value.put_x.call(this, v)
  end
  def get_x(this : ISVGPoint*, p : Float32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def put_y(this : ISVGPoint*, v : Float32) : HRESULT
    @lpVtbl.value.put_y.call(this, v)
  end
  def get_y(this : ISVGPoint*, p : Float32*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def matrix_transform(this : ISVGPoint*, pmatrix : ISVGMatrix, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.matrix_transform.call(this, pmatrix, ppresult)
  end
end
struct LibWin32::ISVGPointList
  def query_interface(this : ISVGPointList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPointList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPointList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPointList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPointList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPointList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPointList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_number_of_items(this : ISVGPointList*, v : Int32) : HRESULT
    @lpVtbl.value.put_number_of_items.call(this, v)
  end
  def get_number_of_items(this : ISVGPointList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_items.call(this, p)
  end
  def clear(this : ISVGPointList*) : HRESULT
    @lpVtbl.value.clear.call(this)
  end
  def initialize(this : ISVGPointList*, pnewitem : ISVGPoint, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.initialize.call(this, pnewitem, ppresult)
  end
  def get_item(this : ISVGPointList*, index : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, ppresult)
  end
  def insert_item_before(this : ISVGPointList*, pnewitem : ISVGPoint, index : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.insert_item_before.call(this, pnewitem, index, ppresult)
  end
  def replace_item(this : ISVGPointList*, pnewitem : ISVGPoint, index : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.replace_item.call(this, pnewitem, index, ppresult)
  end
  def remove_item(this : ISVGPointList*, index : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.remove_item.call(this, index, ppresult)
  end
  def append_item(this : ISVGPointList*, pnewitem : ISVGPoint, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.append_item.call(this, pnewitem, ppresult)
  end
end
struct LibWin32::ISVGViewSpec
  def query_interface(this : ISVGViewSpec*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGViewSpec*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGViewSpec*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGViewSpec*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGViewSpec*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGViewSpec*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGViewSpec*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTransform
  def query_interface(this : ISVGTransform*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTransform*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTransform*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTransform*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTransform*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTransform*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTransform*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : ISVGTransform*, v : Int16) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : ISVGTransform*, p : Int16*) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def putref_matrix(this : ISVGTransform*, v : ISVGMatrix) : HRESULT
    @lpVtbl.value.putref_matrix.call(this, v)
  end
  def get_matrix(this : ISVGTransform*, p : ISVGMatrix*) : HRESULT
    @lpVtbl.value.get_matrix.call(this, p)
  end
  def put_angle(this : ISVGTransform*, v : Float32) : HRESULT
    @lpVtbl.value.put_angle.call(this, v)
  end
  def get_angle(this : ISVGTransform*, p : Float32*) : HRESULT
    @lpVtbl.value.get_angle.call(this, p)
  end
  def set_matrix(this : ISVGTransform*, matrix : ISVGMatrix) : HRESULT
    @lpVtbl.value.set_matrix.call(this, matrix)
  end
  def set_translate(this : ISVGTransform*, tx : Float32, ty : Float32) : HRESULT
    @lpVtbl.value.set_translate.call(this, tx, ty)
  end
  def set_scale(this : ISVGTransform*, sx : Float32, sy : Float32) : HRESULT
    @lpVtbl.value.set_scale.call(this, sx, sy)
  end
  def set_rotate(this : ISVGTransform*, angle : Float32, cx : Float32, cy : Float32) : HRESULT
    @lpVtbl.value.set_rotate.call(this, angle, cx, cy)
  end
  def set_skew_x(this : ISVGTransform*, angle : Float32) : HRESULT
    @lpVtbl.value.set_skew_x.call(this, angle)
  end
  def set_skew_y(this : ISVGTransform*, angle : Float32) : HRESULT
    @lpVtbl.value.set_skew_y.call(this, angle)
  end
end
struct LibWin32::DispSVGSVGElement
  def query_interface(this : DispSVGSVGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGSVGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGSVGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGSVGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGSVGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGSVGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGSVGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGElementInstance
  def query_interface(this : ISVGElementInstance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGElementInstance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGElementInstance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGElementInstance*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGElementInstance*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGElementInstance*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGElementInstance*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_corresponding_element(this : ISVGElementInstance*, p : ISVGElement*) : HRESULT
    @lpVtbl.value.get_corresponding_element.call(this, p)
  end
  def get_corresponding_use_element(this : ISVGElementInstance*, p : ISVGUseElement*) : HRESULT
    @lpVtbl.value.get_corresponding_use_element.call(this, p)
  end
  def get_parent_node(this : ISVGElementInstance*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_parent_node.call(this, p)
  end
  def get_child_nodes(this : ISVGElementInstance*, p : ISVGElementInstanceList*) : HRESULT
    @lpVtbl.value.get_child_nodes.call(this, p)
  end
  def get_first_child(this : ISVGElementInstance*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_first_child.call(this, p)
  end
  def get_last_child(this : ISVGElementInstance*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_last_child.call(this, p)
  end
  def get_previous_sibling(this : ISVGElementInstance*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_previous_sibling.call(this, p)
  end
  def get_next_sibling(this : ISVGElementInstance*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_next_sibling.call(this, p)
  end
end
struct LibWin32::ISVGUseElement
  def query_interface(this : ISVGUseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGUseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGUseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGUseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGUseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGUseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGUseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x(this : ISVGUseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGUseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGUseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGUseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGUseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGUseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGUseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGUseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def putref_instance_root(this : ISVGUseElement*, v : ISVGElementInstance) : HRESULT
    @lpVtbl.value.putref_instance_root.call(this, v)
  end
  def get_instance_root(this : ISVGUseElement*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_instance_root.call(this, p)
  end
  def putref_animated_instance_root(this : ISVGUseElement*, v : ISVGElementInstance) : HRESULT
    @lpVtbl.value.putref_animated_instance_root.call(this, v)
  end
  def get_animated_instance_root(this : ISVGUseElement*, p : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.get_animated_instance_root.call(this, p)
  end
end
struct LibWin32::DispSVGUseElement
  def query_interface(this : DispSVGUseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGUseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGUseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGUseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGUseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGUseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGUseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLStyleSheetRulesAppliedCollection
  def query_interface(this : IHTMLStyleSheetRulesAppliedCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLStyleSheetRulesAppliedCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLStyleSheetRulesAppliedCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLStyleSheetRulesAppliedCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLStyleSheetRulesAppliedCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLStyleSheetRulesAppliedCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLStyleSheetRulesAppliedCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def item(this : IHTMLStyleSheetRulesAppliedCollection*, index : Int32, pphtmlstylesheetrule : IHTMLStyleSheetRule*) : HRESULT
    @lpVtbl.value.item.call(this, index, pphtmlstylesheetrule)
  end
  def get_length(this : IHTMLStyleSheetRulesAppliedCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def property_applied_by(this : IHTMLStyleSheetRulesAppliedCollection*, name : UInt8*, pprule : IHTMLStyleSheetRule*) : HRESULT
    @lpVtbl.value.property_applied_by.call(this, name, pprule)
  end
  def property_applied_trace(this : IHTMLStyleSheetRulesAppliedCollection*, name : UInt8*, index : Int32, pprule : IHTMLStyleSheetRule*) : HRESULT
    @lpVtbl.value.property_applied_trace.call(this, name, index, pprule)
  end
  def property_applied_trace_length(this : IHTMLStyleSheetRulesAppliedCollection*, name : UInt8*, plength : Int32*) : HRESULT
    @lpVtbl.value.property_applied_trace_length.call(this, name, plength)
  end
end
struct LibWin32::IRulesApplied
  def query_interface(this : IRulesApplied*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRulesApplied*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRulesApplied*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IRulesApplied*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IRulesApplied*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IRulesApplied*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IRulesApplied*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_element(this : IRulesApplied*, p : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, p)
  end
  def get_inline_styles(this : IRulesApplied*, p : IHTMLStyle*) : HRESULT
    @lpVtbl.value.get_inline_styles.call(this, p)
  end
  def get_applied_rules(this : IRulesApplied*, p : IHTMLStyleSheetRulesAppliedCollection*) : HRESULT
    @lpVtbl.value.get_applied_rules.call(this, p)
  end
  def property_is_inline(this : IRulesApplied*, name : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.property_is_inline.call(this, name, p)
  end
  def property_is_inheritable(this : IRulesApplied*, name : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.property_is_inheritable.call(this, name, p)
  end
  def has_inheritable_property(this : IRulesApplied*, p : Int16*) : HRESULT
    @lpVtbl.value.has_inheritable_property.call(this, p)
  end
end
struct LibWin32::DispHTMLStyleSheetRulesAppliedCollection
  def query_interface(this : DispHTMLStyleSheetRulesAppliedCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLStyleSheetRulesAppliedCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLStyleSheetRulesAppliedCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLStyleSheetRulesAppliedCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLStyleSheetRulesAppliedCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLStyleSheetRulesAppliedCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLStyleSheetRulesAppliedCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispRulesApplied
  def query_interface(this : DispRulesApplied*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispRulesApplied*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispRulesApplied*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispRulesApplied*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispRulesApplied*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispRulesApplied*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispRulesApplied*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispRulesAppliedCollection
  def query_interface(this : DispRulesAppliedCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispRulesAppliedCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispRulesAppliedCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispRulesAppliedCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispRulesAppliedCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispRulesAppliedCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispRulesAppliedCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLW3CComputedStyle
  def query_interface(this : DispHTMLW3CComputedStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLW3CComputedStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLW3CComputedStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLW3CComputedStyle*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLW3CComputedStyle*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLW3CComputedStyle*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLW3CComputedStyle*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGAnimatedPoints
  def query_interface(this : ISVGAnimatedPoints*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedPoints*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedPoints*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedPoints*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedPoints*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedPoints*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedPoints*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_points(this : ISVGAnimatedPoints*, v : ISVGPointList) : HRESULT
    @lpVtbl.value.putref_points.call(this, v)
  end
  def get_points(this : ISVGAnimatedPoints*, p : ISVGPointList*) : HRESULT
    @lpVtbl.value.get_points.call(this, p)
  end
  def putref_animated_points(this : ISVGAnimatedPoints*, v : ISVGPointList) : HRESULT
    @lpVtbl.value.putref_animated_points.call(this, v)
  end
  def get_animated_points(this : ISVGAnimatedPoints*, p : ISVGPointList*) : HRESULT
    @lpVtbl.value.get_animated_points.call(this, p)
  end
end
struct LibWin32::ISVGCircleElement
  def query_interface(this : ISVGCircleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGCircleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGCircleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGCircleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGCircleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGCircleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGCircleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_cx(this : ISVGCircleElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cx.call(this, v)
  end
  def get_cx(this : ISVGCircleElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cx.call(this, p)
  end
  def putref_cy(this : ISVGCircleElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cy.call(this, v)
  end
  def get_cy(this : ISVGCircleElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cy.call(this, p)
  end
  def putref_r(this : ISVGCircleElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_r.call(this, v)
  end
  def get_r(this : ISVGCircleElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_r.call(this, p)
  end
end
struct LibWin32::ISVGEllipseElement
  def query_interface(this : ISVGEllipseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGEllipseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGEllipseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGEllipseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGEllipseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGEllipseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGEllipseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_cx(this : ISVGEllipseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cx.call(this, v)
  end
  def get_cx(this : ISVGEllipseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cx.call(this, p)
  end
  def putref_cy(this : ISVGEllipseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cy.call(this, v)
  end
  def get_cy(this : ISVGEllipseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cy.call(this, p)
  end
  def putref_rx(this : ISVGEllipseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_rx.call(this, v)
  end
  def get_rx(this : ISVGEllipseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_rx.call(this, p)
  end
  def putref_ry(this : ISVGEllipseElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_ry.call(this, v)
  end
  def get_ry(this : ISVGEllipseElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_ry.call(this, p)
  end
end
struct LibWin32::ISVGLineElement
  def query_interface(this : ISVGLineElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLineElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLineElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLineElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLineElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLineElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLineElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x1(this : ISVGLineElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x1.call(this, v)
  end
  def get_x1(this : ISVGLineElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def putref_y1(this : ISVGLineElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y1.call(this, v)
  end
  def get_y1(this : ISVGLineElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
  def putref_x2(this : ISVGLineElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x2.call(this, v)
  end
  def get_x2(this : ISVGLineElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def putref_y2(this : ISVGLineElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y2.call(this, v)
  end
  def get_y2(this : ISVGLineElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::ISVGRectElement
  def query_interface(this : ISVGRectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGRectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGRectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGRectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGRectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGRectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGRectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def putref_rx(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_rx.call(this, v)
  end
  def get_rx(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_rx.call(this, p)
  end
  def putref_ry(this : ISVGRectElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_ry.call(this, v)
  end
  def get_ry(this : ISVGRectElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_ry.call(this, p)
  end
end
struct LibWin32::ISVGPolygonElement
  def query_interface(this : ISVGPolygonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPolygonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPolygonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPolygonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPolygonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPolygonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPolygonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPolylineElement
  def query_interface(this : ISVGPolylineElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPolylineElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPolylineElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPolylineElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPolylineElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPolylineElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPolylineElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGCircleElement
  def query_interface(this : DispSVGCircleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGCircleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGCircleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGCircleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGCircleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGCircleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGCircleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGEllipseElement
  def query_interface(this : DispSVGEllipseElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGEllipseElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGEllipseElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGEllipseElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGEllipseElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGEllipseElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGEllipseElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGLineElement
  def query_interface(this : DispSVGLineElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGLineElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGLineElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGLineElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGLineElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGLineElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGLineElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGRectElement
  def query_interface(this : DispSVGRectElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGRectElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGRectElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGRectElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGRectElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGRectElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGRectElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPolygonElement
  def query_interface(this : DispSVGPolygonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPolygonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPolygonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPolygonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPolygonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPolygonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPolygonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGPolylineElement
  def query_interface(this : DispSVGPolylineElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPolylineElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPolylineElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPolylineElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPolylineElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPolylineElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPolylineElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGGElement
  def query_interface(this : ISVGGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGGElement
  def query_interface(this : DispSVGGElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGGElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGGElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGGElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGGElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGGElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGGElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGSymbolElement
  def query_interface(this : ISVGSymbolElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGSymbolElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGSymbolElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGSymbolElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGSymbolElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGSymbolElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGSymbolElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGSymbolElement
  def query_interface(this : DispSVGSymbolElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGSymbolElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGSymbolElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGSymbolElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGSymbolElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGSymbolElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGSymbolElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGDefsElement
  def query_interface(this : ISVGDefsElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGDefsElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGDefsElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGDefsElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGDefsElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGDefsElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGDefsElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGDefsElement
  def query_interface(this : DispSVGDefsElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGDefsElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGDefsElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGDefsElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGDefsElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGDefsElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGDefsElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGAnimatedPathData
  def query_interface(this : ISVGAnimatedPathData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAnimatedPathData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAnimatedPathData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAnimatedPathData*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAnimatedPathData*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAnimatedPathData*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAnimatedPathData*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_path_seg_list(this : ISVGAnimatedPathData*, v : ISVGPathSegList) : HRESULT
    @lpVtbl.value.putref_path_seg_list.call(this, v)
  end
  def get_path_seg_list(this : ISVGAnimatedPathData*, p : ISVGPathSegList*) : HRESULT
    @lpVtbl.value.get_path_seg_list.call(this, p)
  end
  def putref_normalized_path_seg_list(this : ISVGAnimatedPathData*, v : ISVGPathSegList) : HRESULT
    @lpVtbl.value.putref_normalized_path_seg_list.call(this, v)
  end
  def get_normalized_path_seg_list(this : ISVGAnimatedPathData*, p : ISVGPathSegList*) : HRESULT
    @lpVtbl.value.get_normalized_path_seg_list.call(this, p)
  end
  def putref_animated_path_seg_list(this : ISVGAnimatedPathData*, v : ISVGPathSegList) : HRESULT
    @lpVtbl.value.putref_animated_path_seg_list.call(this, v)
  end
  def get_animated_path_seg_list(this : ISVGAnimatedPathData*, p : ISVGPathSegList*) : HRESULT
    @lpVtbl.value.get_animated_path_seg_list.call(this, p)
  end
  def putref_animated_normalized_path_seg_list(this : ISVGAnimatedPathData*, v : ISVGPathSegList) : HRESULT
    @lpVtbl.value.putref_animated_normalized_path_seg_list.call(this, v)
  end
  def get_animated_normalized_path_seg_list(this : ISVGAnimatedPathData*, p : ISVGPathSegList*) : HRESULT
    @lpVtbl.value.get_animated_normalized_path_seg_list.call(this, p)
  end
end
struct LibWin32::ISVGPathElement
  def query_interface(this : ISVGPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_path_length(this : ISVGPathElement*, v : ISVGAnimatedNumber) : HRESULT
    @lpVtbl.value.putref_path_length.call(this, v)
  end
  def get_path_length(this : ISVGPathElement*, p : ISVGAnimatedNumber*) : HRESULT
    @lpVtbl.value.get_path_length.call(this, p)
  end
  def get_total_length(this : ISVGPathElement*, pfltresult : Float32*) : HRESULT
    @lpVtbl.value.get_total_length.call(this, pfltresult)
  end
  def get_point_at_length(this : ISVGPathElement*, fltdistance : Float32, pppointresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_point_at_length.call(this, fltdistance, pppointresult)
  end
  def get_path_seg_at_length(this : ISVGPathElement*, fltdistance : Float32, plresult : Int32*) : HRESULT
    @lpVtbl.value.get_path_seg_at_length.call(this, fltdistance, plresult)
  end
  def create_svg_path_seg_close_path(this : ISVGPathElement*, ppresult : ISVGPathSegClosePath*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_close_path.call(this, ppresult)
  end
  def create_svg_path_seg_moveto_abs(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegMovetoAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_moveto_abs.call(this, x, y, ppresult)
  end
  def create_svg_path_seg_moveto_rel(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegMovetoRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_moveto_rel.call(this, x, y, ppresult)
  end
  def create_svg_path_seg_lineto_abs(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegLinetoAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_abs.call(this, x, y, ppresult)
  end
  def create_svg_path_seg_lineto_rel(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegLinetoRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_rel.call(this, x, y, ppresult)
  end
  def create_svg_path_seg_curveto_cubic_abs(this : ISVGPathElement*, x : Float32, y : Float32, x1 : Float32, y1 : Float32, x2 : Float32, y2 : Float32, ppresult : ISVGPathSegCurvetoCubicAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_cubic_abs.call(this, x, y, x1, y1, x2, y2, ppresult)
  end
  def create_svg_path_seg_curveto_cubic_rel(this : ISVGPathElement*, x : Float32, y : Float32, x1 : Float32, y1 : Float32, x2 : Float32, y2 : Float32, ppresult : ISVGPathSegCurvetoCubicRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_cubic_rel.call(this, x, y, x1, y1, x2, y2, ppresult)
  end
  def create_svg_path_seg_curveto_quadratic_abs(this : ISVGPathElement*, x : Float32, y : Float32, x1 : Float32, y1 : Float32, ppresult : ISVGPathSegCurvetoQuadraticAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_quadratic_abs.call(this, x, y, x1, y1, ppresult)
  end
  def create_svg_path_seg_curveto_quadratic_rel(this : ISVGPathElement*, x : Float32, y : Float32, x1 : Float32, y1 : Float32, ppresult : ISVGPathSegCurvetoQuadraticRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_quadratic_rel.call(this, x, y, x1, y1, ppresult)
  end
  def create_svg_path_seg_arc_abs(this : ISVGPathElement*, x : Float32, y : Float32, r1 : Float32, r2 : Float32, angle : Float32, largearcflag : Int16, sweepflag : Int16, ppresult : ISVGPathSegArcAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_arc_abs.call(this, x, y, r1, r2, angle, largearcflag, sweepflag, ppresult)
  end
  def create_svg_path_seg_arc_rel(this : ISVGPathElement*, x : Float32, y : Float32, r1 : Float32, r2 : Float32, angle : Float32, largearcflag : Int16, sweepflag : Int16, ppresult : ISVGPathSegArcRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_arc_rel.call(this, x, y, r1, r2, angle, largearcflag, sweepflag, ppresult)
  end
  def create_svg_path_seg_lineto_horizontal_abs(this : ISVGPathElement*, x : Float32, ppresult : ISVGPathSegLinetoHorizontalAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_horizontal_abs.call(this, x, ppresult)
  end
  def create_svg_path_seg_lineto_horizontal_rel(this : ISVGPathElement*, x : Float32, ppresult : ISVGPathSegLinetoHorizontalRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_horizontal_rel.call(this, x, ppresult)
  end
  def create_svg_path_seg_lineto_vertical_abs(this : ISVGPathElement*, y : Float32, ppresult : ISVGPathSegLinetoVerticalAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_vertical_abs.call(this, y, ppresult)
  end
  def create_svg_path_seg_lineto_vertical_rel(this : ISVGPathElement*, y : Float32, ppresult : ISVGPathSegLinetoVerticalRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_lineto_vertical_rel.call(this, y, ppresult)
  end
  def create_svg_path_seg_curveto_cubic_smooth_abs(this : ISVGPathElement*, x : Float32, y : Float32, x2 : Float32, y2 : Float32, ppresult : ISVGPathSegCurvetoCubicSmoothAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_cubic_smooth_abs.call(this, x, y, x2, y2, ppresult)
  end
  def create_svg_path_seg_curveto_cubic_smooth_rel(this : ISVGPathElement*, x : Float32, y : Float32, x2 : Float32, y2 : Float32, ppresult : ISVGPathSegCurvetoCubicSmoothRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_cubic_smooth_rel.call(this, x, y, x2, y2, ppresult)
  end
  def create_svg_path_seg_curveto_quadratic_smooth_abs(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegCurvetoQuadraticSmoothAbs*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_quadratic_smooth_abs.call(this, x, y, ppresult)
  end
  def create_svg_path_seg_curveto_quadratic_smooth_rel(this : ISVGPathElement*, x : Float32, y : Float32, ppresult : ISVGPathSegCurvetoQuadraticSmoothRel*) : HRESULT
    @lpVtbl.value.create_svg_path_seg_curveto_quadratic_smooth_rel.call(this, x, y, ppresult)
  end
end
struct LibWin32::DispSVGPathElement
  def query_interface(this : DispSVGPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGPreserveAspectRatio
  def query_interface(this : ISVGPreserveAspectRatio*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGPreserveAspectRatio*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGPreserveAspectRatio*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGPreserveAspectRatio*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGPreserveAspectRatio*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGPreserveAspectRatio*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGPreserveAspectRatio*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_align(this : ISVGPreserveAspectRatio*, v : Int16) : HRESULT
    @lpVtbl.value.put_align.call(this, v)
  end
  def get_align(this : ISVGPreserveAspectRatio*, p : Int16*) : HRESULT
    @lpVtbl.value.get_align.call(this, p)
  end
  def put_meet_or_slice(this : ISVGPreserveAspectRatio*, v : Int16) : HRESULT
    @lpVtbl.value.put_meet_or_slice.call(this, v)
  end
  def get_meet_or_slice(this : ISVGPreserveAspectRatio*, p : Int16*) : HRESULT
    @lpVtbl.value.get_meet_or_slice.call(this, p)
  end
end
struct LibWin32::ISVGTextElement
  def query_interface(this : ISVGTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGTextElement
  def query_interface(this : DispSVGTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGImageElement
  def query_interface(this : ISVGImageElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGImageElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGImageElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGImageElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGImageElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGImageElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGImageElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x(this : ISVGImageElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGImageElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGImageElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGImageElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGImageElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGImageElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGImageElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGImageElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::DispSVGImageElement
  def query_interface(this : DispSVGImageElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGImageElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGImageElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGImageElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGImageElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGImageElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGImageElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGStopElement
  def query_interface(this : ISVGStopElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGStopElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGStopElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGStopElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGStopElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGStopElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGStopElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_offset(this : ISVGStopElement*, v : ISVGAnimatedNumber) : HRESULT
    @lpVtbl.value.putref_offset.call(this, v)
  end
  def get_offset(this : ISVGStopElement*, p : ISVGAnimatedNumber*) : HRESULT
    @lpVtbl.value.get_offset.call(this, p)
  end
end
struct LibWin32::DispSVGStopElement
  def query_interface(this : DispSVGStopElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGStopElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGStopElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGStopElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGStopElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGStopElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGStopElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGGradientElement
  def query_interface(this : ISVGGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_gradient_units(this : ISVGGradientElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_gradient_units.call(this, v)
  end
  def get_gradient_units(this : ISVGGradientElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_gradient_units.call(this, p)
  end
  def putref_gradient_transform(this : ISVGGradientElement*, v : ISVGAnimatedTransformList) : HRESULT
    @lpVtbl.value.putref_gradient_transform.call(this, v)
  end
  def get_gradient_transform(this : ISVGGradientElement*, p : ISVGAnimatedTransformList*) : HRESULT
    @lpVtbl.value.get_gradient_transform.call(this, p)
  end
  def putref_spread_method(this : ISVGGradientElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_spread_method.call(this, v)
  end
  def get_spread_method(this : ISVGGradientElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_spread_method.call(this, p)
  end
end
struct LibWin32::DispSVGGradientElement
  def query_interface(this : DispSVGGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGLinearGradientElement
  def query_interface(this : ISVGLinearGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGLinearGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGLinearGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGLinearGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGLinearGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGLinearGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGLinearGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x1(this : ISVGLinearGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x1.call(this, v)
  end
  def get_x1(this : ISVGLinearGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x1.call(this, p)
  end
  def putref_y1(this : ISVGLinearGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y1.call(this, v)
  end
  def get_y1(this : ISVGLinearGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y1.call(this, p)
  end
  def putref_x2(this : ISVGLinearGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x2.call(this, v)
  end
  def get_x2(this : ISVGLinearGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x2.call(this, p)
  end
  def putref_y2(this : ISVGLinearGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y2.call(this, v)
  end
  def get_y2(this : ISVGLinearGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y2.call(this, p)
  end
end
struct LibWin32::DispSVGLinearGradientElement
  def query_interface(this : DispSVGLinearGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGLinearGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGLinearGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGLinearGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGLinearGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGLinearGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGLinearGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGRadialGradientElement
  def query_interface(this : ISVGRadialGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGRadialGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGRadialGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGRadialGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGRadialGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGRadialGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGRadialGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_cx(this : ISVGRadialGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cx.call(this, v)
  end
  def get_cx(this : ISVGRadialGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cx.call(this, p)
  end
  def putref_cy(this : ISVGRadialGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_cy.call(this, v)
  end
  def get_cy(this : ISVGRadialGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_cy.call(this, p)
  end
  def putref_r(this : ISVGRadialGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_r.call(this, v)
  end
  def get_r(this : ISVGRadialGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_r.call(this, p)
  end
  def putref_fx(this : ISVGRadialGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_fx.call(this, v)
  end
  def get_fx(this : ISVGRadialGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_fx.call(this, p)
  end
  def putref_fy(this : ISVGRadialGradientElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_fy.call(this, v)
  end
  def get_fy(this : ISVGRadialGradientElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_fy.call(this, p)
  end
end
struct LibWin32::DispSVGRadialGradientElement
  def query_interface(this : DispSVGRadialGradientElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGRadialGradientElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGRadialGradientElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGRadialGradientElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGRadialGradientElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGRadialGradientElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGRadialGradientElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGMaskElement
  def query_interface(this : ISVGMaskElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGMaskElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGMaskElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGMaskElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGMaskElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGMaskElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGMaskElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_mask_units(this : ISVGMaskElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_mask_units.call(this, v)
  end
  def get_mask_units(this : ISVGMaskElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_mask_units.call(this, p)
  end
  def putref_mask_content_units(this : ISVGMaskElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_mask_content_units.call(this, v)
  end
  def get_mask_content_units(this : ISVGMaskElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_mask_content_units.call(this, p)
  end
  def putref_x(this : ISVGMaskElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGMaskElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGMaskElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGMaskElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_width(this : ISVGMaskElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_width.call(this, v)
  end
  def get_width(this : ISVGMaskElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def putref_height(this : ISVGMaskElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_height.call(this, v)
  end
  def get_height(this : ISVGMaskElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
end
struct LibWin32::DispSVGMaskElement
  def query_interface(this : DispSVGMaskElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGMaskElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGMaskElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGMaskElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGMaskElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGMaskElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGMaskElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGMarkerElement
  def query_interface(this : ISVGMarkerElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGMarkerElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGMarkerElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGMarkerElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGMarkerElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGMarkerElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGMarkerElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_ref_x(this : ISVGMarkerElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_ref_x.call(this, v)
  end
  def get_ref_x(this : ISVGMarkerElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_ref_x.call(this, p)
  end
  def putref_ref_y(this : ISVGMarkerElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_ref_y.call(this, v)
  end
  def get_ref_y(this : ISVGMarkerElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_ref_y.call(this, p)
  end
  def putref_marker_units(this : ISVGMarkerElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_marker_units.call(this, v)
  end
  def get_marker_units(this : ISVGMarkerElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_marker_units.call(this, p)
  end
  def putref_marker_width(this : ISVGMarkerElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_marker_width.call(this, v)
  end
  def get_marker_width(this : ISVGMarkerElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_marker_width.call(this, p)
  end
  def putref_marker_height(this : ISVGMarkerElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_marker_height.call(this, v)
  end
  def get_marker_height(this : ISVGMarkerElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_marker_height.call(this, p)
  end
  def putref_orient_type(this : ISVGMarkerElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_orient_type.call(this, v)
  end
  def get_orient_type(this : ISVGMarkerElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_orient_type.call(this, p)
  end
  def putref_orient_angle(this : ISVGMarkerElement*, v : ISVGAnimatedAngle) : HRESULT
    @lpVtbl.value.putref_orient_angle.call(this, v)
  end
  def get_orient_angle(this : ISVGMarkerElement*, p : ISVGAnimatedAngle*) : HRESULT
    @lpVtbl.value.get_orient_angle.call(this, p)
  end
  def set_orient_to_auto(this : ISVGMarkerElement*) : HRESULT
    @lpVtbl.value.set_orient_to_auto.call(this)
  end
  def set_orient_to_angle(this : ISVGMarkerElement*, psvgangle : ISVGAngle) : HRESULT
    @lpVtbl.value.set_orient_to_angle.call(this, psvgangle)
  end
end
struct LibWin32::DispSVGMarkerElement
  def query_interface(this : DispSVGMarkerElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGMarkerElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGMarkerElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGMarkerElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGMarkerElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGMarkerElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGMarkerElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGZoomEvent
  def query_interface(this : ISVGZoomEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGZoomEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGZoomEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGZoomEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGZoomEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGZoomEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGZoomEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_zoom_rect_screen(this : ISVGZoomEvent*, p : ISVGRect*) : HRESULT
    @lpVtbl.value.get_zoom_rect_screen.call(this, p)
  end
  def get_previous_scale(this : ISVGZoomEvent*, p : Float32*) : HRESULT
    @lpVtbl.value.get_previous_scale.call(this, p)
  end
  def get_previous_translate(this : ISVGZoomEvent*, p : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_previous_translate.call(this, p)
  end
  def get_new_scale(this : ISVGZoomEvent*, p : Float32*) : HRESULT
    @lpVtbl.value.get_new_scale.call(this, p)
  end
  def get_new_translate(this : ISVGZoomEvent*, p : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_new_translate.call(this, p)
  end
end
struct LibWin32::DispSVGZoomEvent
  def query_interface(this : DispSVGZoomEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGZoomEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGZoomEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGZoomEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGZoomEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGZoomEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGZoomEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGAElement
  def query_interface(this : ISVGAElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGAElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGAElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGAElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGAElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGAElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGAElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_target(this : ISVGAElement*, v : ISVGAnimatedString) : HRESULT
    @lpVtbl.value.putref_target.call(this, v)
  end
  def get_target(this : ISVGAElement*, p : ISVGAnimatedString*) : HRESULT
    @lpVtbl.value.get_target.call(this, p)
  end
end
struct LibWin32::DispSVGAElement
  def query_interface(this : DispSVGAElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGAElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGAElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGAElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGAElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGAElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGAElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGViewElement
  def query_interface(this : ISVGViewElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGViewElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGViewElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGViewElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGViewElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGViewElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGViewElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_view_target(this : ISVGViewElement*, v : ISVGStringList) : HRESULT
    @lpVtbl.value.putref_view_target.call(this, v)
  end
  def get_view_target(this : ISVGViewElement*, p : ISVGStringList*) : HRESULT
    @lpVtbl.value.get_view_target.call(this, p)
  end
end
struct LibWin32::DispSVGViewElement
  def query_interface(this : DispSVGViewElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGViewElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGViewElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGViewElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGViewElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGViewElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGViewElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLMediaError
  def query_interface(this : IHTMLMediaError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMediaError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMediaError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMediaError*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMediaError*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMediaError*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMediaError*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_code(this : IHTMLMediaError*, p : Int16*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
end
struct LibWin32::IHTMLTimeRanges
  def query_interface(this : IHTMLTimeRanges*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTimeRanges*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTimeRanges*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTimeRanges*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTimeRanges*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTimeRanges*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTimeRanges*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLTimeRanges*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def start(this : IHTMLTimeRanges*, index : Int32, starttime : Float32*) : HRESULT
    @lpVtbl.value.start.call(this, index, starttime)
  end
  def end_(this : IHTMLTimeRanges*, index : Int32, endtime : Float32*) : HRESULT
    @lpVtbl.value.end_.call(this, index, endtime)
  end
end
struct LibWin32::IHTMLTimeRanges2
  def query_interface(this : IHTMLTimeRanges2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLTimeRanges2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLTimeRanges2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLTimeRanges2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLTimeRanges2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLTimeRanges2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLTimeRanges2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_double(this : IHTMLTimeRanges2*, index : Int32, starttime : Float64*) : HRESULT
    @lpVtbl.value.start_double.call(this, index, starttime)
  end
  def end_double(this : IHTMLTimeRanges2*, index : Int32, endtime : Float64*) : HRESULT
    @lpVtbl.value.end_double.call(this, index, endtime)
  end
end
struct LibWin32::IHTMLMediaElement
  def query_interface(this : IHTMLMediaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMediaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMediaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMediaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMediaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMediaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMediaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_error(this : IHTMLMediaElement*, p : IHTMLMediaError*) : HRESULT
    @lpVtbl.value.get_error.call(this, p)
  end
  def put_src(this : IHTMLMediaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLMediaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def get_current_src(this : IHTMLMediaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_current_src.call(this, p)
  end
  def get_network_state(this : IHTMLMediaElement*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_network_state.call(this, p)
  end
  def put_preload(this : IHTMLMediaElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_preload.call(this, v)
  end
  def get_preload(this : IHTMLMediaElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_preload.call(this, p)
  end
  def get_buffered(this : IHTMLMediaElement*, p : IHTMLTimeRanges*) : HRESULT
    @lpVtbl.value.get_buffered.call(this, p)
  end
  def load(this : IHTMLMediaElement*) : HRESULT
    @lpVtbl.value.load.call(this)
  end
  def can_play_type(this : IHTMLMediaElement*, type : UInt8*, canplay : UInt8**) : HRESULT
    @lpVtbl.value.can_play_type.call(this, type, canplay)
  end
  def get_seeking(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_seeking.call(this, p)
  end
  def put_current_time(this : IHTMLMediaElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_current_time.call(this, v)
  end
  def get_current_time(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_current_time.call(this, p)
  end
  def get_initial_time(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_initial_time.call(this, p)
  end
  def get_duration(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_duration.call(this, p)
  end
  def get_paused(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_paused.call(this, p)
  end
  def put_default_playback_rate(this : IHTMLMediaElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_default_playback_rate.call(this, v)
  end
  def get_default_playback_rate(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_default_playback_rate.call(this, p)
  end
  def put_playback_rate(this : IHTMLMediaElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_playback_rate.call(this, v)
  end
  def get_playback_rate(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_playback_rate.call(this, p)
  end
  def get_played(this : IHTMLMediaElement*, p : IHTMLTimeRanges*) : HRESULT
    @lpVtbl.value.get_played.call(this, p)
  end
  def get_seekable(this : IHTMLMediaElement*, p : IHTMLTimeRanges*) : HRESULT
    @lpVtbl.value.get_seekable.call(this, p)
  end
  def get_ended(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ended.call(this, p)
  end
  def put_autoplay(this : IHTMLMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_autoplay.call(this, v)
  end
  def get_autoplay(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_autoplay.call(this, p)
  end
  def put_loop(this : IHTMLMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_loop.call(this, v)
  end
  def get_loop(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_loop.call(this, p)
  end
  def play(this : IHTMLMediaElement*) : HRESULT
    @lpVtbl.value.play.call(this)
  end
  def pause(this : IHTMLMediaElement*) : HRESULT
    @lpVtbl.value.pause.call(this)
  end
  def put_controls(this : IHTMLMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_controls.call(this, v)
  end
  def get_controls(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_controls.call(this, p)
  end
  def put_volume(this : IHTMLMediaElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_volume.call(this, v)
  end
  def get_volume(this : IHTMLMediaElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_volume.call(this, p)
  end
  def put_muted(this : IHTMLMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_muted.call(this, v)
  end
  def get_muted(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_muted.call(this, p)
  end
  def put_autobuffer(this : IHTMLMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_autobuffer.call(this, v)
  end
  def get_autobuffer(this : IHTMLMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_autobuffer.call(this, p)
  end
end
struct LibWin32::IHTMLMediaElement2
  def query_interface(this : IHTMLMediaElement2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMediaElement2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMediaElement2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMediaElement2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMediaElement2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMediaElement2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMediaElement2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_current_time_double(this : IHTMLMediaElement2*, v : Float64) : HRESULT
    @lpVtbl.value.put_current_time_double.call(this, v)
  end
  def get_current_time_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_current_time_double.call(this, p)
  end
  def get_initial_time_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_initial_time_double.call(this, p)
  end
  def get_duration_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_duration_double.call(this, p)
  end
  def put_default_playback_rate_double(this : IHTMLMediaElement2*, v : Float64) : HRESULT
    @lpVtbl.value.put_default_playback_rate_double.call(this, v)
  end
  def get_default_playback_rate_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_default_playback_rate_double.call(this, p)
  end
  def put_playback_rate_double(this : IHTMLMediaElement2*, v : Float64) : HRESULT
    @lpVtbl.value.put_playback_rate_double.call(this, v)
  end
  def get_playback_rate_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_playback_rate_double.call(this, p)
  end
  def put_volume_double(this : IHTMLMediaElement2*, v : Float64) : HRESULT
    @lpVtbl.value.put_volume_double.call(this, v)
  end
  def get_volume_double(this : IHTMLMediaElement2*, p : Float64*) : HRESULT
    @lpVtbl.value.get_volume_double.call(this, p)
  end
end
struct LibWin32::IHTMLMSMediaElement
  def query_interface(this : IHTMLMSMediaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLMSMediaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLMSMediaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLMSMediaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLMSMediaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLMSMediaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLMSMediaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_ms_play_to_disabled(this : IHTMLMSMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_ms_play_to_disabled.call(this, v)
  end
  def get_ms_play_to_disabled(this : IHTMLMSMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ms_play_to_disabled.call(this, p)
  end
  def put_ms_play_to_primary(this : IHTMLMSMediaElement*, v : Int16) : HRESULT
    @lpVtbl.value.put_ms_play_to_primary.call(this, v)
  end
  def get_ms_play_to_primary(this : IHTMLMSMediaElement*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ms_play_to_primary.call(this, p)
  end
end
struct LibWin32::IHTMLSourceElement
  def query_interface(this : IHTMLSourceElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLSourceElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLSourceElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLSourceElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLSourceElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLSourceElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLSourceElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_src(this : IHTMLSourceElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_src.call(this, v)
  end
  def get_src(this : IHTMLSourceElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_src.call(this, p)
  end
  def put_type(this : IHTMLSourceElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : IHTMLSourceElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_media(this : IHTMLSourceElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : IHTMLSourceElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
end
struct LibWin32::IHTMLAudioElement
  def query_interface(this : IHTMLAudioElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAudioElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAudioElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAudioElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAudioElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAudioElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAudioElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLVideoElement
  def query_interface(this : IHTMLVideoElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLVideoElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLVideoElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLVideoElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLVideoElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLVideoElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLVideoElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_width(this : IHTMLVideoElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_width.call(this, v)
  end
  def get_width(this : IHTMLVideoElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def put_height(this : IHTMLVideoElement*, v : Int32) : HRESULT
    @lpVtbl.value.put_height.call(this, v)
  end
  def get_height(this : IHTMLVideoElement*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_video_width(this : IHTMLVideoElement*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_video_width.call(this, p)
  end
  def get_video_height(this : IHTMLVideoElement*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_video_height.call(this, p)
  end
  def put_poster(this : IHTMLVideoElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_poster.call(this, v)
  end
  def get_poster(this : IHTMLVideoElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_poster.call(this, p)
  end
end
struct LibWin32::IHTMLAudioElementFactory
  def query_interface(this : IHTMLAudioElementFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAudioElementFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAudioElementFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAudioElementFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAudioElementFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAudioElementFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAudioElementFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IHTMLAudioElementFactory*, src : VARIANT, midl__ihtmlaudioelementfactory0000 : IHTMLAudioElement*) : HRESULT
    @lpVtbl.value.create.call(this, src, midl__ihtmlaudioelementfactory0000)
  end
end
struct LibWin32::DispHTMLMediaError
  def query_interface(this : DispHTMLMediaError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMediaError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMediaError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMediaError*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMediaError*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMediaError*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMediaError*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLTimeRanges
  def query_interface(this : DispHTMLTimeRanges*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLTimeRanges*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLTimeRanges*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLTimeRanges*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLTimeRanges*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLTimeRanges*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLTimeRanges*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLMediaElement
  def query_interface(this : DispHTMLMediaElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLMediaElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLMediaElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLMediaElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLMediaElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLMediaElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLMediaElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLSourceElement
  def query_interface(this : DispHTMLSourceElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLSourceElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLSourceElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLSourceElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLSourceElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLSourceElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLSourceElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLAudioElement
  def query_interface(this : DispHTMLAudioElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAudioElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAudioElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAudioElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAudioElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAudioElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAudioElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLVideoElement
  def query_interface(this : DispHTMLVideoElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLVideoElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLVideoElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLVideoElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLVideoElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLVideoElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLVideoElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGSwitchElement
  def query_interface(this : ISVGSwitchElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGSwitchElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGSwitchElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGSwitchElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGSwitchElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGSwitchElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGSwitchElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGSwitchElement
  def query_interface(this : DispSVGSwitchElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGSwitchElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGSwitchElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGSwitchElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGSwitchElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGSwitchElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGSwitchElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGDescElement
  def query_interface(this : ISVGDescElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGDescElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGDescElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGDescElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGDescElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGDescElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGDescElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGDescElement
  def query_interface(this : DispSVGDescElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGDescElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGDescElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGDescElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGDescElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGDescElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGDescElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTitleElement
  def query_interface(this : ISVGTitleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTitleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTitleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTitleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTitleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTitleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTitleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGTitleElement
  def query_interface(this : DispSVGTitleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTitleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTitleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTitleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTitleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTitleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTitleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGMetadataElement
  def query_interface(this : ISVGMetadataElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGMetadataElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGMetadataElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGMetadataElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGMetadataElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGMetadataElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGMetadataElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGMetadataElement
  def query_interface(this : DispSVGMetadataElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGMetadataElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGMetadataElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGMetadataElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGMetadataElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGMetadataElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGMetadataElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGElementInstanceList
  def query_interface(this : ISVGElementInstanceList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGElementInstanceList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGElementInstanceList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGElementInstanceList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGElementInstanceList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGElementInstanceList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGElementInstanceList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : ISVGElementInstanceList*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : ISVGElementInstanceList*, index : Int32, ppresult : ISVGElementInstance*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppresult)
  end
end
struct LibWin32::DispSVGElementInstance
  def query_interface(this : DispSVGElementInstance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGElementInstance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGElementInstance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGElementInstance*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGElementInstance*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGElementInstance*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGElementInstance*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGElementInstanceList
  def query_interface(this : DispSVGElementInstanceList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGElementInstanceList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGElementInstanceList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGElementInstanceList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGElementInstanceList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGElementInstanceList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGElementInstanceList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMException
  def query_interface(this : IDOMException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_code(this : IDOMException*, v : Int32) : HRESULT
    @lpVtbl.value.put_code.call(this, v)
  end
  def get_code(this : IDOMException*, p : Int32*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_message(this : IDOMException*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_message.call(this, p)
  end
end
struct LibWin32::DispDOMException
  def query_interface(this : DispDOMException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IRangeException
  def query_interface(this : IRangeException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRangeException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRangeException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IRangeException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IRangeException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IRangeException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IRangeException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_code(this : IRangeException*, v : Int32) : HRESULT
    @lpVtbl.value.put_code.call(this, v)
  end
  def get_code(this : IRangeException*, p : Int32*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_message(this : IRangeException*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_message.call(this, p)
  end
end
struct LibWin32::DispRangeException
  def query_interface(this : DispRangeException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispRangeException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispRangeException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispRangeException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispRangeException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispRangeException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispRangeException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGException
  def query_interface(this : ISVGException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_code(this : ISVGException*, v : Int32) : HRESULT
    @lpVtbl.value.put_code.call(this, v)
  end
  def get_code(this : ISVGException*, p : Int32*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_message(this : ISVGException*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_message.call(this, p)
  end
end
struct LibWin32::DispSVGException
  def query_interface(this : DispSVGException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IEventException
  def query_interface(this : IEventException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEventException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEventException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IEventException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IEventException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IEventException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IEventException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_code(this : IEventException*, v : Int32) : HRESULT
    @lpVtbl.value.put_code.call(this, v)
  end
  def get_code(this : IEventException*, p : Int32*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_message(this : IEventException*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_message.call(this, p)
  end
end
struct LibWin32::DispEventException
  def query_interface(this : DispEventException*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispEventException*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispEventException*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispEventException*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispEventException*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispEventException*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispEventException*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGScriptElement
  def query_interface(this : ISVGScriptElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGScriptElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGScriptElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGScriptElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGScriptElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGScriptElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGScriptElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : ISVGScriptElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : ISVGScriptElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
end
struct LibWin32::DispSVGScriptElement
  def query_interface(this : DispSVGScriptElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGScriptElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGScriptElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGScriptElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGScriptElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGScriptElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGScriptElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGStyleElement
  def query_interface(this : ISVGStyleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGStyleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGStyleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGStyleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGStyleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGStyleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGStyleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_type(this : ISVGStyleElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_type.call(this, v)
  end
  def get_type(this : ISVGStyleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def put_media(this : ISVGStyleElement*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_media.call(this, v)
  end
  def get_media(this : ISVGStyleElement*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_media.call(this, p)
  end
end
struct LibWin32::DispSVGStyleElement
  def query_interface(this : DispSVGStyleElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGStyleElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGStyleElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGStyleElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGStyleElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGStyleElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGStyleElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTextContentElement
  def query_interface(this : ISVGTextContentElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTextContentElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTextContentElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTextContentElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTextContentElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTextContentElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTextContentElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_text_length(this : ISVGTextContentElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_text_length.call(this, v)
  end
  def get_text_length(this : ISVGTextContentElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_text_length.call(this, p)
  end
  def putref_length_adjust(this : ISVGTextContentElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_length_adjust.call(this, v)
  end
  def get_length_adjust(this : ISVGTextContentElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_length_adjust.call(this, p)
  end
  def get_number_of_chars(this : ISVGTextContentElement*, presult : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_chars.call(this, presult)
  end
  def get_computed_text_length(this : ISVGTextContentElement*, presult : Float32*) : HRESULT
    @lpVtbl.value.get_computed_text_length.call(this, presult)
  end
  def get_sub_string_length(this : ISVGTextContentElement*, charnum : Int32, nchars : Int32, presult : Float32*) : HRESULT
    @lpVtbl.value.get_sub_string_length.call(this, charnum, nchars, presult)
  end
  def get_start_position_of_char(this : ISVGTextContentElement*, charnum : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_start_position_of_char.call(this, charnum, ppresult)
  end
  def get_end_position_of_char(this : ISVGTextContentElement*, charnum : Int32, ppresult : ISVGPoint*) : HRESULT
    @lpVtbl.value.get_end_position_of_char.call(this, charnum, ppresult)
  end
  def get_extent_of_char(this : ISVGTextContentElement*, charnum : Int32, ppresult : ISVGRect*) : HRESULT
    @lpVtbl.value.get_extent_of_char.call(this, charnum, ppresult)
  end
  def get_rotation_of_char(this : ISVGTextContentElement*, charnum : Int32, presult : Float32*) : HRESULT
    @lpVtbl.value.get_rotation_of_char.call(this, charnum, presult)
  end
  def get_char_num_at_position(this : ISVGTextContentElement*, point : ISVGPoint, presult : Int32*) : HRESULT
    @lpVtbl.value.get_char_num_at_position.call(this, point, presult)
  end
  def select_sub_string(this : ISVGTextContentElement*, charnum : Int32, nchars : Int32) : HRESULT
    @lpVtbl.value.select_sub_string.call(this, charnum, nchars)
  end
end
struct LibWin32::DispSVGTextContentElement
  def query_interface(this : DispSVGTextContentElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTextContentElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTextContentElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTextContentElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTextContentElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTextContentElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTextContentElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTextPositioningElement
  def query_interface(this : ISVGTextPositioningElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTextPositioningElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTextPositioningElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTextPositioningElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTextPositioningElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTextPositioningElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTextPositioningElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_x(this : ISVGTextPositioningElement*, v : ISVGAnimatedLengthList) : HRESULT
    @lpVtbl.value.putref_x.call(this, v)
  end
  def get_x(this : ISVGTextPositioningElement*, p : ISVGAnimatedLengthList*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def putref_y(this : ISVGTextPositioningElement*, v : ISVGAnimatedLengthList) : HRESULT
    @lpVtbl.value.putref_y.call(this, v)
  end
  def get_y(this : ISVGTextPositioningElement*, p : ISVGAnimatedLengthList*) : HRESULT
    @lpVtbl.value.get_y.call(this, p)
  end
  def putref_dx(this : ISVGTextPositioningElement*, v : ISVGAnimatedLengthList) : HRESULT
    @lpVtbl.value.putref_dx.call(this, v)
  end
  def get_dx(this : ISVGTextPositioningElement*, p : ISVGAnimatedLengthList*) : HRESULT
    @lpVtbl.value.get_dx.call(this, p)
  end
  def putref_dy(this : ISVGTextPositioningElement*, v : ISVGAnimatedLengthList) : HRESULT
    @lpVtbl.value.putref_dy.call(this, v)
  end
  def get_dy(this : ISVGTextPositioningElement*, p : ISVGAnimatedLengthList*) : HRESULT
    @lpVtbl.value.get_dy.call(this, p)
  end
  def putref_rotate(this : ISVGTextPositioningElement*, v : ISVGAnimatedNumberList) : HRESULT
    @lpVtbl.value.putref_rotate.call(this, v)
  end
  def get_rotate(this : ISVGTextPositioningElement*, p : ISVGAnimatedNumberList*) : HRESULT
    @lpVtbl.value.get_rotate.call(this, p)
  end
end
struct LibWin32::DispSVGTextPositioningElement
  def query_interface(this : DispSVGTextPositioningElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTextPositioningElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTextPositioningElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTextPositioningElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTextPositioningElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTextPositioningElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTextPositioningElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispDOMDocumentType
  def query_interface(this : DispDOMDocumentType*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMDocumentType*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMDocumentType*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMDocumentType*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMDocumentType*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMDocumentType*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMDocumentType*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispNodeIterator
  def query_interface(this : DispNodeIterator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispNodeIterator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispNodeIterator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispNodeIterator*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispNodeIterator*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispNodeIterator*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispNodeIterator*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispTreeWalker
  def query_interface(this : DispTreeWalker*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispTreeWalker*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispTreeWalker*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispTreeWalker*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispTreeWalker*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispTreeWalker*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispTreeWalker*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispDOMProcessingInstruction
  def query_interface(this : DispDOMProcessingInstruction*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMProcessingInstruction*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMProcessingInstruction*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMProcessingInstruction*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMProcessingInstruction*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMProcessingInstruction*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMProcessingInstruction*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLPerformanceNavigation
  def query_interface(this : IHTMLPerformanceNavigation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPerformanceNavigation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPerformanceNavigation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPerformanceNavigation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPerformanceNavigation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPerformanceNavigation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPerformanceNavigation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_type(this : IHTMLPerformanceNavigation*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_type.call(this, p)
  end
  def get_redirect_count(this : IHTMLPerformanceNavigation*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_redirect_count.call(this, p)
  end
  def to_string(this : IHTMLPerformanceNavigation*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def to_json(this : IHTMLPerformanceNavigation*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.to_json.call(this, pvar)
  end
end
struct LibWin32::IHTMLPerformanceTiming
  def query_interface(this : IHTMLPerformanceTiming*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPerformanceTiming*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPerformanceTiming*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPerformanceTiming*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPerformanceTiming*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPerformanceTiming*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPerformanceTiming*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_navigation_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_navigation_start.call(this, p)
  end
  def get_unload_event_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_unload_event_start.call(this, p)
  end
  def get_unload_event_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_unload_event_end.call(this, p)
  end
  def get_redirect_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_redirect_start.call(this, p)
  end
  def get_redirect_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_redirect_end.call(this, p)
  end
  def get_fetch_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_fetch_start.call(this, p)
  end
  def get_domain_lookup_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_domain_lookup_start.call(this, p)
  end
  def get_domain_lookup_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_domain_lookup_end.call(this, p)
  end
  def get_connect_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_connect_start.call(this, p)
  end
  def get_connect_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_connect_end.call(this, p)
  end
  def get_request_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_request_start.call(this, p)
  end
  def get_response_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_response_start.call(this, p)
  end
  def get_response_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_response_end.call(this, p)
  end
  def get_dom_loading(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_dom_loading.call(this, p)
  end
  def get_dom_interactive(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_dom_interactive.call(this, p)
  end
  def get_dom_content_loaded_event_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_dom_content_loaded_event_start.call(this, p)
  end
  def get_dom_content_loaded_event_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_dom_content_loaded_event_end.call(this, p)
  end
  def get_dom_complete(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_dom_complete.call(this, p)
  end
  def get_load_event_start(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_load_event_start.call(this, p)
  end
  def get_load_event_end(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_load_event_end.call(this, p)
  end
  def get_ms_first_paint(this : IHTMLPerformanceTiming*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_ms_first_paint.call(this, p)
  end
  def to_string(this : IHTMLPerformanceTiming*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
  def to_json(this : IHTMLPerformanceTiming*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.to_json.call(this, pvar)
  end
end
struct LibWin32::DispHTMLPerformance
  def query_interface(this : DispHTMLPerformance*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLPerformance*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLPerformance*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLPerformance*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLPerformance*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLPerformance*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLPerformance*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLPerformanceNavigation
  def query_interface(this : DispHTMLPerformanceNavigation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLPerformanceNavigation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLPerformanceNavigation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLPerformanceNavigation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLPerformanceNavigation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLPerformanceNavigation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLPerformanceNavigation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLPerformanceTiming
  def query_interface(this : DispHTMLPerformanceTiming*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLPerformanceTiming*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLPerformanceTiming*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLPerformanceTiming*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLPerformanceTiming*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLPerformanceTiming*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLPerformanceTiming*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTSpanElement
  def query_interface(this : ISVGTSpanElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTSpanElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTSpanElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTSpanElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTSpanElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTSpanElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTSpanElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispSVGTSpanElement
  def query_interface(this : DispSVGTSpanElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTSpanElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTSpanElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTSpanElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTSpanElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTSpanElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTSpanElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ITemplatePrinter
  def query_interface(this : ITemplatePrinter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITemplatePrinter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITemplatePrinter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ITemplatePrinter*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ITemplatePrinter*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ITemplatePrinter*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ITemplatePrinter*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_doc(this : ITemplatePrinter*, bstrtitle : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.start_doc.call(this, bstrtitle, p)
  end
  def stop_doc(this : ITemplatePrinter*) : HRESULT
    @lpVtbl.value.stop_doc.call(this)
  end
  def print_blank_page(this : ITemplatePrinter*) : HRESULT
    @lpVtbl.value.print_blank_page.call(this)
  end
  def print_page(this : ITemplatePrinter*, pelemdisp : IDispatch) : HRESULT
    @lpVtbl.value.print_page.call(this, pelemdisp)
  end
  def ensure_print_dialog_defaults(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.ensure_print_dialog_defaults.call(this, p)
  end
  def show_print_dialog(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.show_print_dialog.call(this, p)
  end
  def show_page_setup_dialog(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.show_page_setup_dialog.call(this, p)
  end
  def print_non_native(this : ITemplatePrinter*, pmarkup : IUnknown, p : Int16*) : HRESULT
    @lpVtbl.value.print_non_native.call(this, pmarkup, p)
  end
  def print_non_native_frames(this : ITemplatePrinter*, pmarkup : IUnknown, factiveframe : Int16) : HRESULT
    @lpVtbl.value.print_non_native_frames.call(this, pmarkup, factiveframe)
  end
  def put_frameset_document(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_frameset_document.call(this, v)
  end
  def get_frameset_document(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frameset_document.call(this, p)
  end
  def put_frame_active(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_active.call(this, v)
  end
  def get_frame_active(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_active.call(this, p)
  end
  def put_frame_as_shown(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_as_shown.call(this, v)
  end
  def get_frame_as_shown(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_as_shown.call(this, p)
  end
  def put_selection(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_selection.call(this, v)
  end
  def get_selection(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
  def put_selected_pages(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_selected_pages.call(this, v)
  end
  def get_selected_pages(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selected_pages.call(this, p)
  end
  def put_current_page(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page.call(this, v)
  end
  def get_current_page(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page.call(this, p)
  end
  def put_current_page_avail(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page_avail.call(this, v)
  end
  def get_current_page_avail(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page_avail.call(this, p)
  end
  def put_collate(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_collate.call(this, v)
  end
  def get_collate(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_collate.call(this, p)
  end
  def get_duplex(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_duplex.call(this, p)
  end
  def put_copies(this : ITemplatePrinter*, v : UInt16) : HRESULT
    @lpVtbl.value.put_copies.call(this, v)
  end
  def get_copies(this : ITemplatePrinter*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_copies.call(this, p)
  end
  def put_page_from(this : ITemplatePrinter*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_from.call(this, v)
  end
  def get_page_from(this : ITemplatePrinter*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_from.call(this, p)
  end
  def put_page_to(this : ITemplatePrinter*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_to.call(this, v)
  end
  def get_page_to(this : ITemplatePrinter*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_to.call(this, p)
  end
  def put_table_of_links(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_table_of_links.call(this, v)
  end
  def get_table_of_links(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_table_of_links.call(this, p)
  end
  def put_all_linked_documents(this : ITemplatePrinter*, v : Int16) : HRESULT
    @lpVtbl.value.put_all_linked_documents.call(this, v)
  end
  def get_all_linked_documents(this : ITemplatePrinter*, p : Int16*) : HRESULT
    @lpVtbl.value.get_all_linked_documents.call(this, p)
  end
  def put_header(this : ITemplatePrinter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_header.call(this, v)
  end
  def get_header(this : ITemplatePrinter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_header.call(this, p)
  end
  def put_footer(this : ITemplatePrinter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_footer.call(this, v)
  end
  def get_footer(this : ITemplatePrinter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_footer.call(this, p)
  end
  def put_margin_left(this : ITemplatePrinter*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin_right(this : ITemplatePrinter*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_top(this : ITemplatePrinter*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_bottom(this : ITemplatePrinter*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def get_page_width(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_width.call(this, p)
  end
  def get_page_height(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_height.call(this, p)
  end
  def get_unprintable_left(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_left.call(this, p)
  end
  def get_unprintable_top(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_top.call(this, p)
  end
  def get_unprintable_right(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_right.call(this, p)
  end
  def get_unprintable_bottom(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_bottom.call(this, p)
  end
  def update_page_status(this : ITemplatePrinter*, p : Int32*) : HRESULT
    @lpVtbl.value.update_page_status.call(this, p)
  end
end
struct LibWin32::ITemplatePrinter2
  def query_interface(this : ITemplatePrinter2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITemplatePrinter2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITemplatePrinter2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ITemplatePrinter2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ITemplatePrinter2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ITemplatePrinter2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ITemplatePrinter2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_doc(this : ITemplatePrinter2*, bstrtitle : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.start_doc.call(this, bstrtitle, p)
  end
  def stop_doc(this : ITemplatePrinter2*) : HRESULT
    @lpVtbl.value.stop_doc.call(this)
  end
  def print_blank_page(this : ITemplatePrinter2*) : HRESULT
    @lpVtbl.value.print_blank_page.call(this)
  end
  def print_page(this : ITemplatePrinter2*, pelemdisp : IDispatch) : HRESULT
    @lpVtbl.value.print_page.call(this, pelemdisp)
  end
  def ensure_print_dialog_defaults(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.ensure_print_dialog_defaults.call(this, p)
  end
  def show_print_dialog(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.show_print_dialog.call(this, p)
  end
  def show_page_setup_dialog(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.show_page_setup_dialog.call(this, p)
  end
  def print_non_native(this : ITemplatePrinter2*, pmarkup : IUnknown, p : Int16*) : HRESULT
    @lpVtbl.value.print_non_native.call(this, pmarkup, p)
  end
  def print_non_native_frames(this : ITemplatePrinter2*, pmarkup : IUnknown, factiveframe : Int16) : HRESULT
    @lpVtbl.value.print_non_native_frames.call(this, pmarkup, factiveframe)
  end
  def put_frameset_document(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_frameset_document.call(this, v)
  end
  def get_frameset_document(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frameset_document.call(this, p)
  end
  def put_frame_active(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_active.call(this, v)
  end
  def get_frame_active(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_active.call(this, p)
  end
  def put_frame_as_shown(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_as_shown.call(this, v)
  end
  def get_frame_as_shown(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_as_shown.call(this, p)
  end
  def put_selection(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_selection.call(this, v)
  end
  def get_selection(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
  def put_selected_pages(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_selected_pages.call(this, v)
  end
  def get_selected_pages(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selected_pages.call(this, p)
  end
  def put_current_page(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page.call(this, v)
  end
  def get_current_page(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page.call(this, p)
  end
  def put_current_page_avail(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page_avail.call(this, v)
  end
  def get_current_page_avail(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page_avail.call(this, p)
  end
  def put_collate(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_collate.call(this, v)
  end
  def get_collate(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_collate.call(this, p)
  end
  def get_duplex(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_duplex.call(this, p)
  end
  def put_copies(this : ITemplatePrinter2*, v : UInt16) : HRESULT
    @lpVtbl.value.put_copies.call(this, v)
  end
  def get_copies(this : ITemplatePrinter2*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_copies.call(this, p)
  end
  def put_page_from(this : ITemplatePrinter2*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_from.call(this, v)
  end
  def get_page_from(this : ITemplatePrinter2*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_from.call(this, p)
  end
  def put_page_to(this : ITemplatePrinter2*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_to.call(this, v)
  end
  def get_page_to(this : ITemplatePrinter2*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_to.call(this, p)
  end
  def put_table_of_links(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_table_of_links.call(this, v)
  end
  def get_table_of_links(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_table_of_links.call(this, p)
  end
  def put_all_linked_documents(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_all_linked_documents.call(this, v)
  end
  def get_all_linked_documents(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_all_linked_documents.call(this, p)
  end
  def put_header(this : ITemplatePrinter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_header.call(this, v)
  end
  def get_header(this : ITemplatePrinter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_header.call(this, p)
  end
  def put_footer(this : ITemplatePrinter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_footer.call(this, v)
  end
  def get_footer(this : ITemplatePrinter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_footer.call(this, p)
  end
  def put_margin_left(this : ITemplatePrinter2*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin_right(this : ITemplatePrinter2*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_top(this : ITemplatePrinter2*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_bottom(this : ITemplatePrinter2*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def get_page_width(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_width.call(this, p)
  end
  def get_page_height(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_height.call(this, p)
  end
  def get_unprintable_left(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_left.call(this, p)
  end
  def get_unprintable_top(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_top.call(this, p)
  end
  def get_unprintable_right(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_right.call(this, p)
  end
  def get_unprintable_bottom(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_bottom.call(this, p)
  end
  def update_page_status(this : ITemplatePrinter2*, p : Int32*) : HRESULT
    @lpVtbl.value.update_page_status.call(this, p)
  end
  def put_selection_enabled(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_selection_enabled.call(this, v)
  end
  def get_selection_enabled(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selection_enabled.call(this, p)
  end
  def put_frame_active_enabled(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_active_enabled.call(this, v)
  end
  def get_frame_active_enabled(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_active_enabled.call(this, p)
  end
  def put_orientation(this : ITemplatePrinter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_orientation.call(this, v)
  end
  def get_orientation(this : ITemplatePrinter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_orientation.call(this, p)
  end
  def put_use_printer_copy_collate(this : ITemplatePrinter2*, v : Int16) : HRESULT
    @lpVtbl.value.put_use_printer_copy_collate.call(this, v)
  end
  def get_use_printer_copy_collate(this : ITemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_use_printer_copy_collate.call(this, p)
  end
  def device_supports(this : ITemplatePrinter2*, bstrproperty : UInt8*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.device_supports.call(this, bstrproperty, pvar)
  end
end
struct LibWin32::ITemplatePrinter3
  def query_interface(this : ITemplatePrinter3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITemplatePrinter3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITemplatePrinter3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ITemplatePrinter3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ITemplatePrinter3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ITemplatePrinter3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ITemplatePrinter3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_doc(this : ITemplatePrinter3*, bstrtitle : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.start_doc.call(this, bstrtitle, p)
  end
  def stop_doc(this : ITemplatePrinter3*) : HRESULT
    @lpVtbl.value.stop_doc.call(this)
  end
  def print_blank_page(this : ITemplatePrinter3*) : HRESULT
    @lpVtbl.value.print_blank_page.call(this)
  end
  def print_page(this : ITemplatePrinter3*, pelemdisp : IDispatch) : HRESULT
    @lpVtbl.value.print_page.call(this, pelemdisp)
  end
  def ensure_print_dialog_defaults(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.ensure_print_dialog_defaults.call(this, p)
  end
  def show_print_dialog(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.show_print_dialog.call(this, p)
  end
  def show_page_setup_dialog(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.show_page_setup_dialog.call(this, p)
  end
  def print_non_native(this : ITemplatePrinter3*, pmarkup : IUnknown, p : Int16*) : HRESULT
    @lpVtbl.value.print_non_native.call(this, pmarkup, p)
  end
  def print_non_native_frames(this : ITemplatePrinter3*, pmarkup : IUnknown, factiveframe : Int16) : HRESULT
    @lpVtbl.value.print_non_native_frames.call(this, pmarkup, factiveframe)
  end
  def put_frameset_document(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_frameset_document.call(this, v)
  end
  def get_frameset_document(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frameset_document.call(this, p)
  end
  def put_frame_active(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_active.call(this, v)
  end
  def get_frame_active(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_active.call(this, p)
  end
  def put_frame_as_shown(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_as_shown.call(this, v)
  end
  def get_frame_as_shown(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_as_shown.call(this, p)
  end
  def put_selection(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_selection.call(this, v)
  end
  def get_selection(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
  def put_selected_pages(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_selected_pages.call(this, v)
  end
  def get_selected_pages(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selected_pages.call(this, p)
  end
  def put_current_page(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page.call(this, v)
  end
  def get_current_page(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page.call(this, p)
  end
  def put_current_page_avail(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_current_page_avail.call(this, v)
  end
  def get_current_page_avail(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_current_page_avail.call(this, p)
  end
  def put_collate(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_collate.call(this, v)
  end
  def get_collate(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_collate.call(this, p)
  end
  def get_duplex(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_duplex.call(this, p)
  end
  def put_copies(this : ITemplatePrinter3*, v : UInt16) : HRESULT
    @lpVtbl.value.put_copies.call(this, v)
  end
  def get_copies(this : ITemplatePrinter3*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_copies.call(this, p)
  end
  def put_page_from(this : ITemplatePrinter3*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_from.call(this, v)
  end
  def get_page_from(this : ITemplatePrinter3*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_from.call(this, p)
  end
  def put_page_to(this : ITemplatePrinter3*, v : UInt16) : HRESULT
    @lpVtbl.value.put_page_to.call(this, v)
  end
  def get_page_to(this : ITemplatePrinter3*, p : UInt16*) : HRESULT
    @lpVtbl.value.get_page_to.call(this, p)
  end
  def put_table_of_links(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_table_of_links.call(this, v)
  end
  def get_table_of_links(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_table_of_links.call(this, p)
  end
  def put_all_linked_documents(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_all_linked_documents.call(this, v)
  end
  def get_all_linked_documents(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_all_linked_documents.call(this, p)
  end
  def put_header(this : ITemplatePrinter3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_header.call(this, v)
  end
  def get_header(this : ITemplatePrinter3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_header.call(this, p)
  end
  def put_footer(this : ITemplatePrinter3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_footer.call(this, v)
  end
  def get_footer(this : ITemplatePrinter3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_footer.call(this, p)
  end
  def put_margin_left(this : ITemplatePrinter3*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_left.call(this, v)
  end
  def get_margin_left(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_left.call(this, p)
  end
  def put_margin_right(this : ITemplatePrinter3*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_right.call(this, v)
  end
  def get_margin_right(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_right.call(this, p)
  end
  def put_margin_top(this : ITemplatePrinter3*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_top.call(this, v)
  end
  def get_margin_top(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_top.call(this, p)
  end
  def put_margin_bottom(this : ITemplatePrinter3*, v : Int32) : HRESULT
    @lpVtbl.value.put_margin_bottom.call(this, v)
  end
  def get_margin_bottom(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_margin_bottom.call(this, p)
  end
  def get_page_width(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_width.call(this, p)
  end
  def get_page_height(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_page_height.call(this, p)
  end
  def get_unprintable_left(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_left.call(this, p)
  end
  def get_unprintable_top(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_top.call(this, p)
  end
  def get_unprintable_right(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_right.call(this, p)
  end
  def get_unprintable_bottom(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.get_unprintable_bottom.call(this, p)
  end
  def update_page_status(this : ITemplatePrinter3*, p : Int32*) : HRESULT
    @lpVtbl.value.update_page_status.call(this, p)
  end
  def put_selection_enabled(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_selection_enabled.call(this, v)
  end
  def get_selection_enabled(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_selection_enabled.call(this, p)
  end
  def put_frame_active_enabled(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_frame_active_enabled.call(this, v)
  end
  def get_frame_active_enabled(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_frame_active_enabled.call(this, p)
  end
  def put_orientation(this : ITemplatePrinter3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_orientation.call(this, v)
  end
  def get_orientation(this : ITemplatePrinter3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_orientation.call(this, p)
  end
  def put_use_printer_copy_collate(this : ITemplatePrinter3*, v : Int16) : HRESULT
    @lpVtbl.value.put_use_printer_copy_collate.call(this, v)
  end
  def get_use_printer_copy_collate(this : ITemplatePrinter3*, p : Int16*) : HRESULT
    @lpVtbl.value.get_use_printer_copy_collate.call(this, p)
  end
  def device_supports(this : ITemplatePrinter3*, bstrproperty : UInt8*, pvar : VARIANT*) : HRESULT
    @lpVtbl.value.device_supports.call(this, bstrproperty, pvar)
  end
  def put_header_footer_font(this : ITemplatePrinter3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_header_footer_font.call(this, v)
  end
  def get_header_footer_font(this : ITemplatePrinter3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_header_footer_font.call(this, p)
  end
  def get_page_margin_top(this : ITemplatePrinter3*, pagerule : IDispatch, pagewidth : Int32, pageheight : Int32, pmargin : VARIANT*) : HRESULT
    @lpVtbl.value.get_page_margin_top.call(this, pagerule, pagewidth, pageheight, pmargin)
  end
  def get_page_margin_right(this : ITemplatePrinter3*, pagerule : IDispatch, pagewidth : Int32, pageheight : Int32, pmargin : VARIANT*) : HRESULT
    @lpVtbl.value.get_page_margin_right.call(this, pagerule, pagewidth, pageheight, pmargin)
  end
  def get_page_margin_bottom(this : ITemplatePrinter3*, pagerule : IDispatch, pagewidth : Int32, pageheight : Int32, pmargin : VARIANT*) : HRESULT
    @lpVtbl.value.get_page_margin_bottom.call(this, pagerule, pagewidth, pageheight, pmargin)
  end
  def get_page_margin_left(this : ITemplatePrinter3*, pagerule : IDispatch, pagewidth : Int32, pageheight : Int32, pmargin : VARIANT*) : HRESULT
    @lpVtbl.value.get_page_margin_left.call(this, pagerule, pagewidth, pageheight, pmargin)
  end
  def get_page_margin_top_important(this : ITemplatePrinter3*, pagerule : IDispatch, pbimportant : Int16*) : HRESULT
    @lpVtbl.value.get_page_margin_top_important.call(this, pagerule, pbimportant)
  end
  def get_page_margin_right_important(this : ITemplatePrinter3*, pagerule : IDispatch, pbimportant : Int16*) : HRESULT
    @lpVtbl.value.get_page_margin_right_important.call(this, pagerule, pbimportant)
  end
  def get_page_margin_bottom_important(this : ITemplatePrinter3*, pagerule : IDispatch, pbimportant : Int16*) : HRESULT
    @lpVtbl.value.get_page_margin_bottom_important.call(this, pagerule, pbimportant)
  end
  def get_page_margin_left_important(this : ITemplatePrinter3*, pagerule : IDispatch, pbimportant : Int16*) : HRESULT
    @lpVtbl.value.get_page_margin_left_important.call(this, pagerule, pbimportant)
  end
end
struct LibWin32::IPrintManagerTemplatePrinter
  def query_interface(this : IPrintManagerTemplatePrinter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrintManagerTemplatePrinter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrintManagerTemplatePrinter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IPrintManagerTemplatePrinter*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IPrintManagerTemplatePrinter*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IPrintManagerTemplatePrinter*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IPrintManagerTemplatePrinter*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_print(this : IPrintManagerTemplatePrinter*) : HRESULT
    @lpVtbl.value.start_print.call(this)
  end
  def draw_preview_page(this : IPrintManagerTemplatePrinter*, pelemdisp : IDispatch, npage : Int32) : HRESULT
    @lpVtbl.value.draw_preview_page.call(this, pelemdisp, npage)
  end
  def set_page_count(this : IPrintManagerTemplatePrinter*, npage : Int32) : HRESULT
    @lpVtbl.value.set_page_count.call(this, npage)
  end
  def invalidate_preview(this : IPrintManagerTemplatePrinter*) : HRESULT
    @lpVtbl.value.invalidate_preview.call(this)
  end
  def get_print_task_option_value(this : IPrintManagerTemplatePrinter*, bstrkey : UInt8*, pvarin : VARIANT*) : HRESULT
    @lpVtbl.value.get_print_task_option_value.call(this, bstrkey, pvarin)
  end
  def end_print(this : IPrintManagerTemplatePrinter*) : HRESULT
    @lpVtbl.value.end_print.call(this)
  end
end
struct LibWin32::IPrintManagerTemplatePrinter2
  def query_interface(this : IPrintManagerTemplatePrinter2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrintManagerTemplatePrinter2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrintManagerTemplatePrinter2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IPrintManagerTemplatePrinter2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IPrintManagerTemplatePrinter2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IPrintManagerTemplatePrinter2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IPrintManagerTemplatePrinter2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_print(this : IPrintManagerTemplatePrinter2*) : HRESULT
    @lpVtbl.value.start_print.call(this)
  end
  def draw_preview_page(this : IPrintManagerTemplatePrinter2*, pelemdisp : IDispatch, npage : Int32) : HRESULT
    @lpVtbl.value.draw_preview_page.call(this, pelemdisp, npage)
  end
  def set_page_count(this : IPrintManagerTemplatePrinter2*, npage : Int32) : HRESULT
    @lpVtbl.value.set_page_count.call(this, npage)
  end
  def invalidate_preview(this : IPrintManagerTemplatePrinter2*) : HRESULT
    @lpVtbl.value.invalidate_preview.call(this)
  end
  def get_print_task_option_value(this : IPrintManagerTemplatePrinter2*, bstrkey : UInt8*, pvarin : VARIANT*) : HRESULT
    @lpVtbl.value.get_print_task_option_value.call(this, bstrkey, pvarin)
  end
  def end_print(this : IPrintManagerTemplatePrinter2*) : HRESULT
    @lpVtbl.value.end_print.call(this)
  end
  def get_show_header_footer(this : IPrintManagerTemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_show_header_footer.call(this, p)
  end
  def get_shrink_to_fit(this : IPrintManagerTemplatePrinter2*, p : Int16*) : HRESULT
    @lpVtbl.value.get_shrink_to_fit.call(this, p)
  end
  def get_percent_scale(this : IPrintManagerTemplatePrinter2*, p : Float32*) : HRESULT
    @lpVtbl.value.get_percent_scale.call(this, p)
  end
end
struct LibWin32::DispCPrintManagerTemplatePrinter
  def query_interface(this : DispCPrintManagerTemplatePrinter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispCPrintManagerTemplatePrinter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispCPrintManagerTemplatePrinter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispCPrintManagerTemplatePrinter*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispCPrintManagerTemplatePrinter*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispCPrintManagerTemplatePrinter*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispCPrintManagerTemplatePrinter*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ISVGTextPathElement
  def query_interface(this : ISVGTextPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISVGTextPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISVGTextPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ISVGTextPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ISVGTextPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ISVGTextPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ISVGTextPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def putref_start_offset(this : ISVGTextPathElement*, v : ISVGAnimatedLength) : HRESULT
    @lpVtbl.value.putref_start_offset.call(this, v)
  end
  def get_start_offset(this : ISVGTextPathElement*, p : ISVGAnimatedLength*) : HRESULT
    @lpVtbl.value.get_start_offset.call(this, p)
  end
  def putref_method(this : ISVGTextPathElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_method.call(this, v)
  end
  def get_method(this : ISVGTextPathElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_method.call(this, p)
  end
  def putref_spacing(this : ISVGTextPathElement*, v : ISVGAnimatedEnumeration) : HRESULT
    @lpVtbl.value.putref_spacing.call(this, v)
  end
  def get_spacing(this : ISVGTextPathElement*, p : ISVGAnimatedEnumeration*) : HRESULT
    @lpVtbl.value.get_spacing.call(this, p)
  end
end
struct LibWin32::DispSVGTextPathElement
  def query_interface(this : DispSVGTextPathElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispSVGTextPathElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispSVGTextPathElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispSVGTextPathElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispSVGTextPathElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispSVGTextPathElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispSVGTextPathElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMXmlSerializer
  def query_interface(this : IDOMXmlSerializer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMXmlSerializer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMXmlSerializer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMXmlSerializer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMXmlSerializer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMXmlSerializer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMXmlSerializer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def serialize_to_string(this : IDOMXmlSerializer*, pnode : IHTMLDOMNode, pstring : UInt8**) : HRESULT
    @lpVtbl.value.serialize_to_string.call(this, pnode, pstring)
  end
end
struct LibWin32::IDOMParser
  def query_interface(this : IDOMParser*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMParser*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMParser*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMParser*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMParser*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMParser*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMParser*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def parse_from_string(this : IDOMParser*, xmlsource : UInt8*, mimetype : UInt8*, ppnode : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.parse_from_string.call(this, xmlsource, mimetype, ppnode)
  end
end
struct LibWin32::DispXMLSerializer
  def query_interface(this : DispXMLSerializer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispXMLSerializer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispXMLSerializer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispXMLSerializer*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispXMLSerializer*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispXMLSerializer*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispXMLSerializer*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispDOMParser
  def query_interface(this : DispDOMParser*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMParser*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMParser*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMParser*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMParser*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMParser*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMParser*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMXmlSerializerFactory
  def query_interface(this : IDOMXmlSerializerFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMXmlSerializerFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMXmlSerializerFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMXmlSerializerFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMXmlSerializerFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMXmlSerializerFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMXmlSerializerFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IDOMXmlSerializerFactory*, midl__idomxmlserializerfactory0000 : IDOMXmlSerializer*) : HRESULT
    @lpVtbl.value.create.call(this, midl__idomxmlserializerfactory0000)
  end
end
struct LibWin32::IDOMParserFactory
  def query_interface(this : IDOMParserFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMParserFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMParserFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMParserFactory*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMParserFactory*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMParserFactory*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMParserFactory*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create(this : IDOMParserFactory*, midl__idomparserfactory0000 : IDOMParser*) : HRESULT
    @lpVtbl.value.create.call(this, midl__idomparserfactory0000)
  end
end
struct LibWin32::DispHTMLSemanticElement
  def query_interface(this : DispHTMLSemanticElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLSemanticElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLSemanticElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLSemanticElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLSemanticElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLSemanticElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLSemanticElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLProgressElement
  def query_interface(this : IHTMLProgressElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLProgressElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLProgressElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLProgressElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLProgressElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLProgressElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLProgressElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_value(this : IHTMLProgressElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_value.call(this, v)
  end
  def get_value(this : IHTMLProgressElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_value.call(this, p)
  end
  def put_max(this : IHTMLProgressElement*, v : Float32) : HRESULT
    @lpVtbl.value.put_max.call(this, v)
  end
  def get_max(this : IHTMLProgressElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_max.call(this, p)
  end
  def get_position(this : IHTMLProgressElement*, p : Float32*) : HRESULT
    @lpVtbl.value.get_position.call(this, p)
  end
  def get_form(this : IHTMLProgressElement*, p : IHTMLFormElement*) : HRESULT
    @lpVtbl.value.get_form.call(this, p)
  end
end
struct LibWin32::DispHTMLProgressElement
  def query_interface(this : DispHTMLProgressElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLProgressElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLProgressElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLProgressElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLProgressElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLProgressElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLProgressElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMSTransitionEvent
  def query_interface(this : IDOMMSTransitionEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMSTransitionEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMSTransitionEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMSTransitionEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMSTransitionEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMSTransitionEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMSTransitionEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_property_name(this : IDOMMSTransitionEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_property_name.call(this, p)
  end
  def get_elapsed_time(this : IDOMMSTransitionEvent*, p : Float32*) : HRESULT
    @lpVtbl.value.get_elapsed_time.call(this, p)
  end
  def init_ms_transition_event(this : IDOMMSTransitionEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, propertyname : UInt8*, elapsedtime : Float32) : HRESULT
    @lpVtbl.value.init_ms_transition_event.call(this, eventtype, canbubble, cancelable, propertyname, elapsedtime)
  end
end
struct LibWin32::DispDOMMSTransitionEvent
  def query_interface(this : DispDOMMSTransitionEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMSTransitionEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMSTransitionEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMSTransitionEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMSTransitionEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMSTransitionEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMSTransitionEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMMSAnimationEvent
  def query_interface(this : IDOMMSAnimationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMSAnimationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMSAnimationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMSAnimationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMSAnimationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMSAnimationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMSAnimationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_animation_name(this : IDOMMSAnimationEvent*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_animation_name.call(this, p)
  end
  def get_elapsed_time(this : IDOMMSAnimationEvent*, p : Float32*) : HRESULT
    @lpVtbl.value.get_elapsed_time.call(this, p)
  end
  def init_ms_animation_event(this : IDOMMSAnimationEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, animationname : UInt8*, elapsedtime : Float32) : HRESULT
    @lpVtbl.value.init_ms_animation_event.call(this, eventtype, canbubble, cancelable, animationname, elapsedtime)
  end
end
struct LibWin32::DispDOMMSAnimationEvent
  def query_interface(this : DispDOMMSAnimationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMSAnimationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMSAnimationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMSAnimationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMSAnimationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMSAnimationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMSAnimationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IWebGeocoordinates
  def query_interface(this : IWebGeocoordinates*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebGeocoordinates*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebGeocoordinates*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWebGeocoordinates*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWebGeocoordinates*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWebGeocoordinates*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWebGeocoordinates*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_latitude(this : IWebGeocoordinates*, p : Float64*) : HRESULT
    @lpVtbl.value.get_latitude.call(this, p)
  end
  def get_longitude(this : IWebGeocoordinates*, p : Float64*) : HRESULT
    @lpVtbl.value.get_longitude.call(this, p)
  end
  def get_altitude(this : IWebGeocoordinates*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_altitude.call(this, p)
  end
  def get_accuracy(this : IWebGeocoordinates*, p : Float64*) : HRESULT
    @lpVtbl.value.get_accuracy.call(this, p)
  end
  def get_altitude_accuracy(this : IWebGeocoordinates*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_altitude_accuracy.call(this, p)
  end
  def get_heading(this : IWebGeocoordinates*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_heading.call(this, p)
  end
  def get_speed(this : IWebGeocoordinates*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_speed.call(this, p)
  end
end
struct LibWin32::IWebGeopositionError
  def query_interface(this : IWebGeopositionError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebGeopositionError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebGeopositionError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWebGeopositionError*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWebGeopositionError*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWebGeopositionError*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWebGeopositionError*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_code(this : IWebGeopositionError*, p : Int32*) : HRESULT
    @lpVtbl.value.get_code.call(this, p)
  end
  def get_message(this : IWebGeopositionError*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_message.call(this, p)
  end
end
struct LibWin32::IWebGeoposition
  def query_interface(this : IWebGeoposition*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebGeoposition*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebGeoposition*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWebGeoposition*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWebGeoposition*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWebGeoposition*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWebGeoposition*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_coords(this : IWebGeoposition*, p : IWebGeocoordinates*) : HRESULT
    @lpVtbl.value.get_coords.call(this, p)
  end
  def get_timestamp(this : IWebGeoposition*, p : UInt64*) : HRESULT
    @lpVtbl.value.get_timestamp.call(this, p)
  end
end
struct LibWin32::DispWebGeolocation
  def query_interface(this : DispWebGeolocation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispWebGeolocation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispWebGeolocation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispWebGeolocation*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispWebGeolocation*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispWebGeolocation*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispWebGeolocation*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispWebGeocoordinates
  def query_interface(this : DispWebGeocoordinates*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispWebGeocoordinates*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispWebGeocoordinates*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispWebGeocoordinates*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispWebGeocoordinates*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispWebGeocoordinates*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispWebGeocoordinates*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispWebGeopositionError
  def query_interface(this : DispWebGeopositionError*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispWebGeopositionError*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispWebGeopositionError*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispWebGeopositionError*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispWebGeopositionError*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispWebGeopositionError*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispWebGeopositionError*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispWebGeoposition
  def query_interface(this : DispWebGeoposition*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispWebGeoposition*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispWebGeoposition*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispWebGeoposition*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispWebGeoposition*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispWebGeoposition*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispWebGeoposition*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IClientCaps
  def query_interface(this : IClientCaps*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IClientCaps*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IClientCaps*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IClientCaps*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IClientCaps*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IClientCaps*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IClientCaps*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_java_enabled(this : IClientCaps*, p : Int16*) : HRESULT
    @lpVtbl.value.get_java_enabled.call(this, p)
  end
  def get_cookie_enabled(this : IClientCaps*, p : Int16*) : HRESULT
    @lpVtbl.value.get_cookie_enabled.call(this, p)
  end
  def get_cpu_class(this : IClientCaps*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_cpu_class.call(this, p)
  end
  def get_system_language(this : IClientCaps*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_system_language.call(this, p)
  end
  def get_user_language(this : IClientCaps*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_user_language.call(this, p)
  end
  def get_platform(this : IClientCaps*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_platform.call(this, p)
  end
  def get_connection_speed(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_connection_speed.call(this, p)
  end
  def get_on_line(this : IClientCaps*, p : Int16*) : HRESULT
    @lpVtbl.value.get_on_line.call(this, p)
  end
  def get_color_depth(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_color_depth.call(this, p)
  end
  def get_buffer_depth(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_buffer_depth.call(this, p)
  end
  def get_width(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_width.call(this, p)
  end
  def get_height(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_height.call(this, p)
  end
  def get_avail_height(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_avail_height.call(this, p)
  end
  def get_avail_width(this : IClientCaps*, p : Int32*) : HRESULT
    @lpVtbl.value.get_avail_width.call(this, p)
  end
  def get_connection_type(this : IClientCaps*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_connection_type.call(this, p)
  end
  def is_component_installed(this : IClientCaps*, bstrname : UInt8*, bstrurl : UInt8*, bstrver : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.is_component_installed.call(this, bstrname, bstrurl, bstrver, p)
  end
  def get_component_version(this : IClientCaps*, bstrname : UInt8*, bstrurl : UInt8*, pbstrver : UInt8**) : HRESULT
    @lpVtbl.value.get_component_version.call(this, bstrname, bstrurl, pbstrver)
  end
  def compare_versions(this : IClientCaps*, bstrver1 : UInt8*, bstrver2 : UInt8*, p : Int32*) : HRESULT
    @lpVtbl.value.compare_versions.call(this, bstrver1, bstrver2, p)
  end
  def add_component_request(this : IClientCaps*, bstrname : UInt8*, bstrurl : UInt8*, bstrver : UInt8*) : HRESULT
    @lpVtbl.value.add_component_request.call(this, bstrname, bstrurl, bstrver)
  end
  def do_component_request(this : IClientCaps*, p : Int16*) : HRESULT
    @lpVtbl.value.do_component_request.call(this, p)
  end
  def clear_component_request(this : IClientCaps*) : HRESULT
    @lpVtbl.value.clear_component_request.call(this)
  end
end
struct LibWin32::IDOMMSManipulationEvent
  def query_interface(this : IDOMMSManipulationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMMSManipulationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMMSManipulationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMMSManipulationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMMSManipulationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMMSManipulationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMMSManipulationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_last_state(this : IDOMMSManipulationEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_last_state.call(this, p)
  end
  def get_current_state(this : IDOMMSManipulationEvent*, p : Int32*) : HRESULT
    @lpVtbl.value.get_current_state.call(this, p)
  end
  def init_ms_manipulation_event(this : IDOMMSManipulationEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, viewarg : IHTMLWindow2, detailarg : Int32, laststate : Int32, currentstate : Int32) : HRESULT
    @lpVtbl.value.init_ms_manipulation_event.call(this, eventtype, canbubble, cancelable, viewarg, detailarg, laststate, currentstate)
  end
end
struct LibWin32::DispDOMMSManipulationEvent
  def query_interface(this : DispDOMMSManipulationEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMMSManipulationEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMMSManipulationEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMMSManipulationEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMMSManipulationEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMMSManipulationEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMMSManipulationEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IDOMCloseEvent
  def query_interface(this : IDOMCloseEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMCloseEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMCloseEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDOMCloseEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDOMCloseEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDOMCloseEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDOMCloseEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_was_clean(this : IDOMCloseEvent*, p : Int16*) : HRESULT
    @lpVtbl.value.get_was_clean.call(this, p)
  end
  def init_close_event(this : IDOMCloseEvent*, eventtype : UInt8*, canbubble : Int16, cancelable : Int16, wasclean : Int16, code : Int32, reason : UInt8*) : HRESULT
    @lpVtbl.value.init_close_event.call(this, eventtype, canbubble, cancelable, wasclean, code, reason)
  end
end
struct LibWin32::DispDOMCloseEvent
  def query_interface(this : DispDOMCloseEvent*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispDOMCloseEvent*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispDOMCloseEvent*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispDOMCloseEvent*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispDOMCloseEvent*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispDOMCloseEvent*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispDOMCloseEvent*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispApplicationCache
  def query_interface(this : DispApplicationCache*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispApplicationCache*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispApplicationCache*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispApplicationCache*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispApplicationCache*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispApplicationCache*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispApplicationCache*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::ICSSFilterSite
  def query_interface(this : ICSSFilterSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICSSFilterSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICSSFilterSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_element(this : ICSSFilterSite*, element : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, element)
  end
  def fire_on_filter_change_event(this : ICSSFilterSite*) : HRESULT
    @lpVtbl.value.fire_on_filter_change_event.call(this)
  end
end
struct LibWin32::IMarkupPointer
  def query_interface(this : IMarkupPointer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupPointer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupPointer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def owning_doc(this : IMarkupPointer*, ppdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.owning_doc.call(this, ppdoc)
  end
  def gravity(this : IMarkupPointer*, pgravity : POINTER_GRAVITY*) : HRESULT
    @lpVtbl.value.gravity.call(this, pgravity)
  end
  def set_gravity(this : IMarkupPointer*, gravity : POINTER_GRAVITY) : HRESULT
    @lpVtbl.value.set_gravity.call(this, gravity)
  end
  def cling(this : IMarkupPointer*, pfcling : LibC::BOOL*) : HRESULT
    @lpVtbl.value.cling.call(this, pfcling)
  end
  def set_cling(this : IMarkupPointer*, fcling : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_cling.call(this, fcling)
  end
  def unposition(this : IMarkupPointer*) : HRESULT
    @lpVtbl.value.unposition.call(this)
  end
  def is_positioned(this : IMarkupPointer*, pfpositioned : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_positioned.call(this, pfpositioned)
  end
  def get_container(this : IMarkupPointer*, ppcontainer : IMarkupContainer*) : HRESULT
    @lpVtbl.value.get_container.call(this, ppcontainer)
  end
  def move_adjacent_to_element(this : IMarkupPointer*, pelement : IHTMLElement, eadj : ELEMENT_ADJACENCY) : HRESULT
    @lpVtbl.value.move_adjacent_to_element.call(this, pelement, eadj)
  end
  def move_to_pointer(this : IMarkupPointer*, ppointer : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_pointer.call(this, ppointer)
  end
  def move_to_container(this : IMarkupPointer*, pcontainer : IMarkupContainer, fatstart : LibC::BOOL) : HRESULT
    @lpVtbl.value.move_to_container.call(this, pcontainer, fatstart)
  end
  def left(this : IMarkupPointer*, fmove : LibC::BOOL, pcontext : MARKUP_CONTEXT_TYPE*, ppelement : IHTMLElement*, pcch : Int32*, pchtext : Char*) : HRESULT
    @lpVtbl.value.left.call(this, fmove, pcontext, ppelement, pcch, pchtext)
  end
  def right(this : IMarkupPointer*, fmove : LibC::BOOL, pcontext : MARKUP_CONTEXT_TYPE*, ppelement : IHTMLElement*, pcch : Int32*, pchtext : Char*) : HRESULT
    @lpVtbl.value.right.call(this, fmove, pcontext, ppelement, pcch, pchtext)
  end
  def current_scope(this : IMarkupPointer*, ppelemcurrent : IHTMLElement*) : HRESULT
    @lpVtbl.value.current_scope.call(this, ppelemcurrent)
  end
  def is_left_of(this : IMarkupPointer*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_left_of.call(this, ppointerthat, pfresult)
  end
  def is_left_of_or_equal_to(this : IMarkupPointer*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_left_of_or_equal_to.call(this, ppointerthat, pfresult)
  end
  def is_right_of(this : IMarkupPointer*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_right_of.call(this, ppointerthat, pfresult)
  end
  def is_right_of_or_equal_to(this : IMarkupPointer*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_right_of_or_equal_to.call(this, ppointerthat, pfresult)
  end
  def is_equal_to(this : IMarkupPointer*, ppointerthat : IMarkupPointer, pfareequal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_equal_to.call(this, ppointerthat, pfareequal)
  end
  def move_unit(this : IMarkupPointer*, muaction : MOVEUNIT_ACTION) : HRESULT
    @lpVtbl.value.move_unit.call(this, muaction)
  end
  def find_text(this : IMarkupPointer*, pchfindtext : LibC::LPWSTR, dwflags : UInt32, piendmatch : IMarkupPointer, piendsearch : IMarkupPointer) : HRESULT
    @lpVtbl.value.find_text.call(this, pchfindtext, dwflags, piendmatch, piendsearch)
  end
end
struct LibWin32::IMarkupContainer
  def query_interface(this : IMarkupContainer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupContainer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupContainer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def owning_doc(this : IMarkupContainer*, ppdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.owning_doc.call(this, ppdoc)
  end
end
struct LibWin32::IMarkupContainer2
  def query_interface(this : IMarkupContainer2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupContainer2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupContainer2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def owning_doc(this : IMarkupContainer2*, ppdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.owning_doc.call(this, ppdoc)
  end
  def create_change_log(this : IMarkupContainer2*, pchangesink : IHTMLChangeSink, ppchangelog : IHTMLChangeLog*, fforward : LibC::BOOL, fbackward : LibC::BOOL) : HRESULT
    @lpVtbl.value.create_change_log.call(this, pchangesink, ppchangelog, fforward, fbackward)
  end
  def register_for_dirty_range(this : IMarkupContainer2*, pchangesink : IHTMLChangeSink, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.register_for_dirty_range.call(this, pchangesink, pdwcookie)
  end
  def un_register_for_dirty_range(this : IMarkupContainer2*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.un_register_for_dirty_range.call(this, dwcookie)
  end
  def get_and_clear_dirty_range(this : IMarkupContainer2*, dwcookie : UInt32, pipointerbegin : IMarkupPointer, pipointerend : IMarkupPointer) : HRESULT
    @lpVtbl.value.get_and_clear_dirty_range.call(this, dwcookie, pipointerbegin, pipointerend)
  end
  def get_version_number(this : IMarkupContainer2*) : Int32
    @lpVtbl.value.get_version_number.call(this)
  end
  def get_master_element(this : IMarkupContainer2*, ppelementmaster : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_master_element.call(this, ppelementmaster)
  end
end
struct LibWin32::IHTMLChangeLog
  def query_interface(this : IHTMLChangeLog*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLChangeLog*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLChangeLog*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_next_change(this : IHTMLChangeLog*, pbbuffer : UInt8*, nbuffersize : Int32, pnrecordlength : Int32*) : HRESULT
    @lpVtbl.value.get_next_change.call(this, pbbuffer, nbuffersize, pnrecordlength)
  end
end
struct LibWin32::IHTMLChangeSink
  def query_interface(this : IHTMLChangeSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLChangeSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLChangeSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify(this : IHTMLChangeSink*) : HRESULT
    @lpVtbl.value.notify.call(this)
  end
end
struct LibWin32::ISegmentList
  def query_interface(this : ISegmentList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISegmentList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISegmentList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_iterator(this : ISegmentList*, ppiiter : ISegmentListIterator*) : HRESULT
    @lpVtbl.value.create_iterator.call(this, ppiiter)
  end
  def get_type(this : ISegmentList*, petype : SELECTION_TYPE*) : HRESULT
    @lpVtbl.value.get_type.call(this, petype)
  end
  def is_empty(this : ISegmentList*, pfempty : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_empty.call(this, pfempty)
  end
end
struct LibWin32::ISegmentListIterator
  def query_interface(this : ISegmentListIterator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISegmentListIterator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISegmentListIterator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def current(this : ISegmentListIterator*, ppisegment : ISegment*) : HRESULT
    @lpVtbl.value.current.call(this, ppisegment)
  end
  def first(this : ISegmentListIterator*) : HRESULT
    @lpVtbl.value.first.call(this)
  end
  def is_done(this : ISegmentListIterator*) : HRESULT
    @lpVtbl.value.is_done.call(this)
  end
  def advance(this : ISegmentListIterator*) : HRESULT
    @lpVtbl.value.advance.call(this)
  end
end
struct LibWin32::IHTMLCaret
  def query_interface(this : IHTMLCaret*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLCaret*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLCaret*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def move_caret_to_pointer(this : IHTMLCaret*, pdisppointer : IDisplayPointer, fscrollintoview : LibC::BOOL, edir : CARET_DIRECTION) : HRESULT
    @lpVtbl.value.move_caret_to_pointer.call(this, pdisppointer, fscrollintoview, edir)
  end
  def move_caret_to_pointer_ex(this : IHTMLCaret*, pdisppointer : IDisplayPointer, fvisible : LibC::BOOL, fscrollintoview : LibC::BOOL, edir : CARET_DIRECTION) : HRESULT
    @lpVtbl.value.move_caret_to_pointer_ex.call(this, pdisppointer, fvisible, fscrollintoview, edir)
  end
  def move_markup_pointer_to_caret(this : IHTMLCaret*, pimarkuppointer : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_markup_pointer_to_caret.call(this, pimarkuppointer)
  end
  def move_display_pointer_to_caret(this : IHTMLCaret*, pdisppointer : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_display_pointer_to_caret.call(this, pdisppointer)
  end
  def is_visible(this : IHTMLCaret*, pisvisible : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_visible.call(this, pisvisible)
  end
  def show(this : IHTMLCaret*, fscrollintoview : LibC::BOOL) : HRESULT
    @lpVtbl.value.show.call(this, fscrollintoview)
  end
  def hide(this : IHTMLCaret*) : HRESULT
    @lpVtbl.value.hide.call(this)
  end
  def insert_text(this : IHTMLCaret*, ptext : LibC::LPWSTR, llen : Int32) : HRESULT
    @lpVtbl.value.insert_text.call(this, ptext, llen)
  end
  def scroll_into_view(this : IHTMLCaret*) : HRESULT
    @lpVtbl.value.scroll_into_view.call(this)
  end
  def get_location(this : IHTMLCaret*, ppoint : POINT*, ftranslate : LibC::BOOL) : HRESULT
    @lpVtbl.value.get_location.call(this, ppoint, ftranslate)
  end
  def get_caret_direction(this : IHTMLCaret*, pedir : CARET_DIRECTION*) : HRESULT
    @lpVtbl.value.get_caret_direction.call(this, pedir)
  end
  def set_caret_direction(this : IHTMLCaret*, edir : CARET_DIRECTION) : HRESULT
    @lpVtbl.value.set_caret_direction.call(this, edir)
  end
end
struct LibWin32::ISegment
  def query_interface(this : ISegment*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISegment*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISegment*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_pointers(this : ISegment*, pistart : IMarkupPointer, piend : IMarkupPointer) : HRESULT
    @lpVtbl.value.get_pointers.call(this, pistart, piend)
  end
end
struct LibWin32::IElementSegment
  def query_interface(this : IElementSegment*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementSegment*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementSegment*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_pointers(this : IElementSegment*, pistart : IMarkupPointer, piend : IMarkupPointer) : HRESULT
    @lpVtbl.value.get_pointers.call(this, pistart, piend)
  end
  def get_element(this : IElementSegment*, ppielement : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_element.call(this, ppielement)
  end
  def set_primary(this : IElementSegment*, fprimary : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_primary.call(this, fprimary)
  end
  def is_primary(this : IElementSegment*, pfprimary : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_primary.call(this, pfprimary)
  end
end
struct LibWin32::IHighlightSegment
  def query_interface(this : IHighlightSegment*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHighlightSegment*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHighlightSegment*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_pointers(this : IHighlightSegment*, pistart : IMarkupPointer, piend : IMarkupPointer) : HRESULT
    @lpVtbl.value.get_pointers.call(this, pistart, piend)
  end
end
struct LibWin32::IHighlightRenderingServices
  def query_interface(this : IHighlightRenderingServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHighlightRenderingServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHighlightRenderingServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_segment(this : IHighlightRenderingServices*, pdisppointerstart : IDisplayPointer, pdisppointerend : IDisplayPointer, pirenderstyle : IHTMLRenderStyle, ppisegment : IHighlightSegment*) : HRESULT
    @lpVtbl.value.add_segment.call(this, pdisppointerstart, pdisppointerend, pirenderstyle, ppisegment)
  end
  def move_segment_to_pointers(this : IHighlightRenderingServices*, pisegment : IHighlightSegment, pdisppointerstart : IDisplayPointer, pdisppointerend : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_segment_to_pointers.call(this, pisegment, pdisppointerstart, pdisppointerend)
  end
  def remove_segment(this : IHighlightRenderingServices*, pisegment : IHighlightSegment) : HRESULT
    @lpVtbl.value.remove_segment.call(this, pisegment)
  end
end
struct LibWin32::ILineInfo
  def query_interface(this : ILineInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ILineInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ILineInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_x(this : ILineInfo*, p : Int32*) : HRESULT
    @lpVtbl.value.get_x.call(this, p)
  end
  def get_base_line(this : ILineInfo*, p : Int32*) : HRESULT
    @lpVtbl.value.get_base_line.call(this, p)
  end
  def get_text_descent(this : ILineInfo*, p : Int32*) : HRESULT
    @lpVtbl.value.get_text_descent.call(this, p)
  end
  def get_text_height(this : ILineInfo*, p : Int32*) : HRESULT
    @lpVtbl.value.get_text_height.call(this, p)
  end
  def get_line_direction(this : ILineInfo*, p : Int32*) : HRESULT
    @lpVtbl.value.get_line_direction.call(this, p)
  end
end
struct LibWin32::IDisplayPointer
  def query_interface(this : IDisplayPointer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDisplayPointer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDisplayPointer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def move_to_point(this : IDisplayPointer*, ptpoint : POINT, ecoordsystem : COORD_SYSTEM, pelementcontext : IHTMLElement, dwhittestoptions : UInt32, pdwhittestresults : UInt32*) : HRESULT
    @lpVtbl.value.move_to_point.call(this, ptpoint, ecoordsystem, pelementcontext, dwhittestoptions, pdwhittestresults)
  end
  def move_unit(this : IDisplayPointer*, emoveunit : DISPLAY_MOVEUNIT, lxpos : Int32) : HRESULT
    @lpVtbl.value.move_unit.call(this, emoveunit, lxpos)
  end
  def position_markup_pointer(this : IDisplayPointer*, pmarkuppointer : IMarkupPointer) : HRESULT
    @lpVtbl.value.position_markup_pointer.call(this, pmarkuppointer)
  end
  def move_to_pointer(this : IDisplayPointer*, pdisppointer : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_to_pointer.call(this, pdisppointer)
  end
  def set_pointer_gravity(this : IDisplayPointer*, egravity : POINTER_GRAVITY) : HRESULT
    @lpVtbl.value.set_pointer_gravity.call(this, egravity)
  end
  def get_pointer_gravity(this : IDisplayPointer*, pegravity : POINTER_GRAVITY*) : HRESULT
    @lpVtbl.value.get_pointer_gravity.call(this, pegravity)
  end
  def set_display_gravity(this : IDisplayPointer*, egravity : DISPLAY_GRAVITY) : HRESULT
    @lpVtbl.value.set_display_gravity.call(this, egravity)
  end
  def get_display_gravity(this : IDisplayPointer*, pegravity : DISPLAY_GRAVITY*) : HRESULT
    @lpVtbl.value.get_display_gravity.call(this, pegravity)
  end
  def is_positioned(this : IDisplayPointer*, pfpositioned : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_positioned.call(this, pfpositioned)
  end
  def unposition(this : IDisplayPointer*) : HRESULT
    @lpVtbl.value.unposition.call(this)
  end
  def is_equal_to(this : IDisplayPointer*, pdisppointer : IDisplayPointer, pfisequal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_equal_to.call(this, pdisppointer, pfisequal)
  end
  def is_left_of(this : IDisplayPointer*, pdisppointer : IDisplayPointer, pfisleftof : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_left_of.call(this, pdisppointer, pfisleftof)
  end
  def is_right_of(this : IDisplayPointer*, pdisppointer : IDisplayPointer, pfisrightof : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_right_of.call(this, pdisppointer, pfisrightof)
  end
  def is_at_bol(this : IDisplayPointer*, pfbol : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_at_bol.call(this, pfbol)
  end
  def move_to_markup_pointer(this : IDisplayPointer*, ppointer : IMarkupPointer, pdisplinecontext : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_to_markup_pointer.call(this, ppointer, pdisplinecontext)
  end
  def scroll_into_view(this : IDisplayPointer*) : HRESULT
    @lpVtbl.value.scroll_into_view.call(this)
  end
  def get_line_info(this : IDisplayPointer*, pplineinfo : ILineInfo*) : HRESULT
    @lpVtbl.value.get_line_info.call(this, pplineinfo)
  end
  def get_flow_element(this : IDisplayPointer*, pplayoutelement : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_flow_element.call(this, pplayoutelement)
  end
  def query_breaks(this : IDisplayPointer*, pdwbreaks : UInt32*) : HRESULT
    @lpVtbl.value.query_breaks.call(this, pdwbreaks)
  end
end
struct LibWin32::IDisplayServices
  def query_interface(this : IDisplayServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDisplayServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDisplayServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_display_pointer(this : IDisplayServices*, ppdisppointer : IDisplayPointer*) : HRESULT
    @lpVtbl.value.create_display_pointer.call(this, ppdisppointer)
  end
  def transform_rect(this : IDisplayServices*, prect : RECT*, esource : COORD_SYSTEM, edestination : COORD_SYSTEM, pielement : IHTMLElement) : HRESULT
    @lpVtbl.value.transform_rect.call(this, prect, esource, edestination, pielement)
  end
  def transform_point(this : IDisplayServices*, ppoint : POINT*, esource : COORD_SYSTEM, edestination : COORD_SYSTEM, pielement : IHTMLElement) : HRESULT
    @lpVtbl.value.transform_point.call(this, ppoint, esource, edestination, pielement)
  end
  def get_caret(this : IDisplayServices*, ppcaret : IHTMLCaret*) : HRESULT
    @lpVtbl.value.get_caret.call(this, ppcaret)
  end
  def get_computed_style(this : IDisplayServices*, ppointer : IMarkupPointer, ppcomputedstyle : IHTMLComputedStyle*) : HRESULT
    @lpVtbl.value.get_computed_style.call(this, ppointer, ppcomputedstyle)
  end
  def scroll_rect_into_view(this : IDisplayServices*, pielement : IHTMLElement, rect : RECT) : HRESULT
    @lpVtbl.value.scroll_rect_into_view.call(this, pielement, rect)
  end
  def has_flow_layout(this : IDisplayServices*, pielement : IHTMLElement, pfhasflowlayout : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_flow_layout.call(this, pielement, pfhasflowlayout)
  end
end
struct LibWin32::IHtmlDlgSafeHelper
  def query_interface(this : IHtmlDlgSafeHelper*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHtmlDlgSafeHelper*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHtmlDlgSafeHelper*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHtmlDlgSafeHelper*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHtmlDlgSafeHelper*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHtmlDlgSafeHelper*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHtmlDlgSafeHelper*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def choosecolordlg(this : IHtmlDlgSafeHelper*, initcolor : VARIANT, rgbcolor : VARIANT*) : HRESULT
    @lpVtbl.value.choosecolordlg.call(this, initcolor, rgbcolor)
  end
  def get_charset(this : IHtmlDlgSafeHelper*, fontname : UInt8*, charset : VARIANT*) : HRESULT
    @lpVtbl.value.get_charset.call(this, fontname, charset)
  end
  def get_fonts(this : IHtmlDlgSafeHelper*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_fonts.call(this, p)
  end
  def get_block_formats(this : IHtmlDlgSafeHelper*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_block_formats.call(this, p)
  end
end
struct LibWin32::IBlockFormats
  def query_interface(this : IBlockFormats*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBlockFormats*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBlockFormats*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IBlockFormats*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IBlockFormats*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IBlockFormats*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IBlockFormats*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IBlockFormats*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def get_count(this : IBlockFormats*, p : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, p)
  end
  def item(this : IBlockFormats*, pvarindex : VARIANT*, pbstrblockformat : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pbstrblockformat)
  end
end
struct LibWin32::IFontNames
  def query_interface(this : IFontNames*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFontNames*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFontNames*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFontNames*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFontNames*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFontNames*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFontNames*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IFontNames*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def get_count(this : IFontNames*, p : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, p)
  end
  def item(this : IFontNames*, pvarindex : VARIANT*, pbstrfontname : UInt8**) : HRESULT
    @lpVtbl.value.item.call(this, pvarindex, pbstrfontname)
  end
end
struct LibWin32::ICSSFilter
  def query_interface(this : ICSSFilter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICSSFilter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICSSFilter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_site(this : ICSSFilter*, psink : ICSSFilterSite) : HRESULT
    @lpVtbl.value.set_site.call(this, psink)
  end
  def on_ambient_property_change(this : ICSSFilter*, dispid : Int32) : HRESULT
    @lpVtbl.value.on_ambient_property_change.call(this, dispid)
  end
end
struct LibWin32::ISecureUrlHost
  def query_interface(this : ISecureUrlHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISecureUrlHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISecureUrlHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def validate_secure_url(this : ISecureUrlHost*, pfallow : LibC::BOOL*, pchurlinquestion : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.validate_secure_url.call(this, pfallow, pchurlinquestion, dwflags)
  end
end
struct LibWin32::IMarkupServices
  def query_interface(this : IMarkupServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_markup_pointer(this : IMarkupServices*, pppointer : IMarkupPointer*) : HRESULT
    @lpVtbl.value.create_markup_pointer.call(this, pppointer)
  end
  def create_markup_container(this : IMarkupServices*, ppmarkupcontainer : IMarkupContainer*) : HRESULT
    @lpVtbl.value.create_markup_container.call(this, ppmarkupcontainer)
  end
  def create_element(this : IMarkupServices*, tagid : ELEMENT_TAG_ID, pchattributes : LibC::LPWSTR, ppelement : IHTMLElement*) : HRESULT
    @lpVtbl.value.create_element.call(this, tagid, pchattributes, ppelement)
  end
  def clone_element(this : IMarkupServices*, pelemclonethis : IHTMLElement, ppelementtheclone : IHTMLElement*) : HRESULT
    @lpVtbl.value.clone_element.call(this, pelemclonethis, ppelementtheclone)
  end
  def insert_element(this : IMarkupServices*, pelementinsert : IHTMLElement, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.insert_element.call(this, pelementinsert, ppointerstart, ppointerfinish)
  end
  def remove_element(this : IMarkupServices*, pelementremove : IHTMLElement) : HRESULT
    @lpVtbl.value.remove_element.call(this, pelementremove)
  end
  def remove(this : IMarkupServices*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.remove.call(this, ppointerstart, ppointerfinish)
  end
  def copy(this : IMarkupServices*, ppointersourcestart : IMarkupPointer, ppointersourcefinish : IMarkupPointer, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.copy.call(this, ppointersourcestart, ppointersourcefinish, ppointertarget)
  end
  def move(this : IMarkupServices*, ppointersourcestart : IMarkupPointer, ppointersourcefinish : IMarkupPointer, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.move.call(this, ppointersourcestart, ppointersourcefinish, ppointertarget)
  end
  def insert_text(this : IMarkupServices*, pchtext : LibC::LPWSTR, cch : Int32, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.insert_text.call(this, pchtext, cch, ppointertarget)
  end
  def parse_string(this : IMarkupServices*, pchhtml : LibC::LPWSTR, dwflags : UInt32, ppcontainerresult : IMarkupContainer*, pppointerstart : IMarkupPointer, pppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.parse_string.call(this, pchhtml, dwflags, ppcontainerresult, pppointerstart, pppointerfinish)
  end
  def parse_global(this : IMarkupServices*, hglobalhtml : LibC::IntPtrT, dwflags : UInt32, ppcontainerresult : IMarkupContainer*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.parse_global.call(this, hglobalhtml, dwflags, ppcontainerresult, ppointerstart, ppointerfinish)
  end
  def is_scoped_element(this : IMarkupServices*, pelement : IHTMLElement, pfscoped : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_scoped_element.call(this, pelement, pfscoped)
  end
  def get_element_tag_id(this : IMarkupServices*, pelement : IHTMLElement, ptagid : ELEMENT_TAG_ID*) : HRESULT
    @lpVtbl.value.get_element_tag_id.call(this, pelement, ptagid)
  end
  def get_tag_id_for_name(this : IMarkupServices*, bstrname : UInt8*, ptagid : ELEMENT_TAG_ID*) : HRESULT
    @lpVtbl.value.get_tag_id_for_name.call(this, bstrname, ptagid)
  end
  def get_name_for_tag_id(this : IMarkupServices*, tagid : ELEMENT_TAG_ID, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name_for_tag_id.call(this, tagid, pbstrname)
  end
  def move_pointers_to_range(this : IMarkupServices*, pirange : IHTMLTxtRange, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_pointers_to_range.call(this, pirange, ppointerstart, ppointerfinish)
  end
  def move_range_to_pointers(this : IMarkupServices*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer, pirange : IHTMLTxtRange) : HRESULT
    @lpVtbl.value.move_range_to_pointers.call(this, ppointerstart, ppointerfinish, pirange)
  end
  def begin_undo_unit(this : IMarkupServices*, pchtitle : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.begin_undo_unit.call(this, pchtitle)
  end
  def end_undo_unit(this : IMarkupServices*) : HRESULT
    @lpVtbl.value.end_undo_unit.call(this)
  end
end
struct LibWin32::IMarkupServices2
  def query_interface(this : IMarkupServices2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupServices2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupServices2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_markup_pointer(this : IMarkupServices2*, pppointer : IMarkupPointer*) : HRESULT
    @lpVtbl.value.create_markup_pointer.call(this, pppointer)
  end
  def create_markup_container(this : IMarkupServices2*, ppmarkupcontainer : IMarkupContainer*) : HRESULT
    @lpVtbl.value.create_markup_container.call(this, ppmarkupcontainer)
  end
  def create_element(this : IMarkupServices2*, tagid : ELEMENT_TAG_ID, pchattributes : LibC::LPWSTR, ppelement : IHTMLElement*) : HRESULT
    @lpVtbl.value.create_element.call(this, tagid, pchattributes, ppelement)
  end
  def clone_element(this : IMarkupServices2*, pelemclonethis : IHTMLElement, ppelementtheclone : IHTMLElement*) : HRESULT
    @lpVtbl.value.clone_element.call(this, pelemclonethis, ppelementtheclone)
  end
  def insert_element(this : IMarkupServices2*, pelementinsert : IHTMLElement, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.insert_element.call(this, pelementinsert, ppointerstart, ppointerfinish)
  end
  def remove_element(this : IMarkupServices2*, pelementremove : IHTMLElement) : HRESULT
    @lpVtbl.value.remove_element.call(this, pelementremove)
  end
  def remove(this : IMarkupServices2*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.remove.call(this, ppointerstart, ppointerfinish)
  end
  def copy(this : IMarkupServices2*, ppointersourcestart : IMarkupPointer, ppointersourcefinish : IMarkupPointer, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.copy.call(this, ppointersourcestart, ppointersourcefinish, ppointertarget)
  end
  def move(this : IMarkupServices2*, ppointersourcestart : IMarkupPointer, ppointersourcefinish : IMarkupPointer, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.move.call(this, ppointersourcestart, ppointersourcefinish, ppointertarget)
  end
  def insert_text(this : IMarkupServices2*, pchtext : LibC::LPWSTR, cch : Int32, ppointertarget : IMarkupPointer) : HRESULT
    @lpVtbl.value.insert_text.call(this, pchtext, cch, ppointertarget)
  end
  def parse_string(this : IMarkupServices2*, pchhtml : LibC::LPWSTR, dwflags : UInt32, ppcontainerresult : IMarkupContainer*, pppointerstart : IMarkupPointer, pppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.parse_string.call(this, pchhtml, dwflags, ppcontainerresult, pppointerstart, pppointerfinish)
  end
  def parse_global(this : IMarkupServices2*, hglobalhtml : LibC::IntPtrT, dwflags : UInt32, ppcontainerresult : IMarkupContainer*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.parse_global.call(this, hglobalhtml, dwflags, ppcontainerresult, ppointerstart, ppointerfinish)
  end
  def is_scoped_element(this : IMarkupServices2*, pelement : IHTMLElement, pfscoped : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_scoped_element.call(this, pelement, pfscoped)
  end
  def get_element_tag_id(this : IMarkupServices2*, pelement : IHTMLElement, ptagid : ELEMENT_TAG_ID*) : HRESULT
    @lpVtbl.value.get_element_tag_id.call(this, pelement, ptagid)
  end
  def get_tag_id_for_name(this : IMarkupServices2*, bstrname : UInt8*, ptagid : ELEMENT_TAG_ID*) : HRESULT
    @lpVtbl.value.get_tag_id_for_name.call(this, bstrname, ptagid)
  end
  def get_name_for_tag_id(this : IMarkupServices2*, tagid : ELEMENT_TAG_ID, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name_for_tag_id.call(this, tagid, pbstrname)
  end
  def move_pointers_to_range(this : IMarkupServices2*, pirange : IHTMLTxtRange, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_pointers_to_range.call(this, pirange, ppointerstart, ppointerfinish)
  end
  def move_range_to_pointers(this : IMarkupServices2*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer, pirange : IHTMLTxtRange) : HRESULT
    @lpVtbl.value.move_range_to_pointers.call(this, ppointerstart, ppointerfinish, pirange)
  end
  def begin_undo_unit(this : IMarkupServices2*, pchtitle : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.begin_undo_unit.call(this, pchtitle)
  end
  def end_undo_unit(this : IMarkupServices2*) : HRESULT
    @lpVtbl.value.end_undo_unit.call(this)
  end
  def parse_global_ex(this : IMarkupServices2*, hglobalhtml : LibC::IntPtrT, dwflags : UInt32, pcontext : IMarkupContainer, ppcontainerresult : IMarkupContainer*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer) : HRESULT
    @lpVtbl.value.parse_global_ex.call(this, hglobalhtml, dwflags, pcontext, ppcontainerresult, ppointerstart, ppointerfinish)
  end
  def validate_elements(this : IMarkupServices2*, ppointerstart : IMarkupPointer, ppointerfinish : IMarkupPointer, ppointertarget : IMarkupPointer, ppointerstatus : IMarkupPointer, ppelemfailbottom : IHTMLElement*, ppelemfailtop : IHTMLElement*) : HRESULT
    @lpVtbl.value.validate_elements.call(this, ppointerstart, ppointerfinish, ppointertarget, ppointerstatus, ppelemfailbottom, ppelemfailtop)
  end
  def save_segments_to_clipboard(this : IMarkupServices2*, psegmentlist : ISegmentList, dwflags : UInt32) : HRESULT
    @lpVtbl.value.save_segments_to_clipboard.call(this, psegmentlist, dwflags)
  end
end
struct LibWin32::IHTMLChangePlayback
  def query_interface(this : IHTMLChangePlayback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLChangePlayback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLChangePlayback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def exec_change(this : IHTMLChangePlayback*, pbrecord : UInt8*, fforward : LibC::BOOL) : HRESULT
    @lpVtbl.value.exec_change.call(this, pbrecord, fforward)
  end
end
struct LibWin32::IMarkupPointer2
  def query_interface(this : IMarkupPointer2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupPointer2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupPointer2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def owning_doc(this : IMarkupPointer2*, ppdoc : IHTMLDocument2*) : HRESULT
    @lpVtbl.value.owning_doc.call(this, ppdoc)
  end
  def gravity(this : IMarkupPointer2*, pgravity : POINTER_GRAVITY*) : HRESULT
    @lpVtbl.value.gravity.call(this, pgravity)
  end
  def set_gravity(this : IMarkupPointer2*, gravity : POINTER_GRAVITY) : HRESULT
    @lpVtbl.value.set_gravity.call(this, gravity)
  end
  def cling(this : IMarkupPointer2*, pfcling : LibC::BOOL*) : HRESULT
    @lpVtbl.value.cling.call(this, pfcling)
  end
  def set_cling(this : IMarkupPointer2*, fcling : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_cling.call(this, fcling)
  end
  def unposition(this : IMarkupPointer2*) : HRESULT
    @lpVtbl.value.unposition.call(this)
  end
  def is_positioned(this : IMarkupPointer2*, pfpositioned : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_positioned.call(this, pfpositioned)
  end
  def get_container(this : IMarkupPointer2*, ppcontainer : IMarkupContainer*) : HRESULT
    @lpVtbl.value.get_container.call(this, ppcontainer)
  end
  def move_adjacent_to_element(this : IMarkupPointer2*, pelement : IHTMLElement, eadj : ELEMENT_ADJACENCY) : HRESULT
    @lpVtbl.value.move_adjacent_to_element.call(this, pelement, eadj)
  end
  def move_to_pointer(this : IMarkupPointer2*, ppointer : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_pointer.call(this, ppointer)
  end
  def move_to_container(this : IMarkupPointer2*, pcontainer : IMarkupContainer, fatstart : LibC::BOOL) : HRESULT
    @lpVtbl.value.move_to_container.call(this, pcontainer, fatstart)
  end
  def left(this : IMarkupPointer2*, fmove : LibC::BOOL, pcontext : MARKUP_CONTEXT_TYPE*, ppelement : IHTMLElement*, pcch : Int32*, pchtext : Char*) : HRESULT
    @lpVtbl.value.left.call(this, fmove, pcontext, ppelement, pcch, pchtext)
  end
  def right(this : IMarkupPointer2*, fmove : LibC::BOOL, pcontext : MARKUP_CONTEXT_TYPE*, ppelement : IHTMLElement*, pcch : Int32*, pchtext : Char*) : HRESULT
    @lpVtbl.value.right.call(this, fmove, pcontext, ppelement, pcch, pchtext)
  end
  def current_scope(this : IMarkupPointer2*, ppelemcurrent : IHTMLElement*) : HRESULT
    @lpVtbl.value.current_scope.call(this, ppelemcurrent)
  end
  def is_left_of(this : IMarkupPointer2*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_left_of.call(this, ppointerthat, pfresult)
  end
  def is_left_of_or_equal_to(this : IMarkupPointer2*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_left_of_or_equal_to.call(this, ppointerthat, pfresult)
  end
  def is_right_of(this : IMarkupPointer2*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_right_of.call(this, ppointerthat, pfresult)
  end
  def is_right_of_or_equal_to(this : IMarkupPointer2*, ppointerthat : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_right_of_or_equal_to.call(this, ppointerthat, pfresult)
  end
  def is_equal_to(this : IMarkupPointer2*, ppointerthat : IMarkupPointer, pfareequal : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_equal_to.call(this, ppointerthat, pfareequal)
  end
  def move_unit(this : IMarkupPointer2*, muaction : MOVEUNIT_ACTION) : HRESULT
    @lpVtbl.value.move_unit.call(this, muaction)
  end
  def find_text(this : IMarkupPointer2*, pchfindtext : LibC::LPWSTR, dwflags : UInt32, piendmatch : IMarkupPointer, piendsearch : IMarkupPointer) : HRESULT
    @lpVtbl.value.find_text.call(this, pchfindtext, dwflags, piendmatch, piendsearch)
  end
  def is_at_word_break(this : IMarkupPointer2*, pfatbreak : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_at_word_break.call(this, pfatbreak)
  end
  def get_markup_position(this : IMarkupPointer2*, plmp : Int32*) : HRESULT
    @lpVtbl.value.get_markup_position.call(this, plmp)
  end
  def move_to_markup_position(this : IMarkupPointer2*, pcontainer : IMarkupContainer, lmp : Int32) : HRESULT
    @lpVtbl.value.move_to_markup_position.call(this, pcontainer, lmp)
  end
  def move_unit_bounded(this : IMarkupPointer2*, muaction : MOVEUNIT_ACTION, piboundary : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_unit_bounded.call(this, muaction, piboundary)
  end
  def is_inside_url(this : IMarkupPointer2*, pright : IMarkupPointer, pfresult : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_inside_url.call(this, pright, pfresult)
  end
  def move_to_content(this : IMarkupPointer2*, pielement : IHTMLElement, fatstart : LibC::BOOL) : HRESULT
    @lpVtbl.value.move_to_content.call(this, pielement, fatstart)
  end
end
struct LibWin32::IMarkupTextFrags
  def query_interface(this : IMarkupTextFrags*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMarkupTextFrags*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMarkupTextFrags*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_text_frag_count(this : IMarkupTextFrags*, pcfrags : Int32*) : HRESULT
    @lpVtbl.value.get_text_frag_count.call(this, pcfrags)
  end
  def get_text_frag(this : IMarkupTextFrags*, ifrag : Int32, pbstrfrag : UInt8**, ppointerfrag : IMarkupPointer) : HRESULT
    @lpVtbl.value.get_text_frag.call(this, ifrag, pbstrfrag, ppointerfrag)
  end
  def remove_text_frag(this : IMarkupTextFrags*, ifrag : Int32) : HRESULT
    @lpVtbl.value.remove_text_frag.call(this, ifrag)
  end
  def insert_text_frag(this : IMarkupTextFrags*, ifrag : Int32, bstrinsert : UInt8*, ppointerinsert : IMarkupPointer) : HRESULT
    @lpVtbl.value.insert_text_frag.call(this, ifrag, bstrinsert, ppointerinsert)
  end
  def find_text_frag_from_markup_pointer(this : IMarkupTextFrags*, ppointerfind : IMarkupPointer, pifrag : Int32*, pffragfound : LibC::BOOL*) : HRESULT
    @lpVtbl.value.find_text_frag_from_markup_pointer.call(this, ppointerfind, pifrag, pffragfound)
  end
end
struct LibWin32::IXMLGenericParse
  def query_interface(this : IXMLGenericParse*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IXMLGenericParse*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IXMLGenericParse*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_generic_parse(this : IXMLGenericParse*, fdogeneric : Int16) : HRESULT
    @lpVtbl.value.set_generic_parse.call(this, fdogeneric)
  end
end
struct LibWin32::IHTMLEditHost
  def query_interface(this : IHTMLEditHost*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEditHost*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEditHost*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def snap_rect(this : IHTMLEditHost*, pielement : IHTMLElement, prcnew : RECT*, ehandle : ELEMENT_CORNER) : HRESULT
    @lpVtbl.value.snap_rect.call(this, pielement, prcnew, ehandle)
  end
end
struct LibWin32::IHTMLEditHost2
  def query_interface(this : IHTMLEditHost2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEditHost2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEditHost2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def snap_rect(this : IHTMLEditHost2*, pielement : IHTMLElement, prcnew : RECT*, ehandle : ELEMENT_CORNER) : HRESULT
    @lpVtbl.value.snap_rect.call(this, pielement, prcnew, ehandle)
  end
  def pre_drag(this : IHTMLEditHost2*) : HRESULT
    @lpVtbl.value.pre_drag.call(this)
  end
end
struct LibWin32::ISequenceNumber
  def query_interface(this : ISequenceNumber*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISequenceNumber*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISequenceNumber*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_sequence_number(this : ISequenceNumber*, ncurrent : Int32, pnnew : Int32*) : HRESULT
    @lpVtbl.value.get_sequence_number.call(this, ncurrent, pnnew)
  end
end
struct LibWin32::IIMEServices
  def query_interface(this : IIMEServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIMEServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIMEServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_active_imm(this : IIMEServices*, ppactiveimm : IActiveIMMApp*) : HRESULT
    @lpVtbl.value.get_active_imm.call(this, ppactiveimm)
  end
end
struct LibWin32::ISelectionServicesListener
  def query_interface(this : ISelectionServicesListener*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISelectionServicesListener*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISelectionServicesListener*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_selection_undo(this : ISelectionServicesListener*) : HRESULT
    @lpVtbl.value.begin_selection_undo.call(this)
  end
  def end_selection_undo(this : ISelectionServicesListener*) : HRESULT
    @lpVtbl.value.end_selection_undo.call(this)
  end
  def on_selected_element_exit(this : ISelectionServicesListener*, pielementstart : IMarkupPointer, pielementend : IMarkupPointer, pielementcontentstart : IMarkupPointer, pielementcontentend : IMarkupPointer) : HRESULT
    @lpVtbl.value.on_selected_element_exit.call(this, pielementstart, pielementend, pielementcontentstart, pielementcontentend)
  end
  def on_change_type(this : ISelectionServicesListener*, etype : SELECTION_TYPE, pilistener : ISelectionServicesListener) : HRESULT
    @lpVtbl.value.on_change_type.call(this, etype, pilistener)
  end
  def get_type_detail(this : ISelectionServicesListener*, ptypedetail : UInt8**) : HRESULT
    @lpVtbl.value.get_type_detail.call(this, ptypedetail)
  end
end
struct LibWin32::ISelectionServices
  def query_interface(this : ISelectionServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISelectionServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISelectionServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_selection_type(this : ISelectionServices*, etype : SELECTION_TYPE, pilistener : ISelectionServicesListener) : HRESULT
    @lpVtbl.value.set_selection_type.call(this, etype, pilistener)
  end
  def get_markup_container(this : ISelectionServices*, ppicontainer : IMarkupContainer*) : HRESULT
    @lpVtbl.value.get_markup_container.call(this, ppicontainer)
  end
  def add_segment(this : ISelectionServices*, pistart : IMarkupPointer, piend : IMarkupPointer, ppisegmentadded : ISegment*) : HRESULT
    @lpVtbl.value.add_segment.call(this, pistart, piend, ppisegmentadded)
  end
  def add_element_segment(this : ISelectionServices*, pielement : IHTMLElement, ppisegmentadded : IElementSegment*) : HRESULT
    @lpVtbl.value.add_element_segment.call(this, pielement, ppisegmentadded)
  end
  def remove_segment(this : ISelectionServices*, pisegment : ISegment) : HRESULT
    @lpVtbl.value.remove_segment.call(this, pisegment)
  end
  def get_selection_services_listener(this : ISelectionServices*, ppiselectionserviceslistener : ISelectionServicesListener*) : HRESULT
    @lpVtbl.value.get_selection_services_listener.call(this, ppiselectionserviceslistener)
  end
end
struct LibWin32::IHTMLEditDesigner
  def query_interface(this : IHTMLEditDesigner*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEditDesigner*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEditDesigner*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def pre_handle_event(this : IHTMLEditDesigner*, inevtdispid : Int32, pieventobj : IHTMLEventObj) : HRESULT
    @lpVtbl.value.pre_handle_event.call(this, inevtdispid, pieventobj)
  end
  def post_handle_event(this : IHTMLEditDesigner*, inevtdispid : Int32, pieventobj : IHTMLEventObj) : HRESULT
    @lpVtbl.value.post_handle_event.call(this, inevtdispid, pieventobj)
  end
  def translate_accelerator(this : IHTMLEditDesigner*, inevtdispid : Int32, pieventobj : IHTMLEventObj) : HRESULT
    @lpVtbl.value.translate_accelerator.call(this, inevtdispid, pieventobj)
  end
  def post_editor_event_notify(this : IHTMLEditDesigner*, inevtdispid : Int32, pieventobj : IHTMLEventObj) : HRESULT
    @lpVtbl.value.post_editor_event_notify.call(this, inevtdispid, pieventobj)
  end
end
struct LibWin32::IHTMLEditServices
  def query_interface(this : IHTMLEditServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEditServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEditServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_designer(this : IHTMLEditServices*, pidesigner : IHTMLEditDesigner) : HRESULT
    @lpVtbl.value.add_designer.call(this, pidesigner)
  end
  def remove_designer(this : IHTMLEditServices*, pidesigner : IHTMLEditDesigner) : HRESULT
    @lpVtbl.value.remove_designer.call(this, pidesigner)
  end
  def get_selection_services(this : IHTMLEditServices*, picontainer : IMarkupContainer, ppselsvc : ISelectionServices*) : HRESULT
    @lpVtbl.value.get_selection_services.call(this, picontainer, ppselsvc)
  end
  def move_to_selection_anchor(this : IHTMLEditServices*, pistartanchor : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_selection_anchor.call(this, pistartanchor)
  end
  def move_to_selection_end(this : IHTMLEditServices*, piendanchor : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_selection_end.call(this, piendanchor)
  end
  def select_range(this : IHTMLEditServices*, pstart : IMarkupPointer, pend : IMarkupPointer, etype : SELECTION_TYPE) : HRESULT
    @lpVtbl.value.select_range.call(this, pstart, pend, etype)
  end
end
struct LibWin32::IHTMLEditServices2
  def query_interface(this : IHTMLEditServices2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLEditServices2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLEditServices2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_designer(this : IHTMLEditServices2*, pidesigner : IHTMLEditDesigner) : HRESULT
    @lpVtbl.value.add_designer.call(this, pidesigner)
  end
  def remove_designer(this : IHTMLEditServices2*, pidesigner : IHTMLEditDesigner) : HRESULT
    @lpVtbl.value.remove_designer.call(this, pidesigner)
  end
  def get_selection_services(this : IHTMLEditServices2*, picontainer : IMarkupContainer, ppselsvc : ISelectionServices*) : HRESULT
    @lpVtbl.value.get_selection_services.call(this, picontainer, ppselsvc)
  end
  def move_to_selection_anchor(this : IHTMLEditServices2*, pistartanchor : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_selection_anchor.call(this, pistartanchor)
  end
  def move_to_selection_end(this : IHTMLEditServices2*, piendanchor : IMarkupPointer) : HRESULT
    @lpVtbl.value.move_to_selection_end.call(this, piendanchor)
  end
  def select_range(this : IHTMLEditServices2*, pstart : IMarkupPointer, pend : IMarkupPointer, etype : SELECTION_TYPE) : HRESULT
    @lpVtbl.value.select_range.call(this, pstart, pend, etype)
  end
  def move_to_selection_anchor_ex(this : IHTMLEditServices2*, pistartanchor : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_to_selection_anchor_ex.call(this, pistartanchor)
  end
  def move_to_selection_end_ex(this : IHTMLEditServices2*, piendanchor : IDisplayPointer) : HRESULT
    @lpVtbl.value.move_to_selection_end_ex.call(this, piendanchor)
  end
  def freeze_virtual_caret_pos(this : IHTMLEditServices2*, frecompute : LibC::BOOL) : HRESULT
    @lpVtbl.value.freeze_virtual_caret_pos.call(this, frecompute)
  end
  def un_freeze_virtual_caret_pos(this : IHTMLEditServices2*, freset : LibC::BOOL) : HRESULT
    @lpVtbl.value.un_freeze_virtual_caret_pos.call(this, freset)
  end
end
struct LibWin32::IHTMLComputedStyle
  def query_interface(this : IHTMLComputedStyle*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLComputedStyle*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLComputedStyle*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_bold(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_bold.call(this, p)
  end
  def get_italic(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_italic.call(this, p)
  end
  def get_underline(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_underline.call(this, p)
  end
  def get_overline(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_overline.call(this, p)
  end
  def get_strike_out(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_strike_out.call(this, p)
  end
  def get_sub_script(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_sub_script.call(this, p)
  end
  def get_super_script(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_super_script.call(this, p)
  end
  def get_explicit_face(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_explicit_face.call(this, p)
  end
  def get_font_weight(this : IHTMLComputedStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_font_weight.call(this, p)
  end
  def get_font_size(this : IHTMLComputedStyle*, p : Int32*) : HRESULT
    @lpVtbl.value.get_font_size.call(this, p)
  end
  def get_font_name(this : IHTMLComputedStyle*, p : Int8*) : HRESULT
    @lpVtbl.value.get_font_name.call(this, p)
  end
  def get_has_bg_color(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_has_bg_color.call(this, p)
  end
  def get_text_color(this : IHTMLComputedStyle*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_text_color.call(this, p)
  end
  def get_background_color(this : IHTMLComputedStyle*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_background_color.call(this, p)
  end
  def get_pre_formatted(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_pre_formatted.call(this, p)
  end
  def get_direction(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_direction.call(this, p)
  end
  def get_block_direction(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_block_direction.call(this, p)
  end
  def get_ol(this : IHTMLComputedStyle*, p : Int16*) : HRESULT
    @lpVtbl.value.get_ol.call(this, p)
  end
  def is_equal(this : IHTMLComputedStyle*, pcomputedstyle : IHTMLComputedStyle, pfequal : Int16*) : HRESULT
    @lpVtbl.value.is_equal.call(this, pcomputedstyle, pfequal)
  end
end
struct LibWin32::IDeveloperConsoleMessageReceiver
  def query_interface(this : IDeveloperConsoleMessageReceiver*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDeveloperConsoleMessageReceiver*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDeveloperConsoleMessageReceiver*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def write(this : IDeveloperConsoleMessageReceiver*, source : LibC::LPWSTR, level : DEV_CONSOLE_MESSAGE_LEVEL, messageid : Int32, messagetext : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write.call(this, source, level, messageid, messagetext)
  end
  def write_with_url(this : IDeveloperConsoleMessageReceiver*, source : LibC::LPWSTR, level : DEV_CONSOLE_MESSAGE_LEVEL, messageid : Int32, messagetext : LibC::LPWSTR, fileurl : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.write_with_url.call(this, source, level, messageid, messagetext, fileurl)
  end
  def write_with_url_and_line(this : IDeveloperConsoleMessageReceiver*, source : LibC::LPWSTR, level : DEV_CONSOLE_MESSAGE_LEVEL, messageid : Int32, messagetext : LibC::LPWSTR, fileurl : LibC::LPWSTR, line : UInt32) : HRESULT
    @lpVtbl.value.write_with_url_and_line.call(this, source, level, messageid, messagetext, fileurl, line)
  end
  def write_with_url_line_and_column(this : IDeveloperConsoleMessageReceiver*, source : LibC::LPWSTR, level : DEV_CONSOLE_MESSAGE_LEVEL, messageid : Int32, messagetext : LibC::LPWSTR, fileurl : LibC::LPWSTR, line : UInt32, column : UInt32) : HRESULT
    @lpVtbl.value.write_with_url_line_and_column.call(this, source, level, messageid, messagetext, fileurl, line, column)
  end
end
struct LibWin32::IScriptEventHandler
  def query_interface(this : IScriptEventHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptEventHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptEventHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def function_name(this : IScriptEventHandler*, pbstrfunctionname : UInt8**) : HRESULT
    @lpVtbl.value.function_name.call(this, pbstrfunctionname)
  end
  def debug_document_context(this : IScriptEventHandler*, ppdebugdocumentcontext : IUnknown*) : HRESULT
    @lpVtbl.value.debug_document_context.call(this, ppdebugdocumentcontext)
  end
  def event_handler_dispatch(this : IScriptEventHandler*, ppdisphandler : IDispatch*) : HRESULT
    @lpVtbl.value.event_handler_dispatch.call(this, ppdisphandler)
  end
  def uses_capture(this : IScriptEventHandler*, pfusescapture : LibC::BOOL*) : HRESULT
    @lpVtbl.value.uses_capture.call(this, pfusescapture)
  end
  def cookie(this : IScriptEventHandler*, pullcookie : UInt64*) : HRESULT
    @lpVtbl.value.cookie.call(this, pullcookie)
  end
end
struct LibWin32::IDebugCallbackNotificationHandler
  def query_interface(this : IDebugCallbackNotificationHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDebugCallbackNotificationHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDebugCallbackNotificationHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def requested_callback_types(this : IDebugCallbackNotificationHandler*, pcallbackmask : UInt32*) : HRESULT
    @lpVtbl.value.requested_callback_types.call(this, pcallbackmask)
  end
  def before_dispatch_event(this : IDebugCallbackNotificationHandler*, pevent : IUnknown) : HRESULT
    @lpVtbl.value.before_dispatch_event.call(this, pevent)
  end
  def dispatch_event_complete(this : IDebugCallbackNotificationHandler*, pevent : IUnknown, propagationstatus : UInt32) : HRESULT
    @lpVtbl.value.dispatch_event_complete.call(this, pevent, propagationstatus)
  end
  def before_invoke_dom_callback(this : IDebugCallbackNotificationHandler*, pevent : IUnknown, pcallback : IScriptEventHandler, estage : DOM_EVENT_PHASE, propagationstatus : UInt32) : HRESULT
    @lpVtbl.value.before_invoke_dom_callback.call(this, pevent, pcallback, estage, propagationstatus)
  end
  def invoke_dom_callback_complete(this : IDebugCallbackNotificationHandler*, pevent : IUnknown, pcallback : IScriptEventHandler, estage : DOM_EVENT_PHASE, propagationstatus : UInt32) : HRESULT
    @lpVtbl.value.invoke_dom_callback_complete.call(this, pevent, pcallback, estage, propagationstatus)
  end
  def before_invoke_callback(this : IDebugCallbackNotificationHandler*, ecallbacktype : SCRIPT_TIMER_TYPE, callbackcookie : UInt32, pdisphandler : IDispatch, ullhandlercookie : UInt64, functionname : UInt8*, line : UInt32, column : UInt32, cchlength : UInt32, pdebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.before_invoke_callback.call(this, ecallbacktype, callbackcookie, pdisphandler, ullhandlercookie, functionname, line, column, cchlength, pdebugdocumentcontext)
  end
  def invoke_callback_complete(this : IDebugCallbackNotificationHandler*, ecallbacktype : SCRIPT_TIMER_TYPE, callbackcookie : UInt32, pdisphandler : IDispatch, ullhandlercookie : UInt64, functionname : UInt8*, line : UInt32, column : UInt32, cchlength : UInt32, pdebugdocumentcontext : IUnknown) : HRESULT
    @lpVtbl.value.invoke_callback_complete.call(this, ecallbacktype, callbackcookie, pdisphandler, ullhandlercookie, functionname, line, column, cchlength, pdebugdocumentcontext)
  end
end
struct LibWin32::IScriptEventHandlerSourceInfo
  def query_interface(this : IScriptEventHandlerSourceInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScriptEventHandlerSourceInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScriptEventHandlerSourceInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_source_info(this : IScriptEventHandlerSourceInfo*, pbstrfunctionname : UInt8**, line : UInt32*, column : UInt32*, cchlength : UInt32*) : HRESULT
    @lpVtbl.value.get_source_info.call(this, pbstrfunctionname, line, column, cchlength)
  end
end
struct LibWin32::IDOMEventRegistrationCallback
  def query_interface(this : IDOMEventRegistrationCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDOMEventRegistrationCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDOMEventRegistrationCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_dom_event_listener_added(this : IDOMEventRegistrationCallback*, pszeventtype : LibC::LPWSTR, phandler : IScriptEventHandler) : HRESULT
    @lpVtbl.value.on_dom_event_listener_added.call(this, pszeventtype, phandler)
  end
  def on_dom_event_listener_removed(this : IDOMEventRegistrationCallback*, ullcookie : UInt64) : HRESULT
    @lpVtbl.value.on_dom_event_listener_removed.call(this, ullcookie)
  end
end
struct LibWin32::IEventTarget2
  def query_interface(this : IEventTarget2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEventTarget2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEventTarget2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_registered_event_types(this : IEventTarget2*, ppeventtypearray : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_registered_event_types.call(this, ppeventtypearray)
  end
  def get_listeners_for_type(this : IEventTarget2*, pszeventtype : LibC::LPWSTR, ppeventhandlerarray : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_listeners_for_type.call(this, pszeventtype, ppeventhandlerarray)
  end
  def register_for_dom_event_listeners(this : IEventTarget2*, pcallback : IDOMEventRegistrationCallback) : HRESULT
    @lpVtbl.value.register_for_dom_event_listeners.call(this, pcallback)
  end
  def unregister_for_dom_event_listeners(this : IEventTarget2*, pcallback : IDOMEventRegistrationCallback) : HRESULT
    @lpVtbl.value.unregister_for_dom_event_listeners.call(this, pcallback)
  end
end
struct LibWin32::HTMLNamespaceEvents
  def query_interface(this : HTMLNamespaceEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : HTMLNamespaceEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : HTMLNamespaceEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : HTMLNamespaceEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : HTMLNamespaceEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : HTMLNamespaceEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : HTMLNamespaceEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLNamespace
  def query_interface(this : IHTMLNamespace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLNamespace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLNamespace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLNamespace*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLNamespace*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLNamespace*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLNamespace*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IHTMLNamespace*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, p)
  end
  def get_urn(this : IHTMLNamespace*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_urn.call(this, p)
  end
  def get_tag_names(this : IHTMLNamespace*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_tag_names.call(this, p)
  end
  def get_ready_state(this : IHTMLNamespace*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_ready_state.call(this, p)
  end
  def put_onreadystatechange(this : IHTMLNamespace*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_onreadystatechange.call(this, v)
  end
  def get_onreadystatechange(this : IHTMLNamespace*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_onreadystatechange.call(this, p)
  end
  def do_import(this : IHTMLNamespace*, bstrimplementationurl : UInt8*) : HRESULT
    @lpVtbl.value.do_import.call(this, bstrimplementationurl)
  end
  def attach_event(this : IHTMLNamespace*, event : UInt8*, pdisp : IDispatch, pfresult : Int16*) : HRESULT
    @lpVtbl.value.attach_event.call(this, event, pdisp, pfresult)
  end
  def detach_event(this : IHTMLNamespace*, event : UInt8*, pdisp : IDispatch) : HRESULT
    @lpVtbl.value.detach_event.call(this, event, pdisp)
  end
end
struct LibWin32::IHTMLNamespaceCollection
  def query_interface(this : IHTMLNamespaceCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLNamespaceCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLNamespaceCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLNamespaceCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLNamespaceCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLNamespaceCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLNamespaceCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLNamespaceCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def item(this : IHTMLNamespaceCollection*, index : VARIANT, ppnamespace : IDispatch*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppnamespace)
  end
  def add(this : IHTMLNamespaceCollection*, bstrnamespace : UInt8*, bstrurn : UInt8*, implementationurl : VARIANT, ppnamespace : IDispatch*) : HRESULT
    @lpVtbl.value.add.call(this, bstrnamespace, bstrurn, implementationurl, ppnamespace)
  end
end
struct LibWin32::DispHTMLNamespace
  def query_interface(this : DispHTMLNamespace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLNamespace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLNamespace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLNamespace*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLNamespace*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLNamespace*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLNamespace*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispHTMLNamespaceCollection
  def query_interface(this : DispHTMLNamespaceCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLNamespaceCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLNamespaceCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLNamespaceCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLNamespaceCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLNamespaceCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLNamespaceCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLPainter
  def query_interface(this : IHTMLPainter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPainter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPainter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def draw(this : IHTMLPainter*, rcbounds : RECT, rcupdate : RECT, ldrawflags : Int32, hdc : HDC, pvdrawobject : Void*) : HRESULT
    @lpVtbl.value.draw.call(this, rcbounds, rcupdate, ldrawflags, hdc, pvdrawobject)
  end
  def on_resize(this : IHTMLPainter*, size : SIZE) : HRESULT
    @lpVtbl.value.on_resize.call(this, size)
  end
  def get_painter_info(this : IHTMLPainter*, pinfo : HTML_PAINTER_INFO*) : HRESULT
    @lpVtbl.value.get_painter_info.call(this, pinfo)
  end
  def hit_test_point(this : IHTMLPainter*, pt : POINT, pbhit : LibC::BOOL*, plpartid : Int32*) : HRESULT
    @lpVtbl.value.hit_test_point.call(this, pt, pbhit, plpartid)
  end
end
struct LibWin32::IHTMLPaintSite
  def query_interface(this : IHTMLPaintSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPaintSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPaintSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invalidate_painter_info(this : IHTMLPaintSite*) : HRESULT
    @lpVtbl.value.invalidate_painter_info.call(this)
  end
  def invalidate_rect(this : IHTMLPaintSite*, prcinvalid : RECT*) : HRESULT
    @lpVtbl.value.invalidate_rect.call(this, prcinvalid)
  end
  def invalidate_region(this : IHTMLPaintSite*, rgninvalid : HRGN) : HRESULT
    @lpVtbl.value.invalidate_region.call(this, rgninvalid)
  end
  def get_draw_info(this : IHTMLPaintSite*, lflags : Int32, pdrawinfo : HTML_PAINT_DRAW_INFO*) : HRESULT
    @lpVtbl.value.get_draw_info.call(this, lflags, pdrawinfo)
  end
  def transform_global_to_local(this : IHTMLPaintSite*, ptglobal : POINT, pptlocal : POINT*) : HRESULT
    @lpVtbl.value.transform_global_to_local.call(this, ptglobal, pptlocal)
  end
  def transform_local_to_global(this : IHTMLPaintSite*, ptlocal : POINT, pptglobal : POINT*) : HRESULT
    @lpVtbl.value.transform_local_to_global.call(this, ptlocal, pptglobal)
  end
  def get_hit_test_cookie(this : IHTMLPaintSite*, plcookie : Int32*) : HRESULT
    @lpVtbl.value.get_hit_test_cookie.call(this, plcookie)
  end
end
struct LibWin32::IHTMLPainterEventInfo
  def query_interface(this : IHTMLPainterEventInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPainterEventInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPainterEventInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_event_info_flags(this : IHTMLPainterEventInfo*, pleventinfoflags : Int32*) : HRESULT
    @lpVtbl.value.get_event_info_flags.call(this, pleventinfoflags)
  end
  def get_event_target(this : IHTMLPainterEventInfo*, ppelement : IHTMLElement*) : HRESULT
    @lpVtbl.value.get_event_target.call(this, ppelement)
  end
  def set_cursor(this : IHTMLPainterEventInfo*, lpartid : Int32) : HRESULT
    @lpVtbl.value.set_cursor.call(this, lpartid)
  end
  def string_from_part_id(this : IHTMLPainterEventInfo*, lpartid : Int32, pbstrpart : UInt8**) : HRESULT
    @lpVtbl.value.string_from_part_id.call(this, lpartid, pbstrpart)
  end
end
struct LibWin32::IHTMLPainterOverlay
  def query_interface(this : IHTMLPainterOverlay*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPainterOverlay*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPainterOverlay*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_move(this : IHTMLPainterOverlay*, rcdevice : RECT) : HRESULT
    @lpVtbl.value.on_move.call(this, rcdevice)
  end
end
struct LibWin32::IHTMLIPrintCollection
  def query_interface(this : IHTMLIPrintCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLIPrintCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLIPrintCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLIPrintCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLIPrintCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLIPrintCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLIPrintCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_length(this : IHTMLIPrintCollection*, p : Int32*) : HRESULT
    @lpVtbl.value.get_length.call(this, p)
  end
  def get__new_enum(this : IHTMLIPrintCollection*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, p)
  end
  def item(this : IHTMLIPrintCollection*, index : Int32, ppiprint : IUnknown*) : HRESULT
    @lpVtbl.value.item.call(this, index, ppiprint)
  end
end
struct LibWin32::IEnumPrivacyRecords
  def query_interface(this : IEnumPrivacyRecords*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumPrivacyRecords*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumPrivacyRecords*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def reset(this : IEnumPrivacyRecords*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def get_size(this : IEnumPrivacyRecords*, psize : UInt32*) : HRESULT
    @lpVtbl.value.get_size.call(this, psize)
  end
  def get_privacy_impacted(this : IEnumPrivacyRecords*, pstate : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_privacy_impacted.call(this, pstate)
  end
  def next(this : IEnumPrivacyRecords*, pbstrurl : UInt8**, pbstrpolicyref : UInt8**, pdwreserved : Int32*, pdwprivacyflags : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, pbstrurl, pbstrpolicyref, pdwreserved, pdwprivacyflags)
  end
end
struct LibWin32::IWPCBlockedUrls
  def query_interface(this : IWPCBlockedUrls*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWPCBlockedUrls*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWPCBlockedUrls*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_count(this : IWPCBlockedUrls*, pdwcount : UInt32*) : HRESULT
    @lpVtbl.value.get_count.call(this, pdwcount)
  end
  def get_url(this : IWPCBlockedUrls*, dwidx : UInt32, pbstrurl : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, dwidx, pbstrurl)
  end
end
struct LibWin32::IHTMLDOMConstructorCollection
  def query_interface(this : IHTMLDOMConstructorCollection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDOMConstructorCollection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDOMConstructorCollection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDOMConstructorCollection*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDOMConstructorCollection*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDOMConstructorCollection*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDOMConstructorCollection*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_attr(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_attr.call(this, p)
  end
  def get_behavior_urns_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_behavior_urns_collection.call(this, p)
  end
  def get_bookmark_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_bookmark_collection.call(this, p)
  end
  def get_compatible_info(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_compatible_info.call(this, p)
  end
  def get_compatible_info_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_compatible_info_collection.call(this, p)
  end
  def get_control_range_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_control_range_collection.call(this, p)
  end
  def get_css_current_style_declaration(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_current_style_declaration.call(this, p)
  end
  def get_css_rule_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_rule_list.call(this, p)
  end
  def get_css_rule_style_declaration(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_rule_style_declaration.call(this, p)
  end
  def get_css_style_declaration(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_style_declaration.call(this, p)
  end
  def get_css_style_rule(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_style_rule.call(this, p)
  end
  def get_css_style_sheet(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_css_style_sheet.call(this, p)
  end
  def get_data_transfer(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_data_transfer.call(this, p)
  end
  def get_dom_implementation(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_dom_implementation.call(this, p)
  end
  def get_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_element.call(this, p)
  end
  def get_event(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_event.call(this, p)
  end
  def get_history(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_history.call(this, p)
  end
  def get_htc_element_behavior_defaults(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htc_element_behavior_defaults.call(this, p)
  end
  def get_html_anchor_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_anchor_element.call(this, p)
  end
  def get_html_area_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_area_element.call(this, p)
  end
  def get_html_areas_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_areas_collection.call(this, p)
  end
  def get_html_base_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_base_element.call(this, p)
  end
  def get_html_base_font_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_base_font_element.call(this, p)
  end
  def get_htmlbg_sound_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlbg_sound_element.call(this, p)
  end
  def get_html_block_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_block_element.call(this, p)
  end
  def get_html_body_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_body_element.call(this, p)
  end
  def get_htmlbr_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlbr_element.call(this, p)
  end
  def get_html_button_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_button_element.call(this, p)
  end
  def get_html_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_collection.call(this, p)
  end
  def get_html_comment_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_comment_element.call(this, p)
  end
  def get_htmldd_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmldd_element.call(this, p)
  end
  def get_html_div_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_div_element.call(this, p)
  end
  def get_html_document(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_document.call(this, p)
  end
  def get_htmld_list_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmld_list_element.call(this, p)
  end
  def get_htmldt_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmldt_element.call(this, p)
  end
  def get_html_embed_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_embed_element.call(this, p)
  end
  def get_html_field_set_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_field_set_element.call(this, p)
  end
  def get_html_font_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_font_element.call(this, p)
  end
  def get_html_form_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_form_element.call(this, p)
  end
  def get_html_frame_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_frame_element.call(this, p)
  end
  def get_html_frame_set_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_frame_set_element.call(this, p)
  end
  def get_html_generic_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_generic_element.call(this, p)
  end
  def get_html_head_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_head_element.call(this, p)
  end
  def get_html_heading_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_heading_element.call(this, p)
  end
  def get_htmlhr_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlhr_element.call(this, p)
  end
  def get_html_html_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_html_element.call(this, p)
  end
  def get_htmli_frame_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmli_frame_element.call(this, p)
  end
  def get_html_image_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_image_element.call(this, p)
  end
  def get_html_input_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_input_element.call(this, p)
  end
  def get_html_is_index_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_is_index_element.call(this, p)
  end
  def get_html_label_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_label_element.call(this, p)
  end
  def get_html_legend_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_legend_element.call(this, p)
  end
  def get_htmlli_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlli_element.call(this, p)
  end
  def get_html_link_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_link_element.call(this, p)
  end
  def get_html_map_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_map_element.call(this, p)
  end
  def get_html_marquee_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_marquee_element.call(this, p)
  end
  def get_html_meta_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_meta_element.call(this, p)
  end
  def get_html_modeless_dialog(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_modeless_dialog.call(this, p)
  end
  def get_html_namespace_info(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_namespace_info.call(this, p)
  end
  def get_html_namespace_info_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_namespace_info_collection.call(this, p)
  end
  def get_html_next_id_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_next_id_element.call(this, p)
  end
  def get_html_no_show_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_no_show_element.call(this, p)
  end
  def get_html_object_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_object_element.call(this, p)
  end
  def get_htmlo_list_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlo_list_element.call(this, p)
  end
  def get_html_option_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_option_element.call(this, p)
  end
  def get_html_paragraph_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_paragraph_element.call(this, p)
  end
  def get_html_param_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_param_element.call(this, p)
  end
  def get_html_phrase_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_phrase_element.call(this, p)
  end
  def get_html_plugins_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_plugins_collection.call(this, p)
  end
  def get_html_popup(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_popup.call(this, p)
  end
  def get_html_script_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_script_element.call(this, p)
  end
  def get_html_select_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_select_element.call(this, p)
  end
  def get_html_span_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_span_element.call(this, p)
  end
  def get_html_style_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_style_element.call(this, p)
  end
  def get_html_table_caption_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_caption_element.call(this, p)
  end
  def get_html_table_cell_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_cell_element.call(this, p)
  end
  def get_html_table_col_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_col_element.call(this, p)
  end
  def get_html_table_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_element.call(this, p)
  end
  def get_html_table_row_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_row_element.call(this, p)
  end
  def get_html_table_section_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_table_section_element.call(this, p)
  end
  def get_html_text_area_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_text_area_element.call(this, p)
  end
  def get_html_text_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_text_element.call(this, p)
  end
  def get_html_title_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_title_element.call(this, p)
  end
  def get_htmlu_list_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_htmlu_list_element.call(this, p)
  end
  def get_html_unknown_element(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_html_unknown_element.call(this, p)
  end
  def get_image(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_image.call(this, p)
  end
  def get_location(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_location.call(this, p)
  end
  def get_named_node_map(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_named_node_map.call(this, p)
  end
  def get_navigator(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_navigator.call(this, p)
  end
  def get_node_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_node_list.call(this, p)
  end
  def get_option(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_option.call(this, p)
  end
  def get_screen(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_screen.call(this, p)
  end
  def get_selection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
  def get_static_node_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_static_node_list.call(this, p)
  end
  def get_storage(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_storage.call(this, p)
  end
  def get_style_sheet_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_style_sheet_list.call(this, p)
  end
  def get_style_sheet_page(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_style_sheet_page.call(this, p)
  end
  def get_style_sheet_page_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_style_sheet_page_list.call(this, p)
  end
  def get_text(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_text.call(this, p)
  end
  def get_text_range(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_text_range.call(this, p)
  end
  def get_text_range_collection(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_text_range_collection.call(this, p)
  end
  def get_text_rectangle(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_text_rectangle.call(this, p)
  end
  def get_text_rectangle_list(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_text_rectangle_list.call(this, p)
  end
  def get_window(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_window.call(this, p)
  end
  def get_x_domain_request(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_x_domain_request.call(this, p)
  end
  def get_xml_http_request(this : IHTMLDOMConstructorCollection*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_xml_http_request.call(this, p)
  end
end
struct LibWin32::IHTMLDialog
  def query_interface(this : IHTMLDialog*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDialog*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDialog*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDialog*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDialog*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDialog*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDialog*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_dialog_top(this : IHTMLDialog*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_dialog_top.call(this, v)
  end
  def get_dialog_top(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_dialog_top.call(this, p)
  end
  def put_dialog_left(this : IHTMLDialog*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_dialog_left.call(this, v)
  end
  def get_dialog_left(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_dialog_left.call(this, p)
  end
  def put_dialog_width(this : IHTMLDialog*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_dialog_width.call(this, v)
  end
  def get_dialog_width(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_dialog_width.call(this, p)
  end
  def put_dialog_height(this : IHTMLDialog*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_dialog_height.call(this, v)
  end
  def get_dialog_height(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_dialog_height.call(this, p)
  end
  def get_dialog_arguments(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_dialog_arguments.call(this, p)
  end
  def get_menu_arguments(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_menu_arguments.call(this, p)
  end
  def put_return_value(this : IHTMLDialog*, v : VARIANT) : HRESULT
    @lpVtbl.value.put_return_value.call(this, v)
  end
  def get_return_value(this : IHTMLDialog*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_return_value.call(this, p)
  end
  def close(this : IHTMLDialog*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
  def to_string(this : IHTMLDialog*, string : UInt8**) : HRESULT
    @lpVtbl.value.to_string.call(this, string)
  end
end
struct LibWin32::IHTMLDialog2
  def query_interface(this : IHTMLDialog2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDialog2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDialog2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDialog2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDialog2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDialog2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDialog2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_status(this : IHTMLDialog2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_status.call(this, v)
  end
  def get_status(this : IHTMLDialog2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_status.call(this, p)
  end
  def put_resizable(this : IHTMLDialog2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_resizable.call(this, v)
  end
  def get_resizable(this : IHTMLDialog2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_resizable.call(this, p)
  end
end
struct LibWin32::IHTMLDialog3
  def query_interface(this : IHTMLDialog3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLDialog3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLDialog3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLDialog3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLDialog3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLDialog3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLDialog3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_unadorned(this : IHTMLDialog3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_unadorned.call(this, v)
  end
  def get_unadorned(this : IHTMLDialog3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_unadorned.call(this, p)
  end
  def put_dialog_hide(this : IHTMLDialog3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_dialog_hide.call(this, v)
  end
  def get_dialog_hide(this : IHTMLDialog3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_dialog_hide.call(this, p)
  end
end
struct LibWin32::IHTMLModelessInit
  def query_interface(this : IHTMLModelessInit*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLModelessInit*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLModelessInit*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLModelessInit*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLModelessInit*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLModelessInit*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLModelessInit*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_parameters(this : IHTMLModelessInit*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_parameters.call(this, p)
  end
  def get_option_string(this : IHTMLModelessInit*, p : VARIANT*) : HRESULT
    @lpVtbl.value.get_option_string.call(this, p)
  end
  def get_moniker(this : IHTMLModelessInit*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get_moniker.call(this, p)
  end
  def get_document(this : IHTMLModelessInit*, p : IUnknown*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
end
struct LibWin32::IHTMLPopup
  def query_interface(this : IHTMLPopup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPopup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPopup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPopup*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPopup*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPopup*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPopup*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def show(this : IHTMLPopup*, x : Int32, y : Int32, w : Int32, h : Int32, pelement : VARIANT*) : HRESULT
    @lpVtbl.value.show.call(this, x, y, w, h, pelement)
  end
  def hide(this : IHTMLPopup*) : HRESULT
    @lpVtbl.value.hide.call(this)
  end
  def get_document(this : IHTMLPopup*, p : IHTMLDocument*) : HRESULT
    @lpVtbl.value.get_document.call(this, p)
  end
  def get_is_open(this : IHTMLPopup*, p : Int16*) : HRESULT
    @lpVtbl.value.get_is_open.call(this, p)
  end
end
struct LibWin32::DispHTMLPopup
  def query_interface(this : DispHTMLPopup*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLPopup*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLPopup*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLPopup*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLPopup*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLPopup*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLPopup*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHTMLAppBehavior
  def query_interface(this : IHTMLAppBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAppBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAppBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAppBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAppBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAppBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAppBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_application_name(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_application_name.call(this, v)
  end
  def get_application_name(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_application_name.call(this, p)
  end
  def put_version(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_version.call(this, v)
  end
  def get_version(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_version.call(this, p)
  end
  def put_icon(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_icon.call(this, v)
  end
  def get_icon(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_icon.call(this, p)
  end
  def put_single_instance(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_single_instance.call(this, v)
  end
  def get_single_instance(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_single_instance.call(this, p)
  end
  def put_minimize_button(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_minimize_button.call(this, v)
  end
  def get_minimize_button(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_minimize_button.call(this, p)
  end
  def put_maximize_button(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_maximize_button.call(this, v)
  end
  def get_maximize_button(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_maximize_button.call(this, p)
  end
  def put_border(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border.call(this, v)
  end
  def get_border(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border.call(this, p)
  end
  def put_border_style(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_border_style.call(this, v)
  end
  def get_border_style(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_border_style.call(this, p)
  end
  def put_sys_menu(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_sys_menu.call(this, v)
  end
  def get_sys_menu(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_sys_menu.call(this, p)
  end
  def put_caption(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_caption.call(this, v)
  end
  def get_caption(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_caption.call(this, p)
  end
  def put_window_state(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_window_state.call(this, v)
  end
  def get_window_state(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_window_state.call(this, p)
  end
  def put_show_in_task_bar(this : IHTMLAppBehavior*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_show_in_task_bar.call(this, v)
  end
  def get_show_in_task_bar(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_show_in_task_bar.call(this, p)
  end
  def get_command_line(this : IHTMLAppBehavior*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_command_line.call(this, p)
  end
end
struct LibWin32::IHTMLAppBehavior2
  def query_interface(this : IHTMLAppBehavior2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAppBehavior2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAppBehavior2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAppBehavior2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAppBehavior2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAppBehavior2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAppBehavior2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_context_menu(this : IHTMLAppBehavior2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_context_menu.call(this, v)
  end
  def get_context_menu(this : IHTMLAppBehavior2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_context_menu.call(this, p)
  end
  def put_inner_border(this : IHTMLAppBehavior2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_inner_border.call(this, v)
  end
  def get_inner_border(this : IHTMLAppBehavior2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_inner_border.call(this, p)
  end
  def put_scroll(this : IHTMLAppBehavior2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scroll.call(this, v)
  end
  def get_scroll(this : IHTMLAppBehavior2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scroll.call(this, p)
  end
  def put_scroll_flat(this : IHTMLAppBehavior2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_scroll_flat.call(this, v)
  end
  def get_scroll_flat(this : IHTMLAppBehavior2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_scroll_flat.call(this, p)
  end
  def put_selection(this : IHTMLAppBehavior2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_selection.call(this, v)
  end
  def get_selection(this : IHTMLAppBehavior2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_selection.call(this, p)
  end
end
struct LibWin32::IHTMLAppBehavior3
  def query_interface(this : IHTMLAppBehavior3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLAppBehavior3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLAppBehavior3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLAppBehavior3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLAppBehavior3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLAppBehavior3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLAppBehavior3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_navigable(this : IHTMLAppBehavior3*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_navigable.call(this, v)
  end
  def get_navigable(this : IHTMLAppBehavior3*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_navigable.call(this, p)
  end
end
struct LibWin32::DispHTMLAppBehavior
  def query_interface(this : DispHTMLAppBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispHTMLAppBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispHTMLAppBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispHTMLAppBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispHTMLAppBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispHTMLAppBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispHTMLAppBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispIHTMLInputButtonElement
  def query_interface(this : DispIHTMLInputButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispIHTMLInputButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispIHTMLInputButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispIHTMLInputButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispIHTMLInputButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispIHTMLInputButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispIHTMLInputButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispIHTMLInputTextElement
  def query_interface(this : DispIHTMLInputTextElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispIHTMLInputTextElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispIHTMLInputTextElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispIHTMLInputTextElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispIHTMLInputTextElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispIHTMLInputTextElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispIHTMLInputTextElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispIHTMLInputFileElement
  def query_interface(this : DispIHTMLInputFileElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispIHTMLInputFileElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispIHTMLInputFileElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispIHTMLInputFileElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispIHTMLInputFileElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispIHTMLInputFileElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispIHTMLInputFileElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispIHTMLOptionButtonElement
  def query_interface(this : DispIHTMLOptionButtonElement*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispIHTMLOptionButtonElement*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispIHTMLOptionButtonElement*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispIHTMLOptionButtonElement*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispIHTMLOptionButtonElement*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispIHTMLOptionButtonElement*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispIHTMLOptionButtonElement*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::DispIHTMLInputImage
  def query_interface(this : DispIHTMLInputImage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DispIHTMLInputImage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DispIHTMLInputImage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DispIHTMLInputImage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DispIHTMLInputImage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DispIHTMLInputImage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DispIHTMLInputImage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IElementNamespace
  def query_interface(this : IElementNamespace*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementNamespace*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementNamespace*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_tag(this : IElementNamespace*, bstrtagname : UInt8*, lflags : Int32) : HRESULT
    @lpVtbl.value.add_tag.call(this, bstrtagname, lflags)
  end
end
struct LibWin32::IElementNamespaceTable
  def query_interface(this : IElementNamespaceTable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementNamespaceTable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementNamespaceTable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_namespace(this : IElementNamespaceTable*, bstrnamespace : UInt8*, bstrurn : UInt8*, lflags : Int32, pvarfactory : VARIANT*) : HRESULT
    @lpVtbl.value.add_namespace.call(this, bstrnamespace, bstrurn, lflags, pvarfactory)
  end
end
struct LibWin32::IElementNamespaceFactory
  def query_interface(this : IElementNamespaceFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementNamespaceFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementNamespaceFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create(this : IElementNamespaceFactory*, pnamespace : IElementNamespace) : HRESULT
    @lpVtbl.value.create.call(this, pnamespace)
  end
end
struct LibWin32::IElementNamespaceFactory2
  def query_interface(this : IElementNamespaceFactory2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementNamespaceFactory2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementNamespaceFactory2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create(this : IElementNamespaceFactory2*, pnamespace : IElementNamespace) : HRESULT
    @lpVtbl.value.create.call(this, pnamespace)
  end
  def create_with_implementation(this : IElementNamespaceFactory2*, pnamespace : IElementNamespace, bstrimplementation : UInt8*) : HRESULT
    @lpVtbl.value.create_with_implementation.call(this, pnamespace, bstrimplementation)
  end
end
struct LibWin32::IElementNamespaceFactoryCallback
  def query_interface(this : IElementNamespaceFactoryCallback*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementNamespaceFactoryCallback*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementNamespaceFactoryCallback*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def resolve(this : IElementNamespaceFactoryCallback*, bstrnamespace : UInt8*, bstrtagname : UInt8*, bstrattrs : UInt8*, pnamespace : IElementNamespace) : HRESULT
    @lpVtbl.value.resolve.call(this, bstrnamespace, bstrtagname, bstrattrs, pnamespace)
  end
end
struct LibWin32::IElementBehaviorSiteOM2
  def query_interface(this : IElementBehaviorSiteOM2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteOM2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteOM2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def register_event(this : IElementBehaviorSiteOM2*, pchevent : LibC::LPWSTR, lflags : Int32, plcookie : Int32*) : HRESULT
    @lpVtbl.value.register_event.call(this, pchevent, lflags, plcookie)
  end
  def get_event_cookie(this : IElementBehaviorSiteOM2*, pchevent : LibC::LPWSTR, plcookie : Int32*) : HRESULT
    @lpVtbl.value.get_event_cookie.call(this, pchevent, plcookie)
  end
  def fire_event(this : IElementBehaviorSiteOM2*, lcookie : Int32, peventobject : IHTMLEventObj) : HRESULT
    @lpVtbl.value.fire_event.call(this, lcookie, peventobject)
  end
  def create_event_object(this : IElementBehaviorSiteOM2*, ppeventobject : IHTMLEventObj*) : HRESULT
    @lpVtbl.value.create_event_object.call(this, ppeventobject)
  end
  def register_name(this : IElementBehaviorSiteOM2*, pchname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_name.call(this, pchname)
  end
  def register_urn(this : IElementBehaviorSiteOM2*, pchurn : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.register_urn.call(this, pchurn)
  end
  def get_defaults(this : IElementBehaviorSiteOM2*, ppdefaults : IHTMLElementDefaults*) : HRESULT
    @lpVtbl.value.get_defaults.call(this, ppdefaults)
  end
end
struct LibWin32::IElementBehaviorCategory
  def query_interface(this : IElementBehaviorCategory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorCategory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorCategory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_category(this : IElementBehaviorCategory*, ppchcategory : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_category.call(this, ppchcategory)
  end
end
struct LibWin32::IElementBehaviorSiteCategory
  def query_interface(this : IElementBehaviorSiteCategory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteCategory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteCategory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_related_behaviors(this : IElementBehaviorSiteCategory*, ldirection : Int32, pchcategory : LibC::LPWSTR, ppenumerator : IEnumUnknown*) : HRESULT
    @lpVtbl.value.get_related_behaviors.call(this, ldirection, pchcategory, ppenumerator)
  end
end
struct LibWin32::IElementBehaviorSubmit
  def query_interface(this : IElementBehaviorSubmit*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSubmit*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSubmit*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_submit_info(this : IElementBehaviorSubmit*, psubmitdata : IHTMLSubmitData) : HRESULT
    @lpVtbl.value.get_submit_info.call(this, psubmitdata)
  end
  def reset(this : IElementBehaviorSubmit*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
end
struct LibWin32::IElementBehaviorFocus
  def query_interface(this : IElementBehaviorFocus*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorFocus*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorFocus*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_focus_rect(this : IElementBehaviorFocus*, prect : RECT*) : HRESULT
    @lpVtbl.value.get_focus_rect.call(this, prect)
  end
end
struct LibWin32::IElementBehaviorLayout
  def query_interface(this : IElementBehaviorLayout*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorLayout*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorLayout*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_size(this : IElementBehaviorLayout*, dwflags : Int32, sizecontent : SIZE, ppttranslateby : POINT*, ppttopleft : POINT*, psizeproposed : SIZE*) : HRESULT
    @lpVtbl.value.get_size.call(this, dwflags, sizecontent, ppttranslateby, ppttopleft, psizeproposed)
  end
  def get_layout_info(this : IElementBehaviorLayout*, pllayoutinfo : Int32*) : HRESULT
    @lpVtbl.value.get_layout_info.call(this, pllayoutinfo)
  end
  def get_position(this : IElementBehaviorLayout*, lflags : Int32, ppttopleft : POINT*) : HRESULT
    @lpVtbl.value.get_position.call(this, lflags, ppttopleft)
  end
  def map_size(this : IElementBehaviorLayout*, psizein : SIZE*, prcout : RECT*) : HRESULT
    @lpVtbl.value.map_size.call(this, psizein, prcout)
  end
end
struct LibWin32::IElementBehaviorLayout2
  def query_interface(this : IElementBehaviorLayout2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorLayout2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorLayout2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_text_descent(this : IElementBehaviorLayout2*, pldescent : Int32*) : HRESULT
    @lpVtbl.value.get_text_descent.call(this, pldescent)
  end
end
struct LibWin32::IElementBehaviorSiteLayout
  def query_interface(this : IElementBehaviorSiteLayout*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteLayout*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteLayout*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def invalidate_layout_info(this : IElementBehaviorSiteLayout*) : HRESULT
    @lpVtbl.value.invalidate_layout_info.call(this)
  end
  def invalidate_size(this : IElementBehaviorSiteLayout*) : HRESULT
    @lpVtbl.value.invalidate_size.call(this)
  end
  def get_media_resolution(this : IElementBehaviorSiteLayout*, psizeresolution : SIZE*) : HRESULT
    @lpVtbl.value.get_media_resolution.call(this, psizeresolution)
  end
end
struct LibWin32::IElementBehaviorSiteLayout2
  def query_interface(this : IElementBehaviorSiteLayout2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IElementBehaviorSiteLayout2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IElementBehaviorSiteLayout2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_font_info(this : IElementBehaviorSiteLayout2*, plf : LOGFONTW*) : HRESULT
    @lpVtbl.value.get_font_info.call(this, plf)
  end
end
struct LibWin32::IHostBehaviorInit
  def query_interface(this : IHostBehaviorInit*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHostBehaviorInit*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHostBehaviorInit*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def populate_namespace_table(this : IHostBehaviorInit*) : HRESULT
    @lpVtbl.value.populate_namespace_table.call(this)
  end
end
struct LibWin32::ISurfacePresenter
  def query_interface(this : ISurfacePresenter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISurfacePresenter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISurfacePresenter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def present(this : ISurfacePresenter*, ubuffer : UInt32, pdirty : RECT*) : HRESULT
    @lpVtbl.value.present.call(this, ubuffer, pdirty)
  end
  def get_buffer(this : ISurfacePresenter*, backbufferindex : UInt32, riid : Guid*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_buffer.call(this, backbufferindex, riid, ppbuffer)
  end
  def is_current(this : ISurfacePresenter*, piscurrent : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_current.call(this, piscurrent)
  end
end
struct LibWin32::IViewObjectPresentSite
  def query_interface(this : IViewObjectPresentSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface_presenter(this : IViewObjectPresentSite*, pdevice : IUnknown, width : UInt32, height : UInt32, backbuffercount : UInt32, format : DXGI_FORMAT, mode : VIEW_OBJECT_ALPHA_MODE, ppqueue : ISurfacePresenter*) : HRESULT
    @lpVtbl.value.create_surface_presenter.call(this, pdevice, width, height, backbuffercount, format, mode, ppqueue)
  end
  def is_hardware_composition(this : IViewObjectPresentSite*, pishardwarecomposition : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_hardware_composition.call(this, pishardwarecomposition)
  end
  def set_composition_mode(this : IViewObjectPresentSite*, mode : VIEW_OBJECT_COMPOSITION_MODE) : HRESULT
    @lpVtbl.value.set_composition_mode.call(this, mode)
  end
end
struct LibWin32::ICanvasPixelArrayData
  def query_interface(this : ICanvasPixelArrayData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICanvasPixelArrayData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICanvasPixelArrayData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_buffer_pointer(this : ICanvasPixelArrayData*, ppbuffer : UInt8**, pbufferlength : UInt32*) : HRESULT
    @lpVtbl.value.get_buffer_pointer.call(this, ppbuffer, pbufferlength)
  end
end
struct LibWin32::IViewObjectPrint
  def query_interface(this : IViewObjectPrint*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPrint*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPrint*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_print_bitmap(this : IViewObjectPrint*, ppprintbitmap : IUnknown*) : HRESULT
    @lpVtbl.value.get_print_bitmap.call(this, ppprintbitmap)
  end
end
struct LibWin32::IViewObjectPresentNotifySite
  def query_interface(this : IViewObjectPresentNotifySite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentNotifySite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentNotifySite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface_presenter(this : IViewObjectPresentNotifySite*, pdevice : IUnknown, width : UInt32, height : UInt32, backbuffercount : UInt32, format : DXGI_FORMAT, mode : VIEW_OBJECT_ALPHA_MODE, ppqueue : ISurfacePresenter*) : HRESULT
    @lpVtbl.value.create_surface_presenter.call(this, pdevice, width, height, backbuffercount, format, mode, ppqueue)
  end
  def is_hardware_composition(this : IViewObjectPresentNotifySite*, pishardwarecomposition : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_hardware_composition.call(this, pishardwarecomposition)
  end
  def set_composition_mode(this : IViewObjectPresentNotifySite*, mode : VIEW_OBJECT_COMPOSITION_MODE) : HRESULT
    @lpVtbl.value.set_composition_mode.call(this, mode)
  end
  def request_frame(this : IViewObjectPresentNotifySite*) : HRESULT
    @lpVtbl.value.request_frame.call(this)
  end
end
struct LibWin32::IViewObjectPresentNotify
  def query_interface(this : IViewObjectPresentNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_pre_render(this : IViewObjectPresentNotify*) : HRESULT
    @lpVtbl.value.on_pre_render.call(this)
  end
end
struct LibWin32::ITrackingProtection
  def query_interface(this : ITrackingProtection*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITrackingProtection*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITrackingProtection*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def evaluate_url(this : ITrackingProtection*, bstrurl : UInt8*, pfallowed : LibC::BOOL*) : HRESULT
    @lpVtbl.value.evaluate_url.call(this, bstrurl, pfallowed)
  end
  def get_enabled(this : ITrackingProtection*, pfenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pfenabled)
  end
end
struct LibWin32::IBFCacheable
  def query_interface(this : IBFCacheable*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBFCacheable*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBFCacheable*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enter_bf_cache(this : IBFCacheable*) : HRESULT
    @lpVtbl.value.enter_bf_cache.call(this)
  end
  def exit_bf_cache(this : IBFCacheable*) : HRESULT
    @lpVtbl.value.exit_bf_cache.call(this)
  end
end
struct LibWin32::IDocObjectService
  def query_interface(this : IDocObjectService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocObjectService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocObjectService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def fire_before_navigate2(this : IDocObjectService*, pdispatch : IDispatch, lpszurl : LibC::LPWSTR, dwflags : UInt32, lpszframename : LibC::LPWSTR, ppostdata : UInt8*, cbpostdata : UInt32, lpszheaders : LibC::LPWSTR, fplaynavsound : LibC::BOOL, pfcancel : LibC::BOOL*) : HRESULT
    @lpVtbl.value.fire_before_navigate2.call(this, pdispatch, lpszurl, dwflags, lpszframename, ppostdata, cbpostdata, lpszheaders, fplaynavsound, pfcancel)
  end
  def fire_navigate_complete2(this : IDocObjectService*, phtmlwindow2 : IHTMLWindow2, dwflags : UInt32) : HRESULT
    @lpVtbl.value.fire_navigate_complete2.call(this, phtmlwindow2, dwflags)
  end
  def fire_download_begin(this : IDocObjectService*) : HRESULT
    @lpVtbl.value.fire_download_begin.call(this)
  end
  def fire_download_complete(this : IDocObjectService*) : HRESULT
    @lpVtbl.value.fire_download_complete.call(this)
  end
  def fire_document_complete(this : IDocObjectService*, phtmlwindow : IHTMLWindow2, dwflags : UInt32) : HRESULT
    @lpVtbl.value.fire_document_complete.call(this, phtmlwindow, dwflags)
  end
  def update_desktop_component(this : IDocObjectService*, phtmlwindow : IHTMLWindow2) : HRESULT
    @lpVtbl.value.update_desktop_component.call(this, phtmlwindow)
  end
  def get_pending_url(this : IDocObjectService*, pbstrpendingurl : UInt8**) : HRESULT
    @lpVtbl.value.get_pending_url.call(this, pbstrpendingurl)
  end
  def active_element_changed(this : IDocObjectService*, phtmlelement : IHTMLElement) : HRESULT
    @lpVtbl.value.active_element_changed.call(this, phtmlelement)
  end
  def get_url_search_component(this : IDocObjectService*, pbstrsearch : UInt8**) : HRESULT
    @lpVtbl.value.get_url_search_component.call(this, pbstrsearch)
  end
  def is_error_url(this : IDocObjectService*, lpszurl : LibC::LPWSTR, pfiserror : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_error_url.call(this, lpszurl, pfiserror)
  end
end
struct LibWin32::IDownloadManager
  def query_interface(this : IDownloadManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDownloadManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDownloadManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def download(this : IDownloadManager*, pmk : IMoniker, pbc : IBindCtx, dwbindverb : UInt32, grfbindf : Int32, pbindinfo : BINDINFO*, pszheaders : LibC::LPWSTR, pszredir : LibC::LPWSTR, uicp : UInt32) : HRESULT
    @lpVtbl.value.download.call(this, pmk, pbc, dwbindverb, grfbindf, pbindinfo, pszheaders, pszredir, uicp)
  end
end
struct LibWin32::IExtensionValidation
  def query_interface(this : IExtensionValidation*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IExtensionValidation*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IExtensionValidation*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def validate(this : IExtensionValidation*, extensionguid : Guid*, extensionmodulepath : LibC::LPWSTR, extensionfileversionms : UInt32, extensionfileversionls : UInt32, htmldocumenttop : IHTMLDocument2, htmldocumentsubframe : IHTMLDocument2, htmlelement : IHTMLElement, contexts : ExtensionValidationContexts, results : ExtensionValidationResults*) : HRESULT
    @lpVtbl.value.validate.call(this, extensionguid, extensionmodulepath, extensionfileversionms, extensionfileversionls, htmldocumenttop, htmldocumentsubframe, htmlelement, contexts, results)
  end
  def display_name(this : IExtensionValidation*, displayname : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.display_name.call(this, displayname)
  end
end
struct LibWin32::IHomePageSetting
  def query_interface(this : IHomePageSetting*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHomePageSetting*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHomePageSetting*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_home_page(this : IHomePageSetting*, hwnd : LibC::HANDLE, homepageuri : LibC::LPWSTR, brandingmessage : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_home_page.call(this, hwnd, homepageuri, brandingmessage)
  end
  def is_home_page(this : IHomePageSetting*, uri : LibC::LPWSTR, isdefault : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_home_page.call(this, uri, isdefault)
  end
  def set_home_page_to_browser_default(this : IHomePageSetting*) : HRESULT
    @lpVtbl.value.set_home_page_to_browser_default.call(this)
  end
end
struct LibWin32::ITargetNotify
  def query_interface(this : ITargetNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_create(this : ITargetNotify*, punkdestination : IUnknown, cbcookie : UInt32) : HRESULT
    @lpVtbl.value.on_create.call(this, punkdestination, cbcookie)
  end
  def on_reuse(this : ITargetNotify*, punkdestination : IUnknown) : HRESULT
    @lpVtbl.value.on_reuse.call(this, punkdestination)
  end
end
struct LibWin32::ITargetNotify2
  def query_interface(this : ITargetNotify2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetNotify2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetNotify2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_create(this : ITargetNotify2*, punkdestination : IUnknown, cbcookie : UInt32) : HRESULT
    @lpVtbl.value.on_create.call(this, punkdestination, cbcookie)
  end
  def on_reuse(this : ITargetNotify2*, punkdestination : IUnknown) : HRESULT
    @lpVtbl.value.on_reuse.call(this, punkdestination)
  end
  def get_option_string(this : ITargetNotify2*, pbstroptions : UInt8**) : HRESULT
    @lpVtbl.value.get_option_string.call(this, pbstroptions)
  end
end
struct LibWin32::ITargetFrame2
  def query_interface(this : ITargetFrame2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetFrame2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetFrame2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_frame_name(this : ITargetFrame2*, pszframename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_frame_name.call(this, pszframename)
  end
  def get_frame_name(this : ITargetFrame2*, ppszframename : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_frame_name.call(this, ppszframename)
  end
  def get_parent_frame(this : ITargetFrame2*, ppunkparent : IUnknown*) : HRESULT
    @lpVtbl.value.get_parent_frame.call(this, ppunkparent)
  end
  def set_frame_src(this : ITargetFrame2*, pszframesrc : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_frame_src.call(this, pszframesrc)
  end
  def get_frame_src(this : ITargetFrame2*, ppszframesrc : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_frame_src.call(this, ppszframesrc)
  end
  def get_frames_container(this : ITargetFrame2*, ppcontainer : IOleContainer*) : HRESULT
    @lpVtbl.value.get_frames_container.call(this, ppcontainer)
  end
  def set_frame_options(this : ITargetFrame2*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_frame_options.call(this, dwflags)
  end
  def get_frame_options(this : ITargetFrame2*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_frame_options.call(this, pdwflags)
  end
  def set_frame_margins(this : ITargetFrame2*, dwwidth : UInt32, dwheight : UInt32) : HRESULT
    @lpVtbl.value.set_frame_margins.call(this, dwwidth, dwheight)
  end
  def get_frame_margins(this : ITargetFrame2*, pdwwidth : UInt32*, pdwheight : UInt32*) : HRESULT
    @lpVtbl.value.get_frame_margins.call(this, pdwwidth, pdwheight)
  end
  def find_frame(this : ITargetFrame2*, psztargetname : LibC::LPWSTR, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame.call(this, psztargetname, dwflags, ppunktargetframe)
  end
  def get_target_alias(this : ITargetFrame2*, psztargetname : LibC::LPWSTR, ppsztargetalias : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_target_alias.call(this, psztargetname, ppsztargetalias)
  end
end
struct LibWin32::ITargetContainer
  def query_interface(this : ITargetContainer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetContainer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetContainer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_frame_url(this : ITargetContainer*, ppszframesrc : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_frame_url.call(this, ppszframesrc)
  end
  def get_frames_container(this : ITargetContainer*, ppcontainer : IOleContainer*) : HRESULT
    @lpVtbl.value.get_frames_container.call(this, ppcontainer)
  end
end
struct LibWin32::ITargetFrame
  def query_interface(this : ITargetFrame*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetFrame*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetFrame*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_frame_name(this : ITargetFrame*, pszframename : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_frame_name.call(this, pszframename)
  end
  def get_frame_name(this : ITargetFrame*, ppszframename : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_frame_name.call(this, ppszframename)
  end
  def get_parent_frame(this : ITargetFrame*, ppunkparent : IUnknown*) : HRESULT
    @lpVtbl.value.get_parent_frame.call(this, ppunkparent)
  end
  def find_frame(this : ITargetFrame*, psztargetname : LibC::LPWSTR, ppunkcontextframe : IUnknown, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame.call(this, psztargetname, ppunkcontextframe, dwflags, ppunktargetframe)
  end
  def set_frame_src(this : ITargetFrame*, pszframesrc : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.set_frame_src.call(this, pszframesrc)
  end
  def get_frame_src(this : ITargetFrame*, ppszframesrc : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.get_frame_src.call(this, ppszframesrc)
  end
  def get_frames_container(this : ITargetFrame*, ppcontainer : IOleContainer*) : HRESULT
    @lpVtbl.value.get_frames_container.call(this, ppcontainer)
  end
  def set_frame_options(this : ITargetFrame*, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_frame_options.call(this, dwflags)
  end
  def get_frame_options(this : ITargetFrame*, pdwflags : UInt32*) : HRESULT
    @lpVtbl.value.get_frame_options.call(this, pdwflags)
  end
  def set_frame_margins(this : ITargetFrame*, dwwidth : UInt32, dwheight : UInt32) : HRESULT
    @lpVtbl.value.set_frame_margins.call(this, dwwidth, dwheight)
  end
  def get_frame_margins(this : ITargetFrame*, pdwwidth : UInt32*, pdwheight : UInt32*) : HRESULT
    @lpVtbl.value.get_frame_margins.call(this, pdwwidth, pdwheight)
  end
  def remote_navigate(this : ITargetFrame*, clength : UInt32, puldata : UInt32*) : HRESULT
    @lpVtbl.value.remote_navigate.call(this, clength, puldata)
  end
  def on_child_frame_activate(this : ITargetFrame*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_activate.call(this, punkchildframe)
  end
  def on_child_frame_deactivate(this : ITargetFrame*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_deactivate.call(this, punkchildframe)
  end
end
struct LibWin32::ITargetEmbedding
  def query_interface(this : ITargetEmbedding*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetEmbedding*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetEmbedding*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_target_frame(this : ITargetEmbedding*, pptargetframe : ITargetFrame*) : HRESULT
    @lpVtbl.value.get_target_frame.call(this, pptargetframe)
  end
end
struct LibWin32::ITargetFramePriv
  def query_interface(this : ITargetFramePriv*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetFramePriv*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetFramePriv*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def find_frame_downwards(this : ITargetFramePriv*, psztargetname : LibC::LPWSTR, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame_downwards.call(this, psztargetname, dwflags, ppunktargetframe)
  end
  def find_frame_in_context(this : ITargetFramePriv*, psztargetname : LibC::LPWSTR, punkcontextframe : IUnknown, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame_in_context.call(this, psztargetname, punkcontextframe, dwflags, ppunktargetframe)
  end
  def on_child_frame_activate(this : ITargetFramePriv*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_activate.call(this, punkchildframe)
  end
  def on_child_frame_deactivate(this : ITargetFramePriv*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_deactivate.call(this, punkchildframe)
  end
  def navigate_hack(this : ITargetFramePriv*, grfhlnf : UInt32, pbc : IBindCtx, pibsc : IBindStatusCallback, psztargetname : LibC::LPWSTR, pszurl : LibC::LPWSTR, pszlocation : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.navigate_hack.call(this, grfhlnf, pbc, pibsc, psztargetname, pszurl, pszlocation)
  end
  def find_browser_by_index(this : ITargetFramePriv*, dwid : UInt32, ppunkbrowser : IUnknown*) : HRESULT
    @lpVtbl.value.find_browser_by_index.call(this, dwid, ppunkbrowser)
  end
end
struct LibWin32::ITargetFramePriv2
  def query_interface(this : ITargetFramePriv2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITargetFramePriv2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITargetFramePriv2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def find_frame_downwards(this : ITargetFramePriv2*, psztargetname : LibC::LPWSTR, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame_downwards.call(this, psztargetname, dwflags, ppunktargetframe)
  end
  def find_frame_in_context(this : ITargetFramePriv2*, psztargetname : LibC::LPWSTR, punkcontextframe : IUnknown, dwflags : UInt32, ppunktargetframe : IUnknown*) : HRESULT
    @lpVtbl.value.find_frame_in_context.call(this, psztargetname, punkcontextframe, dwflags, ppunktargetframe)
  end
  def on_child_frame_activate(this : ITargetFramePriv2*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_activate.call(this, punkchildframe)
  end
  def on_child_frame_deactivate(this : ITargetFramePriv2*, punkchildframe : IUnknown) : HRESULT
    @lpVtbl.value.on_child_frame_deactivate.call(this, punkchildframe)
  end
  def navigate_hack(this : ITargetFramePriv2*, grfhlnf : UInt32, pbc : IBindCtx, pibsc : IBindStatusCallback, psztargetname : LibC::LPWSTR, pszurl : LibC::LPWSTR, pszlocation : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.navigate_hack.call(this, grfhlnf, pbc, pibsc, psztargetname, pszurl, pszlocation)
  end
  def find_browser_by_index(this : ITargetFramePriv2*, dwid : UInt32, ppunkbrowser : IUnknown*) : HRESULT
    @lpVtbl.value.find_browser_by_index.call(this, dwid, ppunkbrowser)
  end
  def aggregated_navigation2(this : ITargetFramePriv2*, grfhlnf : UInt32, pbc : IBindCtx, pibsc : IBindStatusCallback, psztargetname : LibC::LPWSTR, puri : IUri, pszlocation : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.aggregated_navigation2.call(this, grfhlnf, pbc, pibsc, psztargetname, puri, pszlocation)
  end
end
struct LibWin32::ISurfacePresenterFlipBuffer
  def query_interface(this : ISurfacePresenterFlipBuffer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISurfacePresenterFlipBuffer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISurfacePresenterFlipBuffer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def begin_draw(this : ISurfacePresenterFlipBuffer*, riid : Guid*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.begin_draw.call(this, riid, ppbuffer)
  end
  def end_draw(this : ISurfacePresenterFlipBuffer*) : HRESULT
    @lpVtbl.value.end_draw.call(this)
  end
end
struct LibWin32::ISurfacePresenterFlip
  def query_interface(this : ISurfacePresenterFlip*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISurfacePresenterFlip*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISurfacePresenterFlip*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def present(this : ISurfacePresenterFlip*) : HRESULT
    @lpVtbl.value.present.call(this)
  end
  def get_buffer(this : ISurfacePresenterFlip*, backbufferindex : UInt32, riid : Guid*, ppbuffer : Void**) : HRESULT
    @lpVtbl.value.get_buffer.call(this, backbufferindex, riid, ppbuffer)
  end
end
struct LibWin32::ISurfacePresenterFlip2
  def query_interface(this : ISurfacePresenterFlip2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISurfacePresenterFlip2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISurfacePresenterFlip2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_rotation(this : ISurfacePresenterFlip2*, dxgirotation : DXGI_MODE_ROTATION) : HRESULT
    @lpVtbl.value.set_rotation.call(this, dxgirotation)
  end
end
struct LibWin32::IViewObjectPresentFlipSite
  def query_interface(this : IViewObjectPresentFlipSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentFlipSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentFlipSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_surface_presenter_flip(this : IViewObjectPresentFlipSite*, pdevice : IUnknown, width : UInt32, height : UInt32, backbuffercount : UInt32, format : DXGI_FORMAT, mode : VIEW_OBJECT_ALPHA_MODE, ppspflip : ISurfacePresenterFlip*) : HRESULT
    @lpVtbl.value.create_surface_presenter_flip.call(this, pdevice, width, height, backbuffercount, format, mode, ppspflip)
  end
  def get_device_luid(this : IViewObjectPresentFlipSite*, pluid : LUID*) : HRESULT
    @lpVtbl.value.get_device_luid.call(this, pluid)
  end
  def enter_full_screen(this : IViewObjectPresentFlipSite*) : HRESULT
    @lpVtbl.value.enter_full_screen.call(this)
  end
  def exit_full_screen(this : IViewObjectPresentFlipSite*) : HRESULT
    @lpVtbl.value.exit_full_screen.call(this)
  end
  def is_full_screen(this : IViewObjectPresentFlipSite*, pffullscreen : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_full_screen.call(this, pffullscreen)
  end
  def get_bounding_rect(this : IViewObjectPresentFlipSite*, prect : RECT*) : HRESULT
    @lpVtbl.value.get_bounding_rect.call(this, prect)
  end
  def get_metrics(this : IViewObjectPresentFlipSite*, ppos : POINT*, psize : SIZE*, pscalex : Float32*, pscaley : Float32*) : HRESULT
    @lpVtbl.value.get_metrics.call(this, ppos, psize, pscalex, pscaley)
  end
  def get_full_screen_size(this : IViewObjectPresentFlipSite*, psize : SIZE*) : HRESULT
    @lpVtbl.value.get_full_screen_size.call(this, psize)
  end
end
struct LibWin32::IViewObjectPresentFlipSite2
  def query_interface(this : IViewObjectPresentFlipSite2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentFlipSite2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentFlipSite2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_rotation_for_current_output(this : IViewObjectPresentFlipSite2*, pdxgirotation : DXGI_MODE_ROTATION*) : HRESULT
    @lpVtbl.value.get_rotation_for_current_output.call(this, pdxgirotation)
  end
end
struct LibWin32::IViewObjectPresentFlip
  def query_interface(this : IViewObjectPresentFlip*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentFlip*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentFlip*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_render(this : IViewObjectPresentFlip*, frecreatepresenter : LibC::BOOL) : HRESULT
    @lpVtbl.value.notify_render.call(this, frecreatepresenter)
  end
  def render_object_to_bitmap(this : IViewObjectPresentFlip*, pbitmap : IUnknown) : HRESULT
    @lpVtbl.value.render_object_to_bitmap.call(this, pbitmap)
  end
  def render_object_to_shared_buffer(this : IViewObjectPresentFlip*, pbuffer : ISurfacePresenterFlipBuffer) : HRESULT
    @lpVtbl.value.render_object_to_shared_buffer.call(this, pbuffer)
  end
end
struct LibWin32::IViewObjectPresentFlip2
  def query_interface(this : IViewObjectPresentFlip2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IViewObjectPresentFlip2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IViewObjectPresentFlip2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def notify_leaving_view(this : IViewObjectPresentFlip2*) : HRESULT
    @lpVtbl.value.notify_leaving_view.call(this)
  end
end
struct LibWin32::IActiveXUIHandlerSite2
  def query_interface(this : IActiveXUIHandlerSite2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveXUIHandlerSite2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveXUIHandlerSite2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_suspension_exemption(this : IActiveXUIHandlerSite2*, pullcookie : UInt64*) : HRESULT
    @lpVtbl.value.add_suspension_exemption.call(this, pullcookie)
  end
  def remove_suspension_exemption(this : IActiveXUIHandlerSite2*, ullcookie : UInt64) : HRESULT
    @lpVtbl.value.remove_suspension_exemption.call(this, ullcookie)
  end
end
struct LibWin32::ICaretPositionProvider
  def query_interface(this : ICaretPositionProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICaretPositionProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICaretPositionProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_caret_position(this : ICaretPositionProvider*, pptcaret : POINT*, pflheight : Float32*) : HRESULT
    @lpVtbl.value.get_caret_position.call(this, pptcaret, pflheight)
  end
end
struct LibWin32::ITridentTouchInput
  def query_interface(this : ITridentTouchInput*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITridentTouchInput*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITridentTouchInput*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_pointer_message(this : ITridentTouchInput*, msg : UInt32, wparam : LibC::UINT_PTR, lparam : LPARAM, pfallowmanipulations : LibC::BOOL*) : HRESULT
    @lpVtbl.value.on_pointer_message.call(this, msg, wparam, lparam, pfallowmanipulations)
  end
end
struct LibWin32::ITridentTouchInputSite
  def query_interface(this : ITridentTouchInputSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITridentTouchInputSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITridentTouchInputSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_manipulation_mode(this : ITridentTouchInputSite*, mstouchaction : Stylemstouchaction) : HRESULT
    @lpVtbl.value.set_manipulation_mode.call(this, mstouchaction)
  end
  def zoom_to_point(this : ITridentTouchInputSite*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.zoom_to_point.call(this, x, y)
  end
end
struct LibWin32::IMediaActivityNotifySite
  def query_interface(this : IMediaActivityNotifySite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMediaActivityNotifySite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMediaActivityNotifySite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_media_activity_started(this : IMediaActivityNotifySite*, mediaactivitytype : MediaActivityNotifyType) : HRESULT
    @lpVtbl.value.on_media_activity_started.call(this, mediaactivitytype)
  end
  def on_media_activity_stopped(this : IMediaActivityNotifySite*, mediaactivitytype : MediaActivityNotifyType) : HRESULT
    @lpVtbl.value.on_media_activity_stopped.call(this, mediaactivitytype)
  end
end
struct LibWin32::IAudioSessionSite
  def query_interface(this : IAudioSessionSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAudioSessionSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAudioSessionSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_audio_session_guid(this : IAudioSessionSite*, audiosessionguid : Guid*) : HRESULT
    @lpVtbl.value.get_audio_session_guid.call(this, audiosessionguid)
  end
  def on_audio_stream_created(this : IAudioSessionSite*, endpointid : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_audio_stream_created.call(this, endpointid)
  end
  def on_audio_stream_destroyed(this : IAudioSessionSite*, endpointid : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.on_audio_stream_destroyed.call(this, endpointid)
  end
end
struct LibWin32::IPrintTaskRequestHandler
  def query_interface(this : IPrintTaskRequestHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrintTaskRequestHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrintTaskRequestHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def handle_print_task_request(this : IPrintTaskRequestHandler*, pprinttaskrequest : IInspectable) : HRESULT
    @lpVtbl.value.handle_print_task_request.call(this, pprinttaskrequest)
  end
end
struct LibWin32::IPrintTaskRequestFactory
  def query_interface(this : IPrintTaskRequestFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPrintTaskRequestFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPrintTaskRequestFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_print_task_request(this : IPrintTaskRequestFactory*, pprinttaskrequesthandler : IPrintTaskRequestHandler) : HRESULT
    @lpVtbl.value.create_print_task_request.call(this, pprinttaskrequesthandler)
  end
end
struct LibWin32::IScrollableContextMenu
  def query_interface(this : IScrollableContextMenu*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScrollableContextMenu*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScrollableContextMenu*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_item(this : IScrollableContextMenu*, itemtext : LibC::LPWSTR, cmdid : UInt32) : HRESULT
    @lpVtbl.value.add_item.call(this, itemtext, cmdid)
  end
  def show_modal(this : IScrollableContextMenu*, x : Int32, y : Int32, cmdid : UInt32*) : HRESULT
    @lpVtbl.value.show_modal.call(this, x, y, cmdid)
  end
end
struct LibWin32::IScrollableContextMenu2
  def query_interface(this : IScrollableContextMenu2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IScrollableContextMenu2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IScrollableContextMenu2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_item(this : IScrollableContextMenu2*, itemtext : LibC::LPWSTR, cmdid : UInt32) : HRESULT
    @lpVtbl.value.add_item.call(this, itemtext, cmdid)
  end
  def show_modal(this : IScrollableContextMenu2*, x : Int32, y : Int32, cmdid : UInt32*) : HRESULT
    @lpVtbl.value.show_modal.call(this, x, y, cmdid)
  end
  def add_separator(this : IScrollableContextMenu2*) : HRESULT
    @lpVtbl.value.add_separator.call(this)
  end
  def set_placement(this : IScrollableContextMenu2*, scmp : SCROLLABLECONTEXTMENU_PLACEMENT) : HRESULT
    @lpVtbl.value.set_placement.call(this, scmp)
  end
end
struct LibWin32::IActiveXUIHandlerSite
  def query_interface(this : IActiveXUIHandlerSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveXUIHandlerSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveXUIHandlerSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_scrollable_context_menu(this : IActiveXUIHandlerSite*, scrollablecontextmenu : IScrollableContextMenu*) : HRESULT
    @lpVtbl.value.create_scrollable_context_menu.call(this, scrollablecontextmenu)
  end
  def pick_file_and_get_result(this : IActiveXUIHandlerSite*, filepicker : IUnknown, allowmultipleselections : LibC::BOOL, result : IUnknown*) : HRESULT
    @lpVtbl.value.pick_file_and_get_result.call(this, filepicker, allowmultipleselections, result)
  end
end
struct LibWin32::IActiveXUIHandlerSite3
  def query_interface(this : IActiveXUIHandlerSite3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IActiveXUIHandlerSite3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IActiveXUIHandlerSite3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def message_box_w(this : IActiveXUIHandlerSite3*, hwnd : LibC::HANDLE, text : LibC::LPWSTR, caption : LibC::LPWSTR, type : UInt32, result : Int32*) : HRESULT
    @lpVtbl.value.message_box_w.call(this, hwnd, text, caption, type, result)
  end
end
struct LibWin32::IEnumManagerFrames
  def query_interface(this : IEnumManagerFrames*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumManagerFrames*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumManagerFrames*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumManagerFrames*, celt : UInt32, ppwindows : HANDLE**, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, ppwindows, pceltfetched)
  end
  def count(this : IEnumManagerFrames*, pcelt : UInt32*) : HRESULT
    @lpVtbl.value.count.call(this, pcelt)
  end
  def skip(this : IEnumManagerFrames*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumManagerFrames*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumManagerFrames*, ppenum : IEnumManagerFrames*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IInternetExplorerManager
  def query_interface(this : IInternetExplorerManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IInternetExplorerManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IInternetExplorerManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_object(this : IInternetExplorerManager*, dwconfig : UInt32, pszurl : LibC::LPWSTR, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.create_object.call(this, dwconfig, pszurl, riid, ppv)
  end
end
struct LibWin32::IInternetExplorerManager2
  def query_interface(this : IInternetExplorerManager2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IInternetExplorerManager2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IInternetExplorerManager2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enum_frame_windows(this : IInternetExplorerManager2*, ppenum : IEnumManagerFrames*) : HRESULT
    @lpVtbl.value.enum_frame_windows.call(this, ppenum)
  end
end
struct LibWin32::IIEWebDriverSite
  def query_interface(this : IIEWebDriverSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIEWebDriverSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIEWebDriverSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIEWebDriverSite*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIEWebDriverSite*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIEWebDriverSite*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIEWebDriverSite*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def window_operation(this : IIEWebDriverSite*, operationcode : UInt32, hwnd : UInt32) : HRESULT
    @lpVtbl.value.window_operation.call(this, operationcode, hwnd)
  end
  def detach_webdriver(this : IIEWebDriverSite*, punkwd : IUnknown) : HRESULT
    @lpVtbl.value.detach_webdriver.call(this, punkwd)
  end
  def get_capability_value(this : IIEWebDriverSite*, punkwd : IUnknown, capname : LibC::LPWSTR, capvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_capability_value.call(this, punkwd, capname, capvalue)
  end
end
struct LibWin32::IIEWebDriverManager
  def query_interface(this : IIEWebDriverManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIEWebDriverManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIEWebDriverManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIEWebDriverManager*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIEWebDriverManager*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIEWebDriverManager*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIEWebDriverManager*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def execute_command(this : IIEWebDriverManager*, command : LibC::LPWSTR, response : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.execute_command.call(this, command, response)
  end
end
struct LibWin32::IPeerFactory
  def query_interface(this : IPeerFactory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPeerFactory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPeerFactory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
end
struct LibWin32::IHomePage
  def query_interface(this : IHomePage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHomePage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHomePage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHomePage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHomePage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHomePage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHomePage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def navigate_home_page(this : IHomePage*) : HRESULT
    @lpVtbl.value.navigate_home_page.call(this)
  end
  def set_home_page(this : IHomePage*, bstrurl : UInt8*) : HRESULT
    @lpVtbl.value.set_home_page.call(this, bstrurl)
  end
  def is_home_page(this : IHomePage*, bstrurl : UInt8*, p : Int16*) : HRESULT
    @lpVtbl.value.is_home_page.call(this, bstrurl, p)
  end
end
struct LibWin32::IIntelliForms
  def query_interface(this : IIntelliForms*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIntelliForms*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIntelliForms*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIntelliForms*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIntelliForms*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIntelliForms*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIntelliForms*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_enabled(this : IIntelliForms*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_enabled.call(this, pval)
  end
  def put_enabled(this : IIntelliForms*, bval : Int16) : HRESULT
    @lpVtbl.value.put_enabled.call(this, bval)
  end
end
struct LibWin32::Iwfolders
  def query_interface(this : Iwfolders*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : Iwfolders*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : Iwfolders*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : Iwfolders*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : Iwfolders*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : Iwfolders*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : Iwfolders*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def navigate(this : Iwfolders*, bstrurl : UInt8*, pbstrretval : UInt8**) : HRESULT
    @lpVtbl.value.navigate.call(this, bstrurl, pbstrretval)
  end
  def navigate_frame(this : Iwfolders*, bstrurl : UInt8*, bstrtargetframe : UInt8*, pbstrretval : UInt8**) : HRESULT
    @lpVtbl.value.navigate_frame.call(this, bstrurl, bstrtargetframe, pbstrretval)
  end
  def navigate_no_site(this : Iwfolders*, bstrurl : UInt8*, bstrtargetframe : UInt8*, dwhwnd : UInt32, pwb : IUnknown) : HRESULT
    @lpVtbl.value.navigate_no_site.call(this, bstrurl, bstrtargetframe, dwhwnd, pwb)
  end
end
struct LibWin32::IAnchorClick
  def query_interface(this : IAnchorClick*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IAnchorClick*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IAnchorClick*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IAnchorClick*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IAnchorClick*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IAnchorClick*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IAnchorClick*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def proc_on_click(this : IAnchorClick*) : HRESULT
    @lpVtbl.value.proc_on_click.call(this)
  end
end
struct LibWin32::IHTMLUserDataOM
  def query_interface(this : IHTMLUserDataOM*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLUserDataOM*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLUserDataOM*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLUserDataOM*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLUserDataOM*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLUserDataOM*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLUserDataOM*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_xml_document(this : IHTMLUserDataOM*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_xml_document.call(this, p)
  end
  def save(this : IHTMLUserDataOM*, strname : UInt8*) : HRESULT
    @lpVtbl.value.save.call(this, strname)
  end
  def load(this : IHTMLUserDataOM*, strname : UInt8*) : HRESULT
    @lpVtbl.value.load.call(this, strname)
  end
  def get_attribute(this : IHTMLUserDataOM*, name : UInt8*, pvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, name, pvalue)
  end
  def set_attribute(this : IHTMLUserDataOM*, name : UInt8*, value : VARIANT) : HRESULT
    @lpVtbl.value.set_attribute.call(this, name, value)
  end
  def remove_attribute(this : IHTMLUserDataOM*, name : UInt8*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, name)
  end
  def put_expires(this : IHTMLUserDataOM*, bstr : UInt8*) : HRESULT
    @lpVtbl.value.put_expires.call(this, bstr)
  end
  def get_expires(this : IHTMLUserDataOM*, pbstr : UInt8**) : HRESULT
    @lpVtbl.value.get_expires.call(this, pbstr)
  end
end
struct LibWin32::IHTMLPersistDataOM
  def query_interface(this : IHTMLPersistDataOM*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPersistDataOM*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPersistDataOM*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHTMLPersistDataOM*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHTMLPersistDataOM*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHTMLPersistDataOM*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHTMLPersistDataOM*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_xml_document(this : IHTMLPersistDataOM*, p : IDispatch*) : HRESULT
    @lpVtbl.value.get_xml_document.call(this, p)
  end
  def get_attribute(this : IHTMLPersistDataOM*, name : UInt8*, pvalue : VARIANT*) : HRESULT
    @lpVtbl.value.get_attribute.call(this, name, pvalue)
  end
  def set_attribute(this : IHTMLPersistDataOM*, name : UInt8*, value : VARIANT) : HRESULT
    @lpVtbl.value.set_attribute.call(this, name, value)
  end
  def remove_attribute(this : IHTMLPersistDataOM*, name : UInt8*) : HRESULT
    @lpVtbl.value.remove_attribute.call(this, name)
  end
end
struct LibWin32::IHTMLPersistData
  def query_interface(this : IHTMLPersistData*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLPersistData*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLPersistData*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def save(this : IHTMLPersistData*, punk : IUnknown, ltype : Int32, fcontinuebroacast : Int16*) : HRESULT
    @lpVtbl.value.save.call(this, punk, ltype, fcontinuebroacast)
  end
  def load(this : IHTMLPersistData*, punk : IUnknown, ltype : Int32, fdodefault : Int16*) : HRESULT
    @lpVtbl.value.load.call(this, punk, ltype, fdodefault)
  end
  def query_type(this : IHTMLPersistData*, ltype : Int32, pfsupportstype : Int16*) : HRESULT
    @lpVtbl.value.query_type.call(this, ltype, pfsupportstype)
  end
end
struct LibWin32::IDownloadBehavior
  def query_interface(this : IDownloadBehavior*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDownloadBehavior*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDownloadBehavior*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDownloadBehavior*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDownloadBehavior*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDownloadBehavior*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDownloadBehavior*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def start_download(this : IDownloadBehavior*, bstrurl : UInt8*, pdispcallback : IDispatch) : HRESULT
    @lpVtbl.value.start_download.call(this, bstrurl, pdispcallback)
  end
end
struct LibWin32::ILayoutRect
  def query_interface(this : ILayoutRect*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ILayoutRect*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ILayoutRect*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : ILayoutRect*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : ILayoutRect*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : ILayoutRect*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : ILayoutRect*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def put_next_rect(this : ILayoutRect*, bstrelementid : UInt8*) : HRESULT
    @lpVtbl.value.put_next_rect.call(this, bstrelementid)
  end
  def get_next_rect(this : ILayoutRect*, pbstrelementid : UInt8**) : HRESULT
    @lpVtbl.value.get_next_rect.call(this, pbstrelementid)
  end
  def put_content_src(this : ILayoutRect*, varcontentsrc : VARIANT) : HRESULT
    @lpVtbl.value.put_content_src.call(this, varcontentsrc)
  end
  def get_content_src(this : ILayoutRect*, pvarcontentsrc : VARIANT*) : HRESULT
    @lpVtbl.value.get_content_src.call(this, pvarcontentsrc)
  end
  def put_honor_page_breaks(this : ILayoutRect*, v : Int16) : HRESULT
    @lpVtbl.value.put_honor_page_breaks.call(this, v)
  end
  def get_honor_page_breaks(this : ILayoutRect*, p : Int16*) : HRESULT
    @lpVtbl.value.get_honor_page_breaks.call(this, p)
  end
  def put_honor_page_rules(this : ILayoutRect*, v : Int16) : HRESULT
    @lpVtbl.value.put_honor_page_rules.call(this, v)
  end
  def get_honor_page_rules(this : ILayoutRect*, p : Int16*) : HRESULT
    @lpVtbl.value.get_honor_page_rules.call(this, p)
  end
  def put_next_rect_element(this : ILayoutRect*, pelem : IDispatch) : HRESULT
    @lpVtbl.value.put_next_rect_element.call(this, pelem)
  end
  def get_next_rect_element(this : ILayoutRect*, ppelem : IDispatch*) : HRESULT
    @lpVtbl.value.get_next_rect_element.call(this, ppelem)
  end
  def get_content_document(this : ILayoutRect*, pdoc : IDispatch*) : HRESULT
    @lpVtbl.value.get_content_document.call(this, pdoc)
  end
end
struct LibWin32::IDeviceRect
  def query_interface(this : IDeviceRect*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDeviceRect*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDeviceRect*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDeviceRect*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDeviceRect*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDeviceRect*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDeviceRect*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
end
struct LibWin32::IHeaderFooter
  def query_interface(this : IHeaderFooter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHeaderFooter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHeaderFooter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHeaderFooter*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHeaderFooter*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHeaderFooter*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHeaderFooter*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_html_head(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_head.call(this, p)
  end
  def get_html_foot(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_foot.call(this, p)
  end
  def put_text_head(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_head.call(this, v)
  end
  def get_text_head(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_head.call(this, p)
  end
  def put_text_foot(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_foot.call(this, v)
  end
  def get_text_foot(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_foot.call(this, p)
  end
  def put_page(this : IHeaderFooter*, v : UInt32) : HRESULT
    @lpVtbl.value.put_page.call(this, v)
  end
  def get_page(this : IHeaderFooter*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_page.call(this, p)
  end
  def put_page_total(this : IHeaderFooter*, v : UInt32) : HRESULT
    @lpVtbl.value.put_page_total.call(this, v)
  end
  def get_page_total(this : IHeaderFooter*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_page_total.call(this, p)
  end
  def put_url(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_title(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, v)
  end
  def get_title(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def put_date_short(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_date_short.call(this, v)
  end
  def get_date_short(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_date_short.call(this, p)
  end
  def put_date_long(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_date_long.call(this, v)
  end
  def get_date_long(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_date_long.call(this, p)
  end
  def put_time_short(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_time_short.call(this, v)
  end
  def get_time_short(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_time_short.call(this, p)
  end
  def put_time_long(this : IHeaderFooter*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_time_long.call(this, v)
  end
  def get_time_long(this : IHeaderFooter*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_time_long.call(this, p)
  end
end
struct LibWin32::IHeaderFooter2
  def query_interface(this : IHeaderFooter2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHeaderFooter2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHeaderFooter2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IHeaderFooter2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IHeaderFooter2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IHeaderFooter2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IHeaderFooter2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_html_head(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_head.call(this, p)
  end
  def get_html_foot(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_html_foot.call(this, p)
  end
  def put_text_head(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_head.call(this, v)
  end
  def get_text_head(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_head.call(this, p)
  end
  def put_text_foot(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_text_foot.call(this, v)
  end
  def get_text_foot(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_text_foot.call(this, p)
  end
  def put_page(this : IHeaderFooter2*, v : UInt32) : HRESULT
    @lpVtbl.value.put_page.call(this, v)
  end
  def get_page(this : IHeaderFooter2*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_page.call(this, p)
  end
  def put_page_total(this : IHeaderFooter2*, v : UInt32) : HRESULT
    @lpVtbl.value.put_page_total.call(this, v)
  end
  def get_page_total(this : IHeaderFooter2*, p : UInt32*) : HRESULT
    @lpVtbl.value.get_page_total.call(this, p)
  end
  def put_url(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_url.call(this, v)
  end
  def get_url(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_url.call(this, p)
  end
  def put_title(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_title.call(this, v)
  end
  def get_title(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_title.call(this, p)
  end
  def put_date_short(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_date_short.call(this, v)
  end
  def get_date_short(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_date_short.call(this, p)
  end
  def put_date_long(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_date_long.call(this, v)
  end
  def get_date_long(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_date_long.call(this, p)
  end
  def put_time_short(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_time_short.call(this, v)
  end
  def get_time_short(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_time_short.call(this, p)
  end
  def put_time_long(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_time_long.call(this, v)
  end
  def get_time_long(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_time_long.call(this, p)
  end
  def put_font(this : IHeaderFooter2*, v : UInt8*) : HRESULT
    @lpVtbl.value.put_font.call(this, v)
  end
  def get_font(this : IHeaderFooter2*, p : UInt8**) : HRESULT
    @lpVtbl.value.get_font.call(this, p)
  end
end
struct LibWin32::IHostDialogHelper
  def query_interface(this : IHostDialogHelper*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHostDialogHelper*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHostDialogHelper*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def show_html_dialog(this : IHostDialogHelper*, hwndparent : LibC::HANDLE, pmk : IMoniker, pvarargin : VARIANT*, pchoptions : LibC::LPWSTR, pvarargout : VARIANT*, punkhost : IUnknown) : HRESULT
    @lpVtbl.value.show_html_dialog.call(this, hwndparent, pmk, pvarargin, pchoptions, pvarargout, punkhost)
  end
end
struct LibWin32::IDocHostUIHandler
  def query_interface(this : IDocHostUIHandler*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocHostUIHandler*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocHostUIHandler*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def show_context_menu(this : IDocHostUIHandler*, dwid : UInt32, ppt : POINT*, pcmdtreserved : IUnknown, pdispreserved : IDispatch) : HRESULT
    @lpVtbl.value.show_context_menu.call(this, dwid, ppt, pcmdtreserved, pdispreserved)
  end
  def get_host_info(this : IDocHostUIHandler*, pinfo : DOCHOSTUIINFO*) : HRESULT
    @lpVtbl.value.get_host_info.call(this, pinfo)
  end
  def show_ui(this : IDocHostUIHandler*, dwid : UInt32, pactiveobject : IOleInPlaceActiveObject, pcommandtarget : IOleCommandTarget, pframe : IOleInPlaceFrame, pdoc : IOleInPlaceUIWindow) : HRESULT
    @lpVtbl.value.show_ui.call(this, dwid, pactiveobject, pcommandtarget, pframe, pdoc)
  end
  def hide_ui(this : IDocHostUIHandler*) : HRESULT
    @lpVtbl.value.hide_ui.call(this)
  end
  def update_ui(this : IDocHostUIHandler*) : HRESULT
    @lpVtbl.value.update_ui.call(this)
  end
  def enable_modeless(this : IDocHostUIHandler*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_modeless.call(this, fenable)
  end
  def on_doc_window_activate(this : IDocHostUIHandler*, factivate : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_doc_window_activate.call(this, factivate)
  end
  def on_frame_window_activate(this : IDocHostUIHandler*, factivate : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_frame_window_activate.call(this, factivate)
  end
  def resize_border(this : IDocHostUIHandler*, prcborder : RECT*, puiwindow : IOleInPlaceUIWindow, framewindow : LibC::BOOL) : HRESULT
    @lpVtbl.value.resize_border.call(this, prcborder, puiwindow, framewindow)
  end
  def translate_accelerator(this : IDocHostUIHandler*, lpmsg : MSG*, pguidcmdgroup : Guid*, ncmdid : UInt32) : HRESULT
    @lpVtbl.value.translate_accelerator.call(this, lpmsg, pguidcmdgroup, ncmdid)
  end
  def get_option_key_path(this : IDocHostUIHandler*, pchkey : LibC::LPWSTR*, dw : UInt32) : HRESULT
    @lpVtbl.value.get_option_key_path.call(this, pchkey, dw)
  end
  def get_drop_target(this : IDocHostUIHandler*, pdroptarget : IDropTarget, ppdroptarget : IDropTarget*) : HRESULT
    @lpVtbl.value.get_drop_target.call(this, pdroptarget, ppdroptarget)
  end
  def get_external(this : IDocHostUIHandler*, ppdispatch : IDispatch*) : HRESULT
    @lpVtbl.value.get_external.call(this, ppdispatch)
  end
  def translate_url(this : IDocHostUIHandler*, dwtranslate : UInt32, pchurlin : LibC::LPWSTR, ppchurlout : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.translate_url.call(this, dwtranslate, pchurlin, ppchurlout)
  end
  def filter_data_object(this : IDocHostUIHandler*, pdo : IDataObject, ppdoret : IDataObject*) : HRESULT
    @lpVtbl.value.filter_data_object.call(this, pdo, ppdoret)
  end
end
struct LibWin32::IDocHostUIHandler2
  def query_interface(this : IDocHostUIHandler2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocHostUIHandler2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocHostUIHandler2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def show_context_menu(this : IDocHostUIHandler2*, dwid : UInt32, ppt : POINT*, pcmdtreserved : IUnknown, pdispreserved : IDispatch) : HRESULT
    @lpVtbl.value.show_context_menu.call(this, dwid, ppt, pcmdtreserved, pdispreserved)
  end
  def get_host_info(this : IDocHostUIHandler2*, pinfo : DOCHOSTUIINFO*) : HRESULT
    @lpVtbl.value.get_host_info.call(this, pinfo)
  end
  def show_ui(this : IDocHostUIHandler2*, dwid : UInt32, pactiveobject : IOleInPlaceActiveObject, pcommandtarget : IOleCommandTarget, pframe : IOleInPlaceFrame, pdoc : IOleInPlaceUIWindow) : HRESULT
    @lpVtbl.value.show_ui.call(this, dwid, pactiveobject, pcommandtarget, pframe, pdoc)
  end
  def hide_ui(this : IDocHostUIHandler2*) : HRESULT
    @lpVtbl.value.hide_ui.call(this)
  end
  def update_ui(this : IDocHostUIHandler2*) : HRESULT
    @lpVtbl.value.update_ui.call(this)
  end
  def enable_modeless(this : IDocHostUIHandler2*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_modeless.call(this, fenable)
  end
  def on_doc_window_activate(this : IDocHostUIHandler2*, factivate : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_doc_window_activate.call(this, factivate)
  end
  def on_frame_window_activate(this : IDocHostUIHandler2*, factivate : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_frame_window_activate.call(this, factivate)
  end
  def resize_border(this : IDocHostUIHandler2*, prcborder : RECT*, puiwindow : IOleInPlaceUIWindow, framewindow : LibC::BOOL) : HRESULT
    @lpVtbl.value.resize_border.call(this, prcborder, puiwindow, framewindow)
  end
  def translate_accelerator(this : IDocHostUIHandler2*, lpmsg : MSG*, pguidcmdgroup : Guid*, ncmdid : UInt32) : HRESULT
    @lpVtbl.value.translate_accelerator.call(this, lpmsg, pguidcmdgroup, ncmdid)
  end
  def get_option_key_path(this : IDocHostUIHandler2*, pchkey : LibC::LPWSTR*, dw : UInt32) : HRESULT
    @lpVtbl.value.get_option_key_path.call(this, pchkey, dw)
  end
  def get_drop_target(this : IDocHostUIHandler2*, pdroptarget : IDropTarget, ppdroptarget : IDropTarget*) : HRESULT
    @lpVtbl.value.get_drop_target.call(this, pdroptarget, ppdroptarget)
  end
  def get_external(this : IDocHostUIHandler2*, ppdispatch : IDispatch*) : HRESULT
    @lpVtbl.value.get_external.call(this, ppdispatch)
  end
  def translate_url(this : IDocHostUIHandler2*, dwtranslate : UInt32, pchurlin : LibC::LPWSTR, ppchurlout : LibC::LPWSTR*) : HRESULT
    @lpVtbl.value.translate_url.call(this, dwtranslate, pchurlin, ppchurlout)
  end
  def filter_data_object(this : IDocHostUIHandler2*, pdo : IDataObject, ppdoret : IDataObject*) : HRESULT
    @lpVtbl.value.filter_data_object.call(this, pdo, ppdoret)
  end
  def get_override_key_path(this : IDocHostUIHandler2*, pchkey : LibC::LPWSTR*, dw : UInt32) : HRESULT
    @lpVtbl.value.get_override_key_path.call(this, pchkey, dw)
  end
end
struct LibWin32::ICustomDoc
  def query_interface(this : ICustomDoc*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ICustomDoc*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ICustomDoc*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_ui_handler(this : ICustomDoc*, puihandler : IDocHostUIHandler) : HRESULT
    @lpVtbl.value.set_ui_handler.call(this, puihandler)
  end
end
struct LibWin32::IDocHostShowUI
  def query_interface(this : IDocHostShowUI*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDocHostShowUI*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDocHostShowUI*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def show_message(this : IDocHostShowUI*, hwnd : LibC::HANDLE, lpstrtext : LibC::LPWSTR, lpstrcaption : LibC::LPWSTR, dwtype : UInt32, lpstrhelpfile : LibC::LPWSTR, dwhelpcontext : UInt32, plresult : LRESULT*) : HRESULT
    @lpVtbl.value.show_message.call(this, hwnd, lpstrtext, lpstrcaption, dwtype, lpstrhelpfile, dwhelpcontext, plresult)
  end
  def show_help(this : IDocHostShowUI*, hwnd : LibC::HANDLE, pszhelpfile : LibC::LPWSTR, ucommand : UInt32, dwdata : UInt32, ptmouse : POINT, pdispatchobjecthit : IDispatch) : HRESULT
    @lpVtbl.value.show_help.call(this, hwnd, pszhelpfile, ucommand, dwdata, ptmouse, pdispatchobjecthit)
  end
end
struct LibWin32::IClassFactoryEx
  def query_interface(this : IClassFactoryEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IClassFactoryEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IClassFactoryEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_instance(this : IClassFactoryEx*, punkouter : IUnknown, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.create_instance.call(this, punkouter, riid, ppvobject)
  end
  def lock_server(this : IClassFactoryEx*, flock : LibC::BOOL) : HRESULT
    @lpVtbl.value.lock_server.call(this, flock)
  end
  def create_instance_with_context(this : IClassFactoryEx*, punkcontext : IUnknown, punkouter : IUnknown, riid : Guid*, ppv : Void**) : HRESULT
    @lpVtbl.value.create_instance_with_context.call(this, punkcontext, punkouter, riid, ppv)
  end
end
struct LibWin32::IHTMLOMWindowServices
  def query_interface(this : IHTMLOMWindowServices*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IHTMLOMWindowServices*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IHTMLOMWindowServices*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def move_to(this : IHTMLOMWindowServices*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.move_to.call(this, x, y)
  end
  def move_by(this : IHTMLOMWindowServices*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.move_by.call(this, x, y)
  end
  def resize_to(this : IHTMLOMWindowServices*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.resize_to.call(this, x, y)
  end
  def resize_by(this : IHTMLOMWindowServices*, x : Int32, y : Int32) : HRESULT
    @lpVtbl.value.resize_by.call(this, x, y)
  end
end
struct LibWin32::IDiagnosticsScriptEngineSite
  def query_interface(this : IDiagnosticsScriptEngineSite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiagnosticsScriptEngineSite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiagnosticsScriptEngineSite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_message(this : IDiagnosticsScriptEngineSite*, pszdata : LibC::LPWSTR*, uldatacount : UInt32) : HRESULT
    @lpVtbl.value.on_message.call(this, pszdata, uldatacount)
  end
  def on_script_error(this : IDiagnosticsScriptEngineSite*, pscripterror : IActiveScriptError) : HRESULT
    @lpVtbl.value.on_script_error.call(this, pscripterror)
  end
end
struct LibWin32::IDiagnosticsScriptEngine
  def query_interface(this : IDiagnosticsScriptEngine*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiagnosticsScriptEngine*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiagnosticsScriptEngine*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def evaluate_script(this : IDiagnosticsScriptEngine*, pszscript : LibC::LPWSTR, pszscriptname : LibC::LPWSTR) : HRESULT
    @lpVtbl.value.evaluate_script.call(this, pszscript, pszscriptname)
  end
  def fire_script_message_event(this : IDiagnosticsScriptEngine*, psznames : LibC::LPWSTR*, pszvalues : LibC::LPWSTR*, ulpropertycount : UInt32) : HRESULT
    @lpVtbl.value.fire_script_message_event.call(this, psznames, pszvalues, ulpropertycount)
  end
  def detach(this : IDiagnosticsScriptEngine*) : HRESULT
    @lpVtbl.value.detach.call(this)
  end
end
struct LibWin32::IDiagnosticsScriptEngineProvider
  def query_interface(this : IDiagnosticsScriptEngineProvider*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiagnosticsScriptEngineProvider*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiagnosticsScriptEngineProvider*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_diagnostics_script_engine(this : IDiagnosticsScriptEngineProvider*, pscriptsite : IDiagnosticsScriptEngineSite, fdebuggingenabled : LibC::BOOL, ulprocessid : UInt32, ppengine : IDiagnosticsScriptEngine*) : HRESULT
    @lpVtbl.value.create_diagnostics_script_engine.call(this, pscriptsite, fdebuggingenabled, ulprocessid, ppengine)
  end
end
struct LibWin32::IOpenServiceActivityInput
  def query_interface(this : IOpenServiceActivityInput*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceActivityInput*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceActivityInput*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_variable(this : IOpenServiceActivityInput*, pwzvariablename : LibC::LPWSTR, pwzvariabletype : LibC::LPWSTR, pbstrvariablecontent : UInt8**) : HRESULT
    @lpVtbl.value.get_variable.call(this, pwzvariablename, pwzvariabletype, pbstrvariablecontent)
  end
  def has_variable(this : IOpenServiceActivityInput*, pwzvariablename : LibC::LPWSTR, pwzvariabletype : LibC::LPWSTR, pfhasvariable : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_variable.call(this, pwzvariablename, pwzvariabletype, pfhasvariable)
  end
  def get_type(this : IOpenServiceActivityInput*, ptype : OpenServiceActivityContentType*) : HRESULT
    @lpVtbl.value.get_type.call(this, ptype)
  end
end
struct LibWin32::IOpenServiceActivityOutputContext
  def query_interface(this : IOpenServiceActivityOutputContext*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceActivityOutputContext*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceActivityOutputContext*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def navigate(this : IOpenServiceActivityOutputContext*, pwzuri : LibC::LPWSTR, pwzmethod : LibC::LPWSTR, pwzheaders : LibC::LPWSTR, ppostdata : IStream) : HRESULT
    @lpVtbl.value.navigate.call(this, pwzuri, pwzmethod, pwzheaders, ppostdata)
  end
  def can_navigate(this : IOpenServiceActivityOutputContext*, pwzuri : LibC::LPWSTR, pwzmethod : LibC::LPWSTR, pwzheaders : LibC::LPWSTR, ppostdata : IStream, pfcannavigate : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_navigate.call(this, pwzuri, pwzmethod, pwzheaders, ppostdata, pfcannavigate)
  end
end
struct LibWin32::IOpenService
  def query_interface(this : IOpenService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_default(this : IOpenService*, pfisdefault : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_default.call(this, pfisdefault)
  end
  def set_default(this : IOpenService*, fdefault : LibC::BOOL, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_default.call(this, fdefault, hwnd)
  end
  def get_id(this : IOpenService*, pbstrid : UInt8**) : HRESULT
    @lpVtbl.value.get_id.call(this, pbstrid)
  end
end
struct LibWin32::IOpenServiceManager
  def query_interface(this : IOpenServiceManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def install_service(this : IOpenServiceManager*, pwzserviceurl : LibC::LPWSTR, ppservice : IOpenService*) : HRESULT
    @lpVtbl.value.install_service.call(this, pwzserviceurl, ppservice)
  end
  def uninstall_service(this : IOpenServiceManager*, pservice : IOpenService) : HRESULT
    @lpVtbl.value.uninstall_service.call(this, pservice)
  end
  def get_service_by_id(this : IOpenServiceManager*, pwzid : LibC::LPWSTR, ppservice : IOpenService*) : HRESULT
    @lpVtbl.value.get_service_by_id.call(this, pwzid, ppservice)
  end
end
struct LibWin32::IOpenServiceActivity
  def query_interface(this : IOpenServiceActivity*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceActivity*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceActivity*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def is_default(this : IOpenServiceActivity*, pfisdefault : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_default.call(this, pfisdefault)
  end
  def set_default(this : IOpenServiceActivity*, fdefault : LibC::BOOL, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_default.call(this, fdefault, hwnd)
  end
  def get_id(this : IOpenServiceActivity*, pbstrid : UInt8**) : HRESULT
    @lpVtbl.value.get_id.call(this, pbstrid)
  end
  def execute(this : IOpenServiceActivity*, pinput : IOpenServiceActivityInput, poutput : IOpenServiceActivityOutputContext) : HRESULT
    @lpVtbl.value.execute.call(this, pinput, poutput)
  end
  def can_execute(this : IOpenServiceActivity*, pinput : IOpenServiceActivityInput, poutput : IOpenServiceActivityOutputContext, pfcanexecute : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_execute.call(this, pinput, poutput, pfcanexecute)
  end
  def can_execute_type(this : IOpenServiceActivity*, type : OpenServiceActivityContentType, pfcanexecute : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_execute_type.call(this, type, pfcanexecute)
  end
  def preview(this : IOpenServiceActivity*, pinput : IOpenServiceActivityInput, poutput : IOpenServiceActivityOutputContext) : HRESULT
    @lpVtbl.value.preview.call(this, pinput, poutput)
  end
  def can_preview(this : IOpenServiceActivity*, pinput : IOpenServiceActivityInput, poutput : IOpenServiceActivityOutputContext, pfcanpreview : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_preview.call(this, pinput, poutput, pfcanpreview)
  end
  def can_preview_type(this : IOpenServiceActivity*, type : OpenServiceActivityContentType, pfcanpreview : LibC::BOOL*) : HRESULT
    @lpVtbl.value.can_preview_type.call(this, type, pfcanpreview)
  end
  def get_status_text(this : IOpenServiceActivity*, pinput : IOpenServiceActivityInput, pbstrstatustext : UInt8**) : HRESULT
    @lpVtbl.value.get_status_text.call(this, pinput, pbstrstatustext)
  end
  def get_homepage_url(this : IOpenServiceActivity*, pbstrhomepageurl : UInt8**) : HRESULT
    @lpVtbl.value.get_homepage_url.call(this, pbstrhomepageurl)
  end
  def get_display_name(this : IOpenServiceActivity*, pbstrdisplayname : UInt8**) : HRESULT
    @lpVtbl.value.get_display_name.call(this, pbstrdisplayname)
  end
  def get_description(this : IOpenServiceActivity*, pbstrdescription : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, pbstrdescription)
  end
  def get_category_name(this : IOpenServiceActivity*, pbstrcategoryname : UInt8**) : HRESULT
    @lpVtbl.value.get_category_name.call(this, pbstrcategoryname)
  end
  def get_icon_path(this : IOpenServiceActivity*, pbstriconpath : UInt8**) : HRESULT
    @lpVtbl.value.get_icon_path.call(this, pbstriconpath)
  end
  def get_icon(this : IOpenServiceActivity*, fsmallicon : LibC::BOOL, phicon : HANDLE*) : HRESULT
    @lpVtbl.value.get_icon.call(this, fsmallicon, phicon)
  end
  def get_description_file_path(this : IOpenServiceActivity*, pbstrxmlpath : UInt8**) : HRESULT
    @lpVtbl.value.get_description_file_path.call(this, pbstrxmlpath)
  end
  def get_download_url(this : IOpenServiceActivity*, pbstrxmluri : UInt8**) : HRESULT
    @lpVtbl.value.get_download_url.call(this, pbstrxmluri)
  end
  def get_install_url(this : IOpenServiceActivity*, pbstrinstalluri : UInt8**) : HRESULT
    @lpVtbl.value.get_install_url.call(this, pbstrinstalluri)
  end
  def is_enabled(this : IOpenServiceActivity*, pfisenabled : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_enabled.call(this, pfisenabled)
  end
  def set_enabled(this : IOpenServiceActivity*, fenable : LibC::BOOL) : HRESULT
    @lpVtbl.value.set_enabled.call(this, fenable)
  end
end
struct LibWin32::IEnumOpenServiceActivity
  def query_interface(this : IEnumOpenServiceActivity*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumOpenServiceActivity*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumOpenServiceActivity*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumOpenServiceActivity*, celt : UInt32, rgelt : IOpenServiceActivity*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgelt, pceltfetched)
  end
  def skip(this : IEnumOpenServiceActivity*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumOpenServiceActivity*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumOpenServiceActivity*, ppenum : IEnumOpenServiceActivity*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IOpenServiceActivityCategory
  def query_interface(this : IOpenServiceActivityCategory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceActivityCategory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceActivityCategory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def has_default_activity(this : IOpenServiceActivityCategory*, pfhasdefaultactivity : LibC::BOOL*) : HRESULT
    @lpVtbl.value.has_default_activity.call(this, pfhasdefaultactivity)
  end
  def get_default_activity(this : IOpenServiceActivityCategory*, ppdefaultactivity : IOpenServiceActivity*) : HRESULT
    @lpVtbl.value.get_default_activity.call(this, ppdefaultactivity)
  end
  def set_default_activity(this : IOpenServiceActivityCategory*, pactivity : IOpenServiceActivity, hwnd : LibC::HANDLE) : HRESULT
    @lpVtbl.value.set_default_activity.call(this, pactivity, hwnd)
  end
  def get_name(this : IOpenServiceActivityCategory*, pbstrname : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pbstrname)
  end
  def get_activity_enumerator(this : IOpenServiceActivityCategory*, pinput : IOpenServiceActivityInput, poutput : IOpenServiceActivityOutputContext, ppenumactivity : IEnumOpenServiceActivity*) : HRESULT
    @lpVtbl.value.get_activity_enumerator.call(this, pinput, poutput, ppenumactivity)
  end
end
struct LibWin32::IEnumOpenServiceActivityCategory
  def query_interface(this : IEnumOpenServiceActivityCategory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumOpenServiceActivityCategory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumOpenServiceActivityCategory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumOpenServiceActivityCategory*, celt : UInt32, rgelt : IOpenServiceActivityCategory*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgelt, pceltfetched)
  end
  def skip(this : IEnumOpenServiceActivityCategory*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumOpenServiceActivityCategory*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumOpenServiceActivityCategory*, ppenum : IEnumOpenServiceActivityCategory*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IOpenServiceActivityManager
  def query_interface(this : IOpenServiceActivityManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IOpenServiceActivityManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IOpenServiceActivityManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_category_enumerator(this : IOpenServiceActivityManager*, etype : OpenServiceActivityContentType, ppenum : IEnumOpenServiceActivityCategory*) : HRESULT
    @lpVtbl.value.get_category_enumerator.call(this, etype, ppenum)
  end
  def get_activity_by_id(this : IOpenServiceActivityManager*, pwzactivityid : LibC::LPWSTR, ppactivity : IOpenServiceActivity*) : HRESULT
    @lpVtbl.value.get_activity_by_id.call(this, pwzactivityid, ppactivity)
  end
  def get_activity_by_homepage_and_category(this : IOpenServiceActivityManager*, pwzhomepage : LibC::LPWSTR, pwzcategory : LibC::LPWSTR, ppactivity : IOpenServiceActivity*) : HRESULT
    @lpVtbl.value.get_activity_by_homepage_and_category.call(this, pwzhomepage, pwzcategory, ppactivity)
  end
  def get_version_cookie(this : IOpenServiceActivityManager*, pdwversioncookie : UInt32*) : HRESULT
    @lpVtbl.value.get_version_cookie.call(this, pdwversioncookie)
  end
end
struct LibWin32::IPersistHistory
  def query_interface(this : IPersistHistory*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IPersistHistory*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IPersistHistory*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_class_id(this : IPersistHistory*, pclassid : Guid*) : HRESULT
    @lpVtbl.value.get_class_id.call(this, pclassid)
  end
  def load_history(this : IPersistHistory*, pstream : IStream, pbc : IBindCtx) : HRESULT
    @lpVtbl.value.load_history.call(this, pstream, pbc)
  end
  def save_history(this : IPersistHistory*, pstream : IStream) : HRESULT
    @lpVtbl.value.save_history.call(this, pstream)
  end
  def set_position_cookie(this : IPersistHistory*, dwpositioncookie : UInt32) : HRESULT
    @lpVtbl.value.set_position_cookie.call(this, dwpositioncookie)
  end
  def get_position_cookie(this : IPersistHistory*, pdwpositioncookie : UInt32*) : HRESULT
    @lpVtbl.value.get_position_cookie.call(this, pdwpositioncookie)
  end
end
struct LibWin32::IEnumSTATURL
  def query_interface(this : IEnumSTATURL*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumSTATURL*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumSTATURL*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumSTATURL*, celt : UInt32, rgelt : STATURL*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgelt, pceltfetched)
  end
  def skip(this : IEnumSTATURL*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumSTATURL*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumSTATURL*, ppenum : IEnumSTATURL*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
  def set_filter(this : IEnumSTATURL*, poszfilter : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.set_filter.call(this, poszfilter, dwflags)
  end
end
struct LibWin32::IUrlHistoryStg
  def query_interface(this : IUrlHistoryStg*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IUrlHistoryStg*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IUrlHistoryStg*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_url(this : IUrlHistoryStg*, pocsurl : LibC::LPWSTR, pocstitle : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_url.call(this, pocsurl, pocstitle, dwflags)
  end
  def delete_url(this : IUrlHistoryStg*, pocsurl : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.delete_url.call(this, pocsurl, dwflags)
  end
  def query_url(this : IUrlHistoryStg*, pocsurl : LibC::LPWSTR, dwflags : UInt32, lpstaturl : STATURL*) : HRESULT
    @lpVtbl.value.query_url.call(this, pocsurl, dwflags, lpstaturl)
  end
  def bind_to_object(this : IUrlHistoryStg*, pocsurl : LibC::LPWSTR, riid : Guid*, ppvout : Void**) : HRESULT
    @lpVtbl.value.bind_to_object.call(this, pocsurl, riid, ppvout)
  end
  def enum_urls(this : IUrlHistoryStg*, ppenum : IEnumSTATURL*) : HRESULT
    @lpVtbl.value.enum_urls.call(this, ppenum)
  end
end
struct LibWin32::IUrlHistoryStg2
  def query_interface(this : IUrlHistoryStg2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IUrlHistoryStg2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IUrlHistoryStg2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def add_url(this : IUrlHistoryStg2*, pocsurl : LibC::LPWSTR, pocstitle : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.add_url.call(this, pocsurl, pocstitle, dwflags)
  end
  def delete_url(this : IUrlHistoryStg2*, pocsurl : LibC::LPWSTR, dwflags : UInt32) : HRESULT
    @lpVtbl.value.delete_url.call(this, pocsurl, dwflags)
  end
  def query_url(this : IUrlHistoryStg2*, pocsurl : LibC::LPWSTR, dwflags : UInt32, lpstaturl : STATURL*) : HRESULT
    @lpVtbl.value.query_url.call(this, pocsurl, dwflags, lpstaturl)
  end
  def bind_to_object(this : IUrlHistoryStg2*, pocsurl : LibC::LPWSTR, riid : Guid*, ppvout : Void**) : HRESULT
    @lpVtbl.value.bind_to_object.call(this, pocsurl, riid, ppvout)
  end
  def enum_urls(this : IUrlHistoryStg2*, ppenum : IEnumSTATURL*) : HRESULT
    @lpVtbl.value.enum_urls.call(this, ppenum)
  end
  def add_url_and_notify(this : IUrlHistoryStg2*, pocsurl : LibC::LPWSTR, pocstitle : LibC::LPWSTR, dwflags : UInt32, fwritehistory : LibC::BOOL, poctnotify : IOleCommandTarget, punkisfolder : IUnknown) : HRESULT
    @lpVtbl.value.add_url_and_notify.call(this, pocsurl, pocstitle, dwflags, fwritehistory, poctnotify, punkisfolder)
  end
  def clear_history(this : IUrlHistoryStg2*) : HRESULT
    @lpVtbl.value.clear_history.call(this)
  end
end
struct LibWin32::IUrlHistoryNotify
  def query_interface(this : IUrlHistoryNotify*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IUrlHistoryNotify*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IUrlHistoryNotify*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def query_status(this : IUrlHistoryNotify*, pguidcmdgroup : Guid*, ccmds : UInt32, prgcmds : OLECMD*, pcmdtext : OLECMDTEXT*) : HRESULT
    @lpVtbl.value.query_status.call(this, pguidcmdgroup, ccmds, prgcmds, pcmdtext)
  end
  def exec(this : IUrlHistoryNotify*, pguidcmdgroup : Guid*, ncmdid : UInt32, ncmdexecopt : UInt32, pvain : VARIANT*, pvaout : VARIANT*) : HRESULT
    @lpVtbl.value.exec.call(this, pguidcmdgroup, ncmdid, ncmdexecopt, pvain, pvaout)
  end
end
struct LibWin32::IWebBrowserEventsService
  def query_interface(this : IWebBrowserEventsService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebBrowserEventsService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebBrowserEventsService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def fire_before_navigate2_event(this : IWebBrowserEventsService*, pfcancel : Int16*) : HRESULT
    @lpVtbl.value.fire_before_navigate2_event.call(this, pfcancel)
  end
  def fire_navigate_complete2_event(this : IWebBrowserEventsService*) : HRESULT
    @lpVtbl.value.fire_navigate_complete2_event.call(this)
  end
  def fire_download_begin_event(this : IWebBrowserEventsService*) : HRESULT
    @lpVtbl.value.fire_download_begin_event.call(this)
  end
  def fire_download_complete_event(this : IWebBrowserEventsService*) : HRESULT
    @lpVtbl.value.fire_download_complete_event.call(this)
  end
  def fire_document_complete_event(this : IWebBrowserEventsService*) : HRESULT
    @lpVtbl.value.fire_document_complete_event.call(this)
  end
end
struct LibWin32::IWebBrowserEventsUrlService
  def query_interface(this : IWebBrowserEventsUrlService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWebBrowserEventsUrlService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWebBrowserEventsUrlService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_url_for_events(this : IWebBrowserEventsUrlService*, purl : UInt8**) : HRESULT
    @lpVtbl.value.get_url_for_events.call(this, purl)
  end
end
struct LibWin32::ITimerService
  def query_interface(this : ITimerService*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITimerService*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITimerService*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def create_timer(this : ITimerService*, preferencetimer : ITimer, ppnewtimer : ITimer*) : HRESULT
    @lpVtbl.value.create_timer.call(this, preferencetimer, ppnewtimer)
  end
  def get_named_timer(this : ITimerService*, rguidname : Guid*, pptimer : ITimer*) : HRESULT
    @lpVtbl.value.get_named_timer.call(this, rguidname, pptimer)
  end
  def set_named_timer_reference(this : ITimerService*, rguidname : Guid*, preferencetimer : ITimer) : HRESULT
    @lpVtbl.value.set_named_timer_reference.call(this, rguidname, preferencetimer)
  end
end
struct LibWin32::ITimer
  def query_interface(this : ITimer*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITimer*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITimer*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def advise(this : ITimer*, vtimemin : VARIANT, vtimemax : VARIANT, vtimeinterval : VARIANT, dwflags : UInt32, ptimersink : ITimerSink, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.advise.call(this, vtimemin, vtimemax, vtimeinterval, dwflags, ptimersink, pdwcookie)
  end
  def unadvise(this : ITimer*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.unadvise.call(this, dwcookie)
  end
  def freeze(this : ITimer*, ffreeze : LibC::BOOL) : HRESULT
    @lpVtbl.value.freeze.call(this, ffreeze)
  end
  def get_time(this : ITimer*, pvtime : VARIANT*) : HRESULT
    @lpVtbl.value.get_time.call(this, pvtime)
  end
end
struct LibWin32::ITimerEx
  def query_interface(this : ITimerEx*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITimerEx*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITimerEx*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def advise(this : ITimerEx*, vtimemin : VARIANT, vtimemax : VARIANT, vtimeinterval : VARIANT, dwflags : UInt32, ptimersink : ITimerSink, pdwcookie : UInt32*) : HRESULT
    @lpVtbl.value.advise.call(this, vtimemin, vtimemax, vtimeinterval, dwflags, ptimersink, pdwcookie)
  end
  def unadvise(this : ITimerEx*, dwcookie : UInt32) : HRESULT
    @lpVtbl.value.unadvise.call(this, dwcookie)
  end
  def freeze(this : ITimerEx*, ffreeze : LibC::BOOL) : HRESULT
    @lpVtbl.value.freeze.call(this, ffreeze)
  end
  def get_time(this : ITimerEx*, pvtime : VARIANT*) : HRESULT
    @lpVtbl.value.get_time.call(this, pvtime)
  end
  def set_mode(this : ITimerEx*, dwmode : UInt32) : HRESULT
    @lpVtbl.value.set_mode.call(this, dwmode)
  end
end
struct LibWin32::ITimerSink
  def query_interface(this : ITimerSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ITimerSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ITimerSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def on_timer(this : ITimerSink*, vtimeadvise : VARIANT) : HRESULT
    @lpVtbl.value.on_timer.call(this, vtimeadvise)
  end
end
struct LibWin32::IMapMIMEToCLSID
  def query_interface(this : IMapMIMEToCLSID*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMapMIMEToCLSID*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMapMIMEToCLSID*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def enable_default_mappings(this : IMapMIMEToCLSID*, benable : LibC::BOOL) : HRESULT
    @lpVtbl.value.enable_default_mappings.call(this, benable)
  end
  def map_mime_to_clsid(this : IMapMIMEToCLSID*, pszmimetype : LibC::LPWSTR, pclsid : Guid*) : HRESULT
    @lpVtbl.value.map_mime_to_clsid.call(this, pszmimetype, pclsid)
  end
  def set_mapping(this : IMapMIMEToCLSID*, pszmimetype : LibC::LPWSTR, dwmapmode : UInt32, clsid : Guid*) : HRESULT
    @lpVtbl.value.set_mapping.call(this, pszmimetype, dwmapmode, clsid)
  end
end
struct LibWin32::IImageDecodeFilter
  def query_interface(this : IImageDecodeFilter*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IImageDecodeFilter*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IImageDecodeFilter*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def initialize(this : IImageDecodeFilter*, peventsink : IImageDecodeEventSink) : HRESULT
    @lpVtbl.value.initialize.call(this, peventsink)
  end
  def process(this : IImageDecodeFilter*, pstream : IStream) : HRESULT
    @lpVtbl.value.process.call(this, pstream)
  end
  def terminate(this : IImageDecodeFilter*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.terminate.call(this, hrstatus)
  end
end
struct LibWin32::IImageDecodeEventSink
  def query_interface(this : IImageDecodeEventSink*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IImageDecodeEventSink*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IImageDecodeEventSink*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_surface(this : IImageDecodeEventSink*, nwidth : Int32, nheight : Int32, bfid : Guid*, npasses : UInt32, dwhints : UInt32, ppsurface : IUnknown*) : HRESULT
    @lpVtbl.value.get_surface.call(this, nwidth, nheight, bfid, npasses, dwhints, ppsurface)
  end
  def on_begin_decode(this : IImageDecodeEventSink*, pdwevents : UInt32*, pnformats : UInt32*, ppformats : Guid**) : HRESULT
    @lpVtbl.value.on_begin_decode.call(this, pdwevents, pnformats, ppformats)
  end
  def on_bits_complete(this : IImageDecodeEventSink*) : HRESULT
    @lpVtbl.value.on_bits_complete.call(this)
  end
  def on_decode_complete(this : IImageDecodeEventSink*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_decode_complete.call(this, hrstatus)
  end
  def on_palette(this : IImageDecodeEventSink*) : HRESULT
    @lpVtbl.value.on_palette.call(this)
  end
  def on_progress(this : IImageDecodeEventSink*, pbounds : RECT*, bcomplete : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_progress.call(this, pbounds, bcomplete)
  end
end
struct LibWin32::IImageDecodeEventSink2
  def query_interface(this : IImageDecodeEventSink2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IImageDecodeEventSink2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IImageDecodeEventSink2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_surface(this : IImageDecodeEventSink2*, nwidth : Int32, nheight : Int32, bfid : Guid*, npasses : UInt32, dwhints : UInt32, ppsurface : IUnknown*) : HRESULT
    @lpVtbl.value.get_surface.call(this, nwidth, nheight, bfid, npasses, dwhints, ppsurface)
  end
  def on_begin_decode(this : IImageDecodeEventSink2*, pdwevents : UInt32*, pnformats : UInt32*, ppformats : Guid**) : HRESULT
    @lpVtbl.value.on_begin_decode.call(this, pdwevents, pnformats, ppformats)
  end
  def on_bits_complete(this : IImageDecodeEventSink2*) : HRESULT
    @lpVtbl.value.on_bits_complete.call(this)
  end
  def on_decode_complete(this : IImageDecodeEventSink2*, hrstatus : HRESULT) : HRESULT
    @lpVtbl.value.on_decode_complete.call(this, hrstatus)
  end
  def on_palette(this : IImageDecodeEventSink2*) : HRESULT
    @lpVtbl.value.on_palette.call(this)
  end
  def on_progress(this : IImageDecodeEventSink2*, pbounds : RECT*, bcomplete : LibC::BOOL) : HRESULT
    @lpVtbl.value.on_progress.call(this, pbounds, bcomplete)
  end
  def is_alpha_premult_required(this : IImageDecodeEventSink2*, pfpremultalpha : LibC::BOOL*) : HRESULT
    @lpVtbl.value.is_alpha_premult_required.call(this, pfpremultalpha)
  end
end
struct LibWin32::ISniffStream
  def query_interface(this : ISniffStream*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : ISniffStream*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : ISniffStream*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : ISniffStream*, pstream : IStream) : HRESULT
    @lpVtbl.value.init.call(this, pstream)
  end
  def peek(this : ISniffStream*, pbuffer : Void*, nbytes : UInt32, pnbytesread : UInt32*) : HRESULT
    @lpVtbl.value.peek.call(this, pbuffer, nbytes, pnbytesread)
  end
end
struct LibWin32::IDithererImpl
  def query_interface(this : IDithererImpl*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDithererImpl*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDithererImpl*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def set_dest_color_table(this : IDithererImpl*, ncolors : UInt32, prgbcolors : RGBQUAD*) : HRESULT
    @lpVtbl.value.set_dest_color_table.call(this, ncolors, prgbcolors)
  end
  def set_event_sink(this : IDithererImpl*, peventsink : IImageDecodeEventSink) : HRESULT
    @lpVtbl.value.set_event_sink.call(this, peventsink)
  end
end
