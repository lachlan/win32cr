require "../system/com.cr"
require "../foundation.cr"
require "../system/ole.cr"
require "../system/com/structuredstorage.cr"
require "../system/addressbook.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:mapi32.dll")]
{% else %}
@[Link("mapi32")]
{% end %}
lib LibWin32
  IMAPI_SECTOR_SIZE = 2048_u32
  IMAPI2_DEFAULT_COMMAND_TIMEOUT = 10_u32
  DISPID_DDISCMASTER2EVENTS_DEVICEADDED = 256_u32
  DISPID_DDISCMASTER2EVENTS_DEVICEREMOVED = 257_u32
  DISPID_IDISCRECORDER2_EJECTMEDIA = 256_u32
  DISPID_IDISCRECORDER2_CLOSETRAY = 257_u32
  DISPID_IDISCRECORDER2_ACQUIREEXCLUSIVEACCESS = 258_u32
  DISPID_IDISCRECORDER2_RELEASEEXCLUSIVEACCESS = 259_u32
  DISPID_IDISCRECORDER2_DISABLEMCN = 260_u32
  DISPID_IDISCRECORDER2_ENABLEMCN = 261_u32
  DISPID_IDISCRECORDER2_INITIALIZEDISCRECORDER = 262_u32
  DISPID_IDISCRECORDER2_ACTIVEDISCRECORDER = 0_u32
  DISPID_IDISCRECORDER2_VENDORID = 513_u32
  DISPID_IDISCRECORDER2_PRODUCTID = 514_u32
  DISPID_IDISCRECORDER2_PRODUCTREVISION = 515_u32
  DISPID_IDISCRECORDER2_VOLUMENAME = 516_u32
  DISPID_IDISCRECORDER2_VOLUMEPATHNAMES = 517_u32
  DISPID_IDISCRECORDER2_DEVICECANLOADMEDIA = 518_u32
  DISPID_IDISCRECORDER2_LEGACYDEVICENUMBER = 519_u32
  DISPID_IDISCRECORDER2_SUPPORTEDFEATUREPAGES = 520_u32
  DISPID_IDISCRECORDER2_CURRENTFEATUREPAGES = 521_u32
  DISPID_IDISCRECORDER2_SUPPORTEDPROFILES = 522_u32
  DISPID_IDISCRECORDER2_CURRENTPROFILES = 523_u32
  DISPID_IDISCRECORDER2_SUPPORTEDMODEPAGES = 524_u32
  DISPID_IDISCRECORDER2_EXCLUSIVEACCESSOWNER = 525_u32
  DISPID_IWRITEENGINE2_WRITESECTION = 512_u32
  DISPID_IWRITEENGINE2_CANCELWRITE = 513_u32
  DISPID_IWRITEENGINE2_DISCRECORDER = 256_u32
  DISPID_IWRITEENGINE2_USESTREAMINGWRITE12 = 257_u32
  DISPID_IWRITEENGINE2_STARTINGSECTORSPERSECOND = 258_u32
  DISPID_IWRITEENGINE2_ENDINGSECTORSPERSECOND = 259_u32
  DISPID_IWRITEENGINE2_BYTESPERSECTOR = 260_u32
  DISPID_IWRITEENGINE2_WRITEINPROGRESS = 261_u32
  DISPID_IWRITEENGINE2EVENTARGS_STARTLBA = 256_u32
  DISPID_IWRITEENGINE2EVENTARGS_SECTORCOUNT = 257_u32
  DISPID_IWRITEENGINE2EVENTARGS_LASTREADLBA = 258_u32
  DISPID_IWRITEENGINE2EVENTARGS_LASTWRITTENLBA = 259_u32
  DISPID_IWRITEENGINE2EVENTARGS_TOTALDEVICEBUFFER = 260_u32
  DISPID_IWRITEENGINE2EVENTARGS_USEDDEVICEBUFFER = 261_u32
  DISPID_IWRITEENGINE2EVENTARGS_TOTALSYSTEMBUFFER = 262_u32
  DISPID_IWRITEENGINE2EVENTARGS_USEDSYSTEMBUFFER = 263_u32
  DISPID_IWRITEENGINE2EVENTARGS_FREESYSTEMBUFFER = 264_u32
  DISPID_DWRITEENGINE2EVENTS_UPDATE = 256_u32
  DISPID_IDISCFORMAT2_RECORDERSUPPORTED = 2048_u32
  DISPID_IDISCFORMAT2_MEDIASUPPORTED = 2049_u32
  DISPID_IDISCFORMAT2_MEDIAPHYSICALLYBLANK = 1792_u32
  DISPID_IDISCFORMAT2_MEDIAHEURISTICALLYBLANK = 1793_u32
  DISPID_IDISCFORMAT2_SUPPORTEDMEDIATYPES = 1794_u32
  DISPID_IDISCFORMAT2ERASE_RECORDER = 256_u32
  DISPID_IDISCFORMAT2ERASE_FULLERASE = 257_u32
  DISPID_IDISCFORMAT2ERASE_MEDIATYPE = 258_u32
  DISPID_IDISCFORMAT2ERASE_CLIENTNAME = 259_u32
  DISPID_IDISCFORMAT2ERASE_ERASEMEDIA = 513_u32
  DISPID_IDISCFORMAT2ERASEEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2DATA_RECORDER = 256_u32
  DISPID_IDISCFORMAT2DATA_BUFFERUNDERRUNFREEDISABLED = 257_u32
  DISPID_IDISCFORMAT2DATA_POSTGAPALREADYINIMAGE = 260_u32
  DISPID_IDISCFORMAT2DATA_CURRENTMEDIASTATUS = 262_u32
  DISPID_IDISCFORMAT2DATA_WRITEPROTECTSTATUS = 263_u32
  DISPID_IDISCFORMAT2DATA_TOTALSECTORS = 264_u32
  DISPID_IDISCFORMAT2DATA_FREESECTORS = 265_u32
  DISPID_IDISCFORMAT2DATA_NEXTWRITABLEADDRESS = 266_u32
  DISPID_IDISCFORMAT2DATA_STARTSECTOROFPREVIOUSSESSION = 267_u32
  DISPID_IDISCFORMAT2DATA_LASTSECTOROFPREVIOUSSESSION = 268_u32
  DISPID_IDISCFORMAT2DATA_FORCEMEDIATOBECLOSED = 269_u32
  DISPID_IDISCFORMAT2DATA_DISABLEDVDCOMPATIBILITYMODE = 270_u32
  DISPID_IDISCFORMAT2DATA_CURRENTMEDIATYPE = 271_u32
  DISPID_IDISCFORMAT2DATA_CLIENTNAME = 272_u32
  DISPID_IDISCFORMAT2DATA_REQUESTEDWRITESPEED = 273_u32
  DISPID_IDISCFORMAT2DATA_REQUESTEDROTATIONTYPEISPURECAV = 274_u32
  DISPID_IDISCFORMAT2DATA_CURRENTWRITESPEED = 275_u32
  DISPID_IDISCFORMAT2DATA_CURRENTROTATIONTYPEISPURECAV = 276_u32
  DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDS = 277_u32
  DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDDESCRIPTORS = 278_u32
  DISPID_IDISCFORMAT2DATA_FORCEOVERWRITE = 279_u32
  DISPID_IDISCFORMAT2DATA_MUTLISESSIONINTERFACES = 280_u32
  DISPID_IDISCFORMAT2DATA_WRITE = 512_u32
  DISPID_IDISCFORMAT2DATA_CANCELWRITE = 513_u32
  DISPID_IDISCFORMAT2DATA_SETWRITESPEED = 514_u32
  DISPID_DDISCFORMAT2DATAEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ELAPSEDTIME = 768_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDREMAININGTIME = 769_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDTOTALTIME = 770_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_CURRENTACTION = 771_u32
  DISPID_IDISCFORMAT2TAO_RECORDER = 256_u32
  DISPID_IDISCFORMAT2TAO_BUFFERUNDERRUNFREEDISABLED = 258_u32
  DISPID_IDISCFORMAT2TAO_NUMBEROFEXISTINGTRACKS = 259_u32
  DISPID_IDISCFORMAT2TAO_TOTALSECTORSONMEDIA = 260_u32
  DISPID_IDISCFORMAT2TAO_FREESECTORSONMEDIA = 261_u32
  DISPID_IDISCFORMAT2TAO_USEDSECTORSONMEDIA = 262_u32
  DISPID_IDISCFORMAT2TAO_DONOTFINALIZEMEDIA = 263_u32
  DISPID_IDISCFORMAT2TAO_EXPECTEDTABLEOFCONTENTS = 266_u32
  DISPID_IDISCFORMAT2TAO_CURRENTMEDIATYPE = 267_u32
  DISPID_IDISCFORMAT2TAO_CLIENTNAME = 270_u32
  DISPID_IDISCFORMAT2TAO_REQUESTEDWRITESPEED = 271_u32
  DISPID_IDISCFORMAT2TAO_REQUESTEDROTATIONTYPEISPURECAV = 272_u32
  DISPID_IDISCFORMAT2TAO_CURRENTWRITESPEED = 273_u32
  DISPID_IDISCFORMAT2TAO_CURRENTROTATIONTYPEISPURECAV = 274_u32
  DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDS = 275_u32
  DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDDESCRIPTORS = 276_u32
  DISPID_IDISCFORMAT2TAO_PREPAREMEDIA = 512_u32
  DISPID_IDISCFORMAT2TAO_ADDAUDIOTRACK = 513_u32
  DISPID_IDISCFORMAT2TAO_CANCELADDTRACK = 514_u32
  DISPID_IDISCFORMAT2TAO_FINISHMEDIA = 515_u32
  DISPID_IDISCFORMAT2TAO_SETWRITESPEED = 516_u32
  DISPID_DDISCFORMAT2TAOEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTTRACKNUMBER = 768_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTACTION = 769_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ELAPSEDTIME = 770_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDREMAININGTIME = 771_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDTOTALTIME = 772_u32
  DISPID_IDISCFORMAT2RAWCD_RECORDER = 256_u32
  DISPID_IDISCFORMAT2RAWCD_BUFFERUNDERRUNFREEDISABLED = 258_u32
  DISPID_IDISCFORMAT2RAWCD_STARTOFNEXTSESSION = 259_u32
  DISPID_IDISCFORMAT2RAWCD_LASTPOSSIBLESTARTOFLEADOUT = 260_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTMEDIATYPE = 261_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDDATASECTORTYPES = 264_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDDATASECTORTYPE = 265_u32
  DISPID_IDISCFORMAT2RAWCD_CLIENTNAME = 266_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDWRITESPEED = 267_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDROTATIONTYPEISPURECAV = 268_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTWRITESPEED = 269_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTROTATIONTYPEISPURECAV = 270_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDS = 271_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDDESCRIPTORS = 272_u32
  DISPID_IDISCFORMAT2RAWCD_PREPAREMEDIA = 512_u32
  DISPID_IDISCFORMAT2RAWCD_WRITEMEDIA = 513_u32
  DISPID_IDISCFORMAT2RAWCD_WRITEMEDIAWITHVALIDATION = 514_u32
  DISPID_IDISCFORMAT2RAWCD_CANCELWRITE = 515_u32
  DISPID_IDISCFORMAT2RAWCD_RELEASEMEDIA = 516_u32
  DISPID_IDISCFORMAT2RAWCD_SETWRITESPEED = 517_u32
  DISPID_DDISCFORMAT2RAWCDEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTTRACKNUMBER = 768_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTACTION = 769_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ELAPSEDTIME = 768_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDREMAININGTIME = 769_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDTOTALTIME = 770_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_CD = 75_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_DVD = 680_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_BD = 2195_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_HD_DVD = 4568_u32
  DISPID_IMULTISESSION_SUPPORTEDONCURRENTMEDIA = 256_u32
  DISPID_IMULTISESSION_INUSE = 257_u32
  DISPID_IMULTISESSION_IMPORTRECORDER = 258_u32
  DISPID_IMULTISESSION_FIRSTDATASESSION = 512_u32
  DISPID_IMULTISESSION_STARTSECTOROFPREVIOUSSESSION = 513_u32
  DISPID_IMULTISESSION_LASTSECTOROFPREVIOUSSESSION = 514_u32
  DISPID_IMULTISESSION_NEXTWRITABLEADDRESS = 515_u32
  DISPID_IMULTISESSION_FREESECTORS = 516_u32
  DISPID_IMULTISESSION_WRITEUNITSIZE = 517_u32
  DISPID_IMULTISESSION_LASTWRITTENADDRESS = 518_u32
  DISPID_IMULTISESSION_SECTORSONMEDIA = 519_u32
  DISPID_IRAWCDIMAGECREATOR_CREATERESULTIMAGE = 512_u32
  DISPID_IRAWCDIMAGECREATOR_ADDTRACK = 513_u32
  DISPID_IRAWCDIMAGECREATOR_ADDSPECIALPREGAP = 514_u32
  DISPID_IRAWCDIMAGECREATOR_ADDSUBCODERWGENERATOR = 515_u32
  DISPID_IRAWCDIMAGECREATOR_RESULTINGIMAGETYPE = 256_u32
  DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUT = 257_u32
  DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUTLIMIT = 258_u32
  DISPID_IRAWCDIMAGECREATOR_DISABLEGAPLESSAUDIO = 259_u32
  DISPID_IRAWCDIMAGECREATOR_MEDIACATALOGNUMBER = 260_u32
  DISPID_IRAWCDIMAGECREATOR_STARTINGTRACKNUMBER = 261_u32
  DISPID_IRAWCDIMAGECREATOR_TRACKINFO = 262_u32
  DISPID_IRAWCDIMAGECREATOR_NUMBEROFEXISTINGTRACKS = 263_u32
  DISPID_IRAWCDIMAGECREATOR_USEDSECTORSONDISC = 264_u32
  DISPID_IRAWCDIMAGECREATOR_EXPECTEDTABLEOFCONTENTS = 265_u32
  DISPID_IRAWCDTRACKINFO_STARTINGLBA = 256_u32
  DISPID_IRAWCDTRACKINFO_SECTORCOUNT = 257_u32
  DISPID_IRAWCDTRACKINFO_TRACKNUMBER = 258_u32
  DISPID_IRAWCDTRACKINFO_SECTORTYPE = 259_u32
  DISPID_IRAWCDTRACKINFO_ISRC = 260_u32
  DISPID_IRAWCDTRACKINFO_DIGITALAUDIOCOPYSETTING = 261_u32
  DISPID_IRAWCDTRACKINFO_AUDIOHASPREEMPHASIS = 262_u32
  DISPID_IBLOCKRANGE_STARTLBA = 256_u32
  DISPID_IBLOCKRANGE_ENDLBA = 257_u32
  DISPID_IBLOCKRANGELIST_BLOCKRANGES = 256_u32
  IMAPILib2_MajorVersion = 1_u32
  IMAPILib2_MinorVersion = 0_u32
  IMAPI2FS_BOOT_ENTRY_COUNT_MAX = 32_u32
  DISPID_DFILESYSTEMIMAGEEVENTS_UPDATE = 256_u32
  DISPID_DFILESYSTEMIMAGEIMPORTEVENTS_UPDATEIMPORT = 257_u32
  IMAPI2FS_MajorVersion = 1_u32
  IMAPI2FS_MinorVersion = 0_u32
  MP_MSGCLASS_SYSTEM = 1_u32
  MP_MSGCLASS_REPLICATION = 2_u32
  MP_MSGCLASS_DELIVERY_REPORT = 3_u32
  MP_MSGCLASS_NONDELIVERY_REPORT = 4_u32
  MP_STATUS_SUCCESS = 0_u32
  MP_STATUS_RETRY = 1_u32
  MP_STATUS_ABORT_DELIVERY = 2_u32
  MP_STATUS_BAD_MAIL = 3_u32
  MP_STATUS_SUBMITTED = 4_u32
  MP_STATUS_CATEGORIZED = 5_u32
  MP_STATUS_ABANDON_DELIVERY = 6_u32
  RP_RECIP_FLAGS_RESERVED = 15_u32
  RP_DSN_NOTIFY_SUCCESS = 16777216_u32
  RP_DSN_NOTIFY_FAILURE = 33554432_u32
  RP_DSN_NOTIFY_DELAY = 67108864_u32
  RP_DSN_NOTIFY_NEVER = 134217728_u32
  RP_DSN_NOTIFY_MASK = 251658240_u32
  RP_HANDLED = 16_u32
  RP_GENERAL_FAILURE = 32_u32
  RP_DSN_HANDLED = 64_u32
  RP_DELIVERED = 272_u32
  RP_DSN_SENT_NDR = 1104_u32
  RP_FAILED = 2096_u32
  RP_UNRESOLVED = 4144_u32
  RP_ENPANDED = 8208_u32
  RP_EXPANDED = 8208_u32
  RP_DSN_SENT_DELAYED = 16384_u32
  RP_DSN_SENT_EXPANDED = 32832_u32
  RP_DSN_SENT_RELAYED = 65600_u32
  RP_DSN_SENT_DELIVERED = 131136_u32
  RP_REMOTE_MTA_NO_DSN = 524288_u32
  RP_ERROR_CONTEXT_STORE = 1048576_u32
  RP_ERROR_CONTEXT_CAT = 2097152_u32
  RP_ERROR_CONTEXT_MTA = 4194304_u32
  RP_VOLATILE_FLAGS_MASK = 4026531840_u32
  RP_DSN_NOTIFY_INVALID = 0_u32
  MPV_INBOUND_CUTOFF_EXCEEDED = 1_u32
  MPV_WRITE_CONTENT = 2_u32
  NMP_PROCESS_POST = 1_u32
  NMP_PROCESS_CONTROL = 2_u32
  NMP_PROCESS_MODERATOR = 4_u32
  GUID_SMTP_SOURCE_TYPE = "fb65c4dc-e468-11d1-aa67-00c04fa345f6"
  GUID_SMTPSVC_SOURCE = "1b3c0666-e470-11d1-aa67-00c04fa345f6"
  CATID_SMTP_ON_INBOUND_COMMAND = "f6628c8d-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SERVER_RESPONSE = "f6628c8e-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SESSION_START = "f6628c8f-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_MESSAGE_START = "f6628c90-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_PER_RECIPIENT = "f6628c91-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_BEFORE_DATA = "f6628c92-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SESSION_END = "f6628c93-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_STORE_DRIVER = "59175850-e533-11d1-aa67-00c04fa345f6"
  CATID_SMTP_TRANSPORT_SUBMISSION = "ff3caa23-00b9-11d2-9dfb-00c04fa322ba"
  CATID_SMTP_TRANSPORT_PRECATEGORIZE = "a3acfb0d-83ff-11d2-9e14-00c04fa322ba"
  CATID_SMTP_TRANSPORT_CATEGORIZE = "960252a3-0a3a-11d2-9e00-00c04fa322ba"
  CATID_SMTP_TRANSPORT_POSTCATEGORIZE = "76719654-05a6-11d2-9dfd-00c04fa322ba"
  CATID_SMTP_TRANSPORT_ROUTER = "283430c9-1850-11d2-9e03-00c04fa322ba"
  CATID_SMTP_MSGTRACKLOG = "c6df52aa-7db0-11d2-94f4-00c04f79f1d6"
  CATID_SMTP_DNSRESOLVERRECORDSINK = "bd0b4366-8e03-11d2-94f6-00c04f79f1d6"
  CATID_SMTP_MAXMSGSIZE = "ebf159de-a67e-11d2-94f7-00c04f79f1d6"
  CATID_SMTP_LOG = "93d0a538-2c1e-4b68-a7c9-d73a8aa6ee97"
  CATID_SMTP_GET_AUX_DOMAIN_INFO_FLAGS = "84ff368a-fab3-43d7-bcdf-692c5b46e6b1"
  CLSID_SmtpCat = "b23c35b7-9219-11d2-9e17-00c04fa322ba"
  CATID_SMTP_DSN = "22b55731-f5f8-4d23-bd8f-87b52371a73a"
  IMAPI_S_PROPERTIESIGNORED = 262656_i32
  IMAPI_S_BUFFER_TO_SMALL = 262657_i32
  IMAPI_E_NOTOPENED = -2147220981_i32
  IMAPI_E_NOTINITIALIZED = -2147220980_i32
  IMAPI_E_USERABORT = -2147220979_i32
  IMAPI_E_GENERIC = -2147220978_i32
  IMAPI_E_MEDIUM_NOTPRESENT = -2147220977_i32
  IMAPI_E_MEDIUM_INVALIDTYPE = -2147220976_i32
  IMAPI_E_DEVICE_NOPROPERTIES = -2147220975_i32
  IMAPI_E_DEVICE_NOTACCESSIBLE = -2147220974_i32
  IMAPI_E_DEVICE_NOTPRESENT = -2147220973_i32
  IMAPI_E_DEVICE_INVALIDTYPE = -2147220972_i32
  IMAPI_E_INITIALIZE_WRITE = -2147220971_i32
  IMAPI_E_INITIALIZE_ENDWRITE = -2147220970_i32
  IMAPI_E_FILESYSTEM = -2147220969_i32
  IMAPI_E_FILEACCESS = -2147220968_i32
  IMAPI_E_DISCINFO = -2147220967_i32
  IMAPI_E_TRACKNOTOPEN = -2147220966_i32
  IMAPI_E_TRACKOPEN = -2147220965_i32
  IMAPI_E_DISCFULL = -2147220964_i32
  IMAPI_E_BADJOLIETNAME = -2147220963_i32
  IMAPI_E_INVALIDIMAGE = -2147220962_i32
  IMAPI_E_NOACTIVEFORMAT = -2147220961_i32
  IMAPI_E_NOACTIVERECORDER = -2147220960_i32
  IMAPI_E_WRONGFORMAT = -2147220959_i32
  IMAPI_E_ALREADYOPEN = -2147220958_i32
  IMAPI_E_WRONGDISC = -2147220957_i32
  IMAPI_E_FILEEXISTS = -2147220956_i32
  IMAPI_E_STASHINUSE = -2147220955_i32
  IMAPI_E_DEVICE_STILL_IN_USE = -2147220954_i32
  IMAPI_E_LOSS_OF_STREAMING = -2147220953_i32
  IMAPI_E_COMPRESSEDSTASH = -2147220952_i32
  IMAPI_E_ENCRYPTEDSTASH = -2147220951_i32
  IMAPI_E_NOTENOUGHDISKFORSTASH = -2147220950_i32
  IMAPI_E_REMOVABLESTASH = -2147220949_i32
  IMAPI_E_CANNOT_WRITE_TO_MEDIA = -2147220948_i32
  IMAPI_E_TRACK_NOT_BIG_ENOUGH = -2147220947_i32
  IMAPI_E_BOOTIMAGE_AND_NONBLANK_DISC = -2147220946_i32
  CLSID_MsftDiscMaster2 = LibC::GUID.new(0x2735412e_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftDiscRecorder2 = LibC::GUID.new(0x2735412d_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftWriteEngine2 = LibC::GUID.new(0x2735412c_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftDiscFormat2Erase = LibC::GUID.new(0x2735412b_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftDiscFormat2Data = LibC::GUID.new(0x2735412a_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftDiscFormat2TrackAtOnce = LibC::GUID.new(0x27354129_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftDiscFormat2RawCD = LibC::GUID.new(0x27354128_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftStreamZero = LibC::GUID.new(0x27354127_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftStreamPrng001 = LibC::GUID.new(0x27354126_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftStreamConcatenate = LibC::GUID.new(0x27354125_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftStreamInterleave = LibC::GUID.new(0x27354124_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftWriteSpeedDescriptor = LibC::GUID.new(0x27354123_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftMultisessionSequential = LibC::GUID.new(0x27354122_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  CLSID_MsftMultisessionRandomWrite = LibC::GUID.new(0xb507ca24_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  CLSID_MsftRawCDImageCreator = LibC::GUID.new(0x25983561_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])
  CLSID_BootOptions = LibC::GUID.new(0x2c941fce_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_FsiStream = LibC::GUID.new(0x2c941fcd_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_FileSystemImageResult = LibC::GUID.new(0x2c941fcc_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_ProgressItem = LibC::GUID.new(0x2c941fcb_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_EnumProgressItems = LibC::GUID.new(0x2c941fca_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_ProgressItems = LibC::GUID.new(0x2c941fc9_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_FsiDirectoryItem = LibC::GUID.new(0x2c941fc8_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_FsiFileItem = LibC::GUID.new(0x2c941fc7_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_EnumFsiItems = LibC::GUID.new(0x2c941fc6_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_FsiNamedStreams = LibC::GUID.new(0xc6b6f8ed_u32, 0x6d19_u16, 0x44b4_u16, StaticArray[0xb5_u8, 0x39_u8, 0xb1_u8, 0x59_u8, 0xb7_u8, 0x93_u8, 0xa3_u8, 0x2d_u8])
  CLSID_MsftFileSystemImage = LibC::GUID.new(0x2c941fc5_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  CLSID_MsftIsoImageManager = LibC::GUID.new(0xceee3b62_u32, 0x8f56_u16, 0x4056_u16, StaticArray[0x86_u8, 0x9b_u8, 0xef_u8, 0x16_u8, 0x91_u8, 0x7e_u8, 0x3e_u8, 0xfc_u8])
  CLSID_BlockRange = LibC::GUID.new(0xb507ca27_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  CLSID_BlockRangeList = LibC::GUID.new(0xb507ca28_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  CLSID_MSDiscRecorderObj = LibC::GUID.new(0x520cca61_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  CLSID_MSDiscMasterObj = LibC::GUID.new(0x520cca63_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  CLSID_MSEnumDiscRecordersObj = LibC::GUID.new(0x8a03567a_u32, 0x63cb_u16, 0x4ba8_u16, StaticArray[0xba_u8, 0xf6_u8, 0x52_u8, 0x11_u8, 0x98_u8, 0x16_u8, 0xd1_u8, 0xef_u8])
  CLSID_tagIMMPID_MP_STRUCT = LibC::GUID.new(0x13384cf0_u32, 0xb3c4_u16, 0x11d1_u16, StaticArray[0xaa_u8, 0x92_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc8_u8, 0xb_u8])
  CLSID_tagIMMPID_RP_STRUCT = LibC::GUID.new(0x79e82048_u32, 0xd320_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])
  CLSID_tagIMMPID_MPV_STRUCT = LibC::GUID.new(0xcbe69706_u32, 0xc9bd_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf2_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])
  CLSID_tagIMMPID_RPV_STRUCT = LibC::GUID.new(0x79e82049_u32, 0xd320_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])
  CLSID_tagIMMPID_NMP_STRUCT = LibC::GUID.new(0x7433a9aa_u32, 0x20e2_u16, 0x11d2_u16, StaticArray[0x94_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x79_u8, 0xf1_u8])
  CLSID_tagIMMPID_CPV_STRUCT = LibC::GUID.new(0xa2a76b2a_u32, 0xe52d_u16, 0x11d1_u16, StaticArray[0xaa_u8, 0x64_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x5b_u8, 0x82_u8])

  type MSGSESS = Void

  alias MSGCALLRELEASE = Proc(UInt32, IMessage, Void)


  enum DISC_RECORDER_STATE_FLAGS : UInt32
    RECORDER_BURNING = 2
    RECORDER_DOING_NOTHING = 0
    RECORDER_OPENED = 1
  end

  enum IMAPI_MEDIA_PHYSICAL_TYPE : Int32
    IMAPI_MEDIA_TYPE_UNKNOWN = 0
    IMAPI_MEDIA_TYPE_CDROM = 1
    IMAPI_MEDIA_TYPE_CDR = 2
    IMAPI_MEDIA_TYPE_CDRW = 3
    IMAPI_MEDIA_TYPE_DVDROM = 4
    IMAPI_MEDIA_TYPE_DVDRAM = 5
    IMAPI_MEDIA_TYPE_DVDPLUSR = 6
    IMAPI_MEDIA_TYPE_DVDPLUSRW = 7
    IMAPI_MEDIA_TYPE_DVDPLUSR_DUALLAYER = 8
    IMAPI_MEDIA_TYPE_DVDDASHR = 9
    IMAPI_MEDIA_TYPE_DVDDASHRW = 10
    IMAPI_MEDIA_TYPE_DVDDASHR_DUALLAYER = 11
    IMAPI_MEDIA_TYPE_DISK = 12
    IMAPI_MEDIA_TYPE_DVDPLUSRW_DUALLAYER = 13
    IMAPI_MEDIA_TYPE_HDDVDROM = 14
    IMAPI_MEDIA_TYPE_HDDVDR = 15
    IMAPI_MEDIA_TYPE_HDDVDRAM = 16
    IMAPI_MEDIA_TYPE_BDROM = 17
    IMAPI_MEDIA_TYPE_BDR = 18
    IMAPI_MEDIA_TYPE_BDRE = 19
    IMAPI_MEDIA_TYPE_MAX = 19
  end

  enum IMAPI_MEDIA_WRITE_PROTECT_STATE : Int32
    IMAPI_WRITEPROTECTED_UNTIL_POWERDOWN = 1
    IMAPI_WRITEPROTECTED_BY_CARTRIDGE = 2
    IMAPI_WRITEPROTECTED_BY_MEDIA_SPECIFIC_REASON = 4
    IMAPI_WRITEPROTECTED_BY_SOFTWARE_WRITE_PROTECT = 8
    IMAPI_WRITEPROTECTED_BY_DISC_CONTROL_BLOCK = 16
    IMAPI_WRITEPROTECTED_READ_ONLY_MEDIA = 16384
  end

  enum IMAPI_READ_TRACK_ADDRESS_TYPE : Int32
    IMAPI_READ_TRACK_ADDRESS_TYPE_LBA = 0
    IMAPI_READ_TRACK_ADDRESS_TYPE_TRACK = 1
    IMAPI_READ_TRACK_ADDRESS_TYPE_SESSION = 2
  end

  enum IMAPI_MODE_PAGE_REQUEST_TYPE : Int32
    IMAPI_MODE_PAGE_REQUEST_TYPE_CURRENT_VALUES = 0
    IMAPI_MODE_PAGE_REQUEST_TYPE_CHANGEABLE_VALUES = 1
    IMAPI_MODE_PAGE_REQUEST_TYPE_DEFAULT_VALUES = 2
    IMAPI_MODE_PAGE_REQUEST_TYPE_SAVED_VALUES = 3
  end

  enum IMAPI_MODE_PAGE_TYPE : Int32
    IMAPI_MODE_PAGE_TYPE_READ_WRITE_ERROR_RECOVERY = 1
    IMAPI_MODE_PAGE_TYPE_MRW = 3
    IMAPI_MODE_PAGE_TYPE_WRITE_PARAMETERS = 5
    IMAPI_MODE_PAGE_TYPE_CACHING = 8
    IMAPI_MODE_PAGE_TYPE_INFORMATIONAL_EXCEPTIONS = 28
    IMAPI_MODE_PAGE_TYPE_TIMEOUT_AND_PROTECT = 29
    IMAPI_MODE_PAGE_TYPE_POWER_CONDITION = 26
    IMAPI_MODE_PAGE_TYPE_LEGACY_CAPABILITIES = 42
  end

  enum IMAPI_FEATURE_PAGE_TYPE : Int32
    IMAPI_FEATURE_PAGE_TYPE_PROFILE_LIST = 0
    IMAPI_FEATURE_PAGE_TYPE_CORE = 1
    IMAPI_FEATURE_PAGE_TYPE_MORPHING = 2
    IMAPI_FEATURE_PAGE_TYPE_REMOVABLE_MEDIUM = 3
    IMAPI_FEATURE_PAGE_TYPE_WRITE_PROTECT = 4
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_READABLE = 16
    IMAPI_FEATURE_PAGE_TYPE_CD_MULTIREAD = 29
    IMAPI_FEATURE_PAGE_TYPE_CD_READ = 30
    IMAPI_FEATURE_PAGE_TYPE_DVD_READ = 31
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_WRITABLE = 32
    IMAPI_FEATURE_PAGE_TYPE_INCREMENTAL_STREAMING_WRITABLE = 33
    IMAPI_FEATURE_PAGE_TYPE_SECTOR_ERASABLE = 34
    IMAPI_FEATURE_PAGE_TYPE_FORMATTABLE = 35
    IMAPI_FEATURE_PAGE_TYPE_HARDWARE_DEFECT_MANAGEMENT = 36
    IMAPI_FEATURE_PAGE_TYPE_WRITE_ONCE = 37
    IMAPI_FEATURE_PAGE_TYPE_RESTRICTED_OVERWRITE = 38
    IMAPI_FEATURE_PAGE_TYPE_CDRW_CAV_WRITE = 39
    IMAPI_FEATURE_PAGE_TYPE_MRW = 40
    IMAPI_FEATURE_PAGE_TYPE_ENHANCED_DEFECT_REPORTING = 41
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_RW = 42
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R = 43
    IMAPI_FEATURE_PAGE_TYPE_RIGID_RESTRICTED_OVERWRITE = 44
    IMAPI_FEATURE_PAGE_TYPE_CD_TRACK_AT_ONCE = 45
    IMAPI_FEATURE_PAGE_TYPE_CD_MASTERING = 46
    IMAPI_FEATURE_PAGE_TYPE_DVD_DASH_WRITE = 47
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_READ = 48
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_R_WRITE = 49
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_RW_WRITE = 50
    IMAPI_FEATURE_PAGE_TYPE_LAYER_JUMP_RECORDING = 51
    IMAPI_FEATURE_PAGE_TYPE_CD_RW_MEDIA_WRITE_SUPPORT = 55
    IMAPI_FEATURE_PAGE_TYPE_BD_PSEUDO_OVERWRITE = 56
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R_DUAL_LAYER = 59
    IMAPI_FEATURE_PAGE_TYPE_BD_READ = 64
    IMAPI_FEATURE_PAGE_TYPE_BD_WRITE = 65
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_READ = 80
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_WRITE = 81
    IMAPI_FEATURE_PAGE_TYPE_POWER_MANAGEMENT = 256
    IMAPI_FEATURE_PAGE_TYPE_SMART = 257
    IMAPI_FEATURE_PAGE_TYPE_EMBEDDED_CHANGER = 258
    IMAPI_FEATURE_PAGE_TYPE_CD_ANALOG_PLAY = 259
    IMAPI_FEATURE_PAGE_TYPE_MICROCODE_UPDATE = 260
    IMAPI_FEATURE_PAGE_TYPE_TIMEOUT = 261
    IMAPI_FEATURE_PAGE_TYPE_DVD_CSS = 262
    IMAPI_FEATURE_PAGE_TYPE_REAL_TIME_STREAMING = 263
    IMAPI_FEATURE_PAGE_TYPE_LOGICAL_UNIT_SERIAL_NUMBER = 264
    IMAPI_FEATURE_PAGE_TYPE_MEDIA_SERIAL_NUMBER = 265
    IMAPI_FEATURE_PAGE_TYPE_DISC_CONTROL_BLOCKS = 266
    IMAPI_FEATURE_PAGE_TYPE_DVD_CPRM = 267
    IMAPI_FEATURE_PAGE_TYPE_FIRMWARE_INFORMATION = 268
    IMAPI_FEATURE_PAGE_TYPE_AACS = 269
    IMAPI_FEATURE_PAGE_TYPE_VCPS = 272
  end

  enum IMAPI_PROFILE_TYPE : Int32
    IMAPI_PROFILE_TYPE_INVALID = 0
    IMAPI_PROFILE_TYPE_NON_REMOVABLE_DISK = 1
    IMAPI_PROFILE_TYPE_REMOVABLE_DISK = 2
    IMAPI_PROFILE_TYPE_MO_ERASABLE = 3
    IMAPI_PROFILE_TYPE_MO_WRITE_ONCE = 4
    IMAPI_PROFILE_TYPE_AS_MO = 5
    IMAPI_PROFILE_TYPE_CDROM = 8
    IMAPI_PROFILE_TYPE_CD_RECORDABLE = 9
    IMAPI_PROFILE_TYPE_CD_REWRITABLE = 10
    IMAPI_PROFILE_TYPE_DVDROM = 16
    IMAPI_PROFILE_TYPE_DVD_DASH_RECORDABLE = 17
    IMAPI_PROFILE_TYPE_DVD_RAM = 18
    IMAPI_PROFILE_TYPE_DVD_DASH_REWRITABLE = 19
    IMAPI_PROFILE_TYPE_DVD_DASH_RW_SEQUENTIAL = 20
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_SEQUENTIAL = 21
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_LAYER_JUMP = 22
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW = 26
    IMAPI_PROFILE_TYPE_DVD_PLUS_R = 27
    IMAPI_PROFILE_TYPE_DDCDROM = 32
    IMAPI_PROFILE_TYPE_DDCD_RECORDABLE = 33
    IMAPI_PROFILE_TYPE_DDCD_REWRITABLE = 34
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW_DUAL = 42
    IMAPI_PROFILE_TYPE_DVD_PLUS_R_DUAL = 43
    IMAPI_PROFILE_TYPE_BD_ROM = 64
    IMAPI_PROFILE_TYPE_BD_R_SEQUENTIAL = 65
    IMAPI_PROFILE_TYPE_BD_R_RANDOM_RECORDING = 66
    IMAPI_PROFILE_TYPE_BD_REWRITABLE = 67
    IMAPI_PROFILE_TYPE_HD_DVD_ROM = 80
    IMAPI_PROFILE_TYPE_HD_DVD_RECORDABLE = 81
    IMAPI_PROFILE_TYPE_HD_DVD_RAM = 82
    IMAPI_PROFILE_TYPE_NON_STANDARD = 65535
  end

  enum IMAPI_FORMAT2_DATA_WRITE_ACTION : Int32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VALIDATING_MEDIA = 0
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FORMATTING_MEDIA = 1
    IMAPI_FORMAT2_DATA_WRITE_ACTION_INITIALIZING_HARDWARE = 2
    IMAPI_FORMAT2_DATA_WRITE_ACTION_CALIBRATING_POWER = 3
    IMAPI_FORMAT2_DATA_WRITE_ACTION_WRITING_DATA = 4
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FINALIZATION = 5
    IMAPI_FORMAT2_DATA_WRITE_ACTION_COMPLETED = 6
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VERIFYING = 7
  end

  enum IMAPI_FORMAT2_DATA_MEDIA_STATE : Int32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNKNOWN = 0
    IMAPI_FORMAT2_DATA_MEDIA_STATE_INFORMATIONAL_MASK = 15
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MASK = 64512
    IMAPI_FORMAT2_DATA_MEDIA_STATE_OVERWRITE_ONLY = 1
    IMAPI_FORMAT2_DATA_MEDIA_STATE_RANDOMLY_WRITABLE = 1
    IMAPI_FORMAT2_DATA_MEDIA_STATE_BLANK = 2
    IMAPI_FORMAT2_DATA_MEDIA_STATE_APPENDABLE = 4
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINAL_SESSION = 8
    IMAPI_FORMAT2_DATA_MEDIA_STATE_DAMAGED = 1024
    IMAPI_FORMAT2_DATA_MEDIA_STATE_ERASE_REQUIRED = 2048
    IMAPI_FORMAT2_DATA_MEDIA_STATE_NON_EMPTY_SESSION = 4096
    IMAPI_FORMAT2_DATA_MEDIA_STATE_WRITE_PROTECTED = 8192
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINALIZED = 16384
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MEDIA = 32768
  end

  enum IMAPI_FORMAT2_TAO_WRITE_ACTION : Int32
    IMAPI_FORMAT2_TAO_WRITE_ACTION_UNKNOWN = 0
    IMAPI_FORMAT2_TAO_WRITE_ACTION_PREPARING = 1
    IMAPI_FORMAT2_TAO_WRITE_ACTION_WRITING = 2
    IMAPI_FORMAT2_TAO_WRITE_ACTION_FINISHING = 3
    IMAPI_FORMAT2_TAO_WRITE_ACTION_VERIFYING = 4
  end

  enum IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE : Int32
    IMAPI_FORMAT2_RAW_CD_SUBCODE_PQ_ONLY = 1
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_COOKED = 2
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_RAW = 3
  end

  enum IMAPI_FORMAT2_RAW_CD_WRITE_ACTION : Int32
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_UNKNOWN = 0
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_PREPARING = 1
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_WRITING = 2
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_FINISHING = 3
  end

  enum IMAPI_CD_SECTOR_TYPE : Int32
    IMAPI_CD_SECTOR_AUDIO = 0
    IMAPI_CD_SECTOR_MODE_ZERO = 1
    IMAPI_CD_SECTOR_MODE1 = 2
    IMAPI_CD_SECTOR_MODE2FORM0 = 3
    IMAPI_CD_SECTOR_MODE2FORM1 = 4
    IMAPI_CD_SECTOR_MODE2FORM2 = 5
    IMAPI_CD_SECTOR_MODE1RAW = 6
    IMAPI_CD_SECTOR_MODE2FORM0RAW = 7
    IMAPI_CD_SECTOR_MODE2FORM1RAW = 8
    IMAPI_CD_SECTOR_MODE2FORM2RAW = 9
  end

  enum IMAPI_CD_TRACK_DIGITAL_COPY_SETTING : Int32
    IMAPI_CD_TRACK_DIGITAL_COPY_PERMITTED = 0
    IMAPI_CD_TRACK_DIGITAL_COPY_PROHIBITED = 1
    IMAPI_CD_TRACK_DIGITAL_COPY_SCMS = 2
  end

  enum IMAPI_BURN_VERIFICATION_LEVEL : Int32
    IMAPI_BURN_VERIFICATION_NONE = 0
    IMAPI_BURN_VERIFICATION_QUICK = 1
    IMAPI_BURN_VERIFICATION_FULL = 2
  end

  enum FsiItemType : Int32
    FsiItemNotFound = 0
    FsiItemDirectory = 1
    FsiItemFile = 2
  end

  enum FsiFileSystems : Int32
    FsiFileSystemNone = 0
    FsiFileSystemISO9660 = 1
    FsiFileSystemJoliet = 2
    FsiFileSystemUDF = 4
    FsiFileSystemUnknown = 1073741824
  end

  enum EmulationType : Int32
    EmulationNone = 0
    Emulation12MFloppy = 1
    Emulation144MFloppy = 2
    Emulation288MFloppy = 3
    EmulationHardDisk = 4
  end

  enum PlatformId : Int32
    PlatformX86 = 0
    PlatformPowerPC = 1
    PlatformMac = 2
    PlatformEFI = 239
  end

  enum MEDIA_TYPES : Int32
    MEDIA_CDDA_CDROM = 1
    MEDIA_CD_ROM_XA = 2
    MEDIA_CD_I = 3
    MEDIA_CD_EXTRA = 4
    MEDIA_CD_OTHER = 5
    MEDIA_SPECIAL = 6
  end

  enum MEDIA_FLAGS : Int32
    MEDIA_BLANK = 1
    MEDIA_RW = 2
    MEDIA_WRITABLE = 4
    MEDIA_FORMAT_UNUSABLE_BY_IMAPI = 8
  end

  enum RECORDER_TYPES : Int32
    RECORDER_CDR = 1
    RECORDER_CDRW = 2
  end

  enum IMMPID_MP_ENUM : Int32
    IMMPID_MP_BEFORE__ = 4095
    IMMPID_MP_RECIPIENT_LIST = 4096
    IMMPID_MP_CONTENT_FILE_NAME = 4097
    IMMPID_MP_SENDER_ADDRESS_SMTP = 4098
    IMMPID_MP_SENDER_ADDRESS_X500 = 4099
    IMMPID_MP_SENDER_ADDRESS_X400 = 4100
    IMMPID_MP_SENDER_ADDRESS_LEGACY_EX_DN = 4101
    IMMPID_MP_DOMAIN_LIST = 4102
    IMMPID_MP_PICKUP_FILE_NAME = 4103
    IMMPID_MP_AUTHENTICATED_USER_NAME = 4104
    IMMPID_MP_CONNECTION_IP_ADDRESS = 4105
    IMMPID_MP_HELO_DOMAIN = 4106
    IMMPID_MP_EIGHTBIT_MIME_OPTION = 4107
    IMMPID_MP_CHUNKING_OPTION = 4108
    IMMPID_MP_BINARYMIME_OPTION = 4109
    IMMPID_MP_REMOTE_AUTHENTICATION_TYPE = 4110
    IMMPID_MP_ERROR_CODE = 4111
    IMMPID_MP_DSN_ENVID_VALUE = 4112
    IMMPID_MP_DSN_RET_VALUE = 4113
    IMMPID_MP_REMOTE_SERVER_DSN_CAPABLE = 4114
    IMMPID_MP_ARRIVAL_TIME = 4115
    IMMPID_MP_MESSAGE_STATUS = 4116
    IMMPID_MP_EXPIRE_DELAY = 4117
    IMMPID_MP_EXPIRE_NDR = 4118
    IMMPID_MP_LOCAL_EXPIRE_DELAY = 4119
    IMMPID_MP_LOCAL_EXPIRE_NDR = 4120
    IMMPID_MP_ARRIVAL_FILETIME = 4121
    IMMPID_MP_HR_CAT_STATUS = 4122
    IMMPID_MP_MSG_GUID = 4123
    IMMPID_MP_SUPERSEDES_MSG_GUID = 4124
    IMMPID_MP_SCANNED_FOR_CRLF_DOT_CRLF = 4125
    IMMPID_MP_FOUND_EMBEDDED_CRLF_DOT_CRLF = 4126
    IMMPID_MP_MSG_SIZE_HINT = 4127
    IMMPID_MP_RFC822_MSG_ID = 4128
    IMMPID_MP_RFC822_MSG_SUBJECT = 4129
    IMMPID_MP_RFC822_FROM_ADDRESS = 4130
    IMMPID_MP_RFC822_TO_ADDRESS = 4131
    IMMPID_MP_RFC822_CC_ADDRESS = 4132
    IMMPID_MP_RFC822_BCC_ADDRESS = 4133
    IMMPID_MP_CONNECTION_SERVER_IP_ADDRESS = 4134
    IMMPID_MP_SERVER_NAME = 4135
    IMMPID_MP_SERVER_VERSION = 4136
    IMMPID_MP_NUM_RECIPIENTS = 4137
    IMMPID_MP_X_PRIORITY = 4138
    IMMPID_MP_FROM_ADDRESS = 4139
    IMMPID_MP_SENDER_ADDRESS = 4140
    IMMPID_MP_DEFERRED_DELIVERY_FILETIME = 4141
    IMMPID_MP_SENDER_ADDRESS_OTHER = 4142
    IMMPID_MP_ORIGINAL_ARRIVAL_TIME = 4143
    IMMPID_MP_MSGCLASS = 4144
    IMMPID_MP_CONTENT_TYPE = 4145
    IMMPID_MP_ENCRYPTION_TYPE = 4146
    IMMPID_MP_CONNECTION_SERVER_PORT = 4147
    IMMPID_MP_CLIENT_AUTH_USER = 4148
    IMMPID_MP_CLIENT_AUTH_TYPE = 4149
    IMMPID_MP_CRC_GLOBAL = 4150
    IMMPID_MP_CRC_RECIPS = 4151
    IMMPID_MP_INBOUND_MAIL_FROM_AUTH = 4152
    IMMPID_MP_AFTER__ = 4153
  end

  enum IMMPID_RP_ENUM : Int32
    IMMPID_RP_BEFORE__ = 8191
    IMMPID_RP_DSN_NOTIFY_SUCCESS = 8192
    IMMPID_RP_DSN_NOTIFY_INVALID = 8193
    IMMPID_RP_ADDRESS_TYPE = 8194
    IMMPID_RP_ADDRESS = 8195
    IMMPID_RP_ADDRESS_TYPE_SMTP = 8196
    IMMPID_RP_ERROR_CODE = 8197
    IMMPID_RP_ERROR_STRING = 8198
    IMMPID_RP_DSN_NOTIFY_VALUE = 8199
    IMMPID_RP_DSN_ORCPT_VALUE = 8200
    IMMPID_RP_ADDRESS_SMTP = 8201
    IMMPID_RP_ADDRESS_X400 = 8202
    IMMPID_RP_ADDRESS_X500 = 8203
    IMMPID_RP_LEGACY_EX_DN = 8204
    IMMPID_RP_RECIPIENT_FLAGS = 8205
    IMMPID_RP_SMTP_STATUS_STRING = 8206
    IMMPID_RP_DSN_PRE_CAT_ADDRESS = 8207
    IMMPID_RP_MDB_GUID = 8208
    IMMPID_RP_USER_GUID = 8209
    IMMPID_RP_DOMAIN = 8210
    IMMPID_RP_ADDRESS_OTHER = 8211
    IMMPID_RP_DISPLAY_NAME = 8212
    IMMPID_RP_AFTER__ = 8213
  end

  enum IMMPID_MPV_ENUM : Int32
    IMMPID_MPV_BEFORE__ = 12287
    IMMPID_MPV_STORE_DRIVER_HANDLE = 12288
    IMMPID_MPV_MESSAGE_CREATION_FLAGS = 12289
    IMMPID_MPV_MESSAGE_OPEN_HANDLES = 12290
    IMMPID_MPV_TOTAL_OPEN_HANDLES = 12291
    IMMPID_MPV_TOTAL_OPEN_PROPERTY_STREAM_HANDLES = 12292
    IMMPID_MPV_TOTAL_OPEN_CONTENT_HANDLES = 12293
    IMMPID_MPV_AFTER__ = 12294
  end

  enum IMMPID_RPV_ENUM : Int32
    IMMPID_RPV_BEFORE__ = 16383
    IMMPID_RPV_DONT_DELIVER = 16384
    IMMPID_RPV_NO_NAME_COLLISIONS = 16385
    IMMPID_RPV_AFTER__ = 16386
  end

  enum IMMPID_NMP_ENUM : Int32
    IMMPID_NMP_BEFORE__ = 24575
    IMMPID_NMP_SECONDARY_GROUPS = 24576
    IMMPID_NMP_SECONDARY_ARTNUM = 24577
    IMMPID_NMP_PRIMARY_GROUP = 24578
    IMMPID_NMP_PRIMARY_ARTID = 24579
    IMMPID_NMP_POST_TOKEN = 24580
    IMMPID_NMP_NEWSGROUP_LIST = 24581
    IMMPID_NMP_HEADERS = 24582
    IMMPID_NMP_NNTP_PROCESSING = 24583
    IMMPID_NMP_NNTP_APPROVED_HEADER = 24584
    IMMPID_NMP_AFTER__ = 24585
  end

  enum IMMPID_CPV_ENUM : Int32
    IMMPID_CPV_BEFORE__ = 32767
    IMMPID_CP_START = 32768
    IMMPID_CPV_AFTER__ = 32769
  end

  struct SPropAttrArray
    c_values : UInt32
    a_prop_attr : UInt32[0]*
  end
  struct IMMP_MPV_STORE_DRIVER_HANDLE
    guid_signature : Guid
  end
  struct Tagimmpid_guidlist_item
    pguid : Guid*
    dw_start : UInt32
    dw_last : UInt32
  end


  struct IDiscMaster2VTbl
    query_interface : Proc(IDiscMaster2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscMaster2*, UInt32)
    release : Proc(IDiscMaster2*, UInt32)
    get_type_info_count : Proc(IDiscMaster2*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscMaster2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscMaster2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscMaster2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IDiscMaster2*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IDiscMaster2*, Int32, UInt8**, HRESULT)
    get_count : Proc(IDiscMaster2*, Int32*, HRESULT)
    get_is_supported_environment : Proc(IDiscMaster2*, Int16*, HRESULT)
  end

  IDiscMaster2_GUID = "27354130-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscMaster2 = LibC::GUID.new(0x27354130_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscMaster2
    lpVtbl : IDiscMaster2VTbl*
  end

  struct DDiscMaster2EventsVTbl
    query_interface : Proc(DDiscMaster2Events*, Guid*, Void**, HRESULT)
    add_ref : Proc(DDiscMaster2Events*, UInt32)
    release : Proc(DDiscMaster2Events*, UInt32)
    get_type_info_count : Proc(DDiscMaster2Events*, UInt32*, HRESULT)
    get_type_info : Proc(DDiscMaster2Events*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DDiscMaster2Events*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DDiscMaster2Events*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    notify_device_added : Proc(DDiscMaster2Events*, IDispatch, UInt8*, HRESULT)
    notify_device_removed : Proc(DDiscMaster2Events*, IDispatch, UInt8*, HRESULT)
  end

  DDiscMaster2Events_GUID = "27354131-7f64-5b0f-8f00-5d77afbe261e"
  IID_DDiscMaster2Events = LibC::GUID.new(0x27354131_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DDiscMaster2Events
    lpVtbl : DDiscMaster2EventsVTbl*
  end

  struct IDiscRecorder2ExVTbl
    query_interface : Proc(IDiscRecorder2Ex*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscRecorder2Ex*, UInt32)
    release : Proc(IDiscRecorder2Ex*, UInt32)
    send_command_no_data : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, HRESULT)
    send_command_send_data_to_device : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, UInt8*, UInt32, HRESULT)
    send_command_get_data_from_device : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, UInt8*, UInt32, UInt32*, HRESULT)
    read_dvd_structure : Proc(IDiscRecorder2Ex*, UInt32, UInt32, UInt32, UInt32, UInt8**, UInt32*, HRESULT)
    send_dvd_structure : Proc(IDiscRecorder2Ex*, UInt32, UInt8*, UInt32, HRESULT)
    get_adapter_descriptor : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, HRESULT)
    get_device_descriptor : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, HRESULT)
    get_disc_information : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, HRESULT)
    get_track_information : Proc(IDiscRecorder2Ex*, UInt32, IMAPI_READ_TRACK_ADDRESS_TYPE, UInt8**, UInt32*, HRESULT)
    get_feature_page : Proc(IDiscRecorder2Ex*, IMAPI_FEATURE_PAGE_TYPE, BOOLEAN, UInt8**, UInt32*, HRESULT)
    get_mode_page : Proc(IDiscRecorder2Ex*, IMAPI_MODE_PAGE_TYPE, IMAPI_MODE_PAGE_REQUEST_TYPE, UInt8**, UInt32*, HRESULT)
    set_mode_page : Proc(IDiscRecorder2Ex*, IMAPI_MODE_PAGE_REQUEST_TYPE, UInt8*, UInt32, HRESULT)
    get_supported_feature_pages : Proc(IDiscRecorder2Ex*, BOOLEAN, IMAPI_FEATURE_PAGE_TYPE**, UInt32*, HRESULT)
    get_supported_profiles : Proc(IDiscRecorder2Ex*, BOOLEAN, IMAPI_PROFILE_TYPE**, UInt32*, HRESULT)
    get_supported_mode_pages : Proc(IDiscRecorder2Ex*, IMAPI_MODE_PAGE_REQUEST_TYPE, IMAPI_MODE_PAGE_TYPE**, UInt32*, HRESULT)
    get_byte_alignment_mask : Proc(IDiscRecorder2Ex*, UInt32*, HRESULT)
    get_maximum_non_page_aligned_transfer_size : Proc(IDiscRecorder2Ex*, UInt32*, HRESULT)
    get_maximum_page_aligned_transfer_size : Proc(IDiscRecorder2Ex*, UInt32*, HRESULT)
  end

  IDiscRecorder2Ex_GUID = "27354132-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscRecorder2Ex = LibC::GUID.new(0x27354132_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscRecorder2Ex
    lpVtbl : IDiscRecorder2ExVTbl*
  end

  struct IDiscRecorder2VTbl
    query_interface : Proc(IDiscRecorder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscRecorder2*, UInt32)
    release : Proc(IDiscRecorder2*, UInt32)
    get_type_info_count : Proc(IDiscRecorder2*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscRecorder2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscRecorder2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscRecorder2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    eject_media : Proc(IDiscRecorder2*, HRESULT)
    close_tray : Proc(IDiscRecorder2*, HRESULT)
    acquire_exclusive_access : Proc(IDiscRecorder2*, Int16, UInt8*, HRESULT)
    release_exclusive_access : Proc(IDiscRecorder2*, HRESULT)
    disable_mcn : Proc(IDiscRecorder2*, HRESULT)
    enable_mcn : Proc(IDiscRecorder2*, HRESULT)
    initialize_disc_recorder : Proc(IDiscRecorder2*, UInt8*, HRESULT)
    get_active_disc_recorder : Proc(IDiscRecorder2*, UInt8**, HRESULT)
    get_vendor_id : Proc(IDiscRecorder2*, UInt8**, HRESULT)
    get_product_id : Proc(IDiscRecorder2*, UInt8**, HRESULT)
    get_product_revision : Proc(IDiscRecorder2*, UInt8**, HRESULT)
    get_volume_name : Proc(IDiscRecorder2*, UInt8**, HRESULT)
    get_volume_path_names : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_device_can_load_media : Proc(IDiscRecorder2*, Int16*, HRESULT)
    get_legacy_device_number : Proc(IDiscRecorder2*, Int32*, HRESULT)
    get_supported_feature_pages : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_current_feature_pages : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_supported_profiles : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_current_profiles : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_supported_mode_pages : Proc(IDiscRecorder2*, SAFEARRAY**, HRESULT)
    get_exclusive_access_owner : Proc(IDiscRecorder2*, UInt8**, HRESULT)
  end

  IDiscRecorder2_GUID = "27354133-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscRecorder2 = LibC::GUID.new(0x27354133_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscRecorder2
    lpVtbl : IDiscRecorder2VTbl*
  end

  struct IWriteEngine2VTbl
    query_interface : Proc(IWriteEngine2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWriteEngine2*, UInt32)
    release : Proc(IWriteEngine2*, UInt32)
    get_type_info_count : Proc(IWriteEngine2*, UInt32*, HRESULT)
    get_type_info : Proc(IWriteEngine2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWriteEngine2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWriteEngine2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    write_section : Proc(IWriteEngine2*, IStream, Int32, Int32, HRESULT)
    cancel_write : Proc(IWriteEngine2*, HRESULT)
    put_recorder : Proc(IWriteEngine2*, IDiscRecorder2Ex, HRESULT)
    get_recorder : Proc(IWriteEngine2*, IDiscRecorder2Ex*, HRESULT)
    put_use_streaming_write12 : Proc(IWriteEngine2*, Int16, HRESULT)
    get_use_streaming_write12 : Proc(IWriteEngine2*, Int16*, HRESULT)
    put_starting_sectors_per_second : Proc(IWriteEngine2*, Int32, HRESULT)
    get_starting_sectors_per_second : Proc(IWriteEngine2*, Int32*, HRESULT)
    put_ending_sectors_per_second : Proc(IWriteEngine2*, Int32, HRESULT)
    get_ending_sectors_per_second : Proc(IWriteEngine2*, Int32*, HRESULT)
    put_bytes_per_sector : Proc(IWriteEngine2*, Int32, HRESULT)
    get_bytes_per_sector : Proc(IWriteEngine2*, Int32*, HRESULT)
    get_write_in_progress : Proc(IWriteEngine2*, Int16*, HRESULT)
  end

  IWriteEngine2_GUID = "27354135-7f64-5b0f-8f00-5d77afbe261e"
  IID_IWriteEngine2 = LibC::GUID.new(0x27354135_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IWriteEngine2
    lpVtbl : IWriteEngine2VTbl*
  end

  struct IWriteEngine2EventArgsVTbl
    query_interface : Proc(IWriteEngine2EventArgs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWriteEngine2EventArgs*, UInt32)
    release : Proc(IWriteEngine2EventArgs*, UInt32)
    get_type_info_count : Proc(IWriteEngine2EventArgs*, UInt32*, HRESULT)
    get_type_info : Proc(IWriteEngine2EventArgs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWriteEngine2EventArgs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWriteEngine2EventArgs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_lba : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_sector_count : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_last_read_lba : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_last_written_lba : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_total_system_buffer : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_used_system_buffer : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
    get_free_system_buffer : Proc(IWriteEngine2EventArgs*, Int32*, HRESULT)
  end

  IWriteEngine2EventArgs_GUID = "27354136-7f64-5b0f-8f00-5d77afbe261e"
  IID_IWriteEngine2EventArgs = LibC::GUID.new(0x27354136_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IWriteEngine2EventArgs
    lpVtbl : IWriteEngine2EventArgsVTbl*
  end

  struct DWriteEngine2EventsVTbl
    query_interface : Proc(DWriteEngine2Events*, Guid*, Void**, HRESULT)
    add_ref : Proc(DWriteEngine2Events*, UInt32)
    release : Proc(DWriteEngine2Events*, UInt32)
    get_type_info_count : Proc(DWriteEngine2Events*, UInt32*, HRESULT)
    get_type_info : Proc(DWriteEngine2Events*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DWriteEngine2Events*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DWriteEngine2Events*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DWriteEngine2Events*, IDispatch, IDispatch, HRESULT)
  end

  DWriteEngine2Events_GUID = "27354137-7f64-5b0f-8f00-5d77afbe261e"
  IID_DWriteEngine2Events = LibC::GUID.new(0x27354137_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DWriteEngine2Events
    lpVtbl : DWriteEngine2EventsVTbl*
  end

  struct IDiscFormat2VTbl
    query_interface : Proc(IDiscFormat2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2*, UInt32)
    release : Proc(IDiscFormat2*, UInt32)
    get_type_info_count : Proc(IDiscFormat2*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_recorder_supported : Proc(IDiscFormat2*, IDiscRecorder2, Int16*, HRESULT)
    is_current_media_supported : Proc(IDiscFormat2*, IDiscRecorder2, Int16*, HRESULT)
    get_media_physically_blank : Proc(IDiscFormat2*, Int16*, HRESULT)
    get_media_heuristically_blank : Proc(IDiscFormat2*, Int16*, HRESULT)
    get_supported_media_types : Proc(IDiscFormat2*, SAFEARRAY**, HRESULT)
  end

  IDiscFormat2_GUID = "27354152-8f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2 = LibC::GUID.new(0x27354152_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2
    lpVtbl : IDiscFormat2VTbl*
  end

  struct IDiscFormat2EraseVTbl
    query_interface : Proc(IDiscFormat2Erase*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2Erase*, UInt32)
    release : Proc(IDiscFormat2Erase*, UInt32)
    get_type_info_count : Proc(IDiscFormat2Erase*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2Erase*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2Erase*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2Erase*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_recorder_supported : Proc(IDiscFormat2Erase*, IDiscRecorder2, Int16*, HRESULT)
    is_current_media_supported : Proc(IDiscFormat2Erase*, IDiscRecorder2, Int16*, HRESULT)
    get_media_physically_blank : Proc(IDiscFormat2Erase*, Int16*, HRESULT)
    get_media_heuristically_blank : Proc(IDiscFormat2Erase*, Int16*, HRESULT)
    get_supported_media_types : Proc(IDiscFormat2Erase*, SAFEARRAY**, HRESULT)
    put_recorder : Proc(IDiscFormat2Erase*, IDiscRecorder2, HRESULT)
    get_recorder : Proc(IDiscFormat2Erase*, IDiscRecorder2*, HRESULT)
    put_full_erase : Proc(IDiscFormat2Erase*, Int16, HRESULT)
    get_full_erase : Proc(IDiscFormat2Erase*, Int16*, HRESULT)
    get_current_physical_media_type : Proc(IDiscFormat2Erase*, IMAPI_MEDIA_PHYSICAL_TYPE*, HRESULT)
    put_client_name : Proc(IDiscFormat2Erase*, UInt8*, HRESULT)
    get_client_name : Proc(IDiscFormat2Erase*, UInt8**, HRESULT)
    erase_media : Proc(IDiscFormat2Erase*, HRESULT)
  end

  IDiscFormat2Erase_GUID = "27354156-8f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2Erase = LibC::GUID.new(0x27354156_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2Erase
    lpVtbl : IDiscFormat2EraseVTbl*
  end

  struct DDiscFormat2EraseEventsVTbl
    query_interface : Proc(DDiscFormat2EraseEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DDiscFormat2EraseEvents*, UInt32)
    release : Proc(DDiscFormat2EraseEvents*, UInt32)
    get_type_info_count : Proc(DDiscFormat2EraseEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DDiscFormat2EraseEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DDiscFormat2EraseEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DDiscFormat2EraseEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DDiscFormat2EraseEvents*, IDispatch, Int32, Int32, HRESULT)
  end

  DDiscFormat2EraseEvents_GUID = "2735413a-7f64-5b0f-8f00-5d77afbe261e"
  IID_DDiscFormat2EraseEvents = LibC::GUID.new(0x2735413a_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DDiscFormat2EraseEvents
    lpVtbl : DDiscFormat2EraseEventsVTbl*
  end

  struct IDiscFormat2DataVTbl
    query_interface : Proc(IDiscFormat2Data*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2Data*, UInt32)
    release : Proc(IDiscFormat2Data*, UInt32)
    get_type_info_count : Proc(IDiscFormat2Data*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2Data*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2Data*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2Data*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_recorder_supported : Proc(IDiscFormat2Data*, IDiscRecorder2, Int16*, HRESULT)
    is_current_media_supported : Proc(IDiscFormat2Data*, IDiscRecorder2, Int16*, HRESULT)
    get_media_physically_blank : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_media_heuristically_blank : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_supported_media_types : Proc(IDiscFormat2Data*, SAFEARRAY**, HRESULT)
    put_recorder : Proc(IDiscFormat2Data*, IDiscRecorder2, HRESULT)
    get_recorder : Proc(IDiscFormat2Data*, IDiscRecorder2*, HRESULT)
    put_buffer_underrun_free_disabled : Proc(IDiscFormat2Data*, Int16, HRESULT)
    get_buffer_underrun_free_disabled : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    put_postgap_already_in_image : Proc(IDiscFormat2Data*, Int16, HRESULT)
    get_postgap_already_in_image : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_current_media_status : Proc(IDiscFormat2Data*, IMAPI_FORMAT2_DATA_MEDIA_STATE*, HRESULT)
    get_write_protect_status : Proc(IDiscFormat2Data*, IMAPI_MEDIA_WRITE_PROTECT_STATE*, HRESULT)
    get_total_sectors_on_media : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_free_sectors_on_media : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_next_writable_address : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_start_address_of_previous_session : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_last_written_address_of_previous_session : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    put_force_media_to_be_closed : Proc(IDiscFormat2Data*, Int16, HRESULT)
    get_force_media_to_be_closed : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    put_disable_consumer_dvd_compatibility_mode : Proc(IDiscFormat2Data*, Int16, HRESULT)
    get_disable_consumer_dvd_compatibility_mode : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_current_physical_media_type : Proc(IDiscFormat2Data*, IMAPI_MEDIA_PHYSICAL_TYPE*, HRESULT)
    put_client_name : Proc(IDiscFormat2Data*, UInt8*, HRESULT)
    get_client_name : Proc(IDiscFormat2Data*, UInt8**, HRESULT)
    get_requested_write_speed : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_requested_rotation_type_is_pure_cav : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_current_write_speed : Proc(IDiscFormat2Data*, Int32*, HRESULT)
    get_current_rotation_type_is_pure_cav : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_supported_write_speeds : Proc(IDiscFormat2Data*, SAFEARRAY**, HRESULT)
    get_supported_write_speed_descriptors : Proc(IDiscFormat2Data*, SAFEARRAY**, HRESULT)
    put_force_overwrite : Proc(IDiscFormat2Data*, Int16, HRESULT)
    get_force_overwrite : Proc(IDiscFormat2Data*, Int16*, HRESULT)
    get_multisession_interfaces : Proc(IDiscFormat2Data*, SAFEARRAY**, HRESULT)
    write : Proc(IDiscFormat2Data*, IStream, HRESULT)
    cancel_write : Proc(IDiscFormat2Data*, HRESULT)
    set_write_speed : Proc(IDiscFormat2Data*, Int32, Int16, HRESULT)
  end

  IDiscFormat2Data_GUID = "27354153-9f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2Data = LibC::GUID.new(0x27354153_u32, 0x9f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2Data
    lpVtbl : IDiscFormat2DataVTbl*
  end

  struct DDiscFormat2DataEventsVTbl
    query_interface : Proc(DDiscFormat2DataEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DDiscFormat2DataEvents*, UInt32)
    release : Proc(DDiscFormat2DataEvents*, UInt32)
    get_type_info_count : Proc(DDiscFormat2DataEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DDiscFormat2DataEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DDiscFormat2DataEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DDiscFormat2DataEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DDiscFormat2DataEvents*, IDispatch, IDispatch, HRESULT)
  end

  DDiscFormat2DataEvents_GUID = "2735413c-7f64-5b0f-8f00-5d77afbe261e"
  IID_DDiscFormat2DataEvents = LibC::GUID.new(0x2735413c_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DDiscFormat2DataEvents
    lpVtbl : DDiscFormat2DataEventsVTbl*
  end

  struct IDiscFormat2DataEventArgsVTbl
    query_interface : Proc(IDiscFormat2DataEventArgs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2DataEventArgs*, UInt32)
    release : Proc(IDiscFormat2DataEventArgs*, UInt32)
    get_type_info_count : Proc(IDiscFormat2DataEventArgs*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2DataEventArgs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2DataEventArgs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2DataEventArgs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_lba : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_sector_count : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_last_read_lba : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_last_written_lba : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_total_system_buffer : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_used_system_buffer : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_free_system_buffer : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_elapsed_time : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_remaining_time : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_total_time : Proc(IDiscFormat2DataEventArgs*, Int32*, HRESULT)
    get_current_action : Proc(IDiscFormat2DataEventArgs*, IMAPI_FORMAT2_DATA_WRITE_ACTION*, HRESULT)
  end

  IDiscFormat2DataEventArgs_GUID = "2735413d-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2DataEventArgs = LibC::GUID.new(0x2735413d_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2DataEventArgs
    lpVtbl : IDiscFormat2DataEventArgsVTbl*
  end

  struct IDiscFormat2TrackAtOnceVTbl
    query_interface : Proc(IDiscFormat2TrackAtOnce*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2TrackAtOnce*, UInt32)
    release : Proc(IDiscFormat2TrackAtOnce*, UInt32)
    get_type_info_count : Proc(IDiscFormat2TrackAtOnce*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2TrackAtOnce*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2TrackAtOnce*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2TrackAtOnce*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_recorder_supported : Proc(IDiscFormat2TrackAtOnce*, IDiscRecorder2, Int16*, HRESULT)
    is_current_media_supported : Proc(IDiscFormat2TrackAtOnce*, IDiscRecorder2, Int16*, HRESULT)
    get_media_physically_blank : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_media_heuristically_blank : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_supported_media_types : Proc(IDiscFormat2TrackAtOnce*, SAFEARRAY**, HRESULT)
    prepare_media : Proc(IDiscFormat2TrackAtOnce*, HRESULT)
    add_audio_track : Proc(IDiscFormat2TrackAtOnce*, IStream, HRESULT)
    cancel_add_track : Proc(IDiscFormat2TrackAtOnce*, HRESULT)
    release_media : Proc(IDiscFormat2TrackAtOnce*, HRESULT)
    set_write_speed : Proc(IDiscFormat2TrackAtOnce*, Int32, Int16, HRESULT)
    put_recorder : Proc(IDiscFormat2TrackAtOnce*, IDiscRecorder2, HRESULT)
    get_recorder : Proc(IDiscFormat2TrackAtOnce*, IDiscRecorder2*, HRESULT)
    put_buffer_underrun_free_disabled : Proc(IDiscFormat2TrackAtOnce*, Int16, HRESULT)
    get_buffer_underrun_free_disabled : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_number_of_existing_tracks : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    get_total_sectors_on_media : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    get_free_sectors_on_media : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    get_used_sectors_on_media : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    put_do_not_finalize_media : Proc(IDiscFormat2TrackAtOnce*, Int16, HRESULT)
    get_do_not_finalize_media : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_expected_table_of_contents : Proc(IDiscFormat2TrackAtOnce*, SAFEARRAY**, HRESULT)
    get_current_physical_media_type : Proc(IDiscFormat2TrackAtOnce*, IMAPI_MEDIA_PHYSICAL_TYPE*, HRESULT)
    put_client_name : Proc(IDiscFormat2TrackAtOnce*, UInt8*, HRESULT)
    get_client_name : Proc(IDiscFormat2TrackAtOnce*, UInt8**, HRESULT)
    get_requested_write_speed : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    get_requested_rotation_type_is_pure_cav : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_current_write_speed : Proc(IDiscFormat2TrackAtOnce*, Int32*, HRESULT)
    get_current_rotation_type_is_pure_cav : Proc(IDiscFormat2TrackAtOnce*, Int16*, HRESULT)
    get_supported_write_speeds : Proc(IDiscFormat2TrackAtOnce*, SAFEARRAY**, HRESULT)
    get_supported_write_speed_descriptors : Proc(IDiscFormat2TrackAtOnce*, SAFEARRAY**, HRESULT)
  end

  IDiscFormat2TrackAtOnce_GUID = "27354154-8f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2TrackAtOnce = LibC::GUID.new(0x27354154_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2TrackAtOnce
    lpVtbl : IDiscFormat2TrackAtOnceVTbl*
  end

  struct DDiscFormat2TrackAtOnceEventsVTbl
    query_interface : Proc(DDiscFormat2TrackAtOnceEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32)
    release : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32)
    get_type_info_count : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DDiscFormat2TrackAtOnceEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DDiscFormat2TrackAtOnceEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DDiscFormat2TrackAtOnceEvents*, IDispatch, IDispatch, HRESULT)
  end

  DDiscFormat2TrackAtOnceEvents_GUID = "2735413f-7f64-5b0f-8f00-5d77afbe261e"
  IID_DDiscFormat2TrackAtOnceEvents = LibC::GUID.new(0x2735413f_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DDiscFormat2TrackAtOnceEvents
    lpVtbl : DDiscFormat2TrackAtOnceEventsVTbl*
  end

  struct IDiscFormat2TrackAtOnceEventArgsVTbl
    query_interface : Proc(IDiscFormat2TrackAtOnceEventArgs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32)
    release : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32)
    get_type_info_count : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2TrackAtOnceEventArgs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_lba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_sector_count : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_last_read_lba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_last_written_lba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_total_system_buffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_used_system_buffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_free_system_buffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_current_track_number : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_current_action : Proc(IDiscFormat2TrackAtOnceEventArgs*, IMAPI_FORMAT2_TAO_WRITE_ACTION*, HRESULT)
    get_elapsed_time : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
    get_remaining_time : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, HRESULT)
  end

  IDiscFormat2TrackAtOnceEventArgs_GUID = "27354140-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2TrackAtOnceEventArgs = LibC::GUID.new(0x27354140_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2TrackAtOnceEventArgs
    lpVtbl : IDiscFormat2TrackAtOnceEventArgsVTbl*
  end

  struct IDiscFormat2RawCDVTbl
    query_interface : Proc(IDiscFormat2RawCD*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2RawCD*, UInt32)
    release : Proc(IDiscFormat2RawCD*, UInt32)
    get_type_info_count : Proc(IDiscFormat2RawCD*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2RawCD*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2RawCD*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2RawCD*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_recorder_supported : Proc(IDiscFormat2RawCD*, IDiscRecorder2, Int16*, HRESULT)
    is_current_media_supported : Proc(IDiscFormat2RawCD*, IDiscRecorder2, Int16*, HRESULT)
    get_media_physically_blank : Proc(IDiscFormat2RawCD*, Int16*, HRESULT)
    get_media_heuristically_blank : Proc(IDiscFormat2RawCD*, Int16*, HRESULT)
    get_supported_media_types : Proc(IDiscFormat2RawCD*, SAFEARRAY**, HRESULT)
    prepare_media : Proc(IDiscFormat2RawCD*, HRESULT)
    write_media : Proc(IDiscFormat2RawCD*, IStream, HRESULT)
    write_media2 : Proc(IDiscFormat2RawCD*, IStream, Int32, HRESULT)
    cancel_write : Proc(IDiscFormat2RawCD*, HRESULT)
    release_media : Proc(IDiscFormat2RawCD*, HRESULT)
    set_write_speed : Proc(IDiscFormat2RawCD*, Int32, Int16, HRESULT)
    put_recorder : Proc(IDiscFormat2RawCD*, IDiscRecorder2, HRESULT)
    get_recorder : Proc(IDiscFormat2RawCD*, IDiscRecorder2*, HRESULT)
    put_buffer_underrun_free_disabled : Proc(IDiscFormat2RawCD*, Int16, HRESULT)
    get_buffer_underrun_free_disabled : Proc(IDiscFormat2RawCD*, Int16*, HRESULT)
    get_start_of_next_session : Proc(IDiscFormat2RawCD*, Int32*, HRESULT)
    get_last_possible_start_of_leadout : Proc(IDiscFormat2RawCD*, Int32*, HRESULT)
    get_current_physical_media_type : Proc(IDiscFormat2RawCD*, IMAPI_MEDIA_PHYSICAL_TYPE*, HRESULT)
    get_supported_sector_types : Proc(IDiscFormat2RawCD*, SAFEARRAY**, HRESULT)
    put_requested_sector_type : Proc(IDiscFormat2RawCD*, IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE, HRESULT)
    get_requested_sector_type : Proc(IDiscFormat2RawCD*, IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*, HRESULT)
    put_client_name : Proc(IDiscFormat2RawCD*, UInt8*, HRESULT)
    get_client_name : Proc(IDiscFormat2RawCD*, UInt8**, HRESULT)
    get_requested_write_speed : Proc(IDiscFormat2RawCD*, Int32*, HRESULT)
    get_requested_rotation_type_is_pure_cav : Proc(IDiscFormat2RawCD*, Int16*, HRESULT)
    get_current_write_speed : Proc(IDiscFormat2RawCD*, Int32*, HRESULT)
    get_current_rotation_type_is_pure_cav : Proc(IDiscFormat2RawCD*, Int16*, HRESULT)
    get_supported_write_speeds : Proc(IDiscFormat2RawCD*, SAFEARRAY**, HRESULT)
    get_supported_write_speed_descriptors : Proc(IDiscFormat2RawCD*, SAFEARRAY**, HRESULT)
  end

  IDiscFormat2RawCD_GUID = "27354155-8f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2RawCD = LibC::GUID.new(0x27354155_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2RawCD
    lpVtbl : IDiscFormat2RawCDVTbl*
  end

  struct DDiscFormat2RawCDEventsVTbl
    query_interface : Proc(DDiscFormat2RawCDEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DDiscFormat2RawCDEvents*, UInt32)
    release : Proc(DDiscFormat2RawCDEvents*, UInt32)
    get_type_info_count : Proc(DDiscFormat2RawCDEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DDiscFormat2RawCDEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DDiscFormat2RawCDEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DDiscFormat2RawCDEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DDiscFormat2RawCDEvents*, IDispatch, IDispatch, HRESULT)
  end

  DDiscFormat2RawCDEvents_GUID = "27354142-7f64-5b0f-8f00-5d77afbe261e"
  IID_DDiscFormat2RawCDEvents = LibC::GUID.new(0x27354142_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct DDiscFormat2RawCDEvents
    lpVtbl : DDiscFormat2RawCDEventsVTbl*
  end

  struct IDiscFormat2RawCDEventArgsVTbl
    query_interface : Proc(IDiscFormat2RawCDEventArgs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscFormat2RawCDEventArgs*, UInt32)
    release : Proc(IDiscFormat2RawCDEventArgs*, UInt32)
    get_type_info_count : Proc(IDiscFormat2RawCDEventArgs*, UInt32*, HRESULT)
    get_type_info : Proc(IDiscFormat2RawCDEventArgs*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDiscFormat2RawCDEventArgs*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDiscFormat2RawCDEventArgs*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_lba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_sector_count : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_last_read_lba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_last_written_lba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_total_system_buffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_used_system_buffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_free_system_buffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_current_action : Proc(IDiscFormat2RawCDEventArgs*, IMAPI_FORMAT2_RAW_CD_WRITE_ACTION*, HRESULT)
    get_elapsed_time : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
    get_remaining_time : Proc(IDiscFormat2RawCDEventArgs*, Int32*, HRESULT)
  end

  IDiscFormat2RawCDEventArgs_GUID = "27354143-7f64-5b0f-8f00-5d77afbe261e"
  IID_IDiscFormat2RawCDEventArgs = LibC::GUID.new(0x27354143_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IDiscFormat2RawCDEventArgs
    lpVtbl : IDiscFormat2RawCDEventArgsVTbl*
  end

  struct IBurnVerificationVTbl
    query_interface : Proc(IBurnVerification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBurnVerification*, UInt32)
    release : Proc(IBurnVerification*, UInt32)
    put_burn_verification_level : Proc(IBurnVerification*, IMAPI_BURN_VERIFICATION_LEVEL, HRESULT)
    get_burn_verification_level : Proc(IBurnVerification*, IMAPI_BURN_VERIFICATION_LEVEL*, HRESULT)
  end

  IBurnVerification_GUID = "d2ffd834-958b-426d-8470-2a13879c6a91"
  IID_IBurnVerification = LibC::GUID.new(0xd2ffd834_u32, 0x958b_u16, 0x426d_u16, StaticArray[0x84_u8, 0x70_u8, 0x2a_u8, 0x13_u8, 0x87_u8, 0x9c_u8, 0x6a_u8, 0x91_u8])
  struct IBurnVerification
    lpVtbl : IBurnVerificationVTbl*
  end

  struct IWriteSpeedDescriptorVTbl
    query_interface : Proc(IWriteSpeedDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IWriteSpeedDescriptor*, UInt32)
    release : Proc(IWriteSpeedDescriptor*, UInt32)
    get_type_info_count : Proc(IWriteSpeedDescriptor*, UInt32*, HRESULT)
    get_type_info : Proc(IWriteSpeedDescriptor*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IWriteSpeedDescriptor*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IWriteSpeedDescriptor*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_media_type : Proc(IWriteSpeedDescriptor*, IMAPI_MEDIA_PHYSICAL_TYPE*, HRESULT)
    get_rotation_type_is_pure_cav : Proc(IWriteSpeedDescriptor*, Int16*, HRESULT)
    get_write_speed : Proc(IWriteSpeedDescriptor*, Int32*, HRESULT)
  end

  IWriteSpeedDescriptor_GUID = "27354144-7f64-5b0f-8f00-5d77afbe261e"
  IID_IWriteSpeedDescriptor = LibC::GUID.new(0x27354144_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IWriteSpeedDescriptor
    lpVtbl : IWriteSpeedDescriptorVTbl*
  end

  struct IMultisessionVTbl
    query_interface : Proc(IMultisession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultisession*, UInt32)
    release : Proc(IMultisession*, UInt32)
    get_type_info_count : Proc(IMultisession*, UInt32*, HRESULT)
    get_type_info : Proc(IMultisession*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMultisession*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMultisession*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_supported_on_current_media_state : Proc(IMultisession*, Int16*, HRESULT)
    put_in_use : Proc(IMultisession*, Int16, HRESULT)
    get_in_use : Proc(IMultisession*, Int16*, HRESULT)
    get_import_recorder : Proc(IMultisession*, IDiscRecorder2*, HRESULT)
  end

  IMultisession_GUID = "27354150-7f64-5b0f-8f00-5d77afbe261e"
  IID_IMultisession = LibC::GUID.new(0x27354150_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IMultisession
    lpVtbl : IMultisessionVTbl*
  end

  struct IMultisessionSequentialVTbl
    query_interface : Proc(IMultisessionSequential*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultisessionSequential*, UInt32)
    release : Proc(IMultisessionSequential*, UInt32)
    get_type_info_count : Proc(IMultisessionSequential*, UInt32*, HRESULT)
    get_type_info : Proc(IMultisessionSequential*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMultisessionSequential*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMultisessionSequential*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_supported_on_current_media_state : Proc(IMultisessionSequential*, Int16*, HRESULT)
    put_in_use : Proc(IMultisessionSequential*, Int16, HRESULT)
    get_in_use : Proc(IMultisessionSequential*, Int16*, HRESULT)
    get_import_recorder : Proc(IMultisessionSequential*, IDiscRecorder2*, HRESULT)
    get_is_first_data_session : Proc(IMultisessionSequential*, Int16*, HRESULT)
    get_start_address_of_previous_session : Proc(IMultisessionSequential*, Int32*, HRESULT)
    get_last_written_address_of_previous_session : Proc(IMultisessionSequential*, Int32*, HRESULT)
    get_next_writable_address : Proc(IMultisessionSequential*, Int32*, HRESULT)
    get_free_sectors_on_media : Proc(IMultisessionSequential*, Int32*, HRESULT)
  end

  IMultisessionSequential_GUID = "27354151-7f64-5b0f-8f00-5d77afbe261e"
  IID_IMultisessionSequential = LibC::GUID.new(0x27354151_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IMultisessionSequential
    lpVtbl : IMultisessionSequentialVTbl*
  end

  struct IMultisessionSequential2VTbl
    query_interface : Proc(IMultisessionSequential2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultisessionSequential2*, UInt32)
    release : Proc(IMultisessionSequential2*, UInt32)
    get_type_info_count : Proc(IMultisessionSequential2*, UInt32*, HRESULT)
    get_type_info : Proc(IMultisessionSequential2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMultisessionSequential2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMultisessionSequential2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_supported_on_current_media_state : Proc(IMultisessionSequential2*, Int16*, HRESULT)
    put_in_use : Proc(IMultisessionSequential2*, Int16, HRESULT)
    get_in_use : Proc(IMultisessionSequential2*, Int16*, HRESULT)
    get_import_recorder : Proc(IMultisessionSequential2*, IDiscRecorder2*, HRESULT)
    get_is_first_data_session : Proc(IMultisessionSequential2*, Int16*, HRESULT)
    get_start_address_of_previous_session : Proc(IMultisessionSequential2*, Int32*, HRESULT)
    get_last_written_address_of_previous_session : Proc(IMultisessionSequential2*, Int32*, HRESULT)
    get_next_writable_address : Proc(IMultisessionSequential2*, Int32*, HRESULT)
    get_free_sectors_on_media : Proc(IMultisessionSequential2*, Int32*, HRESULT)
    get_write_unit_size : Proc(IMultisessionSequential2*, Int32*, HRESULT)
  end

  IMultisessionSequential2_GUID = "b507ca22-2204-11dd-966a-001aa01bbc58"
  IID_IMultisessionSequential2 = LibC::GUID.new(0xb507ca22_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  struct IMultisessionSequential2
    lpVtbl : IMultisessionSequential2VTbl*
  end

  struct IMultisessionRandomWriteVTbl
    query_interface : Proc(IMultisessionRandomWrite*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultisessionRandomWrite*, UInt32)
    release : Proc(IMultisessionRandomWrite*, UInt32)
    get_type_info_count : Proc(IMultisessionRandomWrite*, UInt32*, HRESULT)
    get_type_info : Proc(IMultisessionRandomWrite*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMultisessionRandomWrite*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMultisessionRandomWrite*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_is_supported_on_current_media_state : Proc(IMultisessionRandomWrite*, Int16*, HRESULT)
    put_in_use : Proc(IMultisessionRandomWrite*, Int16, HRESULT)
    get_in_use : Proc(IMultisessionRandomWrite*, Int16*, HRESULT)
    get_import_recorder : Proc(IMultisessionRandomWrite*, IDiscRecorder2*, HRESULT)
    get_write_unit_size : Proc(IMultisessionRandomWrite*, Int32*, HRESULT)
    get_last_written_address : Proc(IMultisessionRandomWrite*, Int32*, HRESULT)
    get_total_sectors_on_media : Proc(IMultisessionRandomWrite*, Int32*, HRESULT)
  end

  IMultisessionRandomWrite_GUID = "b507ca23-2204-11dd-966a-001aa01bbc58"
  IID_IMultisessionRandomWrite = LibC::GUID.new(0xb507ca23_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  struct IMultisessionRandomWrite
    lpVtbl : IMultisessionRandomWriteVTbl*
  end

  struct IStreamPseudoRandomBasedVTbl
    query_interface : Proc(IStreamPseudoRandomBased*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamPseudoRandomBased*, UInt32)
    release : Proc(IStreamPseudoRandomBased*, UInt32)
    read : Proc(IStreamPseudoRandomBased*, Void*, UInt32, UInt32*, HRESULT)
    write : Proc(IStreamPseudoRandomBased*, Void*, UInt32, UInt32*, HRESULT)
    seek : Proc(IStreamPseudoRandomBased*, LARGE_INTEGER, STREAM_SEEK, ULARGE_INTEGER*, HRESULT)
    set_size : Proc(IStreamPseudoRandomBased*, ULARGE_INTEGER, HRESULT)
    copy_to : Proc(IStreamPseudoRandomBased*, IStream, ULARGE_INTEGER, ULARGE_INTEGER*, ULARGE_INTEGER*, HRESULT)
    commit : Proc(IStreamPseudoRandomBased*, UInt32, HRESULT)
    revert : Proc(IStreamPseudoRandomBased*, HRESULT)
    lock_region : Proc(IStreamPseudoRandomBased*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    unlock_region : Proc(IStreamPseudoRandomBased*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    stat : Proc(IStreamPseudoRandomBased*, STATSTG*, UInt32, HRESULT)
    clone : Proc(IStreamPseudoRandomBased*, IStream*, HRESULT)
    put_seed : Proc(IStreamPseudoRandomBased*, UInt32, HRESULT)
    get_seed : Proc(IStreamPseudoRandomBased*, UInt32*, HRESULT)
    put_extended_seed : Proc(IStreamPseudoRandomBased*, UInt32*, UInt32, HRESULT)
    get_extended_seed : Proc(IStreamPseudoRandomBased*, UInt32**, UInt32*, HRESULT)
  end

  IStreamPseudoRandomBased_GUID = "27354145-7f64-5b0f-8f00-5d77afbe261e"
  IID_IStreamPseudoRandomBased = LibC::GUID.new(0x27354145_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IStreamPseudoRandomBased
    lpVtbl : IStreamPseudoRandomBasedVTbl*
  end

  struct IStreamConcatenateVTbl
    query_interface : Proc(IStreamConcatenate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamConcatenate*, UInt32)
    release : Proc(IStreamConcatenate*, UInt32)
    read : Proc(IStreamConcatenate*, Void*, UInt32, UInt32*, HRESULT)
    write : Proc(IStreamConcatenate*, Void*, UInt32, UInt32*, HRESULT)
    seek : Proc(IStreamConcatenate*, LARGE_INTEGER, STREAM_SEEK, ULARGE_INTEGER*, HRESULT)
    set_size : Proc(IStreamConcatenate*, ULARGE_INTEGER, HRESULT)
    copy_to : Proc(IStreamConcatenate*, IStream, ULARGE_INTEGER, ULARGE_INTEGER*, ULARGE_INTEGER*, HRESULT)
    commit : Proc(IStreamConcatenate*, UInt32, HRESULT)
    revert : Proc(IStreamConcatenate*, HRESULT)
    lock_region : Proc(IStreamConcatenate*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    unlock_region : Proc(IStreamConcatenate*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    stat : Proc(IStreamConcatenate*, STATSTG*, UInt32, HRESULT)
    clone : Proc(IStreamConcatenate*, IStream*, HRESULT)
    initialize : Proc(IStreamConcatenate*, IStream, IStream, HRESULT)
    initialize2 : Proc(IStreamConcatenate*, IStream*, UInt32, HRESULT)
    append : Proc(IStreamConcatenate*, IStream, HRESULT)
    append2 : Proc(IStreamConcatenate*, IStream*, UInt32, HRESULT)
  end

  IStreamConcatenate_GUID = "27354146-7f64-5b0f-8f00-5d77afbe261e"
  IID_IStreamConcatenate = LibC::GUID.new(0x27354146_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IStreamConcatenate
    lpVtbl : IStreamConcatenateVTbl*
  end

  struct IStreamInterleaveVTbl
    query_interface : Proc(IStreamInterleave*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamInterleave*, UInt32)
    release : Proc(IStreamInterleave*, UInt32)
    read : Proc(IStreamInterleave*, Void*, UInt32, UInt32*, HRESULT)
    write : Proc(IStreamInterleave*, Void*, UInt32, UInt32*, HRESULT)
    seek : Proc(IStreamInterleave*, LARGE_INTEGER, STREAM_SEEK, ULARGE_INTEGER*, HRESULT)
    set_size : Proc(IStreamInterleave*, ULARGE_INTEGER, HRESULT)
    copy_to : Proc(IStreamInterleave*, IStream, ULARGE_INTEGER, ULARGE_INTEGER*, ULARGE_INTEGER*, HRESULT)
    commit : Proc(IStreamInterleave*, UInt32, HRESULT)
    revert : Proc(IStreamInterleave*, HRESULT)
    lock_region : Proc(IStreamInterleave*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    unlock_region : Proc(IStreamInterleave*, ULARGE_INTEGER, ULARGE_INTEGER, UInt32, HRESULT)
    stat : Proc(IStreamInterleave*, STATSTG*, UInt32, HRESULT)
    clone : Proc(IStreamInterleave*, IStream*, HRESULT)
    initialize : Proc(IStreamInterleave*, IStream*, UInt32*, UInt32, HRESULT)
  end

  IStreamInterleave_GUID = "27354147-7f64-5b0f-8f00-5d77afbe261e"
  IID_IStreamInterleave = LibC::GUID.new(0x27354147_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
  struct IStreamInterleave
    lpVtbl : IStreamInterleaveVTbl*
  end

  struct IRawCDImageCreatorVTbl
    query_interface : Proc(IRawCDImageCreator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRawCDImageCreator*, UInt32)
    release : Proc(IRawCDImageCreator*, UInt32)
    get_type_info_count : Proc(IRawCDImageCreator*, UInt32*, HRESULT)
    get_type_info : Proc(IRawCDImageCreator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRawCDImageCreator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRawCDImageCreator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_result_image : Proc(IRawCDImageCreator*, IStream*, HRESULT)
    add_track : Proc(IRawCDImageCreator*, IMAPI_CD_SECTOR_TYPE, IStream, Int32*, HRESULT)
    add_special_pregap : Proc(IRawCDImageCreator*, IStream, HRESULT)
    add_subcode_rw_generator : Proc(IRawCDImageCreator*, IStream, HRESULT)
    put_resulting_image_type : Proc(IRawCDImageCreator*, IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE, HRESULT)
    get_resulting_image_type : Proc(IRawCDImageCreator*, IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*, HRESULT)
    get_start_of_leadout : Proc(IRawCDImageCreator*, Int32*, HRESULT)
    put_start_of_leadout_limit : Proc(IRawCDImageCreator*, Int32, HRESULT)
    get_start_of_leadout_limit : Proc(IRawCDImageCreator*, Int32*, HRESULT)
    put_disable_gapless_audio : Proc(IRawCDImageCreator*, Int16, HRESULT)
    get_disable_gapless_audio : Proc(IRawCDImageCreator*, Int16*, HRESULT)
    put_media_catalog_number : Proc(IRawCDImageCreator*, UInt8*, HRESULT)
    get_media_catalog_number : Proc(IRawCDImageCreator*, UInt8**, HRESULT)
    put_starting_track_number : Proc(IRawCDImageCreator*, Int32, HRESULT)
    get_starting_track_number : Proc(IRawCDImageCreator*, Int32*, HRESULT)
    get_track_info : Proc(IRawCDImageCreator*, Int32, IRawCDImageTrackInfo*, HRESULT)
    get_number_of_existing_tracks : Proc(IRawCDImageCreator*, Int32*, HRESULT)
    get_last_used_user_sector_in_image : Proc(IRawCDImageCreator*, Int32*, HRESULT)
    get_expected_table_of_contents : Proc(IRawCDImageCreator*, SAFEARRAY**, HRESULT)
  end

  IRawCDImageCreator_GUID = "25983550-9d65-49ce-b335-40630d901227"
  IID_IRawCDImageCreator = LibC::GUID.new(0x25983550_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])
  struct IRawCDImageCreator
    lpVtbl : IRawCDImageCreatorVTbl*
  end

  struct IRawCDImageTrackInfoVTbl
    query_interface : Proc(IRawCDImageTrackInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRawCDImageTrackInfo*, UInt32)
    release : Proc(IRawCDImageTrackInfo*, UInt32)
    get_type_info_count : Proc(IRawCDImageTrackInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IRawCDImageTrackInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRawCDImageTrackInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRawCDImageTrackInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_starting_lba : Proc(IRawCDImageTrackInfo*, Int32*, HRESULT)
    get_sector_count : Proc(IRawCDImageTrackInfo*, Int32*, HRESULT)
    get_track_number : Proc(IRawCDImageTrackInfo*, Int32*, HRESULT)
    get_sector_type : Proc(IRawCDImageTrackInfo*, IMAPI_CD_SECTOR_TYPE*, HRESULT)
    get_isrc : Proc(IRawCDImageTrackInfo*, UInt8**, HRESULT)
    put_isrc : Proc(IRawCDImageTrackInfo*, UInt8*, HRESULT)
    get_digital_audio_copy_setting : Proc(IRawCDImageTrackInfo*, IMAPI_CD_TRACK_DIGITAL_COPY_SETTING*, HRESULT)
    put_digital_audio_copy_setting : Proc(IRawCDImageTrackInfo*, IMAPI_CD_TRACK_DIGITAL_COPY_SETTING, HRESULT)
    get_audio_has_preemphasis : Proc(IRawCDImageTrackInfo*, Int16*, HRESULT)
    put_audio_has_preemphasis : Proc(IRawCDImageTrackInfo*, Int16, HRESULT)
    get_track_indexes : Proc(IRawCDImageTrackInfo*, SAFEARRAY**, HRESULT)
    add_track_index : Proc(IRawCDImageTrackInfo*, Int32, HRESULT)
    clear_track_index : Proc(IRawCDImageTrackInfo*, Int32, HRESULT)
  end

  IRawCDImageTrackInfo_GUID = "25983551-9d65-49ce-b335-40630d901227"
  IID_IRawCDImageTrackInfo = LibC::GUID.new(0x25983551_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])
  struct IRawCDImageTrackInfo
    lpVtbl : IRawCDImageTrackInfoVTbl*
  end

  struct IBlockRangeVTbl
    query_interface : Proc(IBlockRange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBlockRange*, UInt32)
    release : Proc(IBlockRange*, UInt32)
    get_type_info_count : Proc(IBlockRange*, UInt32*, HRESULT)
    get_type_info : Proc(IBlockRange*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBlockRange*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBlockRange*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_lba : Proc(IBlockRange*, Int32*, HRESULT)
    get_end_lba : Proc(IBlockRange*, Int32*, HRESULT)
  end

  IBlockRange_GUID = "b507ca25-2204-11dd-966a-001aa01bbc58"
  IID_IBlockRange = LibC::GUID.new(0xb507ca25_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  struct IBlockRange
    lpVtbl : IBlockRangeVTbl*
  end

  struct IBlockRangeListVTbl
    query_interface : Proc(IBlockRangeList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBlockRangeList*, UInt32)
    release : Proc(IBlockRangeList*, UInt32)
    get_type_info_count : Proc(IBlockRangeList*, UInt32*, HRESULT)
    get_type_info : Proc(IBlockRangeList*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBlockRangeList*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBlockRangeList*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_block_ranges : Proc(IBlockRangeList*, SAFEARRAY**, HRESULT)
  end

  IBlockRangeList_GUID = "b507ca26-2204-11dd-966a-001aa01bbc58"
  IID_IBlockRangeList = LibC::GUID.new(0xb507ca26_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  struct IBlockRangeList
    lpVtbl : IBlockRangeListVTbl*
  end

  struct IBootOptionsVTbl
    query_interface : Proc(IBootOptions*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBootOptions*, UInt32)
    release : Proc(IBootOptions*, UInt32)
    get_type_info_count : Proc(IBootOptions*, UInt32*, HRESULT)
    get_type_info : Proc(IBootOptions*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBootOptions*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBootOptions*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_boot_image : Proc(IBootOptions*, IStream*, HRESULT)
    get_manufacturer : Proc(IBootOptions*, UInt8**, HRESULT)
    put_manufacturer : Proc(IBootOptions*, UInt8*, HRESULT)
    get_platform_id : Proc(IBootOptions*, PlatformId*, HRESULT)
    put_platform_id : Proc(IBootOptions*, PlatformId, HRESULT)
    get_emulation : Proc(IBootOptions*, EmulationType*, HRESULT)
    put_emulation : Proc(IBootOptions*, EmulationType, HRESULT)
    get_image_size : Proc(IBootOptions*, UInt32*, HRESULT)
    assign_boot_image : Proc(IBootOptions*, IStream, HRESULT)
  end

  IBootOptions_GUID = "2c941fd4-975b-59be-a960-9a2a262853a5"
  IID_IBootOptions = LibC::GUID.new(0x2c941fd4_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IBootOptions
    lpVtbl : IBootOptionsVTbl*
  end

  struct IProgressItemVTbl
    query_interface : Proc(IProgressItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProgressItem*, UInt32)
    release : Proc(IProgressItem*, UInt32)
    get_type_info_count : Proc(IProgressItem*, UInt32*, HRESULT)
    get_type_info : Proc(IProgressItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IProgressItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IProgressItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_description : Proc(IProgressItem*, UInt8**, HRESULT)
    get_first_block : Proc(IProgressItem*, UInt32*, HRESULT)
    get_last_block : Proc(IProgressItem*, UInt32*, HRESULT)
    get_block_count : Proc(IProgressItem*, UInt32*, HRESULT)
  end

  IProgressItem_GUID = "2c941fd5-975b-59be-a960-9a2a262853a5"
  IID_IProgressItem = LibC::GUID.new(0x2c941fd5_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IProgressItem
    lpVtbl : IProgressItemVTbl*
  end

  struct IEnumProgressItemsVTbl
    query_interface : Proc(IEnumProgressItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumProgressItems*, UInt32)
    release : Proc(IEnumProgressItems*, UInt32)
    next : Proc(IEnumProgressItems*, UInt32, IProgressItem*, UInt32*, HRESULT)
    skip : Proc(IEnumProgressItems*, UInt32, HRESULT)
    reset : Proc(IEnumProgressItems*, HRESULT)
    clone : Proc(IEnumProgressItems*, IEnumProgressItems*, HRESULT)
  end

  IEnumProgressItems_GUID = "2c941fd6-975b-59be-a960-9a2a262853a5"
  IID_IEnumProgressItems = LibC::GUID.new(0x2c941fd6_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IEnumProgressItems
    lpVtbl : IEnumProgressItemsVTbl*
  end

  struct IProgressItemsVTbl
    query_interface : Proc(IProgressItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(IProgressItems*, UInt32)
    release : Proc(IProgressItems*, UInt32)
    get_type_info_count : Proc(IProgressItems*, UInt32*, HRESULT)
    get_type_info : Proc(IProgressItems*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IProgressItems*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IProgressItems*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IProgressItems*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IProgressItems*, Int32, IProgressItem*, HRESULT)
    get_count : Proc(IProgressItems*, Int32*, HRESULT)
    progress_item_from_block : Proc(IProgressItems*, UInt32, IProgressItem*, HRESULT)
    progress_item_from_description : Proc(IProgressItems*, UInt8*, IProgressItem*, HRESULT)
    get_enum_progress_items : Proc(IProgressItems*, IEnumProgressItems*, HRESULT)
  end

  IProgressItems_GUID = "2c941fd7-975b-59be-a960-9a2a262853a5"
  IID_IProgressItems = LibC::GUID.new(0x2c941fd7_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IProgressItems
    lpVtbl : IProgressItemsVTbl*
  end

  struct IFileSystemImageResultVTbl
    query_interface : Proc(IFileSystemImageResult*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemImageResult*, UInt32)
    release : Proc(IFileSystemImageResult*, UInt32)
    get_type_info_count : Proc(IFileSystemImageResult*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSystemImageResult*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSystemImageResult*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSystemImageResult*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_image_stream : Proc(IFileSystemImageResult*, IStream*, HRESULT)
    get_progress_items : Proc(IFileSystemImageResult*, IProgressItems*, HRESULT)
    get_total_blocks : Proc(IFileSystemImageResult*, Int32*, HRESULT)
    get_block_size : Proc(IFileSystemImageResult*, Int32*, HRESULT)
    get_disc_id : Proc(IFileSystemImageResult*, UInt8**, HRESULT)
  end

  IFileSystemImageResult_GUID = "2c941fd8-975b-59be-a960-9a2a262853a5"
  IID_IFileSystemImageResult = LibC::GUID.new(0x2c941fd8_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IFileSystemImageResult
    lpVtbl : IFileSystemImageResultVTbl*
  end

  struct IFileSystemImageResult2VTbl
    query_interface : Proc(IFileSystemImageResult2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemImageResult2*, UInt32)
    release : Proc(IFileSystemImageResult2*, UInt32)
    get_type_info_count : Proc(IFileSystemImageResult2*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSystemImageResult2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSystemImageResult2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSystemImageResult2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_image_stream : Proc(IFileSystemImageResult2*, IStream*, HRESULT)
    get_progress_items : Proc(IFileSystemImageResult2*, IProgressItems*, HRESULT)
    get_total_blocks : Proc(IFileSystemImageResult2*, Int32*, HRESULT)
    get_block_size : Proc(IFileSystemImageResult2*, Int32*, HRESULT)
    get_disc_id : Proc(IFileSystemImageResult2*, UInt8**, HRESULT)
    get_modified_blocks : Proc(IFileSystemImageResult2*, IBlockRangeList*, HRESULT)
  end

  IFileSystemImageResult2_GUID = "b507ca29-2204-11dd-966a-001aa01bbc58"
  IID_IFileSystemImageResult2 = LibC::GUID.new(0xb507ca29_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
  struct IFileSystemImageResult2
    lpVtbl : IFileSystemImageResult2VTbl*
  end

  struct IFsiItemVTbl
    query_interface : Proc(IFsiItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiItem*, UInt32)
    release : Proc(IFsiItem*, UInt32)
    get_type_info_count : Proc(IFsiItem*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IFsiItem*, UInt8**, HRESULT)
    get_full_path : Proc(IFsiItem*, UInt8**, HRESULT)
    get_creation_time : Proc(IFsiItem*, Float64*, HRESULT)
    put_creation_time : Proc(IFsiItem*, Float64, HRESULT)
    get_last_accessed_time : Proc(IFsiItem*, Float64*, HRESULT)
    put_last_accessed_time : Proc(IFsiItem*, Float64, HRESULT)
    get_last_modified_time : Proc(IFsiItem*, Float64*, HRESULT)
    put_last_modified_time : Proc(IFsiItem*, Float64, HRESULT)
    get_is_hidden : Proc(IFsiItem*, Int16*, HRESULT)
    put_is_hidden : Proc(IFsiItem*, Int16, HRESULT)
    file_system_name : Proc(IFsiItem*, FsiFileSystems, UInt8**, HRESULT)
    file_system_path : Proc(IFsiItem*, FsiFileSystems, UInt8**, HRESULT)
  end

  IFsiItem_GUID = "2c941fd9-975b-59be-a960-9a2a262853a5"
  IID_IFsiItem = LibC::GUID.new(0x2c941fd9_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IFsiItem
    lpVtbl : IFsiItemVTbl*
  end

  struct IEnumFsiItemsVTbl
    query_interface : Proc(IEnumFsiItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumFsiItems*, UInt32)
    release : Proc(IEnumFsiItems*, UInt32)
    next : Proc(IEnumFsiItems*, UInt32, IFsiItem*, UInt32*, HRESULT)
    skip : Proc(IEnumFsiItems*, UInt32, HRESULT)
    reset : Proc(IEnumFsiItems*, HRESULT)
    clone : Proc(IEnumFsiItems*, IEnumFsiItems*, HRESULT)
  end

  IEnumFsiItems_GUID = "2c941fda-975b-59be-a960-9a2a262853a5"
  IID_IEnumFsiItems = LibC::GUID.new(0x2c941fda_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IEnumFsiItems
    lpVtbl : IEnumFsiItemsVTbl*
  end

  struct IFsiFileItemVTbl
    query_interface : Proc(IFsiFileItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiFileItem*, UInt32)
    release : Proc(IFsiFileItem*, UInt32)
    get_type_info_count : Proc(IFsiFileItem*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiFileItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiFileItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiFileItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IFsiFileItem*, UInt8**, HRESULT)
    get_full_path : Proc(IFsiFileItem*, UInt8**, HRESULT)
    get_creation_time : Proc(IFsiFileItem*, Float64*, HRESULT)
    put_creation_time : Proc(IFsiFileItem*, Float64, HRESULT)
    get_last_accessed_time : Proc(IFsiFileItem*, Float64*, HRESULT)
    put_last_accessed_time : Proc(IFsiFileItem*, Float64, HRESULT)
    get_last_modified_time : Proc(IFsiFileItem*, Float64*, HRESULT)
    put_last_modified_time : Proc(IFsiFileItem*, Float64, HRESULT)
    get_is_hidden : Proc(IFsiFileItem*, Int16*, HRESULT)
    put_is_hidden : Proc(IFsiFileItem*, Int16, HRESULT)
    file_system_name : Proc(IFsiFileItem*, FsiFileSystems, UInt8**, HRESULT)
    file_system_path : Proc(IFsiFileItem*, FsiFileSystems, UInt8**, HRESULT)
    get_data_size : Proc(IFsiFileItem*, Int64*, HRESULT)
    get_data_size32_bit_low : Proc(IFsiFileItem*, Int32*, HRESULT)
    get_data_size32_bit_high : Proc(IFsiFileItem*, Int32*, HRESULT)
    get_data : Proc(IFsiFileItem*, IStream*, HRESULT)
    put_data : Proc(IFsiFileItem*, IStream, HRESULT)
  end

  IFsiFileItem_GUID = "2c941fdb-975b-59be-a960-9a2a262853a5"
  IID_IFsiFileItem = LibC::GUID.new(0x2c941fdb_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IFsiFileItem
    lpVtbl : IFsiFileItemVTbl*
  end

  struct IFsiFileItem2VTbl
    query_interface : Proc(IFsiFileItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiFileItem2*, UInt32)
    release : Proc(IFsiFileItem2*, UInt32)
    get_type_info_count : Proc(IFsiFileItem2*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiFileItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiFileItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiFileItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IFsiFileItem2*, UInt8**, HRESULT)
    get_full_path : Proc(IFsiFileItem2*, UInt8**, HRESULT)
    get_creation_time : Proc(IFsiFileItem2*, Float64*, HRESULT)
    put_creation_time : Proc(IFsiFileItem2*, Float64, HRESULT)
    get_last_accessed_time : Proc(IFsiFileItem2*, Float64*, HRESULT)
    put_last_accessed_time : Proc(IFsiFileItem2*, Float64, HRESULT)
    get_last_modified_time : Proc(IFsiFileItem2*, Float64*, HRESULT)
    put_last_modified_time : Proc(IFsiFileItem2*, Float64, HRESULT)
    get_is_hidden : Proc(IFsiFileItem2*, Int16*, HRESULT)
    put_is_hidden : Proc(IFsiFileItem2*, Int16, HRESULT)
    file_system_name : Proc(IFsiFileItem2*, FsiFileSystems, UInt8**, HRESULT)
    file_system_path : Proc(IFsiFileItem2*, FsiFileSystems, UInt8**, HRESULT)
    get_data_size : Proc(IFsiFileItem2*, Int64*, HRESULT)
    get_data_size32_bit_low : Proc(IFsiFileItem2*, Int32*, HRESULT)
    get_data_size32_bit_high : Proc(IFsiFileItem2*, Int32*, HRESULT)
    get_data : Proc(IFsiFileItem2*, IStream*, HRESULT)
    put_data : Proc(IFsiFileItem2*, IStream, HRESULT)
    get_fsi_named_streams : Proc(IFsiFileItem2*, IFsiNamedStreams*, HRESULT)
    get_is_named_stream : Proc(IFsiFileItem2*, Int16*, HRESULT)
    add_stream : Proc(IFsiFileItem2*, UInt8*, IStream, HRESULT)
    remove_stream : Proc(IFsiFileItem2*, UInt8*, HRESULT)
    get_is_real_time : Proc(IFsiFileItem2*, Int16*, HRESULT)
    put_is_real_time : Proc(IFsiFileItem2*, Int16, HRESULT)
  end

  IFsiFileItem2_GUID = "199d0c19-11e1-40eb-8ec2-c8c822a07792"
  IID_IFsiFileItem2 = LibC::GUID.new(0x199d0c19_u32, 0x11e1_u16, 0x40eb_u16, StaticArray[0x8e_u8, 0xc2_u8, 0xc8_u8, 0xc8_u8, 0x22_u8, 0xa0_u8, 0x77_u8, 0x92_u8])
  struct IFsiFileItem2
    lpVtbl : IFsiFileItem2VTbl*
  end

  struct IFsiNamedStreamsVTbl
    query_interface : Proc(IFsiNamedStreams*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiNamedStreams*, UInt32)
    release : Proc(IFsiNamedStreams*, UInt32)
    get_type_info_count : Proc(IFsiNamedStreams*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiNamedStreams*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiNamedStreams*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiNamedStreams*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get__new_enum : Proc(IFsiNamedStreams*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IFsiNamedStreams*, Int32, IFsiFileItem2*, HRESULT)
    get_count : Proc(IFsiNamedStreams*, Int32*, HRESULT)
    get_enum_named_streams : Proc(IFsiNamedStreams*, IEnumFsiItems*, HRESULT)
  end

  IFsiNamedStreams_GUID = "ed79ba56-5294-4250-8d46-f9aecee23459"
  IID_IFsiNamedStreams = LibC::GUID.new(0xed79ba56_u32, 0x5294_u16, 0x4250_u16, StaticArray[0x8d_u8, 0x46_u8, 0xf9_u8, 0xae_u8, 0xce_u8, 0xe2_u8, 0x34_u8, 0x59_u8])
  struct IFsiNamedStreams
    lpVtbl : IFsiNamedStreamsVTbl*
  end

  struct IFsiDirectoryItemVTbl
    query_interface : Proc(IFsiDirectoryItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiDirectoryItem*, UInt32)
    release : Proc(IFsiDirectoryItem*, UInt32)
    get_type_info_count : Proc(IFsiDirectoryItem*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiDirectoryItem*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiDirectoryItem*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiDirectoryItem*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IFsiDirectoryItem*, UInt8**, HRESULT)
    get_full_path : Proc(IFsiDirectoryItem*, UInt8**, HRESULT)
    get_creation_time : Proc(IFsiDirectoryItem*, Float64*, HRESULT)
    put_creation_time : Proc(IFsiDirectoryItem*, Float64, HRESULT)
    get_last_accessed_time : Proc(IFsiDirectoryItem*, Float64*, HRESULT)
    put_last_accessed_time : Proc(IFsiDirectoryItem*, Float64, HRESULT)
    get_last_modified_time : Proc(IFsiDirectoryItem*, Float64*, HRESULT)
    put_last_modified_time : Proc(IFsiDirectoryItem*, Float64, HRESULT)
    get_is_hidden : Proc(IFsiDirectoryItem*, Int16*, HRESULT)
    put_is_hidden : Proc(IFsiDirectoryItem*, Int16, HRESULT)
    file_system_name : Proc(IFsiDirectoryItem*, FsiFileSystems, UInt8**, HRESULT)
    file_system_path : Proc(IFsiDirectoryItem*, FsiFileSystems, UInt8**, HRESULT)
    get__new_enum : Proc(IFsiDirectoryItem*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IFsiDirectoryItem*, UInt8*, IFsiItem*, HRESULT)
    get_count : Proc(IFsiDirectoryItem*, Int32*, HRESULT)
    get_enum_fsi_items : Proc(IFsiDirectoryItem*, IEnumFsiItems*, HRESULT)
    add_directory : Proc(IFsiDirectoryItem*, UInt8*, HRESULT)
    add_file : Proc(IFsiDirectoryItem*, UInt8*, IStream, HRESULT)
    add_tree : Proc(IFsiDirectoryItem*, UInt8*, Int16, HRESULT)
    add : Proc(IFsiDirectoryItem*, IFsiItem, HRESULT)
    remove : Proc(IFsiDirectoryItem*, UInt8*, HRESULT)
    remove_tree : Proc(IFsiDirectoryItem*, UInt8*, HRESULT)
  end

  IFsiDirectoryItem_GUID = "2c941fdc-975b-59be-a960-9a2a262853a5"
  IID_IFsiDirectoryItem = LibC::GUID.new(0x2c941fdc_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IFsiDirectoryItem
    lpVtbl : IFsiDirectoryItemVTbl*
  end

  struct IFsiDirectoryItem2VTbl
    query_interface : Proc(IFsiDirectoryItem2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFsiDirectoryItem2*, UInt32)
    release : Proc(IFsiDirectoryItem2*, UInt32)
    get_type_info_count : Proc(IFsiDirectoryItem2*, UInt32*, HRESULT)
    get_type_info : Proc(IFsiDirectoryItem2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFsiDirectoryItem2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFsiDirectoryItem2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IFsiDirectoryItem2*, UInt8**, HRESULT)
    get_full_path : Proc(IFsiDirectoryItem2*, UInt8**, HRESULT)
    get_creation_time : Proc(IFsiDirectoryItem2*, Float64*, HRESULT)
    put_creation_time : Proc(IFsiDirectoryItem2*, Float64, HRESULT)
    get_last_accessed_time : Proc(IFsiDirectoryItem2*, Float64*, HRESULT)
    put_last_accessed_time : Proc(IFsiDirectoryItem2*, Float64, HRESULT)
    get_last_modified_time : Proc(IFsiDirectoryItem2*, Float64*, HRESULT)
    put_last_modified_time : Proc(IFsiDirectoryItem2*, Float64, HRESULT)
    get_is_hidden : Proc(IFsiDirectoryItem2*, Int16*, HRESULT)
    put_is_hidden : Proc(IFsiDirectoryItem2*, Int16, HRESULT)
    file_system_name : Proc(IFsiDirectoryItem2*, FsiFileSystems, UInt8**, HRESULT)
    file_system_path : Proc(IFsiDirectoryItem2*, FsiFileSystems, UInt8**, HRESULT)
    get__new_enum : Proc(IFsiDirectoryItem2*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IFsiDirectoryItem2*, UInt8*, IFsiItem*, HRESULT)
    get_count : Proc(IFsiDirectoryItem2*, Int32*, HRESULT)
    get_enum_fsi_items : Proc(IFsiDirectoryItem2*, IEnumFsiItems*, HRESULT)
    add_directory : Proc(IFsiDirectoryItem2*, UInt8*, HRESULT)
    add_file : Proc(IFsiDirectoryItem2*, UInt8*, IStream, HRESULT)
    add_tree : Proc(IFsiDirectoryItem2*, UInt8*, Int16, HRESULT)
    add : Proc(IFsiDirectoryItem2*, IFsiItem, HRESULT)
    remove : Proc(IFsiDirectoryItem2*, UInt8*, HRESULT)
    remove_tree : Proc(IFsiDirectoryItem2*, UInt8*, HRESULT)
    add_tree_with_named_streams : Proc(IFsiDirectoryItem2*, UInt8*, Int16, HRESULT)
  end

  IFsiDirectoryItem2_GUID = "f7fb4b9b-6d96-4d7b-9115-201b144811ef"
  IID_IFsiDirectoryItem2 = LibC::GUID.new(0xf7fb4b9b_u32, 0x6d96_u16, 0x4d7b_u16, StaticArray[0x91_u8, 0x15_u8, 0x20_u8, 0x1b_u8, 0x14_u8, 0x48_u8, 0x11_u8, 0xef_u8])
  struct IFsiDirectoryItem2
    lpVtbl : IFsiDirectoryItem2VTbl*
  end

  struct IFileSystemImageVTbl
    query_interface : Proc(IFileSystemImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemImage*, UInt32)
    release : Proc(IFileSystemImage*, UInt32)
    get_type_info_count : Proc(IFileSystemImage*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSystemImage*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSystemImage*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSystemImage*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root : Proc(IFileSystemImage*, IFsiDirectoryItem*, HRESULT)
    get_session_start_block : Proc(IFileSystemImage*, Int32*, HRESULT)
    put_session_start_block : Proc(IFileSystemImage*, Int32, HRESULT)
    get_free_media_blocks : Proc(IFileSystemImage*, Int32*, HRESULT)
    put_free_media_blocks : Proc(IFileSystemImage*, Int32, HRESULT)
    set_max_media_blocks_from_device : Proc(IFileSystemImage*, IDiscRecorder2, HRESULT)
    get_used_blocks : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_volume_name : Proc(IFileSystemImage*, UInt8**, HRESULT)
    put_volume_name : Proc(IFileSystemImage*, UInt8*, HRESULT)
    get_imported_volume_name : Proc(IFileSystemImage*, UInt8**, HRESULT)
    get_boot_image_options : Proc(IFileSystemImage*, IBootOptions*, HRESULT)
    put_boot_image_options : Proc(IFileSystemImage*, IBootOptions, HRESULT)
    get_file_count : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_directory_count : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_working_directory : Proc(IFileSystemImage*, UInt8**, HRESULT)
    put_working_directory : Proc(IFileSystemImage*, UInt8*, HRESULT)
    get_change_point : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_strict_file_system_compliance : Proc(IFileSystemImage*, Int16*, HRESULT)
    put_strict_file_system_compliance : Proc(IFileSystemImage*, Int16, HRESULT)
    get_use_restricted_character_set : Proc(IFileSystemImage*, Int16*, HRESULT)
    put_use_restricted_character_set : Proc(IFileSystemImage*, Int16, HRESULT)
    get_file_systems_to_create : Proc(IFileSystemImage*, FsiFileSystems*, HRESULT)
    put_file_systems_to_create : Proc(IFileSystemImage*, FsiFileSystems, HRESULT)
    get_file_systems_supported : Proc(IFileSystemImage*, FsiFileSystems*, HRESULT)
    put_udf_revision : Proc(IFileSystemImage*, Int32, HRESULT)
    get_udf_revision : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_udf_revisions_supported : Proc(IFileSystemImage*, SAFEARRAY**, HRESULT)
    choose_image_defaults : Proc(IFileSystemImage*, IDiscRecorder2, HRESULT)
    choose_image_defaults_for_media_type : Proc(IFileSystemImage*, IMAPI_MEDIA_PHYSICAL_TYPE, HRESULT)
    put_iso9660_interchange_level : Proc(IFileSystemImage*, Int32, HRESULT)
    get_iso9660_interchange_level : Proc(IFileSystemImage*, Int32*, HRESULT)
    get_iso9660_interchange_levels_supported : Proc(IFileSystemImage*, SAFEARRAY**, HRESULT)
    create_result_image : Proc(IFileSystemImage*, IFileSystemImageResult*, HRESULT)
    exists : Proc(IFileSystemImage*, UInt8*, FsiItemType*, HRESULT)
    calculate_disc_identifier : Proc(IFileSystemImage*, UInt8**, HRESULT)
    identify_file_systems_on_disc : Proc(IFileSystemImage*, IDiscRecorder2, FsiFileSystems*, HRESULT)
    get_default_file_system_for_import : Proc(IFileSystemImage*, FsiFileSystems, FsiFileSystems*, HRESULT)
    import_file_system : Proc(IFileSystemImage*, FsiFileSystems*, HRESULT)
    import_specific_file_system : Proc(IFileSystemImage*, FsiFileSystems, HRESULT)
    rollback_to_change_point : Proc(IFileSystemImage*, Int32, HRESULT)
    lock_in_change_point : Proc(IFileSystemImage*, HRESULT)
    create_directory_item : Proc(IFileSystemImage*, UInt8*, IFsiDirectoryItem*, HRESULT)
    create_file_item : Proc(IFileSystemImage*, UInt8*, IFsiFileItem*, HRESULT)
    get_volume_name_udf : Proc(IFileSystemImage*, UInt8**, HRESULT)
    get_volume_name_joliet : Proc(IFileSystemImage*, UInt8**, HRESULT)
    get_volume_name_iso9660 : Proc(IFileSystemImage*, UInt8**, HRESULT)
    get_stage_files : Proc(IFileSystemImage*, Int16*, HRESULT)
    put_stage_files : Proc(IFileSystemImage*, Int16, HRESULT)
    get_multisession_interfaces : Proc(IFileSystemImage*, SAFEARRAY**, HRESULT)
    put_multisession_interfaces : Proc(IFileSystemImage*, SAFEARRAY*, HRESULT)
  end

  IFileSystemImage_GUID = "2c941fe1-975b-59be-a960-9a2a262853a5"
  IID_IFileSystemImage = LibC::GUID.new(0x2c941fe1_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct IFileSystemImage
    lpVtbl : IFileSystemImageVTbl*
  end

  struct IFileSystemImage2VTbl
    query_interface : Proc(IFileSystemImage2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemImage2*, UInt32)
    release : Proc(IFileSystemImage2*, UInt32)
    get_type_info_count : Proc(IFileSystemImage2*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSystemImage2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSystemImage2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSystemImage2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root : Proc(IFileSystemImage2*, IFsiDirectoryItem*, HRESULT)
    get_session_start_block : Proc(IFileSystemImage2*, Int32*, HRESULT)
    put_session_start_block : Proc(IFileSystemImage2*, Int32, HRESULT)
    get_free_media_blocks : Proc(IFileSystemImage2*, Int32*, HRESULT)
    put_free_media_blocks : Proc(IFileSystemImage2*, Int32, HRESULT)
    set_max_media_blocks_from_device : Proc(IFileSystemImage2*, IDiscRecorder2, HRESULT)
    get_used_blocks : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_volume_name : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    put_volume_name : Proc(IFileSystemImage2*, UInt8*, HRESULT)
    get_imported_volume_name : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    get_boot_image_options : Proc(IFileSystemImage2*, IBootOptions*, HRESULT)
    put_boot_image_options : Proc(IFileSystemImage2*, IBootOptions, HRESULT)
    get_file_count : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_directory_count : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_working_directory : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    put_working_directory : Proc(IFileSystemImage2*, UInt8*, HRESULT)
    get_change_point : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_strict_file_system_compliance : Proc(IFileSystemImage2*, Int16*, HRESULT)
    put_strict_file_system_compliance : Proc(IFileSystemImage2*, Int16, HRESULT)
    get_use_restricted_character_set : Proc(IFileSystemImage2*, Int16*, HRESULT)
    put_use_restricted_character_set : Proc(IFileSystemImage2*, Int16, HRESULT)
    get_file_systems_to_create : Proc(IFileSystemImage2*, FsiFileSystems*, HRESULT)
    put_file_systems_to_create : Proc(IFileSystemImage2*, FsiFileSystems, HRESULT)
    get_file_systems_supported : Proc(IFileSystemImage2*, FsiFileSystems*, HRESULT)
    put_udf_revision : Proc(IFileSystemImage2*, Int32, HRESULT)
    get_udf_revision : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_udf_revisions_supported : Proc(IFileSystemImage2*, SAFEARRAY**, HRESULT)
    choose_image_defaults : Proc(IFileSystemImage2*, IDiscRecorder2, HRESULT)
    choose_image_defaults_for_media_type : Proc(IFileSystemImage2*, IMAPI_MEDIA_PHYSICAL_TYPE, HRESULT)
    put_iso9660_interchange_level : Proc(IFileSystemImage2*, Int32, HRESULT)
    get_iso9660_interchange_level : Proc(IFileSystemImage2*, Int32*, HRESULT)
    get_iso9660_interchange_levels_supported : Proc(IFileSystemImage2*, SAFEARRAY**, HRESULT)
    create_result_image : Proc(IFileSystemImage2*, IFileSystemImageResult*, HRESULT)
    exists : Proc(IFileSystemImage2*, UInt8*, FsiItemType*, HRESULT)
    calculate_disc_identifier : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    identify_file_systems_on_disc : Proc(IFileSystemImage2*, IDiscRecorder2, FsiFileSystems*, HRESULT)
    get_default_file_system_for_import : Proc(IFileSystemImage2*, FsiFileSystems, FsiFileSystems*, HRESULT)
    import_file_system : Proc(IFileSystemImage2*, FsiFileSystems*, HRESULT)
    import_specific_file_system : Proc(IFileSystemImage2*, FsiFileSystems, HRESULT)
    rollback_to_change_point : Proc(IFileSystemImage2*, Int32, HRESULT)
    lock_in_change_point : Proc(IFileSystemImage2*, HRESULT)
    create_directory_item : Proc(IFileSystemImage2*, UInt8*, IFsiDirectoryItem*, HRESULT)
    create_file_item : Proc(IFileSystemImage2*, UInt8*, IFsiFileItem*, HRESULT)
    get_volume_name_udf : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    get_volume_name_joliet : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    get_volume_name_iso9660 : Proc(IFileSystemImage2*, UInt8**, HRESULT)
    get_stage_files : Proc(IFileSystemImage2*, Int16*, HRESULT)
    put_stage_files : Proc(IFileSystemImage2*, Int16, HRESULT)
    get_multisession_interfaces : Proc(IFileSystemImage2*, SAFEARRAY**, HRESULT)
    put_multisession_interfaces : Proc(IFileSystemImage2*, SAFEARRAY*, HRESULT)
    get_boot_image_options_array : Proc(IFileSystemImage2*, SAFEARRAY**, HRESULT)
    put_boot_image_options_array : Proc(IFileSystemImage2*, SAFEARRAY*, HRESULT)
  end

  IFileSystemImage2_GUID = "d7644b2c-1537-4767-b62f-f1387b02ddfd"
  IID_IFileSystemImage2 = LibC::GUID.new(0xd7644b2c_u32, 0x1537_u16, 0x4767_u16, StaticArray[0xb6_u8, 0x2f_u8, 0xf1_u8, 0x38_u8, 0x7b_u8, 0x2_u8, 0xdd_u8, 0xfd_u8])
  struct IFileSystemImage2
    lpVtbl : IFileSystemImage2VTbl*
  end

  struct IFileSystemImage3VTbl
    query_interface : Proc(IFileSystemImage3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSystemImage3*, UInt32)
    release : Proc(IFileSystemImage3*, UInt32)
    get_type_info_count : Proc(IFileSystemImage3*, UInt32*, HRESULT)
    get_type_info : Proc(IFileSystemImage3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFileSystemImage3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFileSystemImage3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_root : Proc(IFileSystemImage3*, IFsiDirectoryItem*, HRESULT)
    get_session_start_block : Proc(IFileSystemImage3*, Int32*, HRESULT)
    put_session_start_block : Proc(IFileSystemImage3*, Int32, HRESULT)
    get_free_media_blocks : Proc(IFileSystemImage3*, Int32*, HRESULT)
    put_free_media_blocks : Proc(IFileSystemImage3*, Int32, HRESULT)
    set_max_media_blocks_from_device : Proc(IFileSystemImage3*, IDiscRecorder2, HRESULT)
    get_used_blocks : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_volume_name : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    put_volume_name : Proc(IFileSystemImage3*, UInt8*, HRESULT)
    get_imported_volume_name : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    get_boot_image_options : Proc(IFileSystemImage3*, IBootOptions*, HRESULT)
    put_boot_image_options : Proc(IFileSystemImage3*, IBootOptions, HRESULT)
    get_file_count : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_directory_count : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_working_directory : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    put_working_directory : Proc(IFileSystemImage3*, UInt8*, HRESULT)
    get_change_point : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_strict_file_system_compliance : Proc(IFileSystemImage3*, Int16*, HRESULT)
    put_strict_file_system_compliance : Proc(IFileSystemImage3*, Int16, HRESULT)
    get_use_restricted_character_set : Proc(IFileSystemImage3*, Int16*, HRESULT)
    put_use_restricted_character_set : Proc(IFileSystemImage3*, Int16, HRESULT)
    get_file_systems_to_create : Proc(IFileSystemImage3*, FsiFileSystems*, HRESULT)
    put_file_systems_to_create : Proc(IFileSystemImage3*, FsiFileSystems, HRESULT)
    get_file_systems_supported : Proc(IFileSystemImage3*, FsiFileSystems*, HRESULT)
    put_udf_revision : Proc(IFileSystemImage3*, Int32, HRESULT)
    get_udf_revision : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_udf_revisions_supported : Proc(IFileSystemImage3*, SAFEARRAY**, HRESULT)
    choose_image_defaults : Proc(IFileSystemImage3*, IDiscRecorder2, HRESULT)
    choose_image_defaults_for_media_type : Proc(IFileSystemImage3*, IMAPI_MEDIA_PHYSICAL_TYPE, HRESULT)
    put_iso9660_interchange_level : Proc(IFileSystemImage3*, Int32, HRESULT)
    get_iso9660_interchange_level : Proc(IFileSystemImage3*, Int32*, HRESULT)
    get_iso9660_interchange_levels_supported : Proc(IFileSystemImage3*, SAFEARRAY**, HRESULT)
    create_result_image : Proc(IFileSystemImage3*, IFileSystemImageResult*, HRESULT)
    exists : Proc(IFileSystemImage3*, UInt8*, FsiItemType*, HRESULT)
    calculate_disc_identifier : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    identify_file_systems_on_disc : Proc(IFileSystemImage3*, IDiscRecorder2, FsiFileSystems*, HRESULT)
    get_default_file_system_for_import : Proc(IFileSystemImage3*, FsiFileSystems, FsiFileSystems*, HRESULT)
    import_file_system : Proc(IFileSystemImage3*, FsiFileSystems*, HRESULT)
    import_specific_file_system : Proc(IFileSystemImage3*, FsiFileSystems, HRESULT)
    rollback_to_change_point : Proc(IFileSystemImage3*, Int32, HRESULT)
    lock_in_change_point : Proc(IFileSystemImage3*, HRESULT)
    create_directory_item : Proc(IFileSystemImage3*, UInt8*, IFsiDirectoryItem*, HRESULT)
    create_file_item : Proc(IFileSystemImage3*, UInt8*, IFsiFileItem*, HRESULT)
    get_volume_name_udf : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    get_volume_name_joliet : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    get_volume_name_iso9660 : Proc(IFileSystemImage3*, UInt8**, HRESULT)
    get_stage_files : Proc(IFileSystemImage3*, Int16*, HRESULT)
    put_stage_files : Proc(IFileSystemImage3*, Int16, HRESULT)
    get_multisession_interfaces : Proc(IFileSystemImage3*, SAFEARRAY**, HRESULT)
    put_multisession_interfaces : Proc(IFileSystemImage3*, SAFEARRAY*, HRESULT)
    get_boot_image_options_array : Proc(IFileSystemImage3*, SAFEARRAY**, HRESULT)
    put_boot_image_options_array : Proc(IFileSystemImage3*, SAFEARRAY*, HRESULT)
    get_create_redundant_udf_metadata_files : Proc(IFileSystemImage3*, Int16*, HRESULT)
    put_create_redundant_udf_metadata_files : Proc(IFileSystemImage3*, Int16, HRESULT)
    probe_specific_file_system : Proc(IFileSystemImage3*, FsiFileSystems, Int16*, HRESULT)
  end

  IFileSystemImage3_GUID = "7cff842c-7e97-4807-8304-910dd8f7c051"
  IID_IFileSystemImage3 = LibC::GUID.new(0x7cff842c_u32, 0x7e97_u16, 0x4807_u16, StaticArray[0x83_u8, 0x4_u8, 0x91_u8, 0xd_u8, 0xd8_u8, 0xf7_u8, 0xc0_u8, 0x51_u8])
  struct IFileSystemImage3
    lpVtbl : IFileSystemImage3VTbl*
  end

  struct DFileSystemImageEventsVTbl
    query_interface : Proc(DFileSystemImageEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DFileSystemImageEvents*, UInt32)
    release : Proc(DFileSystemImageEvents*, UInt32)
    get_type_info_count : Proc(DFileSystemImageEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DFileSystemImageEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DFileSystemImageEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DFileSystemImageEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update : Proc(DFileSystemImageEvents*, IDispatch, UInt8*, Int32, Int32, HRESULT)
  end

  DFileSystemImageEvents_GUID = "2c941fdf-975b-59be-a960-9a2a262853a5"
  IID_DFileSystemImageEvents = LibC::GUID.new(0x2c941fdf_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
  struct DFileSystemImageEvents
    lpVtbl : DFileSystemImageEventsVTbl*
  end

  struct DFileSystemImageImportEventsVTbl
    query_interface : Proc(DFileSystemImageImportEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(DFileSystemImageImportEvents*, UInt32)
    release : Proc(DFileSystemImageImportEvents*, UInt32)
    get_type_info_count : Proc(DFileSystemImageImportEvents*, UInt32*, HRESULT)
    get_type_info : Proc(DFileSystemImageImportEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(DFileSystemImageImportEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(DFileSystemImageImportEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    update_import : Proc(DFileSystemImageImportEvents*, IDispatch, FsiFileSystems, UInt8*, Int32, Int32, Int32, Int32, HRESULT)
  end

  DFileSystemImageImportEvents_GUID = "d25c30f9-4087-4366-9e24-e55be286424b"
  IID_DFileSystemImageImportEvents = LibC::GUID.new(0xd25c30f9_u32, 0x4087_u16, 0x4366_u16, StaticArray[0x9e_u8, 0x24_u8, 0xe5_u8, 0x5b_u8, 0xe2_u8, 0x86_u8, 0x42_u8, 0x4b_u8])
  struct DFileSystemImageImportEvents
    lpVtbl : DFileSystemImageImportEventsVTbl*
  end

  struct IIsoImageManagerVTbl
    query_interface : Proc(IIsoImageManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsoImageManager*, UInt32)
    release : Proc(IIsoImageManager*, UInt32)
    get_type_info_count : Proc(IIsoImageManager*, UInt32*, HRESULT)
    get_type_info : Proc(IIsoImageManager*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIsoImageManager*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIsoImageManager*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_path : Proc(IIsoImageManager*, UInt8**, HRESULT)
    get_stream : Proc(IIsoImageManager*, IStream*, HRESULT)
    set_path : Proc(IIsoImageManager*, UInt8*, HRESULT)
    set_stream : Proc(IIsoImageManager*, IStream, HRESULT)
    validate : Proc(IIsoImageManager*, HRESULT)
  end

  IIsoImageManager_GUID = "6ca38be5-fbbb-4800-95a1-a438865eb0d4"
  IID_IIsoImageManager = LibC::GUID.new(0x6ca38be5_u32, 0xfbbb_u16, 0x4800_u16, StaticArray[0x95_u8, 0xa1_u8, 0xa4_u8, 0x38_u8, 0x86_u8, 0x5e_u8, 0xb0_u8, 0xd4_u8])
  struct IIsoImageManager
    lpVtbl : IIsoImageManagerVTbl*
  end

  struct IDiscRecorderVTbl
    query_interface : Proc(IDiscRecorder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscRecorder*, UInt32)
    release : Proc(IDiscRecorder*, UInt32)
    init : Proc(IDiscRecorder*, UInt8*, UInt32, UInt32, HRESULT)
    get_recorder_guid : Proc(IDiscRecorder*, UInt8*, UInt32, UInt32*, HRESULT)
    get_recorder_type : Proc(IDiscRecorder*, RECORDER_TYPES*, HRESULT)
    get_display_names : Proc(IDiscRecorder*, UInt8**, UInt8**, UInt8**, HRESULT)
    get_base_pn_pid : Proc(IDiscRecorder*, UInt8**, HRESULT)
    get_path : Proc(IDiscRecorder*, UInt8**, HRESULT)
    get_recorder_properties : Proc(IDiscRecorder*, IPropertyStorage*, HRESULT)
    set_recorder_properties : Proc(IDiscRecorder*, IPropertyStorage, HRESULT)
    get_recorder_state : Proc(IDiscRecorder*, DISC_RECORDER_STATE_FLAGS*, HRESULT)
    open_exclusive : Proc(IDiscRecorder*, HRESULT)
    query_media_type : Proc(IDiscRecorder*, MEDIA_TYPES*, MEDIA_FLAGS*, HRESULT)
    query_media_info : Proc(IDiscRecorder*, UInt8*, UInt8*, UInt32*, UInt32*, UInt32*, HRESULT)
    eject : Proc(IDiscRecorder*, HRESULT)
    erase : Proc(IDiscRecorder*, UInt8, HRESULT)
    close : Proc(IDiscRecorder*, HRESULT)
  end

  IDiscRecorder_GUID = "85ac9776-ca88-4cf2-894e-09598c078a41"
  IID_IDiscRecorder = LibC::GUID.new(0x85ac9776_u32, 0xca88_u16, 0x4cf2_u16, StaticArray[0x89_u8, 0x4e_u8, 0x9_u8, 0x59_u8, 0x8c_u8, 0x7_u8, 0x8a_u8, 0x41_u8])
  struct IDiscRecorder
    lpVtbl : IDiscRecorderVTbl*
  end

  struct IEnumDiscRecordersVTbl
    query_interface : Proc(IEnumDiscRecorders*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDiscRecorders*, UInt32)
    release : Proc(IEnumDiscRecorders*, UInt32)
    next : Proc(IEnumDiscRecorders*, UInt32, IDiscRecorder*, UInt32*, HRESULT)
    skip : Proc(IEnumDiscRecorders*, UInt32, HRESULT)
    reset : Proc(IEnumDiscRecorders*, HRESULT)
    clone : Proc(IEnumDiscRecorders*, IEnumDiscRecorders*, HRESULT)
  end

  IEnumDiscRecorders_GUID = "9b1921e1-54ac-11d3-9144-00104ba11c5e"
  IID_IEnumDiscRecorders = LibC::GUID.new(0x9b1921e1_u32, 0x54ac_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IEnumDiscRecorders
    lpVtbl : IEnumDiscRecordersVTbl*
  end

  struct IEnumDiscMasterFormatsVTbl
    query_interface : Proc(IEnumDiscMasterFormats*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDiscMasterFormats*, UInt32)
    release : Proc(IEnumDiscMasterFormats*, UInt32)
    next : Proc(IEnumDiscMasterFormats*, UInt32, Guid*, UInt32*, HRESULT)
    skip : Proc(IEnumDiscMasterFormats*, UInt32, HRESULT)
    reset : Proc(IEnumDiscMasterFormats*, HRESULT)
    clone : Proc(IEnumDiscMasterFormats*, IEnumDiscMasterFormats*, HRESULT)
  end

  IEnumDiscMasterFormats_GUID = "ddf445e1-54ba-11d3-9144-00104ba11c5e"
  IID_IEnumDiscMasterFormats = LibC::GUID.new(0xddf445e1_u32, 0x54ba_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IEnumDiscMasterFormats
    lpVtbl : IEnumDiscMasterFormatsVTbl*
  end

  struct IRedbookDiscMasterVTbl
    query_interface : Proc(IRedbookDiscMaster*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRedbookDiscMaster*, UInt32)
    release : Proc(IRedbookDiscMaster*, UInt32)
    get_total_audio_tracks : Proc(IRedbookDiscMaster*, Int32*, HRESULT)
    get_total_audio_blocks : Proc(IRedbookDiscMaster*, Int32*, HRESULT)
    get_used_audio_blocks : Proc(IRedbookDiscMaster*, Int32*, HRESULT)
    get_available_audio_track_blocks : Proc(IRedbookDiscMaster*, Int32*, HRESULT)
    get_audio_block_size : Proc(IRedbookDiscMaster*, Int32*, HRESULT)
    create_audio_track : Proc(IRedbookDiscMaster*, Int32, HRESULT)
    add_audio_track_blocks : Proc(IRedbookDiscMaster*, UInt8*, Int32, HRESULT)
    close_audio_track : Proc(IRedbookDiscMaster*, HRESULT)
  end

  IRedbookDiscMaster_GUID = "e3bc42cd-4e5c-11d3-9144-00104ba11c5e"
  IID_IRedbookDiscMaster = LibC::GUID.new(0xe3bc42cd_u32, 0x4e5c_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IRedbookDiscMaster
    lpVtbl : IRedbookDiscMasterVTbl*
  end

  struct IJolietDiscMasterVTbl
    query_interface : Proc(IJolietDiscMaster*, Guid*, Void**, HRESULT)
    add_ref : Proc(IJolietDiscMaster*, UInt32)
    release : Proc(IJolietDiscMaster*, UInt32)
    get_total_data_blocks : Proc(IJolietDiscMaster*, Int32*, HRESULT)
    get_used_data_blocks : Proc(IJolietDiscMaster*, Int32*, HRESULT)
    get_data_block_size : Proc(IJolietDiscMaster*, Int32*, HRESULT)
    add_data : Proc(IJolietDiscMaster*, IStorage, Int32, HRESULT)
    get_joliet_properties : Proc(IJolietDiscMaster*, IPropertyStorage*, HRESULT)
    set_joliet_properties : Proc(IJolietDiscMaster*, IPropertyStorage, HRESULT)
  end

  IJolietDiscMaster_GUID = "e3bc42ce-4e5c-11d3-9144-00104ba11c5e"
  IID_IJolietDiscMaster = LibC::GUID.new(0xe3bc42ce_u32, 0x4e5c_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IJolietDiscMaster
    lpVtbl : IJolietDiscMasterVTbl*
  end

  struct IDiscMasterProgressEventsVTbl
    query_interface : Proc(IDiscMasterProgressEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscMasterProgressEvents*, UInt32)
    release : Proc(IDiscMasterProgressEvents*, UInt32)
    query_cancel : Proc(IDiscMasterProgressEvents*, UInt8*, HRESULT)
    notify_pn_p_activity : Proc(IDiscMasterProgressEvents*, HRESULT)
    notify_add_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, HRESULT)
    notify_block_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, HRESULT)
    notify_track_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, HRESULT)
    notify_preparing_burn : Proc(IDiscMasterProgressEvents*, Int32, HRESULT)
    notify_closing_disc : Proc(IDiscMasterProgressEvents*, Int32, HRESULT)
    notify_burn_complete : Proc(IDiscMasterProgressEvents*, HRESULT, HRESULT)
    notify_erase_complete : Proc(IDiscMasterProgressEvents*, HRESULT, HRESULT)
  end

  IDiscMasterProgressEvents_GUID = "ec9e51c1-4e5d-11d3-9144-00104ba11c5e"
  IID_IDiscMasterProgressEvents = LibC::GUID.new(0xec9e51c1_u32, 0x4e5d_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IDiscMasterProgressEvents
    lpVtbl : IDiscMasterProgressEventsVTbl*
  end

  struct IDiscMasterVTbl
    query_interface : Proc(IDiscMaster*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDiscMaster*, UInt32)
    release : Proc(IDiscMaster*, UInt32)
    open : Proc(IDiscMaster*, HRESULT)
    enum_disc_master_formats : Proc(IDiscMaster*, IEnumDiscMasterFormats*, HRESULT)
    get_active_disc_master_format : Proc(IDiscMaster*, Guid*, HRESULT)
    set_active_disc_master_format : Proc(IDiscMaster*, Guid*, Void**, HRESULT)
    enum_disc_recorders : Proc(IDiscMaster*, IEnumDiscRecorders*, HRESULT)
    get_active_disc_recorder : Proc(IDiscMaster*, IDiscRecorder*, HRESULT)
    set_active_disc_recorder : Proc(IDiscMaster*, IDiscRecorder, HRESULT)
    clear_format_content : Proc(IDiscMaster*, HRESULT)
    progress_advise : Proc(IDiscMaster*, IDiscMasterProgressEvents, LibC::UINT_PTR*, HRESULT)
    progress_unadvise : Proc(IDiscMaster*, LibC::UINT_PTR, HRESULT)
    record_disc : Proc(IDiscMaster*, UInt8, UInt8, HRESULT)
    close : Proc(IDiscMaster*, HRESULT)
  end

  IDiscMaster_GUID = "520cca62-51a5-11d3-9144-00104ba11c5e"
  IID_IDiscMaster = LibC::GUID.new(0x520cca62_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
  struct IDiscMaster
    lpVtbl : IDiscMasterVTbl*
  end


  # Params # lpmalloc : IMalloc [In],ulflags : UInt32 [In],lppmsgsess : MSGSESS** [In]
  fun OpenIMsgSession(lpmalloc : IMalloc, ulflags : UInt32, lppmsgsess : MSGSESS**) : Int32

  # Params # lpmsgsess : MSGSESS* [In]
  fun CloseIMsgSession(lpmsgsess : MSGSESS*) : Void

  # Params # lpmsgsess : MSGSESS* [In],lpallocatebuffer : LPALLOCATEBUFFER [In],lpallocatemore : LPALLOCATEMORE [In],lpfreebuffer : LPFREEBUFFER [In],lpmalloc : IMalloc [In],lpmapisup : Void* [In],lpstg : IStorage [In],lpfmsgcallrelease : MSGCALLRELEASE* [In],ulcallerdata : UInt32 [In],ulflags : UInt32 [In],lppmsg : IMessage* [In]
  fun OpenIMsgOnIStg(lpmsgsess : MSGSESS*, lpallocatebuffer : LPALLOCATEBUFFER, lpallocatemore : LPALLOCATEMORE, lpfreebuffer : LPFREEBUFFER, lpmalloc : IMalloc, lpmapisup : Void*, lpstg : IStorage, lpfmsgcallrelease : MSGCALLRELEASE*, ulcallerdata : UInt32, ulflags : UInt32, lppmsg : IMessage*) : Int32

  # Params # lpobject : Void* [In],lpproptagarray : SPropTagArray* [In],lpppropattrarray : SPropAttrArray** [In]
  fun GetAttribIMsgOnIStg(lpobject : Void*, lpproptagarray : SPropTagArray*, lpppropattrarray : SPropAttrArray**) : HRESULT

  # Params # lpobject : Void* [In],lpproptags : SPropTagArray* [In],lppropattrs : SPropAttrArray* [In],lpppropproblems : SPropProblemArray** [In]
  fun SetAttribIMsgOnIStg(lpobject : Void*, lpproptags : SPropTagArray*, lppropattrs : SPropAttrArray*, lpppropproblems : SPropProblemArray**) : HRESULT

  # Params # stgscode : Int32 [In]
  fun MapStorageSCode(stgscode : Int32) : Int32
end
struct LibWin32::IDiscMaster2
  def query_interface(this : IDiscMaster2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscMaster2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscMaster2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscMaster2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscMaster2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscMaster2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscMaster2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IDiscMaster2*, ppunk : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, ppunk)
  end
  def get_item(this : IDiscMaster2*, index : Int32, value : UInt8**) : HRESULT
    @lpVtbl.value.get_item.call(this, index, value)
  end
  def get_count(this : IDiscMaster2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, value)
  end
  def get_is_supported_environment(this : IDiscMaster2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_supported_environment.call(this, value)
  end
end
struct LibWin32::DDiscMaster2Events
  def query_interface(this : DDiscMaster2Events*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DDiscMaster2Events*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DDiscMaster2Events*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DDiscMaster2Events*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DDiscMaster2Events*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DDiscMaster2Events*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DDiscMaster2Events*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def notify_device_added(this : DDiscMaster2Events*, object : IDispatch, uniqueid : UInt8*) : HRESULT
    @lpVtbl.value.notify_device_added.call(this, object, uniqueid)
  end
  def notify_device_removed(this : DDiscMaster2Events*, object : IDispatch, uniqueid : UInt8*) : HRESULT
    @lpVtbl.value.notify_device_removed.call(this, object, uniqueid)
  end
end
struct LibWin32::IDiscRecorder2Ex
  def query_interface(this : IDiscRecorder2Ex*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscRecorder2Ex*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscRecorder2Ex*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def send_command_no_data(this : IDiscRecorder2Ex*, cdb : UInt8*, cdbsize : UInt32, sensebuffer : UInt8*, timeout : UInt32) : HRESULT
    @lpVtbl.value.send_command_no_data.call(this, cdb, cdbsize, sensebuffer, timeout)
  end
  def send_command_send_data_to_device(this : IDiscRecorder2Ex*, cdb : UInt8*, cdbsize : UInt32, sensebuffer : UInt8*, timeout : UInt32, buffer : UInt8*, buffersize : UInt32) : HRESULT
    @lpVtbl.value.send_command_send_data_to_device.call(this, cdb, cdbsize, sensebuffer, timeout, buffer, buffersize)
  end
  def send_command_get_data_from_device(this : IDiscRecorder2Ex*, cdb : UInt8*, cdbsize : UInt32, sensebuffer : UInt8*, timeout : UInt32, buffer : UInt8*, buffersize : UInt32, bufferfetched : UInt32*) : HRESULT
    @lpVtbl.value.send_command_get_data_from_device.call(this, cdb, cdbsize, sensebuffer, timeout, buffer, buffersize, bufferfetched)
  end
  def read_dvd_structure(this : IDiscRecorder2Ex*, format : UInt32, address : UInt32, layer : UInt32, agid : UInt32, data : UInt8**, count : UInt32*) : HRESULT
    @lpVtbl.value.read_dvd_structure.call(this, format, address, layer, agid, data, count)
  end
  def send_dvd_structure(this : IDiscRecorder2Ex*, format : UInt32, data : UInt8*, count : UInt32) : HRESULT
    @lpVtbl.value.send_dvd_structure.call(this, format, data, count)
  end
  def get_adapter_descriptor(this : IDiscRecorder2Ex*, data : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_adapter_descriptor.call(this, data, bytesize)
  end
  def get_device_descriptor(this : IDiscRecorder2Ex*, data : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_device_descriptor.call(this, data, bytesize)
  end
  def get_disc_information(this : IDiscRecorder2Ex*, discinformation : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_disc_information.call(this, discinformation, bytesize)
  end
  def get_track_information(this : IDiscRecorder2Ex*, address : UInt32, addresstype : IMAPI_READ_TRACK_ADDRESS_TYPE, trackinformation : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_track_information.call(this, address, addresstype, trackinformation, bytesize)
  end
  def get_feature_page(this : IDiscRecorder2Ex*, requestedfeature : IMAPI_FEATURE_PAGE_TYPE, currentfeatureonly : BOOLEAN, featuredata : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_feature_page.call(this, requestedfeature, currentfeatureonly, featuredata, bytesize)
  end
  def get_mode_page(this : IDiscRecorder2Ex*, requestedmodepage : IMAPI_MODE_PAGE_TYPE, requesttype : IMAPI_MODE_PAGE_REQUEST_TYPE, modepagedata : UInt8**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_mode_page.call(this, requestedmodepage, requesttype, modepagedata, bytesize)
  end
  def set_mode_page(this : IDiscRecorder2Ex*, requesttype : IMAPI_MODE_PAGE_REQUEST_TYPE, data : UInt8*, bytesize : UInt32) : HRESULT
    @lpVtbl.value.set_mode_page.call(this, requesttype, data, bytesize)
  end
  def get_supported_feature_pages(this : IDiscRecorder2Ex*, currentfeatureonly : BOOLEAN, featuredata : IMAPI_FEATURE_PAGE_TYPE**, bytesize : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_feature_pages.call(this, currentfeatureonly, featuredata, bytesize)
  end
  def get_supported_profiles(this : IDiscRecorder2Ex*, currentonly : BOOLEAN, profiletypes : IMAPI_PROFILE_TYPE**, validprofiles : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_profiles.call(this, currentonly, profiletypes, validprofiles)
  end
  def get_supported_mode_pages(this : IDiscRecorder2Ex*, requesttype : IMAPI_MODE_PAGE_REQUEST_TYPE, modepagetypes : IMAPI_MODE_PAGE_TYPE**, validpages : UInt32*) : HRESULT
    @lpVtbl.value.get_supported_mode_pages.call(this, requesttype, modepagetypes, validpages)
  end
  def get_byte_alignment_mask(this : IDiscRecorder2Ex*, value : UInt32*) : HRESULT
    @lpVtbl.value.get_byte_alignment_mask.call(this, value)
  end
  def get_maximum_non_page_aligned_transfer_size(this : IDiscRecorder2Ex*, value : UInt32*) : HRESULT
    @lpVtbl.value.get_maximum_non_page_aligned_transfer_size.call(this, value)
  end
  def get_maximum_page_aligned_transfer_size(this : IDiscRecorder2Ex*, value : UInt32*) : HRESULT
    @lpVtbl.value.get_maximum_page_aligned_transfer_size.call(this, value)
  end
end
struct LibWin32::IDiscRecorder2
  def query_interface(this : IDiscRecorder2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscRecorder2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscRecorder2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscRecorder2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscRecorder2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscRecorder2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscRecorder2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def eject_media(this : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.eject_media.call(this)
  end
  def close_tray(this : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.close_tray.call(this)
  end
  def acquire_exclusive_access(this : IDiscRecorder2*, force : Int16, midl__idiscrecorder20000 : UInt8*) : HRESULT
    @lpVtbl.value.acquire_exclusive_access.call(this, force, midl__idiscrecorder20000)
  end
  def release_exclusive_access(this : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.release_exclusive_access.call(this)
  end
  def disable_mcn(this : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.disable_mcn.call(this)
  end
  def enable_mcn(this : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.enable_mcn.call(this)
  end
  def initialize_disc_recorder(this : IDiscRecorder2*, recorderuniqueid : UInt8*) : HRESULT
    @lpVtbl.value.initialize_disc_recorder.call(this, recorderuniqueid)
  end
  def get_active_disc_recorder(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_active_disc_recorder.call(this, value)
  end
  def get_vendor_id(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_vendor_id.call(this, value)
  end
  def get_product_id(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_product_id.call(this, value)
  end
  def get_product_revision(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_product_revision.call(this, value)
  end
  def get_volume_name(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name.call(this, value)
  end
  def get_volume_path_names(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_volume_path_names.call(this, value)
  end
  def get_device_can_load_media(this : IDiscRecorder2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_device_can_load_media.call(this, value)
  end
  def get_legacy_device_number(this : IDiscRecorder2*, legacydevicenumber : Int32*) : HRESULT
    @lpVtbl.value.get_legacy_device_number.call(this, legacydevicenumber)
  end
  def get_supported_feature_pages(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_feature_pages.call(this, value)
  end
  def get_current_feature_pages(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_current_feature_pages.call(this, value)
  end
  def get_supported_profiles(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_profiles.call(this, value)
  end
  def get_current_profiles(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_current_profiles.call(this, value)
  end
  def get_supported_mode_pages(this : IDiscRecorder2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_mode_pages.call(this, value)
  end
  def get_exclusive_access_owner(this : IDiscRecorder2*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_exclusive_access_owner.call(this, value)
  end
end
struct LibWin32::IWriteEngine2
  def query_interface(this : IWriteEngine2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWriteEngine2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWriteEngine2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWriteEngine2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWriteEngine2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWriteEngine2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWriteEngine2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def write_section(this : IWriteEngine2*, data : IStream, startingblockaddress : Int32, numberofblocks : Int32) : HRESULT
    @lpVtbl.value.write_section.call(this, data, startingblockaddress, numberofblocks)
  end
  def cancel_write(this : IWriteEngine2*) : HRESULT
    @lpVtbl.value.cancel_write.call(this)
  end
  def put_recorder(this : IWriteEngine2*, value : IDiscRecorder2Ex) : HRESULT
    @lpVtbl.value.put_recorder.call(this, value)
  end
  def get_recorder(this : IWriteEngine2*, value : IDiscRecorder2Ex*) : HRESULT
    @lpVtbl.value.get_recorder.call(this, value)
  end
  def put_use_streaming_write12(this : IWriteEngine2*, value : Int16) : HRESULT
    @lpVtbl.value.put_use_streaming_write12.call(this, value)
  end
  def get_use_streaming_write12(this : IWriteEngine2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_use_streaming_write12.call(this, value)
  end
  def put_starting_sectors_per_second(this : IWriteEngine2*, value : Int32) : HRESULT
    @lpVtbl.value.put_starting_sectors_per_second.call(this, value)
  end
  def get_starting_sectors_per_second(this : IWriteEngine2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_starting_sectors_per_second.call(this, value)
  end
  def put_ending_sectors_per_second(this : IWriteEngine2*, value : Int32) : HRESULT
    @lpVtbl.value.put_ending_sectors_per_second.call(this, value)
  end
  def get_ending_sectors_per_second(this : IWriteEngine2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_ending_sectors_per_second.call(this, value)
  end
  def put_bytes_per_sector(this : IWriteEngine2*, value : Int32) : HRESULT
    @lpVtbl.value.put_bytes_per_sector.call(this, value)
  end
  def get_bytes_per_sector(this : IWriteEngine2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_bytes_per_sector.call(this, value)
  end
  def get_write_in_progress(this : IWriteEngine2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_write_in_progress.call(this, value)
  end
end
struct LibWin32::IWriteEngine2EventArgs
  def query_interface(this : IWriteEngine2EventArgs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWriteEngine2EventArgs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWriteEngine2EventArgs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWriteEngine2EventArgs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWriteEngine2EventArgs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWriteEngine2EventArgs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWriteEngine2EventArgs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_lba(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_lba.call(this, value)
  end
  def get_sector_count(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_sector_count.call(this, value)
  end
  def get_last_read_lba(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_read_lba.call(this, value)
  end
  def get_last_written_lba(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_lba.call(this, value)
  end
  def get_total_system_buffer(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_system_buffer.call(this, value)
  end
  def get_used_system_buffer(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_used_system_buffer.call(this, value)
  end
  def get_free_system_buffer(this : IWriteEngine2EventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_system_buffer.call(this, value)
  end
end
struct LibWin32::DWriteEngine2Events
  def query_interface(this : DWriteEngine2Events*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DWriteEngine2Events*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DWriteEngine2Events*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DWriteEngine2Events*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DWriteEngine2Events*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DWriteEngine2Events*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DWriteEngine2Events*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DWriteEngine2Events*, object : IDispatch, progress : IDispatch) : HRESULT
    @lpVtbl.value.update.call(this, object, progress)
  end
end
struct LibWin32::IDiscFormat2
  def query_interface(this : IDiscFormat2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_recorder_supported(this : IDiscFormat2*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_recorder_supported.call(this, recorder, value)
  end
  def is_current_media_supported(this : IDiscFormat2*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_current_media_supported.call(this, recorder, value)
  end
  def get_media_physically_blank(this : IDiscFormat2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_physically_blank.call(this, value)
  end
  def get_media_heuristically_blank(this : IDiscFormat2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_heuristically_blank.call(this, value)
  end
  def get_supported_media_types(this : IDiscFormat2*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_media_types.call(this, value)
  end
end
struct LibWin32::IDiscFormat2Erase
  def query_interface(this : IDiscFormat2Erase*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2Erase*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2Erase*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2Erase*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2Erase*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2Erase*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2Erase*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_recorder_supported(this : IDiscFormat2Erase*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_recorder_supported.call(this, recorder, value)
  end
  def is_current_media_supported(this : IDiscFormat2Erase*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_current_media_supported.call(this, recorder, value)
  end
  def get_media_physically_blank(this : IDiscFormat2Erase*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_physically_blank.call(this, value)
  end
  def get_media_heuristically_blank(this : IDiscFormat2Erase*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_heuristically_blank.call(this, value)
  end
  def get_supported_media_types(this : IDiscFormat2Erase*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_media_types.call(this, value)
  end
  def put_recorder(this : IDiscFormat2Erase*, value : IDiscRecorder2) : HRESULT
    @lpVtbl.value.put_recorder.call(this, value)
  end
  def get_recorder(this : IDiscFormat2Erase*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_recorder.call(this, value)
  end
  def put_full_erase(this : IDiscFormat2Erase*, value : Int16) : HRESULT
    @lpVtbl.value.put_full_erase.call(this, value)
  end
  def get_full_erase(this : IDiscFormat2Erase*, value : Int16*) : HRESULT
    @lpVtbl.value.get_full_erase.call(this, value)
  end
  def get_current_physical_media_type(this : IDiscFormat2Erase*, value : IMAPI_MEDIA_PHYSICAL_TYPE*) : HRESULT
    @lpVtbl.value.get_current_physical_media_type.call(this, value)
  end
  def put_client_name(this : IDiscFormat2Erase*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_client_name.call(this, value)
  end
  def get_client_name(this : IDiscFormat2Erase*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_client_name.call(this, value)
  end
  def erase_media(this : IDiscFormat2Erase*) : HRESULT
    @lpVtbl.value.erase_media.call(this)
  end
end
struct LibWin32::DDiscFormat2EraseEvents
  def query_interface(this : DDiscFormat2EraseEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DDiscFormat2EraseEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DDiscFormat2EraseEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DDiscFormat2EraseEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DDiscFormat2EraseEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DDiscFormat2EraseEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DDiscFormat2EraseEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DDiscFormat2EraseEvents*, object : IDispatch, elapsedseconds : Int32, estimatedtotalseconds : Int32) : HRESULT
    @lpVtbl.value.update.call(this, object, elapsedseconds, estimatedtotalseconds)
  end
end
struct LibWin32::IDiscFormat2Data
  def query_interface(this : IDiscFormat2Data*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2Data*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2Data*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2Data*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2Data*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2Data*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2Data*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_recorder_supported(this : IDiscFormat2Data*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_recorder_supported.call(this, recorder, value)
  end
  def is_current_media_supported(this : IDiscFormat2Data*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_current_media_supported.call(this, recorder, value)
  end
  def get_media_physically_blank(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_physically_blank.call(this, value)
  end
  def get_media_heuristically_blank(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_heuristically_blank.call(this, value)
  end
  def get_supported_media_types(this : IDiscFormat2Data*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_media_types.call(this, value)
  end
  def put_recorder(this : IDiscFormat2Data*, value : IDiscRecorder2) : HRESULT
    @lpVtbl.value.put_recorder.call(this, value)
  end
  def get_recorder(this : IDiscFormat2Data*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_recorder.call(this, value)
  end
  def put_buffer_underrun_free_disabled(this : IDiscFormat2Data*, value : Int16) : HRESULT
    @lpVtbl.value.put_buffer_underrun_free_disabled.call(this, value)
  end
  def get_buffer_underrun_free_disabled(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_buffer_underrun_free_disabled.call(this, value)
  end
  def put_postgap_already_in_image(this : IDiscFormat2Data*, value : Int16) : HRESULT
    @lpVtbl.value.put_postgap_already_in_image.call(this, value)
  end
  def get_postgap_already_in_image(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_postgap_already_in_image.call(this, value)
  end
  def get_current_media_status(this : IDiscFormat2Data*, value : IMAPI_FORMAT2_DATA_MEDIA_STATE*) : HRESULT
    @lpVtbl.value.get_current_media_status.call(this, value)
  end
  def get_write_protect_status(this : IDiscFormat2Data*, value : IMAPI_MEDIA_WRITE_PROTECT_STATE*) : HRESULT
    @lpVtbl.value.get_write_protect_status.call(this, value)
  end
  def get_total_sectors_on_media(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_sectors_on_media.call(this, value)
  end
  def get_free_sectors_on_media(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_sectors_on_media.call(this, value)
  end
  def get_next_writable_address(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_next_writable_address.call(this, value)
  end
  def get_start_address_of_previous_session(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_address_of_previous_session.call(this, value)
  end
  def get_last_written_address_of_previous_session(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_address_of_previous_session.call(this, value)
  end
  def put_force_media_to_be_closed(this : IDiscFormat2Data*, value : Int16) : HRESULT
    @lpVtbl.value.put_force_media_to_be_closed.call(this, value)
  end
  def get_force_media_to_be_closed(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_force_media_to_be_closed.call(this, value)
  end
  def put_disable_consumer_dvd_compatibility_mode(this : IDiscFormat2Data*, value : Int16) : HRESULT
    @lpVtbl.value.put_disable_consumer_dvd_compatibility_mode.call(this, value)
  end
  def get_disable_consumer_dvd_compatibility_mode(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_disable_consumer_dvd_compatibility_mode.call(this, value)
  end
  def get_current_physical_media_type(this : IDiscFormat2Data*, value : IMAPI_MEDIA_PHYSICAL_TYPE*) : HRESULT
    @lpVtbl.value.get_current_physical_media_type.call(this, value)
  end
  def put_client_name(this : IDiscFormat2Data*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_client_name.call(this, value)
  end
  def get_client_name(this : IDiscFormat2Data*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_client_name.call(this, value)
  end
  def get_requested_write_speed(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_requested_write_speed.call(this, value)
  end
  def get_requested_rotation_type_is_pure_cav(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_requested_rotation_type_is_pure_cav.call(this, value)
  end
  def get_current_write_speed(this : IDiscFormat2Data*, value : Int32*) : HRESULT
    @lpVtbl.value.get_current_write_speed.call(this, value)
  end
  def get_current_rotation_type_is_pure_cav(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_current_rotation_type_is_pure_cav.call(this, value)
  end
  def get_supported_write_speeds(this : IDiscFormat2Data*, supportedspeeds : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speeds.call(this, supportedspeeds)
  end
  def get_supported_write_speed_descriptors(this : IDiscFormat2Data*, supportedspeeddescriptors : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speed_descriptors.call(this, supportedspeeddescriptors)
  end
  def put_force_overwrite(this : IDiscFormat2Data*, value : Int16) : HRESULT
    @lpVtbl.value.put_force_overwrite.call(this, value)
  end
  def get_force_overwrite(this : IDiscFormat2Data*, value : Int16*) : HRESULT
    @lpVtbl.value.get_force_overwrite.call(this, value)
  end
  def get_multisession_interfaces(this : IDiscFormat2Data*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_multisession_interfaces.call(this, value)
  end
  def write(this : IDiscFormat2Data*, data : IStream) : HRESULT
    @lpVtbl.value.write.call(this, data)
  end
  def cancel_write(this : IDiscFormat2Data*) : HRESULT
    @lpVtbl.value.cancel_write.call(this)
  end
  def set_write_speed(this : IDiscFormat2Data*, requestedsectorspersecond : Int32, rotationtypeispurecav : Int16) : HRESULT
    @lpVtbl.value.set_write_speed.call(this, requestedsectorspersecond, rotationtypeispurecav)
  end
end
struct LibWin32::DDiscFormat2DataEvents
  def query_interface(this : DDiscFormat2DataEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DDiscFormat2DataEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DDiscFormat2DataEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DDiscFormat2DataEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DDiscFormat2DataEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DDiscFormat2DataEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DDiscFormat2DataEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DDiscFormat2DataEvents*, object : IDispatch, progress : IDispatch) : HRESULT
    @lpVtbl.value.update.call(this, object, progress)
  end
end
struct LibWin32::IDiscFormat2DataEventArgs
  def query_interface(this : IDiscFormat2DataEventArgs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2DataEventArgs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2DataEventArgs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2DataEventArgs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2DataEventArgs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2DataEventArgs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2DataEventArgs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_lba(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_lba.call(this, value)
  end
  def get_sector_count(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_sector_count.call(this, value)
  end
  def get_last_read_lba(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_read_lba.call(this, value)
  end
  def get_last_written_lba(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_lba.call(this, value)
  end
  def get_total_system_buffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_system_buffer.call(this, value)
  end
  def get_used_system_buffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_used_system_buffer.call(this, value)
  end
  def get_free_system_buffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_system_buffer.call(this, value)
  end
  def get_elapsed_time(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_elapsed_time.call(this, value)
  end
  def get_remaining_time(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_remaining_time.call(this, value)
  end
  def get_total_time(this : IDiscFormat2DataEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_time.call(this, value)
  end
  def get_current_action(this : IDiscFormat2DataEventArgs*, value : IMAPI_FORMAT2_DATA_WRITE_ACTION*) : HRESULT
    @lpVtbl.value.get_current_action.call(this, value)
  end
end
struct LibWin32::IDiscFormat2TrackAtOnce
  def query_interface(this : IDiscFormat2TrackAtOnce*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2TrackAtOnce*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2TrackAtOnce*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2TrackAtOnce*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2TrackAtOnce*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2TrackAtOnce*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2TrackAtOnce*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_recorder_supported(this : IDiscFormat2TrackAtOnce*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_recorder_supported.call(this, recorder, value)
  end
  def is_current_media_supported(this : IDiscFormat2TrackAtOnce*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_current_media_supported.call(this, recorder, value)
  end
  def get_media_physically_blank(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_physically_blank.call(this, value)
  end
  def get_media_heuristically_blank(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_heuristically_blank.call(this, value)
  end
  def get_supported_media_types(this : IDiscFormat2TrackAtOnce*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_media_types.call(this, value)
  end
  def prepare_media(this : IDiscFormat2TrackAtOnce*) : HRESULT
    @lpVtbl.value.prepare_media.call(this)
  end
  def add_audio_track(this : IDiscFormat2TrackAtOnce*, data : IStream) : HRESULT
    @lpVtbl.value.add_audio_track.call(this, data)
  end
  def cancel_add_track(this : IDiscFormat2TrackAtOnce*) : HRESULT
    @lpVtbl.value.cancel_add_track.call(this)
  end
  def release_media(this : IDiscFormat2TrackAtOnce*) : HRESULT
    @lpVtbl.value.release_media.call(this)
  end
  def set_write_speed(this : IDiscFormat2TrackAtOnce*, requestedsectorspersecond : Int32, rotationtypeispurecav : Int16) : HRESULT
    @lpVtbl.value.set_write_speed.call(this, requestedsectorspersecond, rotationtypeispurecav)
  end
  def put_recorder(this : IDiscFormat2TrackAtOnce*, value : IDiscRecorder2) : HRESULT
    @lpVtbl.value.put_recorder.call(this, value)
  end
  def get_recorder(this : IDiscFormat2TrackAtOnce*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_recorder.call(this, value)
  end
  def put_buffer_underrun_free_disabled(this : IDiscFormat2TrackAtOnce*, value : Int16) : HRESULT
    @lpVtbl.value.put_buffer_underrun_free_disabled.call(this, value)
  end
  def get_buffer_underrun_free_disabled(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_buffer_underrun_free_disabled.call(this, value)
  end
  def get_number_of_existing_tracks(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_existing_tracks.call(this, value)
  end
  def get_total_sectors_on_media(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_sectors_on_media.call(this, value)
  end
  def get_free_sectors_on_media(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_sectors_on_media.call(this, value)
  end
  def get_used_sectors_on_media(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_used_sectors_on_media.call(this, value)
  end
  def put_do_not_finalize_media(this : IDiscFormat2TrackAtOnce*, value : Int16) : HRESULT
    @lpVtbl.value.put_do_not_finalize_media.call(this, value)
  end
  def get_do_not_finalize_media(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_do_not_finalize_media.call(this, value)
  end
  def get_expected_table_of_contents(this : IDiscFormat2TrackAtOnce*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_expected_table_of_contents.call(this, value)
  end
  def get_current_physical_media_type(this : IDiscFormat2TrackAtOnce*, value : IMAPI_MEDIA_PHYSICAL_TYPE*) : HRESULT
    @lpVtbl.value.get_current_physical_media_type.call(this, value)
  end
  def put_client_name(this : IDiscFormat2TrackAtOnce*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_client_name.call(this, value)
  end
  def get_client_name(this : IDiscFormat2TrackAtOnce*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_client_name.call(this, value)
  end
  def get_requested_write_speed(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_requested_write_speed.call(this, value)
  end
  def get_requested_rotation_type_is_pure_cav(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_requested_rotation_type_is_pure_cav.call(this, value)
  end
  def get_current_write_speed(this : IDiscFormat2TrackAtOnce*, value : Int32*) : HRESULT
    @lpVtbl.value.get_current_write_speed.call(this, value)
  end
  def get_current_rotation_type_is_pure_cav(this : IDiscFormat2TrackAtOnce*, value : Int16*) : HRESULT
    @lpVtbl.value.get_current_rotation_type_is_pure_cav.call(this, value)
  end
  def get_supported_write_speeds(this : IDiscFormat2TrackAtOnce*, supportedspeeds : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speeds.call(this, supportedspeeds)
  end
  def get_supported_write_speed_descriptors(this : IDiscFormat2TrackAtOnce*, supportedspeeddescriptors : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speed_descriptors.call(this, supportedspeeddescriptors)
  end
end
struct LibWin32::DDiscFormat2TrackAtOnceEvents
  def query_interface(this : DDiscFormat2TrackAtOnceEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DDiscFormat2TrackAtOnceEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DDiscFormat2TrackAtOnceEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DDiscFormat2TrackAtOnceEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DDiscFormat2TrackAtOnceEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DDiscFormat2TrackAtOnceEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DDiscFormat2TrackAtOnceEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DDiscFormat2TrackAtOnceEvents*, object : IDispatch, progress : IDispatch) : HRESULT
    @lpVtbl.value.update.call(this, object, progress)
  end
end
struct LibWin32::IDiscFormat2TrackAtOnceEventArgs
  def query_interface(this : IDiscFormat2TrackAtOnceEventArgs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2TrackAtOnceEventArgs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2TrackAtOnceEventArgs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2TrackAtOnceEventArgs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2TrackAtOnceEventArgs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2TrackAtOnceEventArgs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2TrackAtOnceEventArgs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_lba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_lba.call(this, value)
  end
  def get_sector_count(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_sector_count.call(this, value)
  end
  def get_last_read_lba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_read_lba.call(this, value)
  end
  def get_last_written_lba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_lba.call(this, value)
  end
  def get_total_system_buffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_system_buffer.call(this, value)
  end
  def get_used_system_buffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_used_system_buffer.call(this, value)
  end
  def get_free_system_buffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_system_buffer.call(this, value)
  end
  def get_current_track_number(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_current_track_number.call(this, value)
  end
  def get_current_action(this : IDiscFormat2TrackAtOnceEventArgs*, value : IMAPI_FORMAT2_TAO_WRITE_ACTION*) : HRESULT
    @lpVtbl.value.get_current_action.call(this, value)
  end
  def get_elapsed_time(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_elapsed_time.call(this, value)
  end
  def get_remaining_time(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_remaining_time.call(this, value)
  end
end
struct LibWin32::IDiscFormat2RawCD
  def query_interface(this : IDiscFormat2RawCD*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2RawCD*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2RawCD*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2RawCD*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2RawCD*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2RawCD*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2RawCD*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def is_recorder_supported(this : IDiscFormat2RawCD*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_recorder_supported.call(this, recorder, value)
  end
  def is_current_media_supported(this : IDiscFormat2RawCD*, recorder : IDiscRecorder2, value : Int16*) : HRESULT
    @lpVtbl.value.is_current_media_supported.call(this, recorder, value)
  end
  def get_media_physically_blank(this : IDiscFormat2RawCD*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_physically_blank.call(this, value)
  end
  def get_media_heuristically_blank(this : IDiscFormat2RawCD*, value : Int16*) : HRESULT
    @lpVtbl.value.get_media_heuristically_blank.call(this, value)
  end
  def get_supported_media_types(this : IDiscFormat2RawCD*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_media_types.call(this, value)
  end
  def prepare_media(this : IDiscFormat2RawCD*) : HRESULT
    @lpVtbl.value.prepare_media.call(this)
  end
  def write_media(this : IDiscFormat2RawCD*, data : IStream) : HRESULT
    @lpVtbl.value.write_media.call(this, data)
  end
  def write_media2(this : IDiscFormat2RawCD*, data : IStream, streamleadinsectors : Int32) : HRESULT
    @lpVtbl.value.write_media2.call(this, data, streamleadinsectors)
  end
  def cancel_write(this : IDiscFormat2RawCD*) : HRESULT
    @lpVtbl.value.cancel_write.call(this)
  end
  def release_media(this : IDiscFormat2RawCD*) : HRESULT
    @lpVtbl.value.release_media.call(this)
  end
  def set_write_speed(this : IDiscFormat2RawCD*, requestedsectorspersecond : Int32, rotationtypeispurecav : Int16) : HRESULT
    @lpVtbl.value.set_write_speed.call(this, requestedsectorspersecond, rotationtypeispurecav)
  end
  def put_recorder(this : IDiscFormat2RawCD*, value : IDiscRecorder2) : HRESULT
    @lpVtbl.value.put_recorder.call(this, value)
  end
  def get_recorder(this : IDiscFormat2RawCD*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_recorder.call(this, value)
  end
  def put_buffer_underrun_free_disabled(this : IDiscFormat2RawCD*, value : Int16) : HRESULT
    @lpVtbl.value.put_buffer_underrun_free_disabled.call(this, value)
  end
  def get_buffer_underrun_free_disabled(this : IDiscFormat2RawCD*, value : Int16*) : HRESULT
    @lpVtbl.value.get_buffer_underrun_free_disabled.call(this, value)
  end
  def get_start_of_next_session(this : IDiscFormat2RawCD*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_of_next_session.call(this, value)
  end
  def get_last_possible_start_of_leadout(this : IDiscFormat2RawCD*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_possible_start_of_leadout.call(this, value)
  end
  def get_current_physical_media_type(this : IDiscFormat2RawCD*, value : IMAPI_MEDIA_PHYSICAL_TYPE*) : HRESULT
    @lpVtbl.value.get_current_physical_media_type.call(this, value)
  end
  def get_supported_sector_types(this : IDiscFormat2RawCD*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_sector_types.call(this, value)
  end
  def put_requested_sector_type(this : IDiscFormat2RawCD*, value : IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) : HRESULT
    @lpVtbl.value.put_requested_sector_type.call(this, value)
  end
  def get_requested_sector_type(this : IDiscFormat2RawCD*, value : IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*) : HRESULT
    @lpVtbl.value.get_requested_sector_type.call(this, value)
  end
  def put_client_name(this : IDiscFormat2RawCD*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_client_name.call(this, value)
  end
  def get_client_name(this : IDiscFormat2RawCD*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_client_name.call(this, value)
  end
  def get_requested_write_speed(this : IDiscFormat2RawCD*, value : Int32*) : HRESULT
    @lpVtbl.value.get_requested_write_speed.call(this, value)
  end
  def get_requested_rotation_type_is_pure_cav(this : IDiscFormat2RawCD*, value : Int16*) : HRESULT
    @lpVtbl.value.get_requested_rotation_type_is_pure_cav.call(this, value)
  end
  def get_current_write_speed(this : IDiscFormat2RawCD*, value : Int32*) : HRESULT
    @lpVtbl.value.get_current_write_speed.call(this, value)
  end
  def get_current_rotation_type_is_pure_cav(this : IDiscFormat2RawCD*, value : Int16*) : HRESULT
    @lpVtbl.value.get_current_rotation_type_is_pure_cav.call(this, value)
  end
  def get_supported_write_speeds(this : IDiscFormat2RawCD*, supportedspeeds : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speeds.call(this, supportedspeeds)
  end
  def get_supported_write_speed_descriptors(this : IDiscFormat2RawCD*, supportedspeeddescriptors : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_supported_write_speed_descriptors.call(this, supportedspeeddescriptors)
  end
end
struct LibWin32::DDiscFormat2RawCDEvents
  def query_interface(this : DDiscFormat2RawCDEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DDiscFormat2RawCDEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DDiscFormat2RawCDEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DDiscFormat2RawCDEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DDiscFormat2RawCDEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DDiscFormat2RawCDEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DDiscFormat2RawCDEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DDiscFormat2RawCDEvents*, object : IDispatch, progress : IDispatch) : HRESULT
    @lpVtbl.value.update.call(this, object, progress)
  end
end
struct LibWin32::IDiscFormat2RawCDEventArgs
  def query_interface(this : IDiscFormat2RawCDEventArgs*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscFormat2RawCDEventArgs*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscFormat2RawCDEventArgs*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IDiscFormat2RawCDEventArgs*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IDiscFormat2RawCDEventArgs*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IDiscFormat2RawCDEventArgs*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IDiscFormat2RawCDEventArgs*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_lba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_lba.call(this, value)
  end
  def get_sector_count(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_sector_count.call(this, value)
  end
  def get_last_read_lba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_read_lba.call(this, value)
  end
  def get_last_written_lba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_lba.call(this, value)
  end
  def get_total_system_buffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_system_buffer.call(this, value)
  end
  def get_used_system_buffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_used_system_buffer.call(this, value)
  end
  def get_free_system_buffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_system_buffer.call(this, value)
  end
  def get_current_action(this : IDiscFormat2RawCDEventArgs*, value : IMAPI_FORMAT2_RAW_CD_WRITE_ACTION*) : HRESULT
    @lpVtbl.value.get_current_action.call(this, value)
  end
  def get_elapsed_time(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_elapsed_time.call(this, value)
  end
  def get_remaining_time(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : HRESULT
    @lpVtbl.value.get_remaining_time.call(this, value)
  end
end
struct LibWin32::IBurnVerification
  def query_interface(this : IBurnVerification*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBurnVerification*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBurnVerification*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def put_burn_verification_level(this : IBurnVerification*, value : IMAPI_BURN_VERIFICATION_LEVEL) : HRESULT
    @lpVtbl.value.put_burn_verification_level.call(this, value)
  end
  def get_burn_verification_level(this : IBurnVerification*, value : IMAPI_BURN_VERIFICATION_LEVEL*) : HRESULT
    @lpVtbl.value.get_burn_verification_level.call(this, value)
  end
end
struct LibWin32::IWriteSpeedDescriptor
  def query_interface(this : IWriteSpeedDescriptor*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IWriteSpeedDescriptor*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IWriteSpeedDescriptor*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IWriteSpeedDescriptor*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IWriteSpeedDescriptor*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IWriteSpeedDescriptor*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IWriteSpeedDescriptor*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_media_type(this : IWriteSpeedDescriptor*, value : IMAPI_MEDIA_PHYSICAL_TYPE*) : HRESULT
    @lpVtbl.value.get_media_type.call(this, value)
  end
  def get_rotation_type_is_pure_cav(this : IWriteSpeedDescriptor*, value : Int16*) : HRESULT
    @lpVtbl.value.get_rotation_type_is_pure_cav.call(this, value)
  end
  def get_write_speed(this : IWriteSpeedDescriptor*, value : Int32*) : HRESULT
    @lpVtbl.value.get_write_speed.call(this, value)
  end
end
struct LibWin32::IMultisession
  def query_interface(this : IMultisession*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMultisession*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMultisession*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IMultisession*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IMultisession*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IMultisession*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IMultisession*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_supported_on_current_media_state(this : IMultisession*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_supported_on_current_media_state.call(this, value)
  end
  def put_in_use(this : IMultisession*, value : Int16) : HRESULT
    @lpVtbl.value.put_in_use.call(this, value)
  end
  def get_in_use(this : IMultisession*, value : Int16*) : HRESULT
    @lpVtbl.value.get_in_use.call(this, value)
  end
  def get_import_recorder(this : IMultisession*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_import_recorder.call(this, value)
  end
end
struct LibWin32::IMultisessionSequential
  def query_interface(this : IMultisessionSequential*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMultisessionSequential*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMultisessionSequential*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IMultisessionSequential*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IMultisessionSequential*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IMultisessionSequential*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IMultisessionSequential*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_supported_on_current_media_state(this : IMultisessionSequential*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_supported_on_current_media_state.call(this, value)
  end
  def put_in_use(this : IMultisessionSequential*, value : Int16) : HRESULT
    @lpVtbl.value.put_in_use.call(this, value)
  end
  def get_in_use(this : IMultisessionSequential*, value : Int16*) : HRESULT
    @lpVtbl.value.get_in_use.call(this, value)
  end
  def get_import_recorder(this : IMultisessionSequential*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_import_recorder.call(this, value)
  end
  def get_is_first_data_session(this : IMultisessionSequential*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_first_data_session.call(this, value)
  end
  def get_start_address_of_previous_session(this : IMultisessionSequential*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_address_of_previous_session.call(this, value)
  end
  def get_last_written_address_of_previous_session(this : IMultisessionSequential*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_address_of_previous_session.call(this, value)
  end
  def get_next_writable_address(this : IMultisessionSequential*, value : Int32*) : HRESULT
    @lpVtbl.value.get_next_writable_address.call(this, value)
  end
  def get_free_sectors_on_media(this : IMultisessionSequential*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_sectors_on_media.call(this, value)
  end
end
struct LibWin32::IMultisessionSequential2
  def query_interface(this : IMultisessionSequential2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMultisessionSequential2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMultisessionSequential2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IMultisessionSequential2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IMultisessionSequential2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IMultisessionSequential2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IMultisessionSequential2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_supported_on_current_media_state(this : IMultisessionSequential2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_supported_on_current_media_state.call(this, value)
  end
  def put_in_use(this : IMultisessionSequential2*, value : Int16) : HRESULT
    @lpVtbl.value.put_in_use.call(this, value)
  end
  def get_in_use(this : IMultisessionSequential2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_in_use.call(this, value)
  end
  def get_import_recorder(this : IMultisessionSequential2*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_import_recorder.call(this, value)
  end
  def get_is_first_data_session(this : IMultisessionSequential2*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_first_data_session.call(this, value)
  end
  def get_start_address_of_previous_session(this : IMultisessionSequential2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_address_of_previous_session.call(this, value)
  end
  def get_last_written_address_of_previous_session(this : IMultisessionSequential2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_address_of_previous_session.call(this, value)
  end
  def get_next_writable_address(this : IMultisessionSequential2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_next_writable_address.call(this, value)
  end
  def get_free_sectors_on_media(this : IMultisessionSequential2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_free_sectors_on_media.call(this, value)
  end
  def get_write_unit_size(this : IMultisessionSequential2*, value : Int32*) : HRESULT
    @lpVtbl.value.get_write_unit_size.call(this, value)
  end
end
struct LibWin32::IMultisessionRandomWrite
  def query_interface(this : IMultisessionRandomWrite*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IMultisessionRandomWrite*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IMultisessionRandomWrite*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IMultisessionRandomWrite*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IMultisessionRandomWrite*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IMultisessionRandomWrite*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IMultisessionRandomWrite*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_is_supported_on_current_media_state(this : IMultisessionRandomWrite*, value : Int16*) : HRESULT
    @lpVtbl.value.get_is_supported_on_current_media_state.call(this, value)
  end
  def put_in_use(this : IMultisessionRandomWrite*, value : Int16) : HRESULT
    @lpVtbl.value.put_in_use.call(this, value)
  end
  def get_in_use(this : IMultisessionRandomWrite*, value : Int16*) : HRESULT
    @lpVtbl.value.get_in_use.call(this, value)
  end
  def get_import_recorder(this : IMultisessionRandomWrite*, value : IDiscRecorder2*) : HRESULT
    @lpVtbl.value.get_import_recorder.call(this, value)
  end
  def get_write_unit_size(this : IMultisessionRandomWrite*, value : Int32*) : HRESULT
    @lpVtbl.value.get_write_unit_size.call(this, value)
  end
  def get_last_written_address(this : IMultisessionRandomWrite*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_written_address.call(this, value)
  end
  def get_total_sectors_on_media(this : IMultisessionRandomWrite*, value : Int32*) : HRESULT
    @lpVtbl.value.get_total_sectors_on_media.call(this, value)
  end
end
struct LibWin32::IStreamPseudoRandomBased
  def query_interface(this : IStreamPseudoRandomBased*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IStreamPseudoRandomBased*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IStreamPseudoRandomBased*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read(this : IStreamPseudoRandomBased*, pv : Void*, cb : UInt32, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.read.call(this, pv, cb, pcbread)
  end
  def write(this : IStreamPseudoRandomBased*, pv : Void*, cb : UInt32, pcbwritten : UInt32*) : HRESULT
    @lpVtbl.value.write.call(this, pv, cb, pcbwritten)
  end
  def seek(this : IStreamPseudoRandomBased*, dlibmove : LARGE_INTEGER, dworigin : STREAM_SEEK, plibnewposition : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.seek.call(this, dlibmove, dworigin, plibnewposition)
  end
  def set_size(this : IStreamPseudoRandomBased*, libnewsize : ULARGE_INTEGER) : HRESULT
    @lpVtbl.value.set_size.call(this, libnewsize)
  end
  def copy_to(this : IStreamPseudoRandomBased*, pstm : IStream, cb : ULARGE_INTEGER, pcbread : ULARGE_INTEGER*, pcbwritten : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.copy_to.call(this, pstm, cb, pcbread, pcbwritten)
  end
  def commit(this : IStreamPseudoRandomBased*, grfcommitflags : UInt32) : HRESULT
    @lpVtbl.value.commit.call(this, grfcommitflags)
  end
  def revert(this : IStreamPseudoRandomBased*) : HRESULT
    @lpVtbl.value.revert.call(this)
  end
  def lock_region(this : IStreamPseudoRandomBased*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.lock_region.call(this, liboffset, cb, dwlocktype)
  end
  def unlock_region(this : IStreamPseudoRandomBased*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.unlock_region.call(this, liboffset, cb, dwlocktype)
  end
  def stat(this : IStreamPseudoRandomBased*, pstatstg : STATSTG*, grfstatflag : UInt32) : HRESULT
    @lpVtbl.value.stat.call(this, pstatstg, grfstatflag)
  end
  def clone(this : IStreamPseudoRandomBased*, ppstm : IStream*) : HRESULT
    @lpVtbl.value.clone.call(this, ppstm)
  end
  def put_seed(this : IStreamPseudoRandomBased*, value : UInt32) : HRESULT
    @lpVtbl.value.put_seed.call(this, value)
  end
  def get_seed(this : IStreamPseudoRandomBased*, value : UInt32*) : HRESULT
    @lpVtbl.value.get_seed.call(this, value)
  end
  def put_extended_seed(this : IStreamPseudoRandomBased*, values : UInt32*, ecount : UInt32) : HRESULT
    @lpVtbl.value.put_extended_seed.call(this, values, ecount)
  end
  def get_extended_seed(this : IStreamPseudoRandomBased*, values : UInt32**, ecount : UInt32*) : HRESULT
    @lpVtbl.value.get_extended_seed.call(this, values, ecount)
  end
end
struct LibWin32::IStreamConcatenate
  def query_interface(this : IStreamConcatenate*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IStreamConcatenate*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IStreamConcatenate*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read(this : IStreamConcatenate*, pv : Void*, cb : UInt32, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.read.call(this, pv, cb, pcbread)
  end
  def write(this : IStreamConcatenate*, pv : Void*, cb : UInt32, pcbwritten : UInt32*) : HRESULT
    @lpVtbl.value.write.call(this, pv, cb, pcbwritten)
  end
  def seek(this : IStreamConcatenate*, dlibmove : LARGE_INTEGER, dworigin : STREAM_SEEK, plibnewposition : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.seek.call(this, dlibmove, dworigin, plibnewposition)
  end
  def set_size(this : IStreamConcatenate*, libnewsize : ULARGE_INTEGER) : HRESULT
    @lpVtbl.value.set_size.call(this, libnewsize)
  end
  def copy_to(this : IStreamConcatenate*, pstm : IStream, cb : ULARGE_INTEGER, pcbread : ULARGE_INTEGER*, pcbwritten : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.copy_to.call(this, pstm, cb, pcbread, pcbwritten)
  end
  def commit(this : IStreamConcatenate*, grfcommitflags : UInt32) : HRESULT
    @lpVtbl.value.commit.call(this, grfcommitflags)
  end
  def revert(this : IStreamConcatenate*) : HRESULT
    @lpVtbl.value.revert.call(this)
  end
  def lock_region(this : IStreamConcatenate*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.lock_region.call(this, liboffset, cb, dwlocktype)
  end
  def unlock_region(this : IStreamConcatenate*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.unlock_region.call(this, liboffset, cb, dwlocktype)
  end
  def stat(this : IStreamConcatenate*, pstatstg : STATSTG*, grfstatflag : UInt32) : HRESULT
    @lpVtbl.value.stat.call(this, pstatstg, grfstatflag)
  end
  def clone(this : IStreamConcatenate*, ppstm : IStream*) : HRESULT
    @lpVtbl.value.clone.call(this, ppstm)
  end
  def initialize(this : IStreamConcatenate*, stream1 : IStream, stream2 : IStream) : HRESULT
    @lpVtbl.value.initialize.call(this, stream1, stream2)
  end
  def initialize2(this : IStreamConcatenate*, streams : IStream*, streamcount : UInt32) : HRESULT
    @lpVtbl.value.initialize2.call(this, streams, streamcount)
  end
  def append(this : IStreamConcatenate*, stream : IStream) : HRESULT
    @lpVtbl.value.append.call(this, stream)
  end
  def append2(this : IStreamConcatenate*, streams : IStream*, streamcount : UInt32) : HRESULT
    @lpVtbl.value.append2.call(this, streams, streamcount)
  end
end
struct LibWin32::IStreamInterleave
  def query_interface(this : IStreamInterleave*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IStreamInterleave*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IStreamInterleave*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def read(this : IStreamInterleave*, pv : Void*, cb : UInt32, pcbread : UInt32*) : HRESULT
    @lpVtbl.value.read.call(this, pv, cb, pcbread)
  end
  def write(this : IStreamInterleave*, pv : Void*, cb : UInt32, pcbwritten : UInt32*) : HRESULT
    @lpVtbl.value.write.call(this, pv, cb, pcbwritten)
  end
  def seek(this : IStreamInterleave*, dlibmove : LARGE_INTEGER, dworigin : STREAM_SEEK, plibnewposition : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.seek.call(this, dlibmove, dworigin, plibnewposition)
  end
  def set_size(this : IStreamInterleave*, libnewsize : ULARGE_INTEGER) : HRESULT
    @lpVtbl.value.set_size.call(this, libnewsize)
  end
  def copy_to(this : IStreamInterleave*, pstm : IStream, cb : ULARGE_INTEGER, pcbread : ULARGE_INTEGER*, pcbwritten : ULARGE_INTEGER*) : HRESULT
    @lpVtbl.value.copy_to.call(this, pstm, cb, pcbread, pcbwritten)
  end
  def commit(this : IStreamInterleave*, grfcommitflags : UInt32) : HRESULT
    @lpVtbl.value.commit.call(this, grfcommitflags)
  end
  def revert(this : IStreamInterleave*) : HRESULT
    @lpVtbl.value.revert.call(this)
  end
  def lock_region(this : IStreamInterleave*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.lock_region.call(this, liboffset, cb, dwlocktype)
  end
  def unlock_region(this : IStreamInterleave*, liboffset : ULARGE_INTEGER, cb : ULARGE_INTEGER, dwlocktype : UInt32) : HRESULT
    @lpVtbl.value.unlock_region.call(this, liboffset, cb, dwlocktype)
  end
  def stat(this : IStreamInterleave*, pstatstg : STATSTG*, grfstatflag : UInt32) : HRESULT
    @lpVtbl.value.stat.call(this, pstatstg, grfstatflag)
  end
  def clone(this : IStreamInterleave*, ppstm : IStream*) : HRESULT
    @lpVtbl.value.clone.call(this, ppstm)
  end
  def initialize(this : IStreamInterleave*, streams : IStream*, interleavesizes : UInt32*, streamcount : UInt32) : HRESULT
    @lpVtbl.value.initialize.call(this, streams, interleavesizes, streamcount)
  end
end
struct LibWin32::IRawCDImageCreator
  def query_interface(this : IRawCDImageCreator*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRawCDImageCreator*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRawCDImageCreator*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IRawCDImageCreator*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IRawCDImageCreator*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IRawCDImageCreator*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IRawCDImageCreator*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def create_result_image(this : IRawCDImageCreator*, resultstream : IStream*) : HRESULT
    @lpVtbl.value.create_result_image.call(this, resultstream)
  end
  def add_track(this : IRawCDImageCreator*, datatype : IMAPI_CD_SECTOR_TYPE, data : IStream, trackindex : Int32*) : HRESULT
    @lpVtbl.value.add_track.call(this, datatype, data, trackindex)
  end
  def add_special_pregap(this : IRawCDImageCreator*, data : IStream) : HRESULT
    @lpVtbl.value.add_special_pregap.call(this, data)
  end
  def add_subcode_rw_generator(this : IRawCDImageCreator*, subcode : IStream) : HRESULT
    @lpVtbl.value.add_subcode_rw_generator.call(this, subcode)
  end
  def put_resulting_image_type(this : IRawCDImageCreator*, value : IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) : HRESULT
    @lpVtbl.value.put_resulting_image_type.call(this, value)
  end
  def get_resulting_image_type(this : IRawCDImageCreator*, value : IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*) : HRESULT
    @lpVtbl.value.get_resulting_image_type.call(this, value)
  end
  def get_start_of_leadout(this : IRawCDImageCreator*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_of_leadout.call(this, value)
  end
  def put_start_of_leadout_limit(this : IRawCDImageCreator*, value : Int32) : HRESULT
    @lpVtbl.value.put_start_of_leadout_limit.call(this, value)
  end
  def get_start_of_leadout_limit(this : IRawCDImageCreator*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_of_leadout_limit.call(this, value)
  end
  def put_disable_gapless_audio(this : IRawCDImageCreator*, value : Int16) : HRESULT
    @lpVtbl.value.put_disable_gapless_audio.call(this, value)
  end
  def get_disable_gapless_audio(this : IRawCDImageCreator*, value : Int16*) : HRESULT
    @lpVtbl.value.get_disable_gapless_audio.call(this, value)
  end
  def put_media_catalog_number(this : IRawCDImageCreator*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_media_catalog_number.call(this, value)
  end
  def get_media_catalog_number(this : IRawCDImageCreator*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_media_catalog_number.call(this, value)
  end
  def put_starting_track_number(this : IRawCDImageCreator*, value : Int32) : HRESULT
    @lpVtbl.value.put_starting_track_number.call(this, value)
  end
  def get_starting_track_number(this : IRawCDImageCreator*, value : Int32*) : HRESULT
    @lpVtbl.value.get_starting_track_number.call(this, value)
  end
  def get_track_info(this : IRawCDImageCreator*, trackindex : Int32, value : IRawCDImageTrackInfo*) : HRESULT
    @lpVtbl.value.get_track_info.call(this, trackindex, value)
  end
  def get_number_of_existing_tracks(this : IRawCDImageCreator*, value : Int32*) : HRESULT
    @lpVtbl.value.get_number_of_existing_tracks.call(this, value)
  end
  def get_last_used_user_sector_in_image(this : IRawCDImageCreator*, value : Int32*) : HRESULT
    @lpVtbl.value.get_last_used_user_sector_in_image.call(this, value)
  end
  def get_expected_table_of_contents(this : IRawCDImageCreator*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_expected_table_of_contents.call(this, value)
  end
end
struct LibWin32::IRawCDImageTrackInfo
  def query_interface(this : IRawCDImageTrackInfo*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRawCDImageTrackInfo*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRawCDImageTrackInfo*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IRawCDImageTrackInfo*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IRawCDImageTrackInfo*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IRawCDImageTrackInfo*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IRawCDImageTrackInfo*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_starting_lba(this : IRawCDImageTrackInfo*, value : Int32*) : HRESULT
    @lpVtbl.value.get_starting_lba.call(this, value)
  end
  def get_sector_count(this : IRawCDImageTrackInfo*, value : Int32*) : HRESULT
    @lpVtbl.value.get_sector_count.call(this, value)
  end
  def get_track_number(this : IRawCDImageTrackInfo*, value : Int32*) : HRESULT
    @lpVtbl.value.get_track_number.call(this, value)
  end
  def get_sector_type(this : IRawCDImageTrackInfo*, value : IMAPI_CD_SECTOR_TYPE*) : HRESULT
    @lpVtbl.value.get_sector_type.call(this, value)
  end
  def get_isrc(this : IRawCDImageTrackInfo*, value : UInt8**) : HRESULT
    @lpVtbl.value.get_isrc.call(this, value)
  end
  def put_isrc(this : IRawCDImageTrackInfo*, value : UInt8*) : HRESULT
    @lpVtbl.value.put_isrc.call(this, value)
  end
  def get_digital_audio_copy_setting(this : IRawCDImageTrackInfo*, value : IMAPI_CD_TRACK_DIGITAL_COPY_SETTING*) : HRESULT
    @lpVtbl.value.get_digital_audio_copy_setting.call(this, value)
  end
  def put_digital_audio_copy_setting(this : IRawCDImageTrackInfo*, value : IMAPI_CD_TRACK_DIGITAL_COPY_SETTING) : HRESULT
    @lpVtbl.value.put_digital_audio_copy_setting.call(this, value)
  end
  def get_audio_has_preemphasis(this : IRawCDImageTrackInfo*, value : Int16*) : HRESULT
    @lpVtbl.value.get_audio_has_preemphasis.call(this, value)
  end
  def put_audio_has_preemphasis(this : IRawCDImageTrackInfo*, value : Int16) : HRESULT
    @lpVtbl.value.put_audio_has_preemphasis.call(this, value)
  end
  def get_track_indexes(this : IRawCDImageTrackInfo*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_track_indexes.call(this, value)
  end
  def add_track_index(this : IRawCDImageTrackInfo*, lbaoffset : Int32) : HRESULT
    @lpVtbl.value.add_track_index.call(this, lbaoffset)
  end
  def clear_track_index(this : IRawCDImageTrackInfo*, lbaoffset : Int32) : HRESULT
    @lpVtbl.value.clear_track_index.call(this, lbaoffset)
  end
end
struct LibWin32::IBlockRange
  def query_interface(this : IBlockRange*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBlockRange*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBlockRange*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IBlockRange*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IBlockRange*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IBlockRange*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IBlockRange*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_start_lba(this : IBlockRange*, value : Int32*) : HRESULT
    @lpVtbl.value.get_start_lba.call(this, value)
  end
  def get_end_lba(this : IBlockRange*, value : Int32*) : HRESULT
    @lpVtbl.value.get_end_lba.call(this, value)
  end
end
struct LibWin32::IBlockRangeList
  def query_interface(this : IBlockRangeList*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBlockRangeList*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBlockRangeList*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IBlockRangeList*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IBlockRangeList*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IBlockRangeList*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IBlockRangeList*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_block_ranges(this : IBlockRangeList*, value : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_block_ranges.call(this, value)
  end
end
struct LibWin32::IBootOptions
  def query_interface(this : IBootOptions*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IBootOptions*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IBootOptions*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IBootOptions*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IBootOptions*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IBootOptions*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IBootOptions*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_boot_image(this : IBootOptions*, pval : IStream*) : HRESULT
    @lpVtbl.value.get_boot_image.call(this, pval)
  end
  def get_manufacturer(this : IBootOptions*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_manufacturer.call(this, pval)
  end
  def put_manufacturer(this : IBootOptions*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_manufacturer.call(this, newval)
  end
  def get_platform_id(this : IBootOptions*, pval : PlatformId*) : HRESULT
    @lpVtbl.value.get_platform_id.call(this, pval)
  end
  def put_platform_id(this : IBootOptions*, newval : PlatformId) : HRESULT
    @lpVtbl.value.put_platform_id.call(this, newval)
  end
  def get_emulation(this : IBootOptions*, pval : EmulationType*) : HRESULT
    @lpVtbl.value.get_emulation.call(this, pval)
  end
  def put_emulation(this : IBootOptions*, newval : EmulationType) : HRESULT
    @lpVtbl.value.put_emulation.call(this, newval)
  end
  def get_image_size(this : IBootOptions*, pval : UInt32*) : HRESULT
    @lpVtbl.value.get_image_size.call(this, pval)
  end
  def assign_boot_image(this : IBootOptions*, newval : IStream) : HRESULT
    @lpVtbl.value.assign_boot_image.call(this, newval)
  end
end
struct LibWin32::IProgressItem
  def query_interface(this : IProgressItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IProgressItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IProgressItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IProgressItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IProgressItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IProgressItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IProgressItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_description(this : IProgressItem*, desc : UInt8**) : HRESULT
    @lpVtbl.value.get_description.call(this, desc)
  end
  def get_first_block(this : IProgressItem*, block : UInt32*) : HRESULT
    @lpVtbl.value.get_first_block.call(this, block)
  end
  def get_last_block(this : IProgressItem*, block : UInt32*) : HRESULT
    @lpVtbl.value.get_last_block.call(this, block)
  end
  def get_block_count(this : IProgressItem*, blocks : UInt32*) : HRESULT
    @lpVtbl.value.get_block_count.call(this, blocks)
  end
end
struct LibWin32::IEnumProgressItems
  def query_interface(this : IEnumProgressItems*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumProgressItems*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumProgressItems*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumProgressItems*, celt : UInt32, rgelt : IProgressItem*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgelt, pceltfetched)
  end
  def skip(this : IEnumProgressItems*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumProgressItems*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumProgressItems*, ppenum : IEnumProgressItems*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IProgressItems
  def query_interface(this : IProgressItems*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IProgressItems*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IProgressItems*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IProgressItems*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IProgressItems*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IProgressItems*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IProgressItems*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IProgressItems*, newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, newenum)
  end
  def get_item(this : IProgressItems*, index : Int32, item : IProgressItem*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, item)
  end
  def get_count(this : IProgressItems*, count : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, count)
  end
  def progress_item_from_block(this : IProgressItems*, block : UInt32, item : IProgressItem*) : HRESULT
    @lpVtbl.value.progress_item_from_block.call(this, block, item)
  end
  def progress_item_from_description(this : IProgressItems*, description : UInt8*, item : IProgressItem*) : HRESULT
    @lpVtbl.value.progress_item_from_description.call(this, description, item)
  end
  def get_enum_progress_items(this : IProgressItems*, newenum : IEnumProgressItems*) : HRESULT
    @lpVtbl.value.get_enum_progress_items.call(this, newenum)
  end
end
struct LibWin32::IFileSystemImageResult
  def query_interface(this : IFileSystemImageResult*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileSystemImageResult*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileSystemImageResult*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFileSystemImageResult*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFileSystemImageResult*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFileSystemImageResult*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFileSystemImageResult*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_image_stream(this : IFileSystemImageResult*, pval : IStream*) : HRESULT
    @lpVtbl.value.get_image_stream.call(this, pval)
  end
  def get_progress_items(this : IFileSystemImageResult*, pval : IProgressItems*) : HRESULT
    @lpVtbl.value.get_progress_items.call(this, pval)
  end
  def get_total_blocks(this : IFileSystemImageResult*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_total_blocks.call(this, pval)
  end
  def get_block_size(this : IFileSystemImageResult*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_block_size.call(this, pval)
  end
  def get_disc_id(this : IFileSystemImageResult*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_disc_id.call(this, pval)
  end
end
struct LibWin32::IFileSystemImageResult2
  def query_interface(this : IFileSystemImageResult2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileSystemImageResult2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileSystemImageResult2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFileSystemImageResult2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFileSystemImageResult2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFileSystemImageResult2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFileSystemImageResult2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_image_stream(this : IFileSystemImageResult2*, pval : IStream*) : HRESULT
    @lpVtbl.value.get_image_stream.call(this, pval)
  end
  def get_progress_items(this : IFileSystemImageResult2*, pval : IProgressItems*) : HRESULT
    @lpVtbl.value.get_progress_items.call(this, pval)
  end
  def get_total_blocks(this : IFileSystemImageResult2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_total_blocks.call(this, pval)
  end
  def get_block_size(this : IFileSystemImageResult2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_block_size.call(this, pval)
  end
  def get_disc_id(this : IFileSystemImageResult2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_disc_id.call(this, pval)
  end
  def get_modified_blocks(this : IFileSystemImageResult2*, pval : IBlockRangeList*) : HRESULT
    @lpVtbl.value.get_modified_blocks.call(this, pval)
  end
end
struct LibWin32::IFsiItem
  def query_interface(this : IFsiItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IFsiItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pval)
  end
  def get_full_path(this : IFsiItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_path.call(this, pval)
  end
  def get_creation_time(this : IFsiItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_creation_time.call(this, pval)
  end
  def put_creation_time(this : IFsiItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_creation_time.call(this, newval)
  end
  def get_last_accessed_time(this : IFsiItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_accessed_time.call(this, pval)
  end
  def put_last_accessed_time(this : IFsiItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_accessed_time.call(this, newval)
  end
  def get_last_modified_time(this : IFsiItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_modified_time.call(this, pval)
  end
  def put_last_modified_time(this : IFsiItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_modified_time.call(this, newval)
  end
  def get_is_hidden(this : IFsiItem*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_hidden.call(this, pval)
  end
  def put_is_hidden(this : IFsiItem*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_hidden.call(this, newval)
  end
  def file_system_name(this : IFsiItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_name.call(this, filesystem, pval)
  end
  def file_system_path(this : IFsiItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_path.call(this, filesystem, pval)
  end
end
struct LibWin32::IEnumFsiItems
  def query_interface(this : IEnumFsiItems*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumFsiItems*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumFsiItems*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumFsiItems*, celt : UInt32, rgelt : IFsiItem*, pceltfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, celt, rgelt, pceltfetched)
  end
  def skip(this : IEnumFsiItems*, celt : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, celt)
  end
  def reset(this : IEnumFsiItems*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumFsiItems*, ppenum : IEnumFsiItems*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IFsiFileItem
  def query_interface(this : IFsiFileItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiFileItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiFileItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiFileItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiFileItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiFileItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiFileItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IFsiFileItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pval)
  end
  def get_full_path(this : IFsiFileItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_path.call(this, pval)
  end
  def get_creation_time(this : IFsiFileItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_creation_time.call(this, pval)
  end
  def put_creation_time(this : IFsiFileItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_creation_time.call(this, newval)
  end
  def get_last_accessed_time(this : IFsiFileItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_accessed_time.call(this, pval)
  end
  def put_last_accessed_time(this : IFsiFileItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_accessed_time.call(this, newval)
  end
  def get_last_modified_time(this : IFsiFileItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_modified_time.call(this, pval)
  end
  def put_last_modified_time(this : IFsiFileItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_modified_time.call(this, newval)
  end
  def get_is_hidden(this : IFsiFileItem*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_hidden.call(this, pval)
  end
  def put_is_hidden(this : IFsiFileItem*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_hidden.call(this, newval)
  end
  def file_system_name(this : IFsiFileItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_name.call(this, filesystem, pval)
  end
  def file_system_path(this : IFsiFileItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_path.call(this, filesystem, pval)
  end
  def get_data_size(this : IFsiFileItem*, pval : Int64*) : HRESULT
    @lpVtbl.value.get_data_size.call(this, pval)
  end
  def get_data_size32_bit_low(this : IFsiFileItem*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_data_size32_bit_low.call(this, pval)
  end
  def get_data_size32_bit_high(this : IFsiFileItem*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_data_size32_bit_high.call(this, pval)
  end
  def get_data(this : IFsiFileItem*, pval : IStream*) : HRESULT
    @lpVtbl.value.get_data.call(this, pval)
  end
  def put_data(this : IFsiFileItem*, newval : IStream) : HRESULT
    @lpVtbl.value.put_data.call(this, newval)
  end
end
struct LibWin32::IFsiFileItem2
  def query_interface(this : IFsiFileItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiFileItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiFileItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiFileItem2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiFileItem2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiFileItem2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiFileItem2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IFsiFileItem2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pval)
  end
  def get_full_path(this : IFsiFileItem2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_path.call(this, pval)
  end
  def get_creation_time(this : IFsiFileItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_creation_time.call(this, pval)
  end
  def put_creation_time(this : IFsiFileItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_creation_time.call(this, newval)
  end
  def get_last_accessed_time(this : IFsiFileItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_accessed_time.call(this, pval)
  end
  def put_last_accessed_time(this : IFsiFileItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_accessed_time.call(this, newval)
  end
  def get_last_modified_time(this : IFsiFileItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_modified_time.call(this, pval)
  end
  def put_last_modified_time(this : IFsiFileItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_modified_time.call(this, newval)
  end
  def get_is_hidden(this : IFsiFileItem2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_hidden.call(this, pval)
  end
  def put_is_hidden(this : IFsiFileItem2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_hidden.call(this, newval)
  end
  def file_system_name(this : IFsiFileItem2*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_name.call(this, filesystem, pval)
  end
  def file_system_path(this : IFsiFileItem2*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_path.call(this, filesystem, pval)
  end
  def get_data_size(this : IFsiFileItem2*, pval : Int64*) : HRESULT
    @lpVtbl.value.get_data_size.call(this, pval)
  end
  def get_data_size32_bit_low(this : IFsiFileItem2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_data_size32_bit_low.call(this, pval)
  end
  def get_data_size32_bit_high(this : IFsiFileItem2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_data_size32_bit_high.call(this, pval)
  end
  def get_data(this : IFsiFileItem2*, pval : IStream*) : HRESULT
    @lpVtbl.value.get_data.call(this, pval)
  end
  def put_data(this : IFsiFileItem2*, newval : IStream) : HRESULT
    @lpVtbl.value.put_data.call(this, newval)
  end
  def get_fsi_named_streams(this : IFsiFileItem2*, streams : IFsiNamedStreams*) : HRESULT
    @lpVtbl.value.get_fsi_named_streams.call(this, streams)
  end
  def get_is_named_stream(this : IFsiFileItem2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_named_stream.call(this, pval)
  end
  def add_stream(this : IFsiFileItem2*, name : UInt8*, streamdata : IStream) : HRESULT
    @lpVtbl.value.add_stream.call(this, name, streamdata)
  end
  def remove_stream(this : IFsiFileItem2*, name : UInt8*) : HRESULT
    @lpVtbl.value.remove_stream.call(this, name)
  end
  def get_is_real_time(this : IFsiFileItem2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_real_time.call(this, pval)
  end
  def put_is_real_time(this : IFsiFileItem2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_real_time.call(this, newval)
  end
end
struct LibWin32::IFsiNamedStreams
  def query_interface(this : IFsiNamedStreams*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiNamedStreams*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiNamedStreams*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiNamedStreams*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiNamedStreams*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiNamedStreams*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiNamedStreams*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get__new_enum(this : IFsiNamedStreams*, newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, newenum)
  end
  def get_item(this : IFsiNamedStreams*, index : Int32, item : IFsiFileItem2*) : HRESULT
    @lpVtbl.value.get_item.call(this, index, item)
  end
  def get_count(this : IFsiNamedStreams*, count : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, count)
  end
  def get_enum_named_streams(this : IFsiNamedStreams*, newenum : IEnumFsiItems*) : HRESULT
    @lpVtbl.value.get_enum_named_streams.call(this, newenum)
  end
end
struct LibWin32::IFsiDirectoryItem
  def query_interface(this : IFsiDirectoryItem*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiDirectoryItem*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiDirectoryItem*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiDirectoryItem*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiDirectoryItem*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiDirectoryItem*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiDirectoryItem*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IFsiDirectoryItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pval)
  end
  def get_full_path(this : IFsiDirectoryItem*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_path.call(this, pval)
  end
  def get_creation_time(this : IFsiDirectoryItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_creation_time.call(this, pval)
  end
  def put_creation_time(this : IFsiDirectoryItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_creation_time.call(this, newval)
  end
  def get_last_accessed_time(this : IFsiDirectoryItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_accessed_time.call(this, pval)
  end
  def put_last_accessed_time(this : IFsiDirectoryItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_accessed_time.call(this, newval)
  end
  def get_last_modified_time(this : IFsiDirectoryItem*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_modified_time.call(this, pval)
  end
  def put_last_modified_time(this : IFsiDirectoryItem*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_modified_time.call(this, newval)
  end
  def get_is_hidden(this : IFsiDirectoryItem*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_hidden.call(this, pval)
  end
  def put_is_hidden(this : IFsiDirectoryItem*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_hidden.call(this, newval)
  end
  def file_system_name(this : IFsiDirectoryItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_name.call(this, filesystem, pval)
  end
  def file_system_path(this : IFsiDirectoryItem*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_path.call(this, filesystem, pval)
  end
  def get__new_enum(this : IFsiDirectoryItem*, newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, newenum)
  end
  def get_item(this : IFsiDirectoryItem*, path : UInt8*, item : IFsiItem*) : HRESULT
    @lpVtbl.value.get_item.call(this, path, item)
  end
  def get_count(this : IFsiDirectoryItem*, count : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, count)
  end
  def get_enum_fsi_items(this : IFsiDirectoryItem*, newenum : IEnumFsiItems*) : HRESULT
    @lpVtbl.value.get_enum_fsi_items.call(this, newenum)
  end
  def add_directory(this : IFsiDirectoryItem*, path : UInt8*) : HRESULT
    @lpVtbl.value.add_directory.call(this, path)
  end
  def add_file(this : IFsiDirectoryItem*, path : UInt8*, filedata : IStream) : HRESULT
    @lpVtbl.value.add_file.call(this, path, filedata)
  end
  def add_tree(this : IFsiDirectoryItem*, sourcedirectory : UInt8*, includebasedirectory : Int16) : HRESULT
    @lpVtbl.value.add_tree.call(this, sourcedirectory, includebasedirectory)
  end
  def add(this : IFsiDirectoryItem*, item : IFsiItem) : HRESULT
    @lpVtbl.value.add.call(this, item)
  end
  def remove(this : IFsiDirectoryItem*, path : UInt8*) : HRESULT
    @lpVtbl.value.remove.call(this, path)
  end
  def remove_tree(this : IFsiDirectoryItem*, path : UInt8*) : HRESULT
    @lpVtbl.value.remove_tree.call(this, path)
  end
end
struct LibWin32::IFsiDirectoryItem2
  def query_interface(this : IFsiDirectoryItem2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFsiDirectoryItem2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFsiDirectoryItem2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFsiDirectoryItem2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFsiDirectoryItem2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFsiDirectoryItem2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFsiDirectoryItem2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_name(this : IFsiDirectoryItem2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_name.call(this, pval)
  end
  def get_full_path(this : IFsiDirectoryItem2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_full_path.call(this, pval)
  end
  def get_creation_time(this : IFsiDirectoryItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_creation_time.call(this, pval)
  end
  def put_creation_time(this : IFsiDirectoryItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_creation_time.call(this, newval)
  end
  def get_last_accessed_time(this : IFsiDirectoryItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_accessed_time.call(this, pval)
  end
  def put_last_accessed_time(this : IFsiDirectoryItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_accessed_time.call(this, newval)
  end
  def get_last_modified_time(this : IFsiDirectoryItem2*, pval : Float64*) : HRESULT
    @lpVtbl.value.get_last_modified_time.call(this, pval)
  end
  def put_last_modified_time(this : IFsiDirectoryItem2*, newval : Float64) : HRESULT
    @lpVtbl.value.put_last_modified_time.call(this, newval)
  end
  def get_is_hidden(this : IFsiDirectoryItem2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_is_hidden.call(this, pval)
  end
  def put_is_hidden(this : IFsiDirectoryItem2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_is_hidden.call(this, newval)
  end
  def file_system_name(this : IFsiDirectoryItem2*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_name.call(this, filesystem, pval)
  end
  def file_system_path(this : IFsiDirectoryItem2*, filesystem : FsiFileSystems, pval : UInt8**) : HRESULT
    @lpVtbl.value.file_system_path.call(this, filesystem, pval)
  end
  def get__new_enum(this : IFsiDirectoryItem2*, newenum : IEnumVARIANT*) : HRESULT
    @lpVtbl.value.get__new_enum.call(this, newenum)
  end
  def get_item(this : IFsiDirectoryItem2*, path : UInt8*, item : IFsiItem*) : HRESULT
    @lpVtbl.value.get_item.call(this, path, item)
  end
  def get_count(this : IFsiDirectoryItem2*, count : Int32*) : HRESULT
    @lpVtbl.value.get_count.call(this, count)
  end
  def get_enum_fsi_items(this : IFsiDirectoryItem2*, newenum : IEnumFsiItems*) : HRESULT
    @lpVtbl.value.get_enum_fsi_items.call(this, newenum)
  end
  def add_directory(this : IFsiDirectoryItem2*, path : UInt8*) : HRESULT
    @lpVtbl.value.add_directory.call(this, path)
  end
  def add_file(this : IFsiDirectoryItem2*, path : UInt8*, filedata : IStream) : HRESULT
    @lpVtbl.value.add_file.call(this, path, filedata)
  end
  def add_tree(this : IFsiDirectoryItem2*, sourcedirectory : UInt8*, includebasedirectory : Int16) : HRESULT
    @lpVtbl.value.add_tree.call(this, sourcedirectory, includebasedirectory)
  end
  def add(this : IFsiDirectoryItem2*, item : IFsiItem) : HRESULT
    @lpVtbl.value.add.call(this, item)
  end
  def remove(this : IFsiDirectoryItem2*, path : UInt8*) : HRESULT
    @lpVtbl.value.remove.call(this, path)
  end
  def remove_tree(this : IFsiDirectoryItem2*, path : UInt8*) : HRESULT
    @lpVtbl.value.remove_tree.call(this, path)
  end
  def add_tree_with_named_streams(this : IFsiDirectoryItem2*, sourcedirectory : UInt8*, includebasedirectory : Int16) : HRESULT
    @lpVtbl.value.add_tree_with_named_streams.call(this, sourcedirectory, includebasedirectory)
  end
end
struct LibWin32::IFileSystemImage
  def query_interface(this : IFileSystemImage*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileSystemImage*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileSystemImage*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFileSystemImage*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFileSystemImage*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFileSystemImage*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFileSystemImage*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root(this : IFileSystemImage*, pval : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.get_root.call(this, pval)
  end
  def get_session_start_block(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_session_start_block.call(this, pval)
  end
  def put_session_start_block(this : IFileSystemImage*, newval : Int32) : HRESULT
    @lpVtbl.value.put_session_start_block.call(this, newval)
  end
  def get_free_media_blocks(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_free_media_blocks.call(this, pval)
  end
  def put_free_media_blocks(this : IFileSystemImage*, newval : Int32) : HRESULT
    @lpVtbl.value.put_free_media_blocks.call(this, newval)
  end
  def set_max_media_blocks_from_device(this : IFileSystemImage*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.set_max_media_blocks_from_device.call(this, discrecorder)
  end
  def get_used_blocks(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_used_blocks.call(this, pval)
  end
  def get_volume_name(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name.call(this, pval)
  end
  def put_volume_name(this : IFileSystemImage*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_volume_name.call(this, newval)
  end
  def get_imported_volume_name(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_imported_volume_name.call(this, pval)
  end
  def get_boot_image_options(this : IFileSystemImage*, pval : IBootOptions*) : HRESULT
    @lpVtbl.value.get_boot_image_options.call(this, pval)
  end
  def put_boot_image_options(this : IFileSystemImage*, newval : IBootOptions) : HRESULT
    @lpVtbl.value.put_boot_image_options.call(this, newval)
  end
  def get_file_count(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_file_count.call(this, pval)
  end
  def get_directory_count(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_directory_count.call(this, pval)
  end
  def get_working_directory(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_working_directory.call(this, pval)
  end
  def put_working_directory(this : IFileSystemImage*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_working_directory.call(this, newval)
  end
  def get_change_point(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_change_point.call(this, pval)
  end
  def get_strict_file_system_compliance(this : IFileSystemImage*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_strict_file_system_compliance.call(this, pval)
  end
  def put_strict_file_system_compliance(this : IFileSystemImage*, newval : Int16) : HRESULT
    @lpVtbl.value.put_strict_file_system_compliance.call(this, newval)
  end
  def get_use_restricted_character_set(this : IFileSystemImage*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_use_restricted_character_set.call(this, pval)
  end
  def put_use_restricted_character_set(this : IFileSystemImage*, newval : Int16) : HRESULT
    @lpVtbl.value.put_use_restricted_character_set.call(this, newval)
  end
  def get_file_systems_to_create(this : IFileSystemImage*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_to_create.call(this, pval)
  end
  def put_file_systems_to_create(this : IFileSystemImage*, newval : FsiFileSystems) : HRESULT
    @lpVtbl.value.put_file_systems_to_create.call(this, newval)
  end
  def get_file_systems_supported(this : IFileSystemImage*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_supported.call(this, pval)
  end
  def put_udf_revision(this : IFileSystemImage*, newval : Int32) : HRESULT
    @lpVtbl.value.put_udf_revision.call(this, newval)
  end
  def get_udf_revision(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_udf_revision.call(this, pval)
  end
  def get_udf_revisions_supported(this : IFileSystemImage*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_udf_revisions_supported.call(this, pval)
  end
  def choose_image_defaults(this : IFileSystemImage*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.choose_image_defaults.call(this, discrecorder)
  end
  def choose_image_defaults_for_media_type(this : IFileSystemImage*, value : IMAPI_MEDIA_PHYSICAL_TYPE) : HRESULT
    @lpVtbl.value.choose_image_defaults_for_media_type.call(this, value)
  end
  def put_iso9660_interchange_level(this : IFileSystemImage*, newval : Int32) : HRESULT
    @lpVtbl.value.put_iso9660_interchange_level.call(this, newval)
  end
  def get_iso9660_interchange_level(this : IFileSystemImage*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_level.call(this, pval)
  end
  def get_iso9660_interchange_levels_supported(this : IFileSystemImage*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_levels_supported.call(this, pval)
  end
  def create_result_image(this : IFileSystemImage*, resultstream : IFileSystemImageResult*) : HRESULT
    @lpVtbl.value.create_result_image.call(this, resultstream)
  end
  def exists(this : IFileSystemImage*, fullpath : UInt8*, itemtype : FsiItemType*) : HRESULT
    @lpVtbl.value.exists.call(this, fullpath, itemtype)
  end
  def calculate_disc_identifier(this : IFileSystemImage*, discidentifier : UInt8**) : HRESULT
    @lpVtbl.value.calculate_disc_identifier.call(this, discidentifier)
  end
  def identify_file_systems_on_disc(this : IFileSystemImage*, discrecorder : IDiscRecorder2, filesystems : FsiFileSystems*) : HRESULT
    @lpVtbl.value.identify_file_systems_on_disc.call(this, discrecorder, filesystems)
  end
  def get_default_file_system_for_import(this : IFileSystemImage*, filesystems : FsiFileSystems, importdefault : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_default_file_system_for_import.call(this, filesystems, importdefault)
  end
  def import_file_system(this : IFileSystemImage*, importedfilesystem : FsiFileSystems*) : HRESULT
    @lpVtbl.value.import_file_system.call(this, importedfilesystem)
  end
  def import_specific_file_system(this : IFileSystemImage*, filesystemtouse : FsiFileSystems) : HRESULT
    @lpVtbl.value.import_specific_file_system.call(this, filesystemtouse)
  end
  def rollback_to_change_point(this : IFileSystemImage*, changepoint : Int32) : HRESULT
    @lpVtbl.value.rollback_to_change_point.call(this, changepoint)
  end
  def lock_in_change_point(this : IFileSystemImage*) : HRESULT
    @lpVtbl.value.lock_in_change_point.call(this)
  end
  def create_directory_item(this : IFileSystemImage*, name : UInt8*, newitem : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.create_directory_item.call(this, name, newitem)
  end
  def create_file_item(this : IFileSystemImage*, name : UInt8*, newitem : IFsiFileItem*) : HRESULT
    @lpVtbl.value.create_file_item.call(this, name, newitem)
  end
  def get_volume_name_udf(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_udf.call(this, pval)
  end
  def get_volume_name_joliet(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_joliet.call(this, pval)
  end
  def get_volume_name_iso9660(this : IFileSystemImage*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_iso9660.call(this, pval)
  end
  def get_stage_files(this : IFileSystemImage*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_stage_files.call(this, pval)
  end
  def put_stage_files(this : IFileSystemImage*, newval : Int16) : HRESULT
    @lpVtbl.value.put_stage_files.call(this, newval)
  end
  def get_multisession_interfaces(this : IFileSystemImage*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_multisession_interfaces.call(this, pval)
  end
  def put_multisession_interfaces(this : IFileSystemImage*, newval : SAFEARRAY*) : HRESULT
    @lpVtbl.value.put_multisession_interfaces.call(this, newval)
  end
end
struct LibWin32::IFileSystemImage2
  def query_interface(this : IFileSystemImage2*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileSystemImage2*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileSystemImage2*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFileSystemImage2*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFileSystemImage2*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFileSystemImage2*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFileSystemImage2*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root(this : IFileSystemImage2*, pval : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.get_root.call(this, pval)
  end
  def get_session_start_block(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_session_start_block.call(this, pval)
  end
  def put_session_start_block(this : IFileSystemImage2*, newval : Int32) : HRESULT
    @lpVtbl.value.put_session_start_block.call(this, newval)
  end
  def get_free_media_blocks(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_free_media_blocks.call(this, pval)
  end
  def put_free_media_blocks(this : IFileSystemImage2*, newval : Int32) : HRESULT
    @lpVtbl.value.put_free_media_blocks.call(this, newval)
  end
  def set_max_media_blocks_from_device(this : IFileSystemImage2*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.set_max_media_blocks_from_device.call(this, discrecorder)
  end
  def get_used_blocks(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_used_blocks.call(this, pval)
  end
  def get_volume_name(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name.call(this, pval)
  end
  def put_volume_name(this : IFileSystemImage2*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_volume_name.call(this, newval)
  end
  def get_imported_volume_name(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_imported_volume_name.call(this, pval)
  end
  def get_boot_image_options(this : IFileSystemImage2*, pval : IBootOptions*) : HRESULT
    @lpVtbl.value.get_boot_image_options.call(this, pval)
  end
  def put_boot_image_options(this : IFileSystemImage2*, newval : IBootOptions) : HRESULT
    @lpVtbl.value.put_boot_image_options.call(this, newval)
  end
  def get_file_count(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_file_count.call(this, pval)
  end
  def get_directory_count(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_directory_count.call(this, pval)
  end
  def get_working_directory(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_working_directory.call(this, pval)
  end
  def put_working_directory(this : IFileSystemImage2*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_working_directory.call(this, newval)
  end
  def get_change_point(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_change_point.call(this, pval)
  end
  def get_strict_file_system_compliance(this : IFileSystemImage2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_strict_file_system_compliance.call(this, pval)
  end
  def put_strict_file_system_compliance(this : IFileSystemImage2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_strict_file_system_compliance.call(this, newval)
  end
  def get_use_restricted_character_set(this : IFileSystemImage2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_use_restricted_character_set.call(this, pval)
  end
  def put_use_restricted_character_set(this : IFileSystemImage2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_use_restricted_character_set.call(this, newval)
  end
  def get_file_systems_to_create(this : IFileSystemImage2*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_to_create.call(this, pval)
  end
  def put_file_systems_to_create(this : IFileSystemImage2*, newval : FsiFileSystems) : HRESULT
    @lpVtbl.value.put_file_systems_to_create.call(this, newval)
  end
  def get_file_systems_supported(this : IFileSystemImage2*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_supported.call(this, pval)
  end
  def put_udf_revision(this : IFileSystemImage2*, newval : Int32) : HRESULT
    @lpVtbl.value.put_udf_revision.call(this, newval)
  end
  def get_udf_revision(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_udf_revision.call(this, pval)
  end
  def get_udf_revisions_supported(this : IFileSystemImage2*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_udf_revisions_supported.call(this, pval)
  end
  def choose_image_defaults(this : IFileSystemImage2*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.choose_image_defaults.call(this, discrecorder)
  end
  def choose_image_defaults_for_media_type(this : IFileSystemImage2*, value : IMAPI_MEDIA_PHYSICAL_TYPE) : HRESULT
    @lpVtbl.value.choose_image_defaults_for_media_type.call(this, value)
  end
  def put_iso9660_interchange_level(this : IFileSystemImage2*, newval : Int32) : HRESULT
    @lpVtbl.value.put_iso9660_interchange_level.call(this, newval)
  end
  def get_iso9660_interchange_level(this : IFileSystemImage2*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_level.call(this, pval)
  end
  def get_iso9660_interchange_levels_supported(this : IFileSystemImage2*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_levels_supported.call(this, pval)
  end
  def create_result_image(this : IFileSystemImage2*, resultstream : IFileSystemImageResult*) : HRESULT
    @lpVtbl.value.create_result_image.call(this, resultstream)
  end
  def exists(this : IFileSystemImage2*, fullpath : UInt8*, itemtype : FsiItemType*) : HRESULT
    @lpVtbl.value.exists.call(this, fullpath, itemtype)
  end
  def calculate_disc_identifier(this : IFileSystemImage2*, discidentifier : UInt8**) : HRESULT
    @lpVtbl.value.calculate_disc_identifier.call(this, discidentifier)
  end
  def identify_file_systems_on_disc(this : IFileSystemImage2*, discrecorder : IDiscRecorder2, filesystems : FsiFileSystems*) : HRESULT
    @lpVtbl.value.identify_file_systems_on_disc.call(this, discrecorder, filesystems)
  end
  def get_default_file_system_for_import(this : IFileSystemImage2*, filesystems : FsiFileSystems, importdefault : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_default_file_system_for_import.call(this, filesystems, importdefault)
  end
  def import_file_system(this : IFileSystemImage2*, importedfilesystem : FsiFileSystems*) : HRESULT
    @lpVtbl.value.import_file_system.call(this, importedfilesystem)
  end
  def import_specific_file_system(this : IFileSystemImage2*, filesystemtouse : FsiFileSystems) : HRESULT
    @lpVtbl.value.import_specific_file_system.call(this, filesystemtouse)
  end
  def rollback_to_change_point(this : IFileSystemImage2*, changepoint : Int32) : HRESULT
    @lpVtbl.value.rollback_to_change_point.call(this, changepoint)
  end
  def lock_in_change_point(this : IFileSystemImage2*) : HRESULT
    @lpVtbl.value.lock_in_change_point.call(this)
  end
  def create_directory_item(this : IFileSystemImage2*, name : UInt8*, newitem : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.create_directory_item.call(this, name, newitem)
  end
  def create_file_item(this : IFileSystemImage2*, name : UInt8*, newitem : IFsiFileItem*) : HRESULT
    @lpVtbl.value.create_file_item.call(this, name, newitem)
  end
  def get_volume_name_udf(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_udf.call(this, pval)
  end
  def get_volume_name_joliet(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_joliet.call(this, pval)
  end
  def get_volume_name_iso9660(this : IFileSystemImage2*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_iso9660.call(this, pval)
  end
  def get_stage_files(this : IFileSystemImage2*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_stage_files.call(this, pval)
  end
  def put_stage_files(this : IFileSystemImage2*, newval : Int16) : HRESULT
    @lpVtbl.value.put_stage_files.call(this, newval)
  end
  def get_multisession_interfaces(this : IFileSystemImage2*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_multisession_interfaces.call(this, pval)
  end
  def put_multisession_interfaces(this : IFileSystemImage2*, newval : SAFEARRAY*) : HRESULT
    @lpVtbl.value.put_multisession_interfaces.call(this, newval)
  end
  def get_boot_image_options_array(this : IFileSystemImage2*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_boot_image_options_array.call(this, pval)
  end
  def put_boot_image_options_array(this : IFileSystemImage2*, newval : SAFEARRAY*) : HRESULT
    @lpVtbl.value.put_boot_image_options_array.call(this, newval)
  end
end
struct LibWin32::IFileSystemImage3
  def query_interface(this : IFileSystemImage3*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IFileSystemImage3*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IFileSystemImage3*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IFileSystemImage3*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IFileSystemImage3*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IFileSystemImage3*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IFileSystemImage3*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_root(this : IFileSystemImage3*, pval : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.get_root.call(this, pval)
  end
  def get_session_start_block(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_session_start_block.call(this, pval)
  end
  def put_session_start_block(this : IFileSystemImage3*, newval : Int32) : HRESULT
    @lpVtbl.value.put_session_start_block.call(this, newval)
  end
  def get_free_media_blocks(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_free_media_blocks.call(this, pval)
  end
  def put_free_media_blocks(this : IFileSystemImage3*, newval : Int32) : HRESULT
    @lpVtbl.value.put_free_media_blocks.call(this, newval)
  end
  def set_max_media_blocks_from_device(this : IFileSystemImage3*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.set_max_media_blocks_from_device.call(this, discrecorder)
  end
  def get_used_blocks(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_used_blocks.call(this, pval)
  end
  def get_volume_name(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name.call(this, pval)
  end
  def put_volume_name(this : IFileSystemImage3*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_volume_name.call(this, newval)
  end
  def get_imported_volume_name(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_imported_volume_name.call(this, pval)
  end
  def get_boot_image_options(this : IFileSystemImage3*, pval : IBootOptions*) : HRESULT
    @lpVtbl.value.get_boot_image_options.call(this, pval)
  end
  def put_boot_image_options(this : IFileSystemImage3*, newval : IBootOptions) : HRESULT
    @lpVtbl.value.put_boot_image_options.call(this, newval)
  end
  def get_file_count(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_file_count.call(this, pval)
  end
  def get_directory_count(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_directory_count.call(this, pval)
  end
  def get_working_directory(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_working_directory.call(this, pval)
  end
  def put_working_directory(this : IFileSystemImage3*, newval : UInt8*) : HRESULT
    @lpVtbl.value.put_working_directory.call(this, newval)
  end
  def get_change_point(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_change_point.call(this, pval)
  end
  def get_strict_file_system_compliance(this : IFileSystemImage3*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_strict_file_system_compliance.call(this, pval)
  end
  def put_strict_file_system_compliance(this : IFileSystemImage3*, newval : Int16) : HRESULT
    @lpVtbl.value.put_strict_file_system_compliance.call(this, newval)
  end
  def get_use_restricted_character_set(this : IFileSystemImage3*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_use_restricted_character_set.call(this, pval)
  end
  def put_use_restricted_character_set(this : IFileSystemImage3*, newval : Int16) : HRESULT
    @lpVtbl.value.put_use_restricted_character_set.call(this, newval)
  end
  def get_file_systems_to_create(this : IFileSystemImage3*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_to_create.call(this, pval)
  end
  def put_file_systems_to_create(this : IFileSystemImage3*, newval : FsiFileSystems) : HRESULT
    @lpVtbl.value.put_file_systems_to_create.call(this, newval)
  end
  def get_file_systems_supported(this : IFileSystemImage3*, pval : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_file_systems_supported.call(this, pval)
  end
  def put_udf_revision(this : IFileSystemImage3*, newval : Int32) : HRESULT
    @lpVtbl.value.put_udf_revision.call(this, newval)
  end
  def get_udf_revision(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_udf_revision.call(this, pval)
  end
  def get_udf_revisions_supported(this : IFileSystemImage3*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_udf_revisions_supported.call(this, pval)
  end
  def choose_image_defaults(this : IFileSystemImage3*, discrecorder : IDiscRecorder2) : HRESULT
    @lpVtbl.value.choose_image_defaults.call(this, discrecorder)
  end
  def choose_image_defaults_for_media_type(this : IFileSystemImage3*, value : IMAPI_MEDIA_PHYSICAL_TYPE) : HRESULT
    @lpVtbl.value.choose_image_defaults_for_media_type.call(this, value)
  end
  def put_iso9660_interchange_level(this : IFileSystemImage3*, newval : Int32) : HRESULT
    @lpVtbl.value.put_iso9660_interchange_level.call(this, newval)
  end
  def get_iso9660_interchange_level(this : IFileSystemImage3*, pval : Int32*) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_level.call(this, pval)
  end
  def get_iso9660_interchange_levels_supported(this : IFileSystemImage3*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_iso9660_interchange_levels_supported.call(this, pval)
  end
  def create_result_image(this : IFileSystemImage3*, resultstream : IFileSystemImageResult*) : HRESULT
    @lpVtbl.value.create_result_image.call(this, resultstream)
  end
  def exists(this : IFileSystemImage3*, fullpath : UInt8*, itemtype : FsiItemType*) : HRESULT
    @lpVtbl.value.exists.call(this, fullpath, itemtype)
  end
  def calculate_disc_identifier(this : IFileSystemImage3*, discidentifier : UInt8**) : HRESULT
    @lpVtbl.value.calculate_disc_identifier.call(this, discidentifier)
  end
  def identify_file_systems_on_disc(this : IFileSystemImage3*, discrecorder : IDiscRecorder2, filesystems : FsiFileSystems*) : HRESULT
    @lpVtbl.value.identify_file_systems_on_disc.call(this, discrecorder, filesystems)
  end
  def get_default_file_system_for_import(this : IFileSystemImage3*, filesystems : FsiFileSystems, importdefault : FsiFileSystems*) : HRESULT
    @lpVtbl.value.get_default_file_system_for_import.call(this, filesystems, importdefault)
  end
  def import_file_system(this : IFileSystemImage3*, importedfilesystem : FsiFileSystems*) : HRESULT
    @lpVtbl.value.import_file_system.call(this, importedfilesystem)
  end
  def import_specific_file_system(this : IFileSystemImage3*, filesystemtouse : FsiFileSystems) : HRESULT
    @lpVtbl.value.import_specific_file_system.call(this, filesystemtouse)
  end
  def rollback_to_change_point(this : IFileSystemImage3*, changepoint : Int32) : HRESULT
    @lpVtbl.value.rollback_to_change_point.call(this, changepoint)
  end
  def lock_in_change_point(this : IFileSystemImage3*) : HRESULT
    @lpVtbl.value.lock_in_change_point.call(this)
  end
  def create_directory_item(this : IFileSystemImage3*, name : UInt8*, newitem : IFsiDirectoryItem*) : HRESULT
    @lpVtbl.value.create_directory_item.call(this, name, newitem)
  end
  def create_file_item(this : IFileSystemImage3*, name : UInt8*, newitem : IFsiFileItem*) : HRESULT
    @lpVtbl.value.create_file_item.call(this, name, newitem)
  end
  def get_volume_name_udf(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_udf.call(this, pval)
  end
  def get_volume_name_joliet(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_joliet.call(this, pval)
  end
  def get_volume_name_iso9660(this : IFileSystemImage3*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_volume_name_iso9660.call(this, pval)
  end
  def get_stage_files(this : IFileSystemImage3*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_stage_files.call(this, pval)
  end
  def put_stage_files(this : IFileSystemImage3*, newval : Int16) : HRESULT
    @lpVtbl.value.put_stage_files.call(this, newval)
  end
  def get_multisession_interfaces(this : IFileSystemImage3*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_multisession_interfaces.call(this, pval)
  end
  def put_multisession_interfaces(this : IFileSystemImage3*, newval : SAFEARRAY*) : HRESULT
    @lpVtbl.value.put_multisession_interfaces.call(this, newval)
  end
  def get_boot_image_options_array(this : IFileSystemImage3*, pval : SAFEARRAY**) : HRESULT
    @lpVtbl.value.get_boot_image_options_array.call(this, pval)
  end
  def put_boot_image_options_array(this : IFileSystemImage3*, newval : SAFEARRAY*) : HRESULT
    @lpVtbl.value.put_boot_image_options_array.call(this, newval)
  end
  def get_create_redundant_udf_metadata_files(this : IFileSystemImage3*, pval : Int16*) : HRESULT
    @lpVtbl.value.get_create_redundant_udf_metadata_files.call(this, pval)
  end
  def put_create_redundant_udf_metadata_files(this : IFileSystemImage3*, newval : Int16) : HRESULT
    @lpVtbl.value.put_create_redundant_udf_metadata_files.call(this, newval)
  end
  def probe_specific_file_system(this : IFileSystemImage3*, filesystemtoprobe : FsiFileSystems, isappendable : Int16*) : HRESULT
    @lpVtbl.value.probe_specific_file_system.call(this, filesystemtoprobe, isappendable)
  end
end
struct LibWin32::DFileSystemImageEvents
  def query_interface(this : DFileSystemImageEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DFileSystemImageEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DFileSystemImageEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DFileSystemImageEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DFileSystemImageEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DFileSystemImageEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DFileSystemImageEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update(this : DFileSystemImageEvents*, object : IDispatch, currentfile : UInt8*, copiedsectors : Int32, totalsectors : Int32) : HRESULT
    @lpVtbl.value.update.call(this, object, currentfile, copiedsectors, totalsectors)
  end
end
struct LibWin32::DFileSystemImageImportEvents
  def query_interface(this : DFileSystemImageImportEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : DFileSystemImageImportEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : DFileSystemImageImportEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : DFileSystemImageImportEvents*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : DFileSystemImageImportEvents*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : DFileSystemImageImportEvents*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : DFileSystemImageImportEvents*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def update_import(this : DFileSystemImageImportEvents*, object : IDispatch, filesystem : FsiFileSystems, currentitem : UInt8*, importeddirectoryitems : Int32, totaldirectoryitems : Int32, importedfileitems : Int32, totalfileitems : Int32) : HRESULT
    @lpVtbl.value.update_import.call(this, object, filesystem, currentitem, importeddirectoryitems, totaldirectoryitems, importedfileitems, totalfileitems)
  end
end
struct LibWin32::IIsoImageManager
  def query_interface(this : IIsoImageManager*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IIsoImageManager*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IIsoImageManager*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_type_info_count(this : IIsoImageManager*, pctinfo : UInt32*) : HRESULT
    @lpVtbl.value.get_type_info_count.call(this, pctinfo)
  end
  def get_type_info(this : IIsoImageManager*, itinfo : UInt32, lcid : UInt32, pptinfo : ITypeInfo*) : HRESULT
    @lpVtbl.value.get_type_info.call(this, itinfo, lcid, pptinfo)
  end
  def get_i_ds_of_names(this : IIsoImageManager*, riid : Guid*, rgsznames : LibC::LPWSTR*, cnames : UInt32, lcid : UInt32, rgdispid : Int32*) : HRESULT
    @lpVtbl.value.get_i_ds_of_names.call(this, riid, rgsznames, cnames, lcid, rgdispid)
  end
  def invoke(this : IIsoImageManager*, dispidmember : Int32, riid : Guid*, lcid : UInt32, wflags : UInt16, pdispparams : DISPPARAMS*, pvarresult : VARIANT*, pexcepinfo : EXCEPINFO*, puargerr : UInt32*) : HRESULT
    @lpVtbl.value.invoke.call(this, dispidmember, riid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr)
  end
  def get_path(this : IIsoImageManager*, pval : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, pval)
  end
  def get_stream(this : IIsoImageManager*, data : IStream*) : HRESULT
    @lpVtbl.value.get_stream.call(this, data)
  end
  def set_path(this : IIsoImageManager*, val : UInt8*) : HRESULT
    @lpVtbl.value.set_path.call(this, val)
  end
  def set_stream(this : IIsoImageManager*, data : IStream) : HRESULT
    @lpVtbl.value.set_stream.call(this, data)
  end
  def validate(this : IIsoImageManager*) : HRESULT
    @lpVtbl.value.validate.call(this)
  end
end
struct LibWin32::IDiscRecorder
  def query_interface(this : IDiscRecorder*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscRecorder*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscRecorder*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def init(this : IDiscRecorder*, pbyuniqueid : UInt8*, nulidsize : UInt32, nuldrivenumber : UInt32) : HRESULT
    @lpVtbl.value.init.call(this, pbyuniqueid, nulidsize, nuldrivenumber)
  end
  def get_recorder_guid(this : IDiscRecorder*, pbyuniqueid : UInt8*, ulbuffersize : UInt32, pulreturnsizerequired : UInt32*) : HRESULT
    @lpVtbl.value.get_recorder_guid.call(this, pbyuniqueid, ulbuffersize, pulreturnsizerequired)
  end
  def get_recorder_type(this : IDiscRecorder*, ftypecode : RECORDER_TYPES*) : HRESULT
    @lpVtbl.value.get_recorder_type.call(this, ftypecode)
  end
  def get_display_names(this : IDiscRecorder*, pbstrvendorid : UInt8**, pbstrproductid : UInt8**, pbstrrevision : UInt8**) : HRESULT
    @lpVtbl.value.get_display_names.call(this, pbstrvendorid, pbstrproductid, pbstrrevision)
  end
  def get_base_pn_pid(this : IDiscRecorder*, pbstrbasepnpid : UInt8**) : HRESULT
    @lpVtbl.value.get_base_pn_pid.call(this, pbstrbasepnpid)
  end
  def get_path(this : IDiscRecorder*, pbstrpath : UInt8**) : HRESULT
    @lpVtbl.value.get_path.call(this, pbstrpath)
  end
  def get_recorder_properties(this : IDiscRecorder*, pppropstg : IPropertyStorage*) : HRESULT
    @lpVtbl.value.get_recorder_properties.call(this, pppropstg)
  end
  def set_recorder_properties(this : IDiscRecorder*, ppropstg : IPropertyStorage) : HRESULT
    @lpVtbl.value.set_recorder_properties.call(this, ppropstg)
  end
  def get_recorder_state(this : IDiscRecorder*, puldevstateflags : DISC_RECORDER_STATE_FLAGS*) : HRESULT
    @lpVtbl.value.get_recorder_state.call(this, puldevstateflags)
  end
  def open_exclusive(this : IDiscRecorder*) : HRESULT
    @lpVtbl.value.open_exclusive.call(this)
  end
  def query_media_type(this : IDiscRecorder*, fmediatype : MEDIA_TYPES*, fmediaflags : MEDIA_FLAGS*) : HRESULT
    @lpVtbl.value.query_media_type.call(this, fmediatype, fmediaflags)
  end
  def query_media_info(this : IDiscRecorder*, pbsessions : UInt8*, pblasttrack : UInt8*, ulstartaddress : UInt32*, ulnextwritable : UInt32*, ulfreeblocks : UInt32*) : HRESULT
    @lpVtbl.value.query_media_info.call(this, pbsessions, pblasttrack, ulstartaddress, ulnextwritable, ulfreeblocks)
  end
  def eject(this : IDiscRecorder*) : HRESULT
    @lpVtbl.value.eject.call(this)
  end
  def erase(this : IDiscRecorder*, bfullerase : UInt8) : HRESULT
    @lpVtbl.value.erase.call(this, bfullerase)
  end
  def close(this : IDiscRecorder*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
struct LibWin32::IEnumDiscRecorders
  def query_interface(this : IEnumDiscRecorders*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDiscRecorders*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDiscRecorders*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDiscRecorders*, crecorders : UInt32, pprecorder : IDiscRecorder*, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, crecorders, pprecorder, pcfetched)
  end
  def skip(this : IEnumDiscRecorders*, crecorders : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, crecorders)
  end
  def reset(this : IEnumDiscRecorders*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDiscRecorders*, ppenum : IEnumDiscRecorders*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IEnumDiscMasterFormats
  def query_interface(this : IEnumDiscMasterFormats*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IEnumDiscMasterFormats*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IEnumDiscMasterFormats*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def next(this : IEnumDiscMasterFormats*, cformats : UInt32, lpiidformatid : Guid*, pcfetched : UInt32*) : HRESULT
    @lpVtbl.value.next.call(this, cformats, lpiidformatid, pcfetched)
  end
  def skip(this : IEnumDiscMasterFormats*, cformats : UInt32) : HRESULT
    @lpVtbl.value.skip.call(this, cformats)
  end
  def reset(this : IEnumDiscMasterFormats*) : HRESULT
    @lpVtbl.value.reset.call(this)
  end
  def clone(this : IEnumDiscMasterFormats*, ppenum : IEnumDiscMasterFormats*) : HRESULT
    @lpVtbl.value.clone.call(this, ppenum)
  end
end
struct LibWin32::IRedbookDiscMaster
  def query_interface(this : IRedbookDiscMaster*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IRedbookDiscMaster*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IRedbookDiscMaster*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_total_audio_tracks(this : IRedbookDiscMaster*, pntracks : Int32*) : HRESULT
    @lpVtbl.value.get_total_audio_tracks.call(this, pntracks)
  end
  def get_total_audio_blocks(this : IRedbookDiscMaster*, pnblocks : Int32*) : HRESULT
    @lpVtbl.value.get_total_audio_blocks.call(this, pnblocks)
  end
  def get_used_audio_blocks(this : IRedbookDiscMaster*, pnblocks : Int32*) : HRESULT
    @lpVtbl.value.get_used_audio_blocks.call(this, pnblocks)
  end
  def get_available_audio_track_blocks(this : IRedbookDiscMaster*, pnblocks : Int32*) : HRESULT
    @lpVtbl.value.get_available_audio_track_blocks.call(this, pnblocks)
  end
  def get_audio_block_size(this : IRedbookDiscMaster*, pnblockbytes : Int32*) : HRESULT
    @lpVtbl.value.get_audio_block_size.call(this, pnblockbytes)
  end
  def create_audio_track(this : IRedbookDiscMaster*, nblocks : Int32) : HRESULT
    @lpVtbl.value.create_audio_track.call(this, nblocks)
  end
  def add_audio_track_blocks(this : IRedbookDiscMaster*, pby : UInt8*, cb : Int32) : HRESULT
    @lpVtbl.value.add_audio_track_blocks.call(this, pby, cb)
  end
  def close_audio_track(this : IRedbookDiscMaster*) : HRESULT
    @lpVtbl.value.close_audio_track.call(this)
  end
end
struct LibWin32::IJolietDiscMaster
  def query_interface(this : IJolietDiscMaster*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IJolietDiscMaster*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IJolietDiscMaster*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def get_total_data_blocks(this : IJolietDiscMaster*, pnblocks : Int32*) : HRESULT
    @lpVtbl.value.get_total_data_blocks.call(this, pnblocks)
  end
  def get_used_data_blocks(this : IJolietDiscMaster*, pnblocks : Int32*) : HRESULT
    @lpVtbl.value.get_used_data_blocks.call(this, pnblocks)
  end
  def get_data_block_size(this : IJolietDiscMaster*, pnblockbytes : Int32*) : HRESULT
    @lpVtbl.value.get_data_block_size.call(this, pnblockbytes)
  end
  def add_data(this : IJolietDiscMaster*, pstorage : IStorage, lfileoverwrite : Int32) : HRESULT
    @lpVtbl.value.add_data.call(this, pstorage, lfileoverwrite)
  end
  def get_joliet_properties(this : IJolietDiscMaster*, pppropstg : IPropertyStorage*) : HRESULT
    @lpVtbl.value.get_joliet_properties.call(this, pppropstg)
  end
  def set_joliet_properties(this : IJolietDiscMaster*, ppropstg : IPropertyStorage) : HRESULT
    @lpVtbl.value.set_joliet_properties.call(this, ppropstg)
  end
end
struct LibWin32::IDiscMasterProgressEvents
  def query_interface(this : IDiscMasterProgressEvents*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscMasterProgressEvents*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscMasterProgressEvents*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def query_cancel(this : IDiscMasterProgressEvents*, pbcancel : UInt8*) : HRESULT
    @lpVtbl.value.query_cancel.call(this, pbcancel)
  end
  def notify_pn_p_activity(this : IDiscMasterProgressEvents*) : HRESULT
    @lpVtbl.value.notify_pn_p_activity.call(this)
  end
  def notify_add_progress(this : IDiscMasterProgressEvents*, ncompletedsteps : Int32, ntotalsteps : Int32) : HRESULT
    @lpVtbl.value.notify_add_progress.call(this, ncompletedsteps, ntotalsteps)
  end
  def notify_block_progress(this : IDiscMasterProgressEvents*, ncompleted : Int32, ntotal : Int32) : HRESULT
    @lpVtbl.value.notify_block_progress.call(this, ncompleted, ntotal)
  end
  def notify_track_progress(this : IDiscMasterProgressEvents*, ncurrenttrack : Int32, ntotaltracks : Int32) : HRESULT
    @lpVtbl.value.notify_track_progress.call(this, ncurrenttrack, ntotaltracks)
  end
  def notify_preparing_burn(this : IDiscMasterProgressEvents*, nestimatedseconds : Int32) : HRESULT
    @lpVtbl.value.notify_preparing_burn.call(this, nestimatedseconds)
  end
  def notify_closing_disc(this : IDiscMasterProgressEvents*, nestimatedseconds : Int32) : HRESULT
    @lpVtbl.value.notify_closing_disc.call(this, nestimatedseconds)
  end
  def notify_burn_complete(this : IDiscMasterProgressEvents*, status : HRESULT) : HRESULT
    @lpVtbl.value.notify_burn_complete.call(this, status)
  end
  def notify_erase_complete(this : IDiscMasterProgressEvents*, status : HRESULT) : HRESULT
    @lpVtbl.value.notify_erase_complete.call(this, status)
  end
end
struct LibWin32::IDiscMaster
  def query_interface(this : IDiscMaster*, riid : Guid*, ppvobject : Void**) : HRESULT
    @lpVtbl.value.query_interface.call(this, riid, ppvobject)
  end
  def add_ref(this : IDiscMaster*) : UInt32
    @lpVtbl.value.add_ref.call(this)
  end
  def release(this : IDiscMaster*) : UInt32
    @lpVtbl.value.release.call(this)
  end
  def open(this : IDiscMaster*) : HRESULT
    @lpVtbl.value.open.call(this)
  end
  def enum_disc_master_formats(this : IDiscMaster*, ppenum : IEnumDiscMasterFormats*) : HRESULT
    @lpVtbl.value.enum_disc_master_formats.call(this, ppenum)
  end
  def get_active_disc_master_format(this : IDiscMaster*, lpiid : Guid*) : HRESULT
    @lpVtbl.value.get_active_disc_master_format.call(this, lpiid)
  end
  def set_active_disc_master_format(this : IDiscMaster*, riid : Guid*, ppunk : Void**) : HRESULT
    @lpVtbl.value.set_active_disc_master_format.call(this, riid, ppunk)
  end
  def enum_disc_recorders(this : IDiscMaster*, ppenum : IEnumDiscRecorders*) : HRESULT
    @lpVtbl.value.enum_disc_recorders.call(this, ppenum)
  end
  def get_active_disc_recorder(this : IDiscMaster*, pprecorder : IDiscRecorder*) : HRESULT
    @lpVtbl.value.get_active_disc_recorder.call(this, pprecorder)
  end
  def set_active_disc_recorder(this : IDiscMaster*, precorder : IDiscRecorder) : HRESULT
    @lpVtbl.value.set_active_disc_recorder.call(this, precorder)
  end
  def clear_format_content(this : IDiscMaster*) : HRESULT
    @lpVtbl.value.clear_format_content.call(this)
  end
  def progress_advise(this : IDiscMaster*, pevents : IDiscMasterProgressEvents, pvcookie : LibC::UINT_PTR*) : HRESULT
    @lpVtbl.value.progress_advise.call(this, pevents, pvcookie)
  end
  def progress_unadvise(this : IDiscMaster*, vcookie : LibC::UINT_PTR) : HRESULT
    @lpVtbl.value.progress_unadvise.call(this, vcookie)
  end
  def record_disc(this : IDiscMaster*, bsimulate : UInt8, bejectafterburn : UInt8) : HRESULT
    @lpVtbl.value.record_disc.call(this, bsimulate, bejectafterburn)
  end
  def close(this : IDiscMaster*) : HRESULT
    @lpVtbl.value.close.call(this)
  end
end
